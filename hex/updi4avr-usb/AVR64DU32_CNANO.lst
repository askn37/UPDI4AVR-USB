
/var/folders/mz/_z9vt_y13rdf9tt_4qkvv0k40000gn/T/arduino_build_535437/UPDI4AVR-USB.ino.elf:     file format elf32-avr


Disassembly of section .data:

00806000 <__data_start>:
__data_start():
  806000:	01 55       	subi	r16, 0x51	; 81

00806001 <UPDI::recv_byte(unsigned long)::_set_ptr>:
  806001:	55 08 00 00 00 00                                   U.....

00806007 <UPDI::send_byte(unsigned long, unsigned char)::_set_ptr>:
  806007:	55 48 00 00 00 00                                   UH....

0080600d <UPDI::_set_repeat>:
  80600d:	55 a0 00 55 04                                      U..U.

00806012 <UPDI::_set_ptr24>:
  806012:	55 6a 00 00 00 00                                   Uj....

00806018 <_xclk>:
  806018:	e1 00                                               ..

0080601a <SYS::_updi_bitmap>:
  80601a:	00 00 00 ff ff 7f 55 7e c8 7f 59 fe 55 7e c3 7e     ......U~..Y.U~.~
  80602a:	04 ff 00 30 20 00                                   ...0 .

00806030 <TPI::nvmprog_key>:
  806030:	e0 ff 88 d8 cd 45 ab 89 12                          .....E...

00806039 <UPDI::set_rsd()::_set_rsd>:
  806039:	55 c2 0d                                            U..

0080603c <UPDI::clear_rsd()::_clear_rsd>:
  80603c:	55 c2 05                                            U..

0080603f <UPDI::key_status()::_key_stat>:
  80603f:	55 87                                               U.

00806041 <UPDI::sys_status()::_sys_stat>:
  806041:	55 8b                                               U.

00806043 <UPDI::nvmprog_key>:
  806043:	55 e0 20 67 6f 72 50 4d 56 4e                       U. gorPMVN

0080604d <UPDI::erase_key>:
  80604d:	55 e0 65 73 61 72 45 4d 56 4e                       U.esarEMVN

00806057 <UPDI::urowwrite_key>:
  806057:	55 e0 65 74 26 73 55 4d 56 4e                       U.et&sUMVN

00806061 <UPDI::write_userrow()::_urowstop>:
  806061:	55 c7 20                                            U. 

00806064 <UPDI::write_userrow()::_urowdone>:
  806064:	55 ca 03                                            U..

00806067 <UPDI::connect()::_sib256>:
  806067:	55 e6                                               U.

00806069 <UPDI::connect()::_init>:
  806069:	55 c8 59 55 c3 08 55 c2 05                          U.YU..U..

00806072 <UPDI::sys_reset(bool)::_reset>:
  806072:	55 c8 59 55 c8 00 55 c3 04 00                       U.YU..U...

Disassembly of section .text:

00000000 <__vectors>:
__vectors():
../../../../crt1/gcrt1.S:61
       0:	0d c1       	rjmp	.+538    	; 0x21c <__ctors_end>
       2:	00 00       	nop
../../../../crt1/gcrt1.S:67
       4:	3d c1       	rjmp	.+634    	; 0x280 <__bad_interrupt>
       6:	00 00       	nop
../../../../crt1/gcrt1.S:68
       8:	3b c1       	rjmp	.+630    	; 0x280 <__bad_interrupt>
       a:	00 00       	nop
../../../../crt1/gcrt1.S:69
       c:	39 c1       	rjmp	.+626    	; 0x280 <__bad_interrupt>
       e:	00 00       	nop
../../../../crt1/gcrt1.S:70
      10:	37 c1       	rjmp	.+622    	; 0x280 <__bad_interrupt>
      12:	00 00       	nop
../../../../crt1/gcrt1.S:71
      14:	35 c1       	rjmp	.+618    	; 0x280 <__bad_interrupt>
      16:	00 00       	nop
../../../../crt1/gcrt1.S:72
      18:	33 c1       	rjmp	.+614    	; 0x280 <__bad_interrupt>
      1a:	00 00       	nop
../../../../crt1/gcrt1.S:73
      1c:	31 c1       	rjmp	.+610    	; 0x280 <__bad_interrupt>
      1e:	00 00       	nop
../../../../crt1/gcrt1.S:74
      20:	2f c1       	rjmp	.+606    	; 0x280 <__bad_interrupt>
      22:	00 00       	nop
../../../../crt1/gcrt1.S:75
      24:	2d c1       	rjmp	.+602    	; 0x280 <__bad_interrupt>
      26:	00 00       	nop
../../../../crt1/gcrt1.S:76
      28:	2b c1       	rjmp	.+598    	; 0x280 <__bad_interrupt>
      2a:	00 00       	nop
../../../../crt1/gcrt1.S:77
      2c:	29 c1       	rjmp	.+594    	; 0x280 <__bad_interrupt>
      2e:	00 00       	nop
../../../../crt1/gcrt1.S:78
      30:	27 c1       	rjmp	.+590    	; 0x280 <__bad_interrupt>
      32:	00 00       	nop
../../../../crt1/gcrt1.S:79
      34:	25 c1       	rjmp	.+586    	; 0x280 <__bad_interrupt>
      36:	00 00       	nop
../../../../crt1/gcrt1.S:80
      38:	23 c1       	rjmp	.+582    	; 0x280 <__bad_interrupt>
      3a:	00 00       	nop
../../../../crt1/gcrt1.S:81
      3c:	0c 94 e1 0d 	jmp	0x1bc2	; 0x1bc2 <__vector_15>
../../../../crt1/gcrt1.S:82
      40:	1f c1       	rjmp	.+574    	; 0x280 <__bad_interrupt>
      42:	00 00       	nop
../../../../crt1/gcrt1.S:83
      44:	1d c1       	rjmp	.+570    	; 0x280 <__bad_interrupt>
      46:	00 00       	nop
../../../../crt1/gcrt1.S:84
      48:	1b c1       	rjmp	.+566    	; 0x280 <__bad_interrupt>
      4a:	00 00       	nop
../../../../crt1/gcrt1.S:85
      4c:	0c 94 61 0d 	jmp	0x1ac2	; 0x1ac2 <__vector_19>
../../../../crt1/gcrt1.S:86
      50:	17 c1       	rjmp	.+558    	; 0x280 <__bad_interrupt>
      52:	00 00       	nop
../../../../crt1/gcrt1.S:87
      54:	15 c1       	rjmp	.+554    	; 0x280 <__bad_interrupt>
      56:	00 00       	nop
../../../../crt1/gcrt1.S:88
      58:	13 c1       	rjmp	.+550    	; 0x280 <__bad_interrupt>
      5a:	00 00       	nop
../../../../crt1/gcrt1.S:89
      5c:	11 c1       	rjmp	.+546    	; 0x280 <__bad_interrupt>
      5e:	00 00       	nop
../../../../crt1/gcrt1.S:90
      60:	0c 94 27 0e 	jmp	0x1c4e	; 0x1c4e <__vector_24>
../../../../crt1/gcrt1.S:91
      64:	0d c1       	rjmp	.+538    	; 0x280 <__bad_interrupt>
      66:	00 00       	nop
../../../../crt1/gcrt1.S:92
      68:	0b c1       	rjmp	.+534    	; 0x280 <__bad_interrupt>
      6a:	00 00       	nop
../../../../crt1/gcrt1.S:93
      6c:	09 c1       	rjmp	.+530    	; 0x280 <__bad_interrupt>
      6e:	00 00       	nop
../../../../crt1/gcrt1.S:94
      70:	07 c1       	rjmp	.+526    	; 0x280 <__bad_interrupt>
      72:	00 00       	nop
../../../../crt1/gcrt1.S:95
      74:	05 c1       	rjmp	.+522    	; 0x280 <__bad_interrupt>
      76:	00 00       	nop
../../../../crt1/gcrt1.S:96
      78:	03 c1       	rjmp	.+518    	; 0x280 <__bad_interrupt>
      7a:	00 00       	nop
../../../../crt1/gcrt1.S:97
      7c:	01 c1       	rjmp	.+514    	; 0x280 <__bad_interrupt>
      7e:	00 00       	nop
../../../../crt1/gcrt1.S:98
      80:	ff c0       	rjmp	.+510    	; 0x280 <__bad_interrupt>
      82:	00 00       	nop
../../../../crt1/gcrt1.S:99
      84:	fd c0       	rjmp	.+506    	; 0x280 <__bad_interrupt>
	...

00000088 <__trampolines_end>:
__trampolines_start():
      88:	43 00       	.word	0x0043	; ????
      8a:	44 00       	.word	0x0044	; ????
      8c:	43 00       	.word	0x0043	; ????
      8e:	2d 00       	.word	0x002d	; ????
      90:	41 00       	.word	0x0041	; ????
      92:	43 00       	.word	0x0043	; ????
      94:	4d 00       	.word	0x004d	; ????
      96:	2f 00       	.word	0x002f	; ????
      98:	56 00       	.word	0x0056	; ????
      9a:	43 00       	.word	0x0043	; ????
      9c:	50 00       	.word	0x0050	; ????
	...

000000a0 <USB::mstring>:
      a0:	55 00 50 00 44 00 49 00 34 00 41 00 56 00 52 00     U.P.D.I.4.A.V.R.
      b0:	2d 00 55 00 53 00 42 00 3a 00 41 00 56 00 52 00     -.U.S.B.:.A.V.R.
      c0:	2d 00 44 00 55 00 3a 00 45 00 44 00 42 00 47 00     -.D.U.:.E.D.B.G.
      d0:	2f 00 43 00 4d 00 53 00 49 00 53 00 2d 00 44 00     /.C.M.S.I.S.-.D.
      e0:	41 00 50 00 00 00                                   A.P...

000000e6 <USB::vstring>:
      e6:	4d 00 75 00 6c 00 74 00 69 00 58 00 2e 00 6a 00     M.u.l.t.i.X...j.
      f6:	70 00 20 00 4f 00 53 00 53 00 57 00 2f 00 4f 00     p. .O.S.S.W./.O.
     106:	53 00 48 00 57 00 20 00 50 00 72 00 6f 00 64 00     S.H.W. .P.r.o.d.
     116:	2e 00 00 00                                         ....

0000011a <USB::report_descriptor>:
     11a:	06 00 ff 09 01 a1 01 15 00 26 ff 00 75 08 96 40     .........&..u..@
     12a:	00 09 01 81 02 96 40 00 09 01 91 02 95 04 09 01     ......@.........
     13a:	b1 02 c0                                            ...

0000013d <USB::current_descriptor>:
     13d:	09 02 6b 00 03 01 00 80 32 09 04 00 00 02 03 00     ..k.....2.......
     14d:	00 00 09 21 11 01 00 01 22 23 00 07 05 02 03 40     ...!...."#.....@
     15d:	00 01 07 05 81 03 40 00 01 08 0b 01 02 02 02 01     ......@.........
     16d:	04 09 04 01 00 01 02 02 01 00 05 24 00 10 01 04     ...........$....
     17d:	24 02 06 05 24 06 01 02 05 24 01 03 02 07 05 82     $...$....$......
     18d:	03 10 00 04 09 04 02 00 02 0a 00 00 00 07 05 03     ................
     19d:	02 40 00 00 07 05 83 02 40 00 00                    .@......@..

000001a8 <USB::qualifier_descriptor>:
     1a8:	0a 06 00 02 ef 02 01 40 00 00                       .......@..

000001b2 <USB::device_descriptor>:
     1b2:	12 01 00 02 ef 02 01 40 db 04 15 0b 00 01 01 02     .......@........
     1c2:	03 01                                               ..

000001c4 <JTAG::jtag_physical>:
     1c4:	90 28 00 18 38 00 00 00                             .(..8...

000001cc <JTAG::jtag_version>:
     1cc:	00 01 20 2b 00                                      .. +.

000001d1 <USB::ep_init>:
	...
     1d9:	00 4b 00 00 06 63 00 00 00 7b 00 00 0e 63 00 00     .K...c...{...c..
	...
     1f1:	00 bb 40 00 1e 63 00 00 00 8b 00 00 1e 63 40 00     ..@..c.......c@.
     201:	00 b9 00 00 0e 63 00 00 00 8b 00 00 5e 63 40 00     .....c......^c@.
     211:	02 bb 00 00 9e 63 00 00 00 00 00                    .....c.....

0000021c <__ctors_end>:
__dtors_end():
../../../../crt1/gcrt1.S:230
     21c:	11 24       	eor	r1, r1
../../../../crt1/gcrt1.S:231
     21e:	1f be       	out	0x3f, r1	; 63
../../../../crt1/gcrt1.S:232
     220:	cf ef       	ldi	r28, 0xFF	; 255
../../../../crt1/gcrt1.S:234
     222:	cd bf       	out	0x3d, r28	; 61
../../../../crt1/gcrt1.S:236
     224:	df e7       	ldi	r29, 0x7F	; 127
../../../../crt1/gcrt1.S:237
     226:	de bf       	out	0x3e, r29	; 62

00000228 <setup_mcu()>:
_CLKCTRL_SETUP():
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/modernAVR/0.2.14/cores/modernAVR/api/CLKCTRL_modernAVR.h:301
#else
#assert This internal CPU clock is not supported
#endif

#if defined(_CLKCTRL_FREQSEL_)
  _PROTECTED_WRITE(CLKCTRL_OSCHFCTRLA, _CLKCTRL_FREQSEL_);
     228:	88 ed       	ldi	r24, 0xD8	; 216
     22a:	90 e2       	ldi	r25, 0x20	; 32
     22c:	84 bf       	out	0x34, r24	; 52
     22e:	90 93 68 00 	sts	0x0068, r25	; 0x800068 <__TEXT_REGION_LENGTH__+0x7f0068>
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/modernAVR/0.2.14/cores/modernAVR/api/CLKCTRL_modernAVR.h:313
#endif

#if defined(_CLKCTRL_PDIV_)
  _PROTECTED_WRITE(CLKCTRL_MCLKCTRLB, _CLKCTRL_PDIV_ | CLKCTRL_PEN_bm);
#else
  _PROTECTED_WRITE(CLKCTRL_MCLKCTRLB, 0);
     232:	90 e0       	ldi	r25, 0x00	; 0
     234:	84 bf       	out	0x34, r24	; 52
     236:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__TEXT_REGION_LENGTH__+0x7f0061>
initVariant():
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/modernAVR/0.2.14/variants/avr_du32/variant.h:267
extern "C" {
#endif

inline void initVariant (void) {
  _CLKCTRL_SETUP();
  PORTA.PINCONFIG = PORT_ISC_INPUT_DISABLE_gc;
     23a:	e0 e0       	ldi	r30, 0x00	; 0
     23c:	f4 e0       	ldi	r31, 0x04	; 4
     23e:	84 e0       	ldi	r24, 0x04	; 4
     240:	83 87       	std	Z+11, r24	; 0x0b
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/modernAVR/0.2.14/variants/avr_du32/variant.h:268
  PORTA.PINCTRLUPD = ~0;
     242:	8f ef       	ldi	r24, 0xFF	; 255
     244:	84 87       	std	Z+12, r24	; 0x0c
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/modernAVR/0.2.14/variants/avr_du32/variant.h:269
  PORTC.PINCTRLUPD = ~0;
     246:	80 93 4c 04 	sts	0x044C, r24	; 0x80044c <__TEXT_REGION_LENGTH__+0x7f044c>
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/modernAVR/0.2.14/variants/avr_du32/variant.h:270
  PORTD.PINCTRLUPD = ~0;
     24a:	80 93 6c 04 	sts	0x046C, r24	; 0x80046c <__TEXT_REGION_LENGTH__+0x7f046c>
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/modernAVR/0.2.14/variants/avr_du32/variant.h:271
  PORTF.PINCTRLUPD = ~0;
     24e:	80 93 ac 04 	sts	0x04AC, r24	; 0x8004ac <__TEXT_REGION_LENGTH__+0x7f04ac>

00000252 <__do_copy_data>:
__do_copy_data():
     252:	10 e6       	ldi	r17, 0x60	; 96
     254:	a0 e0       	ldi	r26, 0x00	; 0
     256:	b0 e6       	ldi	r27, 0x60	; 96
     258:	ee e5       	ldi	r30, 0x5E	; 94
     25a:	fb e2       	ldi	r31, 0x2B	; 43
     25c:	02 c0       	rjmp	.+4      	; 0x262 <__do_copy_data+0x10>
     25e:	05 90       	lpm	r0, Z+
     260:	0d 92       	st	X+, r0
     262:	ac 37       	cpi	r26, 0x7C	; 124
     264:	b1 07       	cpc	r27, r17
     266:	d9 f7       	brne	.-10     	; 0x25e <__do_copy_data+0xc>

00000268 <__do_clear_bss>:
__do_clear_bss():
     268:	20 e6       	ldi	r18, 0x60	; 96
     26a:	ac e7       	ldi	r26, 0x7C	; 124
     26c:	b0 e6       	ldi	r27, 0x60	; 96
     26e:	01 c0       	rjmp	.+2      	; 0x272 <.do_clear_bss_start>

00000270 <.do_clear_bss_loop>:
     270:	1d 92       	st	X+, r1

00000272 <.do_clear_bss_start>:
     272:	a5 38       	cpi	r26, 0x85	; 133
     274:	b2 07       	cpc	r27, r18
     276:	e1 f7       	brne	.-8      	; 0x270 <.do_clear_bss_loop>
.do_clear_bss_start():
../../../../crt1/gcrt1.S:314
     278:	0e 94 3c 0e 	call	0x1c78	; 0x1c78 <main>
../../../../crt1/gcrt1.S:315
     27c:	0c 94 ad 15 	jmp	0x2b5a	; 0x2b5a <_exit>

00000280 <__bad_interrupt>:
__vector_22():
../../../../crt1/gcrt1.S:209
     280:	bf ce       	rjmp	.-642    	; 0x0 <__vectors>

00000282 <SYS::send_bitmap(unsigned char const*, unsigned int) [clone .constprop.7]>:
send_bitmap():
/Users/askn/Collaborator/UPDI4AVR-USB/src/sys.cpp:218

  /*** Low level TDAT stream manipulation ***/
  /* UPDI commands are sent from TDAT using only TCA0 and bit manipulation, without switching USART. */
  /* 128kbps is the lowest limit that can be achieved with an 8-bit timer at 32MHz or less. */
  void send_bitmap (const uint8_t _bitmap[], const size_t _length) {
    TCA0_SPLIT_HPER  = TCA0_225K;
     282:	88 e5       	ldi	r24, 0x58	; 88
     284:	80 93 27 0a 	sts	0x0A27, r24	; 0x800a27 <__TEXT_REGION_LENGTH__+0x7f0a27>
/Users/askn/Collaborator/UPDI4AVR-USB/src/sys.cpp:219
    TCA0_SPLIT_CTRLA = TCA_SPLIT_ENABLE_bm | TCA_SPLIT_CLKSEL_DIV1_gc;
     288:	81 e0       	ldi	r24, 0x01	; 1
     28a:	80 93 00 0a 	sts	0x0A00, r24	; 0x800a00 <__TEXT_REGION_LENGTH__+0x7f0a00>
     28e:	90 e0       	ldi	r25, 0x00	; 0
     290:	80 e0       	ldi	r24, 0x00	; 0
/Users/askn/Collaborator/UPDI4AVR-USB/src/sys.cpp:221
    for (uint8_t i = 0; i < _length; i++) {
      uint8_t _d = (_bitmap[i >> 3]) >> (i & 7);
     292:	fc 01       	movw	r30, r24
     294:	23 e0       	ldi	r18, 0x03	; 3
     296:	f5 95       	asr	r31
     298:	e7 95       	ror	r30
     29a:	2a 95       	dec	r18
     29c:	e1 f7       	brne	.-8      	; 0x296 <SYS::send_bitmap(unsigned char const*, unsigned int) [clone .constprop.7]+0x14>
     29e:	e6 5e       	subi	r30, 0xE6	; 230
     2a0:	ff 49       	sbci	r31, 0x9F	; 159
     2a2:	20 81       	ld	r18, Z
     2a4:	30 e0       	ldi	r19, 0x00	; 0
     2a6:	48 2f       	mov	r20, r24
     2a8:	47 70       	andi	r20, 0x07	; 7
     2aa:	02 c0       	rjmp	.+4      	; 0x2b0 <SYS::send_bitmap(unsigned char const*, unsigned int) [clone .constprop.7]+0x2e>
     2ac:	35 95       	asr	r19
     2ae:	27 95       	ror	r18
     2b0:	4a 95       	dec	r20
     2b2:	e2 f7       	brpl	.-8      	; 0x2ac <SYS::send_bitmap(unsigned char const*, unsigned int) [clone .constprop.7]+0x2a>
/Users/askn/Collaborator/UPDI4AVR-USB/src/sys.cpp:222
      loop_until_bit_is_set(TCA0_SPLIT_INTFLAGS, TCA_SPLIT_HUNF_bp);
     2b4:	40 91 0b 0a 	lds	r20, 0x0A0B	; 0x800a0b <__TEXT_REGION_LENGTH__+0x7f0a0b>
     2b8:	41 ff       	sbrs	r20, 1
     2ba:	fc cf       	rjmp	.-8      	; 0x2b4 <SYS::send_bitmap(unsigned char const*, unsigned int) [clone .constprop.7]+0x32>
/Users/askn/Collaborator/UPDI4AVR-USB/src/sys.cpp:223
      if (bit_is_set(_d, 0))
     2bc:	20 ff       	sbrs	r18, 0
     2be:	0d c0       	rjmp	.+26     	; 0x2da <SYS::send_bitmap(unsigned char const*, unsigned int) [clone .constprop.7]+0x58>
/Users/askn/Collaborator/UPDI4AVR-USB/src/sys.cpp:224
        openDrainWriteMacro(PIN_PG_TDAT, HIGH);
     2c0:	00 98       	cbi	0x00, 0	; 0
/Users/askn/Collaborator/UPDI4AVR-USB/src/sys.cpp:227
      else
        openDrainWriteMacro(PIN_PG_TDAT, LOW);
      bit_set(TCA0_SPLIT_INTFLAGS, TCA_SPLIT_HUNF_bp);
     2c2:	20 91 0b 0a 	lds	r18, 0x0A0B	; 0x800a0b <__TEXT_REGION_LENGTH__+0x7f0a0b>
     2c6:	22 60       	ori	r18, 0x02	; 2
     2c8:	20 93 0b 0a 	sts	0x0A0B, r18	; 0x800a0b <__TEXT_REGION_LENGTH__+0x7f0a0b>
     2cc:	01 96       	adiw	r24, 0x01	; 1
/Users/askn/Collaborator/UPDI4AVR-USB/src/sys.cpp:220
  /* UPDI commands are sent from TDAT using only TCA0 and bit manipulation, without switching USART. */
  /* 128kbps is the lowest limit that can be achieved with an 8-bit timer at 32MHz or less. */
  void send_bitmap (const uint8_t _bitmap[], const size_t _length) {
    TCA0_SPLIT_HPER  = TCA0_225K;
    TCA0_SPLIT_CTRLA = TCA_SPLIT_ENABLE_bm | TCA_SPLIT_CLKSEL_DIV1_gc;
    for (uint8_t i = 0; i < _length; i++) {
     2ce:	80 39       	cpi	r24, 0x90	; 144
     2d0:	91 05       	cpc	r25, r1
     2d2:	f9 f6       	brne	.-66     	; 0x292 <SYS::send_bitmap(unsigned char const*, unsigned int) [clone .constprop.7]+0x10>
/Users/askn/Collaborator/UPDI4AVR-USB/src/sys.cpp:229
        openDrainWriteMacro(PIN_PG_TDAT, HIGH);
      else
        openDrainWriteMacro(PIN_PG_TDAT, LOW);
      bit_set(TCA0_SPLIT_INTFLAGS, TCA_SPLIT_HUNF_bp);
    }
    TCA0_SPLIT_CTRLA = 0;
     2d4:	10 92 00 0a 	sts	0x0A00, r1	; 0x800a00 <__TEXT_REGION_LENGTH__+0x7f0a00>
/Users/askn/Collaborator/UPDI4AVR-USB/src/sys.cpp:230
  }
     2d8:	08 95       	ret
/Users/askn/Collaborator/UPDI4AVR-USB/src/sys.cpp:226
      uint8_t _d = (_bitmap[i >> 3]) >> (i & 7);
      loop_until_bit_is_set(TCA0_SPLIT_INTFLAGS, TCA_SPLIT_HUNF_bp);
      if (bit_is_set(_d, 0))
        openDrainWriteMacro(PIN_PG_TDAT, HIGH);
      else
        openDrainWriteMacro(PIN_PG_TDAT, LOW);
     2da:	00 9a       	sbi	0x00, 0	; 0
     2dc:	f2 cf       	rjmp	.-28     	; 0x2c2 <SYS::send_bitmap(unsigned char const*, unsigned int) [clone .constprop.7]+0x40>

000002de <USB::ep_cdo_listen()>:
ep_cdo_listen():
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:350
    loop_until_bit_is_clear(USB0_INTFLAGSB, USB_RMWBUSY_bp);
    USB_EP_STATUS_CLR(USB_EP_CDI) = ~USB_TOGGLE_bm;
  }

  void ep_cdo_listen (void) {
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
     2de:	8f b7       	in	r24, 0x3f	; 63
__iCliRetVal():
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/tools/avr-gcc/7.3.0-avr8-gnu-toolchain/avr/include/util/atomic.h:50
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     2e0:	f8 94       	cli
ep_cdo_listen():
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:351
      _recv_count = 0;
     2e2:	10 92 21 64 	sts	0x6421, r1	; 0x806421 <_recv_count>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:352
      EP_CDO.CNT  = 0;
     2e6:	10 92 60 64 	sts	0x6460, r1	; 0x806460 <EP_TABLE+0x3a>
     2ea:	10 92 61 64 	sts	0x6461, r1	; 0x806461 <EP_TABLE+0x3b>
__iRestore():
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/tools/avr-gcc/7.3.0-avr8-gnu-toolchain/avr/include/util/atomic.h:70
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     2ee:	8f bf       	out	0x3f, r24	; 63
ep_cdo_listen():
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:354
    }
    loop_until_bit_is_clear(USB0_INTFLAGSB, USB_RMWBUSY_bp);
     2f0:	80 91 0b 0c 	lds	r24, 0x0C0B	; 0x800c0b <__TEXT_REGION_LENGTH__+0x7f0c0b>
     2f4:	82 fd       	sbrc	r24, 2
     2f6:	fc cf       	rjmp	.-8      	; 0x2f0 <USB::ep_cdo_listen()+0x12>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:355
    USB_EP_STATUS_CLR(USB_EP_CDO) = ~USB_TOGGLE_bm;
     2f8:	8e ef       	ldi	r24, 0xFE	; 254
     2fa:	80 93 4c 0c 	sts	0x0C4C, r24	; 0x800c4c <__TEXT_REGION_LENGTH__+0x7f0c4c>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:356
  }
     2fe:	08 95       	ret

00000300 <USB::ep_cdi_listen()>:
ep_cdi_listen():
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:325
  #else
    /* If our math is correct, then if each side of the double */
    /* buffer can complete the transmission of 64 characters   */
    /* in 1 ms, then it can support 640 kbps. */
    if (bit_is_clear(GPCONF, GPCONF_OPN_bp)
     || bit_is_clear(EP_CDI.STATUS, USB_BUSNAK_bp)) {
     300:	e4 9b       	sbis	0x1c, 4	; 28
     302:	0b c0       	rjmp	.+22     	; 0x31a <USB::ep_cdi_listen()+0x1a>
     304:	80 91 66 64 	lds	r24, 0x6466	; 0x806466 <EP_TABLE+0x40>
     308:	81 ff       	sbrs	r24, 1
     30a:	07 c0       	rjmp	.+14     	; 0x31a <USB::ep_cdi_listen()+0x1a>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:336
  #endif
    D2PRINTF(" VI=%02X:", _send_count);
    D2PRINTHEX(bit_is_set(GPCONF, GPCONF_DBL_bp)
      ? &EP_MEM.cdi_data[64]
      : &EP_MEM.cdi_data[0], _send_count);
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
     30c:	2f b7       	in	r18, 0x3f	; 63
__iCliRetVal():
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/tools/avr-gcc/7.3.0-avr8-gnu-toolchain/avr/include/util/atomic.h:50
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     30e:	f8 94       	cli
ep_cdi_listen():
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:338
      EP_CDI.DATAPTR = bit_is_set(GPCONF, GPCONF_DBL_bp)
        ? (register16_t)&EP_MEM.cdi_data[64]
     310:	e2 99       	sbic	0x1c, 2	; 28
     312:	0a c0       	rjmp	.+20     	; 0x328 <USB::ep_cdi_listen()+0x28>
     314:	8e e9       	ldi	r24, 0x9E	; 158
     316:	93 e6       	ldi	r25, 0x63	; 99
     318:	09 c0       	rjmp	.+18     	; 0x32c <USB::ep_cdi_listen()+0x2c>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:328
    /* in 1 ms, then it can support 640 kbps. */
    if (bit_is_clear(GPCONF, GPCONF_OPN_bp)
     || bit_is_clear(EP_CDI.STATUS, USB_BUSNAK_bp)) {
      /* No sending allowed while port is closed.  */
      /* If the buffer overflows, it is discarded. */
      if (_send_count == 64) _send_count = 0;
     31a:	80 91 22 64 	lds	r24, 0x6422	; 0x806422 <_send_count>
     31e:	80 34       	cpi	r24, 0x40	; 64
     320:	11 f5       	brne	.+68     	; 0x366 <USB::ep_cdi_listen()+0x66>
     322:	10 92 22 64 	sts	0x6422, r1	; 0x806422 <_send_count>
     326:	08 95       	ret
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:338
    D2PRINTHEX(bit_is_set(GPCONF, GPCONF_DBL_bp)
      ? &EP_MEM.cdi_data[64]
      : &EP_MEM.cdi_data[0], _send_count);
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
      EP_CDI.DATAPTR = bit_is_set(GPCONF, GPCONF_DBL_bp)
        ? (register16_t)&EP_MEM.cdi_data[64]
     328:	8e ed       	ldi	r24, 0xDE	; 222
     32a:	93 e6       	ldi	r25, 0x63	; 99
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:337
    D2PRINTF(" VI=%02X:", _send_count);
    D2PRINTHEX(bit_is_set(GPCONF, GPCONF_DBL_bp)
      ? &EP_MEM.cdi_data[64]
      : &EP_MEM.cdi_data[0], _send_count);
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
      EP_CDI.DATAPTR = bit_is_set(GPCONF, GPCONF_DBL_bp)
     32c:	80 93 6a 64 	sts	0x646A, r24	; 0x80646a <EP_TABLE+0x44>
     330:	90 93 6b 64 	sts	0x646B, r25	; 0x80646b <EP_TABLE+0x45>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:340
        ? (register16_t)&EP_MEM.cdi_data[64]
        : (register16_t)&EP_MEM.cdi_data[0];
      EP_CDI.CNT = _send_count;
     334:	80 91 22 64 	lds	r24, 0x6422	; 0x806422 <_send_count>
     338:	90 e0       	ldi	r25, 0x00	; 0
     33a:	80 93 68 64 	sts	0x6468, r24	; 0x806468 <EP_TABLE+0x42>
     33e:	90 93 69 64 	sts	0x6469, r25	; 0x806469 <EP_TABLE+0x43>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:341
      EP_CDI.MCNT = 0;
     342:	10 92 6c 64 	sts	0x646C, r1	; 0x80646c <EP_TABLE+0x46>
     346:	10 92 6d 64 	sts	0x646D, r1	; 0x80646d <EP_TABLE+0x47>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:342
      _send_count = 0;
     34a:	10 92 22 64 	sts	0x6422, r1	; 0x806422 <_send_count>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:343
      GPCONF ^= GPCONF_DBL_bm;
     34e:	8c b3       	in	r24, 0x1c	; 28
     350:	94 e0       	ldi	r25, 0x04	; 4
     352:	89 27       	eor	r24, r25
     354:	8c bb       	out	0x1c, r24	; 28
__iRestore():
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/tools/avr-gcc/7.3.0-avr8-gnu-toolchain/avr/include/util/atomic.h:70
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     356:	2f bf       	out	0x3f, r18	; 63
ep_cdi_listen():
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:345
    }
    loop_until_bit_is_clear(USB0_INTFLAGSB, USB_RMWBUSY_bp);
     358:	80 91 0b 0c 	lds	r24, 0x0C0B	; 0x800c0b <__TEXT_REGION_LENGTH__+0x7f0c0b>
     35c:	82 fd       	sbrc	r24, 2
     35e:	fc cf       	rjmp	.-8      	; 0x358 <USB::ep_cdi_listen()+0x58>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:346
    USB_EP_STATUS_CLR(USB_EP_CDI) = ~USB_TOGGLE_bm;
     360:	8e ef       	ldi	r24, 0xFE	; 254
     362:	80 93 4e 0c 	sts	0x0C4E, r24	; 0x800c4e <__TEXT_REGION_LENGTH__+0x7f0c4e>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:347
  }
     366:	08 95       	ret

00000368 <USB::ep_cci_listen()>:
ep_cci_listen():
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:292
    loop_until_bit_is_clear(USB0_INTFLAGSB, USB_RMWBUSY_bp);
    USB_EP_STATUS_CLR(USB_EP_DPO) = ~USB_TOGGLE_bm;
  }

  void ep_cci_listen (void) {
    EP_CCI.CNT = 10;
     368:	8a e0       	ldi	r24, 0x0A	; 10
     36a:	90 e0       	ldi	r25, 0x00	; 0
     36c:	80 93 58 64 	sts	0x6458, r24	; 0x806458 <EP_TABLE+0x32>
     370:	90 93 59 64 	sts	0x6459, r25	; 0x806459 <EP_TABLE+0x33>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:293
    EP_CCI.MCNT = 0;
     374:	10 92 5c 64 	sts	0x645C, r1	; 0x80645c <EP_TABLE+0x36>
     378:	10 92 5d 64 	sts	0x645D, r1	; 0x80645d <EP_TABLE+0x37>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:294
    loop_until_bit_is_clear(USB0_INTFLAGSB, USB_RMWBUSY_bp);
     37c:	80 91 0b 0c 	lds	r24, 0x0C0B	; 0x800c0b <__TEXT_REGION_LENGTH__+0x7f0c0b>
     380:	82 fd       	sbrc	r24, 2
     382:	fc cf       	rjmp	.-8      	; 0x37c <USB::ep_cci_listen()+0x14>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:295
    USB_EP_STATUS_CLR(USB_EP_CCI) = ~USB_TOGGLE_bm;
     384:	8e ef       	ldi	r24, 0xFE	; 254
     386:	80 93 4a 0c 	sts	0x0C4A, r24	; 0x800c4a <__TEXT_REGION_LENGTH__+0x7f0c4a>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:296
  }
     38a:	08 95       	ret

0000038c <USB::ep_res_listen()>:
ep_res_listen():
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:273
    loop_until_bit_is_clear(USB0_INTFLAGSB, USB_RMWBUSY_bp);
    USB_EP_STATUS_CLR(USB_EP_REQ) = ~USB_TOGGLE_bm;
  }

  void ep_res_listen (void) {
    EP_RES.MCNT = 0;
     38c:	10 92 3c 64 	sts	0x643C, r1	; 0x80643c <EP_TABLE+0x16>
     390:	10 92 3d 64 	sts	0x643D, r1	; 0x80643d <EP_TABLE+0x17>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:274
    loop_until_bit_is_clear(USB0_INTFLAGSB, USB_RMWBUSY_bp);
     394:	80 91 0b 0c 	lds	r24, 0x0C0B	; 0x800c0b <__TEXT_REGION_LENGTH__+0x7f0c0b>
     398:	82 fd       	sbrc	r24, 2
     39a:	fc cf       	rjmp	.-8      	; 0x394 <USB::ep_res_listen()+0x8>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:275
    USB_EP_STATUS_CLR(USB_EP_RES) = ~USB_TOGGLE_bm;
     39c:	8e ef       	ldi	r24, 0xFE	; 254
     39e:	80 93 42 0c 	sts	0x0C42, r24	; 0x800c42 <__TEXT_REGION_LENGTH__+0x7f0c42>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:276
  }
     3a2:	08 95       	ret

000003a4 <USB::ep_req_listen()>:
ep_req_listen():
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:267
  void ep_cci_pending (void) { loop_until_bit_is_set(EP_CCI.STATUS, USB_BUSNAK_bp); }
  void ep_cdo_pending (void) { loop_until_bit_is_set(EP_CDO.STATUS, USB_BUSNAK_bp); }
  void ep_cdi_pending (void) { loop_until_bit_is_set(EP_CDI.STATUS, USB_BUSNAK_bp); }

  void ep_req_listen (void) {
    EP_REQ.CNT = 0;
     3a4:	10 92 30 64 	sts	0x6430, r1	; 0x806430 <EP_TABLE+0xa>
     3a8:	10 92 31 64 	sts	0x6431, r1	; 0x806431 <EP_TABLE+0xb>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:268
    loop_until_bit_is_clear(USB0_INTFLAGSB, USB_RMWBUSY_bp);
     3ac:	80 91 0b 0c 	lds	r24, 0x0C0B	; 0x800c0b <__TEXT_REGION_LENGTH__+0x7f0c0b>
     3b0:	82 fd       	sbrc	r24, 2
     3b2:	fc cf       	rjmp	.-8      	; 0x3ac <USB::ep_req_listen()+0x8>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:269
    USB_EP_STATUS_CLR(USB_EP_REQ) = ~USB_TOGGLE_bm;
     3b4:	8e ef       	ldi	r24, 0xFE	; 254
     3b6:	80 93 40 0c 	sts	0x0C40, r24	; 0x800c40 <__TEXT_REGION_LENGTH__+0x7f0c40>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:270
  }
     3ba:	08 95       	ret

000003bc <USART::drain(unsigned int)>:
drain():
/Users/askn/Collaborator/UPDI4AVR-USB/src/usart.cpp:41
    return _baud;
  }

  void drain (size_t _delay) {
    do {
      if (bit_is_set(USART0_STATUS, USART_RXCIF_bp)) {
     3bc:	20 91 04 08 	lds	r18, 0x0804	; 0x800804 <__TEXT_REGION_LENGTH__+0x7f0804>
     3c0:	27 ff       	sbrs	r18, 7
     3c2:	04 c0       	rjmp	.+8      	; 0x3cc <USART::drain(unsigned int)+0x10>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usart.cpp:45
        __asm__ __volatile__ (
          "LDS R0, 0x0801\n"  /* drop USART0_RXDATAH */
          "LDS R0, 0x0800\n"  /* drop USART0_RXDATAL */
        );
     3c4:	00 90 01 08 	lds	r0, 0x0801	; 0x800801 <__TEXT_REGION_LENGTH__+0x7f0801>
     3c8:	00 90 00 08 	lds	r0, 0x0800	; 0x800800 <__TEXT_REGION_LENGTH__+0x7f0800>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usart.cpp:47
      }
    } while (--_delay);
     3cc:	01 97       	sbiw	r24, 0x01	; 1
     3ce:	b1 f7       	brne	.-20     	; 0x3bc <USART::drain(unsigned int)>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usart.cpp:48
  }
     3d0:	08 95       	ret

000003d2 <USART::calk_baud_khz(unsigned int)>:
calk_baud_khz():
/Users/askn/Collaborator/UPDI4AVR-USB/src/usart.cpp:33
    pinModeMacro(PIN_PG_TRST, INPUT_PULLUP);  /* USART0_ALT3 or USART0_DEFAULT */
  }

  /*** Calculate the baud rate for VCP asynchronous mode. ***/
  uint16_t calk_baud_khz (uint16_t _khz) {
    uint32_t _baud = ((F_CPU / 1000L * 8L) / _khz + 1) / 2;
     3d2:	9c 01       	movw	r18, r24
     3d4:	50 e0       	ldi	r21, 0x00	; 0
     3d6:	40 e0       	ldi	r20, 0x00	; 0
     3d8:	60 e0       	ldi	r22, 0x00	; 0
     3da:	71 e7       	ldi	r23, 0x71	; 113
     3dc:	82 e0       	ldi	r24, 0x02	; 2
     3de:	90 e0       	ldi	r25, 0x00	; 0
     3e0:	0e 94 74 15 	call	0x2ae8	; 0x2ae8 <__divmodsi4>
     3e4:	da 01       	movw	r26, r20
     3e6:	c9 01       	movw	r24, r18
     3e8:	01 96       	adiw	r24, 0x01	; 1
     3ea:	a1 1d       	adc	r26, r1
     3ec:	b1 1d       	adc	r27, r1
     3ee:	b5 95       	asr	r27
     3f0:	a7 95       	ror	r26
     3f2:	97 95       	ror	r25
     3f4:	87 95       	ror	r24
/Users/askn/Collaborator/UPDI4AVR-USB/src/usart.cpp:34
    if (_baud < 64) _baud = 64;
     3f6:	80 34       	cpi	r24, 0x40	; 64
     3f8:	91 05       	cpc	r25, r1
     3fa:	a1 05       	cpc	r26, r1
     3fc:	b1 05       	cpc	r27, r1
     3fe:	54 f0       	brlt	.+20     	; 0x414 <__BOOT_SIGNATURE_REGION_LENGTH__+0x14>
     400:	00 97       	sbiw	r24, 0x00	; 0
     402:	21 e0       	ldi	r18, 0x01	; 1
     404:	a2 07       	cpc	r26, r18
     406:	b1 05       	cpc	r27, r1
     408:	48 f0       	brcs	.+18     	; 0x41c <__BOOT_SIGNATURE_REGION_LENGTH__+0x1c>
     40a:	8f ef       	ldi	r24, 0xFF	; 255
     40c:	9f ef       	ldi	r25, 0xFF	; 255
     40e:	a0 e0       	ldi	r26, 0x00	; 0
     410:	b0 e0       	ldi	r27, 0x00	; 0
     412:	08 95       	ret
     414:	80 e4       	ldi	r24, 0x40	; 64
     416:	90 e0       	ldi	r25, 0x00	; 0
     418:	a0 e0       	ldi	r26, 0x00	; 0
     41a:	b0 e0       	ldi	r27, 0x00	; 0
/Users/askn/Collaborator/UPDI4AVR-USB/src/usart.cpp:37
    else if (_baud > 0xFFFFU) _baud = 0xFFFF;
    return _baud;
  }
     41c:	08 95       	ret

0000041e <NVM::V1::prog_init()>:
prog_init():
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv1.cpp:30
 * This file is a template for the future.
 */

namespace NVM::V1 {

  size_t prog_init (void) { return 0; }
     41e:	90 e0       	ldi	r25, 0x00	; 0
     420:	80 e0       	ldi	r24, 0x00	; 0
     422:	08 95       	ret

00000424 <UPDI::recv()>:
recv():
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:72
    send(0x00);
    USART0_BAUD = USART::calk_baud_khz(_xclk);
  }

  bool recv (void) {
    loop_until_bit_is_set(USART0_STATUS, USART_RXCIF_bp);
     424:	80 91 04 08 	lds	r24, 0x0804	; 0x800804 <__TEXT_REGION_LENGTH__+0x7f0804>
     428:	87 ff       	sbrs	r24, 7
     42a:	fc cf       	rjmp	.-8      	; 0x424 <UPDI::recv()>
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:73
    RXSTAT = USART0_RXDATAH ^ 0x80;
     42c:	80 91 01 08 	lds	r24, 0x0801	; 0x800801 <__TEXT_REGION_LENGTH__+0x7f0801>
     430:	80 58       	subi	r24, 0x80	; 128
     432:	8e bb       	out	0x1e, r24	; 30
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:74
    RXDATA = USART0_RXDATAL;
     434:	80 91 00 08 	lds	r24, 0x0800	; 0x800800 <__TEXT_REGION_LENGTH__+0x7f0800>
     438:	8f bb       	out	0x1f, r24	; 31
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:75
    return RXSTAT == 0 || send_break();
     43a:	8e b3       	in	r24, 0x1e	; 30
     43c:	88 23       	and	r24, r24
     43e:	11 f1       	breq	.+68     	; 0x484 <UPDI::recv()+0x60>
send_break():
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:57
    0x55, 0x04        /* LD,ST PTR++ DATA1,2 */
  };

  bool send_break (void) {
    D2PRINTF("<BRK>");
    USART0_BAUD = USART0_BAUD + (USART0_BAUD >> 2);
     440:	20 91 08 08 	lds	r18, 0x0808	; 0x800808 <__TEXT_REGION_LENGTH__+0x7f0808>
     444:	30 91 09 08 	lds	r19, 0x0809	; 0x800809 <__TEXT_REGION_LENGTH__+0x7f0809>
     448:	80 91 08 08 	lds	r24, 0x0808	; 0x800808 <__TEXT_REGION_LENGTH__+0x7f0808>
     44c:	90 91 09 08 	lds	r25, 0x0809	; 0x800809 <__TEXT_REGION_LENGTH__+0x7f0809>
     450:	96 95       	lsr	r25
     452:	87 95       	ror	r24
     454:	96 95       	lsr	r25
     456:	87 95       	ror	r24
     458:	82 0f       	add	r24, r18
     45a:	93 1f       	adc	r25, r19
     45c:	80 93 08 08 	sts	0x0808, r24	; 0x800808 <__TEXT_REGION_LENGTH__+0x7f0808>
     460:	90 93 09 08 	sts	0x0809, r25	; 0x800809 <__TEXT_REGION_LENGTH__+0x7f0809>
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:58
    send(0x00);
     464:	80 e0       	ldi	r24, 0x00	; 0
     466:	10 d0       	rcall	.+32     	; 0x488 <UPDI::send(unsigned char)>
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:59
    USART0_BAUD = USART::calk_baud_khz(_xclk);
     468:	80 91 18 60 	lds	r24, 0x6018	; 0x806018 <_xclk>
     46c:	90 91 19 60 	lds	r25, 0x6019	; 0x806019 <_xclk+0x1>
     470:	b0 df       	rcall	.-160    	; 0x3d2 <USART::calk_baud_khz(unsigned int)>
     472:	80 93 08 08 	sts	0x0808, r24	; 0x800808 <__TEXT_REGION_LENGTH__+0x7f0808>
     476:	90 93 09 08 	sts	0x0809, r25	; 0x800809 <__TEXT_REGION_LENGTH__+0x7f0809>
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:60
    USART::drain();
     47a:	90 e0       	ldi	r25, 0x00	; 0
     47c:	80 e0       	ldi	r24, 0x00	; 0
     47e:	9e df       	rcall	.-196    	; 0x3bc <USART::drain(unsigned int)>
     480:	80 e0       	ldi	r24, 0x00	; 0
     482:	08 95       	ret
recv():
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:75

  bool recv (void) {
    loop_until_bit_is_set(USART0_STATUS, USART_RXCIF_bp);
    RXSTAT = USART0_RXDATAH ^ 0x80;
    RXDATA = USART0_RXDATAL;
    return RXSTAT == 0 || send_break();
     484:	81 e0       	ldi	r24, 0x01	; 1
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:76
  }
     486:	08 95       	ret

00000488 <UPDI::send(unsigned char)>:
send():
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:90

  bool is_ack (void) {
    return recv() && 0x40 == RXDATA;
  }

  bool send (const uint8_t _data) {
     488:	cf 93       	push	r28
     48a:	c8 2f       	mov	r28, r24
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:91
    loop_until_bit_is_set(USART0_STATUS, USART_DREIF_bp);
     48c:	80 91 04 08 	lds	r24, 0x0804	; 0x800804 <__TEXT_REGION_LENGTH__+0x7f0804>
     490:	85 ff       	sbrs	r24, 5
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:92
    USART0_TXDATAL = _data;
     492:	fc cf       	rjmp	.-8      	; 0x48c <UPDI::send(unsigned char)+0x4>
     494:	c0 93 02 08 	sts	0x0802, r28	; 0x800802 <__TEXT_REGION_LENGTH__+0x7f0802>
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:93
    return recv() && _data == RXDATA;
     498:	c5 df       	rcall	.-118    	; 0x424 <UPDI::recv()>
     49a:	88 23       	and	r24, r24
     49c:	21 f0       	breq	.+8      	; 0x4a6 <UPDI::send(unsigned char)+0x1e>
     49e:	9f b3       	in	r25, 0x1f	; 31
     4a0:	81 e0       	ldi	r24, 0x01	; 1
     4a2:	9c 13       	cpse	r25, r28
     4a4:	80 e0       	ldi	r24, 0x00	; 0
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:94
  }
     4a6:	cf 91       	pop	r28
     4a8:	08 95       	ret

000004aa <UPDI::send_bytes(unsigned char const*, unsigned int)>:
send_bytes():
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:96

  bool send_bytes (const uint8_t* _data, size_t _len) {
     4aa:	0f 93       	push	r16
     4ac:	1f 93       	push	r17
     4ae:	cf 93       	push	r28
     4b0:	df 93       	push	r29
     4b2:	eb 01       	movw	r28, r22
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:98
    do {
      if (!send(*_data++)) return false;
     4b4:	8c 01       	movw	r16, r24
     4b6:	f8 01       	movw	r30, r16
     4b8:	81 91       	ld	r24, Z+
     4ba:	8f 01       	movw	r16, r30
     4bc:	e5 df       	rcall	.-54     	; 0x488 <UPDI::send(unsigned char)>
     4be:	88 23       	and	r24, r24
     4c0:	11 f0       	breq	.+4      	; 0x4c6 <UPDI::send_bytes(unsigned char const*, unsigned int)+0x1c>
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:99
    } while (--_len);
     4c2:	21 97       	sbiw	r28, 0x01	; 1
     4c4:	c1 f7       	brne	.-16     	; 0x4b6 <UPDI::send_bytes(unsigned char const*, unsigned int)+0xc>
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:101
    return true;
  }
     4c6:	df 91       	pop	r29
     4c8:	cf 91       	pop	r28
     4ca:	1f 91       	pop	r17
     4cc:	0f 91       	pop	r16
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:214
    return send_bytes(_key_stat, 2) && recv();
  }

  bool sys_status (void) {
    const static uint8_t _sys_stat[] = {0x55, 0x8B};
    return send_bytes(_sys_stat, 2) && recv();
     4ce:	08 95       	ret

000004d0 <UPDI::sys_status()>:
sys_status():
     4d0:	62 e0       	ldi	r22, 0x02	; 2
     4d2:	70 e0       	ldi	r23, 0x00	; 0
     4d4:	81 e4       	ldi	r24, 0x41	; 65
     4d6:	90 e6       	ldi	r25, 0x60	; 96
     4d8:	e8 df       	rcall	.-48     	; 0x4aa <UPDI::send_bytes(unsigned char const*, unsigned int)>
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:110
  bool recv_byte (uint32_t _dwAddr) {
    static uint8_t _set_ptr[] = {
      0x55, 0x08, 0, 0, 0, 0  /* LDS ADDR3 DATA1 */
    };
    _CAPS32(_set_ptr[2])->dword = _dwAddr;
    return send_bytes(_set_ptr, 5) && recv();
     4da:	81 11       	cpse	r24, r1
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:215
  }

  bool sys_status (void) {
    const static uint8_t _sys_stat[] = {0x55, 0x8B};
    return send_bytes(_sys_stat, 2) && recv();
  }
     4dc:	a3 cf       	rjmp	.-186    	; 0x424 <UPDI::recv()>
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:209
    return send_byte(0x1000, _nvmcmd);  /* NVMCTRL_CTRLA */
  }

  bool key_status (void) {
    const static uint8_t _key_stat[] = {0x55, 0x87};
    return send_bytes(_key_stat, 2) && recv();
     4de:	80 e0       	ldi	r24, 0x00	; 0
     4e0:	08 95       	ret

000004e2 <UPDI::key_status()>:
key_status():
     4e2:	62 e0       	ldi	r22, 0x02	; 2
     4e4:	70 e0       	ldi	r23, 0x00	; 0
     4e6:	8f e3       	ldi	r24, 0x3F	; 63
     4e8:	90 e6       	ldi	r25, 0x60	; 96
     4ea:	df df       	rcall	.-66     	; 0x4aa <UPDI::send_bytes(unsigned char const*, unsigned int)>
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:110
  bool recv_byte (uint32_t _dwAddr) {
    static uint8_t _set_ptr[] = {
      0x55, 0x08, 0, 0, 0, 0  /* LDS ADDR3 DATA1 */
    };
    _CAPS32(_set_ptr[2])->dword = _dwAddr;
    return send_bytes(_set_ptr, 5) && recv();
     4ec:	81 11       	cpse	r24, r1
     4ee:	9a cf       	rjmp	.-204    	; 0x424 <UPDI::recv()>
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:210
  }

  bool key_status (void) {
    const static uint8_t _key_stat[] = {0x55, 0x87};
    return send_bytes(_key_stat, 2) && recv();
  }
     4f0:	80 e0       	ldi	r24, 0x00	; 0
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:217
  bool sys_status (void) {
    const static uint8_t _sys_stat[] = {0x55, 0x8B};
    return send_bytes(_sys_stat, 2) && recv();
  }

  bool set_nvmprog_key (bool _reset = true) {
     4f2:	08 95       	ret

000004f4 <UPDI::set_nvmprog_key(bool)>:
set_nvmprog_key():
     4f4:	cf 93       	push	r28
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:219
    D1PRINTF(" PROG_KEY\r\n");
    if (!send_bytes(nvmprog_key, sizeof(nvmprog_key))) return false;
     4f6:	df 93       	push	r29
     4f8:	d8 2f       	mov	r29, r24
     4fa:	6a e0       	ldi	r22, 0x0A	; 10
     4fc:	70 e0       	ldi	r23, 0x00	; 0
     4fe:	83 e4       	ldi	r24, 0x43	; 67
     500:	90 e6       	ldi	r25, 0x60	; 96
     502:	d3 df       	rcall	.-90     	; 0x4aa <UPDI::send_bytes(unsigned char const*, unsigned int)>
     504:	c8 2f       	mov	r28, r24
     506:	88 23       	and	r24, r24
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:220
    do { key_status(); } while(bit_is_clear(RXDATA, 4));  /* wait set NVMPROG */
     508:	61 f0       	breq	.+24     	; 0x522 <UPDI::set_nvmprog_key(bool)+0x2e>
     50a:	eb df       	rcall	.-42     	; 0x4e2 <UPDI::key_status()>
     50c:	fc 9b       	sbis	0x1f, 4	; 31
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:222
    D1PRINTF(" KEY=%02X\r\n", RXDATA);
    return _reset ? sys_reset(false) : true;
     50e:	fd cf       	rjmp	.-6      	; 0x50a <UPDI::set_nvmprog_key(bool)+0x16>
     510:	dd 23       	and	r29, r29
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:130
    const static uint8_t _reset[] = {
      0x55, 0xC8, 0x59, /* SYSRST */
      0x55, 0xC8, 0x00, /* SYSRUN */
      0x55, 0xC3, 0x04  /* UPDIDIS */
    };
    return send_bytes(_reset, _leave ? 9 : 6);
     512:	39 f0       	breq	.+14     	; 0x522 <UPDI::set_nvmprog_key(bool)+0x2e>
sys_reset():
     514:	66 e0       	ldi	r22, 0x06	; 6
     516:	70 e0       	ldi	r23, 0x00	; 0
     518:	82 e7       	ldi	r24, 0x72	; 114
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:223
    D1PRINTF(" PROG_KEY\r\n");
    if (!send_bytes(nvmprog_key, sizeof(nvmprog_key))) return false;
    do { key_status(); } while(bit_is_clear(RXDATA, 4));  /* wait set NVMPROG */
    D1PRINTF(" KEY=%02X\r\n", RXDATA);
    return _reset ? sys_reset(false) : true;
  }
     51a:	90 e6       	ldi	r25, 0x60	; 96
set_nvmprog_key():
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:130
    const static uint8_t _reset[] = {
      0x55, 0xC8, 0x59, /* SYSRST */
      0x55, 0xC8, 0x00, /* SYSRUN */
      0x55, 0xC3, 0x04  /* UPDIDIS */
    };
    return send_bytes(_reset, _leave ? 9 : 6);
     51c:	df 91       	pop	r29
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:223
    D1PRINTF(" PROG_KEY\r\n");
    if (!send_bytes(nvmprog_key, sizeof(nvmprog_key))) return false;
    do { key_status(); } while(bit_is_clear(RXDATA, 4));  /* wait set NVMPROG */
    D1PRINTF(" KEY=%02X\r\n", RXDATA);
    return _reset ? sys_reset(false) : true;
  }
     51e:	cf 91       	pop	r28
sys_reset():
     520:	c4 cf       	rjmp	.-120    	; 0x4aa <UPDI::send_bytes(unsigned char const*, unsigned int)>
set_nvmprog_key():
     522:	8c 2f       	mov	r24, r28
     524:	df 91       	pop	r29
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:392
    openDrainWriteMacro(PIN_PG_TRST, HIGH);
    return _result;
  }

  size_t enter_progmode (void) {
    if (bit_is_set(PGCONF, PGCONF_PROG_bp)) return 1;
     526:	cf 91       	pop	r28
     528:	08 95       	ret

0000052a <UPDI::enter_progmode()>:
enter_progmode():
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:393
    bit_set(PGCONF, PGCONF_FAIL_bp);
     52a:	e9 99       	sbic	0x1d, 1	; 29
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:394
    if (!set_nvmprog_key()) return 0;
     52c:	0f c0       	rjmp	.+30     	; 0x54c <UPDI::enter_progmode()+0x22>
     52e:	ef 9a       	sbi	0x1d, 7	; 29
     530:	81 e0       	ldi	r24, 0x01	; 1
     532:	e0 df       	rcall	.-64     	; 0x4f4 <UPDI::set_nvmprog_key(bool)>
     534:	88 23       	and	r24, r24
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:395
    do { sys_status(); } while(bit_is_clear(RXDATA, 3));  /* wait set PROGSTART */
     536:	69 f0       	breq	.+26     	; 0x552 <UPDI::enter_progmode()+0x28>
     538:	cb df       	rcall	.-106    	; 0x4d0 <UPDI::sys_status()>
     53a:	fb 9b       	sbis	0x1f, 3	; 31
     53c:	fd cf       	rjmp	.-6      	; 0x538 <UPDI::enter_progmode()+0xe>
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:397
    D1PRINTF(" PROGSTART=%02X\r\n", RXDATA);
    bit_clear(PGCONF, PGCONF_FAIL_bp);
     53e:	ef 98       	cbi	0x1d, 7	; 29
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:398
    bit_set(PGCONF, PGCONF_PROG_bp);
     540:	e9 9a       	sbi	0x1d, 1	; 29
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:399
    return (*Command_Table.prog_init)();
     542:	e0 91 fe 62 	lds	r30, 0x62FE	; 0x8062fe <Command_Table>
     546:	f0 91 ff 62 	lds	r31, 0x62FF	; 0x8062ff <Command_Table+0x1>
     54a:	09 94       	ijmp
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:392
    openDrainWriteMacro(PIN_PG_TRST, HIGH);
    return _result;
  }

  size_t enter_progmode (void) {
    if (bit_is_set(PGCONF, PGCONF_PROG_bp)) return 1;
     54c:	81 e0       	ldi	r24, 0x01	; 1
     54e:	90 e0       	ldi	r25, 0x00	; 0
     550:	08 95       	ret
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:394
    bit_set(PGCONF, PGCONF_FAIL_bp);
    if (!set_nvmprog_key()) return 0;
     552:	90 e0       	ldi	r25, 0x00	; 0
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:400
    do { sys_status(); } while(bit_is_clear(RXDATA, 3));  /* wait set PROGSTART */
    D1PRINTF(" PROGSTART=%02X\r\n", RXDATA);
    bit_clear(PGCONF, PGCONF_FAIL_bp);
    bit_set(PGCONF, PGCONF_PROG_bp);
    return (*Command_Table.prog_init)();
  }
     554:	80 e0       	ldi	r24, 0x00	; 0
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:109
  /* The acquired data is stored in RXDATA.    */
  bool recv_byte (uint32_t _dwAddr) {
    static uint8_t _set_ptr[] = {
      0x55, 0x08, 0, 0, 0, 0  /* LDS ADDR3 DATA1 */
    };
    _CAPS32(_set_ptr[2])->dword = _dwAddr;
     556:	08 95       	ret

00000558 <UPDI::recv_byte(unsigned long)>:
recv_byte():
     558:	60 93 03 60 	sts	0x6003, r22	; 0x806003 <UPDI::recv_byte(unsigned long)::_set_ptr+0x2>
     55c:	70 93 04 60 	sts	0x6004, r23	; 0x806004 <UPDI::recv_byte(unsigned long)::_set_ptr+0x3>
     560:	80 93 05 60 	sts	0x6005, r24	; 0x806005 <UPDI::recv_byte(unsigned long)::_set_ptr+0x4>
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:110
    return send_bytes(_set_ptr, 5) && recv();
     564:	90 93 06 60 	sts	0x6006, r25	; 0x806006 <UPDI::recv_byte(unsigned long)::_set_ptr+0x5>
     568:	65 e0       	ldi	r22, 0x05	; 5
     56a:	70 e0       	ldi	r23, 0x00	; 0
     56c:	81 e0       	ldi	r24, 0x01	; 1
     56e:	90 e6       	ldi	r25, 0x60	; 96
     570:	9c df       	rcall	.-200    	; 0x4aa <UPDI::send_bytes(unsigned char const*, unsigned int)>
     572:	81 11       	cpse	r24, r1
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:111
  }
     574:	57 cf       	rjmp	.-338    	; 0x424 <UPDI::recv()>
     576:	80 e0       	ldi	r24, 0x00	; 0
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:87
    } while (--_len);
    return true;
  }

  bool is_ack (void) {
    return recv() && 0x40 == RXDATA;
     578:	08 95       	ret

0000057a <UPDI::is_ack()>:
is_ack():
     57a:	54 df       	rcall	.-344    	; 0x424 <UPDI::recv()>
     57c:	88 23       	and	r24, r24
     57e:	29 f0       	breq	.+10     	; 0x58a <UPDI::is_ack()+0x10>
     580:	9f b3       	in	r25, 0x1f	; 31
     582:	81 e0       	ldi	r24, 0x01	; 1
     584:	90 34       	cpi	r25, 0x40	; 64
     586:	09 f0       	breq	.+2      	; 0x58a <UPDI::is_ack()+0x10>
     588:	80 e0       	ldi	r24, 0x00	; 0
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:88
  }
     58a:	08 95       	ret

0000058c <UPDI::send_words_block(unsigned long, unsigned int)>:
send_words_block():
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:177
      && send_bytes(_set_repeat, sizeof(_set_repeat))
      && send_bytes(&packet.out.memData[0], _wLength)
      && clear_rsd();
  }

  bool send_words_block (uint32_t _dwAddr, size_t _wLength) {
     58c:	cf 93       	push	r28
     58e:	df 93       	push	r29
     590:	ea 01       	movw	r28, r20
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:180
    /* This function works in word units up to 256 words, */
    /* and will round down any fractional words.          */
    _CAPS32(_set_ptr24[2])->dword = _dwAddr;
     592:	60 93 14 60 	sts	0x6014, r22	; 0x806014 <UPDI::_set_ptr24+0x2>
     596:	70 93 15 60 	sts	0x6015, r23	; 0x806015 <UPDI::_set_ptr24+0x3>
     59a:	80 93 16 60 	sts	0x6016, r24	; 0x806016 <UPDI::_set_ptr24+0x4>
     59e:	90 93 17 60 	sts	0x6017, r25	; 0x806017 <UPDI::_set_ptr24+0x5>
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:181
    _set_repeat[2] = (_wLength >> 1) - 1;
     5a2:	ca 01       	movw	r24, r20
     5a4:	96 95       	lsr	r25
     5a6:	87 95       	ror	r24
     5a8:	81 50       	subi	r24, 0x01	; 1
     5aa:	80 93 0f 60 	sts	0x600F, r24	; 0x80600f <UPDI::_set_repeat+0x2>
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:182
    _set_repeat[4] = 0x65;  /* ST PTR++ DATA2 */
     5ae:	85 e6       	ldi	r24, 0x65	; 101
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:183
    return send_bytes(_set_ptr24, 5)
     5b0:	80 93 11 60 	sts	0x6011, r24	; 0x806011 <UPDI::_set_repeat+0x4>
     5b4:	65 e0       	ldi	r22, 0x05	; 5
     5b6:	70 e0       	ldi	r23, 0x00	; 0
     5b8:	82 e1       	ldi	r24, 0x12	; 18
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:188
      && is_ack()
      && set_rsd()
      && send_bytes(_set_repeat, sizeof(_set_repeat))
      && send_bytes(&packet.out.memData[0], _wLength & ~1)
      && clear_rsd();
     5ba:	90 e6       	ldi	r25, 0x60	; 96
     5bc:	76 df       	rcall	.-276    	; 0x4aa <UPDI::send_bytes(unsigned char const*, unsigned int)>
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:184
    /* and will round down any fractional words.          */
    _CAPS32(_set_ptr24[2])->dword = _dwAddr;
    _set_repeat[2] = (_wLength >> 1) - 1;
    _set_repeat[4] = 0x65;  /* ST PTR++ DATA2 */
    return send_bytes(_set_ptr24, 5)
      && is_ack()
     5be:	88 23       	and	r24, r24
     5c0:	f9 f0       	breq	.+62     	; 0x600 <UPDI::send_words_block(unsigned long, unsigned int)+0x74>
     5c2:	db df       	rcall	.-74     	; 0x57a <UPDI::is_ack()>
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:135
    return send_bytes(_reset, _leave ? 9 : 6);
  }

  bool set_rsd (void) {
    const static uint8_t _set_rsd[] = {0x55, 0xC2, 0x0D};
    return send_bytes(_set_rsd, 3);
     5c4:	88 23       	and	r24, r24
     5c6:	e1 f0       	breq	.+56     	; 0x600 <UPDI::send_words_block(unsigned long, unsigned int)+0x74>
set_rsd():
     5c8:	63 e0       	ldi	r22, 0x03	; 3
     5ca:	70 e0       	ldi	r23, 0x00	; 0
     5cc:	89 e3       	ldi	r24, 0x39	; 57
     5ce:	90 e6       	ldi	r25, 0x60	; 96
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:185
    _CAPS32(_set_ptr24[2])->dword = _dwAddr;
    _set_repeat[2] = (_wLength >> 1) - 1;
    _set_repeat[4] = 0x65;  /* ST PTR++ DATA2 */
    return send_bytes(_set_ptr24, 5)
      && is_ack()
      && set_rsd()
     5d0:	6c df       	rcall	.-296    	; 0x4aa <UPDI::send_bytes(unsigned char const*, unsigned int)>
send_words_block():
     5d2:	88 23       	and	r24, r24
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:186
      && send_bytes(_set_repeat, sizeof(_set_repeat))
     5d4:	a9 f0       	breq	.+42     	; 0x600 <UPDI::send_words_block(unsigned long, unsigned int)+0x74>
     5d6:	65 e0       	ldi	r22, 0x05	; 5
     5d8:	70 e0       	ldi	r23, 0x00	; 0
     5da:	8d e0       	ldi	r24, 0x0D	; 13
     5dc:	90 e6       	ldi	r25, 0x60	; 96
     5de:	65 df       	rcall	.-310    	; 0x4aa <UPDI::send_bytes(unsigned char const*, unsigned int)>
     5e0:	88 23       	and	r24, r24
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:187
      && send_bytes(&packet.out.memData[0], _wLength & ~1)
     5e2:	71 f0       	breq	.+28     	; 0x600 <UPDI::send_words_block(unsigned long, unsigned int)+0x74>
     5e4:	be 01       	movw	r22, r28
     5e6:	6e 7f       	andi	r22, 0xFE	; 254
     5e8:	8f ec       	ldi	r24, 0xCF	; 207
     5ea:	90 e6       	ldi	r25, 0x60	; 96
     5ec:	5e df       	rcall	.-324    	; 0x4aa <UPDI::send_bytes(unsigned char const*, unsigned int)>
     5ee:	88 23       	and	r24, r24
     5f0:	39 f0       	breq	.+14     	; 0x600 <UPDI::send_words_block(unsigned long, unsigned int)+0x74>
clear_rsd():
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:140
    return send_bytes(_set_rsd, 3);
  }

  bool clear_rsd (void) {
    const static uint8_t _clear_rsd[] = {0x55, 0xC2, 0x05};
    return send_bytes(_clear_rsd, 3);
     5f2:	63 e0       	ldi	r22, 0x03	; 3
     5f4:	70 e0       	ldi	r23, 0x00	; 0
     5f6:	8c e3       	ldi	r24, 0x3C	; 60
     5f8:	90 e6       	ldi	r25, 0x60	; 96
send_words_block():
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:189
      && is_ack()
      && set_rsd()
      && send_bytes(_set_repeat, sizeof(_set_repeat))
      && send_bytes(&packet.out.memData[0], _wLength & ~1)
      && clear_rsd();
  }
     5fa:	df 91       	pop	r29
     5fc:	cf 91       	pop	r28
clear_rsd():
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:140
    return send_bytes(_set_rsd, 3);
  }

  bool clear_rsd (void) {
    const static uint8_t _clear_rsd[] = {0x55, 0xC2, 0x05};
    return send_bytes(_clear_rsd, 3);
     5fe:	55 cf       	rjmp	.-342    	; 0x4aa <UPDI::send_bytes(unsigned char const*, unsigned int)>
send_words_block():
     600:	80 e0       	ldi	r24, 0x00	; 0
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:189
      && is_ack()
      && set_rsd()
      && send_bytes(_set_repeat, sizeof(_set_repeat))
      && send_bytes(&packet.out.memData[0], _wLength & ~1)
      && clear_rsd();
  }
     602:	df 91       	pop	r29
     604:	cf 91       	pop	r28
     606:	08 95       	ret

00000608 <UPDI::send_bytes_block(unsigned long, unsigned int)>:
send_bytes_block():
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:165
      && is_ack()
      && send_bytes(_set_repeat, sizeof(_set_repeat))
      && recv_bytes(&packet.in.data[0], _wLength & ~1);
  }

  bool send_bytes_block (uint32_t _dwAddr, size_t _wLength) {
     608:	cf 93       	push	r28
     60a:	df 93       	push	r29
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:166
    _CAPS32(_set_ptr24[2])->dword = _dwAddr;
     60c:	ea 01       	movw	r28, r20
     60e:	60 93 14 60 	sts	0x6014, r22	; 0x806014 <UPDI::_set_ptr24+0x2>
     612:	70 93 15 60 	sts	0x6015, r23	; 0x806015 <UPDI::_set_ptr24+0x3>
     616:	80 93 16 60 	sts	0x6016, r24	; 0x806016 <UPDI::_set_ptr24+0x4>
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:167
    _set_repeat[2] = _wLength - 1;
     61a:	90 93 17 60 	sts	0x6017, r25	; 0x806017 <UPDI::_set_ptr24+0x5>
     61e:	8f ef       	ldi	r24, 0xFF	; 255
     620:	84 0f       	add	r24, r20
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:168
    _set_repeat[4] = 0x64;  /* ST PTR++ DATA1 */
     622:	80 93 0f 60 	sts	0x600F, r24	; 0x80600f <UPDI::_set_repeat+0x2>
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:169
    return send_bytes(_set_ptr24, 5)
     626:	84 e6       	ldi	r24, 0x64	; 100
     628:	80 93 11 60 	sts	0x6011, r24	; 0x806011 <UPDI::_set_repeat+0x4>
     62c:	65 e0       	ldi	r22, 0x05	; 5
     62e:	70 e0       	ldi	r23, 0x00	; 0
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:174
      && is_ack()
      && set_rsd()
      && send_bytes(_set_repeat, sizeof(_set_repeat))
      && send_bytes(&packet.out.memData[0], _wLength)
      && clear_rsd();
     630:	82 e1       	ldi	r24, 0x12	; 18
     632:	90 e6       	ldi	r25, 0x60	; 96
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:170
  bool send_bytes_block (uint32_t _dwAddr, size_t _wLength) {
    _CAPS32(_set_ptr24[2])->dword = _dwAddr;
    _set_repeat[2] = _wLength - 1;
    _set_repeat[4] = 0x64;  /* ST PTR++ DATA1 */
    return send_bytes(_set_ptr24, 5)
      && is_ack()
     634:	3a df       	rcall	.-396    	; 0x4aa <UPDI::send_bytes(unsigned char const*, unsigned int)>
     636:	88 23       	and	r24, r24
     638:	f1 f0       	breq	.+60     	; 0x676 <UPDI::send_bytes_block(unsigned long, unsigned int)+0x6e>
     63a:	9f df       	rcall	.-194    	; 0x57a <UPDI::is_ack()>
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:135
    return send_bytes(_reset, _leave ? 9 : 6);
  }

  bool set_rsd (void) {
    const static uint8_t _set_rsd[] = {0x55, 0xC2, 0x0D};
    return send_bytes(_set_rsd, 3);
     63c:	88 23       	and	r24, r24
     63e:	d9 f0       	breq	.+54     	; 0x676 <UPDI::send_bytes_block(unsigned long, unsigned int)+0x6e>
set_rsd():
     640:	63 e0       	ldi	r22, 0x03	; 3
     642:	70 e0       	ldi	r23, 0x00	; 0
     644:	89 e3       	ldi	r24, 0x39	; 57
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:171
    _CAPS32(_set_ptr24[2])->dword = _dwAddr;
    _set_repeat[2] = _wLength - 1;
    _set_repeat[4] = 0x64;  /* ST PTR++ DATA1 */
    return send_bytes(_set_ptr24, 5)
      && is_ack()
      && set_rsd()
     646:	90 e6       	ldi	r25, 0x60	; 96
     648:	30 df       	rcall	.-416    	; 0x4aa <UPDI::send_bytes(unsigned char const*, unsigned int)>
send_bytes_block():
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:172
      && send_bytes(_set_repeat, sizeof(_set_repeat))
     64a:	88 23       	and	r24, r24
     64c:	a1 f0       	breq	.+40     	; 0x676 <UPDI::send_bytes_block(unsigned long, unsigned int)+0x6e>
     64e:	65 e0       	ldi	r22, 0x05	; 5
     650:	70 e0       	ldi	r23, 0x00	; 0
     652:	8d e0       	ldi	r24, 0x0D	; 13
     654:	90 e6       	ldi	r25, 0x60	; 96
     656:	29 df       	rcall	.-430    	; 0x4aa <UPDI::send_bytes(unsigned char const*, unsigned int)>
     658:	88 23       	and	r24, r24
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:173
      && send_bytes(&packet.out.memData[0], _wLength)
     65a:	69 f0       	breq	.+26     	; 0x676 <UPDI::send_bytes_block(unsigned long, unsigned int)+0x6e>
     65c:	be 01       	movw	r22, r28
     65e:	8f ec       	ldi	r24, 0xCF	; 207
     660:	90 e6       	ldi	r25, 0x60	; 96
     662:	23 df       	rcall	.-442    	; 0x4aa <UPDI::send_bytes(unsigned char const*, unsigned int)>
     664:	88 23       	and	r24, r24
     666:	39 f0       	breq	.+14     	; 0x676 <UPDI::send_bytes_block(unsigned long, unsigned int)+0x6e>
clear_rsd():
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:140
    return send_bytes(_set_rsd, 3);
  }

  bool clear_rsd (void) {
    const static uint8_t _clear_rsd[] = {0x55, 0xC2, 0x05};
    return send_bytes(_clear_rsd, 3);
     668:	63 e0       	ldi	r22, 0x03	; 3
     66a:	70 e0       	ldi	r23, 0x00	; 0
     66c:	8c e3       	ldi	r24, 0x3C	; 60
     66e:	90 e6       	ldi	r25, 0x60	; 96
send_bytes_block():
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:175
      && is_ack()
      && set_rsd()
      && send_bytes(_set_repeat, sizeof(_set_repeat))
      && send_bytes(&packet.out.memData[0], _wLength)
      && clear_rsd();
  }
     670:	df 91       	pop	r29
     672:	cf 91       	pop	r28
clear_rsd():
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:140
    return send_bytes(_set_rsd, 3);
  }

  bool clear_rsd (void) {
    const static uint8_t _clear_rsd[] = {0x55, 0xC2, 0x05};
    return send_bytes(_clear_rsd, 3);
     674:	1a cf       	rjmp	.-460    	; 0x4aa <UPDI::send_bytes(unsigned char const*, unsigned int)>
send_bytes_block():
     676:	80 e0       	ldi	r24, 0x00	; 0
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:175
      && is_ack()
      && set_rsd()
      && send_bytes(_set_repeat, sizeof(_set_repeat))
      && send_bytes(&packet.out.memData[0], _wLength)
      && clear_rsd();
  }
     678:	df 91       	pop	r29
     67a:	cf 91       	pop	r28
     67c:	08 95       	ret

0000067e <UPDI::write_userrow()>:
write_userrow():
     67e:	cf 92       	push	r12
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:269
  /*
   * Use the UPDI ACC to write to the USERROW of the locked chip.
   * The write start address should match the USERROW address.
   * The write length should match the USERROW field.
   */
  bool write_userrow (void) {
     680:	df 92       	push	r13
     682:	ef 92       	push	r14
     684:	ff 92       	push	r15
     686:	0f 93       	push	r16
     688:	1f 93       	push	r17
     68a:	cf 93       	push	r28
     68c:	e8 99       	sbic	0x1d, 0	; 29
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:278
    uint32_t _dwAddr = packet.out.dwAddr;
    size_t  _wLength = packet.out.dwLength;
    if (bit_is_clear(PGCONF, PGCONF_UPDI_bp)
     || m_type != 0xC5 
     || _wLength != Device_Descriptor.UPDI.user_sig_bytes
     || (uint16_t)_dwAddr != Device_Descriptor.UPDI.user_sig_base) return false;
     68e:	0a c0       	rjmp	.+20     	; 0x6a4 <UPDI::write_userrow()+0x26>
     690:	c0 e0       	ldi	r28, 0x00	; 0
     692:	8c 2f       	mov	r24, r28
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:296
      do { sys_status(); } while(bit_is_clear(RXDATA, 3));  /* wait set PROGSTART */
      D1PRINTF(" RE_PROGSTART=%02X\r\n", RXDATA);
      return true;
    }
    else return sys_reset(false);
  }
     694:	cf 91       	pop	r28
     696:	1f 91       	pop	r17
     698:	0f 91       	pop	r16
     69a:	ff 90       	pop	r15
     69c:	ef 90       	pop	r14
     69e:	df 90       	pop	r13
     6a0:	cf 90       	pop	r12
     6a2:	08 95       	ret
     6a4:	80 91 c5 60 	lds	r24, 0x60C5	; 0x8060c5 <packet+0x7>
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:276
    const static uint8_t _urowstop[] = { 0x55, 0xC7, 0x20 };
    uint8_t   m_type = packet.out.bMType;
    uint32_t _dwAddr = packet.out.dwAddr;
    size_t  _wLength = packet.out.dwLength;
    if (bit_is_clear(PGCONF, PGCONF_UPDI_bp)
     || m_type != 0xC5 
     6a8:	85 3c       	cpi	r24, 0xC5	; 197
     6aa:	91 f7       	brne	.-28     	; 0x690 <UPDI::write_userrow()+0x12>
     6ac:	00 91 a6 60 	lds	r16, 0x60A6	; 0x8060a6 <Device_Descriptor+0x18>
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:277
     || _wLength != Device_Descriptor.UPDI.user_sig_bytes
     6b0:	10 91 a7 60 	lds	r17, 0x60A7	; 0x8060a7 <Device_Descriptor+0x19>
     6b4:	80 91 ca 60 	lds	r24, 0x60CA	; 0x8060ca <packet+0xc>
     6b8:	90 91 cb 60 	lds	r25, 0x60CB	; 0x8060cb <packet+0xd>
     6bc:	08 17       	cp	r16, r24
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:273
   */
  bool write_userrow (void) {
    const static uint8_t _urowdone[] = { 0x55, 0xCA, 0x03 };
    const static uint8_t _urowstop[] = { 0x55, 0xC7, 0x20 };
    uint8_t   m_type = packet.out.bMType;
    uint32_t _dwAddr = packet.out.dwAddr;
     6be:	19 07       	cpc	r17, r25
     6c0:	39 f7       	brne	.-50     	; 0x690 <UPDI::write_userrow()+0x12>
     6c2:	c0 90 c6 60 	lds	r12, 0x60C6	; 0x8060c6 <packet+0x8>
     6c6:	d0 90 c7 60 	lds	r13, 0x60C7	; 0x8060c7 <packet+0x9>
     6ca:	e0 90 c8 60 	lds	r14, 0x60C8	; 0x8060c8 <packet+0xa>
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:278
    size_t  _wLength = packet.out.dwLength;
    if (bit_is_clear(PGCONF, PGCONF_UPDI_bp)
     || m_type != 0xC5 
     || _wLength != Device_Descriptor.UPDI.user_sig_bytes
     || (uint16_t)_dwAddr != Device_Descriptor.UPDI.user_sig_base) return false;
     6ce:	f0 90 c9 60 	lds	r15, 0x60C9	; 0x8060c9 <packet+0xb>
     6d2:	80 91 b0 60 	lds	r24, 0x60B0	; 0x8060b0 <Device_Descriptor+0x22>
     6d6:	90 91 b1 60 	lds	r25, 0x60B1	; 0x8060b1 <Device_Descriptor+0x23>
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:280
    bit_set(PGCONF, PGCONF_FAIL_bp);
    USART::drain();
     6da:	8c 15       	cp	r24, r12
     6dc:	9d 05       	cpc	r25, r13
     6de:	c1 f6       	brne	.-80     	; 0x690 <UPDI::write_userrow()+0x12>
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:236
    return sys_reset(false);
  }

  bool set_urowwrite_key (void) {
    D1PRINTF(" UROW_KEY\r\n");
    if (!send_bytes(urowwrite_key, sizeof(urowwrite_key))) return false;
     6e0:	ef 9a       	sbi	0x1d, 7	; 29
     6e2:	90 e0       	ldi	r25, 0x00	; 0
     6e4:	80 e0       	ldi	r24, 0x00	; 0
     6e6:	6a de       	rcall	.-812    	; 0x3bc <USART::drain(unsigned int)>
set_urowwrite_key():
     6e8:	6a e0       	ldi	r22, 0x0A	; 10
     6ea:	70 e0       	ldi	r23, 0x00	; 0
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:237
    do { key_status(); } while(bit_is_clear(RXDATA, 5));  /* wait set UROWWRITE */
     6ec:	87 e5       	ldi	r24, 0x57	; 87
     6ee:	90 e6       	ldi	r25, 0x60	; 96
     6f0:	dc de       	rcall	.-584    	; 0x4aa <UPDI::send_bytes(unsigned char const*, unsigned int)>
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:130
    const static uint8_t _reset[] = {
      0x55, 0xC8, 0x59, /* SYSRST */
      0x55, 0xC8, 0x00, /* SYSRUN */
      0x55, 0xC3, 0x04  /* UPDIDIS */
    };
    return send_bytes(_reset, _leave ? 9 : 6);
     6f2:	88 23       	and	r24, r24
     6f4:	69 f2       	breq	.-102    	; 0x690 <UPDI::write_userrow()+0x12>
     6f6:	f5 de       	rcall	.-534    	; 0x4e2 <UPDI::key_status()>
     6f8:	fd 9b       	sbis	0x1f, 5	; 31
     6fa:	fd cf       	rjmp	.-6      	; 0x6f6 <UPDI::write_userrow()+0x78>
sys_reset():
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:282
     || _wLength != Device_Descriptor.UPDI.user_sig_bytes
     || (uint16_t)_dwAddr != Device_Descriptor.UPDI.user_sig_base) return false;
    bit_set(PGCONF, PGCONF_FAIL_bp);
    USART::drain();
    D1PRINTF(" ENTER_UROW=%04lX:%04X\r\n", _dwAddr, _wLength);
    if (!set_urowwrite_key()) return false;
     6fc:	66 e0       	ldi	r22, 0x06	; 6
     6fe:	70 e0       	ldi	r23, 0x00	; 0
     700:	82 e7       	ldi	r24, 0x72	; 114
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:283
    do { sys_status(); } while(bit_is_clear(RXDATA, 2));    /* wait set UROWPROG */
     702:	90 e6       	ldi	r25, 0x60	; 96
     704:	d2 de       	rcall	.-604    	; 0x4aa <UPDI::send_bytes(unsigned char const*, unsigned int)>
     706:	c8 2f       	mov	r28, r24
write_userrow():
     708:	88 23       	and	r24, r24
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:284
    send_bytes_block(_dwAddr, _wLength);
     70a:	09 f4       	brne	.+2      	; 0x70e <UPDI::write_userrow()+0x90>
     70c:	c1 cf       	rjmp	.-126    	; 0x690 <UPDI::write_userrow()+0x12>
     70e:	e0 de       	rcall	.-576    	; 0x4d0 <UPDI::sys_status()>
     710:	fa 9b       	sbis	0x1f, 2	; 31
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:285
    send_bytes(_urowdone, 3);
     712:	fd cf       	rjmp	.-6      	; 0x70e <UPDI::write_userrow()+0x90>
     714:	a8 01       	movw	r20, r16
     716:	c7 01       	movw	r24, r14
     718:	b6 01       	movw	r22, r12
     71a:	76 df       	rcall	.-276    	; 0x608 <UPDI::send_bytes_block(unsigned long, unsigned int)>
     71c:	63 e0       	ldi	r22, 0x03	; 3
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:286
    do { sys_status(); } while(bit_is_set(RXDATA, 2));      /* wait clear UROWPROG */
     71e:	70 e0       	ldi	r23, 0x00	; 0
     720:	84 e6       	ldi	r24, 0x64	; 100
     722:	90 e6       	ldi	r25, 0x60	; 96
     724:	c2 de       	rcall	.-636    	; 0x4aa <UPDI::send_bytes(unsigned char const*, unsigned int)>
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:287
    send_bytes(_urowstop, 3);
     726:	d4 de       	rcall	.-600    	; 0x4d0 <UPDI::sys_status()>
     728:	fa 99       	sbic	0x1f, 2	; 31
     72a:	fd cf       	rjmp	.-6      	; 0x726 <UPDI::write_userrow()+0xa8>
     72c:	63 e0       	ldi	r22, 0x03	; 3
     72e:	70 e0       	ldi	r23, 0x00	; 0
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:289
    bit_clear(PGCONF, PGCONF_FAIL_bp);
    if (bit_is_set(PGCONF, PGCONF_PROG_bp)) {
     730:	81 e6       	ldi	r24, 0x61	; 97
     732:	90 e6       	ldi	r25, 0x60	; 96
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:290
      set_nvmprog_key();
     734:	ba de       	rcall	.-652    	; 0x4aa <UPDI::send_bytes(unsigned char const*, unsigned int)>
     736:	ef 98       	cbi	0x1d, 7	; 29
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:291
      do { sys_status(); } while(bit_is_clear(RXDATA, 3));  /* wait set PROGSTART */
     738:	e9 9b       	sbis	0x1d, 1	; 29
     73a:	06 c0       	rjmp	.+12     	; 0x748 <UPDI::write_userrow()+0xca>
     73c:	81 e0       	ldi	r24, 0x01	; 1
     73e:	da de       	rcall	.-588    	; 0x4f4 <UPDI::set_nvmprog_key(bool)>
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:130
    const static uint8_t _reset[] = {
      0x55, 0xC8, 0x59, /* SYSRST */
      0x55, 0xC8, 0x00, /* SYSRUN */
      0x55, 0xC3, 0x04  /* UPDIDIS */
    };
    return send_bytes(_reset, _leave ? 9 : 6);
     740:	c7 de       	rcall	.-626    	; 0x4d0 <UPDI::sys_status()>
     742:	fb 9b       	sbis	0x1f, 3	; 31
     744:	fd cf       	rjmp	.-6      	; 0x740 <UPDI::write_userrow()+0xc2>
     746:	a5 cf       	rjmp	.-182    	; 0x692 <UPDI::write_userrow()+0x14>
sys_reset():
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:296
      do { sys_status(); } while(bit_is_clear(RXDATA, 3));  /* wait set PROGSTART */
      D1PRINTF(" RE_PROGSTART=%02X\r\n", RXDATA);
      return true;
    }
    else return sys_reset(false);
  }
     748:	66 e0       	ldi	r22, 0x06	; 6
     74a:	70 e0       	ldi	r23, 0x00	; 0
     74c:	82 e7       	ldi	r24, 0x72	; 114
     74e:	90 e6       	ldi	r25, 0x60	; 96
write_userrow():
     750:	cf 91       	pop	r28
     752:	1f 91       	pop	r17
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:130
    const static uint8_t _reset[] = {
      0x55, 0xC8, 0x59, /* SYSRST */
      0x55, 0xC8, 0x00, /* SYSRUN */
      0x55, 0xC3, 0x04  /* UPDIDIS */
    };
    return send_bytes(_reset, _leave ? 9 : 6);
     754:	0f 91       	pop	r16
     756:	ff 90       	pop	r15
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:113
    };
    _CAPS32(_set_ptr[2])->dword = _dwAddr;
    return send_bytes(_set_ptr, 5) && recv();
  }

  bool send_byte (uint32_t _dwAddr, uint8_t _data) {
     758:	ef 90       	pop	r14
     75a:	df 90       	pop	r13
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:117
    static uint8_t _set_ptr[] = {
      0x55, 0x48, 0, 0, 0, 0  /* STS ADDR3 DATA1 */
    };
    _CAPS32(_set_ptr[2])->dword = _dwAddr;
     75c:	cf 90       	pop	r12
sys_reset():
     75e:	a5 ce       	rjmp	.-694    	; 0x4aa <UPDI::send_bytes(unsigned char const*, unsigned int)>

00000760 <UPDI::send_byte(unsigned long, unsigned char)>:
send_byte():
     760:	cf 93       	push	r28
     762:	c4 2f       	mov	r28, r20
     764:	60 93 09 60 	sts	0x6009, r22	; 0x806009 <UPDI::send_byte(unsigned long, unsigned char)::_set_ptr+0x2>
     768:	70 93 0a 60 	sts	0x600A, r23	; 0x80600a <UPDI::send_byte(unsigned long, unsigned char)::_set_ptr+0x3>
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:118
    return send_bytes(_set_ptr, 5)
     76c:	80 93 0b 60 	sts	0x600B, r24	; 0x80600b <UPDI::send_byte(unsigned long, unsigned char)::_set_ptr+0x4>
     770:	90 93 0c 60 	sts	0x600C, r25	; 0x80600c <UPDI::send_byte(unsigned long, unsigned char)::_set_ptr+0x5>
     774:	65 e0       	ldi	r22, 0x05	; 5
     776:	70 e0       	ldi	r23, 0x00	; 0
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:121
      && is_ack()
      && send(_data)
      && is_ack();
     778:	87 e0       	ldi	r24, 0x07	; 7
     77a:	90 e6       	ldi	r25, 0x60	; 96
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:119
    static uint8_t _set_ptr[] = {
      0x55, 0x48, 0, 0, 0, 0  /* STS ADDR3 DATA1 */
    };
    _CAPS32(_set_ptr[2])->dword = _dwAddr;
    return send_bytes(_set_ptr, 5)
      && is_ack()
     77c:	96 de       	rcall	.-724    	; 0x4aa <UPDI::send_bytes(unsigned char const*, unsigned int)>
     77e:	88 23       	and	r24, r24
     780:	49 f0       	breq	.+18     	; 0x794 <UPDI::send_byte(unsigned long, unsigned char)+0x34>
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:120
      && send(_data)
     782:	fb de       	rcall	.-522    	; 0x57a <UPDI::is_ack()>
     784:	88 23       	and	r24, r24
     786:	31 f0       	breq	.+12     	; 0x794 <UPDI::send_byte(unsigned long, unsigned char)+0x34>
     788:	8c 2f       	mov	r24, r28
     78a:	7e de       	rcall	.-772    	; 0x488 <UPDI::send(unsigned char)>
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:122
      && is_ack();
  }
     78c:	88 23       	and	r24, r24
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:121
    };
    _CAPS32(_set_ptr[2])->dword = _dwAddr;
    return send_bytes(_set_ptr, 5)
      && is_ack()
      && send(_data)
      && is_ack();
     78e:	11 f0       	breq	.+4      	; 0x794 <UPDI::send_byte(unsigned long, unsigned char)+0x34>
     790:	cf 91       	pop	r28
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:122
  }
     792:	f3 ce       	rjmp	.-538    	; 0x57a <UPDI::is_ack()>
     794:	80 e0       	ldi	r24, 0x00	; 0
     796:	cf 91       	pop	r28
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:204
    /* This slow process is due to USERROW and BOOTROW. */
    return send_bytes_data(_dwAddr, &packet.out.memData[0], _wLength);
  }

  bool nvm_ctrl (uint8_t _nvmcmd) {
    return send_byte(0x1000, _nvmcmd);  /* NVMCTRL_CTRLA */
     798:	08 95       	ret

0000079a <UPDI::nvm_ctrl(unsigned char)>:
nvm_ctrl():
     79a:	48 2f       	mov	r20, r24
     79c:	60 e0       	ldi	r22, 0x00	; 0
     79e:	70 e1       	ldi	r23, 0x10	; 16
     7a0:	80 e0       	ldi	r24, 0x00	; 0
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	dd cf       	rjmp	.-70     	; 0x760 <UPDI::send_byte(unsigned long, unsigned char)>

000007a6 <UPDI::send_bytes_block_slow(unsigned long, unsigned int)>:
send_bytes_block_slow():
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:198
      if (!send_byte(_dwAddr++, *_data++)) return false;
    }
    return true;
  }

  bool send_bytes_block_slow (uint32_t _dwAddr, size_t _wLength) {
     7a6:	cf 92       	push	r12
     7a8:	df 92       	push	r13
     7aa:	ef 92       	push	r14
     7ac:	ff 92       	push	r15
     7ae:	0f 93       	push	r16
     7b0:	1f 93       	push	r17
     7b2:	cf 93       	push	r28
     7b4:	df 93       	push	r29
     7b6:	ce eb       	ldi	r28, 0xBE	; 190
     7b8:	d0 e6       	ldi	r29, 0x60	; 96
     7ba:	8a 01       	movw	r16, r20
     7bc:	02 54       	subi	r16, 0x42	; 66
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:192
      && send_bytes(&packet.out.memData[0], _wLength & ~1)
      && clear_rsd();
  }

  bool send_bytes_data (uint32_t _dwAddr, uint8_t* _data, size_t _wLength) {
    for (size_t _i = 0; _i < _wLength; _i++) {
     7be:	1f 49       	sbci	r17, 0x9F	; 159
send_bytes_data():
     7c0:	c0 17       	cp	r28, r16
     7c2:	d1 07       	cpc	r29, r17
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:193
      if (!send_byte(_dwAddr++, *_data++)) return false;
     7c4:	c1 f0       	breq	.+48     	; 0x7f6 <UPDI::send_bytes_block_slow(unsigned long, unsigned int)+0x50>
     7c6:	6b 01       	movw	r12, r22
     7c8:	7c 01       	movw	r14, r24
     7ca:	2f ef       	ldi	r18, 0xFF	; 255
     7cc:	c2 1a       	sub	r12, r18
     7ce:	d2 0a       	sbc	r13, r18
     7d0:	e2 0a       	sbc	r14, r18
     7d2:	f2 0a       	sbc	r15, r18
     7d4:	49 89       	ldd	r20, Y+17	; 0x11
     7d6:	c4 df       	rcall	.-120    	; 0x760 <UPDI::send_byte(unsigned long, unsigned char)>
     7d8:	21 96       	adiw	r28, 0x01	; 1
     7da:	81 11       	cpse	r24, r1
     7dc:	09 c0       	rjmp	.+18     	; 0x7f0 <UPDI::send_bytes_block_slow(unsigned long, unsigned int)+0x4a>
send_bytes_block_slow():
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:201
  }

  bool send_bytes_block_slow (uint32_t _dwAddr, size_t _wLength) {
    /* This slow process is due to USERROW and BOOTROW. */
    return send_bytes_data(_dwAddr, &packet.out.memData[0], _wLength);
  }
     7de:	df 91       	pop	r29
     7e0:	cf 91       	pop	r28
     7e2:	1f 91       	pop	r17
     7e4:	0f 91       	pop	r16
     7e6:	ff 90       	pop	r15
     7e8:	ef 90       	pop	r14
     7ea:	df 90       	pop	r13
     7ec:	cf 90       	pop	r12
     7ee:	08 95       	ret
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:193
      && clear_rsd();
  }

  bool send_bytes_data (uint32_t _dwAddr, uint8_t* _data, size_t _wLength) {
    for (size_t _i = 0; _i < _wLength; _i++) {
      if (!send_byte(_dwAddr++, *_data++)) return false;
     7f0:	c7 01       	movw	r24, r14
     7f2:	b6 01       	movw	r22, r12
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:195
    }
    return true;
     7f4:	e5 cf       	rjmp	.-54     	; 0x7c0 <UPDI::send_bytes_block_slow(unsigned long, unsigned int)+0x1a>
     7f6:	81 e0       	ldi	r24, 0x01	; 1
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:78
    RXSTAT = USART0_RXDATAH ^ 0x80;
    RXDATA = USART0_RXDATAL;
    return RXSTAT == 0 || send_break();
  }

  bool recv_bytes (uint8_t* _data, size_t _len) {
     7f8:	f2 cf       	rjmp	.-28     	; 0x7de <UPDI::send_bytes_block_slow(unsigned long, unsigned int)+0x38>

000007fa <UPDI::recv_bytes(unsigned char*, unsigned int)>:
recv_bytes():
     7fa:	0f 93       	push	r16
     7fc:	1f 93       	push	r17
     7fe:	cf 93       	push	r28
     800:	df 93       	push	r29
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:80
    do {
      if (!recv()) return false;
     802:	eb 01       	movw	r28, r22
     804:	8c 01       	movw	r16, r24
     806:	0e de       	rcall	.-996    	; 0x424 <UPDI::recv()>
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:81
      *_data++ = RXDATA;
     808:	88 23       	and	r24, r24
     80a:	31 f0       	breq	.+12     	; 0x818 <UPDI::recv_bytes(unsigned char*, unsigned int)+0x1e>
     80c:	9f b3       	in	r25, 0x1f	; 31
     80e:	f8 01       	movw	r30, r16
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:82
    } while (--_len);
     810:	91 93       	st	Z+, r25
     812:	8f 01       	movw	r16, r30
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:84
    return true;
  }
     814:	21 97       	sbiw	r28, 0x01	; 1
     816:	b9 f7       	brne	.-18     	; 0x806 <UPDI::recv_bytes(unsigned char*, unsigned int)+0xc>
     818:	df 91       	pop	r29
     81a:	cf 91       	pop	r28
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:153
      && is_ack()
      && send_bytes(_set_repeat, sizeof(_set_repeat))
      && recv_bytes(&packet.in.data[0], _wLength);
  }

  bool recv_words_block (uint32_t _dwAddr, size_t _wLength) {
     81c:	1f 91       	pop	r17
     81e:	0f 91       	pop	r16
     820:	08 95       	ret

00000822 <UPDI::recv_words_block(unsigned long, unsigned int)>:
recv_words_block():
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:156
    /* This function works in word units up to 256 words, */
    /* and will round down any fractional words.          */
    _CAPS32(_set_ptr24[2])->dword = _dwAddr;
     822:	cf 93       	push	r28
     824:	df 93       	push	r29
     826:	ea 01       	movw	r28, r20
     828:	60 93 14 60 	sts	0x6014, r22	; 0x806014 <UPDI::_set_ptr24+0x2>
     82c:	70 93 15 60 	sts	0x6015, r23	; 0x806015 <UPDI::_set_ptr24+0x3>
     830:	80 93 16 60 	sts	0x6016, r24	; 0x806016 <UPDI::_set_ptr24+0x4>
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:157
    _set_repeat[2] = (_wLength >> 1) - 1;
     834:	90 93 17 60 	sts	0x6017, r25	; 0x806017 <UPDI::_set_ptr24+0x5>
     838:	ca 01       	movw	r24, r20
     83a:	96 95       	lsr	r25
     83c:	87 95       	ror	r24
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:158
    _set_repeat[4] = 0x25;  /* LD PTR++ DATA2 */
     83e:	81 50       	subi	r24, 0x01	; 1
     840:	80 93 0f 60 	sts	0x600F, r24	; 0x80600f <UPDI::_set_repeat+0x2>
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:159
    return send_bytes(_set_ptr24, 5)
     844:	85 e2       	ldi	r24, 0x25	; 37
     846:	80 93 11 60 	sts	0x6011, r24	; 0x806011 <UPDI::_set_repeat+0x4>
     84a:	65 e0       	ldi	r22, 0x05	; 5
     84c:	70 e0       	ldi	r23, 0x00	; 0
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:162
      && is_ack()
      && send_bytes(_set_repeat, sizeof(_set_repeat))
      && recv_bytes(&packet.in.data[0], _wLength & ~1);
     84e:	82 e1       	ldi	r24, 0x12	; 18
     850:	90 e6       	ldi	r25, 0x60	; 96
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:160
    /* and will round down any fractional words.          */
    _CAPS32(_set_ptr24[2])->dword = _dwAddr;
    _set_repeat[2] = (_wLength >> 1) - 1;
    _set_repeat[4] = 0x25;  /* LD PTR++ DATA2 */
    return send_bytes(_set_ptr24, 5)
      && is_ack()
     852:	2b de       	rcall	.-938    	; 0x4aa <UPDI::send_bytes(unsigned char const*, unsigned int)>
     854:	88 23       	and	r24, r24
     856:	89 f0       	breq	.+34     	; 0x87a <UPDI::recv_words_block(unsigned long, unsigned int)+0x58>
     858:	90 de       	rcall	.-736    	; 0x57a <UPDI::is_ack()>
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:161
      && send_bytes(_set_repeat, sizeof(_set_repeat))
     85a:	88 23       	and	r24, r24
     85c:	71 f0       	breq	.+28     	; 0x87a <UPDI::recv_words_block(unsigned long, unsigned int)+0x58>
     85e:	65 e0       	ldi	r22, 0x05	; 5
     860:	70 e0       	ldi	r23, 0x00	; 0
     862:	8d e0       	ldi	r24, 0x0D	; 13
     864:	90 e6       	ldi	r25, 0x60	; 96
     866:	21 de       	rcall	.-958    	; 0x4aa <UPDI::send_bytes(unsigned char const*, unsigned int)>
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:162
      && recv_bytes(&packet.in.data[0], _wLength & ~1);
     868:	88 23       	and	r24, r24
     86a:	39 f0       	breq	.+14     	; 0x87a <UPDI::recv_words_block(unsigned long, unsigned int)+0x58>
     86c:	be 01       	movw	r22, r28
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:163
  }
     86e:	6e 7f       	andi	r22, 0xFE	; 254
     870:	85 ec       	ldi	r24, 0xC5	; 197
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:162
    _set_repeat[2] = (_wLength >> 1) - 1;
    _set_repeat[4] = 0x25;  /* LD PTR++ DATA2 */
    return send_bytes(_set_ptr24, 5)
      && is_ack()
      && send_bytes(_set_repeat, sizeof(_set_repeat))
      && recv_bytes(&packet.in.data[0], _wLength & ~1);
     872:	90 e6       	ldi	r25, 0x60	; 96
     874:	df 91       	pop	r29
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:163
  }
     876:	cf 91       	pop	r28
     878:	c0 cf       	rjmp	.-128    	; 0x7fa <UPDI::recv_bytes(unsigned char*, unsigned int)>
     87a:	80 e0       	ldi	r24, 0x00	; 0
     87c:	df 91       	pop	r29
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:143
  bool clear_rsd (void) {
    const static uint8_t _clear_rsd[] = {0x55, 0xC2, 0x05};
    return send_bytes(_clear_rsd, 3);
  }

  bool recv_bytes_block (uint32_t _dwAddr, size_t _wLength) {
     87e:	cf 91       	pop	r28
     880:	08 95       	ret

00000882 <UPDI::recv_bytes_block(unsigned long, unsigned int)>:
recv_bytes_block():
     882:	cf 93       	push	r28
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:144
    _CAPS32(_set_ptr24[2])->dword = _dwAddr;
     884:	df 93       	push	r29
     886:	ea 01       	movw	r28, r20
     888:	60 93 14 60 	sts	0x6014, r22	; 0x806014 <UPDI::_set_ptr24+0x2>
     88c:	70 93 15 60 	sts	0x6015, r23	; 0x806015 <UPDI::_set_ptr24+0x3>
     890:	80 93 16 60 	sts	0x6016, r24	; 0x806016 <UPDI::_set_ptr24+0x4>
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:145
    _set_repeat[2] = _wLength - 1;
     894:	90 93 17 60 	sts	0x6017, r25	; 0x806017 <UPDI::_set_ptr24+0x5>
     898:	8f ef       	ldi	r24, 0xFF	; 255
     89a:	84 0f       	add	r24, r20
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:146
    _set_repeat[4] = 0x24;  /* LD PTR++ DATA1 */
     89c:	80 93 0f 60 	sts	0x600F, r24	; 0x80600f <UPDI::_set_repeat+0x2>
     8a0:	84 e2       	ldi	r24, 0x24	; 36
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:147
    return send_bytes(_set_ptr24, 5)
     8a2:	80 93 11 60 	sts	0x6011, r24	; 0x806011 <UPDI::_set_repeat+0x4>
     8a6:	65 e0       	ldi	r22, 0x05	; 5
     8a8:	70 e0       	ldi	r23, 0x00	; 0
     8aa:	82 e1       	ldi	r24, 0x12	; 18
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:150
      && is_ack()
      && send_bytes(_set_repeat, sizeof(_set_repeat))
      && recv_bytes(&packet.in.data[0], _wLength);
     8ac:	90 e6       	ldi	r25, 0x60	; 96
     8ae:	fd dd       	rcall	.-1030   	; 0x4aa <UPDI::send_bytes(unsigned char const*, unsigned int)>
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:148
  bool recv_bytes_block (uint32_t _dwAddr, size_t _wLength) {
    _CAPS32(_set_ptr24[2])->dword = _dwAddr;
    _set_repeat[2] = _wLength - 1;
    _set_repeat[4] = 0x24;  /* LD PTR++ DATA1 */
    return send_bytes(_set_ptr24, 5)
      && is_ack()
     8b0:	88 23       	and	r24, r24
     8b2:	81 f0       	breq	.+32     	; 0x8d4 <UPDI::recv_bytes_block(unsigned long, unsigned int)+0x52>
     8b4:	62 de       	rcall	.-828    	; 0x57a <UPDI::is_ack()>
     8b6:	88 23       	and	r24, r24
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:149
      && send_bytes(_set_repeat, sizeof(_set_repeat))
     8b8:	69 f0       	breq	.+26     	; 0x8d4 <UPDI::recv_bytes_block(unsigned long, unsigned int)+0x52>
     8ba:	65 e0       	ldi	r22, 0x05	; 5
     8bc:	70 e0       	ldi	r23, 0x00	; 0
     8be:	8d e0       	ldi	r24, 0x0D	; 13
     8c0:	90 e6       	ldi	r25, 0x60	; 96
     8c2:	f3 dd       	rcall	.-1050   	; 0x4aa <UPDI::send_bytes(unsigned char const*, unsigned int)>
     8c4:	88 23       	and	r24, r24
     8c6:	31 f0       	breq	.+12     	; 0x8d4 <UPDI::recv_bytes_block(unsigned long, unsigned int)+0x52>
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:150
      && recv_bytes(&packet.in.data[0], _wLength);
     8c8:	be 01       	movw	r22, r28
     8ca:	85 ec       	ldi	r24, 0xC5	; 197
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:151
  }
     8cc:	90 e6       	ldi	r25, 0x60	; 96
     8ce:	df 91       	pop	r29
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:150
    _set_repeat[2] = _wLength - 1;
    _set_repeat[4] = 0x24;  /* LD PTR++ DATA1 */
    return send_bytes(_set_ptr24, 5)
      && is_ack()
      && send_bytes(_set_repeat, sizeof(_set_repeat))
      && recv_bytes(&packet.in.data[0], _wLength);
     8d0:	cf 91       	pop	r28
     8d2:	93 cf       	rjmp	.-218    	; 0x7fa <UPDI::recv_bytes(unsigned char*, unsigned int)>
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:151
  }
     8d4:	80 e0       	ldi	r24, 0x00	; 0
     8d6:	df 91       	pop	r29
     8d8:	cf 91       	pop	r28
     8da:	08 95       	ret

000008dc <NVM::V4::read_memory()>:
read_memory():
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv4.cpp:119

  size_t prog_init (void) {
    return nvm_ctrl_change(0x00);
  }

  size_t read_memory (void) {
     8dc:	cf 93       	push	r28
     8de:	df 93       	push	r29
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv4.cpp:123
    uint8_t   m_type = packet.out.bMType;
    uint32_t _dwAddr = packet.out.dwAddr;
    size_t  _wLength = packet.out.dwLength;
    if (bit_is_set(PGCONF, PGCONF_PROG_bp)) {
     8e0:	e9 99       	sbic	0x1d, 1	; 29
     8e2:	05 c0       	rjmp	.+10     	; 0x8ee <NVM::V4::read_memory()+0x12>
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv4.cpp:136
        _dwAddr = PROD_SIG + ((uint8_t)_dwAddr & 0x7F);
      }
      if (UPDI::recv_bytes_block(_dwAddr, _wLength))
        return _wLength + 1;
    }
    return 0;
     8e4:	90 e0       	ldi	r25, 0x00	; 0
     8e6:	80 e0       	ldi	r24, 0x00	; 0
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv4.cpp:137
  }
     8e8:	df 91       	pop	r29
     8ea:	cf 91       	pop	r28
     8ec:	08 95       	ret
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv4.cpp:120
  size_t prog_init (void) {
    return nvm_ctrl_change(0x00);
  }

  size_t read_memory (void) {
    uint8_t   m_type = packet.out.bMType;
     8ee:	20 91 c5 60 	lds	r18, 0x60C5	; 0x8060c5 <packet+0x7>
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv4.cpp:121
    uint32_t _dwAddr = packet.out.dwAddr;
     8f2:	60 91 c6 60 	lds	r22, 0x60C6	; 0x8060c6 <packet+0x8>
     8f6:	70 91 c7 60 	lds	r23, 0x60C7	; 0x8060c7 <packet+0x9>
     8fa:	80 91 c8 60 	lds	r24, 0x60C8	; 0x8060c8 <packet+0xa>
     8fe:	90 91 c9 60 	lds	r25, 0x60C9	; 0x8060c9 <packet+0xb>
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv4.cpp:122
    size_t  _wLength = packet.out.dwLength;
     902:	c0 91 ca 60 	lds	r28, 0x60CA	; 0x8060ca <packet+0xc>
     906:	d0 91 cb 60 	lds	r29, 0x60CB	; 0x8060cb <packet+0xd>
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv4.cpp:124
    if (bit_is_set(PGCONF, PGCONF_PROG_bp)) {
      if (m_type == 0xB0) {
     90a:	20 3b       	cpi	r18, 0xB0	; 176
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv4.cpp:126
        /* MTYPE_FLASH_PAGE (PROGMEM) */
        _dwAddr += PROG_START;
     90c:	49 f4       	brne	.+18     	; 0x920 <NVM::V4::read_memory()+0x44>
     90e:	80 58       	subi	r24, 0x80	; 128
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv4.cpp:127
        return UPDI::recv_words_block(_dwAddr, _wLength) ? _wLength + 1 : 0;
     910:	9f 4f       	sbci	r25, 0xFF	; 255
     912:	ae 01       	movw	r20, r28
     914:	86 df       	rcall	.-244    	; 0x822 <UPDI::recv_words_block(unsigned long, unsigned int)>
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv4.cpp:133
      }
      if (m_type == 0xB4) {
        /* MTYPE_SIGN_JTAG */
        _dwAddr = PROD_SIG + ((uint8_t)_dwAddr & 0x7F);
      }
      if (UPDI::recv_bytes_block(_dwAddr, _wLength))
     916:	88 23       	and	r24, r24
     918:	29 f3       	breq	.-54     	; 0x8e4 <NVM::V4::read_memory()+0x8>
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv4.cpp:134
        return _wLength + 1;
     91a:	ce 01       	movw	r24, r28
     91c:	01 96       	adiw	r24, 0x01	; 1
     91e:	e4 cf       	rjmp	.-56     	; 0x8e8 <NVM::V4::read_memory()+0xc>
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv4.cpp:129
      if (m_type == 0xB0) {
        /* MTYPE_FLASH_PAGE (PROGMEM) */
        _dwAddr += PROG_START;
        return UPDI::recv_words_block(_dwAddr, _wLength) ? _wLength + 1 : 0;
      }
      if (m_type == 0xB4) {
     920:	24 3b       	cpi	r18, 0xB4	; 180
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv4.cpp:131
        /* MTYPE_SIGN_JTAG */
        _dwAddr = PROD_SIG + ((uint8_t)_dwAddr & 0x7F);
     922:	41 f4       	brne	.+16     	; 0x934 <NVM::V4::read_memory()+0x58>
     924:	6f 77       	andi	r22, 0x7F	; 127
     926:	70 e0       	ldi	r23, 0x00	; 0
     928:	60 58       	subi	r22, 0x80	; 128
     92a:	7f 4e       	sbci	r23, 0xEF	; 239
     92c:	07 2e       	mov	r0, r23
     92e:	00 0c       	add	r0, r0
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv4.cpp:133
      }
      if (UPDI::recv_bytes_block(_dwAddr, _wLength))
     930:	88 0b       	sbc	r24, r24
     932:	99 0b       	sbc	r25, r25
     934:	ae 01       	movw	r20, r28
     936:	a5 df       	rcall	.-182    	; 0x882 <UPDI::recv_bytes_block(unsigned long, unsigned int)>
     938:	ee cf       	rjmp	.-36     	; 0x916 <NVM::V4::read_memory()+0x3a>

0000093a <NVM::V5::read_memory()>:
_ZN3NVM2V511read_memoryEv():
     93a:	d0 cf       	rjmp	.-96     	; 0x8dc <NVM::V4::read_memory()>

0000093c <NVM::V2::read_memory()>:
read_memory():
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv2.cpp:116

  size_t prog_init (void) {
    return nvm_ctrl_change(0x00);
  }

  size_t read_memory (void) {
     93c:	cf 93       	push	r28
     93e:	df 93       	push	r29
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv2.cpp:120
    uint8_t   m_type = packet.out.bMType;
    uint32_t _dwAddr = packet.out.dwAddr;
    size_t  _wLength = packet.out.dwLength;
    if (bit_is_set(PGCONF, PGCONF_PROG_bp)) {
     940:	e9 99       	sbic	0x1d, 1	; 29
     942:	05 c0       	rjmp	.+10     	; 0x94e <NVM::V2::read_memory()+0x12>
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv2.cpp:133
        _dwAddr = PROD_SIG + ((uint8_t)_dwAddr & 0x7F);
      }
      if (UPDI::recv_bytes_block(_dwAddr, _wLength))
        return _wLength + 1;
    }
    return 0;
     944:	90 e0       	ldi	r25, 0x00	; 0
     946:	80 e0       	ldi	r24, 0x00	; 0
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv2.cpp:134
  }
     948:	df 91       	pop	r29
     94a:	cf 91       	pop	r28
     94c:	08 95       	ret
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv2.cpp:117
  size_t prog_init (void) {
    return nvm_ctrl_change(0x00);
  }

  size_t read_memory (void) {
    uint8_t   m_type = packet.out.bMType;
     94e:	20 91 c5 60 	lds	r18, 0x60C5	; 0x8060c5 <packet+0x7>
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv2.cpp:118
    uint32_t _dwAddr = packet.out.dwAddr;
     952:	60 91 c6 60 	lds	r22, 0x60C6	; 0x8060c6 <packet+0x8>
     956:	70 91 c7 60 	lds	r23, 0x60C7	; 0x8060c7 <packet+0x9>
     95a:	80 91 c8 60 	lds	r24, 0x60C8	; 0x8060c8 <packet+0xa>
     95e:	90 91 c9 60 	lds	r25, 0x60C9	; 0x8060c9 <packet+0xb>
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv2.cpp:119
    size_t  _wLength = packet.out.dwLength;
     962:	c0 91 ca 60 	lds	r28, 0x60CA	; 0x8060ca <packet+0xc>
     966:	d0 91 cb 60 	lds	r29, 0x60CB	; 0x8060cb <packet+0xd>
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv2.cpp:121
    if (bit_is_set(PGCONF, PGCONF_PROG_bp)) {
      if (m_type == 0xB0) {
     96a:	20 3b       	cpi	r18, 0xB0	; 176
     96c:	49 f4       	brne	.+18     	; 0x980 <NVM::V2::read_memory()+0x44>
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv2.cpp:123
        /* MTYPE_FLASH_PAGE (PROGMEM) */
        _dwAddr += PROG_START;
     96e:	80 58       	subi	r24, 0x80	; 128
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv2.cpp:124
        return UPDI::recv_words_block(_dwAddr, _wLength) ? _wLength + 1 : 0;
     970:	9f 4f       	sbci	r25, 0xFF	; 255
     972:	ae 01       	movw	r20, r28
     974:	56 df       	rcall	.-340    	; 0x822 <UPDI::recv_words_block(unsigned long, unsigned int)>
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv2.cpp:130
      }
      if (m_type == 0xB4) {
        /* MTYPE_SIGN_JTAG */
        _dwAddr = PROD_SIG + ((uint8_t)_dwAddr & 0x7F);
      }
      if (UPDI::recv_bytes_block(_dwAddr, _wLength))
     976:	88 23       	and	r24, r24
     978:	29 f3       	breq	.-54     	; 0x944 <NVM::V2::read_memory()+0x8>
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv2.cpp:131
        return _wLength + 1;
     97a:	ce 01       	movw	r24, r28
     97c:	01 96       	adiw	r24, 0x01	; 1
     97e:	e4 cf       	rjmp	.-56     	; 0x948 <NVM::V2::read_memory()+0xc>
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv2.cpp:126
      if (m_type == 0xB0) {
        /* MTYPE_FLASH_PAGE (PROGMEM) */
        _dwAddr += PROG_START;
        return UPDI::recv_words_block(_dwAddr, _wLength) ? _wLength + 1 : 0;
      }
      if (m_type == 0xB4) {
     980:	24 3b       	cpi	r18, 0xB4	; 180
     982:	39 f4       	brne	.+14     	; 0x992 <NVM::V2::read_memory()+0x56>
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv2.cpp:128
        /* MTYPE_SIGN_JTAG */
        _dwAddr = PROD_SIG + ((uint8_t)_dwAddr & 0x7F);
     984:	6f 77       	andi	r22, 0x7F	; 127
     986:	70 e0       	ldi	r23, 0x00	; 0
     988:	7f 5e       	subi	r23, 0xEF	; 239
     98a:	07 2e       	mov	r0, r23
     98c:	00 0c       	add	r0, r0
     98e:	88 0b       	sbc	r24, r24
     990:	99 0b       	sbc	r25, r25
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv2.cpp:130
      }
      if (UPDI::recv_bytes_block(_dwAddr, _wLength))
     992:	ae 01       	movw	r20, r28
     994:	76 df       	rcall	.-276    	; 0x882 <UPDI::recv_bytes_block(unsigned long, unsigned int)>
     996:	ef cf       	rjmp	.-34     	; 0x976 <NVM::V2::read_memory()+0x3a>

00000998 <NVM::V3::read_memory()>:
_ZN3NVM2V311read_memoryEv():
     998:	d1 cf       	rjmp	.-94     	; 0x93c <NVM::V2::read_memory()>

0000099a <NVM::V0::read_memory()>:
read_memory():
     99a:	cf 93       	push	r28
     99c:	df 93       	push	r29
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv0.cpp:114
    UPDI::nvm_ctrl(0x04);         /* NVM_CMD_PBC */
    nvm_wait();
    return UPDI::nvm_ctrl(0x00);
  }

  size_t read_memory (void) {
     99e:	80 91 c5 60 	lds	r24, 0x60C5	; 0x8060c5 <packet+0x7>
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv0.cpp:115
    uint8_t  m_type = packet.out.bMType;
     9a2:	60 91 c6 60 	lds	r22, 0x60C6	; 0x8060c6 <packet+0x8>
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv0.cpp:116
    uint16_t _wAddr = packet.out.dwAddr;
     9a6:	30 91 c7 60 	lds	r19, 0x60C7	; 0x8060c7 <packet+0x9>
     9aa:	84 3b       	cpi	r24, 0xB4	; 180
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv0.cpp:118
    size_t _wLength = packet.out.dwLength;
    if (m_type == 0xB4) {
     9ac:	51 f4       	brne	.+20     	; 0x9c2 <NVM::V0::read_memory()+0x28>
     9ae:	6f 77       	andi	r22, 0x7F	; 127
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv0.cpp:120
      /* MTYPE_SIGN_JTAG */
      _wAddr = PROD_SIG + ((uint8_t)_wAddr & 0x7F);
     9b0:	70 e0       	ldi	r23, 0x00	; 0
     9b2:	7f 5e       	subi	r23, 0xEF	; 239
     9b4:	e9 99       	sbic	0x1d, 1	; 29
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv0.cpp:127
    else if (m_type == 0xB0) {
      /* MTYPE_FLASH_PAGE (PROGMEM) */
      _wAddr += Device_Descriptor.UPDI.prog_base;
    }
    if (bit_is_set(PGCONF, PGCONF_PROG_bp)
     && UPDI::recv_bytes_block(_wAddr, _wLength))
     9b6:	0f c0       	rjmp	.+30     	; 0x9d6 <NVM::V0::read_memory()+0x3c>
     9b8:	90 e0       	ldi	r25, 0x00	; 0
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv0.cpp:129
      return _wLength + 1;
    return 0;
     9ba:	80 e0       	ldi	r24, 0x00	; 0
     9bc:	df 91       	pop	r29
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv0.cpp:130
  }
     9be:	cf 91       	pop	r28
     9c0:	08 95       	ret
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv0.cpp:116
    return UPDI::nvm_ctrl(0x00);
  }

  size_t read_memory (void) {
    uint8_t  m_type = packet.out.bMType;
    uint16_t _wAddr = packet.out.dwAddr;
     9c2:	73 2f       	mov	r23, r19
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv0.cpp:122
    size_t _wLength = packet.out.dwLength;
    if (m_type == 0xB4) {
      /* MTYPE_SIGN_JTAG */
      _wAddr = PROD_SIG + ((uint8_t)_wAddr & 0x7F);
    }
    else if (m_type == 0xB0) {
     9c4:	80 3b       	cpi	r24, 0xB0	; 176
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv0.cpp:124
      /* MTYPE_FLASH_PAGE (PROGMEM) */
      _wAddr += Device_Descriptor.UPDI.prog_base;
     9c6:	b1 f7       	brne	.-20     	; 0x9b4 <NVM::V0::read_memory()+0x1a>
     9c8:	80 91 8e 60 	lds	r24, 0x608E	; 0x80608e <Device_Descriptor>
     9cc:	90 91 8f 60 	lds	r25, 0x608F	; 0x80608f <Device_Descriptor+0x1>
     9d0:	68 0f       	add	r22, r24
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv0.cpp:117
  }

  size_t read_memory (void) {
    uint8_t  m_type = packet.out.bMType;
    uint16_t _wAddr = packet.out.dwAddr;
    size_t _wLength = packet.out.dwLength;
     9d2:	79 1f       	adc	r23, r25
     9d4:	ef cf       	rjmp	.-34     	; 0x9b4 <NVM::V0::read_memory()+0x1a>
     9d6:	c0 91 ca 60 	lds	r28, 0x60CA	; 0x8060ca <packet+0xc>
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv0.cpp:127
    else if (m_type == 0xB0) {
      /* MTYPE_FLASH_PAGE (PROGMEM) */
      _wAddr += Device_Descriptor.UPDI.prog_base;
    }
    if (bit_is_set(PGCONF, PGCONF_PROG_bp)
     && UPDI::recv_bytes_block(_wAddr, _wLength))
     9da:	d0 91 cb 60 	lds	r29, 0x60CB	; 0x8060cb <packet+0xd>
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	80 e0       	ldi	r24, 0x00	; 0
     9e2:	ae 01       	movw	r20, r28
     9e4:	4e df       	rcall	.-356    	; 0x882 <UPDI::recv_bytes_block(unsigned long, unsigned int)>
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv0.cpp:128
      return _wLength + 1;
     9e6:	88 23       	and	r24, r24
     9e8:	39 f3       	breq	.-50     	; 0x9b8 <NVM::V0::read_memory()+0x1e>
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:50
      loop_until_bit_is_clear(TCLK_IN, TCLK_bp);
    }
  }

  bool recv (void) {
    loop_until_bit_is_set(USART0_STATUS, USART_RXCIF_bp);
     9ea:	ce 01       	movw	r24, r28
     9ec:	01 96       	adiw	r24, 0x01	; 1
     9ee:	e6 cf       	rjmp	.-52     	; 0x9bc <NVM::V0::read_memory()+0x22>

000009f0 <TPI::recv()>:
recv():
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:51
    RXSTAT = USART0_RXDATAH ^ 0x80;
     9f0:	80 91 04 08 	lds	r24, 0x0804	; 0x800804 <__TEXT_REGION_LENGTH__+0x7f0804>
     9f4:	87 ff       	sbrs	r24, 7
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:52
    RXDATA = USART0_RXDATAL;
     9f6:	fc cf       	rjmp	.-8      	; 0x9f0 <TPI::recv()>
     9f8:	80 91 01 08 	lds	r24, 0x0801	; 0x800801 <__TEXT_REGION_LENGTH__+0x7f0801>
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:53
    return RXSTAT == 0;
     9fc:	80 58       	subi	r24, 0x80	; 128
     9fe:	8e bb       	out	0x1e, r24	; 30
     a00:	80 91 00 08 	lds	r24, 0x0800	; 0x800800 <__TEXT_REGION_LENGTH__+0x7f0800>
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:56
  }

  bool send (const uint8_t _data) {
     a04:	8f bb       	out	0x1f, r24	; 31
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:57
    loop_until_bit_is_set(USART0_STATUS, USART_DREIF_bp);
     a06:	9e b3       	in	r25, 0x1e	; 30
     a08:	81 e0       	ldi	r24, 0x01	; 1
     a0a:	91 11       	cpse	r25, r1
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:58
    USART0_TXDATAL = _data;
     a0c:	80 e0       	ldi	r24, 0x00	; 0
     a0e:	08 95       	ret

00000a10 <TPI::send(unsigned char)>:
send():
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:59
    return (recv() && _data == RXDATA);
     a10:	cf 93       	push	r28
     a12:	c8 2f       	mov	r28, r24
     a14:	80 91 04 08 	lds	r24, 0x0804	; 0x800804 <__TEXT_REGION_LENGTH__+0x7f0804>
     a18:	85 ff       	sbrs	r24, 5
     a1a:	fc cf       	rjmp	.-8      	; 0xa14 <TPI::send(unsigned char)+0x4>
     a1c:	c0 93 02 08 	sts	0x0802, r28	; 0x800802 <__TEXT_REGION_LENGTH__+0x7f0802>
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:60
  }
     a20:	e7 df       	rcall	.-50     	; 0x9f0 <TPI::recv()>
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:99
  bool nvm_wait (void) {
    while (get_sin(0x62) && RXDATA);  /* NVMCSR_REG: IO=0x32 */
    return true;
  }

  bool nvm_ctrl (const uint8_t _nvmcmd) {
     a22:	88 23       	and	r24, r24
     a24:	21 f0       	breq	.+8      	; 0xa2e <TPI::send(unsigned char)+0x1e>
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:73
  bool set_sstcs (const uint8_t _addr, const uint8_t _data) {
    return (send(0xC0 | _addr) && send(_data));
  }

  bool set_sout (const uint8_t _addr, const uint8_t _data) {
    return (send(0x90 | _addr) && send(_data));
     a26:	9f b3       	in	r25, 0x1f	; 31
     a28:	81 e0       	ldi	r24, 0x01	; 1
     a2a:	9c 13       	cpse	r25, r28
     a2c:	80 e0       	ldi	r24, 0x00	; 0
     a2e:	cf 91       	pop	r28
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:69
  bool get_sldcs (const uint8_t _addr) {
    return (send(0x80 | _addr) && recv());
  }

  bool set_sstcs (const uint8_t _addr, const uint8_t _data) {
    return (send(0xC0 | _addr) && send(_data));
     a30:	08 95       	ret

00000a32 <TPI::nvm_ctrl(unsigned char)>:
nvm_ctrl():
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:101
    return true;
  }

  bool nvm_ctrl (const uint8_t _nvmcmd) {
    return set_sout(0x63, _nvmcmd);   /* NVMCMD_REG: IO=0x33 */
  }
     a32:	cf 93       	push	r28
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:69
  bool get_sldcs (const uint8_t _addr) {
    return (send(0x80 | _addr) && recv());
  }

  bool set_sstcs (const uint8_t _addr, const uint8_t _data) {
    return (send(0xC0 | _addr) && send(_data));
     a34:	c8 2f       	mov	r28, r24
set_sout():
     a36:	83 ef       	ldi	r24, 0xF3	; 243
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:101
    return true;
  }

  bool nvm_ctrl (const uint8_t _nvmcmd) {
    return set_sout(0x63, _nvmcmd);   /* NVMCMD_REG: IO=0x33 */
  }
     a38:	eb df       	rcall	.-42     	; 0xa10 <TPI::send(unsigned char)>
     a3a:	88 23       	and	r24, r24
     a3c:	19 f0       	breq	.+6      	; 0xa44 <TPI::nvm_ctrl(unsigned char)+0x12>
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:77
  bool set_sout (const uint8_t _addr, const uint8_t _data) {
    return (send(0x90 | _addr) && send(_data));
  }

  bool get_sin (const uint8_t _addr) {
    return (send(0x10 | _addr) && recv());
     a3e:	8c 2f       	mov	r24, r28
nvm_ctrl():
     a40:	cf 91       	pop	r28
set_sout():
     a42:	e6 cf       	rjmp	.-52     	; 0xa10 <TPI::send(unsigned char)>
nvm_ctrl():
     a44:	80 e0       	ldi	r24, 0x00	; 0
     a46:	cf 91       	pop	r28
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:65
  }

  /*** TPI control and CSS area command ***/

  bool get_sldcs (const uint8_t _addr) {
    return (send(0x80 | _addr) && recv());
     a48:	08 95       	ret

00000a4a <TPI::nvm_wait()>:
get_sin():
     a4a:	82 e7       	ldi	r24, 0x72	; 114
     a4c:	e1 df       	rcall	.-62     	; 0xa10 <TPI::send(unsigned char)>
     a4e:	88 23       	and	r24, r24
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:95
  }

  /*** NVM control ****/

  bool nvm_wait (void) {
    while (get_sin(0x62) && RXDATA);  /* NVMCSR_REG: IO=0x32 */
     a50:	31 f0       	breq	.+12     	; 0xa5e <TPI::nvm_wait()+0x14>
     a52:	ce df       	rcall	.-100    	; 0x9f0 <TPI::recv()>
     a54:	88 23       	and	r24, r24
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:97
    return true;
  }
     a56:	19 f0       	breq	.+6      	; 0xa5e <TPI::nvm_wait()+0x14>
nvm_wait():
     a58:	8f b3       	in	r24, 0x1f	; 31
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:88

  bool get_sld (void) {
    return (send(0x24) && recv());
  }

  bool set_sst (const uint8_t _data) {
     a5a:	81 11       	cpse	r24, r1
     a5c:	f6 cf       	rjmp	.-20     	; 0xa4a <TPI::nvm_wait()>
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:89
    return (send(0x64) && send(_data));
     a5e:	81 e0       	ldi	r24, 0x01	; 1
     a60:	08 95       	ret

00000a62 <TPI::set_sst(unsigned char)>:
set_sst():
     a62:	cf 93       	push	r28
     a64:	c8 2f       	mov	r28, r24
     a66:	84 e6       	ldi	r24, 0x64	; 100
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:69
  bool get_sldcs (const uint8_t _addr) {
    return (send(0x80 | _addr) && recv());
  }

  bool set_sstcs (const uint8_t _addr, const uint8_t _data) {
    return (send(0xC0 | _addr) && send(_data));
     a68:	d3 df       	rcall	.-90     	; 0xa10 <TPI::send(unsigned char)>
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:90
    return (send(0x24) && recv());
  }

  bool set_sst (const uint8_t _data) {
    return (send(0x64) && send(_data));
  }
     a6a:	88 23       	and	r24, r24
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:69
  bool get_sldcs (const uint8_t _addr) {
    return (send(0x80 | _addr) && recv());
  }

  bool set_sstcs (const uint8_t _addr, const uint8_t _data) {
    return (send(0xC0 | _addr) && send(_data));
     a6c:	19 f0       	breq	.+6      	; 0xa74 <TPI::set_sst(unsigned char)+0x12>
     a6e:	8c 2f       	mov	r24, r28
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:90
    return (send(0x24) && recv());
  }

  bool set_sst (const uint8_t _data) {
    return (send(0x64) && send(_data));
  }
     a70:	cf 91       	pop	r28
     a72:	ce cf       	rjmp	.-100    	; 0xa10 <TPI::send(unsigned char)>
     a74:	80 e0       	ldi	r24, 0x00	; 0
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:85
  bool set_sstpr (const uint16_t _addr) {
    return (send(0x68) && send(_addr & 0xFF) && send(0x69) && send(_addr >> 8));
  }

  bool get_sld (void) {
    return (send(0x24) && recv());
     a76:	cf 91       	pop	r28
     a78:	08 95       	ret

00000a7a <TPI::get_sld()>:
get_sld():
     a7a:	84 e2       	ldi	r24, 0x24	; 36
     a7c:	c9 df       	rcall	.-110    	; 0xa10 <TPI::send(unsigned char)>
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:65
  }

  /*** TPI control and CSS area command ***/

  bool get_sldcs (const uint8_t _addr) {
    return (send(0x80 | _addr) && recv());
     a7e:	81 11       	cpse	r24, r1
     a80:	b7 cf       	rjmp	.-146    	; 0x9f0 <TPI::recv()>
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:86
    return (send(0x68) && send(_addr & 0xFF) && send(0x69) && send(_addr >> 8));
  }

  bool get_sld (void) {
    return (send(0x24) && recv());
  }
     a82:	80 e0       	ldi	r24, 0x00	; 0
     a84:	08 95       	ret

00000a86 <TPI::set_sstpr(unsigned int)>:
set_sstpr():
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:80

  bool get_sin (const uint8_t _addr) {
    return (send(0x10 | _addr) && recv());
  }

  bool set_sstpr (const uint16_t _addr) {
     a86:	cf 93       	push	r28
     a88:	df 93       	push	r29
     a8a:	d8 2f       	mov	r29, r24
     a8c:	c9 2f       	mov	r28, r25
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:81
    return (send(0x68) && send(_addr & 0xFF) && send(0x69) && send(_addr >> 8));
     a8e:	88 e6       	ldi	r24, 0x68	; 104
     a90:	bf df       	rcall	.-130    	; 0xa10 <TPI::send(unsigned char)>
     a92:	88 23       	and	r24, r24
     a94:	61 f0       	breq	.+24     	; 0xaae <TPI::set_sstpr(unsigned int)+0x28>
     a96:	8d 2f       	mov	r24, r29
     a98:	bb df       	rcall	.-138    	; 0xa10 <TPI::send(unsigned char)>
     a9a:	88 23       	and	r24, r24
     a9c:	41 f0       	breq	.+16     	; 0xaae <TPI::set_sstpr(unsigned int)+0x28>
     a9e:	89 e6       	ldi	r24, 0x69	; 105
     aa0:	b7 df       	rcall	.-146    	; 0xa10 <TPI::send(unsigned char)>
     aa2:	88 23       	and	r24, r24
     aa4:	21 f0       	breq	.+8      	; 0xaae <TPI::set_sstpr(unsigned int)+0x28>
     aa6:	8c 2f       	mov	r24, r28
     aa8:	df 91       	pop	r29
     aaa:	cf 91       	pop	r28
     aac:	b1 cf       	rjmp	.-158    	; 0xa10 <TPI::send(unsigned char)>
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:82
  }
     aae:	80 e0       	ldi	r24, 0x00	; 0
     ab0:	df 91       	pop	r29
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:81
  bool get_sin (const uint8_t _addr) {
    return (send(0x10 | _addr) && recv());
  }

  bool set_sstpr (const uint16_t _addr) {
    return (send(0x68) && send(_addr & 0xFF) && send(0x69) && send(_addr >> 8));
     ab2:	cf 91       	pop	r28
     ab4:	08 95       	ret

00000ab6 <TPI::idle_clock(unsigned int)>:
idle_clock():
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:82
  }
     ab6:	30 e0       	ldi	r19, 0x00	; 0
     ab8:	20 e0       	ldi	r18, 0x00	; 0
     aba:	40 91 08 04 	lds	r20, 0x0408	; 0x800408 <__TEXT_REGION_LENGTH__+0x7f0408>
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:43
  const static uint8_t nvmprog_key[] = {
    0xE0, 0xFF, 0x88, 0xD8, 0xCD, 0x45, 0xAB, 0x89, 0x12
  };

  void idle_clock (const size_t clock) {
    for (size_t i = 0; i < clock; i++) {
     abe:	42 ff       	sbrs	r20, 2
     ac0:	fc cf       	rjmp	.-8      	; 0xaba <TPI::idle_clock(unsigned int)+0x4>
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:44
      loop_until_bit_is_set(TCLK_IN, TCLK_bp);
     ac2:	40 91 08 04 	lds	r20, 0x0408	; 0x800408 <__TEXT_REGION_LENGTH__+0x7f0408>
     ac6:	42 fd       	sbrc	r20, 2
     ac8:	fc cf       	rjmp	.-8      	; 0xac2 <TPI::idle_clock(unsigned int)+0xc>
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:45
      loop_until_bit_is_clear(TCLK_IN, TCLK_bp);
     aca:	2f 5f       	subi	r18, 0xFF	; 255
     acc:	3f 4f       	sbci	r19, 0xFF	; 255
     ace:	82 17       	cp	r24, r18
     ad0:	93 07       	cpc	r25, r19
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:43
  const static uint8_t nvmprog_key[] = {
    0xE0, 0xFF, 0x88, 0xD8, 0xCD, 0x45, 0xAB, 0x89, 0x12
  };

  void idle_clock (const size_t clock) {
    for (size_t i = 0; i < clock; i++) {
     ad2:	99 f7       	brne	.-26     	; 0xaba <TPI::idle_clock(unsigned int)+0x4>
     ad4:	08 95       	ret

00000ad6 <SYS::is_boundary_flash_page(unsigned long)>:
is_boundary_flash_page():
     ad6:	cf 92       	push	r12
     ad8:	df 92       	push	r13
     ada:	ef 92       	push	r14
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:47
      loop_until_bit_is_set(TCLK_IN, TCLK_bp);
      loop_until_bit_is_clear(TCLK_IN, TCLK_bp);
    }
  }
     adc:	ff 92       	push	r15
/Users/askn/Collaborator/UPDI4AVR-USB/src/sys.cpp:299
   * Flash memory boundary check
   *
   * True when a page area address different from the previous time is detected.
   * Indicates the need to erase a page in FLASH/USERROW/BOOTROW of the AVR-Dx series.
   */
  bool is_boundary_flash_page (uint32_t _dwAddr) {
     ade:	ab 01       	movw	r20, r22
     ae0:	bc 01       	movw	r22, r24
     ae2:	80 91 bb 60 	lds	r24, 0x60BB	; 0x8060bb <Device_Descriptor+0x2d>
     ae6:	28 2f       	mov	r18, r24
     ae8:	30 e0       	ldi	r19, 0x00	; 0
/Users/askn/Collaborator/UPDI4AVR-USB/src/sys.cpp:300
    uint32_t _mask = ~(((uint16_t)Device_Descriptor.UPDI.flash_page_size_msb << 8)
     aea:	32 2f       	mov	r19, r18
     aec:	22 27       	eor	r18, r18
     aee:	80 91 90 60 	lds	r24, 0x6090	; 0x806090 <Device_Descriptor+0x2>
     af2:	82 0f       	add	r24, r18
     af4:	93 2f       	mov	r25, r19
/Users/askn/Collaborator/UPDI4AVR-USB/src/sys.cpp:301
                                + Device_Descriptor.UPDI.flash_page_size - 1);
     af6:	91 1d       	adc	r25, r1
     af8:	91 95       	neg	r25
     afa:	81 95       	neg	r24
     afc:	91 09       	sbc	r25, r1
     afe:	b0 e0       	ldi	r27, 0x00	; 0
/Users/askn/Collaborator/UPDI4AVR-USB/src/sys.cpp:300
   *
   * True when a page area address different from the previous time is detected.
   * Indicates the need to erase a page in FLASH/USERROW/BOOTROW of the AVR-Dx series.
   */
  bool is_boundary_flash_page (uint32_t _dwAddr) {
    uint32_t _mask = ~(((uint16_t)Device_Descriptor.UPDI.flash_page_size_msb << 8)
     b00:	a0 e0       	ldi	r26, 0x00	; 0
     b02:	84 23       	and	r24, r20
     b04:	95 23       	and	r25, r21
     b06:	a6 23       	and	r26, r22
     b08:	b7 23       	and	r27, r23
/Users/askn/Collaborator/UPDI4AVR-USB/src/sys.cpp:302
                                + Device_Descriptor.UPDI.flash_page_size - 1);
    uint32_t _after_page = _dwAddr & _mask;
     b0a:	21 e0       	ldi	r18, 0x01	; 1
     b0c:	c0 90 da 62 	lds	r12, 0x62DA	; 0x8062da <_before_page>
     b10:	d0 90 db 62 	lds	r13, 0x62DB	; 0x8062db <_before_page+0x1>
/Users/askn/Collaborator/UPDI4AVR-USB/src/sys.cpp:303
    bool _result = _before_page != _after_page;
     b14:	e0 90 dc 62 	lds	r14, 0x62DC	; 0x8062dc <_before_page+0x2>
     b18:	f0 90 dd 62 	lds	r15, 0x62DD	; 0x8062dd <_before_page+0x3>
     b1c:	c8 16       	cp	r12, r24
     b1e:	d9 06       	cpc	r13, r25
     b20:	ea 06       	cpc	r14, r26
     b22:	fb 06       	cpc	r15, r27
     b24:	09 f4       	brne	.+2      	; 0xb28 <SYS::is_boundary_flash_page(unsigned long)+0x52>
     b26:	20 e0       	ldi	r18, 0x00	; 0
     b28:	80 93 da 62 	sts	0x62DA, r24	; 0x8062da <_before_page>
     b2c:	90 93 db 62 	sts	0x62DB, r25	; 0x8062db <_before_page+0x1>
/Users/askn/Collaborator/UPDI4AVR-USB/src/sys.cpp:304
    _before_page = _after_page;
     b30:	a0 93 dc 62 	sts	0x62DC, r26	; 0x8062dc <_before_page+0x2>
     b34:	b0 93 dd 62 	sts	0x62DD, r27	; 0x8062dd <_before_page+0x3>
     b38:	82 2f       	mov	r24, r18
     b3a:	ff 90       	pop	r15
     b3c:	ef 90       	pop	r14
     b3e:	df 90       	pop	r13
/Users/askn/Collaborator/UPDI4AVR-USB/src/sys.cpp:306
    return _result;
  }
     b40:	cf 90       	pop	r12
     b42:	08 95       	ret

00000b44 <SYS::LED_Flash()>:
LED_TCB1():
     b44:	80 91 7d 60 	lds	r24, 0x607D	; 0x80607d <_led_mode>
     b48:	82 30       	cpi	r24, 0x02	; 2
     b4a:	81 f0       	breq	.+32     	; 0xb6c <SYS::LED_Flash()+0x28>
/Users/askn/Collaborator/UPDI4AVR-USB/src/sys.cpp:180
      _led_mode = 1;
    }
  }

  void LED_TCB1 (uint8_t _mode, uint16_t _ccmp) {
    if (_led_mode != _mode) {
     b4c:	10 92 00 0a 	sts	0x0A00, r1	; 0x800a00 <__TEXT_REGION_LENGTH__+0x7f0a00>
     b50:	10 92 1a 0b 	sts	0x0B1A, r1	; 0x800b1a <__TEXT_REGION_LENGTH__+0x7f0b1a>
/Users/askn/Collaborator/UPDI4AVR-USB/src/sys.cpp:181
      TCA0_SPLIT_CTRLA = 0;
     b54:	89 ea       	ldi	r24, 0xA9	; 169
     b56:	95 e0       	ldi	r25, 0x05	; 5
/Users/askn/Collaborator/UPDI4AVR-USB/src/sys.cpp:182
      TCB1_CNTL = 0;
     b58:	80 93 1c 0b 	sts	0x0B1C, r24	; 0x800b1c <__TEXT_REGION_LENGTH__+0x7f0b1c>
/Users/askn/Collaborator/UPDI4AVR-USB/src/sys.cpp:183
      TCB1_CCMP = _ccmp;
     b5c:	90 93 1d 0b 	sts	0x0B1D, r25	; 0x800b1d <__TEXT_REGION_LENGTH__+0x7f0b1d>
     b60:	8f e4       	ldi	r24, 0x4F	; 79
     b62:	80 93 10 0b 	sts	0x0B10, r24	; 0x800b10 <__TEXT_REGION_LENGTH__+0x7f0b10>
     b66:	82 e0       	ldi	r24, 0x02	; 2
/Users/askn/Collaborator/UPDI4AVR-USB/src/sys.cpp:184
      TCB1_CTRLA = TCB_RUNSTDBY_bm | TCB_ENABLE_bm | TCB_CLKSEL_EVENT_gc;
     b68:	80 93 7d 60 	sts	0x607D, r24	; 0x80607d <_led_mode>
LED_Flash():
     b6c:	08 95       	ret

00000b6e <SYS::LED_HeartBeat()>:
LED_HeartBeat():
/Users/askn/Collaborator/UPDI4AVR-USB/src/sys.cpp:185
      _led_mode = _mode;
     b6e:	80 91 7d 60 	lds	r24, 0x607D	; 0x80607d <_led_mode>
     b72:	81 30       	cpi	r24, 0x01	; 1
/Users/askn/Collaborator/UPDI4AVR-USB/src/sys.cpp:198
     * Restarting TCBn in PWM8 mode may cause the duty
     * cycle of TCBn_WO to invert. Solution unknown.
     * This function is affected.
     */
    LED_TCB1(2, TCB1_FLASH);
  }
     b74:	89 f0       	breq	.+34     	; 0xb98 <SYS::LED_HeartBeat()+0x2a>
/Users/askn/Collaborator/UPDI4AVR-USB/src/sys.cpp:170
  * LED operation switching
  */

  /* Heartbeat (waiting) */
  void LED_HeartBeat (void) {
    if (_led_mode != 1) {
     b76:	8f e0       	ldi	r24, 0x0F	; 15
     b78:	80 93 00 0a 	sts	0x0A00, r24	; 0x800a00 <__TEXT_REGION_LENGTH__+0x7f0a00>
     b7c:	10 92 1a 0b 	sts	0x0B1A, r1	; 0x800b1a <__TEXT_REGION_LENGTH__+0x7f0b1a>
/Users/askn/Collaborator/UPDI4AVR-USB/src/sys.cpp:171
      TCA0_SPLIT_CTRLA = TCA_SPLIT_ENABLE_bm | TCA_SPLIT_CLKSEL_DIV1024_gc;
     b80:	84 ec       	ldi	r24, 0xC4	; 196
     b82:	92 e6       	ldi	r25, 0x62	; 98
/Users/askn/Collaborator/UPDI4AVR-USB/src/sys.cpp:172
      TCB1_CNTL = 0;
     b84:	80 93 1c 0b 	sts	0x0B1C, r24	; 0x800b1c <__TEXT_REGION_LENGTH__+0x7f0b1c>
/Users/askn/Collaborator/UPDI4AVR-USB/src/sys.cpp:173
      TCB1_CCMP = TCB1_HBEAT;
     b88:	90 93 1d 0b 	sts	0x0B1D, r25	; 0x800b1d <__TEXT_REGION_LENGTH__+0x7f0b1d>
     b8c:	85 e4       	ldi	r24, 0x45	; 69
     b8e:	80 93 10 0b 	sts	0x0B10, r24	; 0x800b10 <__TEXT_REGION_LENGTH__+0x7f0b10>
     b92:	81 e0       	ldi	r24, 0x01	; 1
/Users/askn/Collaborator/UPDI4AVR-USB/src/sys.cpp:174
      TCB1_CTRLA = TCB_RUNSTDBY_bm | TCB_ENABLE_bm | TCB_CLKSEL_TCA0_gc;
     b94:	80 93 7d 60 	sts	0x607D, r24	; 0x80607d <_led_mode>
     b98:	08 95       	ret

00000b9a <USART::change_vcp()>:
change_vcp():
/Users/askn/Collaborator/UPDI4AVR-USB/src/sys.cpp:175
      _led_mode = 1;
     b9a:	cf 92       	push	r12
     b9c:	df 92       	push	r13
     b9e:	ef 92       	push	r14
/Users/askn/Collaborator/UPDI4AVR-USB/src/sys.cpp:177
    }
  }
     ba0:	ff 92       	push	r15
/Users/askn/Collaborator/UPDI4AVR-USB/src/usart.cpp:115
    }
  }

  /*** Activates VCP operation. ***/
  /* Detailed parameters are specified in SET_LINE_ENCODING. */
  void change_vcp (void) {
     ba2:	cf 93       	push	r28
     ba4:	df 93       	push	r29
     ba6:	00 d0       	rcall	.+0      	; 0xba8 <USART::change_vcp()+0xe>
     ba8:	00 d0       	rcall	.+0      	; 0xbaa <USART::change_vcp()+0x10>
     baa:	cd b7       	in	r28, 0x3d	; 61
     bac:	de b7       	in	r29, 0x3e	; 62
     bae:	20 91 7e 60 	lds	r18, 0x607E	; 0x80607e <_set_line_encoding>
     bb2:	30 91 7f 60 	lds	r19, 0x607F	; 0x80607f <_set_line_encoding+0x1>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usart.cpp:121
  #ifdef CONFIG_VCP_TXD_ODM
    uint8_t _ctrlb = USART_RXEN_bm | USART_TXEN_bm | USART_ODME_bm;
  #else
    uint8_t _ctrlb = USART_RXEN_bm | USART_TXEN_bm;
  #endif
    uint32_t _baud = _set_line_encoding.dwDTERate;
     bb6:	40 91 80 60 	lds	r20, 0x6080	; 0x806080 <_set_line_encoding+0x2>
     bba:	50 91 81 60 	lds	r21, 0x6081	; 0x806081 <_set_line_encoding+0x3>
     bbe:	21 15       	cp	r18, r1
     bc0:	31 05       	cpc	r19, r1
     bc2:	41 05       	cpc	r20, r1
     bc4:	51 05       	cpc	r21, r1
/Users/askn/Collaborator/UPDI4AVR-USB/src/usart.cpp:123
    /* If the BAUD value is small, select double speed mode. */
    if (_baud) _baud = (((F_CPU * 8L) / _baud) + 1) >> 1;
     bc6:	a1 f0       	breq	.+40     	; 0xbf0 <USART::change_vcp()+0x56>
     bc8:	60 e0       	ldi	r22, 0x00	; 0
     bca:	78 e6       	ldi	r23, 0x68	; 104
     bcc:	89 e8       	ldi	r24, 0x89	; 137
     bce:	99 e0       	ldi	r25, 0x09	; 9
     bd0:	0e 94 52 15 	call	0x2aa4	; 0x2aa4 <__udivmodsi4>
     bd4:	2f 5f       	subi	r18, 0xFF	; 255
     bd6:	3f 4f       	sbci	r19, 0xFF	; 255
     bd8:	4f 4f       	sbci	r20, 0xFF	; 255
     bda:	5f 4f       	sbci	r21, 0xFF	; 255
     bdc:	56 95       	lsr	r21
     bde:	47 95       	ror	r20
     be0:	37 95       	ror	r19
     be2:	27 95       	ror	r18
     be4:	a8 ec       	ldi	r26, 0xC8	; 200
     be6:	20 36       	cpi	r18, 0x60	; 96
     be8:	31 05       	cpc	r19, r1
     bea:	41 05       	cpc	r20, r1
/Users/askn/Collaborator/UPDI4AVR-USB/src/usart.cpp:117

  /*** Activates VCP operation. ***/
  /* Detailed parameters are specified in SET_LINE_ENCODING. */
  void change_vcp (void) {
  #ifdef CONFIG_VCP_TXD_ODM
    uint8_t _ctrlb = USART_RXEN_bm | USART_TXEN_bm | USART_ODME_bm;
     bec:	51 05       	cpc	r21, r1
/Users/askn/Collaborator/UPDI4AVR-USB/src/usart.cpp:124
    uint8_t _ctrlb = USART_RXEN_bm | USART_TXEN_bm;
  #endif
    uint32_t _baud = _set_line_encoding.dwDTERate;
    /* If the BAUD value is small, select double speed mode. */
    if (_baud) _baud = (((F_CPU * 8L) / _baud) + 1) >> 1;
    if (_baud < 96) {
     bee:	28 f4       	brcc	.+10     	; 0xbfa <USART::change_vcp()+0x60>
     bf0:	22 0f       	add	r18, r18
     bf2:	33 1f       	adc	r19, r19
     bf4:	44 1f       	adc	r20, r20
     bf6:	55 1f       	adc	r21, r21
/Users/askn/Collaborator/UPDI4AVR-USB/src/usart.cpp:125
      _baud <<= 1;
     bf8:	aa ec       	ldi	r26, 0xCA	; 202
     bfa:	69 01       	movw	r12, r18
     bfc:	7a 01       	movw	r14, r20
/Users/askn/Collaborator/UPDI4AVR-USB/src/usart.cpp:126
      _ctrlb |= USART_RXMODE_CLK2X_gc;
     bfe:	80 e4       	ldi	r24, 0x40	; 64
/Users/askn/Collaborator/UPDI4AVR-USB/src/usart.cpp:129
    }
    D1PRINTF(" BAUD=%08lX:%02X\r\n", _baud, _ctrlb);
    if (_baud < 0x10000UL && _baud >= 64) {
     c00:	c8 1a       	sub	r12, r24
     c02:	d1 08       	sbc	r13, r1
     c04:	e1 08       	sbc	r14, r1
     c06:	f1 08       	sbc	r15, r1
     c08:	80 ec       	ldi	r24, 0xC0	; 192
     c0a:	c8 16       	cp	r12, r24
     c0c:	8f ef       	ldi	r24, 0xFF	; 255
     c0e:	d8 06       	cpc	r13, r24
     c10:	e1 04       	cpc	r14, r1
     c12:	f1 04       	cpc	r15, r1
     c14:	d0 f5       	brcc	.+116    	; 0xc8a <USART::change_vcp()+0xf0>
     c16:	90 91 84 60 	lds	r25, 0x6084	; 0x806084 <_set_line_encoding+0x6>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usart.cpp:130
      uint8_t _bits = _set_line_encoding.bDataBits - 5;
     c1a:	95 50       	subi	r25, 0x05	; 5
     c1c:	c0 90 2c 60 	lds	r12, 0x602C	; 0x80602c <SYS::_updi_bitmap+0x12>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usart.cpp:131
      uint8_t _ctrlc = (uint8_t[]){
     c20:	d0 90 2d 60 	lds	r13, 0x602D	; 0x80602d <SYS::_updi_bitmap+0x13>
     c24:	e0 90 2e 60 	lds	r14, 0x602E	; 0x80602e <SYS::_updi_bitmap+0x14>
     c28:	f0 90 2f 60 	lds	r15, 0x602F	; 0x80602f <SYS::_updi_bitmap+0x15>
     c2c:	c9 82       	std	Y+1, r12	; 0x01
     c2e:	da 82       	std	Y+2, r13	; 0x02
     c30:	eb 82       	std	Y+3, r14	; 0x03
     c32:	fc 82       	std	Y+4, r15	; 0x04
/Users/askn/Collaborator/UPDI4AVR-USB/src/usart.cpp:133
        USART_PMODE_DISABLED_gc, USART_PMODE_ODD_gc, USART_PMODE_EVEN_gc, USART_PMODE_DISABLED_gc
      }[_set_line_encoding.bParityType & 3]
     c34:	e0 91 83 60 	lds	r30, 0x6083	; 0x806083 <_set_line_encoding+0x5>
     c38:	e3 70       	andi	r30, 0x03	; 3
     c3a:	ec 0f       	add	r30, r28
     c3c:	fd 2f       	mov	r31, r29
     c3e:	f1 1d       	adc	r31, r1
/Users/askn/Collaborator/UPDI4AVR-USB/src/usart.cpp:134
      + _set_line_encoding.bCharFormat ? USART_SBMODE_2BIT_gc : USART_SBMODE_1BIT_gc;
     c40:	61 81       	ldd	r22, Z+1	; 0x01
     c42:	80 91 82 60 	lds	r24, 0x6082	; 0x806082 <_set_line_encoding+0x4>
     c46:	68 0f       	add	r22, r24
     c48:	77 27       	eor	r23, r23
     c4a:	77 1f       	adc	r23, r23
     c4c:	80 e0       	ldi	r24, 0x00	; 0
     c4e:	67 2b       	or	r22, r23
/Users/askn/Collaborator/UPDI4AVR-USB/src/usart.cpp:135
      if (_bits < 4) {
     c50:	09 f0       	breq	.+2      	; 0xc54 <USART::change_vcp()+0xba>
     c52:	88 e0       	ldi	r24, 0x08	; 8
/Users/askn/Collaborator/UPDI4AVR-USB/src/usart.cpp:151
      }
      else {
        _ctrlc += USART_CHSIZE_8BIT_gc;
        #endif
      }
      ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
     c54:	94 30       	cpi	r25, 0x04	; 4
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/tools/avr-gcc/7.3.0-avr8-gnu-toolchain/avr/include/util/atomic.h:50
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     c56:	28 f5       	brcc	.+74     	; 0xca2 <USART::change_vcp()+0x108>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usart.cpp:152
        PORTMUX_USARTROUTEA = PORTMUX_USART_VCP;
     c58:	89 0f       	add	r24, r25
     c5a:	9f b7       	in	r25, 0x3f	; 63
__iCliRetVal():
/Users/askn/Collaborator/UPDI4AVR-USB/src/usart.cpp:153
        USART0_STATUS = USART_DREIF_bm;
     c5c:	f8 94       	cli
change_vcp():
     c5e:	62 e1       	ldi	r22, 0x12	; 18
     c60:	60 93 e2 05 	sts	0x05E2, r22	; 0x8005e2 <__TEXT_REGION_LENGTH__+0x7f05e2>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usart.cpp:154
        USART0_BAUD = (uint16_t)_baud;
     c64:	60 e2       	ldi	r22, 0x20	; 32
     c66:	60 93 04 08 	sts	0x0804, r22	; 0x800804 <__TEXT_REGION_LENGTH__+0x7f0804>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usart.cpp:155
        USART0_CTRLC = _ctrlc;
     c6a:	20 93 08 08 	sts	0x0808, r18	; 0x800808 <__TEXT_REGION_LENGTH__+0x7f0808>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usart.cpp:156
        USART0_CTRLA = USART_RXCIF_bm;
     c6e:	30 93 09 08 	sts	0x0809, r19	; 0x800809 <__TEXT_REGION_LENGTH__+0x7f0809>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usart.cpp:157
        USART0_CTRLB = _ctrlb;
     c72:	80 93 07 08 	sts	0x0807, r24	; 0x800807 <__TEXT_REGION_LENGTH__+0x7f0807>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usart.cpp:158
        bit_set(GPCONF, GPCONF_VCP_bp);
     c76:	80 e8       	ldi	r24, 0x80	; 128
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/tools/avr-gcc/7.3.0-avr8-gnu-toolchain/avr/include/util/atomic.h:70
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     c78:	80 93 05 08 	sts	0x0805, r24	; 0x800805 <__TEXT_REGION_LENGTH__+0x7f0805>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usart.cpp:161
      }
      D1PRINTF(" UART=VCP\r\n");
      drain(32768);
     c7c:	a0 93 06 08 	sts	0x0806, r26	; 0x800806 <__TEXT_REGION_LENGTH__+0x7f0806>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usart.cpp:167
    }
    else {
      /* If outside the supported range, the USART will remain in the BREAK state. */
      D1PRINTF(" UART=FAIL\r\n");
    }
    if (bit_is_set(GPCONF, GPCONF_USB_bp))
     c80:	e1 9a       	sbi	0x1c, 1	; 28
__iRestore():
/Users/askn/Collaborator/UPDI4AVR-USB/src/usart.cpp:171
      SYS::LED_HeartBeat();
    else
      SYS::LED_Flash();
  }
     c82:	9f bf       	out	0x3f, r25	; 63
change_vcp():
     c84:	80 e0       	ldi	r24, 0x00	; 0
     c86:	90 e8       	ldi	r25, 0x80	; 128
     c88:	99 db       	rcall	.-2254   	; 0x3bc <USART::drain(unsigned int)>
     c8a:	e0 9b       	sbis	0x1c, 0	; 28
     c8c:	0c c0       	rjmp	.+24     	; 0xca6 <USART::change_vcp()+0x10c>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usart.cpp:168
    else {
      /* If outside the supported range, the USART will remain in the BREAK state. */
      D1PRINTF(" UART=FAIL\r\n");
    }
    if (bit_is_set(GPCONF, GPCONF_USB_bp))
      SYS::LED_HeartBeat();
     c8e:	24 96       	adiw	r28, 0x04	; 4
/Users/askn/Collaborator/UPDI4AVR-USB/src/usart.cpp:148
        usart_receiver    = &USB::vcp_receiver_9bit;
        usart_transmitter = &USB::vcp_transceiver_9bit;
        #else
      }
      else {
        _ctrlc += USART_CHSIZE_8BIT_gc;
     c90:	cd bf       	out	0x3d, r28	; 61
     c92:	de bf       	out	0x3e, r29	; 62
/Users/askn/Collaborator/UPDI4AVR-USB/src/usart.cpp:171
    }
    if (bit_is_set(GPCONF, GPCONF_USB_bp))
      SYS::LED_HeartBeat();
    else
      SYS::LED_Flash();
  }
     c94:	df 91       	pop	r29
     c96:	cf 91       	pop	r28
     c98:	ff 90       	pop	r15
     c9a:	ef 90       	pop	r14
     c9c:	df 90       	pop	r13
     c9e:	cf 90       	pop	r12
     ca0:	66 cf       	rjmp	.-308    	; 0xb6e <SYS::LED_HeartBeat()>
     ca2:	8d 5f       	subi	r24, 0xFD	; 253
/Users/askn/Collaborator/UPDI4AVR-USB/src/usart.cpp:170
      D1PRINTF(" UART=FAIL\r\n");
    }
    if (bit_is_set(GPCONF, GPCONF_USB_bp))
      SYS::LED_HeartBeat();
    else
      SYS::LED_Flash();
     ca4:	da cf       	rjmp	.-76     	; 0xc5a <USART::change_vcp()+0xc0>
     ca6:	24 96       	adiw	r28, 0x04	; 4
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:388
    bit_set(GPCONF, GPCONF_BRK_bp);
  }

  void break_off (void) {
    if (bit_is_set(GPCONF, GPCONF_VCP_bp)
     && bit_is_set(GPCONF, GPCONF_BRK_bp)) {
     ca8:	cd bf       	out	0x3d, r28	; 61
     caa:	de bf       	out	0x3e, r29	; 62
     cac:	df 91       	pop	r29
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:389
      USART::change_vcp();
     cae:	cf 91       	pop	r28
     cb0:	ff 90       	pop	r15
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:392
      bit_set(GPCONF, GPCONF_OPN_bp);
    }
    bit_clear(GPCONF, GPCONF_BRK_bp);
     cb2:	ef 90       	pop	r14
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:393
  }
     cb4:	df 90       	pop	r13
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv3.cpp:55
  constexpr auto NVM_STATUS = 0x1006;
  constexpr auto PROD_SIG   = 0x1100;
  constexpr auto PROG_START = 0x800000;

  uint8_t nvm_wait (void) {
    do { UPDI::recv_byte(NVM_STATUS); } while (RXDATA & 3);
     cb6:	cf 90       	pop	r12
     cb8:	45 cf       	rjmp	.-374    	; 0xb44 <SYS::LED_Flash()>

00000cba <USB::break_off()>:
break_off():
     cba:	e1 9b       	sbis	0x1c, 1	; 28
     cbc:	04 c0       	rjmp	.+8      	; 0xcc6 <USB::break_off()+0xc>
     cbe:	e3 9b       	sbis	0x1c, 3	; 28
     cc0:	02 c0       	rjmp	.+4      	; 0xcc6 <USB::break_off()+0xc>
     cc2:	6b df       	rcall	.-298    	; 0xb9a <USART::change_vcp()>
     cc4:	e4 9a       	sbi	0x1c, 4	; 28
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv3.cpp:56
    return RXDATA;
     cc6:	e3 98       	cbi	0x1c, 3	; 28
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv3.cpp:57
  }
     cc8:	08 95       	ret

00000cca <NVM::V3::nvm_wait()>:
nvm_wait():
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv3.cpp:73
    D2PRINTF(" NVM_V3_FLPERW=%06lX\r\n", _dwAddr);
    return (
      nvm_ctrl_change(0x00)
      && UPDI::send_words_block(_dwAddr, _wLength)
      && nvm_ctrl_change(0x05)  /* NVM_V3_CMD_FLPERW */
      && (nvm_wait() & 0x73) == 0
     cca:	66 e0       	ldi	r22, 0x06	; 6
     ccc:	70 e1       	ldi	r23, 0x10	; 16
     cce:	80 e0       	ldi	r24, 0x00	; 0
     cd0:	90 e0       	ldi	r25, 0x00	; 0
     cd2:	42 dc       	rcall	.-1916   	; 0x558 <UPDI::recv_byte(unsigned long)>
     cd4:	8f b3       	in	r24, 0x1f	; 31
     cd6:	83 70       	andi	r24, 0x03	; 3
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv3.cpp:75
    );
  }
     cd8:	c1 f7       	brne	.-16     	; 0xcca <NVM::V3::nvm_wait()>
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv3.cpp:59
  uint8_t nvm_wait (void) {
    do { UPDI::recv_byte(NVM_STATUS); } while (RXDATA & 3);
    return RXDATA;
  }

  bool nvm_ctrl_change (uint8_t _nvmcmd) {
     cda:	8f b3       	in	r24, 0x1f	; 31
     cdc:	08 95       	ret

00000cde <NVM::V3::write_eeprom(unsigned long, unsigned int) [clone .part.3]>:
_ZN3NVM2V317write_words_flashEmj.part.1():
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv3.cpp:60
    nvm_wait();
     cde:	f5 df       	rcall	.-22     	; 0xcca <NVM::V3::nvm_wait()>
     ce0:	98 2f       	mov	r25, r24
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv3.cpp:61
    if (UPDI::recv_byte(NVM_CTRL) && RXDATA == _nvmcmd) return true;
     ce2:	93 77       	andi	r25, 0x73	; 115
     ce4:	81 e0       	ldi	r24, 0x01	; 1
     ce6:	09 f0       	breq	.+2      	; 0xcea <NVM::V3::write_eeprom(unsigned long, unsigned int) [clone .part.3]+0xc>
     ce8:	80 e0       	ldi	r24, 0x00	; 0
     cea:	08 95       	ret

00000cec <NVM::V3::nvm_ctrl_change(unsigned char)>:
nvm_ctrl_change():
     cec:	cf 93       	push	r28
     cee:	c8 2f       	mov	r28, r24
     cf0:	ec df       	rcall	.-40     	; 0xcca <NVM::V3::nvm_wait()>
     cf2:	60 e0       	ldi	r22, 0x00	; 0
     cf4:	70 e1       	ldi	r23, 0x10	; 16
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv3.cpp:65
    if (!UPDI::nvm_ctrl(0x00)) return false;
    if (0 != _nvmcmd) return UPDI::nvm_ctrl(_nvmcmd);
    return true;
  }
     cf6:	80 e0       	ldi	r24, 0x00	; 0
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv3.cpp:62
  }

  bool nvm_ctrl_change (uint8_t _nvmcmd) {
    nvm_wait();
    if (UPDI::recv_byte(NVM_CTRL) && RXDATA == _nvmcmd) return true;
    if (!UPDI::nvm_ctrl(0x00)) return false;
     cf8:	90 e0       	ldi	r25, 0x00	; 0
     cfa:	2e dc       	rcall	.-1956   	; 0x558 <UPDI::recv_byte(unsigned long)>
     cfc:	88 23       	and	r24, r24
     cfe:	31 f0       	breq	.+12     	; 0xd0c <NVM::V3::nvm_ctrl_change(unsigned char)+0x20>
     d00:	8f b3       	in	r24, 0x1f	; 31
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv2.cpp:65

  bool nvm_ctrl_change (uint8_t _nvmcmd) {
    nvm_wait();
    if (UPDI::recv_byte(NVM_CTRL) && RXDATA == _nvmcmd) return true;
    if (!UPDI::nvm_ctrl(0x00)) return false;
    if (0 != _nvmcmd) return UPDI::nvm_ctrl(_nvmcmd);
     d02:	8c 13       	cpse	r24, r28
     d04:	03 c0       	rjmp	.+6      	; 0xd0c <NVM::V3::nvm_ctrl_change(unsigned char)+0x20>
    if (0 != _nvmcmd) return UPDI::nvm_ctrl(_nvmcmd);
    return true;
  }
     d06:	81 e0       	ldi	r24, 0x01	; 1
     d08:	cf 91       	pop	r28
     d0a:	08 95       	ret
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv4.cpp:116
      && nvm_ctrl_change(0x00)
    );
  }

  size_t prog_init (void) {
    return nvm_ctrl_change(0x00);
     d0c:	80 e0       	ldi	r24, 0x00	; 0
     d0e:	45 dd       	rcall	.-1398   	; 0x79a <UPDI::nvm_ctrl(unsigned char)>
     d10:	88 23       	and	r24, r24
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv4.cpp:117
  }
     d12:	d1 f3       	breq	.-12     	; 0xd08 <NVM::V3::nvm_ctrl_change(unsigned char)+0x1c>
     d14:	cc 23       	and	r28, r28
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv4.cpp:78
    D2PRINTF(" NVM_V4_FLPER=%06lX\r\n", _dwAddr);
    return (
      nvm_ctrl_change(0x08)   /* NVM_V4_CMD_FLPER */
      && UPDI::send_byte(_dwAddr, 0xFF)
      && (nvm_wait() & 0x73) == 0
      && nvm_ctrl_change(0x00)
     d16:	b9 f3       	breq	.-18     	; 0xd06 <NVM::V3::nvm_ctrl_change(unsigned char)+0x1a>
     d18:	8c 2f       	mov	r24, r28
     d1a:	cf 91       	pop	r28
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv3.cpp:98
      && (nvm_wait() & 0x73) == 0
    );
  }

  size_t prog_init (void) {
    nvm_ctrl_change(0x0F);      /* NVM_V3_CMD_FLPBCLR */
     d1c:	3e cd       	rjmp	.-1412   	; 0x79a <UPDI::nvm_ctrl(unsigned char)>

00000d1e <NVM::V4::prog_init()>:
prog_init():
     d1e:	80 e0       	ldi	r24, 0x00	; 0
     d20:	e5 df       	rcall	.-54     	; 0xcec <NVM::V3::nvm_ctrl_change(unsigned char)>
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv3.cpp:99
    nvm_ctrl_change(0x1F);      /* NVM_V3_CMD_EEPBCLR */
     d22:	90 e0       	ldi	r25, 0x00	; 0
     d24:	08 95       	ret

00000d26 <NVM::V4::write_eeprom(unsigned long, unsigned int) [clone .part.5]>:
_ZN3NVM2V416erase_flash_pageEm.part.1():
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv3.cpp:100
    return nvm_ctrl_change(0x00);
     d26:	80 e0       	ldi	r24, 0x00	; 0
     d28:	e1 cf       	rjmp	.-62     	; 0xcec <NVM::V3::nvm_ctrl_change(unsigned char)>

00000d2a <NVM::V3::prog_init()>:
prog_init():
     d2a:	8f e0       	ldi	r24, 0x0F	; 15
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv3.cpp:101
  }
     d2c:	df df       	rcall	.-66     	; 0xcec <NVM::V3::nvm_ctrl_change(unsigned char)>
     d2e:	8f e1       	ldi	r24, 0x1F	; 31
     d30:	dd df       	rcall	.-70     	; 0xcec <NVM::V3::nvm_ctrl_change(unsigned char)>
     d32:	80 e0       	ldi	r24, 0x00	; 0
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv3.cpp:77
      && nvm_ctrl_change(0x05)  /* NVM_V3_CMD_FLPERW */
      && (nvm_wait() & 0x73) == 0
    );
  }

  bool write_bytes_flash (uint32_t _dwAddr, size_t _wLength) {
     d34:	db df       	rcall	.-74     	; 0xcec <NVM::V3::nvm_ctrl_change(unsigned char)>
     d36:	90 e0       	ldi	r25, 0x00	; 0
     d38:	08 95       	ret

00000d3a <NVM::V5::prog_init()>:
_ZN3NVM2V59prog_initEv():
     d3a:	f7 cf       	rjmp	.-18     	; 0xd2a <NVM::V3::prog_init()>

00000d3c <NVM::V3::write_bytes_flash(unsigned long, unsigned int)>:
write_bytes_flash():
     d3c:	cf 92       	push	r12
     d3e:	df 92       	push	r13
     d40:	ef 92       	push	r14
     d42:	ff 92       	push	r15
     d44:	cf 93       	push	r28
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv3.cpp:80
    D2PRINTF(" NVM_V3_FLPERW=%06lX\r\n", _dwAddr);
    return (
      nvm_ctrl_change(0x00)
     d46:	df 93       	push	r29
     d48:	6b 01       	movw	r12, r22
     d4a:	7c 01       	movw	r14, r24
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv3.cpp:83
      && UPDI::send_bytes_block(_dwAddr, _wLength)
      && nvm_ctrl_change(0x05)  /* NVM_V3_CMD_FLPERW */
      && (nvm_wait() & 0x73) == 0
     d4c:	ea 01       	movw	r28, r20
     d4e:	80 e0       	ldi	r24, 0x00	; 0
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv3.cpp:81

  bool write_bytes_flash (uint32_t _dwAddr, size_t _wLength) {
    D2PRINTF(" NVM_V3_FLPERW=%06lX\r\n", _dwAddr);
    return (
      nvm_ctrl_change(0x00)
      && UPDI::send_bytes_block(_dwAddr, _wLength)
     d50:	cd df       	rcall	.-102    	; 0xcec <NVM::V3::nvm_ctrl_change(unsigned char)>
     d52:	88 23       	and	r24, r24
     d54:	89 f0       	breq	.+34     	; 0xd78 <NVM::V3::write_bytes_flash(unsigned long, unsigned int)+0x3c>
     d56:	ae 01       	movw	r20, r28
     d58:	c7 01       	movw	r24, r14
     d5a:	b6 01       	movw	r22, r12
     d5c:	55 dc       	rcall	.-1878   	; 0x608 <UPDI::send_bytes_block(unsigned long, unsigned int)>
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv3.cpp:82
      && nvm_ctrl_change(0x05)  /* NVM_V3_CMD_FLPERW */
     d5e:	88 23       	and	r24, r24
     d60:	59 f0       	breq	.+22     	; 0xd78 <NVM::V3::write_bytes_flash(unsigned long, unsigned int)+0x3c>
     d62:	85 e0       	ldi	r24, 0x05	; 5
     d64:	c3 df       	rcall	.-122    	; 0xcec <NVM::V3::nvm_ctrl_change(unsigned char)>
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv3.cpp:85
      && (nvm_wait() & 0x73) == 0
    );
  }
     d66:	88 23       	and	r24, r24
     d68:	39 f0       	breq	.+14     	; 0xd78 <NVM::V3::write_bytes_flash(unsigned long, unsigned int)+0x3c>
     d6a:	df 91       	pop	r29
     d6c:	cf 91       	pop	r28
     d6e:	ff 90       	pop	r15
     d70:	ef 90       	pop	r14
     d72:	df 90       	pop	r13
     d74:	cf 90       	pop	r12
     d76:	b3 cf       	rjmp	.-154    	; 0xcde <NVM::V3::write_eeprom(unsigned long, unsigned int) [clone .part.3]>
     d78:	80 e0       	ldi	r24, 0x00	; 0
     d7a:	df 91       	pop	r29
     d7c:	cf 91       	pop	r28
     d7e:	ff 90       	pop	r15
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv3.cpp:67
    if (!UPDI::nvm_ctrl(0x00)) return false;
    if (0 != _nvmcmd) return UPDI::nvm_ctrl(_nvmcmd);
    return true;
  }

  bool write_words_flash (uint32_t _dwAddr, size_t _wLength) {
     d80:	ef 90       	pop	r14
     d82:	df 90       	pop	r13
     d84:	cf 90       	pop	r12
     d86:	08 95       	ret

00000d88 <NVM::V3::write_words_flash(unsigned long, unsigned int)>:
write_words_flash():
     d88:	cf 92       	push	r12
     d8a:	df 92       	push	r13
     d8c:	ef 92       	push	r14
     d8e:	ff 92       	push	r15
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv3.cpp:70
    D2PRINTF(" NVM_V3_FLPERW=%06lX\r\n", _dwAddr);
    return (
      nvm_ctrl_change(0x00)
     d90:	cf 93       	push	r28
     d92:	df 93       	push	r29
     d94:	6b 01       	movw	r12, r22
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv3.cpp:73
      && UPDI::send_words_block(_dwAddr, _wLength)
      && nvm_ctrl_change(0x05)  /* NVM_V3_CMD_FLPERW */
      && (nvm_wait() & 0x73) == 0
     d96:	7c 01       	movw	r14, r24
     d98:	ea 01       	movw	r28, r20
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv3.cpp:71

  bool write_words_flash (uint32_t _dwAddr, size_t _wLength) {
    D2PRINTF(" NVM_V3_FLPERW=%06lX\r\n", _dwAddr);
    return (
      nvm_ctrl_change(0x00)
      && UPDI::send_words_block(_dwAddr, _wLength)
     d9a:	80 e0       	ldi	r24, 0x00	; 0
     d9c:	a7 df       	rcall	.-178    	; 0xcec <NVM::V3::nvm_ctrl_change(unsigned char)>
     d9e:	88 23       	and	r24, r24
     da0:	89 f0       	breq	.+34     	; 0xdc4 <NVM::V3::write_words_flash(unsigned long, unsigned int)+0x3c>
     da2:	ae 01       	movw	r20, r28
     da4:	c7 01       	movw	r24, r14
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv3.cpp:72
      && nvm_ctrl_change(0x05)  /* NVM_V3_CMD_FLPERW */
     da6:	b6 01       	movw	r22, r12
     da8:	f1 db       	rcall	.-2078   	; 0x58c <UPDI::send_words_block(unsigned long, unsigned int)>
     daa:	88 23       	and	r24, r24
     dac:	59 f0       	breq	.+22     	; 0xdc4 <NVM::V3::write_words_flash(unsigned long, unsigned int)+0x3c>
     dae:	85 e0       	ldi	r24, 0x05	; 5
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv3.cpp:75
      && (nvm_wait() & 0x73) == 0
    );
  }
     db0:	9d df       	rcall	.-198    	; 0xcec <NVM::V3::nvm_ctrl_change(unsigned char)>
     db2:	88 23       	and	r24, r24
     db4:	39 f0       	breq	.+14     	; 0xdc4 <NVM::V3::write_words_flash(unsigned long, unsigned int)+0x3c>
     db6:	df 91       	pop	r29
     db8:	cf 91       	pop	r28
     dba:	ff 90       	pop	r15
     dbc:	ef 90       	pop	r14
     dbe:	df 90       	pop	r13
     dc0:	cf 90       	pop	r12
     dc2:	8d cf       	rjmp	.-230    	; 0xcde <NVM::V3::write_eeprom(unsigned long, unsigned int) [clone .part.3]>
     dc4:	80 e0       	ldi	r24, 0x00	; 0
     dc6:	df 91       	pop	r29
     dc8:	cf 91       	pop	r28
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv5.cpp:136
    }
    /* Page erase will not be used if received. */
    return 1;
  }

  size_t write_memory (void) {
     dca:	ff 90       	pop	r15
     dcc:	ef 90       	pop	r14
     dce:	df 90       	pop	r13
     dd0:	cf 90       	pop	r12
     dd2:	08 95       	ret

00000dd4 <NVM::V5::write_memory()>:
write_memory():
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv5.cpp:140
    uint8_t   m_type = packet.out.bMType;
    uint32_t _dwAddr = packet.out.dwAddr;
    size_t  _wLength = packet.out.dwLength;
    if (bit_is_clear(PGCONF, PGCONF_PROG_bp)) return UPDI::write_userrow();
     dd4:	cf 92       	push	r12
     dd6:	df 92       	push	r13
     dd8:	ef 92       	push	r14
     dda:	ff 92       	push	r15
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv5.cpp:160
      _dwAddr += PROG_START;
      return write_words_flash(_dwAddr, _wLength);
    }
    else {
      /* MTYPE_SRAM */
      return UPDI::send_bytes_block(_dwAddr, _wLength);
     ddc:	cf 93       	push	r28
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv5.cpp:162
    }
  }
     dde:	df 93       	push	r29
     de0:	e9 99       	sbic	0x1d, 1	; 29
     de2:	09 c0       	rjmp	.+18     	; 0xdf6 <NVM::V5::write_memory()+0x22>
     de4:	4c dc       	rcall	.-1896   	; 0x67e <UPDI::write_userrow()>
     de6:	90 e0       	ldi	r25, 0x00	; 0
     de8:	df 91       	pop	r29
     dea:	cf 91       	pop	r28
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv5.cpp:137
    /* Page erase will not be used if received. */
    return 1;
  }

  size_t write_memory (void) {
    uint8_t   m_type = packet.out.bMType;
     dec:	ff 90       	pop	r15
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv5.cpp:138
    uint32_t _dwAddr = packet.out.dwAddr;
     dee:	ef 90       	pop	r14
     df0:	df 90       	pop	r13
     df2:	cf 90       	pop	r12
     df4:	08 95       	ret
     df6:	80 91 c5 60 	lds	r24, 0x60C5	; 0x8060c5 <packet+0x7>
     dfa:	c0 90 c6 60 	lds	r12, 0x60C6	; 0x8060c6 <packet+0x8>
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv5.cpp:139
    size_t  _wLength = packet.out.dwLength;
     dfe:	d0 90 c7 60 	lds	r13, 0x60C7	; 0x8060c7 <packet+0x9>
     e02:	e0 90 c8 60 	lds	r14, 0x60C8	; 0x8060c8 <packet+0xa>
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv5.cpp:141
    if (bit_is_clear(PGCONF, PGCONF_PROG_bp)) return UPDI::write_userrow();
    if (m_type == 0x22 || m_type == 0xB2 || m_type == 0xB3 || m_type == 0xC4) {
     e06:	f0 90 c9 60 	lds	r15, 0x60C9	; 0x8060c9 <packet+0xb>
     e0a:	c0 91 ca 60 	lds	r28, 0x60CA	; 0x8060ca <packet+0xc>
     e0e:	d0 91 cb 60 	lds	r29, 0x60CB	; 0x8060cb <packet+0xd>
     e12:	82 32       	cpi	r24, 0x22	; 34
     e14:	31 f0       	breq	.+12     	; 0xe22 <NVM::V5::write_memory()+0x4e>
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv5.cpp:93
  }

  bool write_eeprom (uint32_t _dwAddr, size_t _wLength) {
    D2PRINTF(" NVM_V5_EEPERW=%06lX\r\n", _dwAddr);
    return (
      nvm_ctrl_change(0x00)
     e16:	9e e4       	ldi	r25, 0x4E	; 78
     e18:	98 0f       	add	r25, r24
     e1a:	92 30       	cpi	r25, 0x02	; 2
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv5.cpp:96
      && UPDI::send_bytes_block(_dwAddr, _wLength)
      && nvm_ctrl_change(0x15)  /* NVM_V5_CMD_EEPERW */
      && (nvm_wait() & 0x73) == 0
     e1c:	10 f0       	brcs	.+4      	; 0xe22 <NVM::V5::write_memory()+0x4e>
     e1e:	84 3c       	cpi	r24, 0xC4	; 196
     e20:	91 f4       	brne	.+36     	; 0xe46 <NVM::V5::write_memory()+0x72>
write_eeprom():
     e22:	80 e0       	ldi	r24, 0x00	; 0
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv5.cpp:94

  bool write_eeprom (uint32_t _dwAddr, size_t _wLength) {
    D2PRINTF(" NVM_V5_EEPERW=%06lX\r\n", _dwAddr);
    return (
      nvm_ctrl_change(0x00)
      && UPDI::send_bytes_block(_dwAddr, _wLength)
     e24:	63 df       	rcall	.-314    	; 0xcec <NVM::V3::nvm_ctrl_change(unsigned char)>
     e26:	81 11       	cpse	r24, r1
     e28:	02 c0       	rjmp	.+4      	; 0xe2e <NVM::V5::write_memory()+0x5a>
write_memory():
     e2a:	80 e0       	ldi	r24, 0x00	; 0
     e2c:	dc cf       	rjmp	.-72     	; 0xde6 <NVM::V5::write_memory()+0x12>
write_eeprom():
     e2e:	ae 01       	movw	r20, r28
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv5.cpp:95
      && nvm_ctrl_change(0x15)  /* NVM_V5_CMD_EEPERW */
     e30:	c7 01       	movw	r24, r14
     e32:	b6 01       	movw	r22, r12
     e34:	e9 db       	rcall	.-2094   	; 0x608 <UPDI::send_bytes_block(unsigned long, unsigned int)>
     e36:	88 23       	and	r24, r24
     e38:	c1 f3       	breq	.-16     	; 0xe2a <NVM::V5::write_memory()+0x56>
     e3a:	85 e1       	ldi	r24, 0x15	; 21
     e3c:	57 df       	rcall	.-338    	; 0xcec <NVM::V3::nvm_ctrl_change(unsigned char)>
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv5.cpp:148
      /* MTYPE_LOCK_BITS */
      /* MTYPE_EEPROM */
      /* MTYPE_EEPROM_XMEGA */
      return write_eeprom(_dwAddr, _wLength);
    }
    else if (m_type == 0xC0 || m_type == 0xC5) {
     e3e:	88 23       	and	r24, r24
     e40:	a1 f3       	breq	.-24     	; 0xe2a <NVM::V5::write_memory()+0x56>
     e42:	4d df       	rcall	.-358    	; 0xcde <NVM::V3::write_eeprom(unsigned long, unsigned int) [clone .part.3]>
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv5.cpp:151
      /* MTYPE_FLASH (alias) */
      /* MTYPE_USERSIG (USERROW, BOOTROW) */
      return write_bytes_flash(_dwAddr, _wLength);
     e44:	d0 cf       	rjmp	.-96     	; 0xde6 <NVM::V5::write_memory()+0x12>
write_memory():
     e46:	80 3c       	cpi	r24, 0xC0	; 192
     e48:	11 f0       	breq	.+4      	; 0xe4e <NVM::V5::write_memory()+0x7a>
     e4a:	85 3c       	cpi	r24, 0xC5	; 197
     e4c:	29 f4       	brne	.+10     	; 0xe58 <NVM::V5::write_memory()+0x84>
     e4e:	ae 01       	movw	r20, r28
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv5.cpp:153
    }
    else if (m_type == 0xB0) {
     e50:	c7 01       	movw	r24, r14
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv5.cpp:155
      /* MTYPE_FLASH_PAGE (PROGMEM) */
      _dwAddr += PROG_START;
     e52:	b6 01       	movw	r22, r12
     e54:	73 df       	rcall	.-282    	; 0xd3c <NVM::V3::write_bytes_flash(unsigned long, unsigned int)>
     e56:	c7 cf       	rjmp	.-114    	; 0xde6 <NVM::V5::write_memory()+0x12>
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv5.cpp:156
      return write_words_flash(_dwAddr, _wLength);
     e58:	80 3b       	cpi	r24, 0xB0	; 176
     e5a:	39 f4       	brne	.+14     	; 0xe6a <NVM::V5::write_memory()+0x96>
     e5c:	c7 01       	movw	r24, r14
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv5.cpp:160
    }
    else {
      /* MTYPE_SRAM */
      return UPDI::send_bytes_block(_dwAddr, _wLength);
     e5e:	b6 01       	movw	r22, r12
     e60:	80 58       	subi	r24, 0x80	; 128
     e62:	9f 4f       	sbci	r25, 0xFF	; 255
     e64:	ae 01       	movw	r20, r28
     e66:	90 df       	rcall	.-224    	; 0xd88 <NVM::V3::write_words_flash(unsigned long, unsigned int)>
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv4.cpp:72
    if (!UPDI::nvm_ctrl(0x00)) return false;
    if (0 != _nvmcmd) return UPDI::nvm_ctrl(_nvmcmd);
    return true;
  }

  bool erase_flash_page (uint32_t _dwAddr) {
     e68:	be cf       	rjmp	.-132    	; 0xde6 <NVM::V5::write_memory()+0x12>
     e6a:	ae 01       	movw	r20, r28
     e6c:	c7 01       	movw	r24, r14
     e6e:	b6 01       	movw	r22, r12
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv4.cpp:75
    D2PRINTF(" NVM_V4_FLPER=%06lX\r\n", _dwAddr);
    return (
      nvm_ctrl_change(0x08)   /* NVM_V4_CMD_FLPER */
     e70:	cb db       	rcall	.-2154   	; 0x608 <UPDI::send_bytes_block(unsigned long, unsigned int)>
     e72:	b9 cf       	rjmp	.-142    	; 0xde6 <NVM::V5::write_memory()+0x12>

00000e74 <NVM::V4::erase_flash_page(unsigned long)>:
erase_flash_page():
     e74:	cf 92       	push	r12
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv4.cpp:78
      && UPDI::send_byte(_dwAddr, 0xFF)
      && (nvm_wait() & 0x73) == 0
      && nvm_ctrl_change(0x00)
     e76:	df 92       	push	r13
     e78:	ef 92       	push	r14
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv4.cpp:76

  bool erase_flash_page (uint32_t _dwAddr) {
    D2PRINTF(" NVM_V4_FLPER=%06lX\r\n", _dwAddr);
    return (
      nvm_ctrl_change(0x08)   /* NVM_V4_CMD_FLPER */
      && UPDI::send_byte(_dwAddr, 0xFF)
     e7a:	ff 92       	push	r15
     e7c:	6b 01       	movw	r12, r22
     e7e:	7c 01       	movw	r14, r24
     e80:	88 e0       	ldi	r24, 0x08	; 8
     e82:	34 df       	rcall	.-408    	; 0xcec <NVM::V3::nvm_ctrl_change(unsigned char)>
     e84:	88 23       	and	r24, r24
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv4.cpp:77
      && (nvm_wait() & 0x73) == 0
     e86:	71 f0       	breq	.+28     	; 0xea4 <NVM::V4::erase_flash_page(unsigned long)+0x30>
     e88:	4f ef       	ldi	r20, 0xFF	; 255
     e8a:	c7 01       	movw	r24, r14
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv4.cpp:80
      && nvm_ctrl_change(0x00)
    );
  }
     e8c:	b6 01       	movw	r22, r12
     e8e:	68 dc       	rcall	.-1840   	; 0x760 <UPDI::send_byte(unsigned long, unsigned char)>
     e90:	88 23       	and	r24, r24
     e92:	41 f0       	breq	.+16     	; 0xea4 <NVM::V4::erase_flash_page(unsigned long)+0x30>
     e94:	1a df       	rcall	.-460    	; 0xcca <NVM::V3::nvm_wait()>
     e96:	83 77       	andi	r24, 0x73	; 115
     e98:	29 f4       	brne	.+10     	; 0xea4 <NVM::V4::erase_flash_page(unsigned long)+0x30>
     e9a:	ff 90       	pop	r15
     e9c:	ef 90       	pop	r14
     e9e:	df 90       	pop	r13
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv4.cpp:158
    /* Page erase will not be used if received. */
    /* Instead, page erase is determined by the is_boundary_flash_page function. */
    return 1;
  }

  size_t write_memory (void) {
     ea0:	cf 90       	pop	r12
     ea2:	41 cf       	rjmp	.-382    	; 0xd26 <NVM::V4::write_eeprom(unsigned long, unsigned int) [clone .part.5]>
     ea4:	80 e0       	ldi	r24, 0x00	; 0
     ea6:	ff 90       	pop	r15
     ea8:	ef 90       	pop	r14
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv4.cpp:162
    uint8_t   m_type = packet.out.bMType;
    uint32_t _dwAddr = packet.out.dwAddr;
    size_t  _wLength = packet.out.dwLength;
    if (bit_is_clear(PGCONF, PGCONF_PROG_bp)) return UPDI::write_userrow();
     eaa:	df 90       	pop	r13
     eac:	cf 90       	pop	r12
     eae:	08 95       	ret

00000eb0 <NVM::V4::write_memory()>:
write_memory():
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv4.cpp:182
      _dwAddr += PROG_START;
      return write_words_flash(_dwAddr, _wLength);
    }
    else {
      /* MTYPE_SRAM */
      return UPDI::send_bytes_block(_dwAddr, _wLength);
     eb0:	cf 92       	push	r12
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv4.cpp:184
    }
  }
     eb2:	df 92       	push	r13
     eb4:	ef 92       	push	r14
     eb6:	ff 92       	push	r15
     eb8:	cf 93       	push	r28
     eba:	df 93       	push	r29
     ebc:	e9 99       	sbic	0x1d, 1	; 29
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv4.cpp:159
    /* Instead, page erase is determined by the is_boundary_flash_page function. */
    return 1;
  }

  size_t write_memory (void) {
    uint8_t   m_type = packet.out.bMType;
     ebe:	09 c0       	rjmp	.+18     	; 0xed2 <NVM::V4::write_memory()+0x22>
     ec0:	de db       	rcall	.-2116   	; 0x67e <UPDI::write_userrow()>
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv4.cpp:160
    uint32_t _dwAddr = packet.out.dwAddr;
     ec2:	90 e0       	ldi	r25, 0x00	; 0
     ec4:	df 91       	pop	r29
     ec6:	cf 91       	pop	r28
     ec8:	ff 90       	pop	r15
     eca:	ef 90       	pop	r14
     ecc:	df 90       	pop	r13
     ece:	cf 90       	pop	r12
     ed0:	08 95       	ret
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv4.cpp:161
    size_t  _wLength = packet.out.dwLength;
     ed2:	80 91 c5 60 	lds	r24, 0x60C5	; 0x8060c5 <packet+0x7>
     ed6:	c0 90 c6 60 	lds	r12, 0x60C6	; 0x8060c6 <packet+0x8>
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv4.cpp:163
    if (bit_is_clear(PGCONF, PGCONF_PROG_bp)) return UPDI::write_userrow();
    if (m_type == 0x22 || m_type == 0xB2 || m_type == 0xB3 || m_type == 0xC4) {
     eda:	d0 90 c7 60 	lds	r13, 0x60C7	; 0x8060c7 <packet+0x9>
     ede:	e0 90 c8 60 	lds	r14, 0x60C8	; 0x8060c8 <packet+0xa>
     ee2:	f0 90 c9 60 	lds	r15, 0x60C9	; 0x8060c9 <packet+0xb>
     ee6:	c0 91 ca 60 	lds	r28, 0x60CA	; 0x8060ca <packet+0xc>
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv4.cpp:108
  }

  bool write_eeprom (uint32_t _dwAddr, size_t _wLength) {
    D2PRINTF(" NVM_V4_EEERWR=%06lX\r\n", _dwAddr);
    return (
      nvm_ctrl_change(0x13)   /* NVM_V4_CMD_EEERWR */
     eea:	d0 91 cb 60 	lds	r29, 0x60CB	; 0x8060cb <packet+0xd>
     eee:	82 32       	cpi	r24, 0x22	; 34
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv4.cpp:111
      && UPDI::send_bytes_block_slow(_dwAddr, _wLength)
      && (nvm_wait() & 0x73) == 0
      && nvm_ctrl_change(0x00)
     ef0:	31 f0       	breq	.+12     	; 0xefe <NVM::V4::write_memory()+0x4e>
     ef2:	9e e4       	ldi	r25, 0x4E	; 78
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv4.cpp:90
    D2PRINTF(" NVM_V4_FLWR=%06lX\r\n", _dwAddr);
    return (
      nvm_ctrl_change(0x02)   /* NVM_V4_CMD_FLWR */
      && UPDI::send_words_block(_dwAddr, _wLength)
      && (nvm_wait() & 0x73) == 0
      && nvm_ctrl_change(0x00)
     ef4:	98 0f       	add	r25, r24
     ef6:	92 30       	cpi	r25, 0x02	; 2
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv4.cpp:109

  bool write_eeprom (uint32_t _dwAddr, size_t _wLength) {
    D2PRINTF(" NVM_V4_EEERWR=%06lX\r\n", _dwAddr);
    return (
      nvm_ctrl_change(0x13)   /* NVM_V4_CMD_EEERWR */
      && UPDI::send_bytes_block_slow(_dwAddr, _wLength)
     ef8:	10 f0       	brcs	.+4      	; 0xefe <NVM::V4::write_memory()+0x4e>
     efa:	84 3c       	cpi	r24, 0xC4	; 196
     efc:	89 f4       	brne	.+34     	; 0xf20 <NVM::V4::write_memory()+0x70>
write_eeprom():
     efe:	83 e1       	ldi	r24, 0x13	; 19
     f00:	f5 de       	rcall	.-534    	; 0xcec <NVM::V3::nvm_ctrl_change(unsigned char)>
     f02:	81 11       	cpse	r24, r1
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv4.cpp:110
      && (nvm_wait() & 0x73) == 0
     f04:	02 c0       	rjmp	.+4      	; 0xf0a <NVM::V4::write_memory()+0x5a>
write_memory():
     f06:	80 e0       	ldi	r24, 0x00	; 0
     f08:	dc cf       	rjmp	.-72     	; 0xec2 <NVM::V4::write_memory()+0x12>
write_eeprom():
     f0a:	ae 01       	movw	r20, r28
     f0c:	c7 01       	movw	r24, r14
     f0e:	b6 01       	movw	r22, r12
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv4.cpp:170
      /* MTYPE_LOCK_BITS */
      /* MTYPE_EEPROM */
      /* MTYPE_EEPROM_XMEGA */
      return write_eeprom(_dwAddr, _wLength);
    }
    else if (m_type == 0xC0 || m_type == 0xC5) {
     f10:	4a dc       	rcall	.-1900   	; 0x7a6 <UPDI::send_bytes_block_slow(unsigned long, unsigned int)>
     f12:	88 23       	and	r24, r24
     f14:	c1 f3       	breq	.-16     	; 0xf06 <NVM::V4::write_memory()+0x56>
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv4.cpp:95
      && nvm_ctrl_change(0x00)
    );
  }

  bool write_bytes_flash (uint32_t _dwAddr, size_t _wLength) {
    if (SYS::is_boundary_flash_page(_dwAddr)) erase_flash_page(_dwAddr);
     f16:	d9 de       	rcall	.-590    	; 0xcca <NVM::V3::nvm_wait()>
     f18:	83 77       	andi	r24, 0x73	; 115
     f1a:	a9 f7       	brne	.-22     	; 0xf06 <NVM::V4::write_memory()+0x56>
     f1c:	04 df       	rcall	.-504    	; 0xd26 <NVM::V4::write_eeprom(unsigned long, unsigned int) [clone .part.5]>
     f1e:	d1 cf       	rjmp	.-94     	; 0xec2 <NVM::V4::write_memory()+0x12>
write_memory():
     f20:	80 3c       	cpi	r24, 0xC0	; 192
     f22:	11 f0       	breq	.+4      	; 0xf28 <NVM::V4::write_memory()+0x78>
     f24:	85 3c       	cpi	r24, 0xC5	; 197
     f26:	b9 f4       	brne	.+46     	; 0xf56 <NVM::V4::write_memory()+0xa6>
write_bytes_flash():
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv4.cpp:98
    D2PRINTF(" NVM_V4_FLWR=%06lX\r\n", _dwAddr);
    return (
      nvm_ctrl_change(0x02)   /* NVM_V4_CMD_FLWR */
     f28:	c7 01       	movw	r24, r14
     f2a:	b6 01       	movw	r22, r12
     f2c:	d4 dd       	rcall	.-1112   	; 0xad6 <SYS::is_boundary_flash_page(unsigned long)>
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv4.cpp:101
      && UPDI::send_bytes_block_slow(_dwAddr, _wLength)
      && (nvm_wait() & 0x73) == 0
      && nvm_ctrl_change(0x00)
     f2e:	88 23       	and	r24, r24
     f30:	19 f0       	breq	.+6      	; 0xf38 <NVM::V4::write_memory()+0x88>
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv4.cpp:99
  bool write_bytes_flash (uint32_t _dwAddr, size_t _wLength) {
    if (SYS::is_boundary_flash_page(_dwAddr)) erase_flash_page(_dwAddr);
    D2PRINTF(" NVM_V4_FLWR=%06lX\r\n", _dwAddr);
    return (
      nvm_ctrl_change(0x02)   /* NVM_V4_CMD_FLWR */
      && UPDI::send_bytes_block_slow(_dwAddr, _wLength)
     f32:	c7 01       	movw	r24, r14
     f34:	b6 01       	movw	r22, r12
     f36:	9e df       	rcall	.-196    	; 0xe74 <NVM::V4::erase_flash_page(unsigned long)>
     f38:	82 e0       	ldi	r24, 0x02	; 2
     f3a:	d8 de       	rcall	.-592    	; 0xcec <NVM::V3::nvm_ctrl_change(unsigned char)>
     f3c:	88 23       	and	r24, r24
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv4.cpp:100
      && (nvm_wait() & 0x73) == 0
     f3e:	19 f3       	breq	.-58     	; 0xf06 <NVM::V4::write_memory()+0x56>
     f40:	ae 01       	movw	r20, r28
     f42:	c7 01       	movw	r24, r14
     f44:	b6 01       	movw	r22, r12
     f46:	2f dc       	rcall	.-1954   	; 0x7a6 <UPDI::send_bytes_block_slow(unsigned long, unsigned int)>
     f48:	88 23       	and	r24, r24
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv4.cpp:175
    else if (m_type == 0xC0 || m_type == 0xC5) {
      /* MTYPE_FLASH (alias) */
      /* MTYPE_USERSIG (USERROW, BOOTROW) */
      return write_bytes_flash(_dwAddr, _wLength);
    }
    else if (m_type == 0xB0) {
     f4a:	e9 f2       	breq	.-70     	; 0xf06 <NVM::V4::write_memory()+0x56>
     f4c:	be de       	rcall	.-644    	; 0xcca <NVM::V3::nvm_wait()>
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv4.cpp:177
      /* MTYPE_FLASH_PAGE (PROGMEM) */
      _dwAddr += PROG_START;
     f4e:	83 77       	andi	r24, 0x73	; 115
     f50:	d1 f6       	brne	.-76     	; 0xf06 <NVM::V4::write_memory()+0x56>
     f52:	e9 de       	rcall	.-558    	; 0xd26 <NVM::V4::write_eeprom(unsigned long, unsigned int) [clone .part.5]>
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv4.cpp:84
    );
  }

  bool write_words_flash (uint32_t _dwAddr, size_t _wLength) {
    if (bit_is_clear(PGCONF, PGCONF_ERSE_bp)
      && SYS::is_boundary_flash_page(_dwAddr)) erase_flash_page(_dwAddr);
     f54:	b6 cf       	rjmp	.-148    	; 0xec2 <NVM::V4::write_memory()+0x12>
write_memory():
     f56:	80 3b       	cpi	r24, 0xB0	; 176
     f58:	f9 f4       	brne	.+62     	; 0xf98 <NVM::V4::write_memory()+0xe8>
     f5a:	80 e8       	ldi	r24, 0x80	; 128
     f5c:	e8 0e       	add	r14, r24
     f5e:	f1 1c       	adc	r15, r1
write_words_flash():
     f60:	ea 99       	sbic	0x1d, 2	; 29
     f62:	08 c0       	rjmp	.+16     	; 0xf74 <NVM::V4::write_memory()+0xc4>
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv4.cpp:87
    D2PRINTF(" NVM_V4_FLWR=%06lX\r\n", _dwAddr);
    return (
      nvm_ctrl_change(0x02)   /* NVM_V4_CMD_FLWR */
     f64:	c7 01       	movw	r24, r14
     f66:	b6 01       	movw	r22, r12
     f68:	b6 dd       	rcall	.-1172   	; 0xad6 <SYS::is_boundary_flash_page(unsigned long)>
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv4.cpp:90
      && UPDI::send_words_block(_dwAddr, _wLength)
      && (nvm_wait() & 0x73) == 0
      && nvm_ctrl_change(0x00)
     f6a:	88 23       	and	r24, r24
     f6c:	19 f0       	breq	.+6      	; 0xf74 <NVM::V4::write_memory()+0xc4>
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv4.cpp:88
    if (bit_is_clear(PGCONF, PGCONF_ERSE_bp)
      && SYS::is_boundary_flash_page(_dwAddr)) erase_flash_page(_dwAddr);
    D2PRINTF(" NVM_V4_FLWR=%06lX\r\n", _dwAddr);
    return (
      nvm_ctrl_change(0x02)   /* NVM_V4_CMD_FLWR */
      && UPDI::send_words_block(_dwAddr, _wLength)
     f6e:	c7 01       	movw	r24, r14
     f70:	b6 01       	movw	r22, r12
     f72:	80 df       	rcall	.-256    	; 0xe74 <NVM::V4::erase_flash_page(unsigned long)>
     f74:	82 e0       	ldi	r24, 0x02	; 2
     f76:	ba de       	rcall	.-652    	; 0xcec <NVM::V3::nvm_ctrl_change(unsigned char)>
     f78:	88 23       	and	r24, r24
     f7a:	09 f4       	brne	.+2      	; 0xf7e <NVM::V4::write_memory()+0xce>
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv4.cpp:89
      && (nvm_wait() & 0x73) == 0
     f7c:	c4 cf       	rjmp	.-120    	; 0xf06 <NVM::V4::write_memory()+0x56>
     f7e:	ae 01       	movw	r20, r28
     f80:	c7 01       	movw	r24, r14
     f82:	b6 01       	movw	r22, r12
     f84:	03 db       	rcall	.-2554   	; 0x58c <UPDI::send_words_block(unsigned long, unsigned int)>
     f86:	88 23       	and	r24, r24
     f88:	09 f4       	brne	.+2      	; 0xf8c <NVM::V4::write_memory()+0xdc>
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv4.cpp:182
      _dwAddr += PROG_START;
      return write_words_flash(_dwAddr, _wLength);
    }
    else {
      /* MTYPE_SRAM */
      return UPDI::send_bytes_block(_dwAddr, _wLength);
     f8a:	bd cf       	rjmp	.-134    	; 0xf06 <NVM::V4::write_memory()+0x56>
     f8c:	9e de       	rcall	.-708    	; 0xcca <NVM::V3::nvm_wait()>
     f8e:	83 77       	andi	r24, 0x73	; 115
     f90:	09 f0       	breq	.+2      	; 0xf94 <NVM::V4::write_memory()+0xe4>
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv3.cpp:133
    }
    /* Page erase will not be used if received. */
    return 1;
  }

  size_t write_memory (void) {
     f92:	b9 cf       	rjmp	.-142    	; 0xf06 <NVM::V4::write_memory()+0x56>
     f94:	c8 de       	rcall	.-624    	; 0xd26 <NVM::V4::write_eeprom(unsigned long, unsigned int) [clone .part.5]>
     f96:	95 cf       	rjmp	.-214    	; 0xec2 <NVM::V4::write_memory()+0x12>
write_memory():
     f98:	ae 01       	movw	r20, r28
     f9a:	c7 01       	movw	r24, r14
     f9c:	b6 01       	movw	r22, r12
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv3.cpp:137
    uint8_t   m_type = packet.out.bMType;
    uint32_t _dwAddr = packet.out.dwAddr;
    size_t  _wLength = packet.out.dwLength;
    if (bit_is_clear(PGCONF, PGCONF_PROG_bp)) return UPDI::write_userrow();
     f9e:	34 db       	rcall	.-2456   	; 0x608 <UPDI::send_bytes_block(unsigned long, unsigned int)>
     fa0:	90 cf       	rjmp	.-224    	; 0xec2 <NVM::V4::write_memory()+0x12>

00000fa2 <NVM::V3::write_memory()>:
     fa2:	cf 92       	push	r12
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv3.cpp:157
      _dwAddr += PROG_START;
      return write_words_flash(_dwAddr, _wLength);
    }
    else {
      /* MTYPE_SRAM */
      return UPDI::send_bytes_block(_dwAddr, _wLength);
     fa4:	df 92       	push	r13
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv3.cpp:159
    }
  }
     fa6:	ef 92       	push	r14
     fa8:	ff 92       	push	r15
     faa:	cf 93       	push	r28
     fac:	df 93       	push	r29
     fae:	e9 99       	sbic	0x1d, 1	; 29
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv3.cpp:134
    /* Page erase will not be used if received. */
    return 1;
  }

  size_t write_memory (void) {
    uint8_t   m_type = packet.out.bMType;
     fb0:	09 c0       	rjmp	.+18     	; 0xfc4 <NVM::V3::write_memory()+0x22>
     fb2:	65 db       	rcall	.-2358   	; 0x67e <UPDI::write_userrow()>
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv3.cpp:135
    uint32_t _dwAddr = packet.out.dwAddr;
     fb4:	90 e0       	ldi	r25, 0x00	; 0
     fb6:	df 91       	pop	r29
     fb8:	cf 91       	pop	r28
     fba:	ff 90       	pop	r15
     fbc:	ef 90       	pop	r14
     fbe:	df 90       	pop	r13
     fc0:	cf 90       	pop	r12
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv3.cpp:136
    size_t  _wLength = packet.out.dwLength;
     fc2:	08 95       	ret
     fc4:	80 91 c5 60 	lds	r24, 0x60C5	; 0x8060c5 <packet+0x7>
     fc8:	c0 90 c6 60 	lds	r12, 0x60C6	; 0x8060c6 <packet+0x8>
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv3.cpp:138
    if (bit_is_clear(PGCONF, PGCONF_PROG_bp)) return UPDI::write_userrow();
    if (m_type == 0x22 || m_type == 0xB2 || m_type == 0xB3 || m_type == 0xC4) {
     fcc:	d0 90 c7 60 	lds	r13, 0x60C7	; 0x8060c7 <packet+0x9>
     fd0:	e0 90 c8 60 	lds	r14, 0x60C8	; 0x8060c8 <packet+0xa>
     fd4:	f0 90 c9 60 	lds	r15, 0x60C9	; 0x8060c9 <packet+0xb>
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv3.cpp:90
  }

  bool write_eeprom (uint32_t _dwAddr, size_t _wLength) {
    D2PRINTF(" NVM_V3_EEPERW=%06lX\r\n", _dwAddr);
    return (
      nvm_ctrl_change(0x10)
     fd8:	c0 91 ca 60 	lds	r28, 0x60CA	; 0x8060ca <packet+0xc>
     fdc:	d0 91 cb 60 	lds	r29, 0x60CB	; 0x8060cb <packet+0xd>
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv3.cpp:93
      && UPDI::send_bytes_block(_dwAddr, _wLength)
      && nvm_ctrl_change(0x15)  /* NVM_V3_CMD_EEPERW */
      && (nvm_wait() & 0x73) == 0
     fe0:	82 32       	cpi	r24, 0x22	; 34
     fe2:	31 f0       	breq	.+12     	; 0xff0 <NVM::V3::write_memory()+0x4e>
     fe4:	9e e4       	ldi	r25, 0x4E	; 78
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv3.cpp:91

  bool write_eeprom (uint32_t _dwAddr, size_t _wLength) {
    D2PRINTF(" NVM_V3_EEPERW=%06lX\r\n", _dwAddr);
    return (
      nvm_ctrl_change(0x10)
      && UPDI::send_bytes_block(_dwAddr, _wLength)
     fe6:	98 0f       	add	r25, r24
     fe8:	92 30       	cpi	r25, 0x02	; 2
     fea:	10 f0       	brcs	.+4      	; 0xff0 <NVM::V3::write_memory()+0x4e>
     fec:	84 3c       	cpi	r24, 0xC4	; 196
     fee:	91 f4       	brne	.+36     	; 0x1014 <NVM::V3::write_memory()+0x72>
write_eeprom():
     ff0:	80 e1       	ldi	r24, 0x10	; 16
     ff2:	7c de       	rcall	.-776    	; 0xcec <NVM::V3::nvm_ctrl_change(unsigned char)>
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv3.cpp:92
      && nvm_ctrl_change(0x15)  /* NVM_V3_CMD_EEPERW */
     ff4:	81 11       	cpse	r24, r1
     ff6:	02 c0       	rjmp	.+4      	; 0xffc <NVM::V3::write_memory()+0x5a>
write_memory():
     ff8:	80 e0       	ldi	r24, 0x00	; 0
     ffa:	dc cf       	rjmp	.-72     	; 0xfb4 <NVM::V3::write_memory()+0x12>
write_eeprom():
     ffc:	ae 01       	movw	r20, r28
     ffe:	c7 01       	movw	r24, r14
    1000:	b6 01       	movw	r22, r12
    1002:	02 db       	rcall	.-2556   	; 0x608 <UPDI::send_bytes_block(unsigned long, unsigned int)>
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv3.cpp:145
      /* MTYPE_LOCK_BITS */
      /* MTYPE_EEPROM */
      /* MTYPE_EEPROM_XMEGA */
      return write_eeprom(_dwAddr, _wLength);
    }
    else if (m_type == 0xC0 || m_type == 0xC5) {
    1004:	88 23       	and	r24, r24
    1006:	c1 f3       	breq	.-16     	; 0xff8 <NVM::V3::write_memory()+0x56>
    1008:	85 e1       	ldi	r24, 0x15	; 21
    100a:	70 de       	rcall	.-800    	; 0xcec <NVM::V3::nvm_ctrl_change(unsigned char)>
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv3.cpp:148
      /* MTYPE_FLASH (alias) */
      /* MTYPE_USERSIG (USERROW) */
      return write_bytes_flash(_dwAddr, _wLength);
    100c:	88 23       	and	r24, r24
    100e:	a1 f3       	breq	.-24     	; 0xff8 <NVM::V3::write_memory()+0x56>
    1010:	66 de       	rcall	.-820    	; 0xcde <NVM::V3::write_eeprom(unsigned long, unsigned int) [clone .part.3]>
    1012:	d0 cf       	rjmp	.-96     	; 0xfb4 <NVM::V3::write_memory()+0x12>
write_memory():
    1014:	80 3c       	cpi	r24, 0xC0	; 192
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv3.cpp:150
    }
    else if (m_type == 0xB0) {
    1016:	11 f0       	breq	.+4      	; 0x101c <NVM::V3::write_memory()+0x7a>
    1018:	85 3c       	cpi	r24, 0xC5	; 197
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv3.cpp:152
      /* MTYPE_FLASH_PAGE (PROGMEM) */
      _dwAddr += PROG_START;
    101a:	29 f4       	brne	.+10     	; 0x1026 <NVM::V3::write_memory()+0x84>
    101c:	ae 01       	movw	r20, r28
    101e:	c7 01       	movw	r24, r14
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv3.cpp:153
      return write_words_flash(_dwAddr, _wLength);
    1020:	b6 01       	movw	r22, r12
    1022:	8c de       	rcall	.-744    	; 0xd3c <NVM::V3::write_bytes_flash(unsigned long, unsigned int)>
    1024:	c7 cf       	rjmp	.-114    	; 0xfb4 <NVM::V3::write_memory()+0x12>
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv3.cpp:157
    }
    else {
      /* MTYPE_SRAM */
      return UPDI::send_bytes_block(_dwAddr, _wLength);
    1026:	80 3b       	cpi	r24, 0xB0	; 176
    1028:	39 f4       	brne	.+14     	; 0x1038 <NVM::V3::write_memory()+0x96>
    102a:	c7 01       	movw	r24, r14
    102c:	b6 01       	movw	r22, r12
    102e:	80 58       	subi	r24, 0x80	; 128
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv0.cpp:62
  constexpr auto NVM_STATUS = 0x1002;
  constexpr auto NVM_DATA   = 0x1006;
  constexpr auto PROD_SIG   = 0x1100;

  uint8_t nvm_wait (void) {
    do { UPDI::recv_byte(NVM_STATUS); } while (RXDATA & 3);
    1030:	9f 4f       	sbci	r25, 0xFF	; 255
    1032:	ae 01       	movw	r20, r28
    1034:	a9 de       	rcall	.-686    	; 0xd88 <NVM::V3::write_words_flash(unsigned long, unsigned int)>
    1036:	be cf       	rjmp	.-132    	; 0xfb4 <NVM::V3::write_memory()+0x12>
    1038:	ae 01       	movw	r20, r28
    103a:	c7 01       	movw	r24, r14
    103c:	b6 01       	movw	r22, r12
    103e:	e4 da       	rcall	.-2616   	; 0x608 <UPDI::send_bytes_block(unsigned long, unsigned int)>
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv0.cpp:63
    return RXDATA;
    1040:	b9 cf       	rjmp	.-142    	; 0xfb4 <NVM::V3::write_memory()+0x12>

00001042 <NVM::V0::nvm_wait()>:
nvm_wait():
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv0.cpp:108
      && (nvm_wait() & 7) == 0
    );
  }

  size_t prog_init (void) {
    nvm_wait();
    1042:	62 e0       	ldi	r22, 0x02	; 2
    1044:	70 e1       	ldi	r23, 0x10	; 16
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv0.cpp:109
    UPDI::nvm_ctrl(0x04);         /* NVM_CMD_PBC */
    1046:	80 e0       	ldi	r24, 0x00	; 0
    1048:	90 e0       	ldi	r25, 0x00	; 0
    104a:	86 da       	rcall	.-2804   	; 0x558 <UPDI::recv_byte(unsigned long)>
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv0.cpp:110
    nvm_wait();
    104c:	8f b3       	in	r24, 0x1f	; 31
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv0.cpp:111
    return UPDI::nvm_ctrl(0x00);
    104e:	83 70       	andi	r24, 0x03	; 3
    1050:	c1 f7       	brne	.-16     	; 0x1042 <NVM::V0::nvm_wait()>
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv0.cpp:112
  }
    1052:	8f b3       	in	r24, 0x1f	; 31
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv2.cpp:61
  uint8_t nvm_wait (void) {
    do { UPDI::recv_byte(NVM_STATUS); } while (RXDATA & 3);
    return RXDATA;
  }

  bool nvm_ctrl_change (uint8_t _nvmcmd) {
    1054:	08 95       	ret

00001056 <NVM::V0::prog_init()>:
prog_init():
    1056:	f5 df       	rcall	.-22     	; 0x1042 <NVM::V0::nvm_wait()>
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv2.cpp:62
    nvm_wait();
    1058:	84 e0       	ldi	r24, 0x04	; 4
    105a:	9f db       	rcall	.-2242   	; 0x79a <UPDI::nvm_ctrl(unsigned char)>
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv2.cpp:63
    if (UPDI::recv_byte(NVM_CTRL) && RXDATA == _nvmcmd) return true;
    105c:	f2 df       	rcall	.-28     	; 0x1042 <NVM::V0::nvm_wait()>
    105e:	80 e0       	ldi	r24, 0x00	; 0
    1060:	9c db       	rcall	.-2248   	; 0x79a <UPDI::nvm_ctrl(unsigned char)>
    1062:	90 e0       	ldi	r25, 0x00	; 0
    1064:	08 95       	ret

00001066 <NVM::V2::nvm_ctrl_change(unsigned char)>:
nvm_ctrl_change():
    1066:	cf 93       	push	r28
    1068:	c8 2f       	mov	r28, r24
    106a:	eb df       	rcall	.-42     	; 0x1042 <NVM::V0::nvm_wait()>
    106c:	60 e0       	ldi	r22, 0x00	; 0
    106e:	70 e1       	ldi	r23, 0x10	; 16
    1070:	80 e0       	ldi	r24, 0x00	; 0
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv2.cpp:67
    if (!UPDI::nvm_ctrl(0x00)) return false;
    if (0 != _nvmcmd) return UPDI::nvm_ctrl(_nvmcmd);
    return true;
  }
    1072:	90 e0       	ldi	r25, 0x00	; 0
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv2.cpp:64
  }

  bool nvm_ctrl_change (uint8_t _nvmcmd) {
    nvm_wait();
    if (UPDI::recv_byte(NVM_CTRL) && RXDATA == _nvmcmd) return true;
    if (!UPDI::nvm_ctrl(0x00)) return false;
    1074:	71 da       	rcall	.-2846   	; 0x558 <UPDI::recv_byte(unsigned long)>
    1076:	88 23       	and	r24, r24
    1078:	31 f0       	breq	.+12     	; 0x1086 <NVM::V2::nvm_ctrl_change(unsigned char)+0x20>
    107a:	8f b3       	in	r24, 0x1f	; 31
    107c:	8c 13       	cpse	r24, r28
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv2.cpp:65
    if (0 != _nvmcmd) return UPDI::nvm_ctrl(_nvmcmd);
    107e:	03 c0       	rjmp	.+6      	; 0x1086 <NVM::V2::nvm_ctrl_change(unsigned char)+0x20>
    1080:	81 e0       	ldi	r24, 0x01	; 1
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv2.cpp:67
    return true;
  }
    1082:	cf 91       	pop	r28
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv2.cpp:65

  bool nvm_ctrl_change (uint8_t _nvmcmd) {
    nvm_wait();
    if (UPDI::recv_byte(NVM_CTRL) && RXDATA == _nvmcmd) return true;
    if (!UPDI::nvm_ctrl(0x00)) return false;
    if (0 != _nvmcmd) return UPDI::nvm_ctrl(_nvmcmd);
    1084:	08 95       	ret
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv2.cpp:113
      && nvm_ctrl_change(0x00)
    );
  }

  size_t prog_init (void) {
    return nvm_ctrl_change(0x00);
    1086:	80 e0       	ldi	r24, 0x00	; 0
    1088:	88 db       	rcall	.-2288   	; 0x79a <UPDI::nvm_ctrl(unsigned char)>
    108a:	88 23       	and	r24, r24
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv2.cpp:114
  }
    108c:	d1 f3       	breq	.-12     	; 0x1082 <NVM::V2::nvm_ctrl_change(unsigned char)+0x1c>
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv2.cpp:75
    D2PRINTF(" NVM_V2_FLPER=%06lX\r\n", _dwAddr);
    return (
      nvm_ctrl_change(0x08)   /* NVM_V2_CMD_FLPER */
      && UPDI::send_byte(_dwAddr, 0xFF)
      && (nvm_wait() & 0x73) == 0
      && nvm_ctrl_change(0x00)
    108e:	cc 23       	and	r28, r28
    1090:	b9 f3       	breq	.-18     	; 0x1080 <NVM::V2::nvm_ctrl_change(unsigned char)+0x1a>
    1092:	8c 2f       	mov	r24, r28
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv2.cpp:69
    if (!UPDI::nvm_ctrl(0x00)) return false;
    if (0 != _nvmcmd) return UPDI::nvm_ctrl(_nvmcmd);
    return true;
  }

  bool erase_flash_page (uint32_t _dwAddr) {
    1094:	cf 91       	pop	r28
    1096:	81 cb       	rjmp	.-2302   	; 0x79a <UPDI::nvm_ctrl(unsigned char)>

00001098 <NVM::V2::prog_init()>:
prog_init():
    1098:	80 e0       	ldi	r24, 0x00	; 0
    109a:	e5 df       	rcall	.-54     	; 0x1066 <NVM::V2::nvm_ctrl_change(unsigned char)>
    109c:	90 e0       	ldi	r25, 0x00	; 0
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv2.cpp:72
    D2PRINTF(" NVM_V2_FLPER=%06lX\r\n", _dwAddr);
    return (
      nvm_ctrl_change(0x08)   /* NVM_V2_CMD_FLPER */
    109e:	08 95       	ret

000010a0 <NVM::V2::write_eeprom(unsigned long, unsigned int) [clone .part.5]>:
_ZN3NVM2V216erase_flash_pageEm.part.1():
    10a0:	80 e0       	ldi	r24, 0x00	; 0
    10a2:	e1 cf       	rjmp	.-62     	; 0x1066 <NVM::V2::nvm_ctrl_change(unsigned char)>

000010a4 <NVM::V2::erase_flash_page(unsigned long)>:
erase_flash_page():
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv2.cpp:75
      && UPDI::send_byte(_dwAddr, 0xFF)
      && (nvm_wait() & 0x73) == 0
      && nvm_ctrl_change(0x00)
    10a4:	cf 92       	push	r12
    10a6:	df 92       	push	r13
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv2.cpp:73

  bool erase_flash_page (uint32_t _dwAddr) {
    D2PRINTF(" NVM_V2_FLPER=%06lX\r\n", _dwAddr);
    return (
      nvm_ctrl_change(0x08)   /* NVM_V2_CMD_FLPER */
      && UPDI::send_byte(_dwAddr, 0xFF)
    10a8:	ef 92       	push	r14
    10aa:	ff 92       	push	r15
    10ac:	6b 01       	movw	r12, r22
    10ae:	7c 01       	movw	r14, r24
    10b0:	88 e0       	ldi	r24, 0x08	; 8
    10b2:	d9 df       	rcall	.-78     	; 0x1066 <NVM::V2::nvm_ctrl_change(unsigned char)>
    10b4:	88 23       	and	r24, r24
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv2.cpp:74
      && (nvm_wait() & 0x73) == 0
    10b6:	71 f0       	breq	.+28     	; 0x10d4 <NVM::V2::erase_flash_page(unsigned long)+0x30>
    10b8:	4f ef       	ldi	r20, 0xFF	; 255
    10ba:	c7 01       	movw	r24, r14
    10bc:	b6 01       	movw	r22, r12
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv2.cpp:77
      && nvm_ctrl_change(0x00)
    );
  }
    10be:	50 db       	rcall	.-2400   	; 0x760 <UPDI::send_byte(unsigned long, unsigned char)>
    10c0:	88 23       	and	r24, r24
    10c2:	41 f0       	breq	.+16     	; 0x10d4 <NVM::V2::erase_flash_page(unsigned long)+0x30>
    10c4:	be df       	rcall	.-132    	; 0x1042 <NVM::V0::nvm_wait()>
    10c6:	83 77       	andi	r24, 0x73	; 115
    10c8:	29 f4       	brne	.+10     	; 0x10d4 <NVM::V2::erase_flash_page(unsigned long)+0x30>
    10ca:	ff 90       	pop	r15
    10cc:	ef 90       	pop	r14
    10ce:	df 90       	pop	r13
    10d0:	cf 90       	pop	r12
    10d2:	e6 cf       	rjmp	.-52     	; 0x10a0 <NVM::V2::write_eeprom(unsigned long, unsigned int) [clone .part.5]>
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv2.cpp:155
    /* Page erase will not be used if received. */
    /* Instead, page erase is determined by the is_boundary_flash_page function. */
    return 1;
  }

  size_t write_memory (void) {
    10d4:	80 e0       	ldi	r24, 0x00	; 0
    10d6:	ff 90       	pop	r15
    10d8:	ef 90       	pop	r14
    10da:	df 90       	pop	r13
    10dc:	cf 90       	pop	r12
    10de:	08 95       	ret

000010e0 <NVM::V2::write_memory()>:
write_memory():
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv2.cpp:159
    uint8_t   m_type = packet.out.bMType;
    uint32_t _dwAddr = packet.out.dwAddr;
    size_t  _wLength = packet.out.dwLength;
    if (bit_is_clear(PGCONF, PGCONF_PROG_bp)) return UPDI::write_userrow();
    10e0:	cf 92       	push	r12
    10e2:	df 92       	push	r13
    10e4:	ef 92       	push	r14
    10e6:	ff 92       	push	r15
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv2.cpp:179
      _dwAddr += PROG_START;
      return write_words_flash(_dwAddr, _wLength);
    }
    else {
      /* MTYPE_SRAM */
      return UPDI::send_bytes_block(_dwAddr, _wLength);
    10e8:	cf 93       	push	r28
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv2.cpp:181
    }
  }
    10ea:	df 93       	push	r29
    10ec:	e9 99       	sbic	0x1d, 1	; 29
    10ee:	09 c0       	rjmp	.+18     	; 0x1102 <NVM::V2::write_memory()+0x22>
    10f0:	c6 da       	rcall	.-2676   	; 0x67e <UPDI::write_userrow()>
    10f2:	90 e0       	ldi	r25, 0x00	; 0
    10f4:	df 91       	pop	r29
    10f6:	cf 91       	pop	r28
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv2.cpp:156
    /* Instead, page erase is determined by the is_boundary_flash_page function. */
    return 1;
  }

  size_t write_memory (void) {
    uint8_t   m_type = packet.out.bMType;
    10f8:	ff 90       	pop	r15
    10fa:	ef 90       	pop	r14
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv2.cpp:157
    uint32_t _dwAddr = packet.out.dwAddr;
    10fc:	df 90       	pop	r13
    10fe:	cf 90       	pop	r12
    1100:	08 95       	ret
    1102:	80 91 c5 60 	lds	r24, 0x60C5	; 0x8060c5 <packet+0x7>
    1106:	c0 90 c6 60 	lds	r12, 0x60C6	; 0x8060c6 <packet+0x8>
    110a:	d0 90 c7 60 	lds	r13, 0x60C7	; 0x8060c7 <packet+0x9>
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv2.cpp:158
    size_t  _wLength = packet.out.dwLength;
    110e:	e0 90 c8 60 	lds	r14, 0x60C8	; 0x8060c8 <packet+0xa>
    1112:	f0 90 c9 60 	lds	r15, 0x60C9	; 0x8060c9 <packet+0xb>
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv2.cpp:160
    if (bit_is_clear(PGCONF, PGCONF_PROG_bp)) return UPDI::write_userrow();
    if (m_type == 0x22 || m_type == 0xB2 || m_type == 0xB3 || m_type == 0xC4) {
    1116:	c0 91 ca 60 	lds	r28, 0x60CA	; 0x8060ca <packet+0xc>
    111a:	d0 91 cb 60 	lds	r29, 0x60CB	; 0x8060cb <packet+0xd>
    111e:	82 32       	cpi	r24, 0x22	; 34
    1120:	31 f0       	breq	.+12     	; 0x112e <NVM::V2::write_memory()+0x4e>
    1122:	9e e4       	ldi	r25, 0x4E	; 78
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv2.cpp:105
  }

  bool write_eeprom (uint32_t _dwAddr, size_t _wLength) {
    D2PRINTF(" NVM_V2_EEERWR=%06lX\r\n", _dwAddr);
    return (
      nvm_ctrl_change(0x13)   /* NVM_V2_CMD_EEERWR */
    1124:	98 0f       	add	r25, r24
    1126:	92 30       	cpi	r25, 0x02	; 2
    1128:	10 f0       	brcs	.+4      	; 0x112e <NVM::V2::write_memory()+0x4e>
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv2.cpp:108
      && UPDI::send_bytes_block_slow(_dwAddr, _wLength)
      && (nvm_wait() & 0x73) == 0
      && nvm_ctrl_change(0x00)
    112a:	84 3c       	cpi	r24, 0xC4	; 196
    112c:	89 f4       	brne	.+34     	; 0x1150 <NVM::V2::write_memory()+0x70>
write_eeprom():
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv2.cpp:87
    D2PRINTF(" NVM_V2_FLWR=%06lX\r\n", _dwAddr);
    return (
      nvm_ctrl_change(0x02)   /* NVM_V2_CMD_FLWR */
      && UPDI::send_words_block(_dwAddr, _wLength)
      && (nvm_wait() & 0x73) == 0
      && nvm_ctrl_change(0x00)
    112e:	83 e1       	ldi	r24, 0x13	; 19
    1130:	9a df       	rcall	.-204    	; 0x1066 <NVM::V2::nvm_ctrl_change(unsigned char)>
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv2.cpp:106

  bool write_eeprom (uint32_t _dwAddr, size_t _wLength) {
    D2PRINTF(" NVM_V2_EEERWR=%06lX\r\n", _dwAddr);
    return (
      nvm_ctrl_change(0x13)   /* NVM_V2_CMD_EEERWR */
      && UPDI::send_bytes_block_slow(_dwAddr, _wLength)
    1132:	81 11       	cpse	r24, r1
    1134:	02 c0       	rjmp	.+4      	; 0x113a <NVM::V2::write_memory()+0x5a>
write_memory():
    1136:	80 e0       	ldi	r24, 0x00	; 0
    1138:	dc cf       	rjmp	.-72     	; 0x10f2 <NVM::V2::write_memory()+0x12>
write_eeprom():
    113a:	ae 01       	movw	r20, r28
    113c:	c7 01       	movw	r24, r14
    113e:	b6 01       	movw	r22, r12
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv2.cpp:107
      && (nvm_wait() & 0x73) == 0
    1140:	32 db       	rcall	.-2460   	; 0x7a6 <UPDI::send_bytes_block_slow(unsigned long, unsigned int)>
    1142:	88 23       	and	r24, r24
    1144:	c1 f3       	breq	.-16     	; 0x1136 <NVM::V2::write_memory()+0x56>
    1146:	7d df       	rcall	.-262    	; 0x1042 <NVM::V0::nvm_wait()>
    1148:	83 77       	andi	r24, 0x73	; 115
    114a:	a9 f7       	brne	.-22     	; 0x1136 <NVM::V2::write_memory()+0x56>
    114c:	a9 df       	rcall	.-174    	; 0x10a0 <NVM::V2::write_eeprom(unsigned long, unsigned int) [clone .part.5]>
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv2.cpp:167
      /* MTYPE_LOCK_BITS */
      /* MTYPE_EEPROM */
      /* MTYPE_EEPROM_XMEGA */
      return write_eeprom(_dwAddr, _wLength);
    }
    else if (m_type == 0xC0 || m_type == 0xC5) {
    114e:	d1 cf       	rjmp	.-94     	; 0x10f2 <NVM::V2::write_memory()+0x12>
write_memory():
    1150:	80 3c       	cpi	r24, 0xC0	; 192
    1152:	11 f0       	breq	.+4      	; 0x1158 <NVM::V2::write_memory()+0x78>
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv2.cpp:92
      && nvm_ctrl_change(0x00)
    );
  }

  bool write_bytes_flash (uint32_t _dwAddr, size_t _wLength) {
    if (SYS::is_boundary_flash_page(_dwAddr)) erase_flash_page(_dwAddr);
    1154:	85 3c       	cpi	r24, 0xC5	; 197
    1156:	b9 f4       	brne	.+46     	; 0x1186 <NVM::V2::write_memory()+0xa6>
write_bytes_flash():
    1158:	c7 01       	movw	r24, r14
    115a:	b6 01       	movw	r22, r12
    115c:	bc dc       	rcall	.-1672   	; 0xad6 <SYS::is_boundary_flash_page(unsigned long)>
    115e:	88 23       	and	r24, r24
    1160:	19 f0       	breq	.+6      	; 0x1168 <NVM::V2::write_memory()+0x88>
    1162:	c7 01       	movw	r24, r14
    1164:	b6 01       	movw	r22, r12
    1166:	9e df       	rcall	.-196    	; 0x10a4 <NVM::V2::erase_flash_page(unsigned long)>
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv2.cpp:95
    D2PRINTF(" NVM_V2_FLWR=%06lX\r\n", _dwAddr);
    return (
      nvm_ctrl_change(0x02)   /* NVM_V2_CMD_FLWR */
    1168:	82 e0       	ldi	r24, 0x02	; 2
    116a:	7d df       	rcall	.-262    	; 0x1066 <NVM::V2::nvm_ctrl_change(unsigned char)>
    116c:	88 23       	and	r24, r24
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv2.cpp:98
      && UPDI::send_bytes_block_slow(_dwAddr, _wLength)
      && (nvm_wait() & 0x73) == 0
      && nvm_ctrl_change(0x00)
    116e:	19 f3       	breq	.-58     	; 0x1136 <NVM::V2::write_memory()+0x56>
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv2.cpp:96
  bool write_bytes_flash (uint32_t _dwAddr, size_t _wLength) {
    if (SYS::is_boundary_flash_page(_dwAddr)) erase_flash_page(_dwAddr);
    D2PRINTF(" NVM_V2_FLWR=%06lX\r\n", _dwAddr);
    return (
      nvm_ctrl_change(0x02)   /* NVM_V2_CMD_FLWR */
      && UPDI::send_bytes_block_slow(_dwAddr, _wLength)
    1170:	ae 01       	movw	r20, r28
    1172:	c7 01       	movw	r24, r14
    1174:	b6 01       	movw	r22, r12
    1176:	17 db       	rcall	.-2514   	; 0x7a6 <UPDI::send_bytes_block_slow(unsigned long, unsigned int)>
    1178:	88 23       	and	r24, r24
    117a:	e9 f2       	breq	.-70     	; 0x1136 <NVM::V2::write_memory()+0x56>
    117c:	62 df       	rcall	.-316    	; 0x1042 <NVM::V0::nvm_wait()>
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv2.cpp:97
      && (nvm_wait() & 0x73) == 0
    117e:	83 77       	andi	r24, 0x73	; 115
    1180:	d1 f6       	brne	.-76     	; 0x1136 <NVM::V2::write_memory()+0x56>
    1182:	8e df       	rcall	.-228    	; 0x10a0 <NVM::V2::write_eeprom(unsigned long, unsigned int) [clone .part.5]>
    1184:	b6 cf       	rjmp	.-148    	; 0x10f2 <NVM::V2::write_memory()+0x12>
write_memory():
    1186:	80 3b       	cpi	r24, 0xB0	; 176
    1188:	f9 f4       	brne	.+62     	; 0x11c8 <NVM::V2::write_memory()+0xe8>
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv2.cpp:172
    else if (m_type == 0xC0 || m_type == 0xC5) {
      /* MTYPE_FLASH (alias) */
      /* MTYPE_USERSIG (USERROW) */
      return write_bytes_flash(_dwAddr, _wLength);
    }
    else if (m_type == 0xB0) {
    118a:	80 e8       	ldi	r24, 0x80	; 128
    118c:	e8 0e       	add	r14, r24
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv2.cpp:174
      /* MTYPE_FLASH_PAGE (PROGMEM) */
      _dwAddr += PROG_START;
    118e:	f1 1c       	adc	r15, r1
write_words_flash():
    1190:	ea 99       	sbic	0x1d, 2	; 29
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv2.cpp:81
    );
  }

  bool write_words_flash (uint32_t _dwAddr, size_t _wLength) {
    if (bit_is_clear(PGCONF, PGCONF_ERSE_bp)
      && SYS::is_boundary_flash_page(_dwAddr)) erase_flash_page(_dwAddr);
    1192:	08 c0       	rjmp	.+16     	; 0x11a4 <NVM::V2::write_memory()+0xc4>
    1194:	c7 01       	movw	r24, r14
    1196:	b6 01       	movw	r22, r12
    1198:	9e dc       	rcall	.-1732   	; 0xad6 <SYS::is_boundary_flash_page(unsigned long)>
    119a:	88 23       	and	r24, r24
    119c:	19 f0       	breq	.+6      	; 0x11a4 <NVM::V2::write_memory()+0xc4>
    119e:	c7 01       	movw	r24, r14
    11a0:	b6 01       	movw	r22, r12
    11a2:	80 df       	rcall	.-256    	; 0x10a4 <NVM::V2::erase_flash_page(unsigned long)>
    11a4:	82 e0       	ldi	r24, 0x02	; 2
    11a6:	5f df       	rcall	.-322    	; 0x1066 <NVM::V2::nvm_ctrl_change(unsigned char)>
    11a8:	88 23       	and	r24, r24
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv2.cpp:84
    D2PRINTF(" NVM_V2_FLWR=%06lX\r\n", _dwAddr);
    return (
      nvm_ctrl_change(0x02)   /* NVM_V2_CMD_FLWR */
    11aa:	09 f4       	brne	.+2      	; 0x11ae <NVM::V2::write_memory()+0xce>
    11ac:	c4 cf       	rjmp	.-120    	; 0x1136 <NVM::V2::write_memory()+0x56>
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv2.cpp:87
      && UPDI::send_words_block(_dwAddr, _wLength)
      && (nvm_wait() & 0x73) == 0
      && nvm_ctrl_change(0x00)
    11ae:	ae 01       	movw	r20, r28
    11b0:	c7 01       	movw	r24, r14
    11b2:	b6 01       	movw	r22, r12
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv2.cpp:85
    if (bit_is_clear(PGCONF, PGCONF_ERSE_bp)
      && SYS::is_boundary_flash_page(_dwAddr)) erase_flash_page(_dwAddr);
    D2PRINTF(" NVM_V2_FLWR=%06lX\r\n", _dwAddr);
    return (
      nvm_ctrl_change(0x02)   /* NVM_V2_CMD_FLWR */
      && UPDI::send_words_block(_dwAddr, _wLength)
    11b4:	eb d9       	rcall	.-3114   	; 0x58c <UPDI::send_words_block(unsigned long, unsigned int)>
    11b6:	88 23       	and	r24, r24
    11b8:	09 f4       	brne	.+2      	; 0x11bc <NVM::V2::write_memory()+0xdc>
    11ba:	bd cf       	rjmp	.-134    	; 0x1136 <NVM::V2::write_memory()+0x56>
    11bc:	42 df       	rcall	.-380    	; 0x1042 <NVM::V0::nvm_wait()>
    11be:	83 77       	andi	r24, 0x73	; 115
    11c0:	09 f0       	breq	.+2      	; 0x11c4 <NVM::V2::write_memory()+0xe4>
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv2.cpp:86
      && (nvm_wait() & 0x73) == 0
    11c2:	b9 cf       	rjmp	.-142    	; 0x1136 <NVM::V2::write_memory()+0x56>
    11c4:	6d df       	rcall	.-294    	; 0x10a0 <NVM::V2::write_eeprom(unsigned long, unsigned int) [clone .part.5]>
    11c6:	95 cf       	rjmp	.-214    	; 0x10f2 <NVM::V2::write_memory()+0x12>
write_memory():
    11c8:	ae 01       	movw	r20, r28
    11ca:	c7 01       	movw	r24, r14
    11cc:	b6 01       	movw	r22, r12
    11ce:	1c da       	rcall	.-3016   	; 0x608 <UPDI::send_bytes_block(unsigned long, unsigned int)>
    11d0:	90 cf       	rjmp	.-224    	; 0x10f2 <NVM::V2::write_memory()+0x12>

000011d2 <NVM::V1::write_memory()>:
_ZN3NVM2V112write_memoryEv():
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv2.cpp:179
      _dwAddr += PROG_START;
      return write_words_flash(_dwAddr, _wLength);
    }
    else {
      /* MTYPE_SRAM */
      return UPDI::send_bytes_block(_dwAddr, _wLength);
    11d2:	90 e0       	ldi	r25, 0x00	; 0
    11d4:	80 e0       	ldi	r24, 0x00	; 0
    11d6:	08 95       	ret

000011d8 <NVM::V1::read_memory()>:
_ZN3NVM2V111read_memoryEv():
    11d8:	90 e0       	ldi	r25, 0x00	; 0
    11da:	80 e0       	ldi	r24, 0x00	; 0
    11dc:	08 95       	ret

000011de <NVM::V1::erase_memory()>:
_ZN3NVM2V112erase_memoryEv():
    11de:	90 e0       	ldi	r25, 0x00	; 0
    11e0:	80 e0       	ldi	r24, 0x00	; 0
    11e2:	08 95       	ret

000011e4 <NVM::V0::write_memory()>:
write_memory():
    11e4:	4f 92       	push	r4
    11e6:	5f 92       	push	r5
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv0.cpp:142
    }
    /* Page erase will not be used if received. */
    return 1;
  }

  size_t write_memory (void) {
    11e8:	6f 92       	push	r6
    11ea:	7f 92       	push	r7
    11ec:	af 92       	push	r10
    11ee:	bf 92       	push	r11
    11f0:	cf 92       	push	r12
    11f2:	df 92       	push	r13
    11f4:	ef 92       	push	r14
    11f6:	ff 92       	push	r15
    11f8:	0f 93       	push	r16
    11fa:	1f 93       	push	r17
    11fc:	cf 93       	push	r28
    11fe:	df 93       	push	r29
    1200:	00 d0       	rcall	.+0      	; 0x1202 <NVM::V0::write_memory()+0x1e>
    1202:	00 d0       	rcall	.+0      	; 0x1204 <NVM::V0::write_memory()+0x20>
    1204:	cd b7       	in	r28, 0x3d	; 61
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv0.cpp:146
    uint8_t  m_type = packet.out.bMType;
    uint16_t _wAddr = packet.out.dwAddr;
    size_t _wLength = packet.out.dwLength;
    if (bit_is_clear(PGCONF, PGCONF_PROG_bp)) return UPDI::write_userrow();
    1206:	de b7       	in	r29, 0x3e	; 62
    1208:	e9 99       	sbic	0x1d, 1	; 29
    120a:	14 c0       	rjmp	.+40     	; 0x1234 <NVM::V0::write_memory()+0x50>
    120c:	38 da       	rcall	.-2960   	; 0x67e <UPDI::write_userrow()>
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv0.cpp:166
      _wAddr += Device_Descriptor.UPDI.prog_base;
      return write_flash(_wAddr, _wLength);
    }
    else {
      /* MTYPE_SRAM */
      return UPDI::send_bytes_block(_wAddr, _wLength);
    120e:	90 e0       	ldi	r25, 0x00	; 0
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv0.cpp:168
    }
  }
    1210:	24 96       	adiw	r28, 0x04	; 4
    1212:	cd bf       	out	0x3d, r28	; 61
    1214:	de bf       	out	0x3e, r29	; 62
    1216:	df 91       	pop	r29
    1218:	cf 91       	pop	r28
    121a:	1f 91       	pop	r17
    121c:	0f 91       	pop	r16
    121e:	ff 90       	pop	r15
    1220:	ef 90       	pop	r14
    1222:	df 90       	pop	r13
    1224:	cf 90       	pop	r12
    1226:	bf 90       	pop	r11
    1228:	af 90       	pop	r10
    122a:	7f 90       	pop	r7
    122c:	6f 90       	pop	r6
    122e:	5f 90       	pop	r5
    1230:	4f 90       	pop	r4
    1232:	08 95       	ret
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv0.cpp:143
    /* Page erase will not be used if received. */
    return 1;
  }

  size_t write_memory (void) {
    uint8_t  m_type = packet.out.bMType;
    1234:	80 91 c5 60 	lds	r24, 0x60C5	; 0x8060c5 <packet+0x7>
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv0.cpp:144
    uint16_t _wAddr = packet.out.dwAddr;
    1238:	c0 90 c6 60 	lds	r12, 0x60C6	; 0x8060c6 <packet+0x8>
    123c:	d0 90 c7 60 	lds	r13, 0x60C7	; 0x8060c7 <packet+0x9>
    1240:	e0 90 c8 60 	lds	r14, 0x60C8	; 0x8060c8 <packet+0xa>
    1244:	f0 90 c9 60 	lds	r15, 0x60C9	; 0x8060c9 <packet+0xb>
    1248:	96 01       	movw	r18, r12
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv0.cpp:145
    size_t _wLength = packet.out.dwLength;
    124a:	00 91 ca 60 	lds	r16, 0x60CA	; 0x8060ca <packet+0xc>
    124e:	10 91 cb 60 	lds	r17, 0x60CB	; 0x8060cb <packet+0xd>
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv0.cpp:147
    if (bit_is_clear(PGCONF, PGCONF_PROG_bp)) return UPDI::write_userrow();
    if (m_type == 0xB2 || m_type == 0xB3) {
    1252:	9e e4       	ldi	r25, 0x4E	; 78
    1254:	98 0f       	add	r25, r24
    1256:	92 30       	cpi	r25, 0x02	; 2
    1258:	08 f0       	brcs	.+2      	; 0x125c <NVM::V0::write_memory()+0x78>
    125a:	44 c0       	rjmp	.+136    	; 0x12e4 <NVM::V0::write_memory()+0x100>
    125c:	8e eb       	ldi	r24, 0xBE	; 190
    125e:	e8 2e       	mov	r14, r24
    1260:	80 e6       	ldi	r24, 0x60	; 96
    1262:	f8 2e       	mov	r15, r24
write_fuse():
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv0.cpp:73
      uint16_t data;  /* NVMCTRL_REG_DATA */
      uint16_t addr;  /* NVMCTRL_REG_ADDR */
    } fuses;
    for (size_t _i = 0; _i < _wLength; _i++) {
      fuses.data = packet.out.memData[_i];
      fuses.addr = _wAddr + _i;
    1264:	c9 01       	movw	r24, r18
    1266:	8e 5b       	subi	r24, 0xBE	; 190
    1268:	90 46       	sbci	r25, 0x60	; 96
    126a:	6c 01       	movw	r12, r24
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv0.cpp:71
  bool write_fuse (uint16_t _wAddr, size_t _wLength) {
    struct fuse_packet_t {
      uint16_t data;  /* NVMCTRL_REG_DATA */
      uint16_t addr;  /* NVMCTRL_REG_ADDR */
    } fuses;
    for (size_t _i = 0; _i < _wLength; _i++) {
    126c:	c7 01       	movw	r24, r14
    126e:	8e 5b       	subi	r24, 0xBE	; 190
    1270:	90 46       	sbci	r25, 0x60	; 96
    1272:	80 17       	cp	r24, r16
    1274:	91 07       	cpc	r25, r17
    1276:	a0 f5       	brcc	.+104    	; 0x12e0 <NVM::V0::write_memory()+0xfc>
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv0.cpp:72
      fuses.data = packet.out.memData[_i];
    1278:	f7 01       	movw	r30, r14
    127a:	81 89       	ldd	r24, Z+17	; 0x11
    127c:	90 e0       	ldi	r25, 0x00	; 0
    127e:	89 83       	std	Y+1, r24	; 0x01
    1280:	9a 83       	std	Y+2, r25	; 0x02
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv0.cpp:73
      fuses.addr = _wAddr + _i;
    1282:	c6 01       	movw	r24, r12
    1284:	8e 0d       	add	r24, r14
    1286:	9f 1d       	adc	r25, r15
    1288:	8b 83       	std	Y+3, r24	; 0x03
    128a:	9c 83       	std	Y+4, r25	; 0x04
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv0.cpp:75
      D2PRINTF(" NVM_V0_WFU=%04X<%02X\r\n", fuses.addr, fuses.data);
      nvm_wait();
    128c:	da de       	rcall	.-588    	; 0x1042 <NVM::V0::nvm_wait()>
    128e:	ce 01       	movw	r24, r28
    1290:	01 96       	adiw	r24, 0x01	; 1
    1292:	5c 01       	movw	r10, r24
    1294:	66 e0       	ldi	r22, 0x06	; 6
    1296:	70 e1       	ldi	r23, 0x10	; 16
    1298:	80 e0       	ldi	r24, 0x00	; 0
    129a:	90 e0       	ldi	r25, 0x00	; 0
send_bytes_data():
    129c:	f5 01       	movw	r30, r10
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:193
      && clear_rsd();
  }

  bool send_bytes_data (uint32_t _dwAddr, uint8_t* _data, size_t _wLength) {
    for (size_t _i = 0; _i < _wLength; _i++) {
      if (!send_byte(_dwAddr++, *_data++)) return false;
    129e:	41 91       	ld	r20, Z+
    12a0:	5f 01       	movw	r10, r30
    12a2:	2b 01       	movw	r4, r22
    12a4:	3c 01       	movw	r6, r24
    12a6:	ff ef       	ldi	r31, 0xFF	; 255
    12a8:	4f 1a       	sub	r4, r31
    12aa:	5f 0a       	sbc	r5, r31
    12ac:	6f 0a       	sbc	r6, r31
    12ae:	7f 0a       	sbc	r7, r31
    12b0:	57 da       	rcall	.-2898   	; 0x760 <UPDI::send_byte(unsigned long, unsigned char)>
    12b2:	81 11       	cpse	r24, r1
    12b4:	02 c0       	rjmp	.+4      	; 0x12ba <NVM::V0::write_memory()+0xd6>
write_memory():
    12b6:	80 e0       	ldi	r24, 0x00	; 0
    12b8:	aa cf       	rjmp	.-172    	; 0x120e <NVM::V0::write_memory()+0x2a>
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv0.cpp:78
      if (!(UPDI::send_bytes_data(NVM_DATA, (uint8_t*)&fuses, 4)
        && UPDI::nvm_ctrl(0x07)   /* NVM_CMD_WFU */
        && (nvm_wait() & 7) == 0)) return false;
    12ba:	c3 01       	movw	r24, r6
    12bc:	b2 01       	movw	r22, r4
send_bytes_data():
    12be:	6a 30       	cpi	r22, 0x0A	; 10
    12c0:	20 e1       	ldi	r18, 0x10	; 16
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:192
      && send_bytes(&packet.out.memData[0], _wLength & ~1)
      && clear_rsd();
  }

  bool send_bytes_data (uint32_t _dwAddr, uint8_t* _data, size_t _wLength) {
    for (size_t _i = 0; _i < _wLength; _i++) {
    12c2:	72 07       	cpc	r23, r18
    12c4:	81 05       	cpc	r24, r1
    12c6:	91 05       	cpc	r25, r1
    12c8:	49 f7       	brne	.-46     	; 0x129c <NVM::V0::write_memory()+0xb8>
write_fuse():
    12ca:	87 e0       	ldi	r24, 0x07	; 7
    12cc:	66 da       	rcall	.-2868   	; 0x79a <UPDI::nvm_ctrl(unsigned char)>
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv0.cpp:77
      fuses.data = packet.out.memData[_i];
      fuses.addr = _wAddr + _i;
      D2PRINTF(" NVM_V0_WFU=%04X<%02X\r\n", fuses.addr, fuses.data);
      nvm_wait();
      if (!(UPDI::send_bytes_data(NVM_DATA, (uint8_t*)&fuses, 4)
        && UPDI::nvm_ctrl(0x07)   /* NVM_CMD_WFU */
    12ce:	88 23       	and	r24, r24
    12d0:	91 f3       	breq	.-28     	; 0x12b6 <NVM::V0::write_memory()+0xd2>
    12d2:	b7 de       	rcall	.-658    	; 0x1042 <NVM::V0::nvm_wait()>
    12d4:	9f ef       	ldi	r25, 0xFF	; 255
    12d6:	e9 1a       	sub	r14, r25
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv0.cpp:78
        && (nvm_wait() & 7) == 0)) return false;
    12d8:	f9 0a       	sbc	r15, r25
    12da:	87 70       	andi	r24, 0x07	; 7
    12dc:	39 f2       	breq	.-114    	; 0x126c <NVM::V0::write_memory()+0x88>
    12de:	eb cf       	rjmp	.-42     	; 0x12b6 <NVM::V0::write_memory()+0xd2>
write_memory():
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv0.cpp:76
    for (size_t _i = 0; _i < _wLength; _i++) {
      fuses.data = packet.out.memData[_i];
      fuses.addr = _wAddr + _i;
      D2PRINTF(" NVM_V0_WFU=%04X<%02X\r\n", fuses.addr, fuses.data);
      nvm_wait();
      if (!(UPDI::send_bytes_data(NVM_DATA, (uint8_t*)&fuses, 4)
    12e0:	81 e0       	ldi	r24, 0x01	; 1
    12e2:	95 cf       	rjmp	.-214    	; 0x120e <NVM::V0::write_memory()+0x2a>
    12e4:	82 32       	cpi	r24, 0x22	; 34
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv0.cpp:80
        && UPDI::nvm_ctrl(0x07)   /* NVM_CMD_WFU */
        && (nvm_wait() & 7) == 0)) return false;
    }
    return true;
    12e6:	21 f0       	breq	.+8      	; 0x12f0 <NVM::V0::write_memory()+0x10c>
    12e8:	9c e3       	ldi	r25, 0x3C	; 60
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv0.cpp:152
    if (m_type == 0xB2 || m_type == 0xB3) {
      /* MTYPE_FUSE_BITS */
      /* MTYPE_LOCK_BITS */
      return write_fuse(_wAddr, _wLength);
    }
    else if (m_type == 0x22 || m_type == 0xC4 || m_type == 0xC5) {
    12ea:	98 0f       	add	r25, r24
    12ec:	92 30       	cpi	r25, 0x02	; 2
    12ee:	58 f4       	brcc	.+22     	; 0x1306 <NVM::V0::write_memory()+0x122>
write_eeprom():
    12f0:	a8 de       	rcall	.-688    	; 0x1042 <NVM::V0::nvm_wait()>
    12f2:	c7 01       	movw	r24, r14
    12f4:	b6 01       	movw	r22, r12
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv0.cpp:99
    );
  }

  bool write_eeprom (uint16_t _wAddr, size_t _wLength) {
    D2PRINTF(" NVM_V0_ERWP=%04X\r\n", _wAddr);
    nvm_wait();
    12f6:	88 27       	eor	r24, r24
    12f8:	99 27       	eor	r25, r25
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv0.cpp:101
    return (
      UPDI::send_bytes_block(_wAddr, _wLength)
    12fa:	a8 01       	movw	r20, r16
write_flash():
    12fc:	85 d9       	rcall	.-3318   	; 0x608 <UPDI::send_bytes_block(unsigned long, unsigned int)>
    12fe:	81 11       	cpse	r24, r1
    1300:	1b c0       	rjmp	.+54     	; 0x1338 <NVM::V0::write_memory()+0x154>
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv0.cpp:91
      nvm_wait();
      UPDI::nvm_ctrl(0x04);       /* NVM_CMD_PBC */
    }
    nvm_wait();
    return (
      UPDI::send_bytes_block(_wAddr, _wLength)
    1302:	90 e0       	ldi	r25, 0x00	; 0
    1304:	21 c0       	rjmp	.+66     	; 0x1348 <NVM::V0::write_memory()+0x164>
write_memory():
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv0.cpp:93
      && UPDI::nvm_ctrl(0x03)     /* NVM_CMD_ERWP */
      && (nvm_wait() & 7) == 0
    1306:	80 3b       	cpi	r24, 0xB0	; 176
    1308:	11 f0       	breq	.+4      	; 0x130e <NVM::V0::write_memory()+0x12a>
    130a:	80 3c       	cpi	r24, 0xC0	; 192
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv0.cpp:158
      /* MTYPE_EEPROM */
      /* MTYPE_EEPROM_XMEGA */
      /* MTYPE_USERSIG (USERROW) */
      return write_eeprom(_wAddr, _wLength);
    }
    else if (m_type == 0xB0 || m_type == 0xC0) {
    130c:	f9 f4       	brne	.+62     	; 0x134c <NVM::V0::write_memory()+0x168>
    130e:	60 91 8e 60 	lds	r22, 0x608E	; 0x80608e <Device_Descriptor>
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv0.cpp:161
      /* MTYPE_FLASH_PAGE (PROGMEM) */
      /* MTYPE_FLASH (alias) */
      _wAddr += Device_Descriptor.UPDI.prog_base;
    1312:	70 91 8f 60 	lds	r23, 0x608F	; 0x80608f <Device_Descriptor+0x1>
    1316:	c6 0e       	add	r12, r22
    1318:	d7 1e       	adc	r13, r23
write_flash():
    131a:	f1 2c       	mov	r15, r1
    131c:	e1 2c       	mov	r14, r1
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv0.cpp:85
    return true;
  }

  bool write_flash (uint16_t _wAddr, size_t _wLength) {
    D2PRINTF(" NVM_V0_ERWP=%04X\r\n", _wAddr);
    if (SYS::is_boundary_flash_page(_wAddr)) {
    131e:	c7 01       	movw	r24, r14
    1320:	b6 01       	movw	r22, r12
    1322:	d9 db       	rcall	.-2126   	; 0xad6 <SYS::is_boundary_flash_page(unsigned long)>
    1324:	88 23       	and	r24, r24
    1326:	19 f0       	breq	.+6      	; 0x132e <NVM::V0::write_memory()+0x14a>
    1328:	8c de       	rcall	.-744    	; 0x1042 <NVM::V0::nvm_wait()>
    132a:	84 e0       	ldi	r24, 0x04	; 4
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv0.cpp:86
      nvm_wait();
    132c:	36 da       	rcall	.-2964   	; 0x79a <UPDI::nvm_ctrl(unsigned char)>
    132e:	89 de       	rcall	.-750    	; 0x1042 <NVM::V0::nvm_wait()>
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv0.cpp:87
      UPDI::nvm_ctrl(0x04);       /* NVM_CMD_PBC */
    1330:	a8 01       	movw	r20, r16
    1332:	c7 01       	movw	r24, r14
    1334:	b6 01       	movw	r22, r12
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv0.cpp:89
    }
    nvm_wait();
    1336:	e2 cf       	rjmp	.-60     	; 0x12fc <NVM::V0::write_memory()+0x118>
    1338:	83 e0       	ldi	r24, 0x03	; 3
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv0.cpp:91
    return (
      UPDI::send_bytes_block(_wAddr, _wLength)
    133a:	2f da       	rcall	.-2978   	; 0x79a <UPDI::nvm_ctrl(unsigned char)>
    133c:	88 23       	and	r24, r24
    133e:	09 f3       	breq	.-62     	; 0x1302 <NVM::V0::write_memory()+0x11e>
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv0.cpp:92
      && UPDI::nvm_ctrl(0x03)     /* NVM_CMD_ERWP */
    1340:	80 de       	rcall	.-768    	; 0x1042 <NVM::V0::nvm_wait()>
    1342:	87 70       	andi	r24, 0x07	; 7
    1344:	91 e0       	ldi	r25, 0x01	; 1
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv0.cpp:93
      && (nvm_wait() & 7) == 0
    1346:	e9 f6       	brne	.-70     	; 0x1302 <NVM::V0::write_memory()+0x11e>
write_memory():
    1348:	89 2f       	mov	r24, r25
    134a:	61 cf       	rjmp	.-318    	; 0x120e <NVM::V0::write_memory()+0x2a>
    134c:	c7 01       	movw	r24, r14
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv0.cpp:162
    }
    else if (m_type == 0xB0 || m_type == 0xC0) {
      /* MTYPE_FLASH_PAGE (PROGMEM) */
      /* MTYPE_FLASH (alias) */
      _wAddr += Device_Descriptor.UPDI.prog_base;
      return write_flash(_wAddr, _wLength);
    134e:	b6 01       	movw	r22, r12
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv0.cpp:166
    }
    else {
      /* MTYPE_SRAM */
      return UPDI::send_bytes_block(_wAddr, _wLength);
    1350:	88 27       	eor	r24, r24
    1352:	99 27       	eor	r25, r25
    1354:	a8 01       	movw	r20, r16
    1356:	58 d9       	rcall	.-3408   	; 0x608 <UPDI::send_bytes_block(unsigned long, unsigned int)>
    1358:	5a cf       	rjmp	.-332    	; 0x120e <NVM::V0::write_memory()+0x2a>

0000135a <USB::setup_device(bool) [clone .part.2]>:
_ZN3USB12setup_deviceEb.part.2():
    135a:	cf 93       	push	r28
    135c:	df 93       	push	r29
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:234
    EP_MEM.cci_header.wIndex        = 1;    /* Interface#1 */
    EP_MEM.cci_header.wLength       = 2;
    EP_MEM.cci_wValue               = _state;
  }

  void setup_device (bool _force) {
    135e:	c0 e0       	ldi	r28, 0x00	; 0
    1360:	dc e0       	ldi	r29, 0x0C	; 12
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:238
    if (_led_mode != 3) SYS::LED_Flash();
    USB0_ADDR = 0;
    if (USB0_CTRLA || _force) {
      USB0_CTRLA = 0;
    1362:	18 82       	st	Y, r1
    1364:	10 92 04 0c 	sts	0x0C04, r1	; 0x800c04 <__TEXT_REGION_LENGTH__+0x7f0c04>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:239
      USB0_FIFOWP = 0;
    1368:	8e e2       	ldi	r24, 0x2E	; 46
    136a:	94 e6       	ldi	r25, 0x64	; 100
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:240
      USB0_EPPTR = (uint16_t)&EP_TABLE.EP;
    136c:	80 93 06 0c 	sts	0x0C06, r24	; 0x800c06 <__TEXT_REGION_LENGTH__+0x7f0c06>
    1370:	90 93 07 0c 	sts	0x0C07, r25	; 0x800c07 <__TEXT_REGION_LENGTH__+0x7f0c07>
    1374:	81 e0       	ldi	r24, 0x01	; 1
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:241
      USB0_CTRLB = USB_ATTACH_bm;
    1376:	80 93 01 0c 	sts	0x0C01, r24	; 0x800c01 <__TEXT_REGION_LENGTH__+0x7f0c01>
    137a:	1c ba       	out	0x1c, r1	; 28
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:242
      GPCONF = 0;
    137c:	1d ba       	out	0x1d, r1	; 29
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:243
      PGCONF = 0;
    137e:	1e ba       	out	0x1e, r1	; 30
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:244
      RXSTAT = 0;
    1380:	10 92 23 64 	sts	0x6423, r1	; 0x806423 <_send_break>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:245
      _send_break = 0;
    1384:	10 92 24 64 	sts	0x6424, r1	; 0x806424 <_send_break+0x1>
    1388:	10 92 22 64 	sts	0x6422, r1	; 0x806422 <_send_count>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:246
      _send_count = 0;
    138c:	10 92 21 64 	sts	0x6421, r1	; 0x806421 <_recv_count>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:248
      _recv_count = 0;
      _set_config = 0;
    1390:	10 92 20 64 	sts	0x6420, r1	; 0x806420 <_set_config>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:249
      _sof_count = 0;
    1394:	10 92 1f 64 	sts	0x641F, r1	; 0x80641f <_sof_count>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:250
      memcpy_P(&EP_TABLE, &ep_init, sizeof(EP_TABLE_t));
    1398:	4a e4       	ldi	r20, 0x4A	; 74
    139a:	50 e0       	ldi	r21, 0x00	; 0
    139c:	61 ed       	ldi	r22, 0xD1	; 209
    139e:	71 e0       	ldi	r23, 0x01	; 1
    13a0:	86 e2       	ldi	r24, 0x26	; 38
    13a2:	94 e6       	ldi	r25, 0x64	; 100
    13a4:	0e 94 35 15 	call	0x2a6a	; 0x2a6a <memcpy_P>
set_cci_data():
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:225
    if (_size) memcpy_P(_buffer, _pgmem, _size);
    return _size;
  }

  void set_cci_data (uint16_t _state) {
    _set_serial_state = _state;
    13a8:	10 92 1e 64 	sts	0x641E, r1	; 0x80641e <_set_serial_state>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:226
    EP_MEM.cci_header.bmRequestType = 0xA1; /* REQTYPE_DIRECTION | REQTYPE_CLASS | RECIPIENT_INTERFACE */
    13ac:	e6 e0       	ldi	r30, 0x06	; 6
    13ae:	f3 e6       	ldi	r31, 0x63	; 99
    13b0:	81 ea       	ldi	r24, 0xA1	; 161
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:227
    EP_MEM.cci_header.bRequest      = 0x20; /* CDC_REQ_SerialState */
    13b2:	80 87       	std	Z+8, r24	; 0x08
    13b4:	80 e2       	ldi	r24, 0x20	; 32
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:228
    EP_MEM.cci_header.wValue        = 0;
    13b6:	81 87       	std	Z+9, r24	; 0x09
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:229
    EP_MEM.cci_header.wIndex        = 1;    /* Interface#1 */
    13b8:	12 86       	std	Z+10, r1	; 0x0a
    13ba:	13 86       	std	Z+11, r1	; 0x0b
    13bc:	81 e0       	ldi	r24, 0x01	; 1
    13be:	90 e0       	ldi	r25, 0x00	; 0
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:230
    EP_MEM.cci_header.wLength       = 2;
    13c0:	84 87       	std	Z+12, r24	; 0x0c
    13c2:	95 87       	std	Z+13, r25	; 0x0d
    13c4:	82 e0       	ldi	r24, 0x02	; 2
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:231
    EP_MEM.cci_wValue               = _state;
    13c6:	90 e0       	ldi	r25, 0x00	; 0
    13c8:	86 87       	std	Z+14, r24	; 0x0e
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:252
      _recv_count = 0;
      _set_config = 0;
      _sof_count = 0;
      memcpy_P(&EP_TABLE, &ep_init, sizeof(EP_TABLE_t));
      set_cci_data(0x00);
      USB0_CTRLA = USB_ENABLE_bm | (USB_ENDPOINTS_MAX - 1);
    13ca:	97 87       	std	Z+15, r25	; 0x0f
    13cc:	10 8a       	std	Z+16, r1	; 0x10
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:254
    }
  }
    13ce:	11 8a       	std	Z+17, r1	; 0x11
_ZN3USB12setup_deviceEb.part.2():
    13d0:	83 e8       	ldi	r24, 0x83	; 131
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/modernAVR/0.2.14/cores/modernAVR/api/delay_busywait.h:33
static __inline__ __attribute__((__always_inline__)) void delay_micros (uint32_t _us);
static __inline__ __attribute__((__always_inline__)) void delay_millis (uint32_t _ms);

void delay_micros (uint32_t _us) {
  if (F_CPU >= 1000000L) {
    __builtin_avr_delay_cycles((F_CPU / 1000000L) * _us);
    13d2:	88 83       	st	Y, r24
    13d4:	df 91       	pop	r29
    13d6:	cf 91       	pop	r28
    13d8:	08 95       	ret

000013da <USART::disable_vcp()>:
delay_micros():
/Users/askn/Collaborator/UPDI4AVR-USB/src/usart.cpp:55
  /*** Stop the VCP and release the ports in use. ***/
  void disable_vcp (void) {
    D1PRINTF(" UART=OFF\r\n");
    /* Allow time to move USART0_TXDATA */
    delay_micros(4);
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    13da:	8a e1       	ldi	r24, 0x1A	; 26
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/tools/avr-gcc/7.3.0-avr8-gnu-toolchain/avr/include/util/atomic.h:50
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    13dc:	8a 95       	dec	r24
/Users/askn/Collaborator/UPDI4AVR-USB/src/usart.cpp:58
      /* Simply clearing the CTRLB does not disable the USART completely.                    */
      /* This errata is not documented for the AVR-DU, but is the same as for tinyAVR-0 etc. */
      USART0_CTRLB = 0;
    13de:	f1 f7       	brne	.-4      	; 0x13dc <USART::disable_vcp()+0x2>
    13e0:	00 c0       	rjmp	.+0      	; 0x13e2 <USART::disable_vcp()+0x8>
disable_vcp():
/Users/askn/Collaborator/UPDI4AVR-USB/src/usart.cpp:59
      USART0_CTRLA = 0;
    13e2:	8f b7       	in	r24, 0x3f	; 63
__iCliRetVal():
    13e4:	f8 94       	cli
disable_vcp():
/Users/askn/Collaborator/UPDI4AVR-USB/src/usart.cpp:60
      RXSTAT = 0;
    13e6:	10 92 06 08 	sts	0x0806, r1	; 0x800806 <__TEXT_REGION_LENGTH__+0x7f0806>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usart.cpp:62
      RXDATA = 0;
      PGCONF = 0;
    13ea:	10 92 05 08 	sts	0x0805, r1	; 0x800805 <__TEXT_REGION_LENGTH__+0x7f0805>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usart.cpp:63
      PORTMUX_USARTROUTEA = PORTMUX_USART_VCP;
    13ee:	1e ba       	out	0x1e, r1	; 30
    13f0:	1f ba       	out	0x1f, r1	; 31
/Users/askn/Collaborator/UPDI4AVR-USB/src/usart.cpp:64
      bit_clear(GPCONF, GPCONF_VCP_bp);
    13f2:	1d ba       	out	0x1d, r1	; 29
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/tools/avr-gcc/7.3.0-avr8-gnu-toolchain/avr/include/util/atomic.h:70
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    13f4:	92 e1       	ldi	r25, 0x12	; 18
/Users/askn/Collaborator/UPDI4AVR-USB/src/usart.cpp:66
    }
    pinModeMacro(PIN_PG_TDAT, INPUT_PULLUP);  /* open-drain */
    13f6:	90 93 e2 05 	sts	0x05E2, r25	; 0x8005e2 <__TEXT_REGION_LENGTH__+0x7f05e2>
    13fa:	e1 98       	cbi	0x1c, 1	; 28
__iRestore():
    13fc:	8f bf       	out	0x3f, r24	; 63
disable_vcp():
/Users/askn/Collaborator/UPDI4AVR-USB/src/usart.cpp:70
    /* TXD changes to INPUT when USART is disabled. */
    /* Force OUTPUT to maintain BREAK state.        */
  #ifdef CONFIG_VCP_TXD_ODM
    pinModeMacro(PIN_VCP_TXD, INPUT_PULLUP);  /* open-drain */
    13fe:	00 98       	cbi	0x00, 0	; 0
    1400:	88 e0       	ldi	r24, 0x08	; 8
/Users/askn/Collaborator/UPDI4AVR-USB/src/usart.cpp:71
    openDrainWriteMacro(PIN_VCP_TXD, HIGH);
    1402:	80 93 10 04 	sts	0x0410, r24	; 0x800410 <__TEXT_REGION_LENGTH__+0x7f0410>
/Users/askn/Collaborator/UPDI4AVR-USB/src/sys.cpp:180

  void LED_TCB1 (uint8_t _mode, uint16_t _ccmp) {
    if (_led_mode != _mode) {
    1406:	02 98       	cbi	0x00, 2	; 0
    1408:	80 93 12 04 	sts	0x0412, r24	; 0x800412 <__TEXT_REGION_LENGTH__+0x7f0412>
/Users/askn/Collaborator/UPDI4AVR-USB/src/sys.cpp:181
      TCA0_SPLIT_CTRLA = 0;
    140c:	02 98       	cbi	0x00, 2	; 0
    140e:	08 95       	ret

00001410 <USART::setup()>:
LED_TCB1():
/Users/askn/Collaborator/UPDI4AVR-USB/src/sys.cpp:182
      TCB1_CNTL = 0;
    1410:	80 91 7d 60 	lds	r24, 0x607D	; 0x80607d <_led_mode>
/Users/askn/Collaborator/UPDI4AVR-USB/src/sys.cpp:183
      TCB1_CCMP = _ccmp;
    1414:	84 30       	cpi	r24, 0x04	; 4
    1416:	81 f0       	breq	.+32     	; 0x1438 <USART::setup()+0x28>
    1418:	10 92 00 0a 	sts	0x0A00, r1	; 0x800a00 <__TEXT_REGION_LENGTH__+0x7f0a00>
/Users/askn/Collaborator/UPDI4AVR-USB/src/sys.cpp:184
      TCB1_CTRLA = TCB_RUNSTDBY_bm | TCB_ENABLE_bm | TCB_CLKSEL_EVENT_gc;
    141c:	10 92 1a 0b 	sts	0x0B1A, r1	; 0x800b1a <__TEXT_REGION_LENGTH__+0x7f0b1a>
    1420:	82 e2       	ldi	r24, 0x22	; 34
/Users/askn/Collaborator/UPDI4AVR-USB/src/sys.cpp:185
      _led_mode = _mode;
    1422:	91 e1       	ldi	r25, 0x11	; 17
    1424:	80 93 1c 0b 	sts	0x0B1C, r24	; 0x800b1c <__TEXT_REGION_LENGTH__+0x7f0b1c>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usart.cpp:26

namespace USART {

  void setup (void) {
    SYS::LED_Fast();
    disable_vcp();
    1428:	90 93 1d 0b 	sts	0x0B1D, r25	; 0x800b1d <__TEXT_REGION_LENGTH__+0x7f0b1d>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usart.cpp:27
    pinModeMacro(PIN_VCP_RXD, INPUT_PULLUP);  /* USART0_DEFAULT or USART0_ALT2 */
    142c:	8f e4       	ldi	r24, 0x4F	; 79
    142e:	80 93 10 0b 	sts	0x0B10, r24	; 0x800b10 <__TEXT_REGION_LENGTH__+0x7f0b10>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usart.cpp:28
    pinModeMacro(PIN_PG_TRST, INPUT_PULLUP);  /* USART0_ALT3 or USART0_DEFAULT */
    1432:	84 e0       	ldi	r24, 0x04	; 4
    1434:	80 93 7d 60 	sts	0x607D, r24	; 0x80607d <_led_mode>
setup():
/Users/askn/Collaborator/UPDI4AVR-USB/src/usart.cpp:29
  }
    1438:	d0 df       	rcall	.-96     	; 0x13da <USART::disable_vcp()>
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:243
    D1PRINTF(" KEY=%02X\r\n", RXDATA);
    return sys_reset(false);
  }

  bool chip_erase (void) {
    bit_set(PGCONF, PGCONF_FAIL_bp);
    143a:	03 98       	cbi	0x00, 3	; 0
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:244
    bit_set(PGCONF, PGCONF_ERSE_bp);
    143c:	88 e0       	ldi	r24, 0x08	; 8
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:245
    USART::drain();
    143e:	80 93 13 04 	sts	0x0413, r24	; 0x800413 <__TEXT_REGION_LENGTH__+0x7f0413>
    1442:	01 98       	cbi	0x00, 1	; 0
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:226
    D1PRINTF(" KEY=%02X\r\n", RXDATA);
    return _reset ? sys_reset(false) : true;
  }

  bool set_erase_key (void) {
    if (bit_is_clear(PGCONF, PGCONF_PROG_bp)) set_nvmprog_key(false);
    1444:	80 93 11 04 	sts	0x0411, r24	; 0x800411 <__TEXT_REGION_LENGTH__+0x7f0411>
    1448:	08 95       	ret

0000144a <UPDI::chip_erase()>:
chip_erase():
    144a:	ef 9a       	sbi	0x1d, 7	; 29
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:228
    D1PRINTF(" ERASE_KEY\r\n");
    if (!send_bytes(erase_key, sizeof(erase_key))) return false;
    144c:	ea 9a       	sbi	0x1d, 2	; 29
    144e:	90 e0       	ldi	r25, 0x00	; 0
    1450:	80 e0       	ldi	r24, 0x00	; 0
    1452:	0e 94 de 01 	call	0x3bc	; 0x3bc <USART::drain(unsigned int)>
set_erase_key():
    1456:	e9 99       	sbic	0x1d, 1	; 29
    1458:	02 c0       	rjmp	.+4      	; 0x145e <UPDI::chip_erase()+0x14>
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:261
      do { sys_status(); } while(bit_is_clear(RXDATA, 3));  /* wait set PROGSTART */
    }
    D1PRINTF(" PROGSTART=%02X\r\n", RXDATA);
    bit_set(PGCONF, PGCONF_PROG_bp);
    bit_clear(PGCONF, PGCONF_FAIL_bp);
    return (*Command_Table.prog_init)();
    145a:	80 e0       	ldi	r24, 0x00	; 0
    145c:	4b d8       	rcall	.-3946   	; 0x4f4 <UPDI::set_nvmprog_key(bool)>
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:229

  bool set_erase_key (void) {
    if (bit_is_clear(PGCONF, PGCONF_PROG_bp)) set_nvmprog_key(false);
    D1PRINTF(" ERASE_KEY\r\n");
    if (!send_bytes(erase_key, sizeof(erase_key))) return false;
    do { key_status(); } while(bit_is_clear(RXDATA, 3));  /* wait set CHIPERASE */
    145e:	6a e0       	ldi	r22, 0x0A	; 10
    1460:	70 e0       	ldi	r23, 0x00	; 0
    1462:	8d e4       	ldi	r24, 0x4D	; 77
    1464:	90 e6       	ldi	r25, 0x60	; 96
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:130
    const static uint8_t _reset[] = {
      0x55, 0xC8, 0x59, /* SYSRST */
      0x55, 0xC8, 0x00, /* SYSRUN */
      0x55, 0xC3, 0x04  /* UPDIDIS */
    };
    return send_bytes(_reset, _leave ? 9 : 6);
    1466:	21 d8       	rcall	.-4030   	; 0x4aa <UPDI::send_bytes(unsigned char const*, unsigned int)>
    1468:	81 11       	cpse	r24, r1
    146a:	02 c0       	rjmp	.+4      	; 0x1470 <UPDI::chip_erase()+0x26>
chip_erase():
    146c:	20 e0       	ldi	r18, 0x00	; 0
    146e:	34 c0       	rjmp	.+104    	; 0x14d8 <UPDI::chip_erase()+0x8e>
set_erase_key():
    1470:	38 d8       	rcall	.-3984   	; 0x4e2 <UPDI::key_status()>
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:246

  bool chip_erase (void) {
    bit_set(PGCONF, PGCONF_FAIL_bp);
    bit_set(PGCONF, PGCONF_ERSE_bp);
    USART::drain();
    if (!set_erase_key()) return false;
    1472:	fb 9b       	sbis	0x1f, 3	; 31
    1474:	fd cf       	rjmp	.-6      	; 0x1470 <UPDI::chip_erase()+0x26>
sys_reset():
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/modernAVR/0.2.14/cores/modernAVR/api/delay_busywait.h:42
  }
}

void delay_millis (uint32_t _ms) {
  if (F_CPU >= 1000000L) {
    __builtin_avr_delay_cycles((F_CPU / 1000L) * _ms);
    1476:	66 e0       	ldi	r22, 0x06	; 6
    1478:	70 e0       	ldi	r23, 0x00	; 0
    147a:	82 e7       	ldi	r24, 0x72	; 114
    147c:	90 e6       	ldi	r25, 0x60	; 96
    147e:	15 d8       	rcall	.-4054   	; 0x4aa <UPDI::send_bytes(unsigned char const*, unsigned int)>
chip_erase():
    1480:	88 23       	and	r24, r24
    1482:	a1 f3       	breq	.-24     	; 0x146c <UPDI::chip_erase()+0x22>
delay_millis():
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:248
    delay_millis(200);
    USART::drain();
    1484:	2f ef       	ldi	r18, 0xFF	; 255
    1486:	84 e3       	ldi	r24, 0x34	; 52
    1488:	9c e0       	ldi	r25, 0x0C	; 12
    148a:	21 50       	subi	r18, 0x01	; 1
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:249
    do { sys_status(); } while(bit_is_set(RXDATA, 5));    /* wait clear RSTSYS */
    148c:	80 40       	sbci	r24, 0x00	; 0
    148e:	90 40       	sbci	r25, 0x00	; 0
    1490:	e1 f7       	brne	.-8      	; 0x148a <UPDI::chip_erase()+0x40>
    1492:	00 c0       	rjmp	.+0      	; 0x1494 <UPDI::chip_erase()+0x4a>
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:250
    do { sys_status(); } while(bit_is_set(RXDATA, 0));    /* wait clear LOCKSTATUS */
    1494:	00 00       	nop
chip_erase():
    1496:	90 e0       	ldi	r25, 0x00	; 0
    1498:	80 e0       	ldi	r24, 0x00	; 0
    149a:	0e 94 de 01 	call	0x3bc	; 0x3bc <USART::drain(unsigned int)>
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:252
    D1PRINTF(" <SYS:%02X>\r\n", RXDATA);
    do { key_status(); } while(bit_is_set(RXDATA, 3));    /* wait clear CHIPERASE */
    149e:	18 d8       	rcall	.-4048   	; 0x4d0 <UPDI::sys_status()>
    14a0:	fd 99       	sbic	0x1f, 5	; 31
    14a2:	fd cf       	rjmp	.-6      	; 0x149e <UPDI::chip_erase()+0x54>
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:253
    sys_status();
    14a4:	15 d8       	rcall	.-4054   	; 0x4d0 <UPDI::sys_status()>
    14a6:	f8 99       	sbic	0x1f, 0	; 31
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:254
    if (bit_is_clear(RXDATA, 3)) {
    14a8:	fd cf       	rjmp	.-6      	; 0x14a4 <UPDI::chip_erase()+0x5a>
    14aa:	1b d8       	rcall	.-4042   	; 0x4e2 <UPDI::key_status()>
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:255
      if (!set_nvmprog_key()) return false;
    14ac:	fb 99       	sbic	0x1f, 3	; 31
    14ae:	fd cf       	rjmp	.-6      	; 0x14aa <UPDI::chip_erase()+0x60>
    14b0:	0f d8       	rcall	.-4066   	; 0x4d0 <UPDI::sys_status()>
    14b2:	fb 99       	sbic	0x1f, 3	; 31
    14b4:	07 c0       	rjmp	.+14     	; 0x14c4 <UPDI::chip_erase()+0x7a>
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:256
      do { sys_status(); } while(bit_is_clear(RXDATA, 3));  /* wait set PROGSTART */
    14b6:	81 e0       	ldi	r24, 0x01	; 1
    14b8:	1d d8       	rcall	.-4038   	; 0x4f4 <UPDI::set_nvmprog_key(bool)>
    14ba:	88 23       	and	r24, r24
    14bc:	b9 f2       	breq	.-82     	; 0x146c <UPDI::chip_erase()+0x22>
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:259
    }
    D1PRINTF(" PROGSTART=%02X\r\n", RXDATA);
    bit_set(PGCONF, PGCONF_PROG_bp);
    14be:	08 d8       	rcall	.-4080   	; 0x4d0 <UPDI::sys_status()>
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:260
    bit_clear(PGCONF, PGCONF_FAIL_bp);
    14c0:	fb 9b       	sbis	0x1f, 3	; 31
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:261
    return (*Command_Table.prog_init)();
    14c2:	fd cf       	rjmp	.-6      	; 0x14be <UPDI::chip_erase()+0x74>
    14c4:	e9 9a       	sbi	0x1d, 1	; 29
    14c6:	ef 98       	cbi	0x1d, 7	; 29
    14c8:	e0 91 fe 62 	lds	r30, 0x62FE	; 0x8062fe <Command_Table>
    14cc:	f0 91 ff 62 	lds	r31, 0x62FF	; 0x8062ff <Command_Table+0x1>
    14d0:	09 95       	icall
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:262
  }
    14d2:	21 e0       	ldi	r18, 0x01	; 1
    14d4:	89 2b       	or	r24, r25
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv4.cpp:140
    }
    return 0;
  }

  size_t erase_memory (void) {
    uint8_t e_type = packet.out.bEType;
    14d6:	51 f2       	breq	.-108    	; 0x146c <UPDI::chip_erase()+0x22>
    14d8:	82 2f       	mov	r24, r18
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv4.cpp:141
    if (e_type == 0x00) {
    14da:	08 95       	ret

000014dc <NVM::V4::erase_memory()>:
erase_memory():
    14dc:	80 91 c5 60 	lds	r24, 0x60C5	; 0x8060c5 <packet+0x7>
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv4.cpp:143
      /* XMEGA_ERASE_CHIP */
      return UPDI::chip_erase();
    14e0:	81 11       	cpse	r24, r1
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv4.cpp:150
    else {
      /* NOTE: AVRDUDE<=7.3 may pass the wrong M_TYPE. */
      /* For safety, only USERROW and BOOTROW are allowed to erase pages. */
      if (e_type == 0x07) {
        /* XMEGA_ERASE_USERSIG */
        return erase_flash_page(packet.out.dwAddr);
    14e2:	03 c0       	rjmp	.+6      	; 0x14ea <NVM::V4::erase_memory()+0xe>
    14e4:	b2 df       	rcall	.-156    	; 0x144a <UPDI::chip_erase()>
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv4.cpp:148
      return UPDI::chip_erase();
    }
    else {
      /* NOTE: AVRDUDE<=7.3 may pass the wrong M_TYPE. */
      /* For safety, only USERROW and BOOTROW are allowed to erase pages. */
      if (e_type == 0x07) {
    14e6:	90 e0       	ldi	r25, 0x00	; 0
    14e8:	08 95       	ret
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv4.cpp:150
        /* XMEGA_ERASE_USERSIG */
        return erase_flash_page(packet.out.dwAddr);
    14ea:	87 30       	cpi	r24, 0x07	; 7
    14ec:	51 f4       	brne	.+20     	; 0x1502 <NVM::V4::erase_memory()+0x26>
    14ee:	60 91 c6 60 	lds	r22, 0x60C6	; 0x8060c6 <packet+0x8>
    14f2:	70 91 c7 60 	lds	r23, 0x60C7	; 0x8060c7 <packet+0x9>
    14f6:	80 91 c8 60 	lds	r24, 0x60C8	; 0x8060c8 <packet+0xa>
    14fa:	90 91 c9 60 	lds	r25, 0x60C9	; 0x8060c9 <packet+0xb>
    14fe:	ba dc       	rcall	.-1676   	; 0xe74 <NVM::V4::erase_flash_page(unsigned long)>
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv4.cpp:155
      }
    }
    /* Page erase will not be used if received. */
    /* Instead, page erase is determined by the is_boundary_flash_page function. */
    return 1;
    1500:	f2 cf       	rjmp	.-28     	; 0x14e6 <NVM::V4::erase_memory()+0xa>
    1502:	81 e0       	ldi	r24, 0x01	; 1
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv4.cpp:156
  }
    1504:	90 e0       	ldi	r25, 0x00	; 0
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv2.cpp:137
    }
    return 0;
  }

  size_t erase_memory (void) {
    uint8_t e_type = packet.out.bEType;
    1506:	08 95       	ret

00001508 <NVM::V2::erase_memory()>:
    1508:	80 91 c5 60 	lds	r24, 0x60C5	; 0x8060c5 <packet+0x7>
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv2.cpp:138
    if (e_type == 0x00) {
    150c:	81 11       	cpse	r24, r1
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv2.cpp:140
      /* XMEGA_ERASE_CHIP */
      return UPDI::chip_erase();
    150e:	03 c0       	rjmp	.+6      	; 0x1516 <NVM::V2::erase_memory()+0xe>
    1510:	9c df       	rcall	.-200    	; 0x144a <UPDI::chip_erase()>
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv2.cpp:147
    else {
      /* NOTE: AVRDUDE<=7.3 may pass the wrong M_TYPE. */
      /* For safety, only USERROW and BOOTROW are allowed to erase pages. */
      if (e_type == 0x07) {
        /* XMEGA_ERASE_USERSIG */
        return erase_flash_page(packet.out.dwAddr);
    1512:	90 e0       	ldi	r25, 0x00	; 0
    1514:	08 95       	ret
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv2.cpp:145
      return UPDI::chip_erase();
    }
    else {
      /* NOTE: AVRDUDE<=7.3 may pass the wrong M_TYPE. */
      /* For safety, only USERROW and BOOTROW are allowed to erase pages. */
      if (e_type == 0x07) {
    1516:	87 30       	cpi	r24, 0x07	; 7
    1518:	51 f4       	brne	.+20     	; 0x152e <NVM::V2::erase_memory()+0x26>
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv2.cpp:147
        /* XMEGA_ERASE_USERSIG */
        return erase_flash_page(packet.out.dwAddr);
    151a:	60 91 c6 60 	lds	r22, 0x60C6	; 0x8060c6 <packet+0x8>
    151e:	70 91 c7 60 	lds	r23, 0x60C7	; 0x8060c7 <packet+0x9>
    1522:	80 91 c8 60 	lds	r24, 0x60C8	; 0x8060c8 <packet+0xa>
    1526:	90 91 c9 60 	lds	r25, 0x60C9	; 0x8060c9 <packet+0xb>
    152a:	bc dd       	rcall	.-1160   	; 0x10a4 <NVM::V2::erase_flash_page(unsigned long)>
    152c:	f2 cf       	rjmp	.-28     	; 0x1512 <NVM::V2::erase_memory()+0xa>
    152e:	81 e0       	ldi	r24, 0x01	; 1
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv2.cpp:152
      }
    }
    /* Page erase will not be used if received. */
    /* Instead, page erase is determined by the is_boundary_flash_page function. */
    return 1;
    1530:	90 e0       	ldi	r25, 0x00	; 0
    1532:	08 95       	ret

00001534 <NVM::V0::erase_memory()>:
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv2.cpp:153
  }
    1534:	80 91 c5 60 	lds	r24, 0x60C5	; 0x8060c5 <packet+0x7>
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv0.cpp:134
    return 0;
  }

  size_t erase_memory (void) {
    uint8_t e_type = packet.out.bEType;
    if (e_type == 0x00) {
    1538:	81 11       	cpse	r24, r1
    153a:	03 c0       	rjmp	.+6      	; 0x1542 <NVM::V0::erase_memory()+0xe>
    153c:	86 df       	rcall	.-244    	; 0x144a <UPDI::chip_erase()>
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv0.cpp:136
      /* XMEGA_ERASE_CHIP */
      return UPDI::chip_erase();
    153e:	90 e0       	ldi	r25, 0x00	; 0
    1540:	08 95       	ret
    1542:	81 e0       	ldi	r24, 0x01	; 1
    1544:	90 e0       	ldi	r25, 0x00	; 0
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv0.cpp:139
    }
    /* Page erase will not be used if received. */
    return 1;
    1546:	08 95       	ret

00001548 <NVM::V5::erase_memory()>:
_ZN3NVM2V512erase_memoryEv():
    1548:	f5 cf       	rjmp	.-22     	; 0x1534 <NVM::V0::erase_memory()>

0000154a <NVM::V3::erase_memory()>:
_ZN3NVM2V312erase_memoryEv():
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv0.cpp:140
  }
    154a:	f4 cf       	rjmp	.-24     	; 0x1534 <NVM::V0::erase_memory()>

0000154c <TPI::connect()>:
connect():
    154c:	ef 92       	push	r14
    154e:	ff 92       	push	r15
    1550:	0f 93       	push	r16
    1552:	1f 93       	push	r17
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:211
    return nvm_ctrl(0x00);
  }

  /*** Application ****/

  size_t connect (void) {
    1554:	cf 93       	push	r28
    1556:	df 93       	push	r29
    1558:	00 d0       	rcall	.+0      	; 0x155a <TPI::connect()+0xe>
    155a:	cd b7       	in	r28, 0x3d	; 61
    155c:	de b7       	in	r29, 0x3e	; 62
    155e:	80 e8       	ldi	r24, 0x80	; 128
    1560:	8d bb       	out	0x1d, r24	; 29
    1562:	02 9a       	sbi	0x00, 2	; 0
    1564:	01 9a       	sbi	0x00, 1	; 0
delay_millis():
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:212
    PGCONF = PGCONF_FAIL_bm;
    1566:	2f ef       	ldi	r18, 0xFF	; 255
    1568:	84 e3       	ldi	r24, 0x34	; 52
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:223
    }

    /*** Enter RESET (normal programing) ***/
    /* Do not drive TCLK and take TRST LOW.           */
    /* TRST remains LOW until program mode is exited. */
    openDrainWriteMacro(PIN_VCP_TXD, LOW);
    156a:	9c e0       	ldi	r25, 0x0C	; 12
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:224
    openDrainWriteMacro(PIN_PG_TRST, LOW);
    156c:	21 50       	subi	r18, 0x01	; 1
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/modernAVR/0.2.14/cores/modernAVR/api/delay_busywait.h:42
    156e:	80 40       	sbci	r24, 0x00	; 0
    1570:	90 40       	sbci	r25, 0x00	; 0
    1572:	e1 f7       	brne	.-8      	; 0x156c <TPI::connect()+0x20>
    1574:	00 c0       	rjmp	.+0      	; 0x1576 <TPI::connect()+0x2a>
    1576:	00 00       	nop
set_sstcs():
    1578:	82 ec       	ldi	r24, 0xC2	; 194
    157a:	4a da       	rcall	.-2924   	; 0xa10 <TPI::send(unsigned char)>
    157c:	81 11       	cpse	r24, r1
    157e:	03 c0       	rjmp	.+6      	; 0x1586 <TPI::connect()+0x3a>
connect():
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:69
  bool get_sldcs (const uint8_t _addr) {
    return (send(0x80 | _addr) && recv());
  }

  bool set_sstcs (const uint8_t _addr, const uint8_t _data) {
    return (send(0xC0 | _addr) && send(_data));
    1580:	90 e0       	ldi	r25, 0x00	; 0
    1582:	80 e0       	ldi	r24, 0x00	; 0
    1584:	50 c0       	rjmp	.+160    	; 0x1626 <TPI::connect()+0xda>
set_sstcs():
    1586:	85 e0       	ldi	r24, 0x05	; 5
    1588:	43 da       	rcall	.-2938   	; 0xa10 <TPI::send(unsigned char)>
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:248

    while (!(get_sldcs(0x00) && RXDATA == 0x02)) {  /* get TPISR */
      D1PRINTF(" SKEY\r\n");
      for (uint8_t i = 0; i < (uint8_t)sizeof(nvmprog_key); i++) {
        if (!send(nvmprog_key[i])) {
          return 0;
    158a:	88 23       	and	r24, r24
    158c:	c9 f3       	breq	.-14     	; 0x1580 <TPI::connect()+0x34>
get_sldcs():
    158e:	8f e8       	ldi	r24, 0x8F	; 143
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:69
  bool get_sldcs (const uint8_t _addr) {
    return (send(0x80 | _addr) && recv());
  }

  bool set_sstcs (const uint8_t _addr, const uint8_t _data) {
    return (send(0xC0 | _addr) && send(_data));
    1590:	3f da       	rcall	.-2946   	; 0xa10 <TPI::send(unsigned char)>
    1592:	88 23       	and	r24, r24
    1594:	e1 f3       	breq	.-8      	; 0x158e <TPI::connect()+0x42>
    1596:	2c da       	rcall	.-2984   	; 0x9f0 <TPI::recv()>
    1598:	88 23       	and	r24, r24
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:65
  }

  /*** TPI control and CSS area command ***/

  bool get_sldcs (const uint8_t _addr) {
    return (send(0x80 | _addr) && recv());
    159a:	c9 f3       	breq	.-14     	; 0x158e <TPI::connect()+0x42>
connect():
    159c:	8f b3       	in	r24, 0x1f	; 31
    159e:	80 38       	cpi	r24, 0x80	; 128
    15a0:	b1 f7       	brne	.-20     	; 0x158e <TPI::connect()+0x42>
    15a2:	e8 9a       	sbi	0x1d, 0	; 29
    15a4:	89 e3       	ldi	r24, 0x39	; 57
    15a6:	e8 2e       	mov	r14, r24
    15a8:	80 e6       	ldi	r24, 0x60	; 96
    15aa:	f8 2e       	mov	r15, r24
get_sldcs():
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:237
    /*** Set TPIPCR Guard Time : 4 clock ****/
    if (!set_sstcs(0x02, 0x05)) return 0;
    D1PRINTF(" TPIPCR<05\r\n");

    /*** Check TPIIR code : Fixed 0x80 ***/
    while (!(get_sldcs(0x0F) && (RXDATA == 0x80)));
    15ac:	80 e8       	ldi	r24, 0x80	; 128
    15ae:	30 da       	rcall	.-2976   	; 0xa10 <TPI::send(unsigned char)>
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:240
    D1PRINTF(" TPIIR>%02X\r\n", RXDATA);

    bit_set(PGCONF, PGCONF_UPDI_bp);
    15b0:	88 23       	and	r24, r24
    15b2:	11 f1       	breq	.+68     	; 0x15f8 <TPI::connect()+0xac>
    15b4:	1d da       	rcall	.-3014   	; 0x9f0 <TPI::recv()>
    15b6:	88 23       	and	r24, r24
    15b8:	f9 f0       	breq	.+62     	; 0x15f8 <TPI::connect()+0xac>
connect():
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:65
  }

  /*** TPI control and CSS area command ***/

  bool get_sldcs (const uint8_t _addr) {
    return (send(0x80 | _addr) && recv());
    15ba:	8f b3       	in	r24, 0x1f	; 31
    15bc:	82 30       	cpi	r24, 0x02	; 2
    15be:	e1 f4       	brne	.+56     	; 0x15f8 <TPI::connect()+0xac>
    15c0:	19 82       	std	Y+1, r1	; 0x01
    15c2:	1a 82       	std	Y+2, r1	; 0x02
    15c4:	81 ec       	ldi	r24, 0xC1	; 193
    15c6:	9f e3       	ldi	r25, 0x3F	; 63
    15c8:	5e da       	rcall	.-2884   	; 0xa86 <TPI::set_sstpr(unsigned int)>
    15ca:	88 23       	and	r24, r24
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:244

    bit_set(PGCONF, PGCONF_UPDI_bp);

    /*** Activate NVMPROG mode ***/

    while (!(get_sldcs(0x00) && RXDATA == 0x02)) {  /* get TPISR */
    15cc:	99 f0       	breq	.+38     	; 0x15f4 <TPI::connect()+0xa8>
    15ce:	55 da       	rcall	.-2902   	; 0xa7a <TPI::get_sld()>
    15d0:	88 23       	and	r24, r24
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:267
     * Other is written in 1 word chunks.
     *
     * The original PICKit4 probably does the same thing,
     * since the JTAG3 protocol does not include these notifications.
     */
    uint16_t _signature = 0;
    15d2:	81 f0       	breq	.+32     	; 0x15f4 <TPI::connect()+0xa8>
    15d4:	8f b3       	in	r24, 0x1f	; 31
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:268
    if (set_sstpr(0x3FC1) && get_sld()) {
    15d6:	8a 83       	std	Y+2, r24	; 0x02
    15d8:	50 da       	rcall	.-2912   	; 0xa7a <TPI::get_sld()>
    15da:	88 23       	and	r24, r24
    15dc:	11 f0       	breq	.+4      	; 0x15e2 <TPI::connect()+0x96>
    15de:	8f b3       	in	r24, 0x1f	; 31
    15e0:	89 83       	std	Y+1, r24	; 0x01
    15e2:	89 81       	ldd	r24, Y+1	; 0x01
    15e4:	9a 81       	ldd	r25, Y+2	; 0x02
    15e6:	8e 30       	cpi	r24, 0x0E	; 14
    15e8:	f2 e9       	ldi	r31, 0x92	; 146
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:269
      _CAPS16(_signature)->bytes[1] = RXDATA;
    15ea:	9f 07       	cpc	r25, r31
    15ec:	a9 f0       	breq	.+42     	; 0x1618 <TPI::connect()+0xcc>
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:270
      if (get_sld()) _CAPS16(_signature)->bytes[0] = RXDATA;
    15ee:	8f 30       	cpi	r24, 0x0F	; 15
    15f0:	91 49       	sbci	r25, 0x91	; 145
    15f2:	11 f1       	breq	.+68     	; 0x1638 <TPI::connect()+0xec>
    15f4:	82 e0       	ldi	r24, 0x02	; 2
    15f6:	11 c0       	rjmp	.+34     	; 0x161a <TPI::connect()+0xce>
    15f8:	00 e3       	ldi	r16, 0x30	; 48
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:272
    }
    _tpi_chunks = _signature == 0x920E ? 8  /* ATtiny40 */
    15fa:	10 e6       	ldi	r17, 0x60	; 96
    15fc:	f8 01       	movw	r30, r16
    15fe:	81 91       	ld	r24, Z+
    1600:	8f 01       	movw	r16, r30
    1602:	06 da       	rcall	.-3060   	; 0xa10 <TPI::send(unsigned char)>
    1604:	88 23       	and	r24, r24
    1606:	09 f4       	brne	.+2      	; 0x160a <TPI::connect()+0xbe>
    1608:	bb cf       	rjmp	.-138    	; 0x1580 <TPI::connect()+0x34>
    160a:	84 e0       	ldi	r24, 0x04	; 4
    160c:	90 e0       	ldi	r25, 0x00	; 0
    160e:	53 da       	rcall	.-2906   	; 0xab6 <TPI::idle_clock(unsigned int)>
    1610:	e0 16       	cp	r14, r16
    1612:	f1 06       	cpc	r15, r17
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:247
    /*** Activate NVMPROG mode ***/

    while (!(get_sldcs(0x00) && RXDATA == 0x02)) {  /* get TPISR */
      D1PRINTF(" SKEY\r\n");
      for (uint8_t i = 0; i < (uint8_t)sizeof(nvmprog_key); i++) {
        if (!send(nvmprog_key[i])) {
    1614:	99 f7       	brne	.-26     	; 0x15fc <TPI::connect()+0xb0>
    1616:	ca cf       	rjmp	.-108    	; 0x15ac <TPI::connect()+0x60>
    1618:	88 e0       	ldi	r24, 0x08	; 8
    161a:	80 93 8d 60 	sts	0x608D, r24	; 0x80608d <_tpi_chunks>
    161e:	e8 9a       	sbi	0x1d, 0	; 29
    1620:	ef 98       	cbi	0x1d, 7	; 29
    1622:	81 e0       	ldi	r24, 0x01	; 1
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:250
          return 0;
        }
        idle_clock(4);
    1624:	90 e0       	ldi	r25, 0x00	; 0
    1626:	0f 90       	pop	r0
    1628:	0f 90       	pop	r0
    162a:	df 91       	pop	r29
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:246

    /*** Activate NVMPROG mode ***/

    while (!(get_sldcs(0x00) && RXDATA == 0x02)) {  /* get TPISR */
      D1PRINTF(" SKEY\r\n");
      for (uint8_t i = 0; i < (uint8_t)sizeof(nvmprog_key); i++) {
    162c:	cf 91       	pop	r28
    162e:	1f 91       	pop	r17
    1630:	0f 91       	pop	r16
    1632:	ff 90       	pop	r15
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:272
    uint16_t _signature = 0;
    if (set_sstpr(0x3FC1) && get_sld()) {
      _CAPS16(_signature)->bytes[1] = RXDATA;
      if (get_sld()) _CAPS16(_signature)->bytes[0] = RXDATA;
    }
    _tpi_chunks = _signature == 0x920E ? 8  /* ATtiny40 */
    1634:	ef 90       	pop	r14
    1636:	08 95       	ret
    1638:	84 e0       	ldi	r24, 0x04	; 4
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:277
                : _signature == 0x910F ? 4  /* ATtiny20 */
                : 2;                        /* Othres   */
    D1PRINTF(" SIG>%04X:%02X\r\n", _signature, _tpi_chunks);

    bit_set(PGCONF, PGCONF_UPDI_bp);
    163a:	ef cf       	rjmp	.-34     	; 0x161a <TPI::connect()+0xce>

0000163c <UPDI::disconnect()>:
disconnect():
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:278
    bit_clear(PGCONF, PGCONF_FAIL_bp);
    163c:	90 e0       	ldi	r25, 0x00	; 0
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:279
    return 1;
    163e:	80 e0       	ldi	r24, 0x00	; 0
    1640:	0e 94 de 01 	call	0x3bc	; 0x3bc <USART::drain(unsigned int)>
sys_reset():
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:280
  }
    1644:	69 e0       	ldi	r22, 0x09	; 9
    1646:	70 e0       	ldi	r23, 0x00	; 0
    1648:	82 e7       	ldi	r24, 0x72	; 114
    164a:	90 e6       	ldi	r25, 0x60	; 96
    164c:	0e 94 55 02 	call	0x4aa	; 0x4aa <UPDI::send_bytes(unsigned char const*, unsigned int)>
disconnect():
    1650:	1d ba       	out	0x1d, r1	; 29
    1652:	01 9a       	sbi	0x00, 1	; 0
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:272
    uint16_t _signature = 0;
    if (set_sstpr(0x3FC1) && get_sld()) {
      _CAPS16(_signature)->bytes[1] = RXDATA;
      if (get_sld()) _CAPS16(_signature)->bytes[0] = RXDATA;
    }
    _tpi_chunks = _signature == 0x920E ? 8  /* ATtiny40 */
    1654:	00 00       	nop
    1656:	01 98       	cbi	0x00, 1	; 0
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:381
    }
    return 0;
  }

  size_t disconnect (void) {
    USART::drain();
    1658:	90 e0       	ldi	r25, 0x00	; 0
    165a:	08 95       	ret

0000165c <UPDI::connect()>:
connect():
    165c:	10 92 de 62 	sts	0x62DE, r1	; 0x8062de <_sib>
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:130
    const static uint8_t _reset[] = {
      0x55, 0xC8, 0x59, /* SYSRST */
      0x55, 0xC8, 0x00, /* SYSRUN */
      0x55, 0xC3, 0x04  /* UPDIDIS */
    };
    return send_bytes(_reset, _leave ? 9 : 6);
    1660:	8f ef       	ldi	r24, 0xFF	; 255
    1662:	9f ef       	ldi	r25, 0xFF	; 255
    1664:	dc 01       	movw	r26, r24
    1666:	80 93 da 62 	sts	0x62DA, r24	; 0x8062da <_before_page>
    166a:	90 93 db 62 	sts	0x62DB, r25	; 0x8062db <_before_page+0x1>
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:385
  size_t disconnect (void) {
    USART::drain();
    bool _result = sys_reset(true);
    PGCONF = 0;
    D1PRINTF(" <RST:%d>\r\n", _result);
    openDrainWriteMacro(PIN_PG_TRST, LOW);
    166e:	a0 93 dc 62 	sts	0x62DC, r26	; 0x8062dc <_before_page+0x2>
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:387
    nop();
    openDrainWriteMacro(PIN_PG_TRST, HIGH);
    1672:	b0 93 dd 62 	sts	0x62DD, r27	; 0x8062dd <_before_page+0x3>
setup():
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:389
    return _result;
  }
    1676:	8f e0       	ldi	r24, 0x0F	; 15
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:330
      0x55, 0xC2, 0x05, /* GTVAL[4] */
    };
    const static uint8_t _sib256[] = {
      0x55, 0xE6        /* SIB[256] */
    };
    _sib[0] = 0;
    1678:	92 e0       	ldi	r25, 0x02	; 2
    167a:	80 93 fe 62 	sts	0x62FE, r24	; 0x8062fe <Command_Table>
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:331
    _before_page = -1L;
    167e:	90 93 ff 62 	sts	0x62FF, r25	; 0x8062ff <Command_Table+0x1>
    1682:	8c ee       	ldi	r24, 0xEC	; 236
    1684:	98 e0       	ldi	r25, 0x08	; 8
    1686:	80 93 00 63 	sts	0x6300, r24	; 0x806300 <Command_Table+0x2>
    168a:	90 93 01 63 	sts	0x6301, r25	; 0x806301 <Command_Table+0x3>
    168e:	8f ee       	ldi	r24, 0xEF	; 239
    1690:	98 e0       	ldi	r25, 0x08	; 8
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv1.cpp:68
    // else if (m_type == 0xD3)   /* MTYPE_SIB */ /* This is in its own memory space. */
    return 0;
  }

  bool setup (void) {
    Command_Table.prog_init    = &prog_init;
    1692:	80 93 02 63 	sts	0x6302, r24	; 0x806302 <Command_Table+0x4>
    1696:	90 93 03 63 	sts	0x6303, r25	; 0x806303 <Command_Table+0x5>
    169a:	89 ee       	ldi	r24, 0xE9	; 233
    169c:	98 e0       	ldi	r25, 0x08	; 8
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv1.cpp:69
    Command_Table.read_memory  = &read_memory;
    169e:	80 93 04 63 	sts	0x6304, r24	; 0x806304 <Command_Table+0x6>
    16a2:	90 93 05 63 	sts	0x6305, r25	; 0x806305 <Command_Table+0x7>
connect():
    16a6:	01 9a       	sbi	0x00, 1	; 0
    16a8:	00 00       	nop
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv1.cpp:70
    Command_Table.erase_memory = &erase_memory;
    16aa:	ef 9b       	sbis	0x1d, 7	; 29
    16ac:	0b c0       	rjmp	.+22     	; 0x16c4 <UPDI::connect()+0x68>
    16ae:	0e 98       	cbi	0x01, 6	; 1
delay_millis():
    16b0:	2f ef       	ldi	r18, 0xFF	; 255
    16b2:	84 e3       	ldi	r24, 0x34	; 52
    16b4:	9c e0       	ldi	r25, 0x0C	; 12
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv1.cpp:71
    Command_Table.write_memory = &write_memory;
    16b6:	21 50       	subi	r18, 0x01	; 1
    16b8:	80 40       	sbci	r24, 0x00	; 0
    16ba:	90 40       	sbci	r25, 0x00	; 0
    16bc:	e1 f7       	brne	.-8      	; 0x16b6 <UPDI::connect()+0x5a>
    16be:	00 c0       	rjmp	.+0      	; 0x16c0 <UPDI::connect()+0x64>
    16c0:	00 00       	nop
connect():
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:333
    NVM::V1::setup();   /* default is dummy callback */
    openDrainWriteMacro(PIN_PG_TRST, LOW);
    16c2:	0e 9a       	sbi	0x01, 6	; 1
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:334
    nop();
    16c4:	01 98       	cbi	0x00, 1	; 0
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:336

    if (bit_is_set(PGCONF, PGCONF_FAIL_bp)) {
    16c6:	80 e8       	ldi	r24, 0x80	; 128
    16c8:	8d bb       	out	0x1d, r24	; 29
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:340
      /* External Reset */
  #ifdef PIN_HV_POWER
      /* If the previous connect attempt failed, power off the device if possible. */
      digitalWriteMacro(PIN_HV_POWER, LOW);
    16ca:	90 e0       	ldi	r25, 0x00	; 0
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/modernAVR/0.2.14/cores/modernAVR/api/delay_busywait.h:42
    16cc:	80 e0       	ldi	r24, 0x00	; 0
    16ce:	0e 94 de 01 	call	0x3bc	; 0x3bc <USART::drain(unsigned int)>
long_break():
    16d2:	80 91 18 60 	lds	r24, 0x6018	; 0x806018 <_xclk>
    16d6:	90 91 19 60 	lds	r25, 0x6019	; 0x806019 <_xclk+0x1>
    16da:	96 95       	lsr	r25
    16dc:	87 95       	ror	r24
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:342
      delay_millis(200);
      digitalWriteMacro(PIN_HV_POWER, HIGH);
    16de:	96 95       	lsr	r25
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:349
  #ifdef CONFIG_HVCTRL_ENABLE
      /* High-Voltage control */
  #endif
    }

    openDrainWriteMacro(PIN_PG_TRST, HIGH);
    16e0:	87 95       	ror	r24
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:350
    PGCONF = PGCONF_FAIL_bm;
    16e2:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <USART::calk_baud_khz(unsigned int)>
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:351
    USART::drain();
    16e6:	80 93 08 08 	sts	0x0808, r24	; 0x800808 <__TEXT_REGION_LENGTH__+0x7f0808>
    16ea:	90 93 09 08 	sts	0x0809, r25	; 0x800809 <__TEXT_REGION_LENGTH__+0x7f0809>
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:66
    return false;
  }

  void long_break (void) {
    D2PRINTF("<BREAK>");
    USART0_BAUD = USART::calk_baud_khz(_xclk >> 2);
    16ee:	80 e0       	ldi	r24, 0x00	; 0
    16f0:	0e 94 44 02 	call	0x488	; 0x488 <UPDI::send(unsigned char)>
    16f4:	80 91 18 60 	lds	r24, 0x6018	; 0x806018 <_xclk>
    16f8:	90 91 19 60 	lds	r25, 0x6019	; 0x806019 <_xclk+0x1>
    16fc:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <USART::calk_baud_khz(unsigned int)>
    1700:	80 93 08 08 	sts	0x0808, r24	; 0x800808 <__TEXT_REGION_LENGTH__+0x7f0808>
    1704:	90 93 09 08 	sts	0x0809, r25	; 0x800809 <__TEXT_REGION_LENGTH__+0x7f0809>
connect():
    1708:	69 e0       	ldi	r22, 0x09	; 9
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:67
    send(0x00);
    170a:	70 e0       	ldi	r23, 0x00	; 0
    170c:	89 e6       	ldi	r24, 0x69	; 105
    170e:	90 e6       	ldi	r25, 0x60	; 96
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:68
    USART0_BAUD = USART::calk_baud_khz(_xclk);
    1710:	0e 94 55 02 	call	0x4aa	; 0x4aa <UPDI::send_bytes(unsigned char const*, unsigned int)>
    1714:	81 11       	cpse	r24, r1
    1716:	03 c0       	rjmp	.+6      	; 0x171e <UPDI::connect()+0xc2>
    1718:	90 e0       	ldi	r25, 0x00	; 0
    171a:	80 e0       	ldi	r24, 0x00	; 0
    171c:	08 95       	ret
    171e:	0e 94 68 02 	call	0x4d0	; 0x4d0 <UPDI::sys_status()>
    1722:	fc 99       	sbic	0x1f, 4	; 31
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:353

    openDrainWriteMacro(PIN_PG_TRST, HIGH);
    PGCONF = PGCONF_FAIL_bm;
    USART::drain();
    long_break();
    if (send_bytes(_init, sizeof(_init))) {
    1724:	fc cf       	rjmp	.-8      	; 0x171e <UPDI::connect()+0xc2>
    1726:	62 e0       	ldi	r22, 0x02	; 2
    1728:	70 e0       	ldi	r23, 0x00	; 0
    172a:	87 e6       	ldi	r24, 0x67	; 103
    172c:	90 e6       	ldi	r25, 0x60	; 96
    172e:	0e 94 55 02 	call	0x4aa	; 0x4aa <UPDI::send_bytes(unsigned char const*, unsigned int)>
    1732:	88 23       	and	r24, r24
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:377
          memcpy(&packet.in.data[0], _sib[0] == ' ' ? &_sib[4] : &_sib[0], 4);
          return 5;
        }
      }
    }
    return 0;
    1734:	89 f3       	breq	.-30     	; 0x1718 <UPDI::connect()+0xbc>
    1736:	60 e2       	ldi	r22, 0x20	; 32
    1738:	70 e0       	ldi	r23, 0x00	; 0
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:354
    openDrainWriteMacro(PIN_PG_TRST, HIGH);
    PGCONF = PGCONF_FAIL_bm;
    USART::drain();
    long_break();
    if (send_bytes(_init, sizeof(_init))) {
      do { sys_status(); } while(bit_is_set(RXDATA, 4));  /* wait clear INSLEEP */
    173a:	8e ed       	ldi	r24, 0xDE	; 222
    173c:	92 e6       	ldi	r25, 0x62	; 98
    173e:	5d d8       	rcall	.-3910   	; 0x7fa <UPDI::recv_bytes(unsigned char*, unsigned int)>
    1740:	88 23       	and	r24, r24
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:356
      D1PRINTF("<STAT:%02X>", RXDATA);
      if (send_bytes(_sib256, sizeof(_sib256))
    1742:	51 f3       	breq	.-44     	; 0x1718 <UPDI::connect()+0xbc>
    1744:	80 91 e8 62 	lds	r24, 0x62E8	; 0x8062e8 <_sib+0xa>
    1748:	85 33       	cpi	r24, 0x35	; 53
    174a:	61 f5       	brne	.+88     	; 0x17a4 <UPDI::connect()+0x148>
setup():
    174c:	8d e9       	ldi	r24, 0x9D	; 157
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:357
       && recv_bytes(_sib, 32)) {
    174e:	96 e0       	ldi	r25, 0x06	; 6
    1750:	80 93 fe 62 	sts	0x62FE, r24	; 0x8062fe <Command_Table>
    1754:	90 93 ff 62 	sts	0x62FF, r25	; 0x8062ff <Command_Table+0x1>
    1758:	8d e9       	ldi	r24, 0x9D	; 157
    175a:	94 e0       	ldi	r25, 0x04	; 4
    175c:	80 93 00 63 	sts	0x6300, r24	; 0x806300 <Command_Table+0x2>
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:362
        size_t _result = 0;
        D1PRINTF(" SIB=%s\r\n", _sib);
        D1PRINTF(" <NVM:%02X>\r\n", _sib[10]);
        /* Depending on the SIB, different low-level methods are executed. */
        if      (_sib[10] == '5') _result = NVM::V5::setup();
    1760:	90 93 01 63 	sts	0x6301, r25	; 0x806301 <Command_Table+0x3>
    1764:	84 ea       	ldi	r24, 0xA4	; 164
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv5.cpp:165
    }
  }

  bool setup (void) {
    Command_Table.prog_init    = &prog_init;
    1766:	9a e0       	ldi	r25, 0x0A	; 10
    1768:	80 93 02 63 	sts	0x6302, r24	; 0x806302 <Command_Table+0x4>
    176c:	90 93 03 63 	sts	0x6303, r25	; 0x806303 <Command_Table+0x5>
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv5.cpp:166
    Command_Table.read_memory  = &read_memory;
    1770:	8a ee       	ldi	r24, 0xEA	; 234
    1772:	96 e0       	ldi	r25, 0x06	; 6
    1774:	80 93 04 63 	sts	0x6304, r24	; 0x806304 <Command_Table+0x6>
    1778:	90 93 05 63 	sts	0x6305, r25	; 0x806305 <Command_Table+0x7>
connect():
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv5.cpp:167
    Command_Table.erase_memory = &erase_memory;
    177c:	ef 98       	cbi	0x1d, 7	; 29
    177e:	e8 9a       	sbi	0x1d, 0	; 29
    1780:	80 91 de 62 	lds	r24, 0x62DE	; 0x8062de <_sib>
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv5.cpp:168
    Command_Table.write_memory = &write_memory;
    1784:	ee ed       	ldi	r30, 0xDE	; 222
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv0.cpp:174

  bool setup (void) {
    Command_Table.prog_init    = &prog_init;
    Command_Table.read_memory  = &read_memory;
    Command_Table.erase_memory = &erase_memory;
    Command_Table.write_memory = &write_memory;
    1786:	f2 e6       	ldi	r31, 0x62	; 98
    1788:	80 32       	cpi	r24, 0x20	; 32
    178a:	11 f4       	brne	.+4      	; 0x1790 <UPDI::connect()+0x134>
    178c:	e2 ee       	ldi	r30, 0xE2	; 226
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:371
        else if (_sib[10] == '0') _result = NVM::V0::setup();
        if (_result) {
          /* If the SIB is obtained, the first 4-characters are returned.       */
          /* If the 1st character is blank, the next 4-characters are returned. */
          bit_clear(PGCONF, PGCONF_FAIL_bp);
          bit_set(PGCONF, PGCONF_UPDI_bp);
    178e:	f2 e6       	ldi	r31, 0x62	; 98
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:372
          memcpy(&packet.in.data[0], _sib[0] == ' ' ? &_sib[4] : &_sib[0], 4);
    1790:	84 e0       	ldi	r24, 0x04	; 4
    1792:	a5 ec       	ldi	r26, 0xC5	; 197
    1794:	b0 e6       	ldi	r27, 0x60	; 96
    1796:	01 90       	ld	r0, Z+
    1798:	0d 92       	st	X+, r0
    179a:	8a 95       	dec	r24
    179c:	e1 f7       	brne	.-8      	; 0x1796 <UPDI::connect()+0x13a>
    179e:	85 e0       	ldi	r24, 0x05	; 5
    17a0:	90 e0       	ldi	r25, 0x00	; 0
    17a2:	08 95       	ret
    17a4:	84 33       	cpi	r24, 0x34	; 52
    17a6:	a9 f4       	brne	.+42     	; 0x17d2 <UPDI::connect()+0x176>
setup():
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:373
          return 5;
    17a8:	8f e8       	ldi	r24, 0x8F	; 143
    17aa:	96 e0       	ldi	r25, 0x06	; 6
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:378
        }
      }
    }
    return 0;
  }
    17ac:	80 93 fe 62 	sts	0x62FE, r24	; 0x8062fe <Command_Table>
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv4.cpp:187
      return UPDI::send_bytes_block(_dwAddr, _wLength);
    }
  }

  bool setup (void) {
    Command_Table.prog_init    = &prog_init;
    17b0:	90 93 ff 62 	sts	0x62FF, r25	; 0x8062ff <Command_Table+0x1>
    17b4:	8e e6       	ldi	r24, 0x6E	; 110
    17b6:	94 e0       	ldi	r25, 0x04	; 4
    17b8:	80 93 00 63 	sts	0x6300, r24	; 0x806300 <Command_Table+0x2>
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv4.cpp:188
    Command_Table.read_memory  = &read_memory;
    17bc:	90 93 01 63 	sts	0x6301, r25	; 0x806301 <Command_Table+0x3>
    17c0:	8e e6       	ldi	r24, 0x6E	; 110
    17c2:	9a e0       	ldi	r25, 0x0A	; 10
    17c4:	80 93 02 63 	sts	0x6302, r24	; 0x806302 <Command_Table+0x4>
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv4.cpp:189
    Command_Table.erase_memory = &erase_memory;
    17c8:	90 93 03 63 	sts	0x6303, r25	; 0x806303 <Command_Table+0x5>
    17cc:	88 e5       	ldi	r24, 0x58	; 88
    17ce:	97 e0       	ldi	r25, 0x07	; 7
    17d0:	d1 cf       	rjmp	.-94     	; 0x1774 <UPDI::connect()+0x118>
connect():
    17d2:	83 33       	cpi	r24, 0x33	; 51
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv4.cpp:190
    Command_Table.write_memory = &write_memory;
    17d4:	a9 f4       	brne	.+42     	; 0x1800 <UPDI::connect()+0x1a4>
setup():
    17d6:	85 e9       	ldi	r24, 0x95	; 149
    17d8:	96 e0       	ldi	r25, 0x06	; 6
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:364
        D1PRINTF(" SIB=%s\r\n", _sib);
        D1PRINTF(" <NVM:%02X>\r\n", _sib[10]);
        /* Depending on the SIB, different low-level methods are executed. */
        if      (_sib[10] == '5') _result = NVM::V5::setup();
        else if (_sib[10] == '4') _result = NVM::V4::setup();
        else if (_sib[10] == '3') _result = NVM::V3::setup();
    17da:	80 93 fe 62 	sts	0x62FE, r24	; 0x8062fe <Command_Table>
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv3.cpp:162
    }
  }

  bool setup (void) {
    Command_Table.prog_init    = &prog_init;
    17de:	90 93 ff 62 	sts	0x62FF, r25	; 0x8062ff <Command_Table+0x1>
    17e2:	8c ec       	ldi	r24, 0xCC	; 204
    17e4:	94 e0       	ldi	r25, 0x04	; 4
    17e6:	80 93 00 63 	sts	0x6300, r24	; 0x806300 <Command_Table+0x2>
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv3.cpp:163
    Command_Table.read_memory  = &read_memory;
    17ea:	90 93 01 63 	sts	0x6301, r25	; 0x806301 <Command_Table+0x3>
    17ee:	85 ea       	ldi	r24, 0xA5	; 165
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv3.cpp:164
    Command_Table.erase_memory = &erase_memory;
    17f0:	9a e0       	ldi	r25, 0x0A	; 10
    17f2:	80 93 02 63 	sts	0x6302, r24	; 0x806302 <Command_Table+0x4>
    17f6:	90 93 03 63 	sts	0x6303, r25	; 0x806303 <Command_Table+0x5>
    17fa:	81 ed       	ldi	r24, 0xD1	; 209
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv3.cpp:165
    Command_Table.write_memory = &write_memory;
    17fc:	97 e0       	ldi	r25, 0x07	; 7
    17fe:	ba cf       	rjmp	.-140    	; 0x1774 <UPDI::connect()+0x118>
connect():
    1800:	82 33       	cpi	r24, 0x32	; 50
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:365
        else if (_sib[10] == '2') _result = NVM::V2::setup();
    1802:	a9 f4       	brne	.+42     	; 0x182e <UPDI::connect()+0x1d2>
setup():
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv2.cpp:184
      return UPDI::send_bytes_block(_dwAddr, _wLength);
    }
  }

  bool setup (void) {
    Command_Table.prog_init    = &prog_init;
    1804:	8c e4       	ldi	r24, 0x4C	; 76
    1806:	98 e0       	ldi	r25, 0x08	; 8
    1808:	80 93 fe 62 	sts	0x62FE, r24	; 0x8062fe <Command_Table>
    180c:	90 93 ff 62 	sts	0x62FF, r25	; 0x8062ff <Command_Table+0x1>
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv2.cpp:185
    Command_Table.read_memory  = &read_memory;
    1810:	8e e9       	ldi	r24, 0x9E	; 158
    1812:	94 e0       	ldi	r25, 0x04	; 4
    1814:	80 93 00 63 	sts	0x6300, r24	; 0x806300 <Command_Table+0x2>
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv2.cpp:186
    Command_Table.erase_memory = &erase_memory;
    1818:	90 93 01 63 	sts	0x6301, r25	; 0x806301 <Command_Table+0x3>
    181c:	84 e8       	ldi	r24, 0x84	; 132
    181e:	9a e0       	ldi	r25, 0x0A	; 10
    1820:	80 93 02 63 	sts	0x6302, r24	; 0x806302 <Command_Table+0x4>
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv2.cpp:187
    Command_Table.write_memory = &write_memory;
    1824:	90 93 03 63 	sts	0x6303, r25	; 0x806303 <Command_Table+0x5>
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:366
        else if (_sib[10] == '0') _result = NVM::V0::setup();
    1828:	80 e7       	ldi	r24, 0x70	; 112
    182a:	98 e0       	ldi	r25, 0x08	; 8
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv0.cpp:171
      return UPDI::send_bytes_block(_wAddr, _wLength);
    }
  }

  bool setup (void) {
    Command_Table.prog_init    = &prog_init;
    182c:	a3 cf       	rjmp	.-186    	; 0x1774 <UPDI::connect()+0x118>
connect():
    182e:	80 33       	cpi	r24, 0x30	; 48
    1830:	09 f0       	breq	.+2      	; 0x1834 <UPDI::connect()+0x1d8>
    1832:	72 cf       	rjmp	.-284    	; 0x1718 <UPDI::connect()+0xbc>
setup():
    1834:	8b e2       	ldi	r24, 0x2B	; 43
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv0.cpp:172
    Command_Table.read_memory  = &read_memory;
    1836:	98 e0       	ldi	r25, 0x08	; 8
    1838:	80 93 fe 62 	sts	0x62FE, r24	; 0x8062fe <Command_Table>
    183c:	90 93 ff 62 	sts	0x62FF, r25	; 0x8062ff <Command_Table+0x1>
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv0.cpp:173
    Command_Table.erase_memory = &erase_memory;
    1840:	8d ec       	ldi	r24, 0xCD	; 205
    1842:	94 e0       	ldi	r25, 0x04	; 4
    1844:	80 93 00 63 	sts	0x6300, r24	; 0x806300 <Command_Table+0x2>
    1848:	90 93 01 63 	sts	0x6301, r25	; 0x806301 <Command_Table+0x3>
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv0.cpp:174
    Command_Table.write_memory = &write_memory;
    184c:	8a e9       	ldi	r24, 0x9A	; 154
    184e:	9a e0       	ldi	r25, 0x0A	; 10
    1850:	80 93 02 63 	sts	0x6302, r24	; 0x806302 <Command_Table+0x4>
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:152
      ++_cnt;
    }
    return _wLength + 1;
  }

  size_t write_memory (void) {
    1854:	90 93 03 63 	sts	0x6303, r25	; 0x806303 <Command_Table+0x5>
    1858:	82 ef       	ldi	r24, 0xF2	; 242
    185a:	98 e0       	ldi	r25, 0x08	; 8
    185c:	8b cf       	rjmp	.-234    	; 0x1774 <UPDI::connect()+0x118>

0000185e <TPI::write_memory()>:
write_memory():
    185e:	6f 92       	push	r6
    1860:	7f 92       	push	r7
    1862:	8f 92       	push	r8
    1864:	9f 92       	push	r9
    1866:	af 92       	push	r10
    1868:	bf 92       	push	r11
    186a:	cf 92       	push	r12
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:153
    uint8_t   m_type = packet.out.tpi.read.bMType;
    186c:	df 92       	push	r13
    186e:	ef 92       	push	r14
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/modernAVR/0.2.14/cores/modernAVR/api/cpp/btools.cpp:45
//
// Byte convert
//

uint16_t bswap16 (uint16_t _word) {
  return __builtin_bswap16(_word);
    1870:	ff 92       	push	r15
    1872:	0f 93       	push	r16
    1874:	1f 93       	push	r17
    1876:	cf 93       	push	r28
    1878:	df 93       	push	r29
    187a:	20 91 c4 60 	lds	r18, 0x60C4	; 0x8060c4 <packet+0x6>
bswap16():
    187e:	c0 90 c8 60 	lds	r12, 0x60C8	; 0x8060c8 <packet+0xa>
    1882:	d0 90 c9 60 	lds	r13, 0x60C9	; 0x8060c9 <packet+0xb>
    1886:	dc 24       	eor	r13, r12
    1888:	cd 24       	eor	r12, r13
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:161
    uint8_t *_p = &packet.out.tpi.write.memData[0];
    bool _result = true;

    /* To accommodate older host programs, */
    /* the address must be aligned to the top of the page. */
    while (_dwAddr & (_tpi_chunks - 1)) {
    188a:	dc 24       	eor	r13, r12
    188c:	00 91 ca 60 	lds	r16, 0x60CA	; 0x8060ca <packet+0xc>
    1890:	10 91 cb 60 	lds	r17, 0x60CB	; 0x8060cb <packet+0xd>
    1894:	10 27       	eor	r17, r16
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:156

  size_t write_memory (void) {
    uint8_t   m_type = packet.out.tpi.read.bMType;
    uint16_t _dwAddr = bswap16(_CAPS32(packet.out.tpi.write.dwAddr)->words[1]);
    size_t  _wLength = bswap16(packet.out.tpi.write.wLength);
    uint8_t *_p = &packet.out.tpi.write.memData[0];
    1896:	01 27       	eor	r16, r17
    1898:	10 27       	eor	r17, r16
write_memory():
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:164
    /* To accommodate older host programs, */
    /* the address must be aligned to the top of the page. */
    while (_dwAddr & (_tpi_chunks - 1)) {
      _dwAddr--;
      _wLength++;
      *--_p = 0xFF;   /* NAND masked dummy bytes */
    189a:	60 90 8d 60 	lds	r6, 0x608D	; 0x80608d <_tpi_chunks>
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:161
    uint8_t *_p = &packet.out.tpi.write.memData[0];
    bool _result = true;

    /* To accommodate older host programs, */
    /* the address must be aligned to the top of the page. */
    while (_dwAddr & (_tpi_chunks - 1)) {
    189e:	86 2c       	mov	r8, r6
    18a0:	91 2c       	mov	r9, r1
    18a2:	c4 01       	movw	r24, r8
    18a4:	01 97       	sbiw	r24, 0x01	; 1
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:167
      _dwAddr--;
      _wLength++;
      *--_p = 0xFF;   /* NAND masked dummy bytes */
    }
    while (_wLength & (_tpi_chunks - 1)) {
      *((uint8_t*)(_dwAddr + _wLength++)) = 0xFF;
    18a6:	cc ec       	ldi	r28, 0xCC	; 204
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:166
    while (_dwAddr & (_tpi_chunks - 1)) {
      _dwAddr--;
      _wLength++;
      *--_p = 0xFF;   /* NAND masked dummy bytes */
    }
    while (_wLength & (_tpi_chunks - 1)) {
    18a8:	d0 e6       	ldi	r29, 0x60	; 96
    18aa:	3f ef       	ldi	r19, 0xFF	; 255
    18ac:	ac 01       	movw	r20, r24
    18ae:	4c 21       	and	r20, r12
    18b0:	5d 21       	and	r21, r13
    18b2:	45 2b       	or	r20, r21
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:167
      *((uint8_t*)(_dwAddr + _wLength++)) = 0xFF;
    18b4:	71 f4       	brne	.+28     	; 0x18d2 <TPI::write_memory()+0x74>
    18b6:	3f ef       	ldi	r19, 0xFF	; 255
    18b8:	7c 01       	movw	r14, r24
    18ba:	e0 22       	and	r14, r16
    18bc:	f1 22       	and	r15, r17
    18be:	e1 14       	cp	r14, r1
    18c0:	f1 04       	cpc	r15, r1
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:162
    bool _result = true;

    /* To accommodate older host programs, */
    /* the address must be aligned to the top of the page. */
    while (_dwAddr & (_tpi_chunks - 1)) {
      _dwAddr--;
    18c2:	71 f0       	breq	.+28     	; 0x18e0 <TPI::write_memory()+0x82>
    18c4:	f8 01       	movw	r30, r16
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:163
      _wLength++;
    18c6:	ec 0d       	add	r30, r12
    18c8:	fd 1d       	adc	r31, r13
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:164
      *--_p = 0xFF;   /* NAND masked dummy bytes */
    18ca:	30 83       	st	Z, r19
    18cc:	0f 5f       	subi	r16, 0xFF	; 255
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:174
    D2PRINTF(" FIXED_WRITE=%08X:%04X\r\n", _dwAddr, _wLength);

    /* For the flash code area, the page erase can be */
    /* omitted if the chip has already been erased.   */
    /* 0x01: XPRG_MEM_TYPE_APPL */
    if (m_type != 0x01) {
    18ce:	1f 4f       	sbci	r17, 0xFF	; 255
    18d0:	f3 cf       	rjmp	.-26     	; 0x18b8 <TPI::write_memory()+0x5a>
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:185
        && set_sst(0xFF)
        && nvm_wait()
        && nvm_ctrl(0x00);
      if (!_result) return 0;
    }
    _result &= nvm_wait() && set_sstpr(_dwAddr);
    18d2:	41 e0       	ldi	r20, 0x01	; 1
    18d4:	c4 1a       	sub	r12, r20
    18d6:	d1 08       	sbc	r13, r1
    18d8:	0f 5f       	subi	r16, 0xFF	; 255
    18da:	1f 4f       	sbci	r17, 0xFF	; 255
    18dc:	3a 93       	st	-Y, r19
    18de:	e6 cf       	rjmp	.-52     	; 0x18ac <TPI::write_memory()+0x4e>
    18e0:	21 30       	cpi	r18, 0x01	; 1
    18e2:	19 f5       	brne	.+70     	; 0x192a <TPI::write_memory()+0xcc>
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:156

  size_t write_memory (void) {
    uint8_t   m_type = packet.out.tpi.read.bMType;
    uint16_t _dwAddr = bswap16(_CAPS32(packet.out.tpi.write.dwAddr)->words[1]);
    size_t  _wLength = bswap16(packet.out.tpi.write.wLength);
    uint8_t *_p = &packet.out.tpi.write.memData[0];
    18e4:	b2 d8       	rcall	.-3740   	; 0xa4a <TPI::nvm_wait()>
    18e6:	78 2e       	mov	r7, r24
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:187
        && nvm_ctrl(0x00);
      if (!_result) return 0;
    }
    _result &= nvm_wait() && set_sstpr(_dwAddr);
    /* WRITE_PAGE */
    for (size_t _i = 0; _i < _wLength; _i += _tpi_chunks) {
    18e8:	88 23       	and	r24, r24
    18ea:	19 f0       	breq	.+6      	; 0x18f2 <TPI::write_memory()+0x94>
    18ec:	c6 01       	movw	r24, r12
    18ee:	cb d8       	rcall	.-3690   	; 0xa86 <TPI::set_sstpr(unsigned int)>
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:189
      D2PRINTF(" CODE_WRITE=%08X:%04X\r\n", _dwAddr, _tpi_chunks);
      _result &= nvm_ctrl(0x1D)
    18f0:	78 2e       	mov	r7, r24
    18f2:	b1 2c       	mov	r11, r1
    18f4:	a1 2c       	mov	r10, r1
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:191
              && set_sst(*_p++)
              && set_sst(*_p++);
    18f6:	a0 16       	cp	r10, r16
    18f8:	b1 06       	cpc	r11, r17
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:190
    _result &= nvm_wait() && set_sstpr(_dwAddr);
    /* WRITE_PAGE */
    for (size_t _i = 0; _i < _wLength; _i += _tpi_chunks) {
      D2PRINTF(" CODE_WRITE=%08X:%04X\r\n", _dwAddr, _tpi_chunks);
      _result &= nvm_ctrl(0x1D)
              && set_sst(*_p++)
    18fa:	08 f0       	brcs	.+2      	; 0x18fe <TPI::write_memory()+0xa0>
    18fc:	77 c0       	rjmp	.+238    	; 0x19ec <TPI::write_memory()+0x18e>
    18fe:	8d e1       	ldi	r24, 0x1D	; 29
    1900:	98 d8       	rcall	.-3792   	; 0xa32 <TPI::nvm_ctrl(unsigned char)>
    1902:	88 23       	and	r24, r24
    1904:	29 f0       	breq	.+10     	; 0x1910 <TPI::write_memory()+0xb2>
    1906:	88 81       	ld	r24, Y
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:192
              && set_sst(*_p++);
      if (_tpi_chunks == 4) {
    1908:	ac d8       	rcall	.-3752   	; 0xa62 <TPI::set_sst(unsigned char)>
    190a:	81 11       	cpse	r24, r1
    190c:	35 c0       	rjmp	.+106    	; 0x1978 <TPI::write_memory()+0x11a>
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:193
        idle_clock(12);
    190e:	21 96       	adiw	r28, 0x01	; 1
    1910:	78 22       	and	r7, r24
    1912:	94 e0       	ldi	r25, 0x04	; 4
    1914:	69 12       	cpse	r6, r25
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:194
        _result &= set_sst(*_p++) && set_sst(*_p++);
    1916:	46 c0       	rjmp	.+140    	; 0x19a4 <TPI::write_memory()+0x146>
    1918:	8c e0       	ldi	r24, 0x0C	; 12
    191a:	90 e0       	ldi	r25, 0x00	; 0
    191c:	cc d8       	rcall	.-3688   	; 0xab6 <TPI::idle_clock(unsigned int)>
    191e:	88 81       	ld	r24, Y
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:200
      }
      if (_tpi_chunks == 8) {
        idle_clock(12);
        _result &= set_sst(*_p++) && set_sst(*_p++);
        idle_clock(12);
        _result &= set_sst(*_p++) && set_sst(*_p++);
    1920:	a0 d8       	rcall	.-3776   	; 0xa62 <TPI::set_sst(unsigned char)>
    1922:	81 11       	cpse	r24, r1
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:177
    /* omitted if the chip has already been erased.   */
    /* 0x01: XPRG_MEM_TYPE_APPL */
    if (m_type != 0x01) {
      /* SECTION_ERASE */
      D2PRINTF(" SECTION_ERASE=%04X>%04X\r\n", _dwAddr | 1, _CAPS16(_before_page)->word);
      _result &= nvm_wait()
    1924:	31 c0       	rjmp	.+98     	; 0x1988 <TPI::write_memory()+0x12a>
    1926:	21 96       	adiw	r28, 0x01	; 1
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:182
        && set_sstpr(_dwAddr | 1)
        && nvm_ctrl(0x14)
        && set_sst(0xFF)
        && nvm_wait()
        && nvm_ctrl(0x00);
    1928:	36 c0       	rjmp	.+108    	; 0x1996 <TPI::write_memory()+0x138>
    192a:	8f d8       	rcall	.-3810   	; 0xa4a <TPI::nvm_wait()>
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:178
    /* 0x01: XPRG_MEM_TYPE_APPL */
    if (m_type != 0x01) {
      /* SECTION_ERASE */
      D2PRINTF(" SECTION_ERASE=%04X>%04X\r\n", _dwAddr | 1, _CAPS16(_before_page)->word);
      _result &= nvm_wait()
        && set_sstpr(_dwAddr | 1)
    192c:	88 23       	and	r24, r24
    192e:	a1 f0       	breq	.+40     	; 0x1958 <TPI::write_memory()+0xfa>
    1930:	c6 01       	movw	r24, r12
    1932:	81 60       	ori	r24, 0x01	; 1
    1934:	a8 d8       	rcall	.-3760   	; 0xa86 <TPI::set_sstpr(unsigned int)>
    1936:	88 23       	and	r24, r24
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:179
        && nvm_ctrl(0x14)
    1938:	79 f0       	breq	.+30     	; 0x1958 <TPI::write_memory()+0xfa>
    193a:	84 e1       	ldi	r24, 0x14	; 20
    193c:	7a d8       	rcall	.-3852   	; 0xa32 <TPI::nvm_ctrl(unsigned char)>
    193e:	88 23       	and	r24, r24
    1940:	59 f0       	breq	.+22     	; 0x1958 <TPI::write_memory()+0xfa>
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:180
        && set_sst(0xFF)
    1942:	8f ef       	ldi	r24, 0xFF	; 255
    1944:	8e d8       	rcall	.-3812   	; 0xa62 <TPI::set_sst(unsigned char)>
    1946:	88 23       	and	r24, r24
    1948:	39 f0       	breq	.+14     	; 0x1958 <TPI::write_memory()+0xfa>
    194a:	7f d8       	rcall	.-3842   	; 0xa4a <TPI::nvm_wait()>
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:181
        && nvm_wait()
    194c:	88 23       	and	r24, r24
    194e:	21 f0       	breq	.+8      	; 0x1958 <TPI::write_memory()+0xfa>
    1950:	80 e0       	ldi	r24, 0x00	; 0
    1952:	6f d8       	rcall	.-3874   	; 0xa32 <TPI::nvm_ctrl(unsigned char)>
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:182
        && nvm_ctrl(0x00);
    1954:	81 11       	cpse	r24, r1
    1956:	c6 cf       	rjmp	.-116    	; 0x18e4 <TPI::write_memory()+0x86>
    1958:	c7 01       	movw	r24, r14
    195a:	df 91       	pop	r29
    195c:	cf 91       	pop	r28
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:207
      _result &= nvm_wait();
      if (!_result) return 0;
      _dwAddr += _tpi_chunks;
    }
    return nvm_ctrl(0x00);
  }
    195e:	1f 91       	pop	r17
    1960:	0f 91       	pop	r16
    1962:	ff 90       	pop	r15
    1964:	ef 90       	pop	r14
    1966:	df 90       	pop	r13
    1968:	cf 90       	pop	r12
    196a:	bf 90       	pop	r11
    196c:	af 90       	pop	r10
    196e:	9f 90       	pop	r9
    1970:	8f 90       	pop	r8
    1972:	7f 90       	pop	r7
    1974:	6f 90       	pop	r6
    1976:	08 95       	ret
    1978:	6e 01       	movw	r12, r28
    197a:	82 e0       	ldi	r24, 0x02	; 2
    197c:	c8 0e       	add	r12, r24
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:191
    /* WRITE_PAGE */
    for (size_t _i = 0; _i < _wLength; _i += _tpi_chunks) {
      D2PRINTF(" CODE_WRITE=%08X:%04X\r\n", _dwAddr, _tpi_chunks);
      _result &= nvm_ctrl(0x1D)
              && set_sst(*_p++)
              && set_sst(*_p++);
    197e:	d1 1c       	adc	r13, r1
    1980:	89 81       	ldd	r24, Y+1	; 0x01
    1982:	6f d8       	rcall	.-3874   	; 0xa62 <TPI::set_sst(unsigned char)>
    1984:	e6 01       	movw	r28, r12
    1986:	c4 cf       	rjmp	.-120    	; 0x1910 <TPI::write_memory()+0xb2>
    1988:	6e 01       	movw	r12, r28
    198a:	e2 e0       	ldi	r30, 0x02	; 2
    198c:	ce 0e       	add	r12, r30
    198e:	d1 1c       	adc	r13, r1
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:194
      if (_tpi_chunks == 4) {
        idle_clock(12);
        _result &= set_sst(*_p++) && set_sst(*_p++);
    1990:	89 81       	ldd	r24, Y+1	; 0x01
    1992:	67 d8       	rcall	.-3890   	; 0xa62 <TPI::set_sst(unsigned char)>
    1994:	e6 01       	movw	r28, r12
    1996:	78 22       	and	r7, r24
    1998:	58 d8       	rcall	.-3920   	; 0xa4a <TPI::nvm_wait()>
    199a:	78 22       	and	r7, r24
    199c:	e9 f2       	breq	.-70     	; 0x1958 <TPI::write_memory()+0xfa>
    199e:	a8 0c       	add	r10, r8
    19a0:	b9 1c       	adc	r11, r9
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:202
        idle_clock(12);
        _result &= set_sst(*_p++) && set_sst(*_p++);
        idle_clock(12);
        _result &= set_sst(*_p++) && set_sst(*_p++);
      }
      _result &= nvm_wait();
    19a2:	a9 cf       	rjmp	.-174    	; 0x18f6 <TPI::write_memory()+0x98>
    19a4:	f8 e0       	ldi	r31, 0x08	; 8
    19a6:	6f 12       	cpse	r6, r31
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:203
      if (!_result) return 0;
    19a8:	f7 cf       	rjmp	.-18     	; 0x1998 <TPI::write_memory()+0x13a>
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:187
        && nvm_ctrl(0x00);
      if (!_result) return 0;
    }
    _result &= nvm_wait() && set_sstpr(_dwAddr);
    /* WRITE_PAGE */
    for (size_t _i = 0; _i < _wLength; _i += _tpi_chunks) {
    19aa:	8c e0       	ldi	r24, 0x0C	; 12
    19ac:	90 e0       	ldi	r25, 0x00	; 0
    19ae:	83 d8       	rcall	.-3834   	; 0xab6 <TPI::idle_clock(unsigned int)>
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:196
              && set_sst(*_p++);
      if (_tpi_chunks == 4) {
        idle_clock(12);
        _result &= set_sst(*_p++) && set_sst(*_p++);
      }
      if (_tpi_chunks == 8) {
    19b0:	88 81       	ld	r24, Y
    19b2:	57 d8       	rcall	.-3922   	; 0xa62 <TPI::set_sst(unsigned char)>
    19b4:	6e 01       	movw	r12, r28
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:197
        idle_clock(12);
    19b6:	81 11       	cpse	r24, r1
    19b8:	13 c0       	rjmp	.+38     	; 0x19e0 <TPI::write_memory()+0x182>
    19ba:	4f ef       	ldi	r20, 0xFF	; 255
    19bc:	c4 1a       	sub	r12, r20
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:198
        _result &= set_sst(*_p++) && set_sst(*_p++);
    19be:	d4 0a       	sbc	r13, r20
    19c0:	78 22       	and	r7, r24
    19c2:	8c e0       	ldi	r24, 0x0C	; 12
    19c4:	90 e0       	ldi	r25, 0x00	; 0
    19c6:	77 d8       	rcall	.-3858   	; 0xab6 <TPI::idle_clock(unsigned int)>
    19c8:	f6 01       	movw	r30, r12
    19ca:	80 81       	ld	r24, Z
    19cc:	4a d8       	rcall	.-3948   	; 0xa62 <TPI::set_sst(unsigned char)>
    19ce:	e6 01       	movw	r28, r12
    19d0:	88 23       	and	r24, r24
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:199
        idle_clock(12);
    19d2:	09 f4       	brne	.+2      	; 0x19d6 <TPI::write_memory()+0x178>
    19d4:	a8 cf       	rjmp	.-176    	; 0x1926 <TPI::write_memory()+0xc8>
    19d6:	22 96       	adiw	r28, 0x02	; 2
    19d8:	f6 01       	movw	r30, r12
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:200
        _result &= set_sst(*_p++) && set_sst(*_p++);
    19da:	81 81       	ldd	r24, Z+1	; 0x01
    19dc:	42 d8       	rcall	.-3964   	; 0xa62 <TPI::set_sst(unsigned char)>
    19de:	db cf       	rjmp	.-74     	; 0x1996 <TPI::write_memory()+0x138>
    19e0:	82 e0       	ldi	r24, 0x02	; 2
    19e2:	c8 0e       	add	r12, r24
    19e4:	d1 1c       	adc	r13, r1
    19e6:	89 81       	ldd	r24, Y+1	; 0x01
    19e8:	3c d8       	rcall	.-3976   	; 0xa62 <TPI::set_sst(unsigned char)>
    19ea:	ea cf       	rjmp	.-44     	; 0x19c0 <TPI::write_memory()+0x162>
    19ec:	80 e0       	ldi	r24, 0x00	; 0
    19ee:	21 d8       	rcall	.-4030   	; 0xa32 <TPI::nvm_ctrl(unsigned char)>
    19f0:	e8 2e       	mov	r14, r24
    19f2:	f1 2c       	mov	r15, r1
    19f4:	b1 cf       	rjmp	.-158    	; 0x1958 <TPI::write_memory()+0xfa>

000019f6 <TPI::read_memory()>:
read_memory():
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:198
        idle_clock(12);
        _result &= set_sst(*_p++) && set_sst(*_p++);
      }
      if (_tpi_chunks == 8) {
        idle_clock(12);
        _result &= set_sst(*_p++) && set_sst(*_p++);
    19f6:	0f 93       	push	r16
    19f8:	1f 93       	push	r17
    19fa:	cf 93       	push	r28
    19fc:	df 93       	push	r29
bswap16():
    19fe:	80 91 c7 60 	lds	r24, 0x60C7	; 0x8060c7 <packet+0x9>
    1a02:	90 91 c8 60 	lds	r25, 0x60C8	; 0x8060c8 <packet+0xa>
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:206
      }
      _result &= nvm_wait();
      if (!_result) return 0;
      _dwAddr += _tpi_chunks;
    }
    return nvm_ctrl(0x00);
    1a06:	c0 91 c9 60 	lds	r28, 0x60C9	; 0x8060c9 <packet+0xb>
    1a0a:	d0 91 ca 60 	lds	r29, 0x60CA	; 0x8060ca <packet+0xc>
    1a0e:	dc 27       	eor	r29, r28
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:136
        }
    }
    return 0;
  }

  size_t read_memory (void) {
    1a10:	cd 27       	eor	r28, r29
    1a12:	dc 27       	eor	r29, r28
read_memory():
    1a14:	98 27       	eor	r25, r24
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/modernAVR/0.2.14/cores/modernAVR/api/cpp/btools.cpp:45
    1a16:	89 27       	eor	r24, r25
    1a18:	98 27       	eor	r25, r24
    1a1a:	35 d8       	rcall	.-3990   	; 0xa86 <TPI::set_sstpr(unsigned int)>
    1a1c:	0e eb       	ldi	r16, 0xBE	; 190
    1a1e:	10 e6       	ldi	r17, 0x60	; 96
    1a20:	c8 01       	movw	r24, r16
    1a22:	8e 5b       	subi	r24, 0xBE	; 190
    1a24:	90 46       	sbci	r25, 0x60	; 96
    1a26:	8c 17       	cp	r24, r28
    1a28:	9d 07       	cpc	r25, r29
    1a2a:	48 f4       	brcc	.+18     	; 0x1a3e <TPI::read_memory()+0x48>
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:143
    uint16_t _dwAddr = bswap16(_CAPS32(packet.out.tpi.read.dwAddr)->words[1]);
    size_t  _wLength = bswap16(packet.out.tpi.read.wLength);
    uint8_t *_q = &packet.in.data[0];
    size_t _cnt = 0;
    D2PRINTF(" READ=%08X:%04X\r\n", _dwAddr, _wLength);
    set_sstpr(_dwAddr);
    1a2c:	26 d8       	rcall	.-4020   	; 0xa7a <TPI::get_sld()>
    1a2e:	0f 5f       	subi	r16, 0xFF	; 255
    1a30:	1f 4f       	sbci	r17, 0xFF	; 255
    1a32:	88 23       	and	r24, r24
    1a34:	59 f0       	breq	.+22     	; 0x1a4c <TPI::read_memory()+0x56>
    1a36:	8f b3       	in	r24, 0x1f	; 31
    1a38:	f8 01       	movw	r30, r16
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:144
    while (_cnt < _wLength) {
    1a3a:	86 83       	std	Z+6, r24	; 0x06
    1a3c:	f1 cf       	rjmp	.-30     	; 0x1a20 <TPI::read_memory()+0x2a>
    1a3e:	ce 01       	movw	r24, r28
    1a40:	01 96       	adiw	r24, 0x01	; 1
    1a42:	df 91       	pop	r29
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:145
      if (!get_sld()) return 0;
    1a44:	cf 91       	pop	r28
    1a46:	1f 91       	pop	r17
    1a48:	0f 91       	pop	r16
    1a4a:	08 95       	ret
    1a4c:	90 e0       	ldi	r25, 0x00	; 0
    1a4e:	80 e0       	ldi	r24, 0x00	; 0
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:146
      *_q++ = RXDATA;
    1a50:	f8 cf       	rjmp	.-16     	; 0x1a42 <TPI::read_memory()+0x4c>

00001a52 <TPI::erase_memory()>:
erase_memory():
    1a52:	cf 93       	push	r28
    1a54:	df 93       	push	r29
bswap16():
    1a56:	c0 91 c7 60 	lds	r28, 0x60C7	; 0x8060c7 <packet+0x9>
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:149
      ++_cnt;
    }
    return _wLength + 1;
    1a5a:	d0 91 c8 60 	lds	r29, 0x60C8	; 0x8060c8 <packet+0xa>
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:150
  }
    1a5e:	dc 27       	eor	r29, r28
    1a60:	cd 27       	eor	r28, r29
    1a62:	dc 27       	eor	r29, r28
erase_memory():
    1a64:	80 91 c4 60 	lds	r24, 0x60C4	; 0x8060c4 <packet+0x6>
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:145
    uint8_t *_q = &packet.in.data[0];
    size_t _cnt = 0;
    D2PRINTF(" READ=%08X:%04X\r\n", _dwAddr, _wLength);
    set_sstpr(_dwAddr);
    while (_cnt < _wLength) {
      if (!get_sld()) return 0;
    1a68:	81 30       	cpi	r24, 0x01	; 1
    1a6a:	01 f5       	brne	.+64     	; 0x1aac <TPI::erase_memory()+0x5a>
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:103

  bool nvm_ctrl (const uint8_t _nvmcmd) {
    return set_sout(0x63, _nvmcmd);   /* NVMCMD_REG: IO=0x33 */
  }

  size_t erase_memory (void) {
    1a6c:	0e 94 25 05 	call	0xa4a	; 0xa4a <TPI::nvm_wait()>
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/modernAVR/0.2.14/cores/modernAVR/api/cpp/btools.cpp:45
    1a70:	81 11       	cpse	r24, r1
    1a72:	05 c0       	rjmp	.+10     	; 0x1a7e <TPI::erase_memory()+0x2c>
    1a74:	90 e0       	ldi	r25, 0x00	; 0
    1a76:	80 e0       	ldi	r24, 0x00	; 0
    1a78:	df 91       	pop	r29
    1a7a:	cf 91       	pop	r28
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:106
    uint8_t   m_type = packet.out.tpi.read.bMType;
    uint16_t _dwAddr = bswap16(_CAPS32(packet.out.tpi.read.dwAddr)->words[1]);
    if (m_type == 0x01) {
    1a7c:	08 95       	ret
    1a7e:	ce 01       	movw	r24, r28
    1a80:	02 d8       	rcall	.-4092   	; 0xa86 <TPI::set_sstpr(unsigned int)>
    1a82:	88 23       	and	r24, r24
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:109
      /* XPRG_ERASE_CHIP */
      D1PRINTF(" CHIP_ERASE=%04X\r\n", _dwAddr);
      if (nvm_wait()
    1a84:	b9 f3       	breq	.-18     	; 0x1a74 <TPI::erase_memory()+0x22>
    1a86:	80 e1       	ldi	r24, 0x10	; 16
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:114
        && set_sstpr(_dwAddr)
        && nvm_ctrl(0x10)
        && set_sst(0xFF)
        && nvm_wait()
        && nvm_ctrl(0x00)) {
    1a88:	0e 94 19 05 	call	0xa32	; 0xa32 <TPI::nvm_ctrl(unsigned char)>
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:133
        && nvm_wait()
        && nvm_ctrl(0x00)) {
          return 1;
        }
    }
    return 0;
    1a8c:	88 23       	and	r24, r24
    1a8e:	91 f3       	breq	.-28     	; 0x1a74 <TPI::erase_memory()+0x22>
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:134
  }
    1a90:	8f ef       	ldi	r24, 0xFF	; 255
    1a92:	0e 94 31 05 	call	0xa62	; 0xa62 <TPI::set_sst(unsigned char)>
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:110
    uint16_t _dwAddr = bswap16(_CAPS32(packet.out.tpi.read.dwAddr)->words[1]);
    if (m_type == 0x01) {
      /* XPRG_ERASE_CHIP */
      D1PRINTF(" CHIP_ERASE=%04X\r\n", _dwAddr);
      if (nvm_wait()
        && set_sstpr(_dwAddr)
    1a96:	88 23       	and	r24, r24
    1a98:	69 f3       	breq	.-38     	; 0x1a74 <TPI::erase_memory()+0x22>
    1a9a:	0e 94 25 05 	call	0xa4a	; 0xa4a <TPI::nvm_wait()>
    1a9e:	88 23       	and	r24, r24
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:111
        && nvm_ctrl(0x10)
    1aa0:	49 f3       	breq	.-46     	; 0x1a74 <TPI::erase_memory()+0x22>
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:126
      /* Currently not called on AVRDUDE<=7.3. */
      /* It may be called from terminal mode.  */
      D1PRINTF(" SECTION_ERASE=%04X\r\n", _dwAddr);
      if (nvm_wait()
        && set_sstpr(_dwAddr)
        && nvm_ctrl(0x14)
    1aa2:	80 e0       	ldi	r24, 0x00	; 0
    1aa4:	0e 94 19 05 	call	0xa32	; 0xa32 <TPI::nvm_ctrl(unsigned char)>
    1aa8:	90 e0       	ldi	r25, 0x00	; 0
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:127
        && set_sst(0xFF)
    1aaa:	e6 cf       	rjmp	.-52     	; 0x1a78 <TPI::erase_memory()+0x26>
    1aac:	0e 94 25 05 	call	0xa4a	; 0xa4a <TPI::nvm_wait()>
    1ab0:	88 23       	and	r24, r24
    1ab2:	01 f3       	breq	.-64     	; 0x1a74 <TPI::erase_memory()+0x22>
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:128
        && nvm_wait()
    1ab4:	ce 01       	movw	r24, r28
    1ab6:	0e 94 43 05 	call	0xa86	; 0xa86 <TPI::set_sstpr(unsigned int)>
    1aba:	88 23       	and	r24, r24
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:129
        && nvm_ctrl(0x00)) {
    1abc:	d9 f2       	breq	.-74     	; 0x1a74 <TPI::erase_memory()+0x22>
    1abe:	84 e1       	ldi	r24, 0x14	; 20
    1ac0:	e3 cf       	rjmp	.-58     	; 0x1a88 <TPI::erase_memory()+0x36>

00001ac2 <__vector_19>:
__vector_19():
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:133
          return 1;
        }
    }
    return 0;
    1ac2:	1f 92       	push	r1
    1ac4:	0f 92       	push	r0
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:124
      /* 0x02: XPRG_ERASE_APP */
      /* 0x09: XPRG_ERASE_CONFIG */
      /* Currently not called on AVRDUDE<=7.3. */
      /* It may be called from terminal mode.  */
      D1PRINTF(" SECTION_ERASE=%04X\r\n", _dwAddr);
      if (nvm_wait()
    1ac6:	0f b6       	in	r0, 0x3f	; 63
    1ac8:	0f 92       	push	r0
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:129
        && set_sstpr(_dwAddr)
        && nvm_ctrl(0x14)
        && set_sst(0xFF)
        && nvm_wait()
        && nvm_ctrl(0x00)) {
    1aca:	11 24       	eor	r1, r1
    1acc:	2f 93       	push	r18
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:125
      /* 0x09: XPRG_ERASE_CONFIG */
      /* Currently not called on AVRDUDE<=7.3. */
      /* It may be called from terminal mode.  */
      D1PRINTF(" SECTION_ERASE=%04X\r\n", _dwAddr);
      if (nvm_wait()
        && set_sstpr(_dwAddr)
    1ace:	3f 93       	push	r19
    1ad0:	4f 93       	push	r20
    1ad2:	5f 93       	push	r21
    1ad4:	6f 93       	push	r22
    1ad6:	7f 93       	push	r23
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:126
        && nvm_ctrl(0x14)
    1ad8:	8f 93       	push	r24
    1ada:	9f 93       	push	r25
/Users/askn/Collaborator/UPDI4AVR-USB/src/usart.cpp:222
  }

};

/*** CMSIS-DAP VCOM,VCP transceiver ***/
ISR(USART0_RXC_vect) {
    1adc:	af 93       	push	r26
    1ade:	bf 93       	push	r27
    1ae0:	cf 93       	push	r28
    1ae2:	ef 93       	push	r30
    1ae4:	ff 93       	push	r31
vcp_receiver():
    1ae6:	c0 91 01 08 	lds	r28, 0x0801	; 0x800801 <__TEXT_REGION_LENGTH__+0x7f0801>
    1aea:	20 91 00 08 	lds	r18, 0x0800	; 0x800800 <__TEXT_REGION_LENGTH__+0x7f0800>
    1aee:	8c 2f       	mov	r24, r28
    1af0:	86 74       	andi	r24, 0x46	; 70
    1af2:	b1 f4       	brne	.+44     	; 0x1b20 <__vector_19+0x5e>
write_byte():
    1af4:	e2 99       	sbic	0x1c, 2	; 28
    1af6:	5f c0       	rjmp	.+190    	; 0x1bb6 <__vector_19+0xf4>
__vector_19():
    1af8:	8e e9       	ldi	r24, 0x9E	; 158
    1afa:	93 e6       	ldi	r25, 0x63	; 99
write_byte():
    1afc:	e0 91 22 64 	lds	r30, 0x6422	; 0x806422 <_send_count>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:470
  void read_drop (void) {
    if (bit_is_set(EP_CDO.STATUS, USB_BUSNAK_bp)) ep_cdo_listen();
  }

  void vcp_receiver (void) {
    uint8_t _d = USART0_RXDATAH;
    1b00:	31 e0       	ldi	r19, 0x01	; 1
    1b02:	3e 0f       	add	r19, r30
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:471
    uint8_t _c = USART0_RXDATAL;
    1b04:	30 93 22 64 	sts	0x6422, r19	; 0x806422 <_send_count>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:472
    if (!(_d & (USART_BUFOVF_bm | USART_FERR_bm | USART_PERR_bm))) {
    1b08:	e8 0f       	add	r30, r24
    1b0a:	f9 2f       	mov	r31, r25
    1b0c:	f1 1d       	adc	r31, r1
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:434
  }

  void write_byte (const uint8_t _c) {
    /* The double buffer consists of two blocks. */
    uint8_t* _buf = bit_is_set(GPCONF, GPCONF_DBL_bp)
      ? &EP_MEM.cdi_data[64]
    1b0e:	20 83       	st	Z, r18
    1b10:	80 91 22 64 	lds	r24, 0x6422	; 0x806422 <_send_count>
    1b14:	80 34       	cpi	r24, 0x40	; 64
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:436
      : &EP_MEM.cdi_data[0];
    _buf[_send_count++] = _c;
    1b16:	08 f0       	brcs	.+2      	; 0x1b1a <__vector_19+0x58>
    1b18:	51 c0       	rjmp	.+162    	; 0x1bbc <__vector_19+0xfa>
    1b1a:	8e e1       	ldi	r24, 0x1E	; 30
    1b1c:	80 93 1f 64 	sts	0x641F, r24	; 0x80641f <_sof_count>
vcp_receiver():
    1b20:	8e b3       	in	r24, 0x1e	; 30
    1b22:	c8 2b       	or	r28, r24
    1b24:	ce bb       	out	0x1e, r28	; 30
    1b26:	80 91 56 64 	lds	r24, 0x6456	; 0x806456 <EP_TABLE+0x30>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:437
    if (_send_count < 64) _sof_count = 30;
    1b2a:	81 ff       	sbrs	r24, 1
    1b2c:	32 c0       	rjmp	.+100    	; 0x1b92 <__vector_19+0xd0>
cci_interrupt():
    1b2e:	8e b1       	in	r24, 0x0e	; 14
    1b30:	80 95       	com	r24
    1b32:	8b 70       	andi	r24, 0x0B	; 11
    1b34:	f2 99       	sbic	0x1e, 2	; 30
    1b36:	80 61       	ori	r24, 0x10	; 16
    1b38:	f1 99       	sbic	0x1e, 1	; 30
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:475
    uint8_t _d = USART0_RXDATAH;
    uint8_t _c = USART0_RXDATAL;
    if (!(_d & (USART_BUFOVF_bm | USART_FERR_bm | USART_PERR_bm))) {
      write_byte(_c);
    }
    RXSTAT |= _d;
    1b3a:	80 62       	ori	r24, 0x20	; 32
    1b3c:	f6 99       	sbic	0x1e, 6	; 30
    1b3e:	80 64       	ori	r24, 0x40	; 64
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:477
  #if defined(CONFIG_VCP_INTERRUPT_SUPPRT)
    if (bit_is_set(EP_CCI.STATUS, USB_BUSNAK_bp)) cci_interrupt();
    1b40:	1e ba       	out	0x1e, r1	; 30
    1b42:	e4 9b       	sbis	0x1c, 4	; 28
    1b44:	26 c0       	rjmp	.+76     	; 0x1b92 <__vector_19+0xd0>
    1b46:	90 91 1e 64 	lds	r25, 0x641E	; 0x80641e <_set_serial_state>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:416
  void cci_interrupt (void) {
  #if defined(CONFIG_VCP_INTERRUPT_SUPPRT)
    SerialState_t _value = {};
    #if defined(CONFIG_VCP_RS232C_ENABLE)
    uint8_t _c = VPORTD_IN;
    _value.bValue = (_c ^ 0x0B) & 0x0B;
    1b4a:	89 17       	cp	r24, r25
    1b4c:	11 f1       	breq	.+68     	; 0x1b92 <__vector_19+0xd0>
set_cci_data():
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:418
    #endif
    if (bit_is_set(RXSTAT, USART_FERR_bp))   _value.bFraming = true;
    1b4e:	80 93 1e 64 	sts	0x641E, r24	; 0x80641e <_set_serial_state>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:419
    if (bit_is_set(RXSTAT, USART_PERR_bp))   _value.bParity  = true;
    1b52:	91 ea       	ldi	r25, 0xA1	; 161
    1b54:	90 93 0e 63 	sts	0x630E, r25	; 0x80630e <EP_MEM+0x8>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:420
    if (bit_is_set(RXSTAT, USART_BUFOVF_bp)) _value.bOverRun = true;
    1b58:	90 e2       	ldi	r25, 0x20	; 32
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:421
    RXSTAT = 0;
    1b5a:	90 93 0f 63 	sts	0x630F, r25	; 0x80630f <EP_MEM+0x9>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:422
    if (bit_is_set(GPCONF, GPCONF_OPN_bp) && _set_serial_state != _value.bValue) {
    1b5e:	10 92 10 63 	sts	0x6310, r1	; 0x806310 <EP_MEM+0xa>
    1b62:	10 92 11 63 	sts	0x6311, r1	; 0x806311 <EP_MEM+0xb>
    1b66:	21 e0       	ldi	r18, 0x01	; 1
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:225
    if (_size) memcpy_P(_buffer, _pgmem, _size);
    return _size;
  }

  void set_cci_data (uint16_t _state) {
    _set_serial_state = _state;
    1b68:	30 e0       	ldi	r19, 0x00	; 0
    1b6a:	20 93 12 63 	sts	0x6312, r18	; 0x806312 <EP_MEM+0xc>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:226
    EP_MEM.cci_header.bmRequestType = 0xA1; /* REQTYPE_DIRECTION | REQTYPE_CLASS | RECIPIENT_INTERFACE */
    1b6e:	30 93 13 63 	sts	0x6313, r19	; 0x806313 <EP_MEM+0xd>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:227
    EP_MEM.cci_header.bRequest      = 0x20; /* CDC_REQ_SerialState */
    1b72:	22 e0       	ldi	r18, 0x02	; 2
    1b74:	30 e0       	ldi	r19, 0x00	; 0
    1b76:	20 93 14 63 	sts	0x6314, r18	; 0x806314 <EP_MEM+0xe>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:228
    EP_MEM.cci_header.wValue        = 0;
    1b7a:	30 93 15 63 	sts	0x6315, r19	; 0x806315 <EP_MEM+0xf>
cci_interrupt():
    1b7e:	90 e0       	ldi	r25, 0x00	; 0
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:229
    EP_MEM.cci_header.wIndex        = 1;    /* Interface#1 */
    1b80:	80 93 16 63 	sts	0x6316, r24	; 0x806316 <EP_MEM+0x10>
    1b84:	90 93 17 63 	sts	0x6317, r25	; 0x806317 <EP_MEM+0x11>
    1b88:	80 91 56 64 	lds	r24, 0x6456	; 0x806456 <EP_TABLE+0x30>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:230
    EP_MEM.cci_header.wLength       = 2;
    1b8c:	81 fd       	sbrc	r24, 1
    1b8e:	0e 94 b4 01 	call	0x368	; 0x368 <USB::ep_cci_listen()>
__vector_19():
    1b92:	ff 91       	pop	r31
    1b94:	ef 91       	pop	r30
    1b96:	cf 91       	pop	r28
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:423
    if (bit_is_set(RXSTAT, USART_FERR_bp))   _value.bFraming = true;
    if (bit_is_set(RXSTAT, USART_PERR_bp))   _value.bParity  = true;
    if (bit_is_set(RXSTAT, USART_BUFOVF_bp)) _value.bOverRun = true;
    RXSTAT = 0;
    if (bit_is_set(GPCONF, GPCONF_OPN_bp) && _set_serial_state != _value.bValue) {
      set_cci_data(_value.bValue);
    1b98:	bf 91       	pop	r27
    1b9a:	af 91       	pop	r26
    1b9c:	9f 91       	pop	r25
    1b9e:	8f 91       	pop	r24
    1ba0:	7f 91       	pop	r23
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:426
      D1PRINTF(" CCI=");
      D1PRINTHEX(&EP_MEM.cci_data, 10);
      if (bit_is_set(EP_CCI.STATUS, USB_BUSNAK_bp)) ep_cci_listen();
    1ba2:	6f 91       	pop	r22
    1ba4:	5f 91       	pop	r21
    1ba6:	4f 91       	pop	r20
    1ba8:	3f 91       	pop	r19
    1baa:	2f 91       	pop	r18
/Users/askn/Collaborator/UPDI4AVR-USB/src/usart.cpp:228
#if defined(CONFIG_VCP_9BIT_SUPPORT)
  usart_receiver();
#else
  USB::vcp_receiver();
#endif
}
    1bac:	0f 90       	pop	r0
    1bae:	0f be       	out	0x3f, r0	; 63
    1bb0:	0f 90       	pop	r0
    1bb2:	1f 90       	pop	r1
    1bb4:	18 95       	reti
    1bb6:	8e ed       	ldi	r24, 0xDE	; 222
    1bb8:	93 e6       	ldi	r25, 0x63	; 99
    1bba:	a0 cf       	rjmp	.-192    	; 0x1afc <__vector_19+0x3a>
write_byte():
    1bbc:	0e 94 80 01 	call	0x300	; 0x300 <USB::ep_cdi_listen()>
    1bc0:	af cf       	rjmp	.-162    	; 0x1b20 <__vector_19+0x5e>

00001bc2 <__vector_15>:
__vector_15():
    1bc2:	11 24       	eor	r1, r1
    1bc4:	10 92 00 0b 	sts	0x0B00, r1	; 0x800b00 <__TEXT_REGION_LENGTH__+0x7f0b00>
    1bc8:	81 e0       	ldi	r24, 0x01	; 1
    1bca:	80 93 06 0b 	sts	0x0B06, r24	; 0x800b06 <__TEXT_REGION_LENGTH__+0x7f0b06>
    1bce:	62 e0       	ldi	r22, 0x02	; 2
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:434
  }

  void write_byte (const uint8_t _c) {
    /* The double buffer consists of two blocks. */
    uint8_t* _buf = bit_is_set(GPCONF, GPCONF_DBL_bp)
      ? &EP_MEM.cdi_data[64]
    1bd0:	70 e0       	ldi	r23, 0x00	; 0
    1bd2:	80 e7       	ldi	r24, 0x70	; 112
    1bd4:	94 e6       	ldi	r25, 0x64	; 100
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:438
      : &EP_MEM.cdi_data[0];
    _buf[_send_count++] = _c;
    if (_send_count < 64) _sof_count = 30;
    else ep_cdi_listen();
    1bd6:	29 d7       	rcall	.+3666   	; 0x2a2a <longjmp>

00001bd8 <Timeout::stop()>:
_ZN7Timeout4stopEv():
    1bd8:	8f b7       	in	r24, 0x3f	; 63
__iCliRetVal():
    1bda:	f8 94       	cli
_ZN7Timeout4stopEv():
/Users/askn/Collaborator/UPDI4AVR-USB/src/timeout.cpp:101
ISR(TCB0_INT_vect, ISR_NAKED) {
  /***
    This interrupt is a global escape due to timeout.
    There is no return to the source of the interrupt.
  ***/
  __asm__ __volatile__ ("EOR R1,R1");
    1bdc:	10 92 00 0b 	sts	0x0B00, r1	; 0x800b00 <__TEXT_REGION_LENGTH__+0x7f0b00>
/Users/askn/Collaborator/UPDI4AVR-USB/src/timeout.cpp:105
#if defined(DEBUG)
  NVMCTRL_DATA = SP;
#endif
  TCB0_CTRLA = 0;
    1be0:	91 e0       	ldi	r25, 0x01	; 1
/Users/askn/Collaborator/UPDI4AVR-USB/src/timeout.cpp:106
  TCB0_INTFLAGS = TCB_CAPT_bm;
    1be2:	90 93 06 0b 	sts	0x0B06, r25	; 0x800b06 <__TEXT_REGION_LENGTH__+0x7f0b06>
__iRestore():
    1be6:	8f bf       	out	0x3f, r24	; 63
_ZN7Timeout4stopEv():
/Users/askn/Collaborator/UPDI4AVR-USB/src/timeout.cpp:107
  longjmp(TIMEOUT_CONTEXT, 2);
    1be8:	18 95       	reti

00001bea <Timeout::command(unsigned int (*)(), unsigned int) [clone .constprop.8]>:
command():
    1bea:	cf 93       	push	r28
    1bec:	df 93       	push	r29
    1bee:	00 d0       	rcall	.+0      	; 0x1bf0 <Timeout::command(unsigned int (*)(), unsigned int) [clone .constprop.8]+0x6>
    1bf0:	00 d0       	rcall	.+0      	; 0x1bf2 <Timeout::command(unsigned int (*)(), unsigned int) [clone .constprop.8]+0x8>
    1bf2:	cd b7       	in	r28, 0x3d	; 61
/Users/askn/Collaborator/UPDI4AVR-USB/src/timeout.cpp:53
   * Exit from the timeout block.
   * The last RETI is required.
   */
  __attribute__((used, naked, noinline))
  void stop (void) {
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    1bf4:	de b7       	in	r29, 0x3e	; 62
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/tools/avr-gcc/7.3.0-avr8-gnu-toolchain/avr/include/util/atomic.h:50
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1bf6:	8b 83       	std	Y+3, r24	; 0x03
/Users/askn/Collaborator/UPDI4AVR-USB/src/timeout.cpp:54
      TCB0_CTRLA = 0;
    1bf8:	9c 83       	std	Y+4, r25	; 0x04
    1bfa:	19 82       	std	Y+1, r1	; 0x01
/Users/askn/Collaborator/UPDI4AVR-USB/src/timeout.cpp:55
      TCB0_INTFLAGS = TCB_CAPT_bm;
    1bfc:	1a 82       	std	Y+2, r1	; 0x02
    1bfe:	80 e7       	ldi	r24, 0x70	; 112
    1c00:	94 e6       	ldi	r25, 0x64	; 100
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/tools/avr-gcc/7.3.0-avr8-gnu-toolchain/avr/include/util/atomic.h:70
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1c02:	f3 d6       	rcall	.+3558   	; 0x29ea <setjmp>
/Users/askn/Collaborator/UPDI4AVR-USB/src/timeout.cpp:57
    }
    reti();
    1c04:	89 2b       	or	r24, r25
/Users/askn/Collaborator/UPDI4AVR-USB/src/timeout.cpp:74
  /*
   * Timeout block.
   * Does not work with interrupts disabled.
   * RETI must be called after the interrupt is suspended.
   */
  size_t command (size_t (*func_p)(void), uint16_t _ms) {
    1c06:	d1 f4       	brne	.+52     	; 0x1c3c <Timeout::command(unsigned int (*)(), unsigned int) [clone .constprop.8]+0x52>
start():
    1c08:	9f b7       	in	r25, 0x3f	; 63
__iCliRetVal():
    1c0a:	f8 94       	cli
start():
    1c0c:	10 92 0a 0b 	sts	0x0B0A, r1	; 0x800b0a <__TEXT_REGION_LENGTH__+0x7f0b0a>
    1c10:	10 92 0b 0b 	sts	0x0B0B, r1	; 0x800b0b <__TEXT_REGION_LENGTH__+0x7f0b0b>
    1c14:	20 e2       	ldi	r18, 0x20	; 32
/Users/askn/Collaborator/UPDI4AVR-USB/src/timeout.cpp:75
    volatile size_t _result = 0;
    1c16:	33 e0       	ldi	r19, 0x03	; 3
    1c18:	20 93 0c 0b 	sts	0x0B0C, r18	; 0x800b0c <__TEXT_REGION_LENGTH__+0x7f0b0c>
/Users/askn/Collaborator/UPDI4AVR-USB/src/timeout.cpp:76
    if (setjmp(TIMEOUT_CONTEXT) == 0) {
    1c1c:	30 93 0d 0b 	sts	0x0B0D, r19	; 0x800b0d <__TEXT_REGION_LENGTH__+0x7f0b0d>
    1c20:	81 e0       	ldi	r24, 0x01	; 1
    1c22:	80 93 05 0b 	sts	0x0B05, r24	; 0x800b05 <__TEXT_REGION_LENGTH__+0x7f0b05>
/Users/askn/Collaborator/UPDI4AVR-USB/src/timeout.cpp:38
  /*
   * Timeout after the specified time.
   * To be precise, in 1/1024 sec units.
   */
  void start (uint16_t _ms) {
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    1c26:	80 93 06 0b 	sts	0x0B06, r24	; 0x800b06 <__TEXT_REGION_LENGTH__+0x7f0b06>
/Users/askn/Collaborator/UPDI4AVR-USB/src/timeout.cpp:39
      TCB0_CNT = 0;
    1c2a:	8f e0       	ldi	r24, 0x0F	; 15
    1c2c:	80 93 00 0b 	sts	0x0B00, r24	; 0x800b00 <__TEXT_REGION_LENGTH__+0x7f0b00>
__iRestore():
    1c30:	9f bf       	out	0x3f, r25	; 63
command():
/Users/askn/Collaborator/UPDI4AVR-USB/src/timeout.cpp:40
      TCB0_CCMP = _ms;
    1c32:	eb 81       	ldd	r30, Y+3	; 0x03
    1c34:	fc 81       	ldd	r31, Y+4	; 0x04
    1c36:	09 95       	icall
    1c38:	89 83       	std	Y+1, r24	; 0x01
    1c3a:	9a 83       	std	Y+2, r25	; 0x02
    1c3c:	cd df       	rcall	.-102    	; 0x1bd8 <Timeout::stop()>
/Users/askn/Collaborator/UPDI4AVR-USB/src/timeout.cpp:41
      TCB0_INTCTRL = TCB_CAPT_bm;
    1c3e:	89 81       	ldd	r24, Y+1	; 0x01
    1c40:	9a 81       	ldd	r25, Y+2	; 0x02
    1c42:	24 96       	adiw	r28, 0x04	; 4
/Users/askn/Collaborator/UPDI4AVR-USB/src/timeout.cpp:42
      TCB0_INTFLAGS = TCB_CAPT_bm;
    1c44:	cd bf       	out	0x3d, r28	; 61
    1c46:	de bf       	out	0x3e, r29	; 62
/Users/askn/Collaborator/UPDI4AVR-USB/src/timeout.cpp:43
      TCB0_CTRLA = TCB_ENABLE_bm | TCB_CLKSEL_EVENT_gc; /* for EVSYS_USERTCB0COUNT */
    1c48:	df 91       	pop	r29
    1c4a:	cf 91       	pop	r28
    1c4c:	08 95       	ret

00001c4e <__vector_24>:
__vector_24():
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/tools/avr-gcc/7.3.0-avr8-gnu-toolchain/avr/include/util/atomic.h:70
    1c4e:	1f 92       	push	r1
/Users/askn/Collaborator/UPDI4AVR-USB/src/timeout.cpp:78
   */
  size_t command (size_t (*func_p)(void), uint16_t _ms) {
    volatile size_t _result = 0;
    if (setjmp(TIMEOUT_CONTEXT) == 0) {
      Timeout::start(_ms);
      _result = (*func_p)();
    1c50:	0f 92       	push	r0
    1c52:	0f b6       	in	r0, 0x3f	; 63
    1c54:	0f 92       	push	r0
    1c56:	11 24       	eor	r1, r1
    1c58:	8f 93       	push	r24
/Users/askn/Collaborator/UPDI4AVR-USB/src/timeout.cpp:86
      /* Stack dump. */
      /* An unused register is borrowed to store the SP. */
      D1PRINTF("\r\n!TIMEOUT:%04lX>", NVMCTRL_DATA);
      D1PRINTHEX((const void*)(NVMCTRL_DATA - 2), 16);
    }
    Timeout::stop();
    1c5a:	8f ef       	ldi	r24, 0xFF	; 255
    1c5c:	87 bb       	out	0x17, r24	; 23
/Users/askn/Collaborator/UPDI4AVR-USB/src/timeout.cpp:87
    return _result;
    1c5e:	e8 99       	sbic	0x1d, 0	; 29
    1c60:	03 c0       	rjmp	.+6      	; 0x1c68 <__vector_24+0x1a>
/Users/askn/Collaborator/UPDI4AVR-USB/src/timeout.cpp:88
  }
    1c62:	b6 9b       	sbis	0x16, 6	; 22
    1c64:	07 c0       	rjmp	.+14     	; 0x1c74 <__vector_24+0x26>
    1c66:	e6 9a       	sbi	0x1c, 6	; 28
    1c68:	8f 91       	pop	r24
    1c6a:	0f 90       	pop	r0
    1c6c:	0f be       	out	0x3f, r0	; 63
/Users/askn/Collaborator/UPDI4AVR-USB/src/sys.cpp:335
  }

};

#if defined(PIN_SYS_SW0)
ISR(portIntrruptVector(PIN_SYS_SW0)) {
    1c6e:	0f 90       	pop	r0
    1c70:	1f 90       	pop	r1
    1c72:	18 95       	reti
    1c74:	e7 9a       	sbi	0x1c, 7	; 28
    1c76:	f8 cf       	rjmp	.-16     	; 0x1c68 <__vector_24+0x1a>

00001c78 <main>:
main():
    1c78:	cf 93       	push	r28
/Users/askn/Collaborator/UPDI4AVR-USB/src/sys.cpp:336
  vportRegister(PIN_SYS_SW0).INTFLAGS = ~0;
    1c7a:	df 93       	push	r29
    1c7c:	cd b7       	in	r28, 0x3d	; 61
/Users/askn/Collaborator/UPDI4AVR-USB/src/sys.cpp:338
  /* If the level is not maintained for a sufficient period of time it will not function properly. */
  if (bit_is_clear(PGCONF, PGCONF_UPDI_bp)) {
    1c7e:	de b7       	in	r29, 0x3e	; 62
    1c80:	25 97       	sbiw	r28, 0x05	; 5
/Users/askn/Collaborator/UPDI4AVR-USB/src/sys.cpp:339
    if (digitalReadMacro(PIN_SYS_SW0))
    1c82:	cd bf       	out	0x3d, r28	; 61
    1c84:	de bf       	out	0x3e, r29	; 62
setup():
/Users/askn/Collaborator/UPDI4AVR-USB/src/sys.cpp:340
      bit_set(GPCONF, GPCONF_RIS_bp);
    1c86:	64 9a       	sbi	0x0c, 4	; 12
/Users/askn/Collaborator/UPDI4AVR-USB/src/sys.cpp:344
    else
      bit_set(GPCONF, GPCONF_FAL_bp);
  }
}
    1c88:	10 92 74 04 	sts	0x0474, r1	; 0x800474 <__TEXT_REGION_LENGTH__+0x7f0474>
    1c8c:	65 9a       	sbi	0x0c, 5	; 12
    1c8e:	10 92 75 04 	sts	0x0475, r1	; 0x800475 <__TEXT_REGION_LENGTH__+0x7f0475>
    1c92:	88 e0       	ldi	r24, 0x08	; 8
/Users/askn/Collaborator/UPDI4AVR-USB/src/sys.cpp:342
  /* If the level is not maintained for a sufficient period of time it will not function properly. */
  if (bit_is_clear(PGCONF, PGCONF_UPDI_bp)) {
    if (digitalReadMacro(PIN_SYS_SW0))
      bit_set(GPCONF, GPCONF_RIS_bp);
    else
      bit_set(GPCONF, GPCONF_FAL_bp);
    1c94:	80 93 70 04 	sts	0x0470, r24	; 0x800470 <__TEXT_REGION_LENGTH__+0x7f0470>
/Users/askn/Collaborator/UPDI4AVR-USB/src/sys.cpp:60
  #endif
  #if defined(PIN_VCP_DCD)
    pinControlRegister(PIN_VCP_DCD) = PORT_PULLUPEN_bm;
  #endif
  #if defined(PIN_VCP_DSR)
    pinControlRegister(PIN_VCP_DSR) = PORT_PULLUPEN_bm;
    1c98:	80 93 71 04 	sts	0x0471, r24	; 0x800471 <__TEXT_REGION_LENGTH__+0x7f0471>
/Users/askn/Collaborator/UPDI4AVR-USB/src/sys.cpp:63
  #endif
  #if defined(PIN_VCP_RI)
    pinControlRegister(PIN_VCP_RI) = PORT_PULLUPEN_bm;
    1c9c:	80 93 73 04 	sts	0x0473, r24	; 0x800473 <__TEXT_REGION_LENGTH__+0x7f0473>
/Users/askn/Collaborator/UPDI4AVR-USB/src/sys.cpp:90
    pinControlRegister(PIN_HV_SWITCH) = PORT_INVEN_bm;
    pinModeMacro(PIN_HV_SWITCH, OUTPUT);
  #endif
  #if defined(PIN_HV_POWER)
    /* Device power control: output positive logic */
    pinModeMacro(PIN_HV_POWER, OUTPUT);
    1ca0:	06 9a       	sbi	0x00, 6	; 0
    1ca2:	10 92 16 04 	sts	0x0416, r1	; 0x800416 <__TEXT_REGION_LENGTH__+0x7f0416>
/Users/askn/Collaborator/UPDI4AVR-USB/src/sys.cpp:91
    digitalWriteMacro(PIN_HV_POWER, HIGH);
    1ca6:	0e 9a       	sbi	0x01, 6	; 1
/Users/askn/Collaborator/UPDI4AVR-USB/src/sys.cpp:99
    /*
     * GPIO - USB
     */

  #if defined(PIN_USB_VDETECT)
    pinControlRegister(PIN_USB_VDETECT) = PORT_PULLUPEN_bm;
    1ca8:	80 93 b4 04 	sts	0x04B4, r24	; 0x8004b4 <__TEXT_REGION_LENGTH__+0x7f04b4>
/Users/askn/Collaborator/UPDI4AVR-USB/src/sys.cpp:108
     * GPIO - SYS
     */

  #if defined(PIN_SYS_SW0)
    /* SW0 detection: Input negative logic. */
    pinControlRegister(PIN_SYS_SW0) = PORT_PULLUPEN_bm | PORT_ISC_BOTHEDGES_gc;
    1cac:	29 e0       	ldi	r18, 0x09	; 9
    1cae:	20 93 b6 04 	sts	0x04B6, r18	; 0x8004b6 <__TEXT_REGION_LENGTH__+0x7f04b6>
/Users/askn/Collaborator/UPDI4AVR-USB/src/sys.cpp:124
    CCL_TRUTH0    = CCL_TRUTH_1_bm | CCL_TRUTH_2_bm;
    CCL_LUT0CTRLB = CCL_INSEL0_TCA0_gc | CCL_INSEL1_TCB1_gc;
    CCL_LUT0CTRLA = CCL_ENABLE_bm | CCL_OUTEN_bm; /* PIN_PC3 */
  #elif (CONFIG_HAL_TYPE == HAL_CNANO)
    /* PORTMUX LUT0OUT -> EVSYSOUTF -> PIN_PF2 Invert */
    pinControlRegister(PIN_PF2) = PORT_INVEN_bm;
    1cb2:	90 e8       	ldi	r25, 0x80	; 128
    1cb4:	90 93 b2 04 	sts	0x04B2, r25	; 0x8004b2 <__TEXT_REGION_LENGTH__+0x7f04b2>
/Users/askn/Collaborator/UPDI4AVR-USB/src/sys.cpp:125
    EVSYS_CHANNEL0 = EVSYS_CHANNEL_CCL_LUT0_gc;
    1cb8:	90 e1       	ldi	r25, 0x10	; 16
    1cba:	90 93 10 02 	sts	0x0210, r25	; 0x800210 <__TEXT_REGION_LENGTH__+0x7f0210>
/Users/askn/Collaborator/UPDI4AVR-USB/src/sys.cpp:126
    EVSYS_USEREVSYSEVOUTF = EVSYS_USER_CHANNEL0_gc;
    1cbe:	91 e0       	ldi	r25, 0x01	; 1
    1cc0:	90 93 2b 02 	sts	0x022B, r25	; 0x80022b <__TEXT_REGION_LENGTH__+0x7f022b>
/Users/askn/Collaborator/UPDI4AVR-USB/src/sys.cpp:128
    /* TRUTH0: 000 001 010 011 is ON */
    CCL_TRUTH0    = CCL_TRUTH_1_bm | CCL_TRUTH_2_bm;
    1cc4:	36 e0       	ldi	r19, 0x06	; 6
    1cc6:	30 93 cb 01 	sts	0x01CB, r19	; 0x8001cb <__TEXT_REGION_LENGTH__+0x7f01cb>
/Users/askn/Collaborator/UPDI4AVR-USB/src/sys.cpp:129
    CCL_LUT0CTRLB = CCL_INSEL0_TCA0_gc | CCL_INSEL1_TCB1_gc;
    1cca:	39 ea       	ldi	r19, 0xA9	; 169
    1ccc:	30 93 c9 01 	sts	0x01C9, r19	; 0x8001c9 <__TEXT_REGION_LENGTH__+0x7f01c9>
/Users/askn/Collaborator/UPDI4AVR-USB/src/sys.cpp:130
    CCL_LUT0CTRLA = CCL_ENABLE_bm;
    1cd0:	90 93 c8 01 	sts	0x01C8, r25	; 0x8001c8 <__TEXT_REGION_LENGTH__+0x7f01c8>
/Users/askn/Collaborator/UPDI4AVR-USB/src/sys.cpp:142
    CCL_LUT1CTRLA = CCL_ENABLE_bm | CCL_OUTEN_bm; /* PIN_PA6 */
  #endif

    /*** CCL enable ***/
    /* One of the CCL's is the LED output control. */
    CCL_CTRLA = CCL_RUNSTDBY_bm | CCL_ENABLE_bm;
    1cd4:	31 e4       	ldi	r19, 0x41	; 65
    1cd6:	30 93 c0 01 	sts	0x01C0, r19	; 0x8001c0 <__TEXT_REGION_LENGTH__+0x7f01c0>
/Users/askn/Collaborator/UPDI4AVR-USB/src/sys.cpp:149
    /*** TCA0 ***/
    /* TCA0 is split into two 8-bit timers. */
    /* The lower timer controls the blinking rate of the LED. */
    /* The top timer is used as a period timer */
    /* and as the output for the charge pump.  */
    TCA0_SPLIT_CTRLD = TCA_SPLIT_SPLITM_bm;
    1cda:	90 93 03 0a 	sts	0x0A03, r25	; 0x800a03 <__TEXT_REGION_LENGTH__+0x7f0a03>
/Users/askn/Collaborator/UPDI4AVR-USB/src/sys.cpp:150
    TCA0_SPLIT_LPER  = TCA0_STEP - 2;
    1cde:	33 ec       	ldi	r19, 0xC3	; 195
    1ce0:	30 93 26 0a 	sts	0x0A26, r19	; 0x800a26 <__TEXT_REGION_LENGTH__+0x7f0a26>
/Users/askn/Collaborator/UPDI4AVR-USB/src/sys.cpp:151
    TCA0_SPLIT_LCMP0 = TCA0_STEP / 2;
    1ce4:	32 e6       	ldi	r19, 0x62	; 98
    1ce6:	30 93 28 0a 	sts	0x0A28, r19	; 0x800a28 <__TEXT_REGION_LENGTH__+0x7f0a28>
/Users/askn/Collaborator/UPDI4AVR-USB/src/sys.cpp:158
    /*** TCB0 ***/
    /* The TCB0 timer is configured in the <timeout.cpp> module. */

    /*** TCB1 ***/
    /* TCB1 is used to control the LED blinking rate. */
    TCB1_CTRLB = TCB_ASYNC_bm | TCB_CNTMODE_PWM8_gc;
    1cea:	37 e4       	ldi	r19, 0x47	; 71
    1cec:	30 93 11 0b 	sts	0x0B11, r19	; 0x800b11 <__TEXT_REGION_LENGTH__+0x7f0b11>
/Users/askn/Collaborator/UPDI4AVR-USB/src/sys.cpp:159
    TCB1_CCMP  = TCB1_FLASH;
    1cf0:	49 ea       	ldi	r20, 0xA9	; 169
    1cf2:	55 e0       	ldi	r21, 0x05	; 5
    1cf4:	40 93 1c 0b 	sts	0x0B1C, r20	; 0x800b1c <__TEXT_REGION_LENGTH__+0x7f0b1c>
    1cf8:	50 93 1d 0b 	sts	0x0B1D, r21	; 0x800b1d <__TEXT_REGION_LENGTH__+0x7f0b1d>
/Users/askn/Collaborator/UPDI4AVR-USB/src/sys.cpp:160
    TCB1_CTRLA = TCB_RUNSTDBY_bm | TCB_ENABLE_bm | TCB_CLKSEL_EVENT_gc;
    1cfc:	3f e4       	ldi	r19, 0x4F	; 79
    1cfe:	30 93 10 0b 	sts	0x0B10, r19	; 0x800b10 <__TEXT_REGION_LENGTH__+0x7f0b10>
/Users/askn/Collaborator/UPDI4AVR-USB/src/timeout.cpp:25
#include "prototype.h"

namespace Timeout {

  void setup (void) {
    RTC_PITEVGENCTRLA = RTC_EVGEN0SEL_DIV32_gc | RTC_EVGEN1SEL_DIV128_gc;
    1d02:	34 e6       	ldi	r19, 0x64	; 100
    1d04:	30 93 56 01 	sts	0x0156, r19	; 0x800156 <__TEXT_REGION_LENGTH__+0x7f0156>
/Users/askn/Collaborator/UPDI4AVR-USB/src/timeout.cpp:26
    EVSYS_CHANNEL1 = EVSYS_CHANNEL_RTC_EVGEN0_gc; /* 1kHz periodic. */
    1d08:	80 93 11 02 	sts	0x0211, r24	; 0x800211 <__TEXT_REGION_LENGTH__+0x7f0211>
/Users/askn/Collaborator/UPDI4AVR-USB/src/timeout.cpp:27
    EVSYS_CHANNEL2 = EVSYS_CHANNEL_RTC_EVGEN1_gc; /* 32Hz periodic. */
    1d0c:	20 93 12 02 	sts	0x0212, r18	; 0x800212 <__TEXT_REGION_LENGTH__+0x7f0212>
/Users/askn/Collaborator/UPDI4AVR-USB/src/timeout.cpp:28
    EVSYS_USERTCB0COUNT = EVSYS_USER_CHANNEL1_gc; /* TCB0_CLK = 1kHz */
    1d10:	82 e0       	ldi	r24, 0x02	; 2
    1d12:	80 93 31 02 	sts	0x0231, r24	; 0x800231 <__TEXT_REGION_LENGTH__+0x7f0231>
/Users/askn/Collaborator/UPDI4AVR-USB/src/timeout.cpp:29
    EVSYS_USERTCB1COUNT = EVSYS_USER_CHANNEL2_gc; /* TCB1_CLK = 32Hz */
    1d16:	83 e0       	ldi	r24, 0x03	; 3
    1d18:	80 93 33 02 	sts	0x0233, r24	; 0x800233 <__TEXT_REGION_LENGTH__+0x7f0233>
/Users/askn/Collaborator/UPDI4AVR-USB/src/timeout.cpp:30
    RTC_PITCTRLA = RTC_PITEN_bm;
    1d1c:	90 93 50 01 	sts	0x0150, r25	; 0x800150 <__TEXT_REGION_LENGTH__+0x7f0150>
main():
/Users/askn/Collaborator/UPDI4AVR-USB/src/main.cpp:94
  Serial.print(F("__AVR_ARCH__ = ")).println(__AVR_ARCH__, DEC);
#endif

  SYS::setup();
  Timeout::setup();
  USART::setup();
    1d20:	77 db       	rcall	.-2322   	; 0x1410 <USART::setup()>
/Users/askn/Collaborator/UPDI4AVR-USB/src/main.cpp:96

  loop_until_bit_is_clear(WDT_STATUS, WDT_SYNCBUSY_bp);
    1d22:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <__TEXT_REGION_LENGTH__+0x7f0101>
    1d26:	80 fd       	sbrc	r24, 0
    1d28:	fc cf       	rjmp	.-8      	; 0x1d22 <main+0xaa>
/Users/askn/Collaborator/UPDI4AVR-USB/src/main.cpp:97
  _PROTECTED_WRITE(WDT_CTRLA, WDT_PERIOD_1KCLK_gc);
    1d2a:	88 ed       	ldi	r24, 0xD8	; 216
    1d2c:	98 e0       	ldi	r25, 0x08	; 8
    1d2e:	84 bf       	out	0x34, r24	; 52
    1d30:	90 93 00 01 	sts	0x0100, r25	; 0x800100 <__TEXT_REGION_LENGTH__+0x7f0100>
/Users/askn/Collaborator/UPDI4AVR-USB/src/main.cpp:99

  VPORTA_INTFLAGS = ~0;
    1d34:	8f ef       	ldi	r24, 0xFF	; 255
    1d36:	83 b9       	out	0x03, r24	; 3
/Users/askn/Collaborator/UPDI4AVR-USB/src/main.cpp:100
  VPORTC_INTFLAGS = ~0;
    1d38:	8b b9       	out	0x0b, r24	; 11
/Users/askn/Collaborator/UPDI4AVR-USB/src/main.cpp:101
  VPORTD_INTFLAGS = ~0;
    1d3a:	8f b9       	out	0x0f, r24	; 15
/Users/askn/Collaborator/UPDI4AVR-USB/src/main.cpp:102
  VPORTF_INTFLAGS = ~0;
    1d3c:	87 bb       	out	0x17, r24	; 23
/Users/askn/Collaborator/UPDI4AVR-USB/src/main.cpp:103
  interrupts();
    1d3e:	78 94       	sei
/Users/askn/Collaborator/UPDI4AVR-USB/src/main.cpp:109

  #if !defined(PIN_USB_VDETECT)
  delay_millis(250);
  USB::setup_device(true);
  #else
  SYS::LED_Flash();
    1d40:	0e 94 a2 05 	call	0xb44	; 0xb44 <SYS::LED_Flash()>
    1d44:	4e 01       	movw	r8, r28
    1d46:	25 e0       	ldi	r18, 0x05	; 5
    1d48:	82 0e       	add	r8, r18
    1d4a:	91 1c       	adc	r9, r1
request_class():
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:617
        EP_MEM.res_encoding.dwDTERate = 9600UL;
        EP_MEM.res_encoding.bDataBits = 8;
      }
      D1PRINTF(" GLE=");
      D1PRINTHEX(&EP_MEM.res_encoding, sizeof(LineEncoding_t));
      EP_RES.CNT = sizeof(LineEncoding_t);
    1d4c:	b7 e0       	ldi	r27, 0x07	; 7
    1d4e:	ab 2e       	mov	r10, r27
    1d50:	b1 2c       	mov	r11, r1
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:612
      EP_RES.CNT = 0;
    }
    else if (bRequest == 0x21) {  /* GET_LINE_ENCODING */
      memcpy(&EP_MEM.res_encoding, &_set_line_encoding, sizeof(LineEncoding_t));
      if (EP_MEM.res_encoding.dwDTERate == 0) {
        EP_MEM.res_encoding.dwDTERate = 9600UL;
    1d52:	10 e8       	ldi	r17, 0x80	; 128
    1d54:	41 2e       	mov	r4, r17
    1d56:	15 e2       	ldi	r17, 0x25	; 37
    1d58:	51 2e       	mov	r5, r17
    1d5a:	61 2c       	mov	r6, r1
    1d5c:	71 2c       	mov	r7, r1
request_standard():
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:577
    }
    else if (bRequest == 0x0A) {  /* GET_INTREFACE */
      /* It seems not to be used. */
      D1PRINTF("<SI:0>\r\n");
      EP_MEM.res_data[0] = 0;
      EP_RES.CNT = 1;
    1d5e:	cc 24       	eor	r12, r12
    1d60:	c3 94       	inc	r12
    1d62:	d1 2c       	mov	r13, r1
main():
/Users/askn/Collaborator/UPDI4AVR-USB/src/main.cpp:115
  #endif

  /* From here on, it's an endless loop. */
  D1PRINTF("<WAITING>\r\n");
  while (true) {
    wdt_reset();
    1d64:	a8 95       	wdr
handling_bus_events():
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:667
    }
    USB0_INTFLAGSB |= USB_EPSETUP_bp;
  }

  void handling_bus_events (void) {
    uint8_t busstate = USB0_INTFLAGSA;
    1d66:	10 91 0a 0c 	lds	r17, 0x0C0A	; 0x800c0a <__TEXT_REGION_LENGTH__+0x7f0c0a>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:668
    USB0_INTFLAGSA = busstate;
    1d6a:	10 93 0a 0c 	sts	0x0C0A, r17	; 0x800c0a <__TEXT_REGION_LENGTH__+0x7f0c0a>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:671
  #if defined(PIN_USB_VDETECT)
    /* This section is still experimental. */
    if (digitalReadMacro(PIN_USB_VDETECT)) {
    1d6e:	b4 9b       	sbis	0x16, 4	; 22
    1d70:	10 c0       	rjmp	.+32     	; 0x1d92 <main+0x11a>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:672
      if (!USB0_CTRLA) {
    1d72:	80 91 00 0c 	lds	r24, 0x0C00	; 0x800c00 <__TEXT_REGION_LENGTH__+0x7f0c00>
    1d76:	81 11       	cpse	r24, r1
    1d78:	15 c0       	rjmp	.+42     	; 0x1da4 <main+0x12c>
setup_device():
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:235
    EP_MEM.cci_header.wLength       = 2;
    EP_MEM.cci_wValue               = _state;
  }

  void setup_device (bool _force) {
    if (_led_mode != 3) SYS::LED_Flash();
    1d7a:	80 91 7d 60 	lds	r24, 0x607D	; 0x80607d <_led_mode>
    1d7e:	83 30       	cpi	r24, 0x03	; 3
    1d80:	11 f0       	breq	.+4      	; 0x1d86 <main+0x10e>
    1d82:	0e 94 a2 05 	call	0xb44	; 0xb44 <SYS::LED_Flash()>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:236
    USB0_ADDR = 0;
    1d86:	10 92 03 0c 	sts	0x0C03, r1	; 0x800c03 <__TEXT_REGION_LENGTH__+0x7f0c03>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:237
    if (USB0_CTRLA || _force) {
    1d8a:	80 91 00 0c 	lds	r24, 0x0C00	; 0x800c00 <__TEXT_REGION_LENGTH__+0x7f0c00>
    1d8e:	e5 da       	rcall	.-2614   	; 0x135a <USB::setup_device(bool) [clone .part.2]>
    1d90:	38 c0       	rjmp	.+112    	; 0x1e02 <main+0x18a>
handling_bus_events():
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:677
      if (!USB0_CTRLA) {
        setup_device(true);
        return;
      }
    }
    else if (USB0_CTRLA) {
    1d92:	80 91 00 0c 	lds	r24, 0x0C00	; 0x800c00 <__TEXT_REGION_LENGTH__+0x7f0c00>
    1d96:	88 23       	and	r24, r24
    1d98:	29 f0       	breq	.+10     	; 0x1da4 <main+0x12c>
reboot():
/Users/askn/Collaborator/UPDI4AVR-USB/src/sys.cpp:290
  void reboot (void) {
  #if defined(DEBUG)
    D0PRINTF("<REBOOT>\r\n");
    Serial.flush();
  #endif
    _PROTECTED_WRITE(RSTCTRL_SWRR, 1);
    1d9a:	88 ed       	ldi	r24, 0xD8	; 216
    1d9c:	91 e0       	ldi	r25, 0x01	; 1
    1d9e:	84 bf       	out	0x34, r24	; 52
    1da0:	90 93 41 00 	sts	0x0041, r25	; 0x800041 <__TEXT_REGION_LENGTH__+0x7f0041>
handling_bus_events():
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:693
    }
    if (bit_is_set(busstate, USB_RESUME_bp)) {
      D1PRINTF("<RESUME:%04X>\r\n", USB0_ADDR);
    }
  #endif
    if (bit_is_set(busstate, USB_SOF_bp)) {
    1da4:	17 ff       	sbrs	r17, 7
    1da6:	14 c0       	rjmp	.+40     	; 0x1dd0 <main+0x158>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:695
      /* If there is deferred data for a block transfer, it is sent here. */
      if (_sof_count > 0 && 0 == (--_sof_count)) {
    1da8:	80 91 1f 64 	lds	r24, 0x641F	; 0x80641f <_sof_count>
    1dac:	88 23       	and	r24, r24
    1dae:	81 f0       	breq	.+32     	; 0x1dd0 <main+0x158>
    1db0:	80 91 1f 64 	lds	r24, 0x641F	; 0x80641f <_sof_count>
    1db4:	81 50       	subi	r24, 0x01	; 1
    1db6:	80 93 1f 64 	sts	0x641F, r24	; 0x80641f <_sof_count>
    1dba:	81 11       	cpse	r24, r1
    1dbc:	09 c0       	rjmp	.+18     	; 0x1dd0 <main+0x158>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:696
        if (bit_is_set(EP_CDI.STATUS, USB_BUSNAK_bp) && _send_count > 0) {
    1dbe:	80 91 66 64 	lds	r24, 0x6466	; 0x806466 <EP_TABLE+0x40>
    1dc2:	81 ff       	sbrs	r24, 1
    1dc4:	05 c0       	rjmp	.+10     	; 0x1dd0 <main+0x158>
    1dc6:	80 91 22 64 	lds	r24, 0x6422	; 0x806422 <_send_count>
    1dca:	81 11       	cpse	r24, r1
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:697
          ep_cdi_listen();
    1dcc:	0e 94 80 01 	call	0x300	; 0x300 <USB::ep_cdi_listen()>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:702
        }
      }
    }
    if (bit_is_set(busstate, USB_SUSPEND_bp)
     || bit_is_set(busstate, USB_RESUME_bp)) {
    1dd0:	81 2f       	mov	r24, r17
    1dd2:	80 76       	andi	r24, 0x60	; 96
    1dd4:	41 f0       	breq	.+16     	; 0x1de6 <main+0x16e>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:705
      /* This implementation does not transition to power saving mode. */
      /* This is only passed when the USB cable is unplugged. */
      if (bit_is_set(GPCONF, GPCONF_USB_bp)) {
    1dd6:	e0 9b       	sbis	0x1c, 0	; 28
    1dd8:	05 c0       	rjmp	.+10     	; 0x1de4 <main+0x16c>
reboot():
/Users/askn/Collaborator/UPDI4AVR-USB/src/sys.cpp:290
    1dda:	88 ed       	ldi	r24, 0xD8	; 216
    1ddc:	91 e0       	ldi	r25, 0x01	; 1
    1dde:	84 bf       	out	0x34, r24	; 52
    1de0:	90 93 41 00 	sts	0x0041, r25	; 0x800041 <__TEXT_REGION_LENGTH__+0x7f0041>
handling_bus_events():
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:709
        /* System reboot */
        SYS::reboot();
      }
      bit_set(busstate, USB_RESET_bp);
    1de4:	10 61       	ori	r17, 0x10	; 16
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:711
    }
    if (bit_is_set(busstate, USB_RESET_bp)) {
    1de6:	14 ff       	sbrs	r17, 4
    1de8:	0c c0       	rjmp	.+24     	; 0x1e02 <main+0x18a>
setup_device():
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:235
    EP_MEM.cci_header.wLength       = 2;
    EP_MEM.cci_wValue               = _state;
  }

  void setup_device (bool _force) {
    if (_led_mode != 3) SYS::LED_Flash();
    1dea:	80 91 7d 60 	lds	r24, 0x607D	; 0x80607d <_led_mode>
    1dee:	83 30       	cpi	r24, 0x03	; 3
    1df0:	11 f0       	breq	.+4      	; 0x1df6 <main+0x17e>
    1df2:	0e 94 a2 05 	call	0xb44	; 0xb44 <SYS::LED_Flash()>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:236
    USB0_ADDR = 0;
    1df6:	10 92 03 0c 	sts	0x0C03, r1	; 0x800c03 <__TEXT_REGION_LENGTH__+0x7f0c03>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:237
    if (USB0_CTRLA || _force) {
    1dfa:	80 91 00 0c 	lds	r24, 0x0C00	; 0x800c00 <__TEXT_REGION_LENGTH__+0x7f0c00>
    1dfe:	81 11       	cpse	r24, r1
    1e00:	c6 cf       	rjmp	.-116    	; 0x1d8e <main+0x116>
is_ep_setup():
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:256
      set_cci_data(0x00);
      USB0_CTRLA = USB_ENABLE_bm | (USB_ENDPOINTS_MAX - 1);
    }
  }

  bool is_ep_setup (void) { return bit_is_set(EP_REQ.STATUS, USB_EPSETUP_bp); }
    1e02:	80 91 2e 64 	lds	r24, 0x642E	; 0x80642e <EP_TABLE+0x8>
main():
/Users/askn/Collaborator/UPDI4AVR-USB/src/main.cpp:119

    /*** USB control handling ***/
    USB::handling_bus_events();
    if (USB::is_ep_setup()) USB::handling_control_transactions();
    1e06:	84 ff       	sbrs	r24, 4
    1e08:	1f c0       	rjmp	.+62     	; 0x1e48 <main+0x1d0>
handling_control_transactions():
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:639
    return _listen;
  }

  void handling_control_transactions (void) {
    bool _listen = false;
    uint8_t bmRequestType = EP_MEM.req_data.bmRequestType;
    1e0a:	10 91 06 63 	lds	r17, 0x6306	; 0x806306 <EP_MEM>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:643
    D1PRINTF("RQ=%02X:%04X:%02X:%02X:%04X:%04X:%04X\r\n",
      EP_REQ.STATUS, EP_REQ.CNT, EP_MEM.req_data.bmRequestType, EP_MEM.req_data.bRequest,
      EP_MEM.req_data.wValue, EP_MEM.req_data.wIndex, EP_MEM.req_data.wLength);
    if (bit_is_clear(bmRequestType, 7)) ep_req_listen();
    1e0e:	17 ff       	sbrs	r17, 7
    1e10:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <USB::ep_req_listen()>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:644
    bmRequestType &= (3 << 5);
    1e14:	10 76       	andi	r17, 0x60	; 96
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:645
    if (bmRequestType == (0 << 5)) {
    1e16:	09 f0       	breq	.+2      	; 0x1e1a <main+0x1a2>
    1e18:	f3 c1       	rjmp	.+998    	; 0x2200 <__DATA_REGION_LENGTH__+0x200>
request_standard():
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:525
  #endif
  }

  bool request_standard (void) {
    bool _listen = true;
    uint8_t bRequest = EP_MEM.req_data.bRequest;
    1e1a:	80 91 07 63 	lds	r24, 0x6307	; 0x806307 <EP_MEM+0x1>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:526
    if (bRequest == 0x00) {       /* GET_STATUS */
    1e1e:	81 11       	cpse	r24, r1
    1e20:	83 c0       	rjmp	.+262    	; 0x1f28 <main+0x2b0>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:527
      EP_MEM.res_data[0] = 0;
    1e22:	10 92 0e 63 	sts	0x630E, r1	; 0x80630e <EP_MEM+0x8>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:528
      EP_MEM.res_data[1] = 0;
    1e26:	10 92 0f 63 	sts	0x630F, r1	; 0x80630f <EP_MEM+0x9>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:529
      EP_RES.CNT = 2;
    1e2a:	82 e0       	ldi	r24, 0x02	; 2
    1e2c:	90 e0       	ldi	r25, 0x00	; 0
    1e2e:	80 93 38 64 	sts	0x6438, r24	; 0x806438 <EP_TABLE+0x12>
    1e32:	90 93 39 64 	sts	0x6439, r25	; 0x806439 <EP_TABLE+0x13>
handling_control_transactions():
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:657
    else if (bmRequestType == (2 << 5)) {
      _listen = request_vendor();
    }
  #endif
    if (_listen) {
      ep_res_listen();
    1e36:	0e 94 c6 01 	call	0x38c	; 0x38c <USB::ep_res_listen()>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:658
      ep_req_listen();
    1e3a:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <USB::ep_req_listen()>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:663
    }
    else {
      ep0_stalled();
    }
    USB0_INTFLAGSB |= USB_EPSETUP_bp;
    1e3e:	80 91 0b 0c 	lds	r24, 0x0C0B	; 0x800c0b <__TEXT_REGION_LENGTH__+0x7f0c0b>
    1e42:	84 60       	ori	r24, 0x04	; 4
    1e44:	80 93 0b 0c 	sts	0x0C0B, r24	; 0x800c0b <__TEXT_REGION_LENGTH__+0x7f0c0b>
main():
/Users/askn/Collaborator/UPDI4AVR-USB/src/main.cpp:121

    if      (bit_is_set(GPCONF, GPCONF_FAL_bp)) SYS::reset_enter();
    1e48:	e7 9b       	sbis	0x1c, 7	; 28
    1e4a:	69 c2       	rjmp	.+1234   	; 0x231e <__DATA_REGION_LENGTH__+0x31e>
reset_enter():
/Users/askn/Collaborator/UPDI4AVR-USB/src/sys.cpp:237
  /*
   * Executed when SW0 is detected as being pressed.
   * May be called multiple times due to chattering.
   */
  void reset_enter (void) {
    if (bit_is_set(PGCONF, PGCONF_UPDI_bp)) return;
    1e4c:	e8 99       	sbic	0x1d, 0	; 29
    1e4e:	1f c0       	rjmp	.+62     	; 0x1e8e <main+0x216>
LED_TCB1():
/Users/askn/Collaborator/UPDI4AVR-USB/src/sys.cpp:180
      _led_mode = 1;
    }
  }

  void LED_TCB1 (uint8_t _mode, uint16_t _ccmp) {
    if (_led_mode != _mode) {
    1e50:	80 91 7d 60 	lds	r24, 0x607D	; 0x80607d <_led_mode>
    1e54:	83 30       	cpi	r24, 0x03	; 3
    1e56:	81 f0       	breq	.+32     	; 0x1e78 <main+0x200>
/Users/askn/Collaborator/UPDI4AVR-USB/src/sys.cpp:181
      TCA0_SPLIT_CTRLA = 0;
    1e58:	10 92 00 0a 	sts	0x0A00, r1	; 0x800a00 <__TEXT_REGION_LENGTH__+0x7f0a00>
/Users/askn/Collaborator/UPDI4AVR-USB/src/sys.cpp:182
      TCB1_CNTL = 0;
    1e5c:	10 92 1a 0b 	sts	0x0B1A, r1	; 0x800b1a <__TEXT_REGION_LENGTH__+0x7f0b1a>
/Users/askn/Collaborator/UPDI4AVR-USB/src/sys.cpp:183
      TCB1_CCMP = _ccmp;
    1e60:	89 ea       	ldi	r24, 0xA9	; 169
    1e62:	95 e5       	ldi	r25, 0x55	; 85
    1e64:	80 93 1c 0b 	sts	0x0B1C, r24	; 0x800b1c <__TEXT_REGION_LENGTH__+0x7f0b1c>
    1e68:	90 93 1d 0b 	sts	0x0B1D, r25	; 0x800b1d <__TEXT_REGION_LENGTH__+0x7f0b1d>
/Users/askn/Collaborator/UPDI4AVR-USB/src/sys.cpp:184
      TCB1_CTRLA = TCB_RUNSTDBY_bm | TCB_ENABLE_bm | TCB_CLKSEL_EVENT_gc;
    1e6c:	8f e4       	ldi	r24, 0x4F	; 79
    1e6e:	80 93 10 0b 	sts	0x0B10, r24	; 0x800b10 <__TEXT_REGION_LENGTH__+0x7f0b10>
/Users/askn/Collaborator/UPDI4AVR-USB/src/sys.cpp:185
      _led_mode = _mode;
    1e72:	83 e0       	ldi	r24, 0x03	; 3
    1e74:	80 93 7d 60 	sts	0x607D, r24	; 0x80607d <_led_mode>
reset_enter():
/Users/askn/Collaborator/UPDI4AVR-USB/src/sys.cpp:239
   * May be called multiple times due to chattering.
   */
  void reset_enter (void) {
    if (bit_is_set(PGCONF, PGCONF_UPDI_bp)) return;
    LED_Blink();
    if (_jtag_arch == 5) {
    1e78:	80 91 88 60 	lds	r24, 0x6088	; 0x806088 <_jtag_arch>
    1e7c:	85 30       	cpi	r24, 0x05	; 5
    1e7e:	29 f4       	brne	.+10     	; 0x1e8a <main+0x212>
/Users/askn/Collaborator/UPDI4AVR-USB/src/sys.cpp:245
      /* 
       * Puts a tinyAVR-0 which does not have a reset pad into reset state.
       * This applies to all chips which have an enabled UPDI pad.
       * Does not affect TPI/PDI types.
       */
      _updi_bitmap[10] = 0x59; /* SYSRST */
    1e80:	89 e5       	ldi	r24, 0x59	; 89
    1e82:	80 93 24 60 	sts	0x6024, r24	; 0x806024 <SYS::_updi_bitmap+0xa>
/Users/askn/Collaborator/UPDI4AVR-USB/src/sys.cpp:246
      send_bitmap(_updi_bitmap, sizeof(_updi_bitmap) * 8);
    1e86:	0e 94 41 01 	call	0x282	; 0x282 <SYS::send_bitmap(unsigned char const*, unsigned int) [clone .constprop.7]>
/Users/askn/Collaborator/UPDI4AVR-USB/src/sys.cpp:248
    }
    openDrainWriteMacro(PIN_PG_TRST, LOW);
    1e8a:	01 9a       	sbi	0x00, 1	; 0
/Users/askn/Collaborator/UPDI4AVR-USB/src/sys.cpp:250
    D1PRINTF("<RST:IN>\r\n");
    bit_clear(GPCONF, GPCONF_FAL_bp);
    1e8c:	e7 98       	cbi	0x1c, 7	; 28
main():
/Users/askn/Collaborator/UPDI4AVR-USB/src/main.cpp:124
    else if (bit_is_set(GPCONF, GPCONF_RIS_bp)) SYS::reset_leave();

    if (bit_is_clear(GPCONF, GPCONF_USB_bp)) continue;
    1e8e:	e0 9b       	sbis	0x1c, 0	; 28
    1e90:	69 cf       	rjmp	.-302    	; 0x1d64 <main+0xec>
/Users/askn/Collaborator/UPDI4AVR-USB/src/main.cpp:130

    /*** CMSIS-DAP VCP transceiver ***/
  #if defined(CONFIG_VCP_9BIT_SUPPORT)
    if (bit_is_set(GPCONF, GPCONF_VCP_bp)) usart_transmitter();
  #else
    if (bit_is_set(GPCONF, GPCONF_VCP_bp)) USB::vcp_transceiver();
    1e92:	e1 9b       	sbis	0x1c, 1	; 28
    1e94:	8d c2       	rjmp	.+1306   	; 0x23b0 <__DATA_REGION_LENGTH__+0x3b0>
vcp_transceiver():
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:502
    if (bit_is_clear(GPCONF, GPCONF_BRK_bp)
  #if defined(CONFIG_VCP_CTS_ENABLE)
     && !digitalReadMacro(PIN_VCP_CTS)
  #endif
     && bit_is_set(USART0_STATUS, USART_DREIF_bp)
     && read_available()) {
    1e96:	e3 99       	sbic	0x1c, 3	; 28
    1e98:	14 c0       	rjmp	.+40     	; 0x1ec2 <main+0x24a>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:501
  void vcp_transceiver (void) {
    if (bit_is_clear(GPCONF, GPCONF_BRK_bp)
  #if defined(CONFIG_VCP_CTS_ENABLE)
     && !digitalReadMacro(PIN_VCP_CTS)
  #endif
     && bit_is_set(USART0_STATUS, USART_DREIF_bp)
    1e9a:	80 91 04 08 	lds	r24, 0x0804	; 0x800804 <__TEXT_REGION_LENGTH__+0x7f0804>
    1e9e:	85 ff       	sbrs	r24, 5
    1ea0:	10 c0       	rjmp	.+32     	; 0x1ec2 <main+0x24a>
read_available():
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:458
    return _c;
  }

  bool read_available (void) {
    uint8_t _s = 0;
    if (bit_is_set(EP_CDO.STATUS, USB_BUSNAK_bp) && bit_is_set(GPCONF, GPCONF_VCP_bp)) {
    1ea2:	80 91 5e 64 	lds	r24, 0x645E	; 0x80645e <EP_TABLE+0x38>
    1ea6:	81 ff       	sbrs	r24, 1
    1ea8:	0c c0       	rjmp	.+24     	; 0x1ec2 <main+0x24a>
    1eaa:	e1 9b       	sbis	0x1c, 1	; 28
    1eac:	0a c0       	rjmp	.+20     	; 0x1ec2 <main+0x24a>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:459
      _s = EP_CDO.CNT - _recv_count;
    1eae:	20 91 60 64 	lds	r18, 0x6460	; 0x806460 <EP_TABLE+0x3a>
    1eb2:	30 91 61 64 	lds	r19, 0x6461	; 0x806461 <EP_TABLE+0x3b>
    1eb6:	80 91 21 64 	lds	r24, 0x6421	; 0x806421 <_recv_count>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:460
      if (_s == 0) ep_cdo_listen();
    1eba:	82 13       	cpse	r24, r18
    1ebc:	5a c2       	rjmp	.+1204   	; 0x2372 <__DATA_REGION_LENGTH__+0x372>
    1ebe:	0e 94 6f 01 	call	0x2de	; 0x2de <USB::ep_cdo_listen()>
main():
/Users/askn/Collaborator/UPDI4AVR-USB/src/main.cpp:135
  #endif
    else USB::read_drop();

    /*** If the break value is between 1 and 65534, it will count down. ***/
    if (bit_is_set(GPCONF, GPCONF_BRK_bp)) USB::cci_break_count();
    1ec2:	e3 9b       	sbis	0x1c, 3	; 28
    1ec4:	18 c0       	rjmp	.+48     	; 0x1ef6 <main+0x27e>
cci_break_count():
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:397
    bit_clear(GPCONF, GPCONF_BRK_bp);
  }

  void cci_break_count (void) {
    /* If the break value is between 1 and 65534, it will count down. */
    if ((_send_break + 1) > 1) {
    1ec6:	80 91 23 64 	lds	r24, 0x6423	; 0x806423 <_send_break>
    1eca:	90 91 24 64 	lds	r25, 0x6424	; 0x806424 <_send_break+0x1>
    1ece:	9c 01       	movw	r18, r24
    1ed0:	2f 5f       	subi	r18, 0xFF	; 255
    1ed2:	3f 4f       	sbci	r19, 0xFF	; 255
    1ed4:	22 30       	cpi	r18, 0x02	; 2
    1ed6:	31 05       	cpc	r19, r1
    1ed8:	70 f0       	brcs	.+28     	; 0x1ef6 <main+0x27e>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:398
      if (_send_break > USB_CCI_INTERVAL) {
    1eda:	85 30       	cpi	r24, 0x05	; 5
    1edc:	91 05       	cpc	r25, r1
    1ede:	08 f4       	brcc	.+2      	; 0x1ee2 <main+0x26a>
    1ee0:	6c c2       	rjmp	.+1240   	; 0x23ba <__DATA_REGION_LENGTH__+0x3ba>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:399
        _send_break -= USB_CCI_INTERVAL;
    1ee2:	04 97       	sbiw	r24, 0x04	; 4
    1ee4:	80 93 23 64 	sts	0x6423, r24	; 0x806423 <_send_break>
    1ee8:	90 93 24 64 	sts	0x6424, r25	; 0x806424 <_send_break+0x1>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:400
        if (bit_is_set(EP_CCI.STATUS, USB_BUSNAK_bp))
    1eec:	80 91 56 64 	lds	r24, 0x6456	; 0x806456 <EP_TABLE+0x30>
    1ef0:	81 fd       	sbrc	r24, 1
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:401
          ep_cci_listen();
    1ef2:	0e 94 b4 01 	call	0x368	; 0x368 <USB::ep_cci_listen()>
is_not_dap():
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:257
      USB0_CTRLA = USB_ENABLE_bm | (USB_ENDPOINTS_MAX - 1);
    }
  }

  bool is_ep_setup (void) { return bit_is_set(EP_REQ.STATUS, USB_EPSETUP_bp); }
  bool is_not_dap (void) { return bit_is_clear(EP_DPO.STATUS, USB_BUSNAK_bp); }
    1ef6:	80 91 4e 64 	lds	r24, 0x644E	; 0x80644e <EP_TABLE+0x28>
main():
/Users/askn/Collaborator/UPDI4AVR-USB/src/main.cpp:138

    /*** If CMSIS-DAP is not received, return to the top. ***/
    if (USB::is_not_dap()) continue;
    1efa:	81 ff       	sbrs	r24, 1
    1efc:	33 cf       	rjmp	.-410    	; 0x1d64 <main+0xec>
dap_command_check():
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:52
   * Command numbers 0x80 and above are vendor extensions, EDBG Payload uses 0x80 and x81.
   * Additionally, 0x82 is reserved for device event notification.
   */
  bool dap_command_check (void) {
    bool _result = false;
    uint8_t _cmd = EP_MEM.dap_data[0];
    1efe:	90 91 1e 63 	lds	r25, 0x631E	; 0x80631e <EP_MEM+0x18>
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:53
    uint8_t _sub = EP_MEM.dap_data[1];
    1f02:	80 91 1f 63 	lds	r24, 0x631F	; 0x80631f <EP_MEM+0x19>
ep_dpi_pending():
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:260
  void ep_req_pending (void) { loop_until_bit_is_set(EP_REQ.STATUS, USB_BUSNAK_bp); }
  void ep_res_pending (void) { loop_until_bit_is_set(EP_RES.STATUS, USB_BUSNAK_bp); }
  void ep_dpi_pending (void) { loop_until_bit_is_set(EP_DPI.STATUS, USB_BUSNAK_bp); }
    1f06:	20 91 46 64 	lds	r18, 0x6446	; 0x806446 <EP_TABLE+0x20>
    1f0a:	21 ff       	sbrs	r18, 1
    1f0c:	fc cf       	rjmp	.-8      	; 0x1f06 <main+0x28e>
dap_command_check():
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:65
     * and the data is sent and received with a fixed length of 64 bytes,
     * determined by the value specified in the HID Report.
     * A maximum of 15 chunks is possible,
     * resulting in a maximum payload length of 900 bytes.
     */
    if (_cmd == 0x80) {             /* DAP_EDBG_VENDOR_AVR_CMD */
    1f0e:	90 38       	cpi	r25, 0x80	; 128
    1f10:	09 f0       	breq	.+2      	; 0x1f14 <main+0x29c>
    1f12:	ca c2       	rjmp	.+1428   	; 0x24a8 <__DATA_REGION_LENGTH__+0x4a8>
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:66
      uint8_t _endf = _sub & 0x0F;
    1f14:	f8 2f       	mov	r31, r24
    1f16:	ff 70       	andi	r31, 0x0F	; 15
    1f18:	fd 83       	std	Y+5, r31	; 0x05
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:70
      uint8_t _frag = _sub >> 4;
      uint8_t _size = EP_MEM.dap_data[3];
      size_t  _ofst = (_frag - 1) * 60;
      if (_endf >= 10) {
    1f1a:	fa 30       	cpi	r31, 0x0A	; 10
    1f1c:	08 f4       	brcc	.+2      	; 0x1f20 <main+0x2a8>
    1f1e:	54 c2       	rjmp	.+1192   	; 0x23c8 <__DATA_REGION_LENGTH__+0x3c8>
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:73
        /* Only a maximum of 540 bytes : 9 fragment records is accepted. */
        D1PRINTF("<EDBG_FAIL>\r\n");
        EP_MEM.dap_data[1] = 0x00;  /* EDBG_RSP_FAIL */
    1f20:	10 92 1f 63 	sts	0x631F, r1	; 0x80631f <EP_MEM+0x19>
main():
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:51
  /*
   * Command numbers 0x80 and above are vendor extensions, EDBG Payload uses 0x80 and x81.
   * Additionally, 0x82 is reserved for device event notification.
   */
  bool dap_command_check (void) {
    bool _result = false;
    1f24:	00 e0       	ldi	r16, 0x00	; 0
    1f26:	86 c2       	rjmp	.+1292   	; 0x2434 <__DATA_REGION_LENGTH__+0x434>
request_standard():
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:531
    if (bRequest == 0x00) {       /* GET_STATUS */
      EP_MEM.res_data[0] = 0;
      EP_MEM.res_data[1] = 0;
      EP_RES.CNT = 2;
    }
    else if (bRequest == 0x01) {  /* CLEAR_FEATURE */
    1f28:	81 30       	cpi	r24, 0x01	; 1
    1f2a:	d9 f4       	brne	.+54     	; 0x1f62 <main+0x2ea>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:533
      D1PRINTF(" CF=%02X:%02X\r\n", EP_MEM.req_data.wValue, EP_MEM.req_data.wIndex);
      if (0 == (uint8_t)EP_MEM.req_data.wValue) {
    1f2c:	80 91 08 63 	lds	r24, 0x6308	; 0x806308 <EP_MEM+0x2>
    1f30:	81 11       	cpse	r24, r1
    1f32:	12 c0       	rjmp	.+36     	; 0x1f58 <main+0x2e0>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:535
        /* Assumes that an Endpoint number is passed. */
        uint8_t _EP = EP_MEM.req_data.wIndex;
    1f34:	e0 91 0a 63 	lds	r30, 0x630A	; 0x80630a <EP_MEM+0x4>
    1f38:	f0 91 0b 63 	lds	r31, 0x630B	; 0x80630b <EP_MEM+0x5>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:536
        loop_until_bit_is_clear(USB0_INTFLAGSB, USB_RMWBUSY_bp);
    1f3c:	80 91 0b 0c 	lds	r24, 0x0C0B	; 0x800c0b <__TEXT_REGION_LENGTH__+0x7f0c0b>
    1f40:	82 fd       	sbrc	r24, 2
    1f42:	fc cf       	rjmp	.-8      	; 0x1f3c <main+0x2c4>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:537
        USB_EP_STATUS_CLR(_EP) = USB_STALLED_bm | USB_TOGGLE_bm;
    1f44:	f5 95       	asr	r31
    1f46:	e7 95       	ror	r30
    1f48:	f5 95       	asr	r31
    1f4a:	e7 95       	ror	r30
    1f4c:	ef 73       	andi	r30, 0x3F	; 63
    1f4e:	ff 27       	eor	r31, r31
    1f50:	e0 5c       	subi	r30, 0xC0	; 192
    1f52:	f3 4f       	sbci	r31, 0xF3	; 243
    1f54:	89 e0       	ldi	r24, 0x09	; 9
    1f56:	80 83       	st	Z, r24
request_class():
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:629
    else if (bRequest == 0x23) {  /* SET_SEND_BREAK */
      D1PRINTF(" SB=%04X\r\n", EP_MEM.req_data.wValue);
      _send_break = EP_MEM.req_data.wValue;
      if (_send_break) break_on();
      else break_off();
      EP_RES.CNT = 0;
    1f58:	10 92 38 64 	sts	0x6438, r1	; 0x806438 <EP_TABLE+0x12>
    1f5c:	10 92 39 64 	sts	0x6439, r1	; 0x806439 <EP_TABLE+0x13>
    1f60:	6a cf       	rjmp	.-300    	; 0x1e36 <main+0x1be>
request_standard():
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:541
        loop_until_bit_is_clear(USB0_INTFLAGSB, USB_RMWBUSY_bp);
        USB_EP_STATUS_CLR(_EP) = USB_STALLED_bm | USB_TOGGLE_bm;
      }
      EP_RES.CNT = 0;
    }
    else if (bRequest == 0x04) {  /* SET_FEATURE */
    1f62:	84 30       	cpi	r24, 0x04	; 4
    1f64:	c9 f3       	breq	.-14     	; 0x1f58 <main+0x2e0>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:546
      /* If used, it will be ignored. */
      D1PRINTF(" SF=%02X:%02X\r\n", EP_MEM.req_data.wValue, EP_MEM.req_data.wIndex);
      EP_RES.CNT = 0;
    }
    else if (bRequest == 0x05) {  /* SET_ADDRESS */
    1f66:	85 30       	cpi	r24, 0x05	; 5
    1f68:	61 f4       	brne	.+24     	; 0x1f82 <main+0x30a>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:547
      uint8_t _addr = EP_MEM.req_data.wValue & 0x7F;
    1f6a:	10 91 08 63 	lds	r17, 0x6308	; 0x806308 <EP_MEM+0x2>
    1f6e:	1f 77       	andi	r17, 0x7F	; 127
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:548
      ep_res_listen();
    1f70:	0e 94 c6 01 	call	0x38c	; 0x38c <USB::ep_res_listen()>
ep_res_pending():
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:259
  }

  bool is_ep_setup (void) { return bit_is_set(EP_REQ.STATUS, USB_EPSETUP_bp); }
  bool is_not_dap (void) { return bit_is_clear(EP_DPO.STATUS, USB_BUSNAK_bp); }
  void ep_req_pending (void) { loop_until_bit_is_set(EP_REQ.STATUS, USB_BUSNAK_bp); }
  void ep_res_pending (void) { loop_until_bit_is_set(EP_RES.STATUS, USB_BUSNAK_bp); }
    1f74:	80 91 36 64 	lds	r24, 0x6436	; 0x806436 <EP_TABLE+0x10>
    1f78:	81 ff       	sbrs	r24, 1
    1f7a:	fc cf       	rjmp	.-8      	; 0x1f74 <main+0x2fc>
request_standard():
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:550
    }
    else if (bRequest == 0x05) {  /* SET_ADDRESS */
      uint8_t _addr = EP_MEM.req_data.wValue & 0x7F;
      ep_res_listen();
      ep_res_pending();
      USB0_ADDR = _addr;
    1f7c:	10 93 03 0c 	sts	0x0C03, r17	; 0x800c03 <__TEXT_REGION_LENGTH__+0x7f0c03>
    1f80:	eb cf       	rjmp	.-42     	; 0x1f58 <main+0x2e0>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:554
      D1PRINTF(" USB0_ADDR=%d\r\n", _addr);
      EP_RES.CNT = 0;
    }
    else if (bRequest == 0x06) {  /* GET_DESCRIPTOR */
    1f82:	86 30       	cpi	r24, 0x06	; 6
    1f84:	09 f0       	breq	.+2      	; 0x1f88 <main+0x310>
    1f86:	1e c1       	rjmp	.+572    	; 0x21c4 <__DATA_REGION_LENGTH__+0x1c4>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:555
      size_t _length = EP_MEM.req_data.wLength;
    1f88:	e0 90 0c 63 	lds	r14, 0x630C	; 0x80630c <EP_MEM+0x6>
    1f8c:	f0 90 0d 63 	lds	r15, 0x630D	; 0x80630d <EP_MEM+0x7>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:556
      size_t _size = get_descriptor((uint8_t*)&EP_MEM.res_data, EP_MEM.req_data.wValue);
    1f90:	80 91 08 63 	lds	r24, 0x6308	; 0x806308 <EP_MEM+0x2>
    1f94:	90 91 09 63 	lds	r25, 0x6309	; 0x806309 <EP_MEM+0x3>
get_descriptor():
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:154

  size_t get_descriptor (uint8_t* _buffer, uint16_t _index) {
    uint8_t* _pgmem = 0;
    size_t   _size = 0;
    uint8_t  _type = _index >> 8;
    if (_type == 0x01) {          /* DEVICE */
    1f98:	91 30       	cpi	r25, 0x01	; 1
    1f9a:	01 f5       	brne	.+64     	; 0x1fdc <main+0x364>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:157
      _pgmem = (uint8_t*)&device_descriptor;
      _size = sizeof(device_descriptor);
      memcpy_P(_buffer, _pgmem, _size);
    1f9c:	42 e1       	ldi	r20, 0x12	; 18
    1f9e:	50 e0       	ldi	r21, 0x00	; 0
    1fa0:	62 eb       	ldi	r22, 0xB2	; 178
    1fa2:	71 e0       	ldi	r23, 0x01	; 1
    1fa4:	8e e0       	ldi	r24, 0x0E	; 14
    1fa6:	93 e6       	ldi	r25, 0x63	; 99
    1fa8:	60 d5       	rcall	.+2752   	; 0x2a6a <memcpy_P>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:158
      uint32_t _vidpid = *((uint32_t*)EEPROM_START);
    1faa:	80 91 00 14 	lds	r24, 0x1400	; 0x801400 <__TEXT_REGION_LENGTH__+0x7f1400>
    1fae:	90 91 01 14 	lds	r25, 0x1401	; 0x801401 <__TEXT_REGION_LENGTH__+0x7f1401>
    1fb2:	a0 91 02 14 	lds	r26, 0x1402	; 0x801402 <__TEXT_REGION_LENGTH__+0x7f1402>
    1fb6:	b0 91 03 14 	lds	r27, 0x1403	; 0x801403 <__TEXT_REGION_LENGTH__+0x7f1403>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:159
      if (_vidpid + 1) _CAPS32(_buffer[8])->dword = _vidpid;
    1fba:	8f 3f       	cpi	r24, 0xFF	; 255
    1fbc:	4f ef       	ldi	r20, 0xFF	; 255
    1fbe:	94 07       	cpc	r25, r20
    1fc0:	a4 07       	cpc	r26, r20
    1fc2:	b4 07       	cpc	r27, r20
    1fc4:	41 f0       	breq	.+16     	; 0x1fd6 <main+0x35e>
    1fc6:	80 93 16 63 	sts	0x6316, r24	; 0x806316 <EP_MEM+0x10>
    1fca:	90 93 17 63 	sts	0x6317, r25	; 0x806317 <EP_MEM+0x11>
    1fce:	a0 93 18 63 	sts	0x6318, r26	; 0x806318 <EP_MEM+0x12>
    1fd2:	b0 93 19 63 	sts	0x6319, r27	; 0x806319 <EP_MEM+0x13>
main():
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:161
      D1PRINTF(" VID:PID=%04X:%04X\r\n", _CAPS16(_buffer[8])->word, _CAPS16(_buffer[10])->word);
      return _size;
    1fd6:	02 e1       	ldi	r16, 0x12	; 18
    1fd8:	10 e0       	ldi	r17, 0x00	; 0
    1fda:	1d c0       	rjmp	.+58     	; 0x2016 <__DATA_REGION_LENGTH__+0x16>
get_descriptor():
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:163
    }
    else if (_type == 0x02) {     /* CONFIGURATION */
    1fdc:	92 30       	cpi	r25, 0x02	; 2
    1fde:	09 f4       	brne	.+2      	; 0x1fe2 <main+0x36a>
    1fe0:	d9 c0       	rjmp	.+434    	; 0x2194 <__DATA_REGION_LENGTH__+0x194>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:167
      _pgmem = (uint8_t*)&current_descriptor;
      _size = sizeof(current_descriptor);
    }
    else if (_type == 0x06) {     /* QUALIFIER */
    1fe2:	96 30       	cpi	r25, 0x06	; 6
    1fe4:	09 f4       	brne	.+2      	; 0x1fe8 <main+0x370>
    1fe6:	df c0       	rjmp	.+446    	; 0x21a6 <__DATA_REGION_LENGTH__+0x1a6>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:171
      _pgmem = (uint8_t*)&qualifier_descriptor;
      _size = sizeof(qualifier_descriptor);
    }
    else if (_type == 0x21) {     /* HID */
    1fe8:	91 32       	cpi	r25, 0x21	; 33
    1fea:	09 f4       	brne	.+2      	; 0x1fee <main+0x376>
    1fec:	e1 c0       	rjmp	.+450    	; 0x21b0 <__DATA_REGION_LENGTH__+0x1b0>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:175
      _pgmem = (uint8_t*)&current_descriptor + 18;
      _size = 9;
    }
    else if (_type == 0x22) {     /* REPORT */
    1fee:	92 32       	cpi	r25, 0x22	; 34
    1ff0:	09 f4       	brne	.+2      	; 0x1ff4 <main+0x37c>
    1ff2:	e3 c0       	rjmp	.+454    	; 0x21ba <__DATA_REGION_LENGTH__+0x1ba>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:179
      _pgmem = (uint8_t*)&report_descriptor;
      _size = sizeof(report_descriptor);
    }
    else if (_index == 0x0300) {  /* LANGUAGE */
    1ff4:	81 15       	cp	r24, r1
    1ff6:	e3 e0       	ldi	r30, 0x03	; 3
    1ff8:	9e 07       	cpc	r25, r30
    1ffa:	51 f5       	brne	.+84     	; 0x2050 <__DATA_REGION_LENGTH__+0x50>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:181
      _size = 4;
      *_buffer++ = 4;
    1ffc:	84 e0       	ldi	r24, 0x04	; 4
    1ffe:	80 93 0e 63 	sts	0x630E, r24	; 0x80630e <EP_MEM+0x8>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:182
      *_buffer++ = 3;
    2002:	93 e0       	ldi	r25, 0x03	; 3
    2004:	90 93 0f 63 	sts	0x630F, r25	; 0x80630f <EP_MEM+0x9>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:183
      *_buffer++ = 0x09;
    2008:	99 e0       	ldi	r25, 0x09	; 9
    200a:	90 93 10 63 	sts	0x6310, r25	; 0x806310 <EP_MEM+0xa>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:184
      *_buffer++ = 0x04;
    200e:	80 93 11 63 	sts	0x6311, r24	; 0x806311 <EP_MEM+0xb>
main():
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:185
      return _size;
    2012:	04 e0       	ldi	r16, 0x04	; 4
    2014:	10 e0       	ldi	r17, 0x00	; 0
    2016:	c7 01       	movw	r24, r14
    2018:	0e 15       	cp	r16, r14
    201a:	1f 05       	cpc	r17, r15
    201c:	08 f4       	brcc	.+2      	; 0x2020 <__DATA_REGION_LENGTH__+0x20>
    201e:	c8 01       	movw	r24, r16
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:212
          for (uint8_t _i = 0; _i < 4; _i++) {
            uint8_t _c = *_p++;
            *_buffer++ = btoh(_c >> 4); *_buffer++ = 0;
            *_buffer++ = btoh(_c     ); *_buffer++ = 0;
          }
          return 22;
    2020:	98 01       	movw	r18, r16
    2022:	8c 01       	movw	r16, r24
request_standard():
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:557
      EP_RES.CNT = 0;
    }
    else if (bRequest == 0x06) {  /* GET_DESCRIPTOR */
      size_t _length = EP_MEM.req_data.wLength;
      size_t _size = get_descriptor((uint8_t*)&EP_MEM.res_data, EP_MEM.req_data.wValue);
      EP_RES.CNT = (_size > _length) ? _length : _size;
    2024:	00 93 38 64 	sts	0x6438, r16	; 0x806438 <EP_TABLE+0x12>
    2028:	10 93 39 64 	sts	0x6439, r17	; 0x806439 <EP_TABLE+0x13>
handling_control_transactions():
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:656
  #ifdef _Not_being_used_STUB_
    else if (bmRequestType == (2 << 5)) {
      _listen = request_vendor();
    }
  #endif
    if (_listen) {
    202c:	23 2b       	or	r18, r19
    202e:	09 f0       	breq	.+2      	; 0x2032 <__DATA_REGION_LENGTH__+0x32>
    2030:	02 cf       	rjmp	.-508    	; 0x1e36 <main+0x1be>
ep0_stalled():
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:360
    USB_EP_STATUS_CLR(USB_EP_CDO) = ~USB_TOGGLE_bm;
  }

  void ep0_stalled (void) {
    D1PRINTF("[STALLED]\r\n");
    loop_until_bit_is_clear(USB0_INTFLAGSB, USB_RMWBUSY_bp);
    2032:	80 91 0b 0c 	lds	r24, 0x0C0B	; 0x800c0b <__TEXT_REGION_LENGTH__+0x7f0c0b>
    2036:	82 fd       	sbrc	r24, 2
    2038:	fc cf       	rjmp	.-8      	; 0x2032 <__DATA_REGION_LENGTH__+0x32>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:361
    USB_EP_STATUS_SET(USB_EP_RES) = USB_STALLED_bm;
    203a:	88 e0       	ldi	r24, 0x08	; 8
    203c:	80 93 43 0c 	sts	0x0C43, r24	; 0x800c43 <__TEXT_REGION_LENGTH__+0x7f0c43>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:362
    loop_until_bit_is_clear(USB0_INTFLAGSB, USB_RMWBUSY_bp);
    2040:	80 91 0b 0c 	lds	r24, 0x0C0B	; 0x800c0b <__TEXT_REGION_LENGTH__+0x7f0c0b>
    2044:	82 fd       	sbrc	r24, 2
    2046:	fc cf       	rjmp	.-8      	; 0x2040 <__DATA_REGION_LENGTH__+0x40>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:363
    USB_EP_STATUS_SET(USB_EP_REQ) = USB_STALLED_bm;
    2048:	88 e0       	ldi	r24, 0x08	; 8
    204a:	80 93 41 0c 	sts	0x0C41, r24	; 0x800c41 <__TEXT_REGION_LENGTH__+0x7f0c41>
    204e:	f7 ce       	rjmp	.-530    	; 0x1e3e <main+0x1c6>
get_descriptor():
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:188
      *_buffer++ = 0x09;
      *_buffer++ = 0x04;
      return _size;
    }
    else {
      switch (_index) {
    2050:	82 30       	cpi	r24, 0x02	; 2
    2052:	f3 e0       	ldi	r31, 0x03	; 3
    2054:	9f 07       	cpc	r25, r31
    2056:	41 f1       	breq	.+80     	; 0x20a8 <__DATA_REGION_LENGTH__+0xa8>
    2058:	60 f4       	brcc	.+24     	; 0x2072 <__DATA_REGION_LENGTH__+0x72>
main():
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:189
        case 0x0301: _pgmem = (uint8_t*)&vstring; _size = sizeof(vstring); break;
    205a:	04 e3       	ldi	r16, 0x34	; 52
    205c:	10 e0       	ldi	r17, 0x00	; 0
    205e:	66 ee       	ldi	r22, 0xE6	; 230
    2060:	70 e0       	ldi	r23, 0x00	; 0
get_descriptor():
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:188
      *_buffer++ = 0x09;
      *_buffer++ = 0x04;
      return _size;
    }
    else {
      switch (_index) {
    2062:	81 30       	cpi	r24, 0x01	; 1
    2064:	93 40       	sbci	r25, 0x03	; 3
    2066:	79 f0       	breq	.+30     	; 0x2086 <__DATA_REGION_LENGTH__+0x86>
main():
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:152
    { /* FRAMENUM */ }
  };

  size_t get_descriptor (uint8_t* _buffer, uint16_t _index) {
    uint8_t* _pgmem = 0;
    size_t   _size = 0;
    2068:	10 e0       	ldi	r17, 0x00	; 0
    206a:	00 e0       	ldi	r16, 0x00	; 0
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:151
    },
    { /* FRAMENUM */ }
  };

  size_t get_descriptor (uint8_t* _buffer, uint16_t _index) {
    uint8_t* _pgmem = 0;
    206c:	70 e0       	ldi	r23, 0x00	; 0
    206e:	60 e0       	ldi	r22, 0x00	; 0
    2070:	0a c0       	rjmp	.+20     	; 0x2086 <__DATA_REGION_LENGTH__+0x86>
get_descriptor():
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:188
      *_buffer++ = 0x09;
      *_buffer++ = 0x04;
      return _size;
    }
    else {
      switch (_index) {
    2072:	83 30       	cpi	r24, 0x03	; 3
    2074:	98 07       	cpc	r25, r24
    2076:	e9 f0       	breq	.+58     	; 0x20b2 <__DATA_REGION_LENGTH__+0xb2>
main():
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:191
        case 0x0301: _pgmem = (uint8_t*)&vstring; _size = sizeof(vstring); break;
        case 0x0302: _pgmem = (uint8_t*)&mstring; _size = sizeof(mstring); break;
        case 0x0304: _pgmem = (uint8_t*)&istring; _size = sizeof(istring); break;
    2078:	08 e1       	ldi	r16, 0x18	; 24
    207a:	10 e0       	ldi	r17, 0x00	; 0
    207c:	68 e8       	ldi	r22, 0x88	; 136
    207e:	70 e0       	ldi	r23, 0x00	; 0
get_descriptor():
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:188
      *_buffer++ = 0x09;
      *_buffer++ = 0x04;
      return _size;
    }
    else {
      switch (_index) {
    2080:	84 30       	cpi	r24, 0x04	; 4
    2082:	93 40       	sbci	r25, 0x03	; 3
    2084:	89 f7       	brne	.-30     	; 0x2068 <__DATA_REGION_LENGTH__+0x68>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:215
            *_buffer++ = btoh(_c     ); *_buffer++ = 0;
          }
          return 22;
        }
      }
      *_buffer++ = (uint8_t)_size;
    2086:	00 93 0e 63 	sts	0x630E, r16	; 0x80630e <EP_MEM+0x8>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:216
      *_buffer++ = 3;
    208a:	83 e0       	ldi	r24, 0x03	; 3
    208c:	80 93 0f 63 	sts	0x630F, r24	; 0x80630f <EP_MEM+0x9>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:217
      if (_size) memcpy_P(_buffer, _pgmem, _size - 2);
    2090:	a8 01       	movw	r20, r16
    2092:	42 50       	subi	r20, 0x02	; 2
    2094:	51 09       	sbc	r21, r1
    2096:	80 e1       	ldi	r24, 0x10	; 16
    2098:	93 e6       	ldi	r25, 0x63	; 99
    209a:	01 15       	cp	r16, r1
    209c:	11 05       	cpc	r17, r1
    209e:	09 f0       	breq	.+2      	; 0x20a2 <__DATA_REGION_LENGTH__+0xa2>
    20a0:	80 c0       	rjmp	.+256    	; 0x21a2 <__DATA_REGION_LENGTH__+0x1a2>
    20a2:	30 e0       	ldi	r19, 0x00	; 0
    20a4:	20 e0       	ldi	r18, 0x00	; 0
    20a6:	be cf       	rjmp	.-132    	; 0x2024 <__DATA_REGION_LENGTH__+0x24>
main():
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:190
      return _size;
    }
    else {
      switch (_index) {
        case 0x0301: _pgmem = (uint8_t*)&vstring; _size = sizeof(vstring); break;
        case 0x0302: _pgmem = (uint8_t*)&mstring; _size = sizeof(mstring); break;
    20a8:	06 e4       	ldi	r16, 0x46	; 70
    20aa:	10 e0       	ldi	r17, 0x00	; 0
    20ac:	60 ea       	ldi	r22, 0xA0	; 160
    20ae:	70 e0       	ldi	r23, 0x00	; 0
    20b0:	ea cf       	rjmp	.-44     	; 0x2086 <__DATA_REGION_LENGTH__+0x86>
get_descriptor():
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:201
           *
           * If the 4 bytes from offset 4 of the EEPROM are anything other
           * than 0xFFFF:FFFF, use them, otherwise generate a 32-bit random
           * serial number using CRC32 from the factory information.
           */
          uint32_t _sn = ((User_EEP_t*)EEPROM_START)->dwSerialNumber;
    20b2:	40 91 04 14 	lds	r20, 0x1404	; 0x801404 <__TEXT_REGION_LENGTH__+0x7f1404>
    20b6:	50 91 05 14 	lds	r21, 0x1405	; 0x801405 <__TEXT_REGION_LENGTH__+0x7f1405>
    20ba:	60 91 06 14 	lds	r22, 0x1406	; 0x801406 <__TEXT_REGION_LENGTH__+0x7f1406>
    20be:	70 91 07 14 	lds	r23, 0x1407	; 0x801407 <__TEXT_REGION_LENGTH__+0x7f1407>
    20c2:	49 83       	std	Y+1, r20	; 0x01
    20c4:	5a 83       	std	Y+2, r21	; 0x02
    20c6:	6b 83       	std	Y+3, r22	; 0x03
    20c8:	7c 83       	std	Y+4, r23	; 0x04
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:202
          if (!(_sn + 1)) _sn = crc32((uint8_t*)SIGNATURES_START, 32);
    20ca:	4f 3f       	cpi	r20, 0xFF	; 255
    20cc:	2f ef       	ldi	r18, 0xFF	; 255
    20ce:	52 07       	cpc	r21, r18
    20d0:	62 07       	cpc	r22, r18
    20d2:	72 07       	cpc	r23, r18
    20d4:	59 f5       	brne	.+86     	; 0x212c <__DATA_REGION_LENGTH__+0x12c>
main():
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/modernAVR/0.2.14/cores/modernAVR/api/cpp/btools.cpp:210
  return _crc;
}

uint32_t crc32 (void* _data, size_t _len) {
  uint32_t _crc = ~0;
  uint8_t* _p = (uint8_t*)_data;
    20d6:	e0 e8       	ldi	r30, 0x80	; 128
    20d8:	f0 e1       	ldi	r31, 0x10	; 16
crc32():
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/modernAVR/0.2.14/cores/modernAVR/api/cpp/btools.cpp:211
  while (_len--) _crc = _crc32_update(_crc, *_p++);
    20da:	cf 01       	movw	r24, r30
    20dc:	01 96       	adiw	r24, 0x01	; 1
_crc32_update():
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/modernAVR/0.2.14/cores/modernAVR/api/cpp/btools.cpp:201
}

/* x32 + x26 + x23 + x22 + x16 + x12 + x11 + x10 + x8 + x7 + x5 + x4 + x2 + x + 1 */
/* (0xEDB88320 rev) init -1 */
uint32_t _crc32_update (uint32_t _crc, uint8_t _data) {
  _crc ^= _data;
    20de:	20 81       	ld	r18, Z
    20e0:	42 27       	eor	r20, r18
    20e2:	e8 e0       	ldi	r30, 0x08	; 8
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/modernAVR/0.2.14/cores/modernAVR/api/cpp/btools.cpp:203
  for (uint8_t j = 0; j < 8; j++) {
    _crc = (_crc >> 1) ^ (0xEDB88320UL & -(_crc & 1));
    20e4:	8a 01       	movw	r16, r20
    20e6:	9b 01       	movw	r18, r22
    20e8:	36 95       	lsr	r19
    20ea:	27 95       	ror	r18
    20ec:	17 95       	ror	r17
    20ee:	07 95       	ror	r16
    20f0:	41 70       	andi	r20, 0x01	; 1
    20f2:	55 27       	eor	r21, r21
    20f4:	66 27       	eor	r22, r22
    20f6:	77 27       	eor	r23, r23
    20f8:	70 95       	com	r23
    20fa:	60 95       	com	r22
    20fc:	50 95       	com	r21
    20fe:	41 95       	neg	r20
    2100:	5f 4f       	sbci	r21, 0xFF	; 255
    2102:	6f 4f       	sbci	r22, 0xFF	; 255
    2104:	7f 4f       	sbci	r23, 0xFF	; 255
    2106:	40 72       	andi	r20, 0x20	; 32
    2108:	53 78       	andi	r21, 0x83	; 131
    210a:	68 7b       	andi	r22, 0xB8	; 184
    210c:	7d 7e       	andi	r23, 0xED	; 237
    210e:	40 27       	eor	r20, r16
    2110:	51 27       	eor	r21, r17
    2112:	62 27       	eor	r22, r18
    2114:	73 27       	eor	r23, r19
    2116:	e1 50       	subi	r30, 0x01	; 1
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/modernAVR/0.2.14/cores/modernAVR/api/cpp/btools.cpp:202

/* x32 + x26 + x23 + x22 + x16 + x12 + x11 + x10 + x8 + x7 + x5 + x4 + x2 + x + 1 */
/* (0xEDB88320 rev) init -1 */
uint32_t _crc32_update (uint32_t _crc, uint8_t _data) {
  _crc ^= _data;
  for (uint8_t j = 0; j < 8; j++) {
    2118:	29 f7       	brne	.-54     	; 0x20e4 <__DATA_REGION_LENGTH__+0xe4>
    211a:	fc 01       	movw	r30, r24
crc32():
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/modernAVR/0.2.14/cores/modernAVR/api/cpp/btools.cpp:211
}

uint32_t crc32 (void* _data, size_t _len) {
  uint32_t _crc = ~0;
  uint8_t* _p = (uint8_t*)_data;
  while (_len--) _crc = _crc32_update(_crc, *_p++);
    211c:	e0 3a       	cpi	r30, 0xA0	; 160
    211e:	80 e1       	ldi	r24, 0x10	; 16
    2120:	f8 07       	cpc	r31, r24
    2122:	d9 f6       	brne	.-74     	; 0x20da <__DATA_REGION_LENGTH__+0xda>
get_descriptor():
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:202
    2124:	49 83       	std	Y+1, r20	; 0x01
    2126:	5a 83       	std	Y+2, r21	; 0x02
    2128:	6b 83       	std	Y+3, r22	; 0x03
    212a:	7c 83       	std	Y+4, r23	; 0x04
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:204
          uint8_t* _p = (uint8_t*)&_sn;
          *_buffer++ = 22;  *_buffer++ = 3;
    212c:	86 e1       	ldi	r24, 0x16	; 22
    212e:	80 93 0e 63 	sts	0x630E, r24	; 0x80630e <EP_MEM+0x8>
    2132:	83 e0       	ldi	r24, 0x03	; 3
    2134:	80 93 0f 63 	sts	0x630F, r24	; 0x80630f <EP_MEM+0x9>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:205
          *_buffer++ = 'M'; *_buffer++ = 0;
    2138:	8d e4       	ldi	r24, 0x4D	; 77
    213a:	80 93 10 63 	sts	0x6310, r24	; 0x806310 <EP_MEM+0xa>
    213e:	10 92 11 63 	sts	0x6311, r1	; 0x806311 <EP_MEM+0xb>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:206
          *_buffer++ = 'X'; *_buffer++ = 0;
    2142:	88 e5       	ldi	r24, 0x58	; 88
    2144:	80 93 12 63 	sts	0x6312, r24	; 0x806312 <EP_MEM+0xc>
    2148:	10 92 13 63 	sts	0x6313, r1	; 0x806313 <EP_MEM+0xd>
    214c:	e4 e1       	ldi	r30, 0x14	; 20
    214e:	f3 e6       	ldi	r31, 0x63	; 99
    2150:	de 01       	movw	r26, r28
    2152:	11 96       	adiw	r26, 0x01	; 1
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:208
          for (uint8_t _i = 0; _i < 4; _i++) {
            uint8_t _c = *_p++;
    2154:	8d 91       	ld	r24, X+
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:209
            *_buffer++ = btoh(_c >> 4); *_buffer++ = 0;
    2156:	28 2f       	mov	r18, r24
    2158:	30 e0       	ldi	r19, 0x00	; 0
    215a:	74 e0       	ldi	r23, 0x04	; 4
    215c:	35 95       	asr	r19
    215e:	27 95       	ror	r18
    2160:	7a 95       	dec	r23
    2162:	e1 f7       	brne	.-8      	; 0x215c <__DATA_REGION_LENGTH__+0x15c>
btoh():
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/modernAVR/0.2.14/cores/modernAVR/api/cpp/btools.cpp:69
    _p++; _r--;
  }
}

char btoh (uint8_t _x) {
  _x = (_x & 15) + '0';
    2164:	90 e3       	ldi	r25, 0x30	; 48
    2166:	92 0f       	add	r25, r18
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/modernAVR/0.2.14/cores/modernAVR/api/cpp/btools.cpp:70
  if (_x > '9') _x += 7;
    2168:	9a 33       	cpi	r25, 0x3A	; 58
    216a:	10 f0       	brcs	.+4      	; 0x2170 <__DATA_REGION_LENGTH__+0x170>
    216c:	97 e3       	ldi	r25, 0x37	; 55
    216e:	92 0f       	add	r25, r18
get_descriptor():
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:209
    2170:	90 83       	st	Z, r25
    2172:	11 82       	std	Z+1, r1	; 0x01
btoh():
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/modernAVR/0.2.14/cores/modernAVR/api/cpp/btools.cpp:69
    _p++; _r--;
  }
}

char btoh (uint8_t _x) {
  _x = (_x & 15) + '0';
    2174:	8f 70       	andi	r24, 0x0F	; 15
    2176:	90 e3       	ldi	r25, 0x30	; 48
    2178:	98 0f       	add	r25, r24
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/modernAVR/0.2.14/cores/modernAVR/api/cpp/btools.cpp:70
  if (_x > '9') _x += 7;
    217a:	9a 33       	cpi	r25, 0x3A	; 58
    217c:	10 f0       	brcs	.+4      	; 0x2182 <__DATA_REGION_LENGTH__+0x182>
    217e:	97 e3       	ldi	r25, 0x37	; 55
    2180:	98 0f       	add	r25, r24
get_descriptor():
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:210
            *_buffer++ = btoh(_c     ); *_buffer++ = 0;
    2182:	92 83       	std	Z+2, r25	; 0x02
    2184:	13 82       	std	Z+3, r1	; 0x03
    2186:	34 96       	adiw	r30, 0x04	; 4
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:207
          if (!(_sn + 1)) _sn = crc32((uint8_t*)SIGNATURES_START, 32);
          uint8_t* _p = (uint8_t*)&_sn;
          *_buffer++ = 22;  *_buffer++ = 3;
          *_buffer++ = 'M'; *_buffer++ = 0;
          *_buffer++ = 'X'; *_buffer++ = 0;
          for (uint8_t _i = 0; _i < 4; _i++) {
    2188:	8a 16       	cp	r8, r26
    218a:	9b 06       	cpc	r9, r27
    218c:	19 f7       	brne	.-58     	; 0x2154 <__DATA_REGION_LENGTH__+0x154>
main():
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:212
            uint8_t _c = *_p++;
            *_buffer++ = btoh(_c >> 4); *_buffer++ = 0;
            *_buffer++ = btoh(_c     ); *_buffer++ = 0;
          }
          return 22;
    218e:	06 e1       	ldi	r16, 0x16	; 22
    2190:	10 e0       	ldi	r17, 0x00	; 0
    2192:	41 cf       	rjmp	.-382    	; 0x2016 <__DATA_REGION_LENGTH__+0x16>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:165
      D1PRINTF(" VID:PID=%04X:%04X\r\n", _CAPS16(_buffer[8])->word, _CAPS16(_buffer[10])->word);
      return _size;
    }
    else if (_type == 0x02) {     /* CONFIGURATION */
      _pgmem = (uint8_t*)&current_descriptor;
      _size = sizeof(current_descriptor);
    2194:	0b e6       	ldi	r16, 0x6B	; 107
    2196:	10 e0       	ldi	r17, 0x00	; 0
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:164
      if (_vidpid + 1) _CAPS32(_buffer[8])->dword = _vidpid;
      D1PRINTF(" VID:PID=%04X:%04X\r\n", _CAPS16(_buffer[8])->word, _CAPS16(_buffer[10])->word);
      return _size;
    }
    else if (_type == 0x02) {     /* CONFIGURATION */
      _pgmem = (uint8_t*)&current_descriptor;
    2198:	6d e3       	ldi	r22, 0x3D	; 61
    219a:	71 e0       	ldi	r23, 0x01	; 1
get_descriptor():
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:220
      *_buffer++ = (uint8_t)_size;
      *_buffer++ = 3;
      if (_size) memcpy_P(_buffer, _pgmem, _size - 2);
      return _size;
    }
    if (_size) memcpy_P(_buffer, _pgmem, _size);
    219c:	a8 01       	movw	r20, r16
    219e:	8e e0       	ldi	r24, 0x0E	; 14
    21a0:	93 e6       	ldi	r25, 0x63	; 99
    21a2:	63 d4       	rcall	.+2246   	; 0x2a6a <memcpy_P>
    21a4:	38 cf       	rjmp	.-400    	; 0x2016 <__DATA_REGION_LENGTH__+0x16>
main():
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:169
      _pgmem = (uint8_t*)&current_descriptor;
      _size = sizeof(current_descriptor);
    }
    else if (_type == 0x06) {     /* QUALIFIER */
      _pgmem = (uint8_t*)&qualifier_descriptor;
      _size = sizeof(qualifier_descriptor);
    21a6:	0a e0       	ldi	r16, 0x0A	; 10
    21a8:	10 e0       	ldi	r17, 0x00	; 0
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:168
    else if (_type == 0x02) {     /* CONFIGURATION */
      _pgmem = (uint8_t*)&current_descriptor;
      _size = sizeof(current_descriptor);
    }
    else if (_type == 0x06) {     /* QUALIFIER */
      _pgmem = (uint8_t*)&qualifier_descriptor;
    21aa:	68 ea       	ldi	r22, 0xA8	; 168
    21ac:	71 e0       	ldi	r23, 0x01	; 1
    21ae:	f6 cf       	rjmp	.-20     	; 0x219c <__DATA_REGION_LENGTH__+0x19c>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:173
      _size = sizeof(qualifier_descriptor);
    }
    else if (_type == 0x21) {     /* HID */
      _pgmem = (uint8_t*)&current_descriptor + 18;
      _size = 9;
    21b0:	09 e0       	ldi	r16, 0x09	; 9
    21b2:	10 e0       	ldi	r17, 0x00	; 0
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:172
    else if (_type == 0x06) {     /* QUALIFIER */
      _pgmem = (uint8_t*)&qualifier_descriptor;
      _size = sizeof(qualifier_descriptor);
    }
    else if (_type == 0x21) {     /* HID */
      _pgmem = (uint8_t*)&current_descriptor + 18;
    21b4:	6f e4       	ldi	r22, 0x4F	; 79
    21b6:	71 e0       	ldi	r23, 0x01	; 1
    21b8:	f1 cf       	rjmp	.-30     	; 0x219c <__DATA_REGION_LENGTH__+0x19c>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:177
      _size = 9;
    }
    else if (_type == 0x22) {     /* REPORT */
      _pgmem = (uint8_t*)&report_descriptor;
      _size = sizeof(report_descriptor);
    21ba:	03 e2       	ldi	r16, 0x23	; 35
    21bc:	10 e0       	ldi	r17, 0x00	; 0
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:176
    else if (_type == 0x21) {     /* HID */
      _pgmem = (uint8_t*)&current_descriptor + 18;
      _size = 9;
    }
    else if (_type == 0x22) {     /* REPORT */
      _pgmem = (uint8_t*)&report_descriptor;
    21be:	6a e1       	ldi	r22, 0x1A	; 26
    21c0:	71 e0       	ldi	r23, 0x01	; 1
    21c2:	ec cf       	rjmp	.-40     	; 0x219c <__DATA_REGION_LENGTH__+0x19c>
request_standard():
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:560
      size_t _length = EP_MEM.req_data.wLength;
      size_t _size = get_descriptor((uint8_t*)&EP_MEM.res_data, EP_MEM.req_data.wValue);
      EP_RES.CNT = (_size > _length) ? _length : _size;
      _listen = !!_size;
    }
    else if (bRequest == 0x08) {  /* GET_CONFIGURATION */
    21c4:	88 30       	cpi	r24, 0x08	; 8
    21c6:	49 f4       	brne	.+18     	; 0x21da <__DATA_REGION_LENGTH__+0x1da>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:561
      EP_MEM.res_data[0] = _set_config;
    21c8:	80 91 20 64 	lds	r24, 0x6420	; 0x806420 <_set_config>
    21cc:	80 93 0e 63 	sts	0x630E, r24	; 0x80630e <EP_MEM+0x8>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:577
    }
    else if (bRequest == 0x0A) {  /* GET_INTREFACE */
      /* It seems not to be used. */
      D1PRINTF("<SI:0>\r\n");
      EP_MEM.res_data[0] = 0;
      EP_RES.CNT = 1;
    21d0:	c0 92 38 64 	sts	0x6438, r12	; 0x806438 <EP_TABLE+0x12>
    21d4:	d0 92 39 64 	sts	0x6439, r13	; 0x806439 <EP_TABLE+0x13>
    21d8:	2e ce       	rjmp	.-932    	; 0x1e36 <main+0x1be>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:565
    else if (bRequest == 0x08) {  /* GET_CONFIGURATION */
      EP_MEM.res_data[0] = _set_config;
      D1PRINTF("<GC:%02X>\r\n", _set_config);
      EP_RES.CNT = 1;
    }
    else if (bRequest == 0x09) {  /* SET_CONFIGURATION */
    21da:	89 30       	cpi	r24, 0x09	; 9
    21dc:	41 f4       	brne	.+16     	; 0x21ee <__DATA_REGION_LENGTH__+0x1ee>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:567
      /* Once the USB connection is fully initiated, it will go through here. */
      _set_config = (uint8_t)EP_MEM.req_data.wValue;
    21de:	80 91 08 63 	lds	r24, 0x6308	; 0x806308 <EP_MEM+0x2>
    21e2:	80 93 20 64 	sts	0x6420, r24	; 0x806420 <_set_config>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:568
      bit_set(GPCONF, GPCONF_USB_bp);
    21e6:	e0 9a       	sbi	0x1c, 0	; 28
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:569
      SYS::LED_HeartBeat();
    21e8:	0e 94 b7 05 	call	0xb6e	; 0xb6e <SYS::LED_HeartBeat()>
    21ec:	b5 ce       	rjmp	.-662    	; 0x1f58 <main+0x2e0>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:573
      D1PRINTF("<SC:%02X>\r\n", _set_config);
      EP_RES.CNT = 0;
    }
    else if (bRequest == 0x0A) {  /* GET_INTREFACE */
    21ee:	8a 30       	cpi	r24, 0x0A	; 10
    21f0:	19 f4       	brne	.+6      	; 0x21f8 <__DATA_REGION_LENGTH__+0x1f8>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:576
      /* It seems not to be used. */
      D1PRINTF("<SI:0>\r\n");
      EP_MEM.res_data[0] = 0;
    21f2:	10 92 0e 63 	sts	0x630E, r1	; 0x80630e <EP_MEM+0x8>
    21f6:	ec cf       	rjmp	.-40     	; 0x21d0 <__DATA_REGION_LENGTH__+0x1d0>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:579
      EP_RES.CNT = 1;
    }
    else if (bRequest == 0x0B) {  /* SET_INTREFACE */
    21f8:	8b 30       	cpi	r24, 0x0B	; 11
    21fa:	09 f0       	breq	.+2      	; 0x21fe <__DATA_REGION_LENGTH__+0x1fe>
    21fc:	1a cf       	rjmp	.-460    	; 0x2032 <__DATA_REGION_LENGTH__+0x32>
    21fe:	ac ce       	rjmp	.-680    	; 0x1f58 <main+0x2e0>
handling_control_transactions():
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:648
    if (bit_is_clear(bmRequestType, 7)) ep_req_listen();
    bmRequestType &= (3 << 5);
    if (bmRequestType == (0 << 5)) {
      _listen = request_standard();
    }
    else if (bmRequestType == (1 << 5)) {
    2200:	10 32       	cpi	r17, 0x20	; 32
    2202:	09 f0       	breq	.+2      	; 0x2206 <__DATA_REGION_LENGTH__+0x206>
    2204:	16 cf       	rjmp	.-468    	; 0x2032 <__DATA_REGION_LENGTH__+0x32>
request_class():
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:592
    return _listen;
  }

  bool request_class (void) {
    bool _listen = true;
    uint8_t bRequest = EP_MEM.req_data.bRequest;
    2206:	80 91 07 63 	lds	r24, 0x6307	; 0x806307 <EP_MEM+0x1>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:593
    if (bRequest == 0x0A) {       /* SET_IDLE */
    220a:	8a 30       	cpi	r24, 0x0A	; 10
    220c:	09 f4       	brne	.+2      	; 0x2210 <__DATA_REGION_LENGTH__+0x210>
    220e:	a4 ce       	rjmp	.-696    	; 0x1f58 <main+0x2e0>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:597
      D1PRINTF(" IDL=%02X\r\n", (uint8_t)EP_MEM.req_data.wValue);
      EP_RES.CNT = 0;
    }
    else if (bRequest == 0x20) {  /* SET_LINE_ENCODING */
    2210:	80 32       	cpi	r24, 0x20	; 32
    2212:	31 f5       	brne	.+76     	; 0x2260 <__DATA_REGION_LENGTH__+0x260>
ep_req_pending():
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:258
    }
  }

  bool is_ep_setup (void) { return bit_is_set(EP_REQ.STATUS, USB_EPSETUP_bp); }
  bool is_not_dap (void) { return bit_is_clear(EP_DPO.STATUS, USB_BUSNAK_bp); }
  void ep_req_pending (void) { loop_until_bit_is_set(EP_REQ.STATUS, USB_BUSNAK_bp); }
    2214:	80 91 2e 64 	lds	r24, 0x642E	; 0x80642e <EP_TABLE+0x8>
    2218:	81 ff       	sbrs	r24, 1
    221a:	fc cf       	rjmp	.-8      	; 0x2214 <__DATA_REGION_LENGTH__+0x214>
set_line_encoding():
/Users/askn/Collaborator/UPDI4AVR-USB/src/usart.cpp:175
      SYS::LED_Flash();
  }

  void set_line_encoding (LineEncoding_t* _buff) {
    /* The USART will not change unless a different setting is given. */
    if (0 == memcmp(&_set_line_encoding, _buff, sizeof(LineEncoding_t))) return;
    221c:	47 e0       	ldi	r20, 0x07	; 7
    221e:	50 e0       	ldi	r21, 0x00	; 0
    2220:	6e e0       	ldi	r22, 0x0E	; 14
    2222:	73 e6       	ldi	r23, 0x63	; 99
    2224:	8e e7       	ldi	r24, 0x7E	; 126
    2226:	90 e6       	ldi	r25, 0x60	; 96
    2228:	7b d4       	rcall	.+2294   	; 0x2b20 <memcmp>
    222a:	89 2b       	or	r24, r25
    222c:	89 f0       	breq	.+34     	; 0x2250 <__DATA_REGION_LENGTH__+0x250>
read_drop():
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:466
    }
    return _s != 0;
  }

  void read_drop (void) {
    if (bit_is_set(EP_CDO.STATUS, USB_BUSNAK_bp)) ep_cdo_listen();
    222e:	80 91 5e 64 	lds	r24, 0x645E	; 0x80645e <EP_TABLE+0x38>
    2232:	81 fd       	sbrc	r24, 1
    2234:	0e 94 6f 01 	call	0x2de	; 0x2de <USB::ep_cdo_listen()>
set_line_encoding():
/Users/askn/Collaborator/UPDI4AVR-USB/src/usart.cpp:177
    USB::read_drop();
    USART::setup();
    2238:	eb d8       	rcall	.-3626   	; 0x1410 <USART::setup()>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usart.cpp:178
    memcpy(&_set_line_encoding, _buff, sizeof(LineEncoding_t));
    223a:	87 e0       	ldi	r24, 0x07	; 7
    223c:	ee e0       	ldi	r30, 0x0E	; 14
    223e:	f3 e6       	ldi	r31, 0x63	; 99
    2240:	ae e7       	ldi	r26, 0x7E	; 126
    2242:	b0 e6       	ldi	r27, 0x60	; 96
    2244:	01 90       	ld	r0, Z+
    2246:	0d 92       	st	X+, r0
    2248:	8a 95       	dec	r24
    224a:	e1 f7       	brne	.-8      	; 0x2244 <__DATA_REGION_LENGTH__+0x244>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usart.cpp:179
    change_vcp();
    224c:	0e 94 cd 05 	call	0xb9a	; 0xb9a <USART::change_vcp()>
request_class():
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:603
      ep_req_pending();
      USART::set_line_encoding(&EP_MEM.res_encoding);
      D1PRINTF(" SLE=");
      D1PRINTHEX(&_set_line_encoding, sizeof(LineEncoding_t));
      /* SET_LINE_ENCODING is called whenever a port is opened. */
      bit_set(GPCONF, GPCONF_OPN_bp);
    2250:	e4 9a       	sbi	0x1c, 4	; 28
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:604
      _send_count = 0;
    2252:	10 92 22 64 	sts	0x6422, r1	; 0x806422 <_send_count>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:605
      _recv_count = 0;
    2256:	10 92 21 64 	sts	0x6421, r1	; 0x806421 <_recv_count>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:606
      _sof_count = 0;
    225a:	10 92 1f 64 	sts	0x641F, r1	; 0x80641f <_sof_count>
    225e:	7c ce       	rjmp	.-776    	; 0x1f58 <main+0x2e0>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:609
      EP_RES.CNT = 0;
    }
    else if (bRequest == 0x21) {  /* GET_LINE_ENCODING */
    2260:	81 32       	cpi	r24, 0x21	; 33
    2262:	29 f5       	brne	.+74     	; 0x22ae <__DATA_REGION_LENGTH__+0x2ae>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:610
      memcpy(&EP_MEM.res_encoding, &_set_line_encoding, sizeof(LineEncoding_t));
    2264:	87 e0       	ldi	r24, 0x07	; 7
    2266:	ee e7       	ldi	r30, 0x7E	; 126
    2268:	f0 e6       	ldi	r31, 0x60	; 96
    226a:	ae e0       	ldi	r26, 0x0E	; 14
    226c:	b3 e6       	ldi	r27, 0x63	; 99
    226e:	01 90       	ld	r0, Z+
    2270:	0d 92       	st	X+, r0
    2272:	8a 95       	dec	r24
    2274:	e1 f7       	brne	.-8      	; 0x226e <__DATA_REGION_LENGTH__+0x26e>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:611
      if (EP_MEM.res_encoding.dwDTERate == 0) {
    2276:	80 91 0e 63 	lds	r24, 0x630E	; 0x80630e <EP_MEM+0x8>
    227a:	90 91 0f 63 	lds	r25, 0x630F	; 0x80630f <EP_MEM+0x9>
    227e:	a0 91 10 63 	lds	r26, 0x6310	; 0x806310 <EP_MEM+0xa>
    2282:	b0 91 11 63 	lds	r27, 0x6311	; 0x806311 <EP_MEM+0xb>
    2286:	89 2b       	or	r24, r25
    2288:	8a 2b       	or	r24, r26
    228a:	8b 2b       	or	r24, r27
    228c:	59 f4       	brne	.+22     	; 0x22a4 <__DATA_REGION_LENGTH__+0x2a4>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:612
        EP_MEM.res_encoding.dwDTERate = 9600UL;
    228e:	40 92 0e 63 	sts	0x630E, r4	; 0x80630e <EP_MEM+0x8>
    2292:	50 92 0f 63 	sts	0x630F, r5	; 0x80630f <EP_MEM+0x9>
    2296:	60 92 10 63 	sts	0x6310, r6	; 0x806310 <EP_MEM+0xa>
    229a:	70 92 11 63 	sts	0x6311, r7	; 0x806311 <EP_MEM+0xb>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:613
        EP_MEM.res_encoding.bDataBits = 8;
    229e:	88 e0       	ldi	r24, 0x08	; 8
    22a0:	80 93 14 63 	sts	0x6314, r24	; 0x806314 <EP_MEM+0xe>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:617
      }
      D1PRINTF(" GLE=");
      D1PRINTHEX(&EP_MEM.res_encoding, sizeof(LineEncoding_t));
      EP_RES.CNT = sizeof(LineEncoding_t);
    22a4:	a0 92 38 64 	sts	0x6438, r10	; 0x806438 <EP_TABLE+0x12>
    22a8:	b0 92 39 64 	sts	0x6439, r11	; 0x806439 <EP_TABLE+0x13>
    22ac:	c4 cd       	rjmp	.-1144   	; 0x1e36 <main+0x1be>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:619
    }
    else if (bRequest == 0x22) {  /* SET_LINE_STATE */
    22ae:	82 32       	cpi	r24, 0x22	; 34
    22b0:	c9 f4       	brne	.+50     	; 0x22e4 <__DATA_REGION_LENGTH__+0x2e4>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:621
      D1PRINTF(" SLS=%02X\r\n", (uint8_t)EP_MEM.req_data.wValue);
      USART::set_line_state((uint8_t)EP_MEM.req_data.wValue);
    22b2:	80 91 08 63 	lds	r24, 0x6308	; 0x806308 <EP_MEM+0x2>
set_line_state():
/Users/askn/Collaborator/UPDI4AVR-USB/src/usart.cpp:191
  void set_line_state (uint8_t _line_state) {

    /* If a physical port exists, it reflects DTR/RTS. */

  #if defined(PIN_VCP_DTR)
    if (bit_is_set(_line_state, 0))
    22b6:	98 2f       	mov	r25, r24
    22b8:	91 70       	andi	r25, 0x01	; 1
    22ba:	80 ff       	sbrs	r24, 0
    22bc:	0f c0       	rjmp	.+30     	; 0x22dc <__DATA_REGION_LENGTH__+0x2dc>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usart.cpp:192
      digitalWriteMacro(PIN_VCP_DTR, LOW);
    22be:	6c 98       	cbi	0x0d, 4	; 13
/Users/askn/Collaborator/UPDI4AVR-USB/src/usart.cpp:198
    else
      digitalWriteMacro(PIN_VCP_DTR, HIGH);
  #endif

  #if defined(PIN_VCP_RTS)
    if (bit_is_set(_line_state, 1))
    22c0:	81 ff       	sbrs	r24, 1
    22c2:	0e c0       	rjmp	.+28     	; 0x22e0 <__DATA_REGION_LENGTH__+0x2e0>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usart.cpp:199
      digitalWriteMacro(PIN_VCP_RTS, LOW);
    22c4:	6d 98       	cbi	0x0d, 5	; 13
/Users/askn/Collaborator/UPDI4AVR-USB/src/usart.cpp:206
      digitalWriteMacro(PIN_VCP_RTS, HIGH);
  #endif

  #if defined(CONFIG_VCP_DTR_RESET)
    /* If DTR is set, the device will reboot assuming the host has opened the port. */
    if (!_set_line_state.bStateDTR && bit_is_set(_line_state, 0)) {
    22c6:	20 91 7c 60 	lds	r18, 0x607C	; 0x80607c <__data_end>
    22ca:	20 fd       	sbrc	r18, 0
    22cc:	04 c0       	rjmp	.+8      	; 0x22d6 <__DATA_REGION_LENGTH__+0x2d6>
    22ce:	99 23       	and	r25, r25
    22d0:	11 f0       	breq	.+4      	; 0x22d6 <__DATA_REGION_LENGTH__+0x2d6>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usart.cpp:207
      bit_set(GPCONF, GPCONF_FAL_bp);
    22d2:	e7 9a       	sbi	0x1c, 7	; 28
/Users/askn/Collaborator/UPDI4AVR-USB/src/usart.cpp:208
      bit_set(GPCONF, GPCONF_RIS_bp);
    22d4:	e6 9a       	sbi	0x1c, 6	; 28
/Users/askn/Collaborator/UPDI4AVR-USB/src/usart.cpp:212
    }
  #endif

    _set_line_state.bValue = _line_state;
    22d6:	80 93 7c 60 	sts	0x607C, r24	; 0x80607c <__data_end>
    22da:	3e ce       	rjmp	.-900    	; 0x1f58 <main+0x2e0>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usart.cpp:194

  #if defined(PIN_VCP_DTR)
    if (bit_is_set(_line_state, 0))
      digitalWriteMacro(PIN_VCP_DTR, LOW);
    else
      digitalWriteMacro(PIN_VCP_DTR, HIGH);
    22dc:	6c 9a       	sbi	0x0d, 4	; 13
    22de:	f0 cf       	rjmp	.-32     	; 0x22c0 <__DATA_REGION_LENGTH__+0x2c0>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usart.cpp:201

  #if defined(PIN_VCP_RTS)
    if (bit_is_set(_line_state, 1))
      digitalWriteMacro(PIN_VCP_RTS, LOW);
    else
      digitalWriteMacro(PIN_VCP_RTS, HIGH);
    22e0:	6d 9a       	sbi	0x0d, 5	; 13
    22e2:	f1 cf       	rjmp	.-30     	; 0x22c6 <__DATA_REGION_LENGTH__+0x2c6>
request_class():
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:624
      EP_RES.CNT = 0;
    }
    else if (bRequest == 0x23) {  /* SET_SEND_BREAK */
    22e4:	83 32       	cpi	r24, 0x23	; 35
    22e6:	09 f0       	breq	.+2      	; 0x22ea <__DATA_REGION_LENGTH__+0x2ea>
    22e8:	a4 ce       	rjmp	.-696    	; 0x2032 <__DATA_REGION_LENGTH__+0x32>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:626
      D1PRINTF(" SB=%04X\r\n", EP_MEM.req_data.wValue);
      _send_break = EP_MEM.req_data.wValue;
    22ea:	80 91 08 63 	lds	r24, 0x6308	; 0x806308 <EP_MEM+0x2>
    22ee:	90 91 09 63 	lds	r25, 0x6309	; 0x806309 <EP_MEM+0x3>
    22f2:	80 93 23 64 	sts	0x6423, r24	; 0x806423 <_send_break>
    22f6:	90 93 24 64 	sts	0x6424, r25	; 0x806424 <_send_break+0x1>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:627
      if (_send_break) break_on();
    22fa:	89 2b       	or	r24, r25
    22fc:	69 f0       	breq	.+26     	; 0x2318 <__DATA_REGION_LENGTH__+0x318>
break_on():
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:373
    ep_dpo_listen();  /* continue transaction */
  }

  void break_on (void) {
    if (bit_is_set(GPCONF, GPCONF_VCP_bp)
     && bit_is_clear(GPCONF, GPCONF_BRK_bp)) {
    22fe:	e1 9b       	sbis	0x1c, 1	; 28
    2300:	09 c0       	rjmp	.+18     	; 0x2314 <__DATA_REGION_LENGTH__+0x314>
    2302:	e3 99       	sbic	0x1c, 3	; 28
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:375
      /* SET_SEND_BREAK is called when the port is closed successfully. */
      bit_clear(GPCONF, GPCONF_OPN_bp);
    2304:	07 c0       	rjmp	.+14     	; 0x2314 <__DATA_REGION_LENGTH__+0x314>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:376
      _sof_count = 0;
    2306:	e4 98       	cbi	0x1c, 4	; 28
    2308:	10 92 1f 64 	sts	0x641F, r1	; 0x80641f <_sof_count>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:377
      USART::disable_vcp();
    230c:	66 d8       	rcall	.-3892   	; 0x13da <USART::disable_vcp()>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:380
  #ifdef CONFIG_VCP_TXD_ODM
      /* During Break, VCP-TxD is pulled LOW. */
      pinModeMacro(PIN_VCP_TXD, OUTPUT);
    230e:	02 9a       	sbi	0x00, 2	; 0
    2310:	10 92 12 04 	sts	0x0412, r1	; 0x800412 <__TEXT_REGION_LENGTH__+0x7f0412>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:383
  #endif
    }
    bit_set(GPCONF, GPCONF_BRK_bp);
    2314:	e3 9a       	sbi	0x1c, 3	; 28
    2316:	20 ce       	rjmp	.-960    	; 0x1f58 <main+0x2e0>
request_class():
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:628
    }
    else if (bRequest == 0x23) {  /* SET_SEND_BREAK */
      D1PRINTF(" SB=%04X\r\n", EP_MEM.req_data.wValue);
      _send_break = EP_MEM.req_data.wValue;
      if (_send_break) break_on();
      else break_off();
    2318:	0e 94 5d 06 	call	0xcba	; 0xcba <USB::break_off()>
    231c:	1d ce       	rjmp	.-966    	; 0x1f58 <main+0x2e0>
main():
/Users/askn/Collaborator/UPDI4AVR-USB/src/main.cpp:122
    /*** USB control handling ***/
    USB::handling_bus_events();
    if (USB::is_ep_setup()) USB::handling_control_transactions();

    if      (bit_is_set(GPCONF, GPCONF_FAL_bp)) SYS::reset_enter();
    else if (bit_is_set(GPCONF, GPCONF_RIS_bp)) SYS::reset_leave();
    231e:	e6 9b       	sbis	0x1c, 6	; 28
    2320:	b6 cd       	rjmp	.-1172   	; 0x1e8e <main+0x216>
reset_leave():
/Users/askn/Collaborator/UPDI4AVR-USB/src/sys.cpp:259
   * This will be executed when SW0 is released.
   * If the VCP is operating, it will return to normal operation,
   * but if the USB is stopped, it will reboot at the end.
   */
  void reset_leave (void) {
    if (bit_is_set(PGCONF, PGCONF_UPDI_bp)) return;
    2322:	e8 99       	sbic	0x1d, 0	; 29
    2324:	b4 cd       	rjmp	.-1176   	; 0x1e8e <main+0x216>
/Users/askn/Collaborator/UPDI4AVR-USB/src/sys.cpp:260
    if (_jtag_arch == 5) {
    2326:	80 91 88 60 	lds	r24, 0x6088	; 0x806088 <_jtag_arch>
    232a:	85 30       	cpi	r24, 0x05	; 5
    232c:	21 f4       	brne	.+8      	; 0x2336 <__DATA_REGION_LENGTH__+0x336>
/Users/askn/Collaborator/UPDI4AVR-USB/src/sys.cpp:261
      _updi_bitmap[10] = 0x00; /* SYSRUN */
    232e:	10 92 24 60 	sts	0x6024, r1	; 0x806024 <SYS::_updi_bitmap+0xa>
/Users/askn/Collaborator/UPDI4AVR-USB/src/sys.cpp:262
      send_bitmap(_updi_bitmap, sizeof(_updi_bitmap) * 8);
    2332:	0e 94 41 01 	call	0x282	; 0x282 <SYS::send_bitmap(unsigned char const*, unsigned int) [clone .constprop.7]>
/Users/askn/Collaborator/UPDI4AVR-USB/src/sys.cpp:264
    }
    openDrainWriteMacro(PIN_PG_TRST, HIGH);
    2336:	01 98       	cbi	0x00, 1	; 0
delay_millis():
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/modernAVR/0.2.14/cores/modernAVR/api/delay_busywait.h:42
    2338:	9f e7       	ldi	r25, 0x7F	; 127
    233a:	ea e1       	ldi	r30, 0x1A	; 26
    233c:	f6 e0       	ldi	r31, 0x06	; 6
    233e:	91 50       	subi	r25, 0x01	; 1
    2340:	e0 40       	sbci	r30, 0x00	; 0
    2342:	f0 40       	sbci	r31, 0x00	; 0
    2344:	e1 f7       	brne	.-8      	; 0x233e <__DATA_REGION_LENGTH__+0x33e>
    2346:	00 c0       	rjmp	.+0      	; 0x2348 <__DATA_REGION_LENGTH__+0x348>
    2348:	00 00       	nop
reset_leave():
/Users/askn/Collaborator/UPDI4AVR-USB/src/sys.cpp:270
  #ifdef CONFIG_VCP_DTR_RESET
    /* A delay of 64ms or more between when the bootloader starts and when RxD opens. */
    delay_millis(100);
  #endif
    D1PRINTF("<RST:OUT>\r\n");
    if (bit_is_set(GPCONF, GPCONF_USB_bp))
    234a:	e0 9b       	sbis	0x1c, 0	; 28
    234c:	05 c0       	rjmp	.+10     	; 0x2358 <__DATA_REGION_LENGTH__+0x358>
/Users/askn/Collaborator/UPDI4AVR-USB/src/sys.cpp:271
      LED_HeartBeat();
    234e:	0e 94 b7 05 	call	0xb6e	; 0xb6e <SYS::LED_HeartBeat()>
/Users/askn/Collaborator/UPDI4AVR-USB/src/sys.cpp:276
    else if (!USB0_ADDR)
      reboot();
    else
      LED_Flash();
    bit_clear(GPCONF, GPCONF_FAL_bp);
    2352:	e7 98       	cbi	0x1c, 7	; 28
/Users/askn/Collaborator/UPDI4AVR-USB/src/sys.cpp:277
    bit_clear(GPCONF, GPCONF_RIS_bp);
    2354:	e6 98       	cbi	0x1c, 6	; 28
    2356:	9b cd       	rjmp	.-1226   	; 0x1e8e <main+0x216>
/Users/askn/Collaborator/UPDI4AVR-USB/src/sys.cpp:272
    delay_millis(100);
  #endif
    D1PRINTF("<RST:OUT>\r\n");
    if (bit_is_set(GPCONF, GPCONF_USB_bp))
      LED_HeartBeat();
    else if (!USB0_ADDR)
    2358:	80 91 03 0c 	lds	r24, 0x0C03	; 0x800c03 <__TEXT_REGION_LENGTH__+0x7f0c03>
    235c:	81 11       	cpse	r24, r1
    235e:	06 c0       	rjmp	.+12     	; 0x236c <__DATA_REGION_LENGTH__+0x36c>
reboot():
/Users/askn/Collaborator/UPDI4AVR-USB/src/sys.cpp:290
  void reboot (void) {
  #if defined(DEBUG)
    D0PRINTF("<REBOOT>\r\n");
    Serial.flush();
  #endif
    _PROTECTED_WRITE(RSTCTRL_SWRR, 1);
    2360:	88 ed       	ldi	r24, 0xD8	; 216
    2362:	91 e0       	ldi	r25, 0x01	; 1
    2364:	84 bf       	out	0x34, r24	; 52
    2366:	90 93 41 00 	sts	0x0041, r25	; 0x800041 <__TEXT_REGION_LENGTH__+0x7f0041>
    236a:	f3 cf       	rjmp	.-26     	; 0x2352 <__DATA_REGION_LENGTH__+0x352>
reset_leave():
/Users/askn/Collaborator/UPDI4AVR-USB/src/sys.cpp:275
    if (bit_is_set(GPCONF, GPCONF_USB_bp))
      LED_HeartBeat();
    else if (!USB0_ADDR)
      reboot();
    else
      LED_Flash();
    236c:	0e 94 a2 05 	call	0xb44	; 0xb44 <SYS::LED_Flash()>
    2370:	f0 cf       	rjmp	.-32     	; 0x2352 <__DATA_REGION_LENGTH__+0x352>
read_byte():
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:443
    else ep_cdi_listen();
  }

  uint8_t read_byte (void) {
    uint8_t _c = 0;
    if (EP_CDO.CNT != _recv_count) {
    2372:	40 91 60 64 	lds	r20, 0x6460	; 0x806460 <EP_TABLE+0x3a>
    2376:	50 91 61 64 	lds	r21, 0x6461	; 0x806461 <EP_TABLE+0x3b>
    237a:	28 2f       	mov	r18, r24
    237c:	30 e0       	ldi	r19, 0x00	; 0
main():
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:442
    if (_send_count < 64) _sof_count = 30;
    else ep_cdi_listen();
  }

  uint8_t read_byte (void) {
    uint8_t _c = 0;
    237e:	10 e0       	ldi	r17, 0x00	; 0
read_byte():
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:443
    if (EP_CDO.CNT != _recv_count) {
    2380:	42 17       	cp	r20, r18
    2382:	53 07       	cpc	r21, r19
    2384:	39 f0       	breq	.+14     	; 0x2394 <__DATA_REGION_LENGTH__+0x394>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:450
      if (_recv_count == 0) {
        D2PRINTF(" VO=%02X:", EP_CDO.CNT);
        D2PRINTHEX(&EP_MEM.cdo_data, EP_CDO.CNT);
      }
  #endif
      _c = EP_MEM.cdo_data[_recv_count++];
    2386:	8f 5f       	subi	r24, 0xFF	; 255
    2388:	80 93 21 64 	sts	0x6421, r24	; 0x806421 <_recv_count>
    238c:	22 5a       	subi	r18, 0xA2	; 162
    238e:	3c 49       	sbci	r19, 0x9C	; 156
    2390:	f9 01       	movw	r30, r18
    2392:	10 81       	ld	r17, Z
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:452
    }
    if (EP_CDO.CNT == _recv_count) ep_cdo_listen();
    2394:	80 91 60 64 	lds	r24, 0x6460	; 0x806460 <EP_TABLE+0x3a>
    2398:	90 91 61 64 	lds	r25, 0x6461	; 0x806461 <EP_TABLE+0x3b>
    239c:	20 91 21 64 	lds	r18, 0x6421	; 0x806421 <_recv_count>
    23a0:	28 17       	cp	r18, r24
    23a2:	19 06       	cpc	r1, r25
    23a4:	11 f4       	brne	.+4      	; 0x23aa <__DATA_REGION_LENGTH__+0x3aa>
    23a6:	0e 94 6f 01 	call	0x2de	; 0x2de <USB::ep_cdo_listen()>
vcp_transceiver():
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:503
  #if defined(CONFIG_VCP_CTS_ENABLE)
     && !digitalReadMacro(PIN_VCP_CTS)
  #endif
     && bit_is_set(USART0_STATUS, USART_DREIF_bp)
     && read_available()) {
      USART0_TXDATAL = read_byte();
    23aa:	10 93 02 08 	sts	0x0802, r17	; 0x800802 <__TEXT_REGION_LENGTH__+0x7f0802>
    23ae:	89 cd       	rjmp	.-1262   	; 0x1ec2 <main+0x24a>
read_drop():
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:466
    }
    return _s != 0;
  }

  void read_drop (void) {
    if (bit_is_set(EP_CDO.STATUS, USB_BUSNAK_bp)) ep_cdo_listen();
    23b0:	80 91 5e 64 	lds	r24, 0x645E	; 0x80645e <EP_TABLE+0x38>
    23b4:	81 ff       	sbrs	r24, 1
    23b6:	85 cd       	rjmp	.-1270   	; 0x1ec2 <main+0x24a>
    23b8:	82 cd       	rjmp	.-1276   	; 0x1ebe <main+0x246>
cci_break_count():
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:404
        _send_break -= USB_CCI_INTERVAL;
        if (bit_is_set(EP_CCI.STATUS, USB_BUSNAK_bp))
          ep_cci_listen();
      }
      else {
        _send_break = 0;
    23ba:	10 92 23 64 	sts	0x6423, r1	; 0x806423 <_send_break>
    23be:	10 92 24 64 	sts	0x6424, r1	; 0x806424 <_send_break+0x1>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:405
        break_off();
    23c2:	0e 94 5d 06 	call	0xcba	; 0xcba <USB::break_off()>
    23c6:	97 cd       	rjmp	.-1234   	; 0x1ef6 <main+0x27e>
dap_command_check():
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:67
     * A maximum of 15 chunks is possible,
     * resulting in a maximum payload length of 900 bytes.
     */
    if (_cmd == 0x80) {             /* DAP_EDBG_VENDOR_AVR_CMD */
      uint8_t _endf = _sub & 0x0F;
      uint8_t _frag = _sub >> 4;
    23c8:	90 e0       	ldi	r25, 0x00	; 0
    23ca:	64 e0       	ldi	r22, 0x04	; 4
    23cc:	95 95       	asr	r25
    23ce:	87 95       	ror	r24
    23d0:	6a 95       	dec	r22
    23d2:	e1 f7       	brne	.-8      	; 0x23cc <__DATA_REGION_LENGTH__+0x3cc>
    23d4:	28 2e       	mov	r2, r24
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:68
      uint8_t _size = EP_MEM.dap_data[3];
    23d6:	e0 90 21 63 	lds	r14, 0x6321	; 0x806321 <EP_MEM+0x1b>
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:77
        D1PRINTF("<EDBG_FAIL>\r\n");
        EP_MEM.dap_data[1] = 0x00;  /* EDBG_RSP_FAIL */
      }
      else {
        /* Detect the first chunk. */
        if (_frag == 1) _packet_chunks = 0;
    23da:	21 e0       	ldi	r18, 0x01	; 1
    23dc:	82 13       	cpse	r24, r18
    23de:	02 c0       	rjmp	.+4      	; 0x23e4 <__DATA_REGION_LENGTH__+0x3e4>
    23e0:	10 92 86 60 	sts	0x6086, r1	; 0x806086 <_packet_chunks>
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:69
     */
    if (_cmd == 0x80) {             /* DAP_EDBG_VENDOR_AVR_CMD */
      uint8_t _endf = _sub & 0x0F;
      uint8_t _frag = _sub >> 4;
      uint8_t _size = EP_MEM.dap_data[3];
      size_t  _ofst = (_frag - 1) * 60;
    23e4:	01 97       	sbiw	r24, 0x01	; 1
    23e6:	2c e3       	ldi	r18, 0x3C	; 60
    23e8:	28 9f       	mul	r18, r24
    23ea:	80 01       	movw	r16, r0
    23ec:	29 9f       	mul	r18, r25
    23ee:	10 0d       	add	r17, r0
    23f0:	11 24       	eor	r1, r1
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:78
        EP_MEM.dap_data[1] = 0x00;  /* EDBG_RSP_FAIL */
      }
      else {
        /* Detect the first chunk. */
        if (_frag == 1) _packet_chunks = 0;
        ++_packet_chunks;
    23f2:	80 91 86 60 	lds	r24, 0x6086	; 0x806086 <_packet_chunks>
    23f6:	33 24       	eor	r3, r3
    23f8:	33 94       	inc	r3
    23fa:	38 0e       	add	r3, r24
    23fc:	30 92 86 60 	sts	0x6086, r3	; 0x806086 <_packet_chunks>
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:79
        memcpy(&packet.rawData[_ofst], &EP_MEM.dap_data[4], _size);
    2400:	f1 2c       	mov	r15, r1
    2402:	a7 01       	movw	r20, r14
    2404:	62 e2       	ldi	r22, 0x22	; 34
    2406:	73 e6       	ldi	r23, 0x63	; 99
    2408:	c8 01       	movw	r24, r16
    240a:	82 54       	subi	r24, 0x42	; 66
    240c:	9f 49       	sbci	r25, 0x9F	; 159
    240e:	95 d3       	rcall	.+1834   	; 0x2b3a <memcpy>
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:80
        EP_MEM.dap_data[1] = 0x01;  /* EDBG_RSP_OK */
    2410:	81 e0       	ldi	r24, 0x01	; 1
    2412:	80 93 1f 63 	sts	0x631F, r24	; 0x80631f <EP_MEM+0x19>
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:82
        D3PRINTHEX(&EP_MEM.dap_data, _size + 4);
        if (_endf == _frag) {       /* end of defragment */
    2416:	4d 81       	ldd	r20, Y+5	; 0x05
    2418:	42 11       	cpse	r20, r2
    241a:	84 cd       	rjmp	.-1272   	; 0x1f24 <main+0x2ac>
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:83
          _packet_length = _ofst + _size;
    241c:	0e 0d       	add	r16, r14
    241e:	1f 1d       	adc	r17, r15
    2420:	00 93 8b 60 	sts	0x608B, r16	; 0x80608b <_packet_length>
    2424:	10 93 8c 60 	sts	0x608C, r17	; 0x80608c <_packet_length+0x1>
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:86
          D2PRINTF(" SQ=%03X:%03X<", packet.out.sequence, _packet_length);
          D2PRINTHEX(&packet, _packet_length);
          if (_packet_chunks == _endf) {
    2428:	8d 81       	ldd	r24, Y+5	; 0x05
    242a:	83 11       	cpse	r24, r3
    242c:	79 cd       	rjmp	.-1294   	; 0x1f20 <main+0x2a8>
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:89
            /* True if an EDBG Payload is received. */
            D2PRINTF("<EDBG_OK>\r\n");
            _packet_endfrag = 0;
    242e:	10 92 89 60 	sts	0x6089, r1	; 0x806089 <_packet_endfrag>
main():
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:90
            _result = true;
    2432:	01 e0       	ldi	r16, 0x01	; 1
ep_dpi_listen():
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:279
    loop_until_bit_is_clear(USB0_INTFLAGSB, USB_RMWBUSY_bp);
    USB_EP_STATUS_CLR(USB_EP_RES) = ~USB_TOGGLE_bm;
  }

  void ep_dpi_listen (void) {
    EP_DPI.CNT = 64;
    2434:	80 e4       	ldi	r24, 0x40	; 64
    2436:	90 e0       	ldi	r25, 0x00	; 0
    2438:	80 93 48 64 	sts	0x6448, r24	; 0x806448 <EP_TABLE+0x22>
    243c:	90 93 49 64 	sts	0x6449, r25	; 0x806449 <EP_TABLE+0x23>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:280
    EP_DPI.MCNT = 0;
    2440:	10 92 4c 64 	sts	0x644C, r1	; 0x80644c <EP_TABLE+0x26>
    2444:	10 92 4d 64 	sts	0x644D, r1	; 0x80644d <EP_TABLE+0x27>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:281
    loop_until_bit_is_clear(USB0_INTFLAGSB, USB_RMWBUSY_bp);
    2448:	80 91 0b 0c 	lds	r24, 0x0C0B	; 0x800c0b <__TEXT_REGION_LENGTH__+0x7f0c0b>
    244c:	82 fd       	sbrc	r24, 2
    244e:	fc cf       	rjmp	.-8      	; 0x2448 <__DATA_REGION_LENGTH__+0x448>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:282
    USB_EP_STATUS_CLR(USB_EP_DPI) = ~USB_TOGGLE_bm;
    2450:	8e ef       	ldi	r24, 0xFE	; 254
    2452:	80 93 46 0c 	sts	0x0C46, r24	; 0x800c46 <__TEXT_REGION_LENGTH__+0x7f0c46>
ep_dpo_listen():
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:286
  }

  void ep_dpo_listen (void) {
    EP_DPO.CNT = 0;
    2456:	10 92 50 64 	sts	0x6450, r1	; 0x806450 <EP_TABLE+0x2a>
    245a:	10 92 51 64 	sts	0x6451, r1	; 0x806451 <EP_TABLE+0x2b>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:287
    loop_until_bit_is_clear(USB0_INTFLAGSB, USB_RMWBUSY_bp);
    245e:	80 91 0b 0c 	lds	r24, 0x0C0B	; 0x800c0b <__TEXT_REGION_LENGTH__+0x7f0c0b>
    2462:	82 fd       	sbrc	r24, 2
    2464:	fc cf       	rjmp	.-8      	; 0x245e <__DATA_REGION_LENGTH__+0x45e>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:288
    USB_EP_STATUS_CLR(USB_EP_DPO) = ~USB_TOGGLE_bm;
    2466:	8e ef       	ldi	r24, 0xFE	; 254
    2468:	80 93 48 0c 	sts	0x0C48, r24	; 0x800c48 <__TEXT_REGION_LENGTH__+0x7f0c48>
main():
/Users/askn/Collaborator/UPDI4AVR-USB/src/main.cpp:141

    /*** If CMSIS-DAP is not received, return to the top. ***/
    if (USB::is_not_dap()) continue;

    /*** CMSIS-DAP and JTAG3 packet receiver ***/
    if (JTAG::dap_command_check()) JTAG::jtag_scope_branch();
    246c:	00 23       	and	r16, r16
    246e:	09 f4       	brne	.+2      	; 0x2472 <__DATA_REGION_LENGTH__+0x472>
    2470:	79 cc       	rjmp	.-1806   	; 0x1d64 <main+0xec>
jtag_scope_branch():
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:376

  /* Processing branches depending on the scope specifier. */
  /* Currently, four types of scope are known: */
  void jtag_scope_branch (void) {
    size_t _rspsize = 0;
    uint8_t _scope  = packet.out.scope;
    2472:	80 91 c2 60 	lds	r24, 0x60C2	; 0x8060c2 <packet+0x4>
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:382
    D1PRINTF("SCOPE=%02X,C=%02X,S=%02X,L=%02X\r\n",
      _scope,
      packet.out.cmd,
      packet.out.section,
      packet.out.index);
    if      (_scope == 0x01) _rspsize = jtag_scope_general();       /* SCOPE_GENERAL */
    2476:	81 30       	cpi	r24, 0x01	; 1
    2478:	09 f0       	breq	.+2      	; 0x247c <__DATA_REGION_LENGTH__+0x47c>
    247a:	c7 c0       	rjmp	.+398    	; 0x260a <__DATA_REGION_LENGTH__+0x60a>
jtag_scope_general():
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:175
  }

  /*** Only a subset of JTAGICE3 commands are implemented. ***/
  size_t jtag_scope_general (void) {
    size_t  _rspsize = 0;
    uint8_t _cmd     = packet.out.cmd;
    247c:	80 91 c3 60 	lds	r24, 0x60C3	; 0x8060c3 <packet+0x5>
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:179
    uint8_t _section = packet.out.section;
    uint8_t _index   = packet.out.index;
    uint8_t _length  = packet.out.length;
    if (_cmd == 0x02) {             /* CMD3_GET_PARAMETER */
    2480:	82 30       	cpi	r24, 0x02	; 2
    2482:	09 f0       	breq	.+2      	; 0x2486 <__DATA_REGION_LENGTH__+0x486>
    2484:	b2 c0       	rjmp	.+356    	; 0x25ea <__DATA_REGION_LENGTH__+0x5ea>
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:176

  /*** Only a subset of JTAGICE3 commands are implemented. ***/
  size_t jtag_scope_general (void) {
    size_t  _rspsize = 0;
    uint8_t _cmd     = packet.out.cmd;
    uint8_t _section = packet.out.section;
    2486:	80 91 c5 60 	lds	r24, 0x60C5	; 0x8060c5 <packet+0x7>
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:177
    uint8_t _index   = packet.out.index;
    248a:	60 91 c6 60 	lds	r22, 0x60C6	; 0x8060c6 <packet+0x8>
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:178
    uint8_t _length  = packet.out.length;
    248e:	00 91 c7 60 	lds	r16, 0x60C7	; 0x8060c7 <packet+0x9>
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:181
    if (_cmd == 0x02) {             /* CMD3_GET_PARAMETER */
      D1PRINTF(" GEN_GET_PARAM=%02X:%02X:%02X\r\n", _section, _index, _length);
      if (_section == 0) {          /* SET_GET_CTXT_CONFIG */
    2492:	81 11       	cpse	r24, r1
    2494:	68 c0       	rjmp	.+208    	; 0x2566 <__DATA_REGION_LENGTH__+0x566>
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:183
        /* _index == 0-5 */
        memcpy_P(&packet.in.data[0], &jtag_version[_index], _length);
    2496:	40 2f       	mov	r20, r16
    2498:	50 e0       	ldi	r21, 0x00	; 0
    249a:	70 e0       	ldi	r23, 0x00	; 0
    249c:	64 53       	subi	r22, 0x34	; 52
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:195
          D1PRINTF(" VTARGET=%d\r\n", _vtarget);
          packet.in.wValue = _vtarget;
        }
        else {                      /* PARM3_ANALOG_XXXX */
          D1PRINTF(" PHYSICAL=%02X:%02X\r\n", _index, _length);
          memcpy_P(&packet.in.data[0], &jtag_physical[_index & 7], _length);
    249e:	7e 4f       	sbci	r23, 0xFE	; 254
    24a0:	85 ec       	ldi	r24, 0xC5	; 197
    24a2:	90 e6       	ldi	r25, 0x60	; 96
    24a4:	e2 d2       	rcall	.+1476   	; 0x2a6a <memcpy_P>
    24a6:	93 c0       	rjmp	.+294    	; 0x25ce <__DATA_REGION_LENGTH__+0x5ce>
dap_command_check():
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:100
            EP_MEM.dap_data[1] = 0x00;  /* EDBG_RSP_FAIL */
          }
        }
      }
    }
    else if (_cmd == 0x81) {        /* DAP_EDBG_VENDOR_AVR_RSP */
    24a8:	91 38       	cpi	r25, 0x81	; 129
    24aa:	a9 f5       	brne	.+106    	; 0x2516 <__DATA_REGION_LENGTH__+0x516>
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:101
      EP_MEM.dap_data[2] = 0;       /* Always zero */
    24ac:	10 92 20 63 	sts	0x6320, r1	; 0x806320 <EP_MEM+0x1a>
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:102
      if (_packet_endfrag == 0) {
    24b0:	90 91 89 60 	lds	r25, 0x6089	; 0x806089 <_packet_endfrag>
    24b4:	91 11       	cpse	r25, r1
    24b6:	05 c0       	rjmp	.+10     	; 0x24c2 <__DATA_REGION_LENGTH__+0x4c2>
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:104
        D1PRINTF("<EDBG_EMPTY>\r\n");
        EP_MEM.dap_data[1] = 0;
    24b8:	10 92 1f 63 	sts	0x631F, r1	; 0x80631f <EP_MEM+0x19>
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:124
      if (_sub == 0xFF              /* DAP_INFO_PACKET_SIZE      */
       || _sub == 0xFB              /* UART Receive Buffer Size  */
       || _sub == 0xFC) {           /* UART Transmit Buffer Size */
        EP_MEM.dap_data[1] = 0x02;  /* length=2 */
        EP_MEM.dap_data[2] = 0x40;  /* MaxPacketSize = 64 */
        EP_MEM.dap_data[3] = 0x00;
    24bc:	10 92 21 63 	sts	0x6321, r1	; 0x806321 <EP_MEM+0x1b>
    24c0:	31 cd       	rjmp	.-1438   	; 0x1f24 <main+0x2ac>
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:108
        D1PRINTF("<EDBG_EMPTY>\r\n");
        EP_MEM.dap_data[1] = 0;
        EP_MEM.dap_data[3] = 0;
      }
      else {
        memcpy(&EP_MEM.dap_data[4], &packet.in.token + (_packet_fragment * 60), 60);
    24c2:	80 91 8a 60 	lds	r24, 0x608A	; 0x80608a <_packet_fragment>
    24c6:	2c e3       	ldi	r18, 0x3C	; 60
    24c8:	82 9f       	mul	r24, r18
    24ca:	f0 01       	movw	r30, r0
    24cc:	11 24       	eor	r1, r1
    24ce:	e1 54       	subi	r30, 0x41	; 65
    24d0:	ff 49       	sbci	r31, 0x9F	; 159
    24d2:	a2 e2       	ldi	r26, 0x22	; 34
    24d4:	b3 e6       	ldi	r27, 0x63	; 99
    24d6:	01 90       	ld	r0, Z+
    24d8:	0d 92       	st	X+, r0
    24da:	2a 95       	dec	r18
    24dc:	e1 f7       	brne	.-8      	; 0x24d6 <__DATA_REGION_LENGTH__+0x4d6>
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:109
        EP_MEM.dap_data[1] = ((++_packet_fragment) << 4) | _packet_endfrag;
    24de:	8f 5f       	subi	r24, 0xFF	; 255
    24e0:	80 93 8a 60 	sts	0x608A, r24	; 0x80608a <_packet_fragment>
    24e4:	e0 e1       	ldi	r30, 0x10	; 16
    24e6:	8e 9f       	mul	r24, r30
    24e8:	90 01       	movw	r18, r0
    24ea:	11 24       	eor	r1, r1
    24ec:	29 2b       	or	r18, r25
    24ee:	20 93 1f 63 	sts	0x631F, r18	; 0x80631f <EP_MEM+0x19>
    24f2:	20 91 8b 60 	lds	r18, 0x608B	; 0x80608b <_packet_length>
    24f6:	30 91 8c 60 	lds	r19, 0x608C	; 0x80608c <_packet_length+0x1>
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:110
        EP_MEM.dap_data[3] = _packet_fragment == _packet_endfrag ? _packet_length : 60;
    24fa:	98 17       	cp	r25, r24
    24fc:	51 f0       	breq	.+20     	; 0x2512 <__DATA_REGION_LENGTH__+0x512>
    24fe:	8c e3       	ldi	r24, 0x3C	; 60
    2500:	80 93 21 63 	sts	0x6321, r24	; 0x806321 <EP_MEM+0x1b>
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:111
        _packet_length -= 60;
    2504:	2c 53       	subi	r18, 0x3C	; 60
    2506:	31 09       	sbc	r19, r1
    2508:	20 93 8b 60 	sts	0x608B, r18	; 0x80608b <_packet_length>
    250c:	30 93 8c 60 	sts	0x608C, r19	; 0x80608c <_packet_length+0x1>
    2510:	09 cd       	rjmp	.-1518   	; 0x1f24 <main+0x2ac>
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:110
        EP_MEM.dap_data[3] = 0;
      }
      else {
        memcpy(&EP_MEM.dap_data[4], &packet.in.token + (_packet_fragment * 60), 60);
        EP_MEM.dap_data[1] = ((++_packet_fragment) << 4) | _packet_endfrag;
        EP_MEM.dap_data[3] = _packet_fragment == _packet_endfrag ? _packet_length : 60;
    2512:	82 2f       	mov	r24, r18
    2514:	f5 cf       	rjmp	.-22     	; 0x2500 <__DATA_REGION_LENGTH__+0x500>
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:118
        D3PRINTHEX(&EP_MEM.dap_data, EP_MEM.dap_data[3] + 4);
      }
    }

    /*** DAP Standard ***/
    else if (_cmd == 0x00) {        /* DAP_CMD_INFO */
    2516:	91 11       	cpse	r25, r1
    2518:	1a c0       	rjmp	.+52     	; 0x254e <__DATA_REGION_LENGTH__+0x54e>
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:119
      if (_sub == 0xFF              /* DAP_INFO_PACKET_SIZE      */
    251a:	8f 3f       	cpi	r24, 0xFF	; 255
    251c:	21 f0       	breq	.+8      	; 0x2526 <__DATA_REGION_LENGTH__+0x526>
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:120
       || _sub == 0xFB              /* UART Receive Buffer Size  */
    251e:	95 e0       	ldi	r25, 0x05	; 5
    2520:	98 0f       	add	r25, r24
    2522:	92 30       	cpi	r25, 0x02	; 2
    2524:	38 f4       	brcc	.+14     	; 0x2534 <__DATA_REGION_LENGTH__+0x534>
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:122
       || _sub == 0xFC) {           /* UART Transmit Buffer Size */
        EP_MEM.dap_data[1] = 0x02;  /* length=2 */
    2526:	82 e0       	ldi	r24, 0x02	; 2
    2528:	80 93 1f 63 	sts	0x631F, r24	; 0x80631f <EP_MEM+0x19>
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:123
        EP_MEM.dap_data[2] = 0x40;  /* MaxPacketSize = 64 */
    252c:	80 e4       	ldi	r24, 0x40	; 64
    252e:	80 93 20 63 	sts	0x6320, r24	; 0x806320 <EP_MEM+0x1a>
    2532:	c4 cf       	rjmp	.-120    	; 0x24bc <__DATA_REGION_LENGTH__+0x4bc>
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:128
        EP_MEM.dap_data[3] = 0x00;
        D3PRINTF(" PI=");
        D3PRINTHEX(&EP_MEM.dap_data, 4);
      }
      else if (_sub == 0xF1) {      /* DAP_INFO_Capabilities */
    2534:	81 3f       	cpi	r24, 0xF1	; 241
    2536:	09 f0       	breq	.+2      	; 0x253a <__DATA_REGION_LENGTH__+0x53a>
    2538:	f5 cc       	rjmp	.-1558   	; 0x1f24 <main+0x2ac>
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:129
        EP_MEM.dap_data[1] = 0x02;  /* length=2 */
    253a:	82 e0       	ldi	r24, 0x02	; 2
    253c:	80 93 1f 63 	sts	0x631F, r24	; 0x80631f <EP_MEM+0x19>
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:130
        EP_MEM.dap_data[2] = 0x80;  /* 7:UART Communication Port */
    2540:	80 e8       	ldi	r24, 0x80	; 128
    2542:	80 93 20 63 	sts	0x6320, r24	; 0x806320 <EP_MEM+0x1a>
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:131
        EP_MEM.dap_data[3] = 0x01;  /* 1:USB COM Port */
    2546:	81 e0       	ldi	r24, 0x01	; 1
    2548:	80 93 21 63 	sts	0x6321, r24	; 0x806321 <EP_MEM+0x1b>
    254c:	eb cc       	rjmp	.-1578   	; 0x1f24 <main+0x2ac>
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:136
        D3PRINTF(" PI=");
        D3PRINTHEX(&EP_MEM.dap_data, 4);
      }
    }
    else if (_cmd == 0x02) {        /* DAP_CMD_CONNECT */
    254e:	92 30       	cpi	r25, 0x02	; 2
    2550:	09 f4       	brne	.+2      	; 0x2554 <__DATA_REGION_LENGTH__+0x554>
    2552:	e8 cc       	rjmp	.-1584   	; 0x1f24 <main+0x2ac>
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:142
      /* EP_MEM.dap_data[1] == CONN_TYPE */
      /* Here, the response is returned without processing. */
      D3PRINTF(" PI=");
      D3PRINTHEX(&EP_MEM.dap_data, 2);
    }
    else if (_cmd == 0x01           /* DAP_CMD_HOSTSTATUS */
    2554:	91 30       	cpi	r25, 0x01	; 1
    2556:	19 f4       	brne	.+6      	; 0x255e <__DATA_REGION_LENGTH__+0x55e>
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:143
          && _sub == 0x00) {        /* DAP_LED_CONNECT */
    2558:	81 11       	cpse	r24, r1
    255a:	e2 cc       	rjmp	.-1596   	; 0x1f20 <main+0x2a8>
    255c:	e3 cc       	rjmp	.-1594   	; 0x1f24 <main+0x2ac>
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:149
      /* EP_MEM.dap_data[2] == LED_ON/OFF */
      /* Here, the response is returned without processing. */
      D3PRINTF(" PI=");
      D3PRINTHEX(&EP_MEM.dap_data, 3);
    }
    else if (_cmd == 0x03) {        /* DAP_CMD_DISCONNECT */
    255e:	93 30       	cpi	r25, 0x03	; 3
    2560:	09 f0       	breq	.+2      	; 0x2564 <__DATA_REGION_LENGTH__+0x564>
    2562:	de cc       	rjmp	.-1604   	; 0x1f20 <main+0x2a8>
    2564:	df cc       	rjmp	.-1602   	; 0x1f24 <main+0x2ac>
jtag_scope_general():
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:187
        /* _index == 0-5 */
        memcpy_P(&packet.in.data[0], &jtag_version[_index], _length);
        D1PRINTF(" VESRION=");
        D1PRINTHEX(&packet.in.data[0], _length);
      }
      else if (_section == 1) {     /* SET_GET_CTXT_PHYSICAL */
    2566:	81 30       	cpi	r24, 0x01	; 1
    2568:	91 f5       	brne	.+100    	; 0x25ce <__DATA_REGION_LENGTH__+0x5ce>
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:188
        if (_index == 0 || _index == 0x20) {  /* PARM3_VTARGET */
    256a:	96 2f       	mov	r25, r22
    256c:	9f 7d       	andi	r25, 0xDF	; 223
    256e:	b1 f5       	brne	.+108    	; 0x25dc <__DATA_REGION_LENGTH__+0x5dc>
get_vdd():
/Users/askn/Collaborator/UPDI4AVR-USB/src/sys.cpp:317
   * A delay of 1250us is required for the voltage to stabilize.
   * The result is 10-bit, so multiply by 10.0 to convert to 1V * 0.0001.
   * The ADC0 peripheral is operational only during voltage measurements.
   */
  uint16_t get_vdd (void) {
    ADC0_INTFLAGS = ~0;
    2570:	9f ef       	ldi	r25, 0xFF	; 255
    2572:	90 93 07 06 	sts	0x0607, r25	; 0x800607 <__TEXT_REGION_LENGTH__+0x7f0607>
/Users/askn/Collaborator/UPDI4AVR-USB/src/sys.cpp:318
    ADC0_SAMPLE = 0;
    2576:	10 92 0e 06 	sts	0x060E, r1	; 0x80060e <__TEXT_REGION_LENGTH__+0x7f060e>
    257a:	10 92 0f 06 	sts	0x060F, r1	; 0x80060f <__TEXT_REGION_LENGTH__+0x7f060f>
/Users/askn/Collaborator/UPDI4AVR-USB/src/sys.cpp:319
    ADC0_CTRLA = ADC_ENABLE_bm;
    257e:	80 93 00 06 	sts	0x0600, r24	; 0x800600 <__TEXT_REGION_LENGTH__+0x7f0600>
/Users/askn/Collaborator/UPDI4AVR-USB/src/sys.cpp:320
    ADC0_CTRLB = ADC_PRESC_DIV4_gc;
    2582:	80 93 01 06 	sts	0x0601, r24	; 0x800601 <__TEXT_REGION_LENGTH__+0x7f0601>
/Users/askn/Collaborator/UPDI4AVR-USB/src/sys.cpp:321
    ADC0_CTRLC = ADC_REFSEL_1V024_gc;
    2586:	84 e0       	ldi	r24, 0x04	; 4
    2588:	80 93 02 06 	sts	0x0602, r24	; 0x800602 <__TEXT_REGION_LENGTH__+0x7f0602>
/Users/askn/Collaborator/UPDI4AVR-USB/src/sys.cpp:322
    ADC0_CTRLE = 250; /* (SAMPDUR + 0.5) * fCLK_ADC sample duration */
    258c:	8a ef       	ldi	r24, 0xFA	; 250
    258e:	80 93 04 06 	sts	0x0604, r24	; 0x800604 <__TEXT_REGION_LENGTH__+0x7f0604>
/Users/askn/Collaborator/UPDI4AVR-USB/src/sys.cpp:323
    ADC0_MUXPOS = ADC_MUXPOS_VDDDIV10_gc; /* ADC channel VDD * 0.1 */
    2592:	84 e4       	ldi	r24, 0x44	; 68
    2594:	80 93 0b 06 	sts	0x060B, r24	; 0x80060b <__TEXT_REGION_LENGTH__+0x7f060b>
/Users/askn/Collaborator/UPDI4AVR-USB/src/sys.cpp:324
    ADC0_COMMAND = ADC_MODE_SINGLE_10BIT_gc | ADC_START_IMMEDIATE_gc;
    2598:	81 e1       	ldi	r24, 0x11	; 17
    259a:	80 93 0a 06 	sts	0x060A, r24	; 0x80060a <__TEXT_REGION_LENGTH__+0x7f060a>
/Users/askn/Collaborator/UPDI4AVR-USB/src/sys.cpp:325
    loop_until_bit_is_set(ADC0_INTFLAGS, ADC_SAMPRDY_bp);
    259e:	80 91 07 06 	lds	r24, 0x0607	; 0x800607 <__TEXT_REGION_LENGTH__+0x7f0607>
    25a2:	81 ff       	sbrs	r24, 1
    25a4:	fc cf       	rjmp	.-8      	; 0x259e <__DATA_REGION_LENGTH__+0x59e>
/Users/askn/Collaborator/UPDI4AVR-USB/src/sys.cpp:326
    uint16_t _adc_reading = ADC0_SAMPLE;
    25a6:	80 91 0e 06 	lds	r24, 0x060E	; 0x80060e <__TEXT_REGION_LENGTH__+0x7f060e>
    25aa:	90 91 0f 06 	lds	r25, 0x060F	; 0x80060f <__TEXT_REGION_LENGTH__+0x7f060f>
/Users/askn/Collaborator/UPDI4AVR-USB/src/sys.cpp:327
    _adc_reading += (_adc_reading << 3) + _adc_reading;
    25ae:	9c 01       	movw	r18, r24
    25b0:	43 e0       	ldi	r20, 0x03	; 3
    25b2:	22 0f       	add	r18, r18
    25b4:	33 1f       	adc	r19, r19
    25b6:	4a 95       	dec	r20
    25b8:	e1 f7       	brne	.-8      	; 0x25b2 <__DATA_REGION_LENGTH__+0x5b2>
    25ba:	88 0f       	add	r24, r24
    25bc:	99 1f       	adc	r25, r25
/Users/askn/Collaborator/UPDI4AVR-USB/src/sys.cpp:328
    ADC0_CTRLA = 0;
    25be:	10 92 00 06 	sts	0x0600, r1	; 0x800600 <__TEXT_REGION_LENGTH__+0x7f0600>
/Users/askn/Collaborator/UPDI4AVR-USB/src/sys.cpp:327
    ADC0_CTRLE = 250; /* (SAMPDUR + 0.5) * fCLK_ADC sample duration */
    ADC0_MUXPOS = ADC_MUXPOS_VDDDIV10_gc; /* ADC channel VDD * 0.1 */
    ADC0_COMMAND = ADC_MODE_SINGLE_10BIT_gc | ADC_START_IMMEDIATE_gc;
    loop_until_bit_is_set(ADC0_INTFLAGS, ADC_SAMPRDY_bp);
    uint16_t _adc_reading = ADC0_SAMPLE;
    _adc_reading += (_adc_reading << 3) + _adc_reading;
    25c2:	82 0f       	add	r24, r18
    25c4:	93 1f       	adc	r25, r19
jtag_scope_general():
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:191
          _vtarget = SYS::get_vdd();
          D1PRINTF(" VTARGET=%d\r\n", _vtarget);
          packet.in.wValue = _vtarget;
    25c6:	80 93 c5 60 	sts	0x60C5, r24	; 0x8060c5 <packet+0x7>
    25ca:	90 93 c6 60 	sts	0x60C6, r25	; 0x8060c6 <packet+0x8>
jtag_scope_edbg():
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:253
        if (_index == 0x10) {       /* EDBG_CONTROL_TARGET_POWER */
          D1PRINTF(" TARGET_POWER=%02X\r\n", _jtag_vpow);
          packet.in.data[0] = _jtag_vpow;
        }
      }
      packet.in.res = 0x184;        /* RSP3_DATA */
    25ce:	84 e8       	ldi	r24, 0x84	; 132
    25d0:	91 e0       	ldi	r25, 0x01	; 1
    25d2:	80 93 c3 60 	sts	0x60C3, r24	; 0x8060c3 <packet+0x5>
    25d6:	90 93 c4 60 	sts	0x60C4, r25	; 0x8060c4 <packet+0x6>
    25da:	6b c0       	rjmp	.+214    	; 0x26b2 <__DATA_REGION_LENGTH__+0x6b2>
jtag_scope_general():
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:195
          D1PRINTF(" VTARGET=%d\r\n", _vtarget);
          packet.in.wValue = _vtarget;
        }
        else {                      /* PARM3_ANALOG_XXXX */
          D1PRINTF(" PHYSICAL=%02X:%02X\r\n", _index, _length);
          memcpy_P(&packet.in.data[0], &jtag_physical[_index & 7], _length);
    25dc:	40 2f       	mov	r20, r16
    25de:	50 e0       	ldi	r21, 0x00	; 0
    25e0:	67 70       	andi	r22, 0x07	; 7
    25e2:	70 e0       	ldi	r23, 0x00	; 0
    25e4:	6c 53       	subi	r22, 0x3C	; 60
    25e6:	7e 4f       	sbci	r23, 0xFE	; 254
    25e8:	5b cf       	rjmp	.-330    	; 0x24a0 <__DATA_REGION_LENGTH__+0x4a0>
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:201
        }
      }
      packet.in.res = 0x184;        /* RSP3_DATA */
      _rspsize = _length + 1;
    }
    else if (_cmd == 0x10) {        /* CMD3_SIGN_ON */
    25ea:	80 31       	cpi	r24, 0x10	; 16
    25ec:	49 f4       	brne	.+18     	; 0x2600 <__DATA_REGION_LENGTH__+0x600>
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:205
      D1PRINTF(" GEN_SIGN_ON\r\n");
      _jtag_hvctrl = 0;
      _jtag_unlock = 0;
      _jtag_arch = 0;
    25ee:	10 92 88 60 	sts	0x6088, r1	; 0x806088 <_jtag_arch>
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:211
      _tpi_setmode = 0;
      packet.in.res = 0x80;         /* RSP3_OK */
    }
    else if (_cmd == 0x11) {        /* CMD3_SIGN_OFF */
      D1PRINTF(" GEN_SIGN_OFF\r\n");
      packet.in.res = 0x80;         /* RSP3_OK */
    25f2:	80 e8       	ldi	r24, 0x80	; 128
    25f4:	90 e0       	ldi	r25, 0x00	; 0
jtag_scope_avr_core():
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:368
    else if (_jtag_arch == 0x01) _rspsize = DWIRE:jtag_scope_tiny();    /* dWire? */
    else if (_jtag_arch == 0x02) _rspsize = MEGA::jtag_scope_mega();    /* MEGA */
    else if (_jtag_arch == 0x03) _rspsize = XMEGA::jtag_scope_xmega();  /* XMEGA */
  #endif
    else if (_jtag_arch == 0x05) _rspsize = UPDI::jtag_scope_updi();    /* UPDI support */
    else packet.in.res = 0xA0;      /* RSP3_FAILED */
    25f6:	80 93 c3 60 	sts	0x60C3, r24	; 0x8060c3 <packet+0x5>
    25fa:	90 93 c4 60 	sts	0x60C4, r25	; 0x8060c4 <packet+0x6>
    25fe:	02 c0       	rjmp	.+4      	; 0x2604 <__DATA_REGION_LENGTH__+0x604>
jtag_scope_general():
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:209
      _jtag_unlock = 0;
      _jtag_arch = 0;
      _tpi_setmode = 0;
      packet.in.res = 0x80;         /* RSP3_OK */
    }
    else if (_cmd == 0x11) {        /* CMD3_SIGN_OFF */
    2600:	81 31       	cpi	r24, 0x11	; 17
    2602:	b9 f3       	breq	.-18     	; 0x25f2 <__DATA_REGION_LENGTH__+0x5f2>
main():
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:174
    D2PRINTHEX(&packet.in.token, _packet_length);
  }

  /*** Only a subset of JTAGICE3 commands are implemented. ***/
  size_t jtag_scope_general (void) {
    size_t  _rspsize = 0;
    2604:	10 e0       	ldi	r17, 0x00	; 0
    2606:	00 e0       	ldi	r16, 0x00	; 0
    2608:	f7 c0       	rjmp	.+494    	; 0x27f8 <__DATA_REGION_LENGTH__+0x7f8>
jtag_scope_branch():
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:388
  #ifdef _Not_yet_implemented_stub_
    else if (_scope == 0x00) _rspsize = jtag_scope_info();          /* SCOPE_INFO */ /* Not used with HID */
    else if (_scope == 0x11) _rspsize = ISP::jtag_scope_isp();      /* SCOPE_AVR_ISP */
    else if (_scope == 0x13) _rspsize = AVR32::jtag_scope_avr32();  /* SCOPE_AVR32 */
  #endif
    else if (_scope == 0x12) _rspsize = jtag_scope_avr_core();      /* SCOPE_AVR */
    260a:	82 31       	cpi	r24, 0x12	; 18
    260c:	09 f0       	breq	.+2      	; 0x2610 <__DATA_REGION_LENGTH__+0x610>
    260e:	37 c1       	rjmp	.+622    	; 0x287e <__DATA_REGION_LENGTH__+0x87e>
jtag_scope_avr_core():
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:262
  }

  /* The AVR scope is further branched by the ARCH designator. */
  size_t jtag_scope_avr_core (void) {
    size_t  _rspsize = 0;
    uint8_t _cmd     = packet.out.cmd;
    2610:	10 91 c3 60 	lds	r17, 0x60C3	; 0x8060c3 <packet+0x5>
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:263
    uint8_t _section = packet.out.section;
    2614:	80 91 c5 60 	lds	r24, 0x60C5	; 0x8060c5 <packet+0x7>
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:264
    uint8_t _index   = packet.out.index;
    2618:	90 91 c6 60 	lds	r25, 0x60C6	; 0x8060c6 <packet+0x8>
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:265
    uint8_t _length  = packet.out.length;
    261c:	40 91 c7 60 	lds	r20, 0x60C7	; 0x8060c7 <packet+0x9>
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:266
    if (_cmd == 0x01) {             /* CMD3_SET_PARAMETER */
    2620:	11 30       	cpi	r17, 0x01	; 1
    2622:	c1 f5       	brne	.+112    	; 0x2694 <__DATA_REGION_LENGTH__+0x694>
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:267
      uint16_t _data = packet.out.wValue;
    2624:	20 91 c8 60 	lds	r18, 0x60C8	; 0x8060c8 <packet+0xa>
    2628:	30 91 c9 60 	lds	r19, 0x60C9	; 0x8060c9 <packet+0xb>
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:269
      D1PRINTF(" AVR_SET_PARAM=%02X:%02X:%02X:%02X\r\n", _section, _index, _length, _data);
      if (_section == 0) {          /* SET_GET_CTXT_CONFIG */
    262c:	81 11       	cpse	r24, r1
    262e:	05 c0       	rjmp	.+10     	; 0x263a <__DATA_REGION_LENGTH__+0x63a>
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:270
        if (_index == 0) {          /* PARM3_ARCH */
    2630:	91 11       	cpse	r25, r1
    2632:	df cf       	rjmp	.-66     	; 0x25f2 <__DATA_REGION_LENGTH__+0x5f2>
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:272
          D1PRINTF(" ARCH=%02X\r\n", _data);
          _jtag_arch = _data;       /* 5:PARM3_ARCH_UPDI */
    2634:	20 93 88 60 	sts	0x6088, r18	; 0x806088 <_jtag_arch>
    2638:	dc cf       	rjmp	.-72     	; 0x25f2 <__DATA_REGION_LENGTH__+0x5f2>
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:279
        else if (_index == 1) {     /* PARM3_SESS_PURPOSE */
          D1PRINTF(" SESS_PURPOSE=%02X\r\n", _data);
          _jtag_sess = _data;       /* */
        }
      }
      else if (_section == 1) {     /* SET_GET_CTXT_PHYSICAL */
    263a:	81 30       	cpi	r24, 0x01	; 1
    263c:	f1 f4       	brne	.+60     	; 0x267a <__DATA_REGION_LENGTH__+0x67a>
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:280
        if (_index == 0) {          /* PARM3_CONNECTION */
    263e:	91 11       	cpse	r25, r1
    2640:	03 c0       	rjmp	.+6      	; 0x2648 <__DATA_REGION_LENGTH__+0x648>
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:282
          D1PRINTF(" CONNECTION=%02X\r\n", _data);
          _jtag_conn = _data;       /* 8:PARM3_CONN_UPDI */
    2642:	20 93 87 60 	sts	0x6087, r18	; 0x806087 <_jtag_conn>
    2646:	d5 cf       	rjmp	.-86     	; 0x25f2 <__DATA_REGION_LENGTH__+0x5f2>
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:284
        }
        else if (_index == 0x31) {  /* PARM3_CLK_XMEGA_PDI */
    2648:	91 33       	cpi	r25, 0x31	; 49
    264a:	99 f6       	brne	.-90     	; 0x25f2 <__DATA_REGION_LENGTH__+0x5f2>
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:285
          _xclk = _data;
    264c:	20 93 18 60 	sts	0x6018, r18	; 0x806018 <_xclk>
    2650:	30 93 19 60 	sts	0x6019, r19	; 0x806019 <_xclk+0x1>
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:287
          D1PRINTF(" XCLK=%d\r\n", _xclk);
          if (_jtag_arch == 5) {
    2654:	80 91 88 60 	lds	r24, 0x6088	; 0x806088 <_jtag_arch>
    2658:	85 30       	cpi	r24, 0x05	; 5
    265a:	59 f6       	brne	.-106    	; 0x25f2 <__DATA_REGION_LENGTH__+0x5f2>
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:290
            /* Called with `-B xclk[unit]`. */
            /* XCLK Range Limitation : LSB=kHz */
            if (_xclk > 240) _xclk = 240;
    265c:	80 ef       	ldi	r24, 0xF0	; 240
    265e:	90 e0       	ldi	r25, 0x00	; 0
    2660:	21 3f       	cpi	r18, 0xF1	; 241
    2662:	31 05       	cpc	r19, r1
    2664:	28 f4       	brcc	.+10     	; 0x2670 <__DATA_REGION_LENGTH__+0x670>
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:291
            else if (_xclk < 40) _xclk = 40;
    2666:	28 32       	cpi	r18, 0x28	; 40
    2668:	31 05       	cpc	r19, r1
    266a:	18 f6       	brcc	.-122    	; 0x25f2 <__DATA_REGION_LENGTH__+0x5f2>
    266c:	88 e2       	ldi	r24, 0x28	; 40
    266e:	90 e0       	ldi	r25, 0x00	; 0
    2670:	80 93 18 60 	sts	0x6018, r24	; 0x806018 <_xclk>
    2674:	90 93 19 60 	sts	0x6019, r25	; 0x806019 <_xclk+0x1>
    2678:	bc cf       	rjmp	.-136    	; 0x25f2 <__DATA_REGION_LENGTH__+0x5f2>
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:298
            if (_xclk != _data) D1PRINTF(" FIX_CLK=%d\r\n", _xclk);
  #endif
          }
        }
      }
      else if (_section == 2) {     /* SET_GET_CTXT_DEVICE */
    267a:	82 30       	cpi	r24, 0x02	; 2
    267c:	09 f0       	breq	.+2      	; 0x2680 <__DATA_REGION_LENGTH__+0x680>
    267e:	b9 cf       	rjmp	.-142    	; 0x25f2 <__DATA_REGION_LENGTH__+0x5f2>
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:299
        if (_index == 0) {          /* PARM3_DEVICEDESC */
    2680:	91 11       	cpse	r25, r1
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:301
          D1PRINTF(" DEVICEDESC=%X\r\n", _length);
          memcpy(&Device_Descriptor, &packet.out.setData[0], _length & 63);
    2682:	b7 cf       	rjmp	.-146    	; 0x25f2 <__DATA_REGION_LENGTH__+0x5f2>
    2684:	4f 73       	andi	r20, 0x3F	; 63
    2686:	50 e0       	ldi	r21, 0x00	; 0
    2688:	68 ec       	ldi	r22, 0xC8	; 200
    268a:	70 e6       	ldi	r23, 0x60	; 96
    268c:	8e e8       	ldi	r24, 0x8E	; 142
    268e:	90 e6       	ldi	r25, 0x60	; 96
    2690:	54 d2       	rcall	.+1192   	; 0x2b3a <memcpy>
    2692:	af cf       	rjmp	.-162    	; 0x25f2 <__DATA_REGION_LENGTH__+0x5f2>
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:341
          _jtag_unlock = _data;     /* 1:ENABLE */
        }
      }
      packet.in.res = 0x80;         /* RSP3_OK */
    }
    else if (_cmd == 0x02) {        /* CMD3_GET_PARAMETER */
    2694:	12 30       	cpi	r17, 0x02	; 2
    2696:	19 f5       	brne	.+70     	; 0x26de <__DATA_REGION_LENGTH__+0x6de>
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:343
      D1PRINTF(" AVR_GET_PARAMETER=%02X:%02X:%02X\r\n", _section, _index, _length);
      if (_section == 0) {          /* SET_GET_CTXT_CONFIG */
    2698:	81 11       	cpse	r24, r1
    269a:	0d c0       	rjmp	.+26     	; 0x26b6 <__DATA_REGION_LENGTH__+0x6b6>
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:346
        if (_index == 0) {          /* PARM3_ARCH */
          D1PRINTF(" ARCH=%02X\r\n", _jtag_arch);
          packet.in.data[0] = _jtag_arch;
    269c:	80 91 88 60 	lds	r24, 0x6088	; 0x806088 <_jtag_arch>
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:344
      packet.in.res = 0x80;         /* RSP3_OK */
    }
    else if (_cmd == 0x02) {        /* CMD3_GET_PARAMETER */
      D1PRINTF(" AVR_GET_PARAMETER=%02X:%02X:%02X\r\n", _section, _index, _length);
      if (_section == 0) {          /* SET_GET_CTXT_CONFIG */
        if (_index == 0) {          /* PARM3_ARCH */
    26a0:	99 23       	and	r25, r25
    26a2:	79 f0       	breq	.+30     	; 0x26c2 <__DATA_REGION_LENGTH__+0x6c2>
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:359
        else if (_index == 0x31) {  /* PARM3_CLK_XMEGA_PDI */
          D1PRINTF(" XCLK=%d\r\n", _xclk);
          packet.in.wValue = _xclk;
        }
      }
      packet.in.res = 0x184;        /* RSP3_DATA */
    26a4:	84 e8       	ldi	r24, 0x84	; 132
    26a6:	91 e0       	ldi	r25, 0x01	; 1
    26a8:	80 93 c3 60 	sts	0x60C3, r24	; 0x8060c3 <packet+0x5>
    26ac:	90 93 c4 60 	sts	0x60C4, r25	; 0x8060c4 <packet+0x6>
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:360
      _rspsize = _length + 1;
    26b0:	04 2f       	mov	r16, r20
jtag_scope_edbg():
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:254
          D1PRINTF(" TARGET_POWER=%02X\r\n", _jtag_vpow);
          packet.in.data[0] = _jtag_vpow;
        }
      }
      packet.in.res = 0x184;        /* RSP3_DATA */
      _rspsize = _length + 1;
    26b2:	10 e0       	ldi	r17, 0x00	; 0
    26b4:	50 c1       	rjmp	.+672    	; 0x2956 <__DATA_REGION_LENGTH__+0x956>
jtag_scope_avr_core():
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:349
        if (_index == 0) {          /* PARM3_ARCH */
          D1PRINTF(" ARCH=%02X\r\n", _jtag_arch);
          packet.in.data[0] = _jtag_arch;
        }
      }
      else if (_section == 1) {     /* SET_GET_CTXT_PHYSICAL */
    26b6:	81 30       	cpi	r24, 0x01	; 1
    26b8:	a9 f7       	brne	.-22     	; 0x26a4 <__DATA_REGION_LENGTH__+0x6a4>
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:350
        if (_index == 0) {          /* PARM3_CONNECTION */
    26ba:	91 11       	cpse	r25, r1
    26bc:	05 c0       	rjmp	.+10     	; 0x26c8 <__DATA_REGION_LENGTH__+0x6c8>
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:352
          D1PRINTF(" CONNECTION=%02X\r\n", _jtag_conn);
          packet.in.data[0] = _jtag_conn;
    26be:	80 91 87 60 	lds	r24, 0x6087	; 0x806087 <_jtag_conn>
    26c2:	80 93 c5 60 	sts	0x60C5, r24	; 0x8060c5 <packet+0x7>
    26c6:	ee cf       	rjmp	.-36     	; 0x26a4 <__DATA_REGION_LENGTH__+0x6a4>
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:354
        }
        else if (_index == 0x31) {  /* PARM3_CLK_XMEGA_PDI */
    26c8:	91 33       	cpi	r25, 0x31	; 49
    26ca:	61 f7       	brne	.-40     	; 0x26a4 <__DATA_REGION_LENGTH__+0x6a4>
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:356
          D1PRINTF(" XCLK=%d\r\n", _xclk);
          packet.in.wValue = _xclk;
    26cc:	80 91 18 60 	lds	r24, 0x6018	; 0x806018 <_xclk>
    26d0:	90 91 19 60 	lds	r25, 0x6019	; 0x806019 <_xclk+0x1>
    26d4:	80 93 c5 60 	sts	0x60C5, r24	; 0x8060c5 <packet+0x7>
    26d8:	90 93 c6 60 	sts	0x60C6, r25	; 0x8060c6 <packet+0x8>
    26dc:	e3 cf       	rjmp	.-58     	; 0x26a4 <__DATA_REGION_LENGTH__+0x6a4>
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:367
  #ifdef _Not_yet_implemented_stub_
    else if (_jtag_arch == 0x01) _rspsize = DWIRE:jtag_scope_tiny();    /* dWire? */
    else if (_jtag_arch == 0x02) _rspsize = MEGA::jtag_scope_mega();    /* MEGA */
    else if (_jtag_arch == 0x03) _rspsize = XMEGA::jtag_scope_xmega();  /* XMEGA */
  #endif
    else if (_jtag_arch == 0x05) _rspsize = UPDI::jtag_scope_updi();    /* UPDI support */
    26de:	90 91 88 60 	lds	r25, 0x6088	; 0x806088 <_jtag_arch>
    26e2:	95 30       	cpi	r25, 0x05	; 5
    26e4:	09 f0       	breq	.+2      	; 0x26e8 <__DATA_REGION_LENGTH__+0x6e8>
    26e6:	c8 c0       	rjmp	.+400    	; 0x2878 <__DATA_REGION_LENGTH__+0x878>
jtag_scope_updi():
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:406

  /* ARCH=UPDI scope Provides functionality. */
  size_t jtag_scope_updi (void) {
    size_t _rspsize = 0;
    uint8_t _cmd = packet.out.cmd;
    if (_cmd == 0x10) {             /* CMD3_SIGN_ON */
    26e8:	10 31       	cpi	r17, 0x10	; 16
    26ea:	51 f5       	brne	.+84     	; 0x2740 <__DATA_REGION_LENGTH__+0x740>
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:408
      D1PRINTF(" UPDI_SIGN_ON=EXT:%02X\r\n", packet.out.bMType);
      USART::setup();
    26ec:	0e 94 08 0a 	call	0x1410	; 0x1410 <USART::setup()>
change_updi():
/Users/askn/Collaborator/UPDI4AVR-USB/src/usart.cpp:79
  #endif
  }

  /*** Sets up single-wire asynchronous mode for UPDI operation. ***/
  void change_updi (void) {
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    26f0:	0f b7       	in	r16, 0x3f	; 63
__iCliRetVal():
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/tools/avr-gcc/7.3.0-avr8-gnu-toolchain/avr/include/util/atomic.h:50
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    26f2:	f8 94       	cli
change_updi():
/Users/askn/Collaborator/UPDI4AVR-USB/src/usart.cpp:81
      D1PRINTF(" UART=UPDI\r\n");
      PORTMUX_USARTROUTEA = PORTMUX_USART_UPDI;
    26f4:	10 93 e2 05 	sts	0x05E2, r17	; 0x8005e2 <__TEXT_REGION_LENGTH__+0x7f05e2>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usart.cpp:82
      USART0_STATUS = USART_DREIF_bm;
    26f8:	80 e2       	ldi	r24, 0x20	; 32
    26fa:	80 93 04 08 	sts	0x0804, r24	; 0x800804 <__TEXT_REGION_LENGTH__+0x7f0804>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usart.cpp:83
      USART0_BAUD  = calk_baud_khz(_xclk);
    26fe:	80 91 18 60 	lds	r24, 0x6018	; 0x806018 <_xclk>
    2702:	90 91 19 60 	lds	r25, 0x6019	; 0x806019 <_xclk+0x1>
    2706:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <USART::calk_baud_khz(unsigned int)>
    270a:	80 93 08 08 	sts	0x0808, r24	; 0x800808 <__TEXT_REGION_LENGTH__+0x7f0808>
    270e:	90 93 09 08 	sts	0x0809, r25	; 0x800809 <__TEXT_REGION_LENGTH__+0x7f0809>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usart.cpp:84
      USART0_CTRLC = USART_CHSIZE_8BIT_gc | USART_PMODE_EVEN_gc | USART_SBMODE_2BIT_gc;
    2712:	8b e2       	ldi	r24, 0x2B	; 43
    2714:	80 93 07 08 	sts	0x0807, r24	; 0x800807 <__TEXT_REGION_LENGTH__+0x7f0807>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usart.cpp:87
      /* The RS485_INT:_BV(1) attribute is undocumented but works fine.     */
      /* Without it, an additional delay is required before sending a byte. */
      USART0_CTRLA = USART_LBME_bm | USART_RS485_INT_gc;
    2718:	8a e0       	ldi	r24, 0x0A	; 10
    271a:	80 93 05 08 	sts	0x0805, r24	; 0x800805 <__TEXT_REGION_LENGTH__+0x7f0805>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usart.cpp:88
      USART0_CTRLB = USART_RXEN_bm | USART_TXEN_bm | USART_ODME_bm;
    271e:	88 ec       	ldi	r24, 0xC8	; 200
    2720:	80 93 06 08 	sts	0x0806, r24	; 0x800806 <__TEXT_REGION_LENGTH__+0x7f0806>
__iRestore():
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:410
      USART::change_updi();
      _rspsize = Timeout::command(&connect);
    2724:	0f bf       	out	0x3f, r16	; 63
jtag_scope_updi():
    2726:	8e e2       	ldi	r24, 0x2E	; 46
    2728:	9b e0       	ldi	r25, 0x0B	; 11
    272a:	5f da       	rcall	.-2882   	; 0x1bea <Timeout::command(unsigned int (*)(), unsigned int) [clone .constprop.8]>
    272c:	8c 01       	movw	r16, r24
main():
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:412
      /* If it fails here, it is expected to try again, giving it a chance at HV control. */
      packet.in.res = _rspsize ? 0x84 : 0xA0; /* RSP3_DATA : RSP3_FAILED */
    272e:	84 e8       	ldi	r24, 0x84	; 132
    2730:	90 e0       	ldi	r25, 0x00	; 0
jtag_scope_updi():
    2732:	01 15       	cp	r16, r1
    2734:	11 05       	cpc	r17, r1
    2736:	09 f0       	breq	.+2      	; 0x273a <__DATA_REGION_LENGTH__+0x73a>
    2738:	5b c0       	rjmp	.+182    	; 0x27f0 <__DATA_REGION_LENGTH__+0x7f0>
main():
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:465
    else if (_cmd == 0x23) {        /* CMD3_WRITE_MEMORY */
      D1PRINTF(" UPDI_WRITE=%02X:%06lX:%04X\r\n", packet.out.bMType,
        packet.out.dwAddr, (size_t)packet.out.dwLength);
      _rspsize = Timeout::command(Command_Table.write_memory);
    }
    packet.in.res = _rspsize ? 0x80 : 0xA0;   /* RSP3_OK : RSP3_FAILED */
    273a:	80 ea       	ldi	r24, 0xA0	; 160
    273c:	90 e0       	ldi	r25, 0x00	; 0
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:415
      _rspsize = Timeout::command(&connect);
      /* If it fails here, it is expected to try again, giving it a chance at HV control. */
      packet.in.res = _rspsize ? 0x84 : 0xA0; /* RSP3_DATA : RSP3_FAILED */
      return _rspsize;
    }
    else if (_cmd == 0x11) {        /* CMD3_SIGN_OFF */
    273e:	58 c0       	rjmp	.+176    	; 0x27f0 <__DATA_REGION_LENGTH__+0x7f0>
jtag_scope_updi():
    2740:	11 31       	cpi	r17, 0x11	; 17
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:418
      D1PRINTF(" UPDI_SIGN_OFF\r\n");
      /* If UPDI control has failed, RSP3_OK is always returned. */
      _rspsize = bit_is_set(PGCONF, PGCONF_UPDI_bp) ? Timeout::command(&disconnect) : 1;
    2742:	99 f4       	brne	.+38     	; 0x276a <__DATA_REGION_LENGTH__+0x76a>
    2744:	e8 9b       	sbis	0x1d, 0	; 29
    2746:	0e c0       	rjmp	.+28     	; 0x2764 <__DATA_REGION_LENGTH__+0x764>
    2748:	8e e1       	ldi	r24, 0x1E	; 30
    274a:	9b e0       	ldi	r25, 0x0B	; 11
    274c:	4e da       	rcall	.-2916   	; 0x1bea <Timeout::command(unsigned int (*)(), unsigned int) [clone .constprop.8]>
    274e:	8c 01       	movw	r16, r24
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:419
      USART::setup();
    2750:	0e 94 08 0a 	call	0x1410	; 0x1410 <USART::setup()>
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:420
      USART::change_vcp();
    2754:	0e 94 cd 05 	call	0xb9a	; 0xb9a <USART::change_vcp()>
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:465
    else if (_cmd == 0x23) {        /* CMD3_WRITE_MEMORY */
      D1PRINTF(" UPDI_WRITE=%02X:%06lX:%04X\r\n", packet.out.bMType,
        packet.out.dwAddr, (size_t)packet.out.dwLength);
      _rspsize = Timeout::command(Command_Table.write_memory);
    }
    packet.in.res = _rspsize ? 0x80 : 0xA0;   /* RSP3_OK : RSP3_FAILED */
    2758:	01 15       	cp	r16, r1
    275a:	11 05       	cpc	r17, r1
    275c:	71 f3       	breq	.-36     	; 0x273a <__DATA_REGION_LENGTH__+0x73a>
main():
    275e:	80 e8       	ldi	r24, 0x80	; 128
    2760:	90 e0       	ldi	r25, 0x00	; 0
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:418
      return _rspsize;
    }
    else if (_cmd == 0x11) {        /* CMD3_SIGN_OFF */
      D1PRINTF(" UPDI_SIGN_OFF\r\n");
      /* If UPDI control has failed, RSP3_OK is always returned. */
      _rspsize = bit_is_set(PGCONF, PGCONF_UPDI_bp) ? Timeout::command(&disconnect) : 1;
    2762:	46 c0       	rjmp	.+140    	; 0x27f0 <__DATA_REGION_LENGTH__+0x7f0>
    2764:	01 e0       	ldi	r16, 0x01	; 1
    2766:	10 e0       	ldi	r17, 0x00	; 0
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:422
      USART::setup();
      USART::change_vcp();
    }
    else if (_cmd == 0x15) {        /* CMD3_ENTER_PROGMODE */
    2768:	f3 cf       	rjmp	.-26     	; 0x2750 <__DATA_REGION_LENGTH__+0x750>
jtag_scope_updi():
    276a:	15 31       	cpi	r17, 0x15	; 21
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:426
      D1PRINTF(" UPDI_ENTER_PROG\r\n");
      /* On failure, RSP3_OK is returned if a UPDI connection is available. */
      /* Locked devices are given the opportunity to write to USERROW and erase the chip. */
      _rspsize = Timeout::command(&enter_progmode) || bit_is_set(PGCONF, PGCONF_UPDI_bp);
    276c:	49 f4       	brne	.+18     	; 0x2780 <__DATA_REGION_LENGTH__+0x780>
    276e:	85 e9       	ldi	r24, 0x95	; 149
    2770:	92 e0       	ldi	r25, 0x02	; 2
    2772:	3b da       	rcall	.-2954   	; 0x1bea <Timeout::command(unsigned int (*)(), unsigned int) [clone .constprop.8]>
    2774:	89 2b       	or	r24, r25
    2776:	11 f4       	brne	.+4      	; 0x277c <__DATA_REGION_LENGTH__+0x77c>
    2778:	0d b3       	in	r16, 0x1d	; 29
    277a:	01 70       	andi	r16, 0x01	; 1
    277c:	10 e0       	ldi	r17, 0x00	; 0
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:428
    }
    else if (_cmd == 0x16) {        /* CMD3_LEAVE_PROGMODE */
    277e:	ec cf       	rjmp	.-40     	; 0x2758 <__DATA_REGION_LENGTH__+0x758>
    2780:	16 31       	cpi	r17, 0x16	; 22
    2782:	09 f4       	brne	.+2      	; 0x2786 <__DATA_REGION_LENGTH__+0x786>
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:434
      D1PRINTF(" UPDI_LEAVE_PROG\r\n");
      /* There is nothing to do. */
      /* The actual termination process is delayed until CMD3_SIGN_OFF. */
      _rspsize = 1;
    }
    else if (_cmd == 0x20) {        /* CMD3_ERASE_MEMORY */
    2784:	73 c0       	rjmp	.+230    	; 0x286c <__DATA_REGION_LENGTH__+0x86c>
    2786:	10 32       	cpi	r17, 0x20	; 32
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:437
      D1PRINTF(" UPDI_ERASE=%02X:%06lX\r\n",
        packet.out.bEType, packet.out.dwPageAddr);
      _rspsize = Timeout::command(Command_Table.erase_memory);
    2788:	39 f4       	brne	.+14     	; 0x2798 <__DATA_REGION_LENGTH__+0x798>
    278a:	80 91 02 63 	lds	r24, 0x6302	; 0x806302 <Command_Table+0x4>
    278e:	90 91 03 63 	lds	r25, 0x6303	; 0x806303 <Command_Table+0x5>
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:463
      return _rspsize;
    }
    else if (_cmd == 0x23) {        /* CMD3_WRITE_MEMORY */
      D1PRINTF(" UPDI_WRITE=%02X:%06lX:%04X\r\n", packet.out.bMType,
        packet.out.dwAddr, (size_t)packet.out.dwLength);
      _rspsize = Timeout::command(Command_Table.write_memory);
    2792:	2b da       	rcall	.-2986   	; 0x1bea <Timeout::command(unsigned int (*)(), unsigned int) [clone .constprop.8]>
    2794:	8c 01       	movw	r16, r24
    2796:	e0 cf       	rjmp	.-64     	; 0x2758 <__DATA_REGION_LENGTH__+0x758>
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:439
    else if (_cmd == 0x20) {        /* CMD3_ERASE_MEMORY */
      D1PRINTF(" UPDI_ERASE=%02X:%06lX\r\n",
        packet.out.bEType, packet.out.dwPageAddr);
      _rspsize = Timeout::command(Command_Table.erase_memory);
    }
    else if (bit_is_clear(PGCONF, PGCONF_UPDI_bp)) { /* empty */ }
    2798:	e8 9b       	sbis	0x1d, 0	; 29
    279a:	6b c0       	rjmp	.+214    	; 0x2872 <__DATA_REGION_LENGTH__+0x872>
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:440
    else if (_cmd == 0x21) {        /* CMD3_READ_MEMORY */
    279c:	11 32       	cpi	r17, 0x21	; 33
    279e:	09 f0       	breq	.+2      	; 0x27a2 <__DATA_REGION_LENGTH__+0x7a2>
    27a0:	5e c0       	rjmp	.+188    	; 0x285e <__DATA_REGION_LENGTH__+0x85e>
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:444
      D1PRINTF(" UPDI_READ=%02X:%06lX:%04X\r\n", packet.out.bMType,
        packet.out.dwAddr, (size_t)packet.out.dwLength);
      uint8_t m_type = packet.out.bMType;
      size_t _wLength = packet.out.dwLength;
    27a2:	00 91 ca 60 	lds	r16, 0x60CA	; 0x8060ca <packet+0xc>
    27a6:	10 91 cb 60 	lds	r17, 0x60CB	; 0x8060cb <packet+0xd>
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:445
      if (m_type == 0xD3) {         /* MTYPE_SIB */
    27aa:	83 3d       	cpi	r24, 0xD3	; 211
    27ac:	99 f4       	brne	.+38     	; 0x27d4 <__DATA_REGION_LENGTH__+0x7d4>
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:447
        /* The SIB request occurs before ENTER_PROGMODE. */
        memcpy(&packet.in.data[(uint8_t)packet.out.dwAddr & 31], &_sib, ((_wLength - 1) & 31) + 1);
    27ae:	80 91 c6 60 	lds	r24, 0x60C6	; 0x8060c6 <packet+0x8>
    27b2:	8f 71       	andi	r24, 0x1F	; 31
    27b4:	90 e0       	ldi	r25, 0x00	; 0
    27b6:	a8 01       	movw	r20, r16
    27b8:	41 50       	subi	r20, 0x01	; 1
    27ba:	51 09       	sbc	r21, r1
    27bc:	4f 71       	andi	r20, 0x1F	; 31
    27be:	55 27       	eor	r21, r21
    27c0:	4f 5f       	subi	r20, 0xFF	; 255
    27c2:	5f 4f       	sbci	r21, 0xFF	; 255
    27c4:	6e ed       	ldi	r22, 0xDE	; 222
    27c6:	72 e6       	ldi	r23, 0x62	; 98
    27c8:	8b 53       	subi	r24, 0x3B	; 59
    27ca:	9f 49       	sbci	r25, 0x9F	; 159
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:312
      packet.in.data[0] = 0x1E;
      packet.in.data[1] = _sib[0] == ' ' ? 'A' : _sib[0];
      packet.in.data[2] = _sib[10];
    }
    else memset(&packet.in.data[0], 0xFF, _wLength);
    return _wLength + 1;
    27cc:	b6 d1       	rcall	.+876    	; 0x2b3a <memcpy>
read_dummy():
    27ce:	0f 5f       	subi	r16, 0xFF	; 255
    27d0:	1f 4f       	sbci	r17, 0xFF	; 255
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:450
      if (m_type == 0xD3) {         /* MTYPE_SIB */
        /* The SIB request occurs before ENTER_PROGMODE. */
        memcpy(&packet.in.data[(uint8_t)packet.out.dwAddr & 31], &_sib, ((_wLength - 1) & 31) + 1);
        _rspsize = _wLength + 1;
      }
      else if (bit_is_set(PGCONF, PGCONF_PROG_bp)) {
    27d2:	08 c0       	rjmp	.+16     	; 0x27e4 <__DATA_REGION_LENGTH__+0x7e4>
jtag_scope_updi():
    27d4:	e9 9b       	sbis	0x1d, 1	; 29
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:451
        _rspsize = Timeout::command(Command_Table.read_memory);
    27d6:	29 c0       	rjmp	.+82     	; 0x282a <__DATA_REGION_LENGTH__+0x82a>
    27d8:	80 91 00 63 	lds	r24, 0x6300	; 0x806300 <Command_Table+0x2>
    27dc:	90 91 01 63 	lds	r25, 0x6301	; 0x806301 <Command_Table+0x3>
    27e0:	04 da       	rcall	.-3064   	; 0x1bea <Timeout::command(unsigned int (*)(), unsigned int) [clone .constprop.8]>
    27e2:	8c 01       	movw	r16, r24
main():
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:457
      }
      /* If not in PROGMODE, respond with a dummy. */
      /* A dummy SIG will be returned for locked devices. */
      /* This will prevent AVRDUDE from displaying annoying errors. */
      else _rspsize = read_dummy();
      packet.in.res = _rspsize ? 0x184 : 0xA0;
    27e4:	84 e8       	ldi	r24, 0x84	; 132
    27e6:	91 e0       	ldi	r25, 0x01	; 1
jtag_scope_updi():
    27e8:	01 15       	cp	r16, r1
    27ea:	11 05       	cpc	r17, r1
    27ec:	09 f4       	brne	.+2      	; 0x27f0 <__DATA_REGION_LENGTH__+0x7f0>
    27ee:	a5 cf       	rjmp	.-182    	; 0x273a <__DATA_REGION_LENGTH__+0x73a>
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:465
    else if (_cmd == 0x23) {        /* CMD3_WRITE_MEMORY */
      D1PRINTF(" UPDI_WRITE=%02X:%06lX:%04X\r\n", packet.out.bMType,
        packet.out.dwAddr, (size_t)packet.out.dwLength);
      _rspsize = Timeout::command(Command_Table.write_memory);
    }
    packet.in.res = _rspsize ? 0x80 : 0xA0;   /* RSP3_OK : RSP3_FAILED */
    27f0:	80 93 c3 60 	sts	0x60C3, r24	; 0x8060c3 <packet+0x5>
    27f4:	90 93 c4 60 	sts	0x60C4, r25	; 0x8060c4 <packet+0x6>
complete_jtag_transactions():
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:163
    return _result; /* True if an EDBG Payload is received. */
  }

  /*** Prepare for EDBG payload request from device to host ***/
  void complete_jtag_transactions (size_t _length) {
    _packet_length = _length + 6; /* TOKEN + SEQ[2] + EOT + PAD */
    27f8:	98 01       	movw	r18, r16
    27fa:	2a 5f       	subi	r18, 0xFA	; 250
    27fc:	3f 4f       	sbci	r19, 0xFF	; 255
    27fe:	20 93 8b 60 	sts	0x608B, r18	; 0x80608b <_packet_length>
    2802:	30 93 8c 60 	sts	0x608C, r19	; 0x80608c <_packet_length+0x1>
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:164
    _packet_fragment = 0;
    2806:	10 92 8a 60 	sts	0x608A, r1	; 0x80608a <_packet_fragment>
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:165
    _packet_endfrag = (_length + 65) / 60;  /* 1 to 15 */
    280a:	c8 01       	movw	r24, r16
    280c:	8f 5b       	subi	r24, 0xBF	; 191
    280e:	9f 4f       	sbci	r25, 0xFF	; 255
    2810:	6c e3       	ldi	r22, 0x3C	; 60
    2812:	70 e0       	ldi	r23, 0x00	; 0
    2814:	33 d1       	rcall	.+614    	; 0x2a7c <__udivmodhi4>
    2816:	60 93 89 60 	sts	0x6089, r22	; 0x806089 <_packet_endfrag>
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:166
    packet.in.token = 0x0E;                 /* TOKEN */
    281a:	8e e0       	ldi	r24, 0x0E	; 14
    281c:	80 93 bf 60 	sts	0x60BF, r24	; 0x8060bf <packet+0x1>
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:167
    packet.rawData[_packet_length] = 0;     /* EOT */
    2820:	22 54       	subi	r18, 0x42	; 66
    2822:	3f 49       	sbci	r19, 0x9F	; 159
    2824:	f9 01       	movw	r30, r18
    2826:	10 82       	st	Z, r1
    2828:	9d ca       	rjmp	.-2758   	; 0x1d64 <main+0xec>
read_dummy():
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:304
   * Read dummy memory if necessary.
   */
  size_t read_dummy (void) {
    uint8_t  m_type = packet.out.bMType;
    size_t _wLength = packet.out.dwLength;
    if (m_type == 0xB4 && _sib[0]) {
    282a:	84 3b       	cpi	r24, 0xB4	; 180
    282c:	89 f4       	brne	.+34     	; 0x2850 <__DATA_REGION_LENGTH__+0x850>
    282e:	80 91 de 62 	lds	r24, 0x62DE	; 0x8062de <_sib>
    2832:	88 23       	and	r24, r24
    2834:	69 f0       	breq	.+26     	; 0x2850 <__DATA_REGION_LENGTH__+0x850>
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:307
      /* The SIGNATURE of a locked device cannot be read.            */
      /* But, the SIB can be read, so a Dummy SIGNATURE is returned. */
      packet.in.data[0] = 0x1E;
    2836:	9e e1       	ldi	r25, 0x1E	; 30
    2838:	90 93 c5 60 	sts	0x60C5, r25	; 0x8060c5 <packet+0x7>
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:308
      packet.in.data[1] = _sib[0] == ' ' ? 'A' : _sib[0];
    283c:	80 32       	cpi	r24, 0x20	; 32
    283e:	09 f4       	brne	.+2      	; 0x2842 <__DATA_REGION_LENGTH__+0x842>
main():
    2840:	81 e4       	ldi	r24, 0x41	; 65
read_dummy():
    2842:	80 93 c6 60 	sts	0x60C6, r24	; 0x8060c6 <packet+0x8>
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:309
      packet.in.data[2] = _sib[10];
    2846:	80 91 e8 62 	lds	r24, 0x62E8	; 0x8062e8 <_sib+0xa>
    284a:	80 93 c7 60 	sts	0x60C7, r24	; 0x8060c7 <packet+0x9>
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:311
    }
    else memset(&packet.in.data[0], 0xFF, _wLength);
    284e:	bf cf       	rjmp	.-130    	; 0x27ce <__DATA_REGION_LENGTH__+0x7ce>
    2850:	a8 01       	movw	r20, r16
    2852:	6f ef       	ldi	r22, 0xFF	; 255
    2854:	70 e0       	ldi	r23, 0x00	; 0
    2856:	85 ec       	ldi	r24, 0xC5	; 197
    2858:	90 e6       	ldi	r25, 0x60	; 96
    285a:	78 d1       	rcall	.+752    	; 0x2b4c <memset>
    285c:	b8 cf       	rjmp	.-144    	; 0x27ce <__DATA_REGION_LENGTH__+0x7ce>
jtag_scope_updi():
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:460
      /* This will prevent AVRDUDE from displaying annoying errors. */
      else _rspsize = read_dummy();
      packet.in.res = _rspsize ? 0x184 : 0xA0;
      return _rspsize;
    }
    else if (_cmd == 0x23) {        /* CMD3_WRITE_MEMORY */
    285e:	13 32       	cpi	r17, 0x23	; 35
    2860:	41 f4       	brne	.+16     	; 0x2872 <__DATA_REGION_LENGTH__+0x872>
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:463
      D1PRINTF(" UPDI_WRITE=%02X:%06lX:%04X\r\n", packet.out.bMType,
        packet.out.dwAddr, (size_t)packet.out.dwLength);
      _rspsize = Timeout::command(Command_Table.write_memory);
    2862:	80 91 04 63 	lds	r24, 0x6304	; 0x806304 <Command_Table+0x6>
    2866:	90 91 05 63 	lds	r25, 0x6305	; 0x806305 <Command_Table+0x7>
    286a:	93 cf       	rjmp	.-218    	; 0x2792 <__DATA_REGION_LENGTH__+0x792>
main():
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:432
    }
    else if (_cmd == 0x16) {        /* CMD3_LEAVE_PROGMODE */
      D1PRINTF(" UPDI_LEAVE_PROG\r\n");
      /* There is nothing to do. */
      /* The actual termination process is delayed until CMD3_SIGN_OFF. */
      _rspsize = 1;
    286c:	01 e0       	ldi	r16, 0x01	; 1
    286e:	10 e0       	ldi	r17, 0x00	; 0
    2870:	76 cf       	rjmp	.-276    	; 0x275e <__DATA_REGION_LENGTH__+0x75e>
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:404
    return (*Command_Table.prog_init)();
  }

  /* ARCH=UPDI scope Provides functionality. */
  size_t jtag_scope_updi (void) {
    size_t _rspsize = 0;
    2872:	10 e0       	ldi	r17, 0x00	; 0
    2874:	00 e0       	ldi	r16, 0x00	; 0
    2876:	61 cf       	rjmp	.-318    	; 0x273a <__DATA_REGION_LENGTH__+0x73a>
jtag_scope_avr_core():
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:368
    else if (_jtag_arch == 0x01) _rspsize = DWIRE:jtag_scope_tiny();    /* dWire? */
    else if (_jtag_arch == 0x02) _rspsize = MEGA::jtag_scope_mega();    /* MEGA */
    else if (_jtag_arch == 0x03) _rspsize = XMEGA::jtag_scope_xmega();  /* XMEGA */
  #endif
    else if (_jtag_arch == 0x05) _rspsize = UPDI::jtag_scope_updi();    /* UPDI support */
    else packet.in.res = 0xA0;      /* RSP3_FAILED */
    2878:	80 ea       	ldi	r24, 0xA0	; 160
    287a:	90 e0       	ldi	r25, 0x00	; 0
    287c:	bc ce       	rjmp	.-648    	; 0x25f6 <__DATA_REGION_LENGTH__+0x5f6>
jtag_scope_branch():
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:391
    else if (_scope == 0x13) _rspsize = AVR32::jtag_scope_avr32();  /* SCOPE_AVR32 */
  #endif
    else if (_scope == 0x12) _rspsize = jtag_scope_avr_core();      /* SCOPE_AVR */
  #ifdef CONFIG_PGM_TPI_ENABLE
    /* The 14P models have limited TPI support due to insufficient pin count. */
    else if (_scope == 0x14) _rspsize = TPI::jtag_scope_tpi();      /* SCOPE_AVR_TPI */
    287e:	84 31       	cpi	r24, 0x14	; 20
    2880:	09 f0       	breq	.+2      	; 0x2884 <__DATA_REGION_LENGTH__+0x884>
    2882:	88 c0       	rjmp	.+272    	; 0x2994 <__DATA_REGION_LENGTH__+0x994>
jtag_scope_tpi():
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:305
   * It doesn't seem to be implemented in the "mEDBG".
   * which means it will start immediately with XPRG_CMD_ENTER_PROGMODE.
   */
  size_t jtag_scope_tpi (void) {
    size_t _rspsize = 0;  /* Make final adjustments. */
    uint8_t _cmd    = packet.out.cmd;
    2884:	80 91 c3 60 	lds	r24, 0x60C3	; 0x8060c3 <packet+0x5>
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:306
    if (_cmd == 0x01) {             /* XPRG_CMD_ENTER_PROGMODE */
    2888:	81 30       	cpi	r24, 0x01	; 1
    288a:	09 f0       	breq	.+2      	; 0x288e <__DATA_REGION_LENGTH__+0x88e>
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:308
      D1PRINTF(" TPI_ENTER_PROGMODE\r\n");
      USART::setup();
    288c:	44 c0       	rjmp	.+136    	; 0x2916 <__DATA_REGION_LENGTH__+0x916>
    288e:	0e 94 08 0a 	call	0x1410	; 0x1410 <USART::setup()>
change_tpi():
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/tools/avr-gcc/7.3.0-avr8-gnu-toolchain/avr/include/util/atomic.h:50
    2892:	1f b7       	in	r17, 0x3f	; 63
__iCliRetVal():
/Users/askn/Collaborator/UPDI4AVR-USB/src/usart.cpp:99
  /* The VCD-TxD is repurposed to transmit the synchronous clock. */
  void change_tpi (void) {
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
      D1PRINTF(" UART=TPI\r\n");
      /* In synchronous mode the formula is different. */
      uint32_t _baud = ((F_CPU / 1000L) / _xclk + 1) / 2;
    2894:	f8 94       	cli
change_tpi():
    2896:	20 91 18 60 	lds	r18, 0x6018	; 0x806018 <_xclk>
    289a:	30 91 19 60 	lds	r19, 0x6019	; 0x806019 <_xclk+0x1>
    289e:	50 e0       	ldi	r21, 0x00	; 0
    28a0:	40 e0       	ldi	r20, 0x00	; 0
    28a2:	60 e2       	ldi	r22, 0x20	; 32
    28a4:	7e e4       	ldi	r23, 0x4E	; 78
    28a6:	80 e0       	ldi	r24, 0x00	; 0
    28a8:	90 e0       	ldi	r25, 0x00	; 0
    28aa:	1e d1       	rcall	.+572    	; 0x2ae8 <__divmodsi4>
    28ac:	da 01       	movw	r26, r20
    28ae:	c9 01       	movw	r24, r18
    28b0:	01 96       	adiw	r24, 0x01	; 1
    28b2:	a1 1d       	adc	r26, r1
    28b4:	b1 1d       	adc	r27, r1
    28b6:	b5 95       	asr	r27
    28b8:	a7 95       	ror	r26
    28ba:	97 95       	ror	r25
    28bc:	87 95       	ror	r24
/Users/askn/Collaborator/UPDI4AVR-USB/src/usart.cpp:100
      _baud <<= 6;
    28be:	36 e0       	ldi	r19, 0x06	; 6
    28c0:	88 0f       	add	r24, r24
    28c2:	99 1f       	adc	r25, r25
    28c4:	aa 1f       	adc	r26, r26
    28c6:	bb 1f       	adc	r27, r27
    28c8:	3a 95       	dec	r19
    28ca:	d1 f7       	brne	.-12     	; 0x28c0 <__DATA_REGION_LENGTH__+0x8c0>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usart.cpp:102
      if (_baud < 64) _baud = 64;
      PORTMUX_USARTROUTEA = PORTMUX_USART_UPDI;
    28cc:	20 e1       	ldi	r18, 0x10	; 16
    28ce:	20 93 e2 05 	sts	0x05E2, r18	; 0x8005e2 <__TEXT_REGION_LENGTH__+0x7f05e2>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usart.cpp:103
      pinModeMacro(PIN_VCP_TXD, INPUT_PULLUP);
    28d2:	02 98       	cbi	0x00, 2	; 0
    28d4:	28 e0       	ldi	r18, 0x08	; 8
    28d6:	20 93 12 04 	sts	0x0412, r18	; 0x800412 <__TEXT_REGION_LENGTH__+0x7f0412>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usart.cpp:104
      USART0_STATUS = USART_DREIF_bm;
    28da:	20 e2       	ldi	r18, 0x20	; 32
    28dc:	20 93 04 08 	sts	0x0804, r18	; 0x800804 <__TEXT_REGION_LENGTH__+0x7f0804>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usart.cpp:105
      USART0_BAUD  = _baud;
    28e0:	80 34       	cpi	r24, 0x40	; 64
    28e2:	91 05       	cpc	r25, r1
    28e4:	a1 05       	cpc	r26, r1
    28e6:	b1 05       	cpc	r27, r1
    28e8:	20 f4       	brcc	.+8      	; 0x28f2 <__DATA_REGION_LENGTH__+0x8f2>
    28ea:	80 e4       	ldi	r24, 0x40	; 64
    28ec:	90 e0       	ldi	r25, 0x00	; 0
    28ee:	a0 e0       	ldi	r26, 0x00	; 0
    28f0:	b0 e0       	ldi	r27, 0x00	; 0
    28f2:	80 93 08 08 	sts	0x0808, r24	; 0x800808 <__TEXT_REGION_LENGTH__+0x7f0808>
    28f6:	90 93 09 08 	sts	0x0809, r25	; 0x800809 <__TEXT_REGION_LENGTH__+0x7f0809>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usart.cpp:106
      USART0_CTRLC = USART_CHSIZE_8BIT_gc | USART_PMODE_EVEN_gc | USART_CMODE_SYNCHRONOUS_gc | USART_SBMODE_2BIT_gc;
    28fa:	8b e6       	ldi	r24, 0x6B	; 107
    28fc:	80 93 07 08 	sts	0x0807, r24	; 0x800807 <__TEXT_REGION_LENGTH__+0x7f0807>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usart.cpp:107
      USART0_CTRLA = USART_LBME_bm | USART_RS485_INT_gc | USART_RS485_EXT_gc;
    2900:	8b e0       	ldi	r24, 0x0B	; 11
    2902:	80 93 05 08 	sts	0x0805, r24	; 0x800805 <__TEXT_REGION_LENGTH__+0x7f0805>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usart.cpp:108
      USART0_CTRLB = USART_RXEN_bm | USART_TXEN_bm | USART_ODME_bm;
    2906:	88 ec       	ldi	r24, 0xC8	; 200
    2908:	80 93 06 08 	sts	0x0806, r24	; 0x800806 <__TEXT_REGION_LENGTH__+0x7f0806>
__iRestore():
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:310
      USART::change_tpi();
      _rspsize = Timeout::command(&connect);
    290c:	1f bf       	out	0x3f, r17	; 63
jtag_scope_tpi():
    290e:	86 ea       	ldi	r24, 0xA6	; 166
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:341
      D1PRINTF(" TPI_READ=%02X:%08lX:%04X\r\n",
        packet.out.tpi.read.bMType,
        bswap32(packet.out.tpi.read.dwAddr),
        bswap16(packet.out.tpi.read.wLength)
      );
      _rspsize = Timeout::command(&read_memory);
    2910:	9a e0       	ldi	r25, 0x0A	; 10
    2912:	6b d9       	rcall	.-3370   	; 0x1bea <Timeout::command(unsigned int (*)(), unsigned int) [clone .constprop.8]>
    2914:	19 c0       	rjmp	.+50     	; 0x2948 <__DATA_REGION_LENGTH__+0x948>
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:312
      D1PRINTF(" TPI_ENTER_PROGMODE\r\n");
      USART::setup();
      USART::change_tpi();
      _rspsize = Timeout::command(&connect);
    }
    else if (_cmd == 0x02) {        /* XPRG_CMD_LEAVE_PROGMODE */
    2916:	82 30       	cpi	r24, 0x02	; 2
    2918:	09 f5       	brne	.+66     	; 0x295c <__DATA_REGION_LENGTH__+0x95c>
set_sstcs():
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:69
  bool get_sldcs (const uint8_t _addr) {
    return (send(0x80 | _addr) && recv());
  }

  bool set_sstcs (const uint8_t _addr, const uint8_t _data) {
    return (send(0xC0 | _addr) && send(_data));
    291a:	80 ec       	ldi	r24, 0xC0	; 192
    291c:	0e 94 08 05 	call	0xa10	; 0xa10 <TPI::send(unsigned char)>
    2920:	88 23       	and	r24, r24
    2922:	19 f0       	breq	.+6      	; 0x292a <__DATA_REGION_LENGTH__+0x92a>
    2924:	80 e0       	ldi	r24, 0x00	; 0
    2926:	0e 94 08 05 	call	0xa10	; 0xa10 <TPI::send(unsigned char)>
delay_micros():
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/modernAVR/0.2.14/cores/modernAVR/api/delay_busywait.h:33
static __inline__ __attribute__((__always_inline__)) void delay_micros (uint32_t _us);
static __inline__ __attribute__((__always_inline__)) void delay_millis (uint32_t _ms);

void delay_micros (uint32_t _us) {
  if (F_CPU >= 1000000L) {
    __builtin_avr_delay_cycles((F_CPU / 1000000L) * _us);
    292a:	83 ef       	ldi	r24, 0xF3	; 243
    292c:	91 e0       	ldi	r25, 0x01	; 1
    292e:	01 97       	sbiw	r24, 0x01	; 1
    2930:	f1 f7       	brne	.-4      	; 0x292e <__DATA_REGION_LENGTH__+0x92e>
    2932:	00 c0       	rjmp	.+0      	; 0x2934 <__DATA_REGION_LENGTH__+0x934>
    2934:	00 00       	nop
disconnect():
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:288
    /*** leave RESET (normal programing) ***/
    set_sstcs(0x00, 0x00);
    D1PRINTF(" TPISR<00\r\n");
    /* Send the NVM exit command, wait a short while and release RESET. */
    delay_micros(100);
    openDrainWriteMacro(PIN_VCP_TXD, HIGH);
    2936:	02 98       	cbi	0x00, 2	; 0
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:289
    openDrainWriteMacro(PIN_PG_TRST, HIGH);
    2938:	01 98       	cbi	0x00, 1	; 0
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:290
    PGCONF = 0;
    293a:	1d ba       	out	0x1d, r1	; 29
jtag_scope_tpi():
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:316
    }
    else if (_cmd == 0x02) {        /* XPRG_CMD_LEAVE_PROGMODE */
      D1PRINTF(" TPI_LEAVE_PROGMODE\r\n");
      _rspsize = disconnect();
      _tpi_setmode = 0;
      USART::setup();
    293c:	0e 94 08 0a 	call	0x1410	; 0x1410 <USART::setup()>
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:317
      USART::change_vcp();
    2940:	0e 94 cd 05 	call	0xb9a	; 0xb9a <USART::change_vcp()>
main():
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:314
      USART::change_tpi();
      _rspsize = Timeout::command(&connect);
    }
    else if (_cmd == 0x02) {        /* XPRG_CMD_LEAVE_PROGMODE */
      D1PRINTF(" TPI_LEAVE_PROGMODE\r\n");
      _rspsize = disconnect();
    2944:	81 e0       	ldi	r24, 0x01	; 1
    2946:	90 e0       	ldi	r25, 0x00	; 0
jtag_scope_tpi():
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:364
        _tpi_csr_addr = _bValue;    /* XPRG_TPI_NVMCSR_ADDRESS */
      }
  #endif
      _rspsize = 1;
    }
    packet.in.tpi_res = _rspsize ? 0x00 : 0x01; /* XPRG_ERR_OK : XPRG_ERR_FAILED */
    2948:	21 e0       	ldi	r18, 0x01	; 1
    294a:	00 97       	sbiw	r24, 0x00	; 0
    294c:	09 f0       	breq	.+2      	; 0x2950 <__DATA_REGION_LENGTH__+0x950>
    294e:	20 e0       	ldi	r18, 0x00	; 0
    2950:	20 93 c4 60 	sts	0x60C4, r18	; 0x8060c4 <packet+0x6>
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:368
    D1PRINTF(" <RES:%02X>\r\n", _rspsize);

    /* Adds padding to XPRG responses to adjust the length of the payload. */
    return ++_rspsize;
    2954:	8c 01       	movw	r16, r24
jtag_scope_edbg():
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:254
          D1PRINTF(" TARGET_POWER=%02X\r\n", _jtag_vpow);
          packet.in.data[0] = _jtag_vpow;
        }
      }
      packet.in.res = 0x184;        /* RSP3_DATA */
      _rspsize = _length + 1;
    2956:	0f 5f       	subi	r16, 0xFF	; 255
    2958:	1f 4f       	sbci	r17, 0xFF	; 255
    295a:	4e cf       	rjmp	.-356    	; 0x27f8 <__DATA_REGION_LENGTH__+0x7f8>
jtag_scope_tpi():
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:319
      _rspsize = disconnect();
      _tpi_setmode = 0;
      USART::setup();
      USART::change_vcp();
    }
    else if (bit_is_clear(PGCONF, PGCONF_UPDI_bp)) { /* empty */ }
    295c:	e8 9b       	sbis	0x1d, 0	; 29
    295e:	17 c0       	rjmp	.+46     	; 0x298e <__DATA_REGION_LENGTH__+0x98e>
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:320
    else if (_cmd == 0x03) {        /* XPRG_CMD_ERASE */
    2960:	83 30       	cpi	r24, 0x03	; 3
    2962:	19 f4       	brne	.+6      	; 0x296a <__DATA_REGION_LENGTH__+0x96a>
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:325
      D1PRINTF(" TPI_ERASE=%02X:%08lX\r\n",
        packet.out.tpi.read.bMType,
        bswap32(packet.out.tpi.read.dwAddr)
      );
      _rspsize = Timeout::command(&erase_memory);
    2964:	89 e2       	ldi	r24, 0x29	; 41
    2966:	9d e0       	ldi	r25, 0x0D	; 13
    2968:	d4 cf       	rjmp	.-88     	; 0x2912 <__DATA_REGION_LENGTH__+0x912>
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:327
    }
    else if (_cmd == 0x04) {        /* XPRG_CMD_WRITE_MEM */
    296a:	84 30       	cpi	r24, 0x04	; 4
    296c:	19 f4       	brne	.+6      	; 0x2974 <__DATA_REGION_LENGTH__+0x974>
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:333
      D1PRINTF(" TPI_WRITE=%02X:%08lX:%04X\r\n",
        packet.out.tpi.write.bMType,
        bswap32(packet.out.tpi.write.dwAddr),
        bswap16(packet.out.tpi.write.wLength)
      );
      _rspsize = Timeout::command(&write_memory);
    296e:	8f e2       	ldi	r24, 0x2F	; 47
    2970:	9c e0       	ldi	r25, 0x0C	; 12
    2972:	cf cf       	rjmp	.-98     	; 0x2912 <__DATA_REGION_LENGTH__+0x912>
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:335
    }
    else if (_cmd == 0x05) {        /* XPRG_CMD_READ_MEM */
    2974:	85 30       	cpi	r24, 0x05	; 5
    2976:	19 f4       	brne	.+6      	; 0x297e <__DATA_REGION_LENGTH__+0x97e>
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:341
      D1PRINTF(" TPI_READ=%02X:%08lX:%04X\r\n",
        packet.out.tpi.read.bMType,
        bswap32(packet.out.tpi.read.dwAddr),
        bswap16(packet.out.tpi.read.wLength)
      );
      _rspsize = Timeout::command(&read_memory);
    2978:	8b ef       	ldi	r24, 0xFB	; 251
    297a:	9c e0       	ldi	r25, 0x0C	; 12
    297c:	ca cf       	rjmp	.-108    	; 0x2912 <__DATA_REGION_LENGTH__+0x912>
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:346
    }
    else if (_cmd == 0x06) {        /* XPRG_CMD_CRC */
      D1PRINTF(" TPI_CRC\r\n");     /* not used (Fail) */
    }
    else if (_cmd == 0x07) {        /* XPRG_CMD_SET_PARAM */
    297e:	31 e0       	ldi	r19, 0x01	; 1
    2980:	20 e0       	ldi	r18, 0x00	; 0
    2982:	87 30       	cpi	r24, 0x07	; 7
    2984:	09 f0       	breq	.+2      	; 0x2988 <__DATA_REGION_LENGTH__+0x988>
    2986:	30 e0       	ldi	r19, 0x00	; 0
main():
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:310
    uint8_t _cmd    = packet.out.cmd;
    if (_cmd == 0x01) {             /* XPRG_CMD_ENTER_PROGMODE */
      D1PRINTF(" TPI_ENTER_PROGMODE\r\n");
      USART::setup();
      USART::change_tpi();
      _rspsize = Timeout::command(&connect);
    2988:	83 2f       	mov	r24, r19
    298a:	92 2f       	mov	r25, r18
    298c:	dd cf       	rjmp	.-70     	; 0x2948 <__DATA_REGION_LENGTH__+0x948>
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:304
   * When this scope is used, CMD3_SIGN_ON will not be called,
   * It doesn't seem to be implemented in the "mEDBG".
   * which means it will start immediately with XPRG_CMD_ENTER_PROGMODE.
   */
  size_t jtag_scope_tpi (void) {
    size_t _rspsize = 0;  /* Make final adjustments. */
    298e:	90 e0       	ldi	r25, 0x00	; 0
    2990:	80 e0       	ldi	r24, 0x00	; 0
    2992:	da cf       	rjmp	.-76     	; 0x2948 <__DATA_REGION_LENGTH__+0x948>
jtag_scope_branch():
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:393
    else if (_scope == 0x12) _rspsize = jtag_scope_avr_core();      /* SCOPE_AVR */
  #ifdef CONFIG_PGM_TPI_ENABLE
    /* The 14P models have limited TPI support due to insufficient pin count. */
    else if (_scope == 0x14) _rspsize = TPI::jtag_scope_tpi();      /* SCOPE_AVR_TPI */
  #endif
    else if (_scope == 0x20) _rspsize = jtag_scope_edbg();          /* SCOPE_EDBG */
    2994:	80 32       	cpi	r24, 0x20	; 32
    2996:	09 f0       	breq	.+2      	; 0x299a <__DATA_REGION_LENGTH__+0x99a>
    2998:	35 ce       	rjmp	.-918    	; 0x2604 <__DATA_REGION_LENGTH__+0x604>
jtag_scope_edbg():
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:223

  /*** The EDBG scope provides access to the writer's hardware specifications. ***/
  /* There is no impact on operation if it is not called at all. */
  size_t jtag_scope_edbg (void) {
    size_t  _rspsize = 0;
    uint8_t _cmd     = packet.out.cmd;
    299a:	20 91 c3 60 	lds	r18, 0x60C3	; 0x8060c3 <packet+0x5>
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:224
    uint8_t _section = packet.out.section;
    299e:	90 91 c5 60 	lds	r25, 0x60C5	; 0x8060c5 <packet+0x7>
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:225
    uint8_t _index   = packet.out.index;
    29a2:	80 91 c6 60 	lds	r24, 0x60C6	; 0x8060c6 <packet+0x8>
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:227
    uint8_t _length  = packet.out.length;
    if (_cmd == 0x01) {             /* CMD3_SET_PARAMETER */
    29a6:	21 30       	cpi	r18, 0x01	; 1
    29a8:	89 f4       	brne	.+34     	; 0x29cc <__DATA_REGION_LENGTH__+0x9cc>
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:230
      uint16_t _data = packet.out.wValue;
      D1PRINTF(" AVR_SET_PARAM=%02X:%02X:%02X:%02X\r\n", _section, _index, _length, _data);
      if (_section == 0) {          /* SET_GET_CTXT_CONFIG */
    29aa:	91 11       	cpse	r25, r1
    29ac:	22 ce       	rjmp	.-956    	; 0x25f2 <__DATA_REGION_LENGTH__+0x5f2>
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:231
        if (_index == 0x10) {       /* EDBG_CONTROL_TARGET_POWER */
    29ae:	80 31       	cpi	r24, 0x10	; 16
    29b0:	09 f0       	breq	.+2      	; 0x29b4 <__DATA_REGION_LENGTH__+0x9b4>
    29b2:	1f ce       	rjmp	.-962    	; 0x25f2 <__DATA_REGION_LENGTH__+0x5f2>
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:228
    uint8_t _cmd     = packet.out.cmd;
    uint8_t _section = packet.out.section;
    uint8_t _index   = packet.out.index;
    uint8_t _length  = packet.out.length;
    if (_cmd == 0x01) {             /* CMD3_SET_PARAMETER */
      uint16_t _data = packet.out.wValue;
    29b4:	80 91 c8 60 	lds	r24, 0x60C8	; 0x8060c8 <packet+0xa>
    29b8:	90 91 c9 60 	lds	r25, 0x60C9	; 0x8060c9 <packet+0xb>
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:234
      D1PRINTF(" AVR_SET_PARAM=%02X:%02X:%02X:%02X\r\n", _section, _index, _length, _data);
      if (_section == 0) {          /* SET_GET_CTXT_CONFIG */
        if (_index == 0x10) {       /* EDBG_CONTROL_TARGET_POWER */
          /* Called with `-xvtarget_switch=0,1` */
          D1PRINTF(" TARGET_POWER=%02X\r\n", _data);
          _jtag_vpow = _data;       /* 0,1 */
    29bc:	80 93 00 60 	sts	0x6000, r24	; 0x806000 <__DATA_REGION_ORIGIN__>
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:236
  #if defined(PIN_HV_POWER)
          if (_data)
    29c0:	89 2b       	or	r24, r25
    29c2:	11 f0       	breq	.+4      	; 0x29c8 <__DATA_REGION_LENGTH__+0x9c8>
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:237
            digitalWriteMacro(PIN_HV_POWER, HIGH);
    29c4:	0e 9a       	sbi	0x01, 6	; 1
    29c6:	15 ce       	rjmp	.-982    	; 0x25f2 <__DATA_REGION_LENGTH__+0x5f2>
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:239
          else
            digitalWriteMacro(PIN_HV_POWER, LOW);
    29c8:	0e 98       	cbi	0x01, 6	; 1
    29ca:	13 ce       	rjmp	.-986    	; 0x25f2 <__DATA_REGION_LENGTH__+0x5f2>
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:245
  #endif
        }
      }
      packet.in.res = 0x80;         /* RSP3_OK */
    }
    else if (_cmd == 0x02) {        /* CMD3_GET_PARAMETER */
    29cc:	22 30       	cpi	r18, 0x02	; 2
    29ce:	09 f0       	breq	.+2      	; 0x29d2 <__DATA_REGION_LENGTH__+0x9d2>
    29d0:	19 ce       	rjmp	.-974    	; 0x2604 <__DATA_REGION_LENGTH__+0x604>
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:226
  size_t jtag_scope_edbg (void) {
    size_t  _rspsize = 0;
    uint8_t _cmd     = packet.out.cmd;
    uint8_t _section = packet.out.section;
    uint8_t _index   = packet.out.index;
    uint8_t _length  = packet.out.length;
    29d2:	00 91 c7 60 	lds	r16, 0x60C7	; 0x8060c7 <packet+0x9>
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:247
      }
      packet.in.res = 0x80;         /* RSP3_OK */
    }
    else if (_cmd == 0x02) {        /* CMD3_GET_PARAMETER */
      D1PRINTF(" AVR_GET_PARAM=%02X:%02X:%02X\r\n", _section, _index, _length);
      if (_section == 0) {          /* SET_GET_CTXT_CONFIG */
    29d6:	91 11       	cpse	r25, r1
    29d8:	fa cd       	rjmp	.-1036   	; 0x25ce <__DATA_REGION_LENGTH__+0x5ce>
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:248
        if (_index == 0x10) {       /* EDBG_CONTROL_TARGET_POWER */
    29da:	80 31       	cpi	r24, 0x10	; 16
    29dc:	09 f0       	breq	.+2      	; 0x29e0 <__DATA_REGION_LENGTH__+0x9e0>
    29de:	f7 cd       	rjmp	.-1042   	; 0x25ce <__DATA_REGION_LENGTH__+0x5ce>
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:250
          D1PRINTF(" TARGET_POWER=%02X\r\n", _jtag_vpow);
          packet.in.data[0] = _jtag_vpow;
    29e0:	80 91 00 60 	lds	r24, 0x6000	; 0x806000 <__DATA_REGION_ORIGIN__>
    29e4:	80 93 c5 60 	sts	0x60C5, r24	; 0x8060c5 <packet+0x7>
    29e8:	f2 cd       	rjmp	.-1052   	; 0x25ce <__DATA_REGION_LENGTH__+0x5ce>

000029ea <setjmp>:
setjmp():
    29ea:	dc 01       	movw	r26, r24
    29ec:	2d 92       	st	X+, r2
    29ee:	3d 92       	st	X+, r3
    29f0:	4d 92       	st	X+, r4
    29f2:	5d 92       	st	X+, r5
    29f4:	6d 92       	st	X+, r6
    29f6:	7d 92       	st	X+, r7
    29f8:	8d 92       	st	X+, r8
    29fa:	9d 92       	st	X+, r9
    29fc:	ad 92       	st	X+, r10
    29fe:	bd 92       	st	X+, r11
    2a00:	cd 92       	st	X+, r12
    2a02:	dd 92       	st	X+, r13
    2a04:	ed 92       	st	X+, r14
    2a06:	fd 92       	st	X+, r15
    2a08:	0d 93       	st	X+, r16
    2a0a:	1d 93       	st	X+, r17
    2a0c:	cd 93       	st	X+, r28
    2a0e:	dd 93       	st	X+, r29
    2a10:	ff 91       	pop	r31
    2a12:	ef 91       	pop	r30
    2a14:	8d b7       	in	r24, 0x3d	; 61
    2a16:	8d 93       	st	X+, r24
    2a18:	8e b7       	in	r24, 0x3e	; 62
    2a1a:	8d 93       	st	X+, r24
    2a1c:	8f b7       	in	r24, 0x3f	; 63
    2a1e:	8d 93       	st	X+, r24
    2a20:	ed 93       	st	X+, r30
    2a22:	fd 93       	st	X+, r31
    2a24:	88 27       	eor	r24, r24
    2a26:	99 27       	eor	r25, r25
    2a28:	09 94       	ijmp

00002a2a <longjmp>:
longjmp():
    2a2a:	dc 01       	movw	r26, r24
    2a2c:	cb 01       	movw	r24, r22
    2a2e:	81 30       	cpi	r24, 0x01	; 1
    2a30:	91 05       	cpc	r25, r1
    2a32:	81 1d       	adc	r24, r1
    2a34:	2d 90       	ld	r2, X+
    2a36:	3d 90       	ld	r3, X+
    2a38:	4d 90       	ld	r4, X+
    2a3a:	5d 90       	ld	r5, X+
    2a3c:	6d 90       	ld	r6, X+
    2a3e:	7d 90       	ld	r7, X+
    2a40:	8d 90       	ld	r8, X+
    2a42:	9d 90       	ld	r9, X+
    2a44:	ad 90       	ld	r10, X+
    2a46:	bd 90       	ld	r11, X+
    2a48:	cd 90       	ld	r12, X+
    2a4a:	dd 90       	ld	r13, X+
    2a4c:	ed 90       	ld	r14, X+
    2a4e:	fd 90       	ld	r15, X+
    2a50:	0d 91       	ld	r16, X+
    2a52:	1d 91       	ld	r17, X+
    2a54:	cd 91       	ld	r28, X+
    2a56:	dd 91       	ld	r29, X+
    2a58:	ed 91       	ld	r30, X+
    2a5a:	fd 91       	ld	r31, X+
    2a5c:	0d 90       	ld	r0, X+
    2a5e:	0f be       	out	0x3f, r0	; 63
    2a60:	ed bf       	out	0x3d, r30	; 61
    2a62:	fe bf       	out	0x3e, r31	; 62
    2a64:	ed 91       	ld	r30, X+
    2a66:	fd 91       	ld	r31, X+
    2a68:	09 94       	ijmp

00002a6a <memcpy_P>:
memcpy_P():
    2a6a:	fb 01       	movw	r30, r22
    2a6c:	dc 01       	movw	r26, r24
    2a6e:	02 c0       	rjmp	.+4      	; 0x2a74 <memcpy_P+0xa>
    2a70:	05 90       	lpm	r0, Z+
    2a72:	0d 92       	st	X+, r0
    2a74:	41 50       	subi	r20, 0x01	; 1
    2a76:	50 40       	sbci	r21, 0x00	; 0
    2a78:	d8 f7       	brcc	.-10     	; 0x2a70 <memcpy_P+0x6>
    2a7a:	08 95       	ret

00002a7c <__udivmodhi4>:
__udivmodhi4():
    2a7c:	aa 1b       	sub	r26, r26
    2a7e:	bb 1b       	sub	r27, r27
    2a80:	51 e1       	ldi	r21, 0x11	; 17
    2a82:	07 c0       	rjmp	.+14     	; 0x2a92 <__udivmodhi4_ep>

00002a84 <__udivmodhi4_loop>:
    2a84:	aa 1f       	adc	r26, r26
    2a86:	bb 1f       	adc	r27, r27
    2a88:	a6 17       	cp	r26, r22
    2a8a:	b7 07       	cpc	r27, r23
    2a8c:	10 f0       	brcs	.+4      	; 0x2a92 <__udivmodhi4_ep>
    2a8e:	a6 1b       	sub	r26, r22
    2a90:	b7 0b       	sbc	r27, r23

00002a92 <__udivmodhi4_ep>:
    2a92:	88 1f       	adc	r24, r24
    2a94:	99 1f       	adc	r25, r25
    2a96:	5a 95       	dec	r21
    2a98:	a9 f7       	brne	.-22     	; 0x2a84 <__udivmodhi4_loop>
    2a9a:	80 95       	com	r24
    2a9c:	90 95       	com	r25
    2a9e:	bc 01       	movw	r22, r24
    2aa0:	cd 01       	movw	r24, r26
    2aa2:	08 95       	ret

00002aa4 <__udivmodsi4>:
__udivmodsi4():
    2aa4:	a1 e2       	ldi	r26, 0x21	; 33
    2aa6:	1a 2e       	mov	r1, r26
    2aa8:	aa 1b       	sub	r26, r26
    2aaa:	bb 1b       	sub	r27, r27
    2aac:	fd 01       	movw	r30, r26
    2aae:	0d c0       	rjmp	.+26     	; 0x2aca <__udivmodsi4_ep>

00002ab0 <__udivmodsi4_loop>:
    2ab0:	aa 1f       	adc	r26, r26
    2ab2:	bb 1f       	adc	r27, r27
    2ab4:	ee 1f       	adc	r30, r30
    2ab6:	ff 1f       	adc	r31, r31
    2ab8:	a2 17       	cp	r26, r18
    2aba:	b3 07       	cpc	r27, r19
    2abc:	e4 07       	cpc	r30, r20
    2abe:	f5 07       	cpc	r31, r21
    2ac0:	20 f0       	brcs	.+8      	; 0x2aca <__udivmodsi4_ep>
    2ac2:	a2 1b       	sub	r26, r18
    2ac4:	b3 0b       	sbc	r27, r19
    2ac6:	e4 0b       	sbc	r30, r20
    2ac8:	f5 0b       	sbc	r31, r21

00002aca <__udivmodsi4_ep>:
    2aca:	66 1f       	adc	r22, r22
    2acc:	77 1f       	adc	r23, r23
    2ace:	88 1f       	adc	r24, r24
    2ad0:	99 1f       	adc	r25, r25
    2ad2:	1a 94       	dec	r1
    2ad4:	69 f7       	brne	.-38     	; 0x2ab0 <__udivmodsi4_loop>
    2ad6:	60 95       	com	r22
    2ad8:	70 95       	com	r23
    2ada:	80 95       	com	r24
    2adc:	90 95       	com	r25
    2ade:	9b 01       	movw	r18, r22
    2ae0:	ac 01       	movw	r20, r24
    2ae2:	bd 01       	movw	r22, r26
    2ae4:	cf 01       	movw	r24, r30
    2ae6:	08 95       	ret

00002ae8 <__divmodsi4>:
__divmodsi4():
    2ae8:	05 2e       	mov	r0, r21
    2aea:	97 fb       	bst	r25, 7
    2aec:	16 f4       	brtc	.+4      	; 0x2af2 <__divmodsi4+0xa>
    2aee:	00 94       	com	r0
    2af0:	0f d0       	rcall	.+30     	; 0x2b10 <__negsi2>
    2af2:	57 fd       	sbrc	r21, 7
    2af4:	05 d0       	rcall	.+10     	; 0x2b00 <__divmodsi4_neg2>
    2af6:	d6 df       	rcall	.-84     	; 0x2aa4 <__udivmodsi4>
    2af8:	07 fc       	sbrc	r0, 7
    2afa:	02 d0       	rcall	.+4      	; 0x2b00 <__divmodsi4_neg2>
    2afc:	46 f4       	brtc	.+16     	; 0x2b0e <__divmodsi4_exit>
    2afe:	08 c0       	rjmp	.+16     	; 0x2b10 <__negsi2>

00002b00 <__divmodsi4_neg2>:
    2b00:	50 95       	com	r21
    2b02:	40 95       	com	r20
    2b04:	30 95       	com	r19
    2b06:	21 95       	neg	r18
    2b08:	3f 4f       	sbci	r19, 0xFF	; 255
    2b0a:	4f 4f       	sbci	r20, 0xFF	; 255
    2b0c:	5f 4f       	sbci	r21, 0xFF	; 255

00002b0e <__divmodsi4_exit>:
    2b0e:	08 95       	ret

00002b10 <__negsi2>:
__negsi2():
    2b10:	90 95       	com	r25
    2b12:	80 95       	com	r24
    2b14:	70 95       	com	r23
    2b16:	61 95       	neg	r22
    2b18:	7f 4f       	sbci	r23, 0xFF	; 255
    2b1a:	8f 4f       	sbci	r24, 0xFF	; 255
    2b1c:	9f 4f       	sbci	r25, 0xFF	; 255
    2b1e:	08 95       	ret

00002b20 <memcmp>:
memcmp():
    2b20:	fb 01       	movw	r30, r22
    2b22:	dc 01       	movw	r26, r24
    2b24:	04 c0       	rjmp	.+8      	; 0x2b2e <memcmp+0xe>
    2b26:	8d 91       	ld	r24, X+
    2b28:	01 90       	ld	r0, Z+
    2b2a:	80 19       	sub	r24, r0
    2b2c:	21 f4       	brne	.+8      	; 0x2b36 <memcmp+0x16>
    2b2e:	41 50       	subi	r20, 0x01	; 1
    2b30:	50 40       	sbci	r21, 0x00	; 0
    2b32:	c8 f7       	brcc	.-14     	; 0x2b26 <memcmp+0x6>
    2b34:	88 1b       	sub	r24, r24
    2b36:	99 0b       	sbc	r25, r25
    2b38:	08 95       	ret

00002b3a <memcpy>:
memcpy():
    2b3a:	fb 01       	movw	r30, r22
    2b3c:	dc 01       	movw	r26, r24
    2b3e:	02 c0       	rjmp	.+4      	; 0x2b44 <memcpy+0xa>
    2b40:	01 90       	ld	r0, Z+
    2b42:	0d 92       	st	X+, r0
    2b44:	41 50       	subi	r20, 0x01	; 1
    2b46:	50 40       	sbci	r21, 0x00	; 0
    2b48:	d8 f7       	brcc	.-10     	; 0x2b40 <memcpy+0x6>
    2b4a:	08 95       	ret

00002b4c <memset>:
memset():
    2b4c:	dc 01       	movw	r26, r24
    2b4e:	01 c0       	rjmp	.+2      	; 0x2b52 <memset+0x6>
    2b50:	6d 93       	st	X+, r22
    2b52:	41 50       	subi	r20, 0x01	; 1
    2b54:	50 40       	sbci	r21, 0x00	; 0
    2b56:	e0 f7       	brcc	.-8      	; 0x2b50 <memset+0x4>
    2b58:	08 95       	ret

00002b5a <_exit>:
exit():
    2b5a:	f8 94       	cli

00002b5c <__stop_program>:
__stop_program():
    2b5c:	ff cf       	rjmp	.-2      	; 0x2b5c <__stop_program>

Disassembly of section .nvmem:

00002bda <.nvmem>:
	...

Disassembly of section .eeprom:

00810000 <_EEP>:
  810000:	ff ff ff ff ff ff ff ff                             ........

Disassembly of section .fuse:

00820000 <__fuse>:
  820000:	00 00 00 00 00 d1 08 00 00 00 03 00                 ............
