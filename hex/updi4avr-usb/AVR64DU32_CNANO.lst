
/var/folders/mz/_z9vt_y13rdf9tt_4qkvv0k40000gn/T/arduino_build_602599/UPDI4AVR-USB.ino.elf:     file format elf32-avr


Disassembly of section .data:

00806000 <__data_start>:
__data_start():
  806000:	01 55       	subi	r16, 0x51	; 81

00806001 <UPDI::recv_byte(unsigned long)::_set_ptr>:
  806001:	55 08 00 00 00 00                                   U.....

00806007 <UPDI::send_byte(unsigned long, unsigned char)::_set_ptr>:
  806007:	55 48 00 00 00 00                                   UH....

0080600d <UPDI::_set_repeat>:
  80600d:	55 a0 00 55 04                                      U..U.

00806012 <UPDI::_set_ptr24>:
  806012:	55 6a 00 00 00 00                                   Uj....

00806018 <_xclk>:
  806018:	e1 00                                               ..

0080601a <SYS::_updi_bitmap>:
  80601a:	00 00 00 ff ff 7f 55 7e c8 7f 59 fe 55 7e c3 7e     ......U~..Y.U~.~
  80602a:	04 ff 00 30 20 00                                   ...0 .

00806030 <TPI::nvmprog_key>:
  806030:	e0 ff 88 d8 cd 45 ab 89 12                          .....E...

00806039 <UPDI::set_rsd()::_set_rsd>:
  806039:	55 c2 0d                                            U..

0080603c <UPDI::clear_rsd()::_clear_rsd>:
  80603c:	55 c2 05                                            U..

0080603f <UPDI::key_status()::_key_stat>:
  80603f:	55 87                                               U.

00806041 <UPDI::sys_status()::_sys_stat>:
  806041:	55 8b                                               U.

00806043 <UPDI::nvmprog_key>:
  806043:	55 e0 20 67 6f 72 50 4d 56 4e                       U. gorPMVN

0080604d <UPDI::erase_key>:
  80604d:	55 e0 65 73 61 72 45 4d 56 4e                       U.esarEMVN

00806057 <UPDI::urowwrite_key>:
  806057:	55 e0 65 74 26 73 55 4d 56 4e                       U.et&sUMVN

00806061 <UPDI::write_userrow()::_urowstop>:
  806061:	55 c7 20                                            U. 

00806064 <UPDI::write_userrow()::_urowdone>:
  806064:	55 ca 03                                            U..

00806067 <UPDI::connect()::_sib256>:
  806067:	55 e6                                               U.

00806069 <UPDI::connect()::_init>:
  806069:	55 c8 59 55 c3 08 55 c2 05                          U.YU..U..

00806072 <UPDI::sys_reset(bool)::_reset>:
  806072:	55 c8 59 55 c8 00 55 c3 04 00                       U.YU..U...

Disassembly of section .text:

00000000 <__vectors>:
__vectors():
../../../../crt1/gcrt1.S:61
       0:	0d c1       	rjmp	.+538    	; 0x21c <__ctors_end>
       2:	00 00       	nop
../../../../crt1/gcrt1.S:67
       4:	3d c1       	rjmp	.+634    	; 0x280 <__bad_interrupt>
       6:	00 00       	nop
../../../../crt1/gcrt1.S:68
       8:	3b c1       	rjmp	.+630    	; 0x280 <__bad_interrupt>
       a:	00 00       	nop
../../../../crt1/gcrt1.S:69
       c:	39 c1       	rjmp	.+626    	; 0x280 <__bad_interrupt>
       e:	00 00       	nop
../../../../crt1/gcrt1.S:70
      10:	37 c1       	rjmp	.+622    	; 0x280 <__bad_interrupt>
      12:	00 00       	nop
../../../../crt1/gcrt1.S:71
      14:	35 c1       	rjmp	.+618    	; 0x280 <__bad_interrupt>
      16:	00 00       	nop
../../../../crt1/gcrt1.S:72
      18:	0c 94 34 0e 	jmp	0x1c68	; 0x1c68 <__vector_6>
../../../../crt1/gcrt1.S:73
      1c:	31 c1       	rjmp	.+610    	; 0x280 <__bad_interrupt>
      1e:	00 00       	nop
../../../../crt1/gcrt1.S:74
      20:	2f c1       	rjmp	.+606    	; 0x280 <__bad_interrupt>
      22:	00 00       	nop
../../../../crt1/gcrt1.S:75
      24:	2d c1       	rjmp	.+602    	; 0x280 <__bad_interrupt>
      26:	00 00       	nop
../../../../crt1/gcrt1.S:76
      28:	2b c1       	rjmp	.+598    	; 0x280 <__bad_interrupt>
      2a:	00 00       	nop
../../../../crt1/gcrt1.S:77
      2c:	29 c1       	rjmp	.+594    	; 0x280 <__bad_interrupt>
      2e:	00 00       	nop
../../../../crt1/gcrt1.S:78
      30:	27 c1       	rjmp	.+590    	; 0x280 <__bad_interrupt>
      32:	00 00       	nop
../../../../crt1/gcrt1.S:79
      34:	25 c1       	rjmp	.+586    	; 0x280 <__bad_interrupt>
      36:	00 00       	nop
../../../../crt1/gcrt1.S:80
      38:	23 c1       	rjmp	.+582    	; 0x280 <__bad_interrupt>
      3a:	00 00       	nop
../../../../crt1/gcrt1.S:81
      3c:	0c 94 ed 0d 	jmp	0x1bda	; 0x1bda <__vector_15>
../../../../crt1/gcrt1.S:82
      40:	1f c1       	rjmp	.+574    	; 0x280 <__bad_interrupt>
      42:	00 00       	nop
../../../../crt1/gcrt1.S:83
      44:	1d c1       	rjmp	.+570    	; 0x280 <__bad_interrupt>
      46:	00 00       	nop
../../../../crt1/gcrt1.S:84
      48:	1b c1       	rjmp	.+566    	; 0x280 <__bad_interrupt>
      4a:	00 00       	nop
../../../../crt1/gcrt1.S:85
      4c:	0c 94 6d 0d 	jmp	0x1ada	; 0x1ada <__vector_19>
../../../../crt1/gcrt1.S:86
      50:	17 c1       	rjmp	.+558    	; 0x280 <__bad_interrupt>
      52:	00 00       	nop
../../../../crt1/gcrt1.S:87
      54:	15 c1       	rjmp	.+554    	; 0x280 <__bad_interrupt>
      56:	00 00       	nop
../../../../crt1/gcrt1.S:88
      58:	13 c1       	rjmp	.+550    	; 0x280 <__bad_interrupt>
      5a:	00 00       	nop
../../../../crt1/gcrt1.S:89
      5c:	11 c1       	rjmp	.+546    	; 0x280 <__bad_interrupt>
      5e:	00 00       	nop
../../../../crt1/gcrt1.S:90
      60:	0c 94 44 0e 	jmp	0x1c88	; 0x1c88 <__vector_24>
../../../../crt1/gcrt1.S:91
      64:	0d c1       	rjmp	.+538    	; 0x280 <__bad_interrupt>
      66:	00 00       	nop
../../../../crt1/gcrt1.S:92
      68:	0b c1       	rjmp	.+534    	; 0x280 <__bad_interrupt>
      6a:	00 00       	nop
../../../../crt1/gcrt1.S:93
      6c:	09 c1       	rjmp	.+530    	; 0x280 <__bad_interrupt>
      6e:	00 00       	nop
../../../../crt1/gcrt1.S:94
      70:	07 c1       	rjmp	.+526    	; 0x280 <__bad_interrupt>
      72:	00 00       	nop
../../../../crt1/gcrt1.S:95
      74:	05 c1       	rjmp	.+522    	; 0x280 <__bad_interrupt>
      76:	00 00       	nop
../../../../crt1/gcrt1.S:96
      78:	03 c1       	rjmp	.+518    	; 0x280 <__bad_interrupt>
      7a:	00 00       	nop
../../../../crt1/gcrt1.S:97
      7c:	01 c1       	rjmp	.+514    	; 0x280 <__bad_interrupt>
      7e:	00 00       	nop
../../../../crt1/gcrt1.S:98
      80:	ff c0       	rjmp	.+510    	; 0x280 <__bad_interrupt>
      82:	00 00       	nop
../../../../crt1/gcrt1.S:99
      84:	fd c0       	rjmp	.+506    	; 0x280 <__bad_interrupt>
	...

00000088 <__trampolines_end>:
__trampolines_start():
      88:	43 00       	.word	0x0043	; ????
      8a:	44 00       	.word	0x0044	; ????
      8c:	43 00       	.word	0x0043	; ????
      8e:	2d 00       	.word	0x002d	; ????
      90:	41 00       	.word	0x0041	; ????
      92:	43 00       	.word	0x0043	; ????
      94:	4d 00       	.word	0x004d	; ????
      96:	2f 00       	.word	0x002f	; ????
      98:	56 00       	.word	0x0056	; ????
      9a:	43 00       	.word	0x0043	; ????
      9c:	50 00       	.word	0x0050	; ????
	...

000000a0 <USB::mstring>:
      a0:	55 00 50 00 44 00 49 00 34 00 41 00 56 00 52 00     U.P.D.I.4.A.V.R.
      b0:	2d 00 55 00 53 00 42 00 3a 00 41 00 56 00 52 00     -.U.S.B.:.A.V.R.
      c0:	2d 00 44 00 55 00 3a 00 45 00 44 00 42 00 47 00     -.D.U.:.E.D.B.G.
      d0:	2f 00 43 00 4d 00 53 00 49 00 53 00 2d 00 44 00     /.C.M.S.I.S.-.D.
      e0:	41 00 50 00 00 00                                   A.P...

000000e6 <USB::vstring>:
      e6:	4d 00 75 00 6c 00 74 00 69 00 58 00 2e 00 6a 00     M.u.l.t.i.X...j.
      f6:	70 00 20 00 4f 00 53 00 53 00 57 00 2f 00 4f 00     p. .O.S.S.W./.O.
     106:	53 00 48 00 57 00 20 00 50 00 72 00 6f 00 64 00     S.H.W. .P.r.o.d.
     116:	2e 00 00 00                                         ....

0000011a <USB::report_descriptor>:
     11a:	06 00 ff 09 01 a1 01 15 00 26 ff 00 75 08 96 40     .........&..u..@
     12a:	00 09 01 81 02 96 40 00 09 01 91 02 95 04 09 01     ......@.........
     13a:	b1 02 c0                                            ...

0000013d <USB::current_descriptor>:
     13d:	09 02 6b 00 03 01 00 80 32 09 04 00 00 02 03 00     ..k.....2.......
     14d:	00 00 09 21 11 01 00 01 22 23 00 07 05 02 03 40     ...!...."#.....@
     15d:	00 01 07 05 81 03 40 00 01 08 0b 01 02 02 02 01     ......@.........
     16d:	04 09 04 01 00 01 02 02 01 00 05 24 00 10 01 04     ...........$....
     17d:	24 02 06 05 24 06 01 02 05 24 01 03 02 07 05 82     $...$....$......
     18d:	03 10 00 04 09 04 02 00 02 0a 00 00 00 07 05 03     ................
     19d:	02 40 00 00 07 05 83 02 40 00 00                    .@......@..

000001a8 <USB::qualifier_descriptor>:
     1a8:	0a 06 00 02 ef 02 01 40 00 00                       .......@..

000001b2 <USB::device_descriptor>:
     1b2:	12 01 00 02 ef 02 01 40 db 04 15 0b 00 01 01 02     .......@........
     1c2:	03 01                                               ..

000001c4 <JTAG::jtag_physical>:
     1c4:	90 28 00 18 38 00 00 00                             .(..8...

000001cc <JTAG::jtag_version>:
     1cc:	00 01 20 2b 00                                      .. +.

000001d1 <USB::ep_init>:
	...
     1d9:	00 4b 00 00 06 63 00 00 00 7b 00 00 0e 63 00 00     .K...c...{...c..
	...
     1f1:	00 bb 40 00 1e 63 00 00 00 8b 00 00 1e 63 40 00     ..@..c.......c@.
     201:	00 b9 00 00 0e 63 00 00 00 8b 00 00 5e 63 40 00     .....c......^c@.
     211:	02 bb 00 00 9e 63 00 00 00 00 00                    .....c.....

0000021c <__ctors_end>:
__dtors_end():
../../../../crt1/gcrt1.S:230
     21c:	11 24       	eor	r1, r1
../../../../crt1/gcrt1.S:231
     21e:	1f be       	out	0x3f, r1	; 63
../../../../crt1/gcrt1.S:232
     220:	cf ef       	ldi	r28, 0xFF	; 255
../../../../crt1/gcrt1.S:234
     222:	cd bf       	out	0x3d, r28	; 61
../../../../crt1/gcrt1.S:236
     224:	df e7       	ldi	r29, 0x7F	; 127
../../../../crt1/gcrt1.S:237
     226:	de bf       	out	0x3e, r29	; 62

00000228 <setup_mcu()>:
_CLKCTRL_SETUP():
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/modernAVR/0.2.14/cores/modernAVR/api/CLKCTRL_modernAVR.h:301
#else
#assert This internal CPU clock is not supported
#endif

#if defined(_CLKCTRL_FREQSEL_)
  _PROTECTED_WRITE(CLKCTRL_OSCHFCTRLA, _CLKCTRL_FREQSEL_);
     228:	88 ed       	ldi	r24, 0xD8	; 216
     22a:	90 e2       	ldi	r25, 0x20	; 32
     22c:	84 bf       	out	0x34, r24	; 52
     22e:	90 93 68 00 	sts	0x0068, r25	; 0x800068 <__TEXT_REGION_LENGTH__+0x7f0068>
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/modernAVR/0.2.14/cores/modernAVR/api/CLKCTRL_modernAVR.h:313
#endif

#if defined(_CLKCTRL_PDIV_)
  _PROTECTED_WRITE(CLKCTRL_MCLKCTRLB, _CLKCTRL_PDIV_ | CLKCTRL_PEN_bm);
#else
  _PROTECTED_WRITE(CLKCTRL_MCLKCTRLB, 0);
     232:	90 e0       	ldi	r25, 0x00	; 0
     234:	84 bf       	out	0x34, r24	; 52
     236:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__TEXT_REGION_LENGTH__+0x7f0061>
initVariant():
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/modernAVR/0.2.14/variants/avr_du32/variant.h:267
extern "C" {
#endif

inline void initVariant (void) {
  _CLKCTRL_SETUP();
  PORTA.PINCONFIG = PORT_ISC_INPUT_DISABLE_gc;
     23a:	e0 e0       	ldi	r30, 0x00	; 0
     23c:	f4 e0       	ldi	r31, 0x04	; 4
     23e:	84 e0       	ldi	r24, 0x04	; 4
     240:	83 87       	std	Z+11, r24	; 0x0b
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/modernAVR/0.2.14/variants/avr_du32/variant.h:268
  PORTA.PINCTRLUPD = ~0;
     242:	8f ef       	ldi	r24, 0xFF	; 255
     244:	84 87       	std	Z+12, r24	; 0x0c
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/modernAVR/0.2.14/variants/avr_du32/variant.h:269
  PORTC.PINCTRLUPD = ~0;
     246:	80 93 4c 04 	sts	0x044C, r24	; 0x80044c <__TEXT_REGION_LENGTH__+0x7f044c>
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/modernAVR/0.2.14/variants/avr_du32/variant.h:270
  PORTD.PINCTRLUPD = ~0;
     24a:	80 93 6c 04 	sts	0x046C, r24	; 0x80046c <__TEXT_REGION_LENGTH__+0x7f046c>
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/modernAVR/0.2.14/variants/avr_du32/variant.h:271
  PORTF.PINCTRLUPD = ~0;
     24e:	80 93 ac 04 	sts	0x04AC, r24	; 0x8004ac <__TEXT_REGION_LENGTH__+0x7f04ac>

00000252 <__do_copy_data>:
__do_copy_data():
     252:	10 e6       	ldi	r17, 0x60	; 96
     254:	a0 e0       	ldi	r26, 0x00	; 0
     256:	b0 e6       	ldi	r27, 0x60	; 96
     258:	ea ea       	ldi	r30, 0xAA	; 170
     25a:	fb e2       	ldi	r31, 0x2B	; 43
     25c:	02 c0       	rjmp	.+4      	; 0x262 <__do_copy_data+0x10>
     25e:	05 90       	lpm	r0, Z+
     260:	0d 92       	st	X+, r0
     262:	ac 37       	cpi	r26, 0x7C	; 124
     264:	b1 07       	cpc	r27, r17
     266:	d9 f7       	brne	.-10     	; 0x25e <__do_copy_data+0xc>

00000268 <__do_clear_bss>:
__do_clear_bss():
     268:	20 e6       	ldi	r18, 0x60	; 96
     26a:	ac e7       	ldi	r26, 0x7C	; 124
     26c:	b0 e6       	ldi	r27, 0x60	; 96
     26e:	01 c0       	rjmp	.+2      	; 0x272 <.do_clear_bss_start>

00000270 <.do_clear_bss_loop>:
     270:	1d 92       	st	X+, r1

00000272 <.do_clear_bss_start>:
     272:	a5 38       	cpi	r26, 0x85	; 133
     274:	b2 07       	cpc	r27, r18
     276:	e1 f7       	brne	.-8      	; 0x270 <.do_clear_bss_loop>
.do_clear_bss_start():
../../../../crt1/gcrt1.S:314
     278:	0e 94 53 0e 	call	0x1ca6	; 0x1ca6 <main>
../../../../crt1/gcrt1.S:315
     27c:	0c 94 d3 15 	jmp	0x2ba6	; 0x2ba6 <_exit>

00000280 <__bad_interrupt>:
__vector_22():
../../../../crt1/gcrt1.S:209
     280:	bf ce       	rjmp	.-642    	; 0x0 <__vectors>

00000282 <SYS::send_bitmap(unsigned char const*, unsigned int) [clone .constprop.7]>:
send_bitmap():
/Users/askn/Collaborator/UPDI4AVR-USB/src/sys.cpp:236

  /*** Low level TDAT stream manipulation ***/
  /* UPDI commands are sent from TDAT using only TCA0 and bit manipulation, without switching USART. */
  /* 128kbps is the lowest limit that can be achieved with an 8-bit timer at 32MHz or less. */
  void send_bitmap (const uint8_t _bitmap[], const size_t _length) {
    TCA0_SPLIT_HPER  = TCA0_225K;
     282:	88 e5       	ldi	r24, 0x58	; 88
     284:	80 93 27 0a 	sts	0x0A27, r24	; 0x800a27 <__TEXT_REGION_LENGTH__+0x7f0a27>
/Users/askn/Collaborator/UPDI4AVR-USB/src/sys.cpp:237
    TCA0_SPLIT_CTRLA = TCA_SPLIT_ENABLE_bm | TCA_SPLIT_CLKSEL_DIV1_gc;
     288:	81 e0       	ldi	r24, 0x01	; 1
     28a:	80 93 00 0a 	sts	0x0A00, r24	; 0x800a00 <__TEXT_REGION_LENGTH__+0x7f0a00>
     28e:	90 e0       	ldi	r25, 0x00	; 0
     290:	80 e0       	ldi	r24, 0x00	; 0
/Users/askn/Collaborator/UPDI4AVR-USB/src/sys.cpp:239
    for (uint8_t i = 0; i < _length; i++) {
      uint8_t _d = (_bitmap[i >> 3]) >> (i & 7);
     292:	fc 01       	movw	r30, r24
     294:	23 e0       	ldi	r18, 0x03	; 3
     296:	f5 95       	asr	r31
     298:	e7 95       	ror	r30
     29a:	2a 95       	dec	r18
     29c:	e1 f7       	brne	.-8      	; 0x296 <SYS::send_bitmap(unsigned char const*, unsigned int) [clone .constprop.7]+0x14>
     29e:	e6 5e       	subi	r30, 0xE6	; 230
     2a0:	ff 49       	sbci	r31, 0x9F	; 159
     2a2:	20 81       	ld	r18, Z
     2a4:	30 e0       	ldi	r19, 0x00	; 0
     2a6:	48 2f       	mov	r20, r24
     2a8:	47 70       	andi	r20, 0x07	; 7
     2aa:	02 c0       	rjmp	.+4      	; 0x2b0 <SYS::send_bitmap(unsigned char const*, unsigned int) [clone .constprop.7]+0x2e>
     2ac:	35 95       	asr	r19
     2ae:	27 95       	ror	r18
     2b0:	4a 95       	dec	r20
     2b2:	e2 f7       	brpl	.-8      	; 0x2ac <SYS::send_bitmap(unsigned char const*, unsigned int) [clone .constprop.7]+0x2a>
/Users/askn/Collaborator/UPDI4AVR-USB/src/sys.cpp:240
      loop_until_bit_is_set(TCA0_SPLIT_INTFLAGS, TCA_SPLIT_HUNF_bp);
     2b4:	40 91 0b 0a 	lds	r20, 0x0A0B	; 0x800a0b <__TEXT_REGION_LENGTH__+0x7f0a0b>
     2b8:	41 ff       	sbrs	r20, 1
     2ba:	fc cf       	rjmp	.-8      	; 0x2b4 <SYS::send_bitmap(unsigned char const*, unsigned int) [clone .constprop.7]+0x32>
/Users/askn/Collaborator/UPDI4AVR-USB/src/sys.cpp:241
      if (bit_is_set(_d, 0))
     2bc:	20 ff       	sbrs	r18, 0
     2be:	0d c0       	rjmp	.+26     	; 0x2da <SYS::send_bitmap(unsigned char const*, unsigned int) [clone .constprop.7]+0x58>
/Users/askn/Collaborator/UPDI4AVR-USB/src/sys.cpp:242
        openDrainWriteMacro(PIN_PG_TDAT, HIGH);
     2c0:	00 98       	cbi	0x00, 0	; 0
/Users/askn/Collaborator/UPDI4AVR-USB/src/sys.cpp:245
      else
        openDrainWriteMacro(PIN_PG_TDAT, LOW);
      bit_set(TCA0_SPLIT_INTFLAGS, TCA_SPLIT_HUNF_bp);
     2c2:	20 91 0b 0a 	lds	r18, 0x0A0B	; 0x800a0b <__TEXT_REGION_LENGTH__+0x7f0a0b>
     2c6:	22 60       	ori	r18, 0x02	; 2
     2c8:	20 93 0b 0a 	sts	0x0A0B, r18	; 0x800a0b <__TEXT_REGION_LENGTH__+0x7f0a0b>
     2cc:	01 96       	adiw	r24, 0x01	; 1
/Users/askn/Collaborator/UPDI4AVR-USB/src/sys.cpp:238
  /* UPDI commands are sent from TDAT using only TCA0 and bit manipulation, without switching USART. */
  /* 128kbps is the lowest limit that can be achieved with an 8-bit timer at 32MHz or less. */
  void send_bitmap (const uint8_t _bitmap[], const size_t _length) {
    TCA0_SPLIT_HPER  = TCA0_225K;
    TCA0_SPLIT_CTRLA = TCA_SPLIT_ENABLE_bm | TCA_SPLIT_CLKSEL_DIV1_gc;
    for (uint8_t i = 0; i < _length; i++) {
     2ce:	80 39       	cpi	r24, 0x90	; 144
     2d0:	91 05       	cpc	r25, r1
     2d2:	f9 f6       	brne	.-66     	; 0x292 <SYS::send_bitmap(unsigned char const*, unsigned int) [clone .constprop.7]+0x10>
/Users/askn/Collaborator/UPDI4AVR-USB/src/sys.cpp:247
        openDrainWriteMacro(PIN_PG_TDAT, HIGH);
      else
        openDrainWriteMacro(PIN_PG_TDAT, LOW);
      bit_set(TCA0_SPLIT_INTFLAGS, TCA_SPLIT_HUNF_bp);
    }
    TCA0_SPLIT_CTRLA = 0;
     2d4:	10 92 00 0a 	sts	0x0A00, r1	; 0x800a00 <__TEXT_REGION_LENGTH__+0x7f0a00>
/Users/askn/Collaborator/UPDI4AVR-USB/src/sys.cpp:248
  }
     2d8:	08 95       	ret
/Users/askn/Collaborator/UPDI4AVR-USB/src/sys.cpp:244
      uint8_t _d = (_bitmap[i >> 3]) >> (i & 7);
      loop_until_bit_is_set(TCA0_SPLIT_INTFLAGS, TCA_SPLIT_HUNF_bp);
      if (bit_is_set(_d, 0))
        openDrainWriteMacro(PIN_PG_TDAT, HIGH);
      else
        openDrainWriteMacro(PIN_PG_TDAT, LOW);
     2da:	00 9a       	sbi	0x00, 0	; 0
     2dc:	f2 cf       	rjmp	.-28     	; 0x2c2 <SYS::send_bitmap(unsigned char const*, unsigned int) [clone .constprop.7]+0x40>

000002de <USB::ep_cdo_listen()>:
ep_cdo_listen():
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:350
    loop_until_bit_is_clear(USB0_INTFLAGSB, USB_RMWBUSY_bp);
    USB_EP_STATUS_CLR(USB_EP_CDI) = ~USB_TOGGLE_bm;
  }

  void ep_cdo_listen (void) {
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
     2de:	8f b7       	in	r24, 0x3f	; 63
__iCliRetVal():
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/tools/avr-gcc/7.3.0-avr8-gnu-toolchain/avr/include/util/atomic.h:50
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     2e0:	f8 94       	cli
ep_cdo_listen():
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:351
      _recv_count = 0;
     2e2:	10 92 21 64 	sts	0x6421, r1	; 0x806421 <_recv_count>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:352
      EP_CDO.CNT  = 0;
     2e6:	10 92 60 64 	sts	0x6460, r1	; 0x806460 <EP_TABLE+0x3a>
     2ea:	10 92 61 64 	sts	0x6461, r1	; 0x806461 <EP_TABLE+0x3b>
__iRestore():
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/tools/avr-gcc/7.3.0-avr8-gnu-toolchain/avr/include/util/atomic.h:70
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     2ee:	8f bf       	out	0x3f, r24	; 63
ep_cdo_listen():
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:354
    }
    loop_until_bit_is_clear(USB0_INTFLAGSB, USB_RMWBUSY_bp);
     2f0:	80 91 0b 0c 	lds	r24, 0x0C0B	; 0x800c0b <__TEXT_REGION_LENGTH__+0x7f0c0b>
     2f4:	82 fd       	sbrc	r24, 2
     2f6:	fc cf       	rjmp	.-8      	; 0x2f0 <USB::ep_cdo_listen()+0x12>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:355
    USB_EP_STATUS_CLR(USB_EP_CDO) = ~USB_TOGGLE_bm;
     2f8:	8e ef       	ldi	r24, 0xFE	; 254
     2fa:	80 93 4c 0c 	sts	0x0C4C, r24	; 0x800c4c <__TEXT_REGION_LENGTH__+0x7f0c4c>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:356
  }
     2fe:	08 95       	ret

00000300 <USB::ep_cdi_listen()>:
ep_cdi_listen():
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:325
  #else
    /* If our math is correct, then if each side of the double */
    /* buffer can complete the transmission of 64 characters   */
    /* in 1 ms, then it can support 640 kbps. */
    if (bit_is_clear(GPCONF, GPCONF_OPN_bp)
     || bit_is_clear(EP_CDI.STATUS, USB_BUSNAK_bp)) {
     300:	e4 9b       	sbis	0x1c, 4	; 28
     302:	0b c0       	rjmp	.+22     	; 0x31a <USB::ep_cdi_listen()+0x1a>
     304:	80 91 66 64 	lds	r24, 0x6466	; 0x806466 <EP_TABLE+0x40>
     308:	81 ff       	sbrs	r24, 1
     30a:	07 c0       	rjmp	.+14     	; 0x31a <USB::ep_cdi_listen()+0x1a>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:336
  #endif
    D2PRINTF(" VI=%02X:", _send_count);
    D2PRINTHEX(bit_is_set(GPCONF, GPCONF_DBL_bp)
      ? &EP_MEM.cdi_data[64]
      : &EP_MEM.cdi_data[0], _send_count);
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
     30c:	2f b7       	in	r18, 0x3f	; 63
__iCliRetVal():
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/tools/avr-gcc/7.3.0-avr8-gnu-toolchain/avr/include/util/atomic.h:50
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     30e:	f8 94       	cli
ep_cdi_listen():
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:338
      EP_CDI.DATAPTR = bit_is_set(GPCONF, GPCONF_DBL_bp)
        ? (register16_t)&EP_MEM.cdi_data[64]
     310:	e2 99       	sbic	0x1c, 2	; 28
     312:	0a c0       	rjmp	.+20     	; 0x328 <USB::ep_cdi_listen()+0x28>
     314:	8e e9       	ldi	r24, 0x9E	; 158
     316:	93 e6       	ldi	r25, 0x63	; 99
     318:	09 c0       	rjmp	.+18     	; 0x32c <USB::ep_cdi_listen()+0x2c>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:328
    /* in 1 ms, then it can support 640 kbps. */
    if (bit_is_clear(GPCONF, GPCONF_OPN_bp)
     || bit_is_clear(EP_CDI.STATUS, USB_BUSNAK_bp)) {
      /* No sending allowed while port is closed.  */
      /* If the buffer overflows, it is discarded. */
      if (_send_count == 64) _send_count = 0;
     31a:	80 91 22 64 	lds	r24, 0x6422	; 0x806422 <_send_count>
     31e:	80 34       	cpi	r24, 0x40	; 64
     320:	11 f5       	brne	.+68     	; 0x366 <USB::ep_cdi_listen()+0x66>
     322:	10 92 22 64 	sts	0x6422, r1	; 0x806422 <_send_count>
     326:	08 95       	ret
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:338
    D2PRINTHEX(bit_is_set(GPCONF, GPCONF_DBL_bp)
      ? &EP_MEM.cdi_data[64]
      : &EP_MEM.cdi_data[0], _send_count);
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
      EP_CDI.DATAPTR = bit_is_set(GPCONF, GPCONF_DBL_bp)
        ? (register16_t)&EP_MEM.cdi_data[64]
     328:	8e ed       	ldi	r24, 0xDE	; 222
     32a:	93 e6       	ldi	r25, 0x63	; 99
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:337
    D2PRINTF(" VI=%02X:", _send_count);
    D2PRINTHEX(bit_is_set(GPCONF, GPCONF_DBL_bp)
      ? &EP_MEM.cdi_data[64]
      : &EP_MEM.cdi_data[0], _send_count);
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
      EP_CDI.DATAPTR = bit_is_set(GPCONF, GPCONF_DBL_bp)
     32c:	80 93 6a 64 	sts	0x646A, r24	; 0x80646a <EP_TABLE+0x44>
     330:	90 93 6b 64 	sts	0x646B, r25	; 0x80646b <EP_TABLE+0x45>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:340
        ? (register16_t)&EP_MEM.cdi_data[64]
        : (register16_t)&EP_MEM.cdi_data[0];
      EP_CDI.CNT = _send_count;
     334:	80 91 22 64 	lds	r24, 0x6422	; 0x806422 <_send_count>
     338:	90 e0       	ldi	r25, 0x00	; 0
     33a:	80 93 68 64 	sts	0x6468, r24	; 0x806468 <EP_TABLE+0x42>
     33e:	90 93 69 64 	sts	0x6469, r25	; 0x806469 <EP_TABLE+0x43>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:341
      EP_CDI.MCNT = 0;
     342:	10 92 6c 64 	sts	0x646C, r1	; 0x80646c <EP_TABLE+0x46>
     346:	10 92 6d 64 	sts	0x646D, r1	; 0x80646d <EP_TABLE+0x47>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:342
      _send_count = 0;
     34a:	10 92 22 64 	sts	0x6422, r1	; 0x806422 <_send_count>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:343
      GPCONF ^= GPCONF_DBL_bm;
     34e:	8c b3       	in	r24, 0x1c	; 28
     350:	94 e0       	ldi	r25, 0x04	; 4
     352:	89 27       	eor	r24, r25
     354:	8c bb       	out	0x1c, r24	; 28
__iRestore():
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/tools/avr-gcc/7.3.0-avr8-gnu-toolchain/avr/include/util/atomic.h:70
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     356:	2f bf       	out	0x3f, r18	; 63
ep_cdi_listen():
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:345
    }
    loop_until_bit_is_clear(USB0_INTFLAGSB, USB_RMWBUSY_bp);
     358:	80 91 0b 0c 	lds	r24, 0x0C0B	; 0x800c0b <__TEXT_REGION_LENGTH__+0x7f0c0b>
     35c:	82 fd       	sbrc	r24, 2
     35e:	fc cf       	rjmp	.-8      	; 0x358 <USB::ep_cdi_listen()+0x58>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:346
    USB_EP_STATUS_CLR(USB_EP_CDI) = ~USB_TOGGLE_bm;
     360:	8e ef       	ldi	r24, 0xFE	; 254
     362:	80 93 4e 0c 	sts	0x0C4E, r24	; 0x800c4e <__TEXT_REGION_LENGTH__+0x7f0c4e>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:347
  }
     366:	08 95       	ret

00000368 <USB::ep_cci_listen()>:
ep_cci_listen():
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:292
    loop_until_bit_is_clear(USB0_INTFLAGSB, USB_RMWBUSY_bp);
    USB_EP_STATUS_CLR(USB_EP_DPO) = ~USB_TOGGLE_bm;
  }

  void ep_cci_listen (void) {
    EP_CCI.CNT = 10;
     368:	8a e0       	ldi	r24, 0x0A	; 10
     36a:	90 e0       	ldi	r25, 0x00	; 0
     36c:	80 93 58 64 	sts	0x6458, r24	; 0x806458 <EP_TABLE+0x32>
     370:	90 93 59 64 	sts	0x6459, r25	; 0x806459 <EP_TABLE+0x33>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:293
    EP_CCI.MCNT = 0;
     374:	10 92 5c 64 	sts	0x645C, r1	; 0x80645c <EP_TABLE+0x36>
     378:	10 92 5d 64 	sts	0x645D, r1	; 0x80645d <EP_TABLE+0x37>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:294
    loop_until_bit_is_clear(USB0_INTFLAGSB, USB_RMWBUSY_bp);
     37c:	80 91 0b 0c 	lds	r24, 0x0C0B	; 0x800c0b <__TEXT_REGION_LENGTH__+0x7f0c0b>
     380:	82 fd       	sbrc	r24, 2
     382:	fc cf       	rjmp	.-8      	; 0x37c <USB::ep_cci_listen()+0x14>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:295
    USB_EP_STATUS_CLR(USB_EP_CCI) = ~USB_TOGGLE_bm;
     384:	8e ef       	ldi	r24, 0xFE	; 254
     386:	80 93 4a 0c 	sts	0x0C4A, r24	; 0x800c4a <__TEXT_REGION_LENGTH__+0x7f0c4a>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:296
  }
     38a:	08 95       	ret

0000038c <USB::ep_res_listen()>:
ep_res_listen():
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:273
    loop_until_bit_is_clear(USB0_INTFLAGSB, USB_RMWBUSY_bp);
    USB_EP_STATUS_CLR(USB_EP_REQ) = ~USB_TOGGLE_bm;
  }

  void ep_res_listen (void) {
    EP_RES.MCNT = 0;
     38c:	10 92 3c 64 	sts	0x643C, r1	; 0x80643c <EP_TABLE+0x16>
     390:	10 92 3d 64 	sts	0x643D, r1	; 0x80643d <EP_TABLE+0x17>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:274
    loop_until_bit_is_clear(USB0_INTFLAGSB, USB_RMWBUSY_bp);
     394:	80 91 0b 0c 	lds	r24, 0x0C0B	; 0x800c0b <__TEXT_REGION_LENGTH__+0x7f0c0b>
     398:	82 fd       	sbrc	r24, 2
     39a:	fc cf       	rjmp	.-8      	; 0x394 <USB::ep_res_listen()+0x8>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:275
    USB_EP_STATUS_CLR(USB_EP_RES) = ~USB_TOGGLE_bm;
     39c:	8e ef       	ldi	r24, 0xFE	; 254
     39e:	80 93 42 0c 	sts	0x0C42, r24	; 0x800c42 <__TEXT_REGION_LENGTH__+0x7f0c42>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:276
  }
     3a2:	08 95       	ret

000003a4 <USB::ep_req_listen()>:
ep_req_listen():
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:267
  void ep_cci_pending (void) { loop_until_bit_is_set(EP_CCI.STATUS, USB_BUSNAK_bp); }
  void ep_cdo_pending (void) { loop_until_bit_is_set(EP_CDO.STATUS, USB_BUSNAK_bp); }
  void ep_cdi_pending (void) { loop_until_bit_is_set(EP_CDI.STATUS, USB_BUSNAK_bp); }

  void ep_req_listen (void) {
    EP_REQ.CNT = 0;
     3a4:	10 92 30 64 	sts	0x6430, r1	; 0x806430 <EP_TABLE+0xa>
     3a8:	10 92 31 64 	sts	0x6431, r1	; 0x806431 <EP_TABLE+0xb>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:268
    loop_until_bit_is_clear(USB0_INTFLAGSB, USB_RMWBUSY_bp);
     3ac:	80 91 0b 0c 	lds	r24, 0x0C0B	; 0x800c0b <__TEXT_REGION_LENGTH__+0x7f0c0b>
     3b0:	82 fd       	sbrc	r24, 2
     3b2:	fc cf       	rjmp	.-8      	; 0x3ac <USB::ep_req_listen()+0x8>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:269
    USB_EP_STATUS_CLR(USB_EP_REQ) = ~USB_TOGGLE_bm;
     3b4:	8e ef       	ldi	r24, 0xFE	; 254
     3b6:	80 93 40 0c 	sts	0x0C40, r24	; 0x800c40 <__TEXT_REGION_LENGTH__+0x7f0c40>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:270
  }
     3ba:	08 95       	ret

000003bc <USART::drain(unsigned int)>:
drain():
/Users/askn/Collaborator/UPDI4AVR-USB/src/usart.cpp:41
    return _baud;
  }

  void drain (size_t _delay) {
    do {
      if (bit_is_set(USART0_STATUS, USART_RXCIF_bp)) {
     3bc:	20 91 04 08 	lds	r18, 0x0804	; 0x800804 <__TEXT_REGION_LENGTH__+0x7f0804>
     3c0:	27 ff       	sbrs	r18, 7
     3c2:	04 c0       	rjmp	.+8      	; 0x3cc <USART::drain(unsigned int)+0x10>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usart.cpp:45
        __asm__ __volatile__ (
          "LDS R0, 0x0801\n"  /* drop USART0_RXDATAH */
          "LDS R0, 0x0800\n"  /* drop USART0_RXDATAL */
        );
     3c4:	00 90 01 08 	lds	r0, 0x0801	; 0x800801 <__TEXT_REGION_LENGTH__+0x7f0801>
     3c8:	00 90 00 08 	lds	r0, 0x0800	; 0x800800 <__TEXT_REGION_LENGTH__+0x7f0800>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usart.cpp:47
      }
    } while (--_delay);
     3cc:	01 97       	sbiw	r24, 0x01	; 1
     3ce:	b1 f7       	brne	.-20     	; 0x3bc <USART::drain(unsigned int)>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usart.cpp:48
  }
     3d0:	08 95       	ret

000003d2 <USART::calk_baud_khz(unsigned int)>:
calk_baud_khz():
/Users/askn/Collaborator/UPDI4AVR-USB/src/usart.cpp:33
    pinModeMacro(PIN_PG_TRST, INPUT_PULLUP);  /* USART0_ALT3 or USART0_DEFAULT */
  }

  /*** Calculate the baud rate for VCP asynchronous mode. ***/
  uint16_t calk_baud_khz (uint16_t _khz) {
    uint32_t _baud = ((F_CPU / 1000L * 8L) / _khz + 1) / 2;
     3d2:	9c 01       	movw	r18, r24
     3d4:	50 e0       	ldi	r21, 0x00	; 0
     3d6:	40 e0       	ldi	r20, 0x00	; 0
     3d8:	60 e0       	ldi	r22, 0x00	; 0
     3da:	71 e7       	ldi	r23, 0x71	; 113
     3dc:	82 e0       	ldi	r24, 0x02	; 2
     3de:	90 e0       	ldi	r25, 0x00	; 0
     3e0:	0e 94 9a 15 	call	0x2b34	; 0x2b34 <__divmodsi4>
     3e4:	da 01       	movw	r26, r20
     3e6:	c9 01       	movw	r24, r18
     3e8:	01 96       	adiw	r24, 0x01	; 1
     3ea:	a1 1d       	adc	r26, r1
     3ec:	b1 1d       	adc	r27, r1
     3ee:	b5 95       	asr	r27
     3f0:	a7 95       	ror	r26
     3f2:	97 95       	ror	r25
     3f4:	87 95       	ror	r24
/Users/askn/Collaborator/UPDI4AVR-USB/src/usart.cpp:34
    if (_baud < 64) _baud = 64;
     3f6:	80 34       	cpi	r24, 0x40	; 64
     3f8:	91 05       	cpc	r25, r1
     3fa:	a1 05       	cpc	r26, r1
     3fc:	b1 05       	cpc	r27, r1
     3fe:	54 f0       	brlt	.+20     	; 0x414 <__BOOT_SIGNATURE_REGION_LENGTH__+0x14>
     400:	00 97       	sbiw	r24, 0x00	; 0
     402:	21 e0       	ldi	r18, 0x01	; 1
     404:	a2 07       	cpc	r26, r18
     406:	b1 05       	cpc	r27, r1
     408:	48 f0       	brcs	.+18     	; 0x41c <__BOOT_SIGNATURE_REGION_LENGTH__+0x1c>
     40a:	8f ef       	ldi	r24, 0xFF	; 255
     40c:	9f ef       	ldi	r25, 0xFF	; 255
     40e:	a0 e0       	ldi	r26, 0x00	; 0
     410:	b0 e0       	ldi	r27, 0x00	; 0
     412:	08 95       	ret
     414:	80 e4       	ldi	r24, 0x40	; 64
     416:	90 e0       	ldi	r25, 0x00	; 0
     418:	a0 e0       	ldi	r26, 0x00	; 0
     41a:	b0 e0       	ldi	r27, 0x00	; 0
/Users/askn/Collaborator/UPDI4AVR-USB/src/usart.cpp:37
    else if (_baud > 0xFFFFU) _baud = 0xFFFF;
    return _baud;
  }
     41c:	08 95       	ret

0000041e <NVM::V1::prog_init()>:
prog_init():
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv1.cpp:30
 * This file is a template for the future.
 */

namespace NVM::V1 {

  size_t prog_init (void) { return 0; }
     41e:	90 e0       	ldi	r25, 0x00	; 0
     420:	80 e0       	ldi	r24, 0x00	; 0
     422:	08 95       	ret

00000424 <UPDI::recv()>:
recv():
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:72
    send(0x00);
    USART0_BAUD = USART::calk_baud_khz(_xclk);
  }

  bool recv (void) {
    loop_until_bit_is_set(USART0_STATUS, USART_RXCIF_bp);
     424:	80 91 04 08 	lds	r24, 0x0804	; 0x800804 <__TEXT_REGION_LENGTH__+0x7f0804>
     428:	87 ff       	sbrs	r24, 7
     42a:	fc cf       	rjmp	.-8      	; 0x424 <UPDI::recv()>
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:73
    RXSTAT = USART0_RXDATAH ^ 0x80;
     42c:	80 91 01 08 	lds	r24, 0x0801	; 0x800801 <__TEXT_REGION_LENGTH__+0x7f0801>
     430:	80 58       	subi	r24, 0x80	; 128
     432:	8e bb       	out	0x1e, r24	; 30
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:74
    RXDATA = USART0_RXDATAL;
     434:	80 91 00 08 	lds	r24, 0x0800	; 0x800800 <__TEXT_REGION_LENGTH__+0x7f0800>
     438:	8f bb       	out	0x1f, r24	; 31
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:75
    return RXSTAT == 0 || send_break();
     43a:	8e b3       	in	r24, 0x1e	; 30
     43c:	88 23       	and	r24, r24
     43e:	11 f1       	breq	.+68     	; 0x484 <UPDI::recv()+0x60>
send_break():
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:57
    0x55, 0x04        /* LD,ST PTR++ DATA1,2 */
  };

  bool send_break (void) {
    D2PRINTF("<BRK>");
    USART0_BAUD = USART0_BAUD + (USART0_BAUD >> 2);
     440:	20 91 08 08 	lds	r18, 0x0808	; 0x800808 <__TEXT_REGION_LENGTH__+0x7f0808>
     444:	30 91 09 08 	lds	r19, 0x0809	; 0x800809 <__TEXT_REGION_LENGTH__+0x7f0809>
     448:	80 91 08 08 	lds	r24, 0x0808	; 0x800808 <__TEXT_REGION_LENGTH__+0x7f0808>
     44c:	90 91 09 08 	lds	r25, 0x0809	; 0x800809 <__TEXT_REGION_LENGTH__+0x7f0809>
     450:	96 95       	lsr	r25
     452:	87 95       	ror	r24
     454:	96 95       	lsr	r25
     456:	87 95       	ror	r24
     458:	82 0f       	add	r24, r18
     45a:	93 1f       	adc	r25, r19
     45c:	80 93 08 08 	sts	0x0808, r24	; 0x800808 <__TEXT_REGION_LENGTH__+0x7f0808>
     460:	90 93 09 08 	sts	0x0809, r25	; 0x800809 <__TEXT_REGION_LENGTH__+0x7f0809>
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:58
    send(0x00);
     464:	80 e0       	ldi	r24, 0x00	; 0
     466:	10 d0       	rcall	.+32     	; 0x488 <UPDI::send(unsigned char)>
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:59
    USART0_BAUD = USART::calk_baud_khz(_xclk);
     468:	80 91 18 60 	lds	r24, 0x6018	; 0x806018 <_xclk>
     46c:	90 91 19 60 	lds	r25, 0x6019	; 0x806019 <_xclk+0x1>
     470:	b0 df       	rcall	.-160    	; 0x3d2 <USART::calk_baud_khz(unsigned int)>
     472:	80 93 08 08 	sts	0x0808, r24	; 0x800808 <__TEXT_REGION_LENGTH__+0x7f0808>
     476:	90 93 09 08 	sts	0x0809, r25	; 0x800809 <__TEXT_REGION_LENGTH__+0x7f0809>
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:60
    USART::drain();
     47a:	90 e0       	ldi	r25, 0x00	; 0
     47c:	80 e0       	ldi	r24, 0x00	; 0
     47e:	9e df       	rcall	.-196    	; 0x3bc <USART::drain(unsigned int)>
     480:	80 e0       	ldi	r24, 0x00	; 0
     482:	08 95       	ret
recv():
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:75

  bool recv (void) {
    loop_until_bit_is_set(USART0_STATUS, USART_RXCIF_bp);
    RXSTAT = USART0_RXDATAH ^ 0x80;
    RXDATA = USART0_RXDATAL;
    return RXSTAT == 0 || send_break();
     484:	81 e0       	ldi	r24, 0x01	; 1
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:76
  }
     486:	08 95       	ret

00000488 <UPDI::send(unsigned char)>:
send():
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:90

  bool is_ack (void) {
    return recv() && 0x40 == RXDATA;
  }

  bool send (const uint8_t _data) {
     488:	cf 93       	push	r28
     48a:	c8 2f       	mov	r28, r24
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:91
    loop_until_bit_is_set(USART0_STATUS, USART_DREIF_bp);
     48c:	80 91 04 08 	lds	r24, 0x0804	; 0x800804 <__TEXT_REGION_LENGTH__+0x7f0804>
     490:	85 ff       	sbrs	r24, 5
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:92
    USART0_TXDATAL = _data;
     492:	fc cf       	rjmp	.-8      	; 0x48c <UPDI::send(unsigned char)+0x4>
     494:	c0 93 02 08 	sts	0x0802, r28	; 0x800802 <__TEXT_REGION_LENGTH__+0x7f0802>
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:93
    return recv() && _data == RXDATA;
     498:	c5 df       	rcall	.-118    	; 0x424 <UPDI::recv()>
     49a:	88 23       	and	r24, r24
     49c:	21 f0       	breq	.+8      	; 0x4a6 <UPDI::send(unsigned char)+0x1e>
     49e:	9f b3       	in	r25, 0x1f	; 31
     4a0:	81 e0       	ldi	r24, 0x01	; 1
     4a2:	9c 13       	cpse	r25, r28
     4a4:	80 e0       	ldi	r24, 0x00	; 0
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:94
  }
     4a6:	cf 91       	pop	r28
     4a8:	08 95       	ret

000004aa <UPDI::send_bytes(unsigned char const*, unsigned int)>:
send_bytes():
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:96

  bool send_bytes (const uint8_t* _data, size_t _len) {
     4aa:	0f 93       	push	r16
     4ac:	1f 93       	push	r17
     4ae:	cf 93       	push	r28
     4b0:	df 93       	push	r29
     4b2:	eb 01       	movw	r28, r22
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:98
    do {
      if (!send(*_data++)) return false;
     4b4:	8c 01       	movw	r16, r24
     4b6:	f8 01       	movw	r30, r16
     4b8:	81 91       	ld	r24, Z+
     4ba:	8f 01       	movw	r16, r30
     4bc:	e5 df       	rcall	.-54     	; 0x488 <UPDI::send(unsigned char)>
     4be:	88 23       	and	r24, r24
     4c0:	11 f0       	breq	.+4      	; 0x4c6 <UPDI::send_bytes(unsigned char const*, unsigned int)+0x1c>
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:99
    } while (--_len);
     4c2:	21 97       	sbiw	r28, 0x01	; 1
     4c4:	c1 f7       	brne	.-16     	; 0x4b6 <UPDI::send_bytes(unsigned char const*, unsigned int)+0xc>
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:101
    return true;
  }
     4c6:	df 91       	pop	r29
     4c8:	cf 91       	pop	r28
     4ca:	1f 91       	pop	r17
     4cc:	0f 91       	pop	r16
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:223
    return send_bytes(_key_stat, 2) && recv();
  }

  bool sys_status (void) {
    const static uint8_t _sys_stat[] = {0x55, 0x8B};
    return send_bytes(_sys_stat, 2) && recv();
     4ce:	08 95       	ret

000004d0 <UPDI::sys_status()>:
sys_status():
     4d0:	62 e0       	ldi	r22, 0x02	; 2
     4d2:	70 e0       	ldi	r23, 0x00	; 0
     4d4:	81 e4       	ldi	r24, 0x41	; 65
     4d6:	90 e6       	ldi	r25, 0x60	; 96
     4d8:	e8 df       	rcall	.-48     	; 0x4aa <UPDI::send_bytes(unsigned char const*, unsigned int)>
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:110
  bool recv_byte (uint32_t _dwAddr) {
    static uint8_t _set_ptr[] = {
      0x55, 0x08, 0, 0, 0, 0  /* LDS ADDR3 DATA1 */
    };
    _CAPS32(_set_ptr[2])->dword = _dwAddr;
    return send_bytes(_set_ptr, 5) && recv();
     4da:	81 11       	cpse	r24, r1
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:224
  }

  bool sys_status (void) {
    const static uint8_t _sys_stat[] = {0x55, 0x8B};
    return send_bytes(_sys_stat, 2) && recv();
  }
     4dc:	a3 cf       	rjmp	.-186    	; 0x424 <UPDI::recv()>
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:218
    return send_byte(0x1000, _nvmcmd);  /* NVMCTRL_CTRLA */
  }

  bool key_status (void) {
    const static uint8_t _key_stat[] = {0x55, 0x87};
    return send_bytes(_key_stat, 2) && recv();
     4de:	80 e0       	ldi	r24, 0x00	; 0
     4e0:	08 95       	ret

000004e2 <UPDI::key_status()>:
key_status():
     4e2:	62 e0       	ldi	r22, 0x02	; 2
     4e4:	70 e0       	ldi	r23, 0x00	; 0
     4e6:	8f e3       	ldi	r24, 0x3F	; 63
     4e8:	90 e6       	ldi	r25, 0x60	; 96
     4ea:	df df       	rcall	.-66     	; 0x4aa <UPDI::send_bytes(unsigned char const*, unsigned int)>
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:110
  bool recv_byte (uint32_t _dwAddr) {
    static uint8_t _set_ptr[] = {
      0x55, 0x08, 0, 0, 0, 0  /* LDS ADDR3 DATA1 */
    };
    _CAPS32(_set_ptr[2])->dword = _dwAddr;
    return send_bytes(_set_ptr, 5) && recv();
     4ec:	81 11       	cpse	r24, r1
     4ee:	9a cf       	rjmp	.-204    	; 0x424 <UPDI::recv()>
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:219
  }

  bool key_status (void) {
    const static uint8_t _key_stat[] = {0x55, 0x87};
    return send_bytes(_key_stat, 2) && recv();
  }
     4f0:	80 e0       	ldi	r24, 0x00	; 0
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:226
  bool sys_status (void) {
    const static uint8_t _sys_stat[] = {0x55, 0x8B};
    return send_bytes(_sys_stat, 2) && recv();
  }

  bool set_nvmprog_key (bool _reset = true) {
     4f2:	08 95       	ret

000004f4 <UPDI::set_nvmprog_key(bool)>:
set_nvmprog_key():
     4f4:	cf 93       	push	r28
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:228
    D1PRINTF(" PROG_KEY\r\n");
    if (!send_bytes(nvmprog_key, sizeof(nvmprog_key))) return false;
     4f6:	df 93       	push	r29
     4f8:	d8 2f       	mov	r29, r24
     4fa:	6a e0       	ldi	r22, 0x0A	; 10
     4fc:	70 e0       	ldi	r23, 0x00	; 0
     4fe:	83 e4       	ldi	r24, 0x43	; 67
     500:	90 e6       	ldi	r25, 0x60	; 96
     502:	d3 df       	rcall	.-90     	; 0x4aa <UPDI::send_bytes(unsigned char const*, unsigned int)>
     504:	c8 2f       	mov	r28, r24
     506:	88 23       	and	r24, r24
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:229
    do { key_status(); } while(bit_is_clear(RXDATA, 4));  /* wait set NVMPROG */
     508:	61 f0       	breq	.+24     	; 0x522 <UPDI::set_nvmprog_key(bool)+0x2e>
     50a:	eb df       	rcall	.-42     	; 0x4e2 <UPDI::key_status()>
     50c:	fc 9b       	sbis	0x1f, 4	; 31
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:231
    D1PRINTF(" KEY=%02X\r\n", RXDATA);
    return _reset ? sys_reset(false) : true;
     50e:	fd cf       	rjmp	.-6      	; 0x50a <UPDI::set_nvmprog_key(bool)+0x16>
     510:	dd 23       	and	r29, r29
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:130
    const static uint8_t _reset[] = {
      0x55, 0xC8, 0x59, /* SYSRST */
      0x55, 0xC8, 0x00, /* SYSRUN */
      0x55, 0xC3, 0x04  /* UPDIDIS */
    };
    return send_bytes(_reset, _leave ? 9 : 6);
     512:	39 f0       	breq	.+14     	; 0x522 <UPDI::set_nvmprog_key(bool)+0x2e>
sys_reset():
     514:	66 e0       	ldi	r22, 0x06	; 6
     516:	70 e0       	ldi	r23, 0x00	; 0
     518:	82 e7       	ldi	r24, 0x72	; 114
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:232
    D1PRINTF(" PROG_KEY\r\n");
    if (!send_bytes(nvmprog_key, sizeof(nvmprog_key))) return false;
    do { key_status(); } while(bit_is_clear(RXDATA, 4));  /* wait set NVMPROG */
    D1PRINTF(" KEY=%02X\r\n", RXDATA);
    return _reset ? sys_reset(false) : true;
  }
     51a:	90 e6       	ldi	r25, 0x60	; 96
set_nvmprog_key():
     51c:	df 91       	pop	r29
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:130
    const static uint8_t _reset[] = {
      0x55, 0xC8, 0x59, /* SYSRST */
      0x55, 0xC8, 0x00, /* SYSRUN */
      0x55, 0xC3, 0x04  /* UPDIDIS */
    };
    return send_bytes(_reset, _leave ? 9 : 6);
     51e:	cf 91       	pop	r28
sys_reset():
     520:	c4 cf       	rjmp	.-120    	; 0x4aa <UPDI::send_bytes(unsigned char const*, unsigned int)>
set_nvmprog_key():
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:232
    D1PRINTF(" PROG_KEY\r\n");
    if (!send_bytes(nvmprog_key, sizeof(nvmprog_key))) return false;
    do { key_status(); } while(bit_is_clear(RXDATA, 4));  /* wait set NVMPROG */
    D1PRINTF(" KEY=%02X\r\n", RXDATA);
    return _reset ? sys_reset(false) : true;
  }
     522:	8c 2f       	mov	r24, r28
     524:	df 91       	pop	r29
     526:	cf 91       	pop	r28
     528:	08 95       	ret

0000052a <UPDI::recv_byte(unsigned long)>:
recv_byte():
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:109
  /* The acquired data is stored in RXDATA.    */
  bool recv_byte (uint32_t _dwAddr) {
    static uint8_t _set_ptr[] = {
      0x55, 0x08, 0, 0, 0, 0  /* LDS ADDR3 DATA1 */
    };
    _CAPS32(_set_ptr[2])->dword = _dwAddr;
     52a:	60 93 03 60 	sts	0x6003, r22	; 0x806003 <UPDI::recv_byte(unsigned long)::_set_ptr+0x2>
     52e:	70 93 04 60 	sts	0x6004, r23	; 0x806004 <UPDI::recv_byte(unsigned long)::_set_ptr+0x3>
     532:	80 93 05 60 	sts	0x6005, r24	; 0x806005 <UPDI::recv_byte(unsigned long)::_set_ptr+0x4>
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:110
    return send_bytes(_set_ptr, 5) && recv();
     536:	90 93 06 60 	sts	0x6006, r25	; 0x806006 <UPDI::recv_byte(unsigned long)::_set_ptr+0x5>
     53a:	65 e0       	ldi	r22, 0x05	; 5
     53c:	70 e0       	ldi	r23, 0x00	; 0
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e6       	ldi	r25, 0x60	; 96
     542:	b3 df       	rcall	.-154    	; 0x4aa <UPDI::send_bytes(unsigned char const*, unsigned int)>
     544:	81 11       	cpse	r24, r1
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:111
  }
     546:	6e cf       	rjmp	.-292    	; 0x424 <UPDI::recv()>
     548:	80 e0       	ldi	r24, 0x00	; 0
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:87
    } while (--_len);
    return true;
  }

  bool is_ack (void) {
    return recv() && 0x40 == RXDATA;
     54a:	08 95       	ret

0000054c <UPDI::is_ack()>:
is_ack():
     54c:	6b df       	rcall	.-298    	; 0x424 <UPDI::recv()>
     54e:	88 23       	and	r24, r24
     550:	29 f0       	breq	.+10     	; 0x55c <UPDI::is_ack()+0x10>
     552:	9f b3       	in	r25, 0x1f	; 31
     554:	81 e0       	ldi	r24, 0x01	; 1
     556:	90 34       	cpi	r25, 0x40	; 64
     558:	09 f0       	breq	.+2      	; 0x55c <UPDI::is_ack()+0x10>
     55a:	80 e0       	ldi	r24, 0x00	; 0
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:88
  }
     55c:	08 95       	ret

0000055e <UPDI::send_words_block(unsigned long, unsigned int)>:
send_words_block():
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:186
      && send_bytes(_set_repeat, sizeof(_set_repeat))
      && send_bytes(&packet.out.memData[0], _wLength)
      && clear_rsd();
  }

  bool send_words_block (uint32_t _dwAddr, size_t _wLength) {
     55e:	cf 93       	push	r28
     560:	df 93       	push	r29
     562:	ea 01       	movw	r28, r20
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:189
    /* This function works in word units up to 256 words, */
    /* and will round down any fractional words.          */
    _CAPS32(_set_ptr24[2])->dword = _dwAddr;
     564:	60 93 14 60 	sts	0x6014, r22	; 0x806014 <UPDI::_set_ptr24+0x2>
     568:	70 93 15 60 	sts	0x6015, r23	; 0x806015 <UPDI::_set_ptr24+0x3>
     56c:	80 93 16 60 	sts	0x6016, r24	; 0x806016 <UPDI::_set_ptr24+0x4>
     570:	90 93 17 60 	sts	0x6017, r25	; 0x806017 <UPDI::_set_ptr24+0x5>
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:190
    _set_repeat[2] = (_wLength >> 1) - 1;
     574:	ca 01       	movw	r24, r20
     576:	96 95       	lsr	r25
     578:	87 95       	ror	r24
     57a:	81 50       	subi	r24, 0x01	; 1
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:191
    _set_repeat[4] = 0x65;  /* ST PTR++ DATA2 */
     57c:	80 93 0f 60 	sts	0x600F, r24	; 0x80600f <UPDI::_set_repeat+0x2>
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:192
    return send_bytes(_set_ptr24, 5)
     580:	85 e6       	ldi	r24, 0x65	; 101
     582:	80 93 11 60 	sts	0x6011, r24	; 0x806011 <UPDI::_set_repeat+0x4>
     586:	65 e0       	ldi	r22, 0x05	; 5
     588:	70 e0       	ldi	r23, 0x00	; 0
     58a:	82 e1       	ldi	r24, 0x12	; 18
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:197
      && is_ack()
      && set_rsd()
      && send_bytes(_set_repeat, sizeof(_set_repeat))
      && send_bytes(&packet.out.memData[0], _wLength & ~1)
      && clear_rsd();
     58c:	90 e6       	ldi	r25, 0x60	; 96
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:193
    /* and will round down any fractional words.          */
    _CAPS32(_set_ptr24[2])->dword = _dwAddr;
    _set_repeat[2] = (_wLength >> 1) - 1;
    _set_repeat[4] = 0x65;  /* ST PTR++ DATA2 */
    return send_bytes(_set_ptr24, 5)
      && is_ack()
     58e:	8d df       	rcall	.-230    	; 0x4aa <UPDI::send_bytes(unsigned char const*, unsigned int)>
     590:	88 23       	and	r24, r24
     592:	f9 f0       	breq	.+62     	; 0x5d2 <UPDI::send_words_block(unsigned long, unsigned int)+0x74>
     594:	db df       	rcall	.-74     	; 0x54c <UPDI::is_ack()>
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:144
  #endif
  }

  bool set_rsd (void) {
    const static uint8_t _set_rsd[] = {0x55, 0xC2, 0x0D};
    return send_bytes(_set_rsd, 3);
     596:	88 23       	and	r24, r24
     598:	e1 f0       	breq	.+56     	; 0x5d2 <UPDI::send_words_block(unsigned long, unsigned int)+0x74>
set_rsd():
     59a:	63 e0       	ldi	r22, 0x03	; 3
     59c:	70 e0       	ldi	r23, 0x00	; 0
     59e:	89 e3       	ldi	r24, 0x39	; 57
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:194
    _CAPS32(_set_ptr24[2])->dword = _dwAddr;
    _set_repeat[2] = (_wLength >> 1) - 1;
    _set_repeat[4] = 0x65;  /* ST PTR++ DATA2 */
    return send_bytes(_set_ptr24, 5)
      && is_ack()
      && set_rsd()
     5a0:	90 e6       	ldi	r25, 0x60	; 96
     5a2:	83 df       	rcall	.-250    	; 0x4aa <UPDI::send_bytes(unsigned char const*, unsigned int)>
send_words_block():
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:195
      && send_bytes(_set_repeat, sizeof(_set_repeat))
     5a4:	88 23       	and	r24, r24
     5a6:	a9 f0       	breq	.+42     	; 0x5d2 <UPDI::send_words_block(unsigned long, unsigned int)+0x74>
     5a8:	65 e0       	ldi	r22, 0x05	; 5
     5aa:	70 e0       	ldi	r23, 0x00	; 0
     5ac:	8d e0       	ldi	r24, 0x0D	; 13
     5ae:	90 e6       	ldi	r25, 0x60	; 96
     5b0:	7c df       	rcall	.-264    	; 0x4aa <UPDI::send_bytes(unsigned char const*, unsigned int)>
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:196
      && send_bytes(&packet.out.memData[0], _wLength & ~1)
     5b2:	88 23       	and	r24, r24
     5b4:	71 f0       	breq	.+28     	; 0x5d2 <UPDI::send_words_block(unsigned long, unsigned int)+0x74>
     5b6:	be 01       	movw	r22, r28
     5b8:	6e 7f       	andi	r22, 0xFE	; 254
     5ba:	8f ec       	ldi	r24, 0xCF	; 207
     5bc:	90 e6       	ldi	r25, 0x60	; 96
     5be:	75 df       	rcall	.-278    	; 0x4aa <UPDI::send_bytes(unsigned char const*, unsigned int)>
     5c0:	88 23       	and	r24, r24
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:149
    return send_bytes(_set_rsd, 3);
  }

  bool clear_rsd (void) {
    const static uint8_t _clear_rsd[] = {0x55, 0xC2, 0x05};
    return send_bytes(_clear_rsd, 3);
     5c2:	39 f0       	breq	.+14     	; 0x5d2 <UPDI::send_words_block(unsigned long, unsigned int)+0x74>
clear_rsd():
     5c4:	63 e0       	ldi	r22, 0x03	; 3
     5c6:	70 e0       	ldi	r23, 0x00	; 0
     5c8:	8c e3       	ldi	r24, 0x3C	; 60
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:198
      && is_ack()
      && set_rsd()
      && send_bytes(_set_repeat, sizeof(_set_repeat))
      && send_bytes(&packet.out.memData[0], _wLength & ~1)
      && clear_rsd();
  }
     5ca:	90 e6       	ldi	r25, 0x60	; 96
send_words_block():
     5cc:	df 91       	pop	r29
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:149
    return send_bytes(_set_rsd, 3);
  }

  bool clear_rsd (void) {
    const static uint8_t _clear_rsd[] = {0x55, 0xC2, 0x05};
    return send_bytes(_clear_rsd, 3);
     5ce:	cf 91       	pop	r28
clear_rsd():
     5d0:	6c cf       	rjmp	.-296    	; 0x4aa <UPDI::send_bytes(unsigned char const*, unsigned int)>
send_words_block():
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:198
      && is_ack()
      && set_rsd()
      && send_bytes(_set_repeat, sizeof(_set_repeat))
      && send_bytes(&packet.out.memData[0], _wLength & ~1)
      && clear_rsd();
  }
     5d2:	80 e0       	ldi	r24, 0x00	; 0
     5d4:	df 91       	pop	r29
     5d6:	cf 91       	pop	r28
     5d8:	08 95       	ret

000005da <UPDI::write_userrow()>:
write_userrow():
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:276
  /*
   * Use the UPDI ACC to write to the USERROW of the locked chip.
   * The write start address should match the USERROW address.
   * The write length should match the USERROW field.
   */
  bool write_userrow (void) {
     5da:	cf 92       	push	r12
     5dc:	df 92       	push	r13
     5de:	ef 92       	push	r14
     5e0:	ff 92       	push	r15
     5e2:	0f 93       	push	r16
     5e4:	1f 93       	push	r17
     5e6:	cf 93       	push	r28
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:285
    uint32_t _dwAddr = packet.out.dwAddr;
    size_t  _wLength = packet.out.dwLength;
    if (bit_is_clear(PGCONF, PGCONF_UPDI_bp)
     || m_type != 0xC5 
     || _wLength != Device_Descriptor.UPDI.user_sig_bytes
     || (uint16_t)_dwAddr != Device_Descriptor.UPDI.user_sig_base) return false;
     5e8:	e8 99       	sbic	0x1d, 0	; 29
     5ea:	0a c0       	rjmp	.+20     	; 0x600 <UPDI::write_userrow()+0x26>
     5ec:	c0 e0       	ldi	r28, 0x00	; 0
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:301
      do { sys_status(); } while(bit_is_clear(RXDATA, 3));  /* wait set PROGSTART */
      D1PRINTF(" RE_PROGSTART=%02X\r\n", RXDATA);
      return true;
    }
    else return sys_reset(false);
  }
     5ee:	8c 2f       	mov	r24, r28
     5f0:	cf 91       	pop	r28
     5f2:	1f 91       	pop	r17
     5f4:	0f 91       	pop	r16
     5f6:	ff 90       	pop	r15
     5f8:	ef 90       	pop	r14
     5fa:	df 90       	pop	r13
     5fc:	cf 90       	pop	r12
     5fe:	08 95       	ret
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:283
    const static uint8_t _urowstop[] = { 0x55, 0xC7, 0x20 };  /* ASI_KEY_STATUS <= UROWWR */
    uint8_t   m_type = packet.out.bMType;
    uint32_t _dwAddr = packet.out.dwAddr;
    size_t  _wLength = packet.out.dwLength;
    if (bit_is_clear(PGCONF, PGCONF_UPDI_bp)
     || m_type != 0xC5 
     600:	80 91 c5 60 	lds	r24, 0x60C5	; 0x8060c5 <packet+0x7>
     604:	85 3c       	cpi	r24, 0xC5	; 197
     606:	91 f7       	brne	.-28     	; 0x5ec <UPDI::write_userrow()+0x12>
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:284
     || _wLength != Device_Descriptor.UPDI.user_sig_bytes
     608:	00 91 a6 60 	lds	r16, 0x60A6	; 0x8060a6 <Device_Descriptor+0x18>
     60c:	10 91 a7 60 	lds	r17, 0x60A7	; 0x8060a7 <Device_Descriptor+0x19>
     610:	80 91 ca 60 	lds	r24, 0x60CA	; 0x8060ca <packet+0xc>
     614:	90 91 cb 60 	lds	r25, 0x60CB	; 0x8060cb <packet+0xd>
     618:	08 17       	cp	r16, r24
     61a:	19 07       	cpc	r17, r25
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:280
   */
  bool write_userrow (void) {
    const static uint8_t _urowdone[] = { 0x55, 0xCA, 0x03 };  /* ASI_SYS_CTRLA <= UROWDONE|CLKREQ */
    const static uint8_t _urowstop[] = { 0x55, 0xC7, 0x20 };  /* ASI_KEY_STATUS <= UROWWR */
    uint8_t   m_type = packet.out.bMType;
    uint32_t _dwAddr = packet.out.dwAddr;
     61c:	39 f7       	brne	.-50     	; 0x5ec <UPDI::write_userrow()+0x12>
     61e:	c0 90 c6 60 	lds	r12, 0x60C6	; 0x8060c6 <packet+0x8>
     622:	d0 90 c7 60 	lds	r13, 0x60C7	; 0x8060c7 <packet+0x9>
     626:	e0 90 c8 60 	lds	r14, 0x60C8	; 0x8060c8 <packet+0xa>
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:285
    size_t  _wLength = packet.out.dwLength;
    if (bit_is_clear(PGCONF, PGCONF_UPDI_bp)
     || m_type != 0xC5 
     || _wLength != Device_Descriptor.UPDI.user_sig_bytes
     || (uint16_t)_dwAddr != Device_Descriptor.UPDI.user_sig_base) return false;
     62a:	f0 90 c9 60 	lds	r15, 0x60C9	; 0x8060c9 <packet+0xb>
     62e:	80 91 b0 60 	lds	r24, 0x60B0	; 0x8060b0 <Device_Descriptor+0x22>
     632:	90 91 b1 60 	lds	r25, 0x60B1	; 0x8060b1 <Device_Descriptor+0x23>
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:286
    USART::drain();
     636:	8c 15       	cp	r24, r12
     638:	9d 05       	cpc	r25, r13
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:245
    return sys_reset(false);
  }

  bool set_urowwrite_key (void) {
    D1PRINTF(" UROW_KEY\r\n");
    if (!send_bytes(urowwrite_key, sizeof(urowwrite_key))) return false;
     63a:	c1 f6       	brne	.-80     	; 0x5ec <UPDI::write_userrow()+0x12>
     63c:	90 e0       	ldi	r25, 0x00	; 0
     63e:	80 e0       	ldi	r24, 0x00	; 0
     640:	bd de       	rcall	.-646    	; 0x3bc <USART::drain(unsigned int)>
set_urowwrite_key():
     642:	6a e0       	ldi	r22, 0x0A	; 10
     644:	70 e0       	ldi	r23, 0x00	; 0
     646:	87 e5       	ldi	r24, 0x57	; 87
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:246
    do { key_status(); } while(bit_is_clear(RXDATA, 5));  /* wait set UROWWRITE */
     648:	90 e6       	ldi	r25, 0x60	; 96
     64a:	2f df       	rcall	.-418    	; 0x4aa <UPDI::send_bytes(unsigned char const*, unsigned int)>
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:130
    const static uint8_t _reset[] = {
      0x55, 0xC8, 0x59, /* SYSRST */
      0x55, 0xC8, 0x00, /* SYSRUN */
      0x55, 0xC3, 0x04  /* UPDIDIS */
    };
    return send_bytes(_reset, _leave ? 9 : 6);
     64c:	88 23       	and	r24, r24
     64e:	71 f2       	breq	.-100    	; 0x5ec <UPDI::write_userrow()+0x12>
     650:	48 df       	rcall	.-368    	; 0x4e2 <UPDI::key_status()>
     652:	fd 9b       	sbis	0x1f, 5	; 31
     654:	fd cf       	rjmp	.-6      	; 0x650 <UPDI::write_userrow()+0x76>
sys_reset():
     656:	66 e0       	ldi	r22, 0x06	; 6
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:288
     || m_type != 0xC5 
     || _wLength != Device_Descriptor.UPDI.user_sig_bytes
     || (uint16_t)_dwAddr != Device_Descriptor.UPDI.user_sig_base) return false;
    USART::drain();
    D1PRINTF(" ENTER_UROW=%04lX:%04X\r\n", _dwAddr, _wLength);
    if (!set_urowwrite_key()) return false;
     658:	70 e0       	ldi	r23, 0x00	; 0
     65a:	82 e7       	ldi	r24, 0x72	; 114
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:289
    do { sys_status(); } while(bit_is_clear(RXDATA, 2));    /* wait set UROWPROG */
     65c:	90 e6       	ldi	r25, 0x60	; 96
     65e:	25 df       	rcall	.-438    	; 0x4aa <UPDI::send_bytes(unsigned char const*, unsigned int)>
     660:	c8 2f       	mov	r28, r24
write_userrow():
     662:	88 23       	and	r24, r24
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:290
    send_words_block(_dwAddr, _wLength);
     664:	09 f4       	brne	.+2      	; 0x668 <UPDI::write_userrow()+0x8e>
     666:	c2 cf       	rjmp	.-124    	; 0x5ec <UPDI::write_userrow()+0x12>
     668:	33 df       	rcall	.-410    	; 0x4d0 <UPDI::sys_status()>
     66a:	fa 9b       	sbis	0x1f, 2	; 31
     66c:	fd cf       	rjmp	.-6      	; 0x668 <UPDI::write_userrow()+0x8e>
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:291
    send_bytes(_urowdone, 3);
     66e:	a8 01       	movw	r20, r16
     670:	c7 01       	movw	r24, r14
     672:	b6 01       	movw	r22, r12
     674:	74 df       	rcall	.-280    	; 0x55e <UPDI::send_words_block(unsigned long, unsigned int)>
     676:	63 e0       	ldi	r22, 0x03	; 3
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:292
    do { sys_status(); } while(bit_is_set(RXDATA, 2));      /* wait clear UROWPROG */
     678:	70 e0       	ldi	r23, 0x00	; 0
     67a:	84 e6       	ldi	r24, 0x64	; 100
     67c:	90 e6       	ldi	r25, 0x60	; 96
     67e:	15 df       	rcall	.-470    	; 0x4aa <UPDI::send_bytes(unsigned char const*, unsigned int)>
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:293
    send_bytes(_urowstop, 3);
     680:	27 df       	rcall	.-434    	; 0x4d0 <UPDI::sys_status()>
     682:	fa 99       	sbic	0x1f, 2	; 31
     684:	fd cf       	rjmp	.-6      	; 0x680 <UPDI::write_userrow()+0xa6>
     686:	63 e0       	ldi	r22, 0x03	; 3
     688:	70 e0       	ldi	r23, 0x00	; 0
     68a:	81 e6       	ldi	r24, 0x61	; 97
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:294
    if (bit_is_set(PGCONF, PGCONF_PROG_bp)) {
     68c:	90 e6       	ldi	r25, 0x60	; 96
     68e:	0d df       	rcall	.-486    	; 0x4aa <UPDI::send_bytes(unsigned char const*, unsigned int)>
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:295
      set_nvmprog_key();
     690:	e9 9b       	sbis	0x1d, 1	; 29
     692:	06 c0       	rjmp	.+12     	; 0x6a0 <UPDI::write_userrow()+0xc6>
     694:	81 e0       	ldi	r24, 0x01	; 1
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:296
      do { sys_status(); } while(bit_is_clear(RXDATA, 3));  /* wait set PROGSTART */
     696:	2e df       	rcall	.-420    	; 0x4f4 <UPDI::set_nvmprog_key(bool)>
     698:	1b df       	rcall	.-458    	; 0x4d0 <UPDI::sys_status()>
     69a:	fb 9b       	sbis	0x1f, 3	; 31
     69c:	fd cf       	rjmp	.-6      	; 0x698 <UPDI::write_userrow()+0xbe>
     69e:	a7 cf       	rjmp	.-178    	; 0x5ee <UPDI::write_userrow()+0x14>
sys_reset():
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:130
    const static uint8_t _reset[] = {
      0x55, 0xC8, 0x59, /* SYSRST */
      0x55, 0xC8, 0x00, /* SYSRUN */
      0x55, 0xC3, 0x04  /* UPDIDIS */
    };
    return send_bytes(_reset, _leave ? 9 : 6);
     6a0:	66 e0       	ldi	r22, 0x06	; 6
     6a2:	70 e0       	ldi	r23, 0x00	; 0
     6a4:	82 e7       	ldi	r24, 0x72	; 114
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:301
      do { sys_status(); } while(bit_is_clear(RXDATA, 3));  /* wait set PROGSTART */
      D1PRINTF(" RE_PROGSTART=%02X\r\n", RXDATA);
      return true;
    }
    else return sys_reset(false);
  }
     6a6:	90 e6       	ldi	r25, 0x60	; 96
write_userrow():
     6a8:	cf 91       	pop	r28
     6aa:	1f 91       	pop	r17
     6ac:	0f 91       	pop	r16
     6ae:	ff 90       	pop	r15
     6b0:	ef 90       	pop	r14
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:130
    const static uint8_t _reset[] = {
      0x55, 0xC8, 0x59, /* SYSRST */
      0x55, 0xC8, 0x00, /* SYSRUN */
      0x55, 0xC3, 0x04  /* UPDIDIS */
    };
    return send_bytes(_reset, _leave ? 9 : 6);
     6b2:	df 90       	pop	r13
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:174
      && is_ack()
      && send_bytes(_set_repeat, sizeof(_set_repeat))
      && recv_bytes(&packet.in.data[0], _wLength & ~1);
  }

  bool send_bytes_block (uint32_t _dwAddr, size_t _wLength) {
     6b4:	cf 90       	pop	r12
sys_reset():
     6b6:	f9 ce       	rjmp	.-526    	; 0x4aa <UPDI::send_bytes(unsigned char const*, unsigned int)>

000006b8 <UPDI::send_bytes_block(unsigned long, unsigned int)>:
send_bytes_block():
     6b8:	cf 93       	push	r28
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:175
    _CAPS32(_set_ptr24[2])->dword = _dwAddr;
     6ba:	df 93       	push	r29
     6bc:	ea 01       	movw	r28, r20
     6be:	60 93 14 60 	sts	0x6014, r22	; 0x806014 <UPDI::_set_ptr24+0x2>
     6c2:	70 93 15 60 	sts	0x6015, r23	; 0x806015 <UPDI::_set_ptr24+0x3>
     6c6:	80 93 16 60 	sts	0x6016, r24	; 0x806016 <UPDI::_set_ptr24+0x4>
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:176
    _set_repeat[2] = _wLength - 1;
     6ca:	90 93 17 60 	sts	0x6017, r25	; 0x806017 <UPDI::_set_ptr24+0x5>
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:177
    _set_repeat[4] = 0x64;  /* ST PTR++ DATA1 */
     6ce:	8f ef       	ldi	r24, 0xFF	; 255
     6d0:	84 0f       	add	r24, r20
     6d2:	80 93 0f 60 	sts	0x600F, r24	; 0x80600f <UPDI::_set_repeat+0x2>
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:178
    return send_bytes(_set_ptr24, 5)
     6d6:	84 e6       	ldi	r24, 0x64	; 100
     6d8:	80 93 11 60 	sts	0x6011, r24	; 0x806011 <UPDI::_set_repeat+0x4>
     6dc:	65 e0       	ldi	r22, 0x05	; 5
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:183
      && is_ack()
      && set_rsd()
      && send_bytes(_set_repeat, sizeof(_set_repeat))
      && send_bytes(&packet.out.memData[0], _wLength)
      && clear_rsd();
     6de:	70 e0       	ldi	r23, 0x00	; 0
     6e0:	82 e1       	ldi	r24, 0x12	; 18
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:179
  bool send_bytes_block (uint32_t _dwAddr, size_t _wLength) {
    _CAPS32(_set_ptr24[2])->dword = _dwAddr;
    _set_repeat[2] = _wLength - 1;
    _set_repeat[4] = 0x64;  /* ST PTR++ DATA1 */
    return send_bytes(_set_ptr24, 5)
      && is_ack()
     6e2:	90 e6       	ldi	r25, 0x60	; 96
     6e4:	e2 de       	rcall	.-572    	; 0x4aa <UPDI::send_bytes(unsigned char const*, unsigned int)>
     6e6:	88 23       	and	r24, r24
     6e8:	f1 f0       	breq	.+60     	; 0x726 <UPDI::send_bytes_block(unsigned long, unsigned int)+0x6e>
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:144
  #endif
  }

  bool set_rsd (void) {
    const static uint8_t _set_rsd[] = {0x55, 0xC2, 0x0D};
    return send_bytes(_set_rsd, 3);
     6ea:	30 df       	rcall	.-416    	; 0x54c <UPDI::is_ack()>
     6ec:	88 23       	and	r24, r24
     6ee:	d9 f0       	breq	.+54     	; 0x726 <UPDI::send_bytes_block(unsigned long, unsigned int)+0x6e>
set_rsd():
     6f0:	63 e0       	ldi	r22, 0x03	; 3
     6f2:	70 e0       	ldi	r23, 0x00	; 0
     6f4:	89 e3       	ldi	r24, 0x39	; 57
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:180
    _CAPS32(_set_ptr24[2])->dword = _dwAddr;
    _set_repeat[2] = _wLength - 1;
    _set_repeat[4] = 0x64;  /* ST PTR++ DATA1 */
    return send_bytes(_set_ptr24, 5)
      && is_ack()
      && set_rsd()
     6f6:	90 e6       	ldi	r25, 0x60	; 96
     6f8:	d8 de       	rcall	.-592    	; 0x4aa <UPDI::send_bytes(unsigned char const*, unsigned int)>
send_bytes_block():
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:181
      && send_bytes(_set_repeat, sizeof(_set_repeat))
     6fa:	88 23       	and	r24, r24
     6fc:	a1 f0       	breq	.+40     	; 0x726 <UPDI::send_bytes_block(unsigned long, unsigned int)+0x6e>
     6fe:	65 e0       	ldi	r22, 0x05	; 5
     700:	70 e0       	ldi	r23, 0x00	; 0
     702:	8d e0       	ldi	r24, 0x0D	; 13
     704:	90 e6       	ldi	r25, 0x60	; 96
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:182
      && send_bytes(&packet.out.memData[0], _wLength)
     706:	d1 de       	rcall	.-606    	; 0x4aa <UPDI::send_bytes(unsigned char const*, unsigned int)>
     708:	88 23       	and	r24, r24
     70a:	69 f0       	breq	.+26     	; 0x726 <UPDI::send_bytes_block(unsigned long, unsigned int)+0x6e>
     70c:	be 01       	movw	r22, r28
     70e:	8f ec       	ldi	r24, 0xCF	; 207
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:149
    return send_bytes(_set_rsd, 3);
  }

  bool clear_rsd (void) {
    const static uint8_t _clear_rsd[] = {0x55, 0xC2, 0x05};
    return send_bytes(_clear_rsd, 3);
     710:	90 e6       	ldi	r25, 0x60	; 96
     712:	cb de       	rcall	.-618    	; 0x4aa <UPDI::send_bytes(unsigned char const*, unsigned int)>
     714:	88 23       	and	r24, r24
     716:	39 f0       	breq	.+14     	; 0x726 <UPDI::send_bytes_block(unsigned long, unsigned int)+0x6e>
clear_rsd():
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:184
      && is_ack()
      && set_rsd()
      && send_bytes(_set_repeat, sizeof(_set_repeat))
      && send_bytes(&packet.out.memData[0], _wLength)
      && clear_rsd();
  }
     718:	63 e0       	ldi	r22, 0x03	; 3
     71a:	70 e0       	ldi	r23, 0x00	; 0
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:149
    return send_bytes(_set_rsd, 3);
  }

  bool clear_rsd (void) {
    const static uint8_t _clear_rsd[] = {0x55, 0xC2, 0x05};
    return send_bytes(_clear_rsd, 3);
     71c:	8c e3       	ldi	r24, 0x3C	; 60
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:184
      && is_ack()
      && set_rsd()
      && send_bytes(_set_repeat, sizeof(_set_repeat))
      && send_bytes(&packet.out.memData[0], _wLength)
      && clear_rsd();
  }
     71e:	90 e6       	ldi	r25, 0x60	; 96
send_bytes_block():
     720:	df 91       	pop	r29
     722:	cf 91       	pop	r28
clear_rsd():
     724:	c2 ce       	rjmp	.-636    	; 0x4aa <UPDI::send_bytes(unsigned char const*, unsigned int)>
send_bytes_block():
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:113
    };
    _CAPS32(_set_ptr[2])->dword = _dwAddr;
    return send_bytes(_set_ptr, 5) && recv();
  }

  bool send_byte (uint32_t _dwAddr, uint8_t _data) {
     726:	80 e0       	ldi	r24, 0x00	; 0
     728:	df 91       	pop	r29
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:117
    static uint8_t _set_ptr[] = {
      0x55, 0x48, 0, 0, 0, 0  /* STS ADDR3 DATA1 */
    };
    _CAPS32(_set_ptr[2])->dword = _dwAddr;
     72a:	cf 91       	pop	r28
     72c:	08 95       	ret

0000072e <UPDI::send_byte(unsigned long, unsigned char)>:
send_byte():
     72e:	cf 93       	push	r28
     730:	c4 2f       	mov	r28, r20
     732:	60 93 09 60 	sts	0x6009, r22	; 0x806009 <UPDI::send_byte(unsigned long, unsigned char)::_set_ptr+0x2>
     736:	70 93 0a 60 	sts	0x600A, r23	; 0x80600a <UPDI::send_byte(unsigned long, unsigned char)::_set_ptr+0x3>
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:118
    return send_bytes(_set_ptr, 5)
     73a:	80 93 0b 60 	sts	0x600B, r24	; 0x80600b <UPDI::send_byte(unsigned long, unsigned char)::_set_ptr+0x4>
     73e:	90 93 0c 60 	sts	0x600C, r25	; 0x80600c <UPDI::send_byte(unsigned long, unsigned char)::_set_ptr+0x5>
     742:	65 e0       	ldi	r22, 0x05	; 5
     744:	70 e0       	ldi	r23, 0x00	; 0
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:121
      && is_ack()
      && send(_data)
      && is_ack();
     746:	87 e0       	ldi	r24, 0x07	; 7
     748:	90 e6       	ldi	r25, 0x60	; 96
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:119
    static uint8_t _set_ptr[] = {
      0x55, 0x48, 0, 0, 0, 0  /* STS ADDR3 DATA1 */
    };
    _CAPS32(_set_ptr[2])->dword = _dwAddr;
    return send_bytes(_set_ptr, 5)
      && is_ack()
     74a:	af de       	rcall	.-674    	; 0x4aa <UPDI::send_bytes(unsigned char const*, unsigned int)>
     74c:	88 23       	and	r24, r24
     74e:	49 f0       	breq	.+18     	; 0x762 <UPDI::send_byte(unsigned long, unsigned char)+0x34>
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:120
      && send(_data)
     750:	fd de       	rcall	.-518    	; 0x54c <UPDI::is_ack()>
     752:	88 23       	and	r24, r24
     754:	31 f0       	breq	.+12     	; 0x762 <UPDI::send_byte(unsigned long, unsigned char)+0x34>
     756:	8c 2f       	mov	r24, r28
     758:	97 de       	rcall	.-722    	; 0x488 <UPDI::send(unsigned char)>
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:122
      && is_ack();
  }
     75a:	88 23       	and	r24, r24
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:121
    };
    _CAPS32(_set_ptr[2])->dword = _dwAddr;
    return send_bytes(_set_ptr, 5)
      && is_ack()
      && send(_data)
      && is_ack();
     75c:	11 f0       	breq	.+4      	; 0x762 <UPDI::send_byte(unsigned long, unsigned char)+0x34>
     75e:	cf 91       	pop	r28
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:122
  }
     760:	f5 ce       	rjmp	.-534    	; 0x54c <UPDI::is_ack()>
     762:	80 e0       	ldi	r24, 0x00	; 0
     764:	cf 91       	pop	r28
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:213
    /* This slow process is due to USERROW and BOOTROW. */
    return send_bytes_data(_dwAddr, &packet.out.memData[0], _wLength);
  }

  bool nvm_ctrl (uint8_t _nvmcmd) {
    return send_byte(0x1000, _nvmcmd);  /* NVMCTRL_CTRLA */
     766:	08 95       	ret

00000768 <UPDI::nvm_ctrl(unsigned char)>:
nvm_ctrl():
     768:	48 2f       	mov	r20, r24
     76a:	60 e0       	ldi	r22, 0x00	; 0
     76c:	70 e1       	ldi	r23, 0x10	; 16
     76e:	80 e0       	ldi	r24, 0x00	; 0
     770:	90 e0       	ldi	r25, 0x00	; 0
     772:	dd cf       	rjmp	.-70     	; 0x72e <UPDI::send_byte(unsigned long, unsigned char)>

00000774 <UPDI::send_bytes_block_slow(unsigned long, unsigned int)>:
send_bytes_block_slow():
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:207
      if (!send_byte(_dwAddr++, *_data++)) return false;
    }
    return true;
  }

  bool send_bytes_block_slow (uint32_t _dwAddr, size_t _wLength) {
     774:	cf 92       	push	r12
     776:	df 92       	push	r13
     778:	ef 92       	push	r14
     77a:	ff 92       	push	r15
     77c:	0f 93       	push	r16
     77e:	1f 93       	push	r17
     780:	cf 93       	push	r28
     782:	df 93       	push	r29
     784:	ce eb       	ldi	r28, 0xBE	; 190
     786:	d0 e6       	ldi	r29, 0x60	; 96
     788:	8a 01       	movw	r16, r20
     78a:	02 54       	subi	r16, 0x42	; 66
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:201
      && send_bytes(&packet.out.memData[0], _wLength & ~1)
      && clear_rsd();
  }

  bool send_bytes_data (uint32_t _dwAddr, uint8_t* _data, size_t _wLength) {
    for (size_t _i = 0; _i < _wLength; _i++) {
     78c:	1f 49       	sbci	r17, 0x9F	; 159
send_bytes_data():
     78e:	c0 17       	cp	r28, r16
     790:	d1 07       	cpc	r29, r17
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:202
      if (!send_byte(_dwAddr++, *_data++)) return false;
     792:	c1 f0       	breq	.+48     	; 0x7c4 <UPDI::send_bytes_block_slow(unsigned long, unsigned int)+0x50>
     794:	6b 01       	movw	r12, r22
     796:	7c 01       	movw	r14, r24
     798:	2f ef       	ldi	r18, 0xFF	; 255
     79a:	c2 1a       	sub	r12, r18
     79c:	d2 0a       	sbc	r13, r18
     79e:	e2 0a       	sbc	r14, r18
     7a0:	f2 0a       	sbc	r15, r18
     7a2:	49 89       	ldd	r20, Y+17	; 0x11
     7a4:	c4 df       	rcall	.-120    	; 0x72e <UPDI::send_byte(unsigned long, unsigned char)>
     7a6:	21 96       	adiw	r28, 0x01	; 1
     7a8:	81 11       	cpse	r24, r1
     7aa:	09 c0       	rjmp	.+18     	; 0x7be <UPDI::send_bytes_block_slow(unsigned long, unsigned int)+0x4a>
send_bytes_block_slow():
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:210
  }

  bool send_bytes_block_slow (uint32_t _dwAddr, size_t _wLength) {
    /* This slow process is due to USERROW and BOOTROW. */
    return send_bytes_data(_dwAddr, &packet.out.memData[0], _wLength);
  }
     7ac:	df 91       	pop	r29
     7ae:	cf 91       	pop	r28
     7b0:	1f 91       	pop	r17
     7b2:	0f 91       	pop	r16
     7b4:	ff 90       	pop	r15
     7b6:	ef 90       	pop	r14
     7b8:	df 90       	pop	r13
     7ba:	cf 90       	pop	r12
     7bc:	08 95       	ret
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:202
      && clear_rsd();
  }

  bool send_bytes_data (uint32_t _dwAddr, uint8_t* _data, size_t _wLength) {
    for (size_t _i = 0; _i < _wLength; _i++) {
      if (!send_byte(_dwAddr++, *_data++)) return false;
     7be:	c7 01       	movw	r24, r14
     7c0:	b6 01       	movw	r22, r12
     7c2:	e5 cf       	rjmp	.-54     	; 0x78e <UPDI::send_bytes_block_slow(unsigned long, unsigned int)+0x1a>
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:204
    }
    return true;
     7c4:	81 e0       	ldi	r24, 0x01	; 1
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:78
    RXSTAT = USART0_RXDATAH ^ 0x80;
    RXDATA = USART0_RXDATAL;
    return RXSTAT == 0 || send_break();
  }

  bool recv_bytes (uint8_t* _data, size_t _len) {
     7c6:	f2 cf       	rjmp	.-28     	; 0x7ac <UPDI::send_bytes_block_slow(unsigned long, unsigned int)+0x38>

000007c8 <UPDI::recv_bytes(unsigned char*, unsigned int)>:
recv_bytes():
     7c8:	0f 93       	push	r16
     7ca:	1f 93       	push	r17
     7cc:	cf 93       	push	r28
     7ce:	df 93       	push	r29
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:80
    do {
      if (!recv()) return false;
     7d0:	eb 01       	movw	r28, r22
     7d2:	8c 01       	movw	r16, r24
     7d4:	27 de       	rcall	.-946    	; 0x424 <UPDI::recv()>
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:81
      *_data++ = RXDATA;
     7d6:	88 23       	and	r24, r24
     7d8:	31 f0       	breq	.+12     	; 0x7e6 <UPDI::recv_bytes(unsigned char*, unsigned int)+0x1e>
     7da:	9f b3       	in	r25, 0x1f	; 31
     7dc:	f8 01       	movw	r30, r16
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:82
    } while (--_len);
     7de:	91 93       	st	Z+, r25
     7e0:	8f 01       	movw	r16, r30
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:84
    return true;
  }
     7e2:	21 97       	sbiw	r28, 0x01	; 1
     7e4:	b9 f7       	brne	.-18     	; 0x7d4 <UPDI::recv_bytes(unsigned char*, unsigned int)+0xc>
     7e6:	df 91       	pop	r29
     7e8:	cf 91       	pop	r28
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:162
      && is_ack()
      && send_bytes(_set_repeat, sizeof(_set_repeat))
      && recv_bytes(&packet.in.data[0], _wLength);
  }

  bool recv_words_block (uint32_t _dwAddr, size_t _wLength) {
     7ea:	1f 91       	pop	r17
     7ec:	0f 91       	pop	r16
     7ee:	08 95       	ret

000007f0 <UPDI::recv_words_block(unsigned long, unsigned int)>:
recv_words_block():
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:165
    /* This function works in word units up to 256 words, */
    /* and will round down any fractional words.          */
    _CAPS32(_set_ptr24[2])->dword = _dwAddr;
     7f0:	cf 93       	push	r28
     7f2:	df 93       	push	r29
     7f4:	ea 01       	movw	r28, r20
     7f6:	60 93 14 60 	sts	0x6014, r22	; 0x806014 <UPDI::_set_ptr24+0x2>
     7fa:	70 93 15 60 	sts	0x6015, r23	; 0x806015 <UPDI::_set_ptr24+0x3>
     7fe:	80 93 16 60 	sts	0x6016, r24	; 0x806016 <UPDI::_set_ptr24+0x4>
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:166
    _set_repeat[2] = (_wLength >> 1) - 1;
     802:	90 93 17 60 	sts	0x6017, r25	; 0x806017 <UPDI::_set_ptr24+0x5>
     806:	ca 01       	movw	r24, r20
     808:	96 95       	lsr	r25
     80a:	87 95       	ror	r24
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:167
    _set_repeat[4] = 0x25;  /* LD PTR++ DATA2 */
     80c:	81 50       	subi	r24, 0x01	; 1
     80e:	80 93 0f 60 	sts	0x600F, r24	; 0x80600f <UPDI::_set_repeat+0x2>
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:168
    return send_bytes(_set_ptr24, 5)
     812:	85 e2       	ldi	r24, 0x25	; 37
     814:	80 93 11 60 	sts	0x6011, r24	; 0x806011 <UPDI::_set_repeat+0x4>
     818:	65 e0       	ldi	r22, 0x05	; 5
     81a:	70 e0       	ldi	r23, 0x00	; 0
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:171
      && is_ack()
      && send_bytes(_set_repeat, sizeof(_set_repeat))
      && recv_bytes(&packet.in.data[0], _wLength & ~1);
     81c:	82 e1       	ldi	r24, 0x12	; 18
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:169
    /* and will round down any fractional words.          */
    _CAPS32(_set_ptr24[2])->dword = _dwAddr;
    _set_repeat[2] = (_wLength >> 1) - 1;
    _set_repeat[4] = 0x25;  /* LD PTR++ DATA2 */
    return send_bytes(_set_ptr24, 5)
      && is_ack()
     81e:	90 e6       	ldi	r25, 0x60	; 96
     820:	44 de       	rcall	.-888    	; 0x4aa <UPDI::send_bytes(unsigned char const*, unsigned int)>
     822:	88 23       	and	r24, r24
     824:	89 f0       	breq	.+34     	; 0x848 <UPDI::recv_words_block(unsigned long, unsigned int)+0x58>
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:170
      && send_bytes(_set_repeat, sizeof(_set_repeat))
     826:	92 de       	rcall	.-732    	; 0x54c <UPDI::is_ack()>
     828:	88 23       	and	r24, r24
     82a:	71 f0       	breq	.+28     	; 0x848 <UPDI::recv_words_block(unsigned long, unsigned int)+0x58>
     82c:	65 e0       	ldi	r22, 0x05	; 5
     82e:	70 e0       	ldi	r23, 0x00	; 0
     830:	8d e0       	ldi	r24, 0x0D	; 13
     832:	90 e6       	ldi	r25, 0x60	; 96
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:171
      && recv_bytes(&packet.in.data[0], _wLength & ~1);
     834:	3a de       	rcall	.-908    	; 0x4aa <UPDI::send_bytes(unsigned char const*, unsigned int)>
     836:	88 23       	and	r24, r24
     838:	39 f0       	breq	.+14     	; 0x848 <UPDI::recv_words_block(unsigned long, unsigned int)+0x58>
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:172
  }
     83a:	be 01       	movw	r22, r28
     83c:	6e 7f       	andi	r22, 0xFE	; 254
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:171
    _set_repeat[2] = (_wLength >> 1) - 1;
    _set_repeat[4] = 0x25;  /* LD PTR++ DATA2 */
    return send_bytes(_set_ptr24, 5)
      && is_ack()
      && send_bytes(_set_repeat, sizeof(_set_repeat))
      && recv_bytes(&packet.in.data[0], _wLength & ~1);
     83e:	85 ec       	ldi	r24, 0xC5	; 197
     840:	90 e6       	ldi	r25, 0x60	; 96
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:172
  }
     842:	df 91       	pop	r29
     844:	cf 91       	pop	r28
     846:	c0 cf       	rjmp	.-128    	; 0x7c8 <UPDI::recv_bytes(unsigned char*, unsigned int)>
     848:	80 e0       	ldi	r24, 0x00	; 0
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:152
  bool clear_rsd (void) {
    const static uint8_t _clear_rsd[] = {0x55, 0xC2, 0x05};
    return send_bytes(_clear_rsd, 3);
  }

  bool recv_bytes_block (uint32_t _dwAddr, size_t _wLength) {
     84a:	df 91       	pop	r29
     84c:	cf 91       	pop	r28
     84e:	08 95       	ret

00000850 <UPDI::recv_bytes_block(unsigned long, unsigned int)>:
recv_bytes_block():
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:153
    _CAPS32(_set_ptr24[2])->dword = _dwAddr;
     850:	cf 93       	push	r28
     852:	df 93       	push	r29
     854:	ea 01       	movw	r28, r20
     856:	60 93 14 60 	sts	0x6014, r22	; 0x806014 <UPDI::_set_ptr24+0x2>
     85a:	70 93 15 60 	sts	0x6015, r23	; 0x806015 <UPDI::_set_ptr24+0x3>
     85e:	80 93 16 60 	sts	0x6016, r24	; 0x806016 <UPDI::_set_ptr24+0x4>
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:154
    _set_repeat[2] = _wLength - 1;
     862:	90 93 17 60 	sts	0x6017, r25	; 0x806017 <UPDI::_set_ptr24+0x5>
     866:	8f ef       	ldi	r24, 0xFF	; 255
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:155
    _set_repeat[4] = 0x24;  /* LD PTR++ DATA1 */
     868:	84 0f       	add	r24, r20
     86a:	80 93 0f 60 	sts	0x600F, r24	; 0x80600f <UPDI::_set_repeat+0x2>
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:156
    return send_bytes(_set_ptr24, 5)
     86e:	84 e2       	ldi	r24, 0x24	; 36
     870:	80 93 11 60 	sts	0x6011, r24	; 0x806011 <UPDI::_set_repeat+0x4>
     874:	65 e0       	ldi	r22, 0x05	; 5
     876:	70 e0       	ldi	r23, 0x00	; 0
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:159
      && is_ack()
      && send_bytes(_set_repeat, sizeof(_set_repeat))
      && recv_bytes(&packet.in.data[0], _wLength);
     878:	82 e1       	ldi	r24, 0x12	; 18
     87a:	90 e6       	ldi	r25, 0x60	; 96
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:157
  bool recv_bytes_block (uint32_t _dwAddr, size_t _wLength) {
    _CAPS32(_set_ptr24[2])->dword = _dwAddr;
    _set_repeat[2] = _wLength - 1;
    _set_repeat[4] = 0x24;  /* LD PTR++ DATA1 */
    return send_bytes(_set_ptr24, 5)
      && is_ack()
     87c:	16 de       	rcall	.-980    	; 0x4aa <UPDI::send_bytes(unsigned char const*, unsigned int)>
     87e:	88 23       	and	r24, r24
     880:	81 f0       	breq	.+32     	; 0x8a2 <UPDI::recv_bytes_block(unsigned long, unsigned int)+0x52>
     882:	64 de       	rcall	.-824    	; 0x54c <UPDI::is_ack()>
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:158
      && send_bytes(_set_repeat, sizeof(_set_repeat))
     884:	88 23       	and	r24, r24
     886:	69 f0       	breq	.+26     	; 0x8a2 <UPDI::recv_bytes_block(unsigned long, unsigned int)+0x52>
     888:	65 e0       	ldi	r22, 0x05	; 5
     88a:	70 e0       	ldi	r23, 0x00	; 0
     88c:	8d e0       	ldi	r24, 0x0D	; 13
     88e:	90 e6       	ldi	r25, 0x60	; 96
     890:	0c de       	rcall	.-1000   	; 0x4aa <UPDI::send_bytes(unsigned char const*, unsigned int)>
     892:	88 23       	and	r24, r24
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:159
      && recv_bytes(&packet.in.data[0], _wLength);
     894:	31 f0       	breq	.+12     	; 0x8a2 <UPDI::recv_bytes_block(unsigned long, unsigned int)+0x52>
     896:	be 01       	movw	r22, r28
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:160
  }
     898:	85 ec       	ldi	r24, 0xC5	; 197
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:159
    _set_repeat[2] = _wLength - 1;
    _set_repeat[4] = 0x24;  /* LD PTR++ DATA1 */
    return send_bytes(_set_ptr24, 5)
      && is_ack()
      && send_bytes(_set_repeat, sizeof(_set_repeat))
      && recv_bytes(&packet.in.data[0], _wLength);
     89a:	90 e6       	ldi	r25, 0x60	; 96
     89c:	df 91       	pop	r29
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:160
  }
     89e:	cf 91       	pop	r28
     8a0:	93 cf       	rjmp	.-218    	; 0x7c8 <UPDI::recv_bytes(unsigned char*, unsigned int)>
     8a2:	80 e0       	ldi	r24, 0x00	; 0
     8a4:	df 91       	pop	r29
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv4.cpp:119

  size_t prog_init (void) {
    return nvm_ctrl_change(0x00);
  }

  size_t read_memory (void) {
     8a6:	cf 91       	pop	r28
     8a8:	08 95       	ret

000008aa <NVM::V4::read_memory()>:
read_memory():
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv4.cpp:123
    uint8_t   m_type = packet.out.bMType;
    uint32_t _dwAddr = packet.out.dwAddr;
    size_t  _wLength = packet.out.dwLength;
    if (bit_is_set(PGCONF, PGCONF_PROG_bp)) {
     8aa:	cf 93       	push	r28
     8ac:	df 93       	push	r29
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv4.cpp:136
        _dwAddr = PROD_SIG + ((uint8_t)_dwAddr & 0x7F);
      }
      if (UPDI::recv_bytes_block(_dwAddr, _wLength))
        return _wLength + 1;
    }
    return 0;
     8ae:	e9 99       	sbic	0x1d, 1	; 29
     8b0:	05 c0       	rjmp	.+10     	; 0x8bc <NVM::V4::read_memory()+0x12>
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv4.cpp:137
  }
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	80 e0       	ldi	r24, 0x00	; 0
     8b6:	df 91       	pop	r29
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv4.cpp:120
  size_t prog_init (void) {
    return nvm_ctrl_change(0x00);
  }

  size_t read_memory (void) {
    uint8_t   m_type = packet.out.bMType;
     8b8:	cf 91       	pop	r28
     8ba:	08 95       	ret
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv4.cpp:121
    uint32_t _dwAddr = packet.out.dwAddr;
     8bc:	20 91 c5 60 	lds	r18, 0x60C5	; 0x8060c5 <packet+0x7>
     8c0:	60 91 c6 60 	lds	r22, 0x60C6	; 0x8060c6 <packet+0x8>
     8c4:	70 91 c7 60 	lds	r23, 0x60C7	; 0x8060c7 <packet+0x9>
     8c8:	80 91 c8 60 	lds	r24, 0x60C8	; 0x8060c8 <packet+0xa>
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv4.cpp:122
    size_t  _wLength = packet.out.dwLength;
     8cc:	90 91 c9 60 	lds	r25, 0x60C9	; 0x8060c9 <packet+0xb>
     8d0:	c0 91 ca 60 	lds	r28, 0x60CA	; 0x8060ca <packet+0xc>
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv4.cpp:124
    if (bit_is_set(PGCONF, PGCONF_PROG_bp)) {
      if (m_type == 0xB0) {
     8d4:	d0 91 cb 60 	lds	r29, 0x60CB	; 0x8060cb <packet+0xd>
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv4.cpp:126
        /* MTYPE_FLASH_PAGE (PROGMEM) */
        _dwAddr += PROG_START;
     8d8:	20 3b       	cpi	r18, 0xB0	; 176
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv4.cpp:127
        return UPDI::recv_words_block(_dwAddr, _wLength) ? _wLength + 1 : 0;
     8da:	49 f4       	brne	.+18     	; 0x8ee <NVM::V4::read_memory()+0x44>
     8dc:	80 58       	subi	r24, 0x80	; 128
     8de:	9f 4f       	sbci	r25, 0xFF	; 255
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv4.cpp:133
      }
      if (m_type == 0xB4) {
        /* MTYPE_SIGN_JTAG */
        _dwAddr = PROD_SIG + ((uint8_t)_dwAddr & 0x7F);
      }
      if (UPDI::recv_bytes_block(_dwAddr, _wLength))
     8e0:	ae 01       	movw	r20, r28
     8e2:	86 df       	rcall	.-244    	; 0x7f0 <UPDI::recv_words_block(unsigned long, unsigned int)>
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv4.cpp:134
        return _wLength + 1;
     8e4:	88 23       	and	r24, r24
     8e6:	29 f3       	breq	.-54     	; 0x8b2 <NVM::V4::read_memory()+0x8>
     8e8:	ce 01       	movw	r24, r28
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv4.cpp:129
      if (m_type == 0xB0) {
        /* MTYPE_FLASH_PAGE (PROGMEM) */
        _dwAddr += PROG_START;
        return UPDI::recv_words_block(_dwAddr, _wLength) ? _wLength + 1 : 0;
      }
      if (m_type == 0xB4) {
     8ea:	01 96       	adiw	r24, 0x01	; 1
     8ec:	e4 cf       	rjmp	.-56     	; 0x8b6 <NVM::V4::read_memory()+0xc>
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv4.cpp:131
        /* MTYPE_SIGN_JTAG */
        _dwAddr = PROD_SIG + ((uint8_t)_dwAddr & 0x7F);
     8ee:	24 3b       	cpi	r18, 0xB4	; 180
     8f0:	41 f4       	brne	.+16     	; 0x902 <NVM::V4::read_memory()+0x58>
     8f2:	6f 77       	andi	r22, 0x7F	; 127
     8f4:	70 e0       	ldi	r23, 0x00	; 0
     8f6:	60 58       	subi	r22, 0x80	; 128
     8f8:	7f 4e       	sbci	r23, 0xEF	; 239
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv4.cpp:133
      }
      if (UPDI::recv_bytes_block(_dwAddr, _wLength))
     8fa:	07 2e       	mov	r0, r23
     8fc:	00 0c       	add	r0, r0
     8fe:	88 0b       	sbc	r24, r24
     900:	99 0b       	sbc	r25, r25
     902:	ae 01       	movw	r20, r28
     904:	a5 df       	rcall	.-182    	; 0x850 <UPDI::recv_bytes_block(unsigned long, unsigned int)>
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv2.cpp:116

  size_t prog_init (void) {
    return nvm_ctrl_change(0x00);
  }

  size_t read_memory (void) {
     906:	ee cf       	rjmp	.-36     	; 0x8e4 <NVM::V4::read_memory()+0x3a>

00000908 <NVM::V5::read_memory()>:
_ZN3NVM2V511read_memoryEv():
     908:	d0 cf       	rjmp	.-96     	; 0x8aa <NVM::V4::read_memory()>

0000090a <NVM::V2::read_memory()>:
read_memory():
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv2.cpp:120
    uint8_t   m_type = packet.out.bMType;
    uint32_t _dwAddr = packet.out.dwAddr;
    size_t  _wLength = packet.out.dwLength;
    if (bit_is_set(PGCONF, PGCONF_PROG_bp)) {
     90a:	cf 93       	push	r28
     90c:	df 93       	push	r29
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv2.cpp:133
        _dwAddr = PROD_SIG + ((uint8_t)_dwAddr & 0x7F);
      }
      if (UPDI::recv_bytes_block(_dwAddr, _wLength))
        return _wLength + 1;
    }
    return 0;
     90e:	e9 99       	sbic	0x1d, 1	; 29
     910:	05 c0       	rjmp	.+10     	; 0x91c <NVM::V2::read_memory()+0x12>
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv2.cpp:134
  }
     912:	90 e0       	ldi	r25, 0x00	; 0
     914:	80 e0       	ldi	r24, 0x00	; 0
     916:	df 91       	pop	r29
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv2.cpp:117
  size_t prog_init (void) {
    return nvm_ctrl_change(0x00);
  }

  size_t read_memory (void) {
    uint8_t   m_type = packet.out.bMType;
     918:	cf 91       	pop	r28
     91a:	08 95       	ret
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv2.cpp:118
    uint32_t _dwAddr = packet.out.dwAddr;
     91c:	20 91 c5 60 	lds	r18, 0x60C5	; 0x8060c5 <packet+0x7>
     920:	60 91 c6 60 	lds	r22, 0x60C6	; 0x8060c6 <packet+0x8>
     924:	70 91 c7 60 	lds	r23, 0x60C7	; 0x8060c7 <packet+0x9>
     928:	80 91 c8 60 	lds	r24, 0x60C8	; 0x8060c8 <packet+0xa>
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv2.cpp:119
    size_t  _wLength = packet.out.dwLength;
     92c:	90 91 c9 60 	lds	r25, 0x60C9	; 0x8060c9 <packet+0xb>
     930:	c0 91 ca 60 	lds	r28, 0x60CA	; 0x8060ca <packet+0xc>
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv2.cpp:121
    if (bit_is_set(PGCONF, PGCONF_PROG_bp)) {
      if (m_type == 0xB0) {
     934:	d0 91 cb 60 	lds	r29, 0x60CB	; 0x8060cb <packet+0xd>
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv2.cpp:123
        /* MTYPE_FLASH_PAGE (PROGMEM) */
        _dwAddr += PROG_START;
     938:	20 3b       	cpi	r18, 0xB0	; 176
     93a:	49 f4       	brne	.+18     	; 0x94e <NVM::V2::read_memory()+0x44>
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv2.cpp:124
        return UPDI::recv_words_block(_dwAddr, _wLength) ? _wLength + 1 : 0;
     93c:	80 58       	subi	r24, 0x80	; 128
     93e:	9f 4f       	sbci	r25, 0xFF	; 255
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv2.cpp:130
      }
      if (m_type == 0xB4) {
        /* MTYPE_SIGN_JTAG */
        _dwAddr = PROD_SIG + ((uint8_t)_dwAddr & 0x7F);
      }
      if (UPDI::recv_bytes_block(_dwAddr, _wLength))
     940:	ae 01       	movw	r20, r28
     942:	56 df       	rcall	.-340    	; 0x7f0 <UPDI::recv_words_block(unsigned long, unsigned int)>
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv2.cpp:131
        return _wLength + 1;
     944:	88 23       	and	r24, r24
     946:	29 f3       	breq	.-54     	; 0x912 <NVM::V2::read_memory()+0x8>
     948:	ce 01       	movw	r24, r28
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv2.cpp:126
      if (m_type == 0xB0) {
        /* MTYPE_FLASH_PAGE (PROGMEM) */
        _dwAddr += PROG_START;
        return UPDI::recv_words_block(_dwAddr, _wLength) ? _wLength + 1 : 0;
      }
      if (m_type == 0xB4) {
     94a:	01 96       	adiw	r24, 0x01	; 1
     94c:	e4 cf       	rjmp	.-56     	; 0x916 <NVM::V2::read_memory()+0xc>
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv2.cpp:128
        /* MTYPE_SIGN_JTAG */
        _dwAddr = PROD_SIG + ((uint8_t)_dwAddr & 0x7F);
     94e:	24 3b       	cpi	r18, 0xB4	; 180
     950:	39 f4       	brne	.+14     	; 0x960 <NVM::V2::read_memory()+0x56>
     952:	6f 77       	andi	r22, 0x7F	; 127
     954:	70 e0       	ldi	r23, 0x00	; 0
     956:	7f 5e       	subi	r23, 0xEF	; 239
     958:	07 2e       	mov	r0, r23
     95a:	00 0c       	add	r0, r0
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv2.cpp:130
      }
      if (UPDI::recv_bytes_block(_dwAddr, _wLength))
     95c:	88 0b       	sbc	r24, r24
     95e:	99 0b       	sbc	r25, r25
     960:	ae 01       	movw	r20, r28
     962:	76 df       	rcall	.-276    	; 0x850 <UPDI::recv_bytes_block(unsigned long, unsigned int)>
     964:	ef cf       	rjmp	.-34     	; 0x944 <NVM::V2::read_memory()+0x3a>

00000966 <NVM::V3::read_memory()>:
_ZN3NVM2V311read_memoryEv():
     966:	d1 cf       	rjmp	.-94     	; 0x90a <NVM::V2::read_memory()>

00000968 <NVM::V0::read_memory()>:
read_memory():
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv0.cpp:114
    UPDI::nvm_ctrl(0x04);         /* NVM_CMD_PBC */
    nvm_wait();
    return UPDI::nvm_ctrl(0x00);
  }

  size_t read_memory (void) {
     968:	cf 93       	push	r28
     96a:	df 93       	push	r29
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv0.cpp:115
    uint8_t  m_type = packet.out.bMType;
     96c:	80 91 c5 60 	lds	r24, 0x60C5	; 0x8060c5 <packet+0x7>
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv0.cpp:116
    uint16_t _wAddr = packet.out.dwAddr;
     970:	60 91 c6 60 	lds	r22, 0x60C6	; 0x8060c6 <packet+0x8>
     974:	30 91 c7 60 	lds	r19, 0x60C7	; 0x8060c7 <packet+0x9>
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv0.cpp:118
    size_t _wLength = packet.out.dwLength;
    if (m_type == 0xB4) {
     978:	84 3b       	cpi	r24, 0xB4	; 180
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv0.cpp:120
      /* MTYPE_SIGN_JTAG */
      _wAddr = PROD_SIG + ((uint8_t)_wAddr & 0x7F);
     97a:	51 f4       	brne	.+20     	; 0x990 <NVM::V0::read_memory()+0x28>
     97c:	6f 77       	andi	r22, 0x7F	; 127
     97e:	70 e0       	ldi	r23, 0x00	; 0
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv0.cpp:127
    else if (m_type == 0xB0) {
      /* MTYPE_FLASH_PAGE (PROGMEM) */
      _wAddr += Device_Descriptor.UPDI.prog_base;
    }
    if (bit_is_set(PGCONF, PGCONF_PROG_bp)
     && UPDI::recv_bytes_block(_wAddr, _wLength))
     980:	7f 5e       	subi	r23, 0xEF	; 239
     982:	e9 99       	sbic	0x1d, 1	; 29
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv0.cpp:129
      return _wLength + 1;
    return 0;
     984:	0f c0       	rjmp	.+30     	; 0x9a4 <NVM::V0::read_memory()+0x3c>
     986:	90 e0       	ldi	r25, 0x00	; 0
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv0.cpp:130
  }
     988:	80 e0       	ldi	r24, 0x00	; 0
     98a:	df 91       	pop	r29
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv0.cpp:116
    return UPDI::nvm_ctrl(0x00);
  }

  size_t read_memory (void) {
    uint8_t  m_type = packet.out.bMType;
    uint16_t _wAddr = packet.out.dwAddr;
     98c:	cf 91       	pop	r28
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv0.cpp:122
    size_t _wLength = packet.out.dwLength;
    if (m_type == 0xB4) {
      /* MTYPE_SIGN_JTAG */
      _wAddr = PROD_SIG + ((uint8_t)_wAddr & 0x7F);
    }
    else if (m_type == 0xB0) {
     98e:	08 95       	ret
     990:	73 2f       	mov	r23, r19
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv0.cpp:124
      /* MTYPE_FLASH_PAGE (PROGMEM) */
      _wAddr += Device_Descriptor.UPDI.prog_base;
     992:	80 3b       	cpi	r24, 0xB0	; 176
     994:	b1 f7       	brne	.-20     	; 0x982 <NVM::V0::read_memory()+0x1a>
     996:	80 91 8e 60 	lds	r24, 0x608E	; 0x80608e <Device_Descriptor>
     99a:	90 91 8f 60 	lds	r25, 0x608F	; 0x80608f <Device_Descriptor+0x1>
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv0.cpp:117
  }

  size_t read_memory (void) {
    uint8_t  m_type = packet.out.bMType;
    uint16_t _wAddr = packet.out.dwAddr;
    size_t _wLength = packet.out.dwLength;
     99e:	68 0f       	add	r22, r24
     9a0:	79 1f       	adc	r23, r25
     9a2:	ef cf       	rjmp	.-34     	; 0x982 <NVM::V0::read_memory()+0x1a>
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv0.cpp:127
    else if (m_type == 0xB0) {
      /* MTYPE_FLASH_PAGE (PROGMEM) */
      _wAddr += Device_Descriptor.UPDI.prog_base;
    }
    if (bit_is_set(PGCONF, PGCONF_PROG_bp)
     && UPDI::recv_bytes_block(_wAddr, _wLength))
     9a4:	c0 91 ca 60 	lds	r28, 0x60CA	; 0x8060ca <packet+0xc>
     9a8:	d0 91 cb 60 	lds	r29, 0x60CB	; 0x8060cb <packet+0xd>
     9ac:	90 e0       	ldi	r25, 0x00	; 0
     9ae:	80 e0       	ldi	r24, 0x00	; 0
     9b0:	ae 01       	movw	r20, r28
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv0.cpp:128
      return _wLength + 1;
     9b2:	4e df       	rcall	.-356    	; 0x850 <UPDI::recv_bytes_block(unsigned long, unsigned int)>
     9b4:	88 23       	and	r24, r24
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:50
      loop_until_bit_is_clear(TCLK_IN, TCLK_bp);
    }
  }

  bool recv (void) {
    loop_until_bit_is_set(USART0_STATUS, USART_RXCIF_bp);
     9b6:	39 f3       	breq	.-50     	; 0x986 <NVM::V0::read_memory()+0x1e>
     9b8:	ce 01       	movw	r24, r28
     9ba:	01 96       	adiw	r24, 0x01	; 1
     9bc:	e6 cf       	rjmp	.-52     	; 0x98a <NVM::V0::read_memory()+0x22>

000009be <TPI::recv()>:
recv():
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:51
    RXSTAT = USART0_RXDATAH ^ 0x80;
     9be:	80 91 04 08 	lds	r24, 0x0804	; 0x800804 <__TEXT_REGION_LENGTH__+0x7f0804>
     9c2:	87 ff       	sbrs	r24, 7
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:52
    RXDATA = USART0_RXDATAL;
     9c4:	fc cf       	rjmp	.-8      	; 0x9be <TPI::recv()>
     9c6:	80 91 01 08 	lds	r24, 0x0801	; 0x800801 <__TEXT_REGION_LENGTH__+0x7f0801>
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:53
    return RXSTAT == 0;
     9ca:	80 58       	subi	r24, 0x80	; 128
     9cc:	8e bb       	out	0x1e, r24	; 30
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:54
  }
     9ce:	80 91 00 08 	lds	r24, 0x0800	; 0x800800 <__TEXT_REGION_LENGTH__+0x7f0800>
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:56

  bool send (const uint8_t _data) {
     9d2:	8f bb       	out	0x1f, r24	; 31
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:57
    loop_until_bit_is_set(USART0_STATUS, USART_DREIF_bp);
     9d4:	9e b3       	in	r25, 0x1e	; 30
     9d6:	81 e0       	ldi	r24, 0x01	; 1
     9d8:	91 11       	cpse	r25, r1
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:58
    USART0_TXDATAL = _data;
     9da:	80 e0       	ldi	r24, 0x00	; 0
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:59
    return (recv() && _data == RXDATA);
     9dc:	08 95       	ret

000009de <TPI::send(unsigned char)>:
send():
     9de:	cf 93       	push	r28
     9e0:	c8 2f       	mov	r28, r24
     9e2:	80 91 04 08 	lds	r24, 0x0804	; 0x800804 <__TEXT_REGION_LENGTH__+0x7f0804>
     9e6:	85 ff       	sbrs	r24, 5
     9e8:	fc cf       	rjmp	.-8      	; 0x9e2 <TPI::send(unsigned char)+0x4>
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:60
  }
     9ea:	c0 93 02 08 	sts	0x0802, r28	; 0x800802 <__TEXT_REGION_LENGTH__+0x7f0802>
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:99
  bool nvm_wait (void) {
    while (get_sin(0x62) && RXDATA);  /* NVMCSR_REG: IO=0x32 */
    return true;
  }

  bool nvm_ctrl (const uint8_t _nvmcmd) {
     9ee:	e7 df       	rcall	.-50     	; 0x9be <TPI::recv()>
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:73
  bool set_sstcs (const uint8_t _addr, const uint8_t _data) {
    return (send(0xC0 | _addr) && send(_data));
  }

  bool set_sout (const uint8_t _addr, const uint8_t _data) {
    return (send(0x90 | _addr) && send(_data));
     9f0:	88 23       	and	r24, r24
     9f2:	21 f0       	breq	.+8      	; 0x9fc <TPI::send(unsigned char)+0x1e>
     9f4:	9f b3       	in	r25, 0x1f	; 31
     9f6:	81 e0       	ldi	r24, 0x01	; 1
     9f8:	9c 13       	cpse	r25, r28
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:69
  bool get_sldcs (const uint8_t _addr) {
    return (send(0x80 | _addr) && recv());
  }

  bool set_sstcs (const uint8_t _addr, const uint8_t _data) {
    return (send(0xC0 | _addr) && send(_data));
     9fa:	80 e0       	ldi	r24, 0x00	; 0
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:101
    return true;
  }

  bool nvm_ctrl (const uint8_t _nvmcmd) {
    return set_sout(0x63, _nvmcmd);   /* NVMCMD_REG: IO=0x33 */
  }
     9fc:	cf 91       	pop	r28
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:69
  bool get_sldcs (const uint8_t _addr) {
    return (send(0x80 | _addr) && recv());
  }

  bool set_sstcs (const uint8_t _addr, const uint8_t _data) {
    return (send(0xC0 | _addr) && send(_data));
     9fe:	08 95       	ret

00000a00 <TPI::nvm_ctrl(unsigned char)>:
nvm_ctrl():
     a00:	cf 93       	push	r28
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:101
    return true;
  }

  bool nvm_ctrl (const uint8_t _nvmcmd) {
    return set_sout(0x63, _nvmcmd);   /* NVMCMD_REG: IO=0x33 */
  }
     a02:	c8 2f       	mov	r28, r24
set_sout():
     a04:	83 ef       	ldi	r24, 0xF3	; 243
     a06:	eb df       	rcall	.-42     	; 0x9de <TPI::send(unsigned char)>
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:77
  bool set_sout (const uint8_t _addr, const uint8_t _data) {
    return (send(0x90 | _addr) && send(_data));
  }

  bool get_sin (const uint8_t _addr) {
    return (send(0x10 | _addr) && recv());
     a08:	88 23       	and	r24, r24
     a0a:	19 f0       	breq	.+6      	; 0xa12 <TPI::nvm_ctrl(unsigned char)+0x12>
     a0c:	8c 2f       	mov	r24, r28
nvm_ctrl():
     a0e:	cf 91       	pop	r28
set_sout():
     a10:	e6 cf       	rjmp	.-52     	; 0x9de <TPI::send(unsigned char)>
nvm_ctrl():
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:65
  }

  /*** TPI control and CSS area command ***/

  bool get_sldcs (const uint8_t _addr) {
    return (send(0x80 | _addr) && recv());
     a12:	80 e0       	ldi	r24, 0x00	; 0
     a14:	cf 91       	pop	r28
     a16:	08 95       	ret

00000a18 <TPI::nvm_wait()>:
get_sin():
     a18:	82 e7       	ldi	r24, 0x72	; 114
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:95
  }

  /*** NVM control ****/

  bool nvm_wait (void) {
    while (get_sin(0x62) && RXDATA);  /* NVMCSR_REG: IO=0x32 */
     a1a:	e1 df       	rcall	.-62     	; 0x9de <TPI::send(unsigned char)>
     a1c:	88 23       	and	r24, r24
     a1e:	31 f0       	breq	.+12     	; 0xa2c <TPI::nvm_wait()+0x14>
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:97
    return true;
  }
     a20:	ce df       	rcall	.-100    	; 0x9be <TPI::recv()>
     a22:	88 23       	and	r24, r24
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:88

  bool get_sld (void) {
    return (send(0x24) && recv());
  }

  bool set_sst (const uint8_t _data) {
     a24:	19 f0       	breq	.+6      	; 0xa2c <TPI::nvm_wait()+0x14>
nvm_wait():
     a26:	8f b3       	in	r24, 0x1f	; 31
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:89
    return (send(0x64) && send(_data));
     a28:	81 11       	cpse	r24, r1
     a2a:	f6 cf       	rjmp	.-20     	; 0xa18 <TPI::nvm_wait()>
     a2c:	81 e0       	ldi	r24, 0x01	; 1
     a2e:	08 95       	ret

00000a30 <TPI::set_sst(unsigned char)>:
set_sst():
     a30:	cf 93       	push	r28
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:69
  bool get_sldcs (const uint8_t _addr) {
    return (send(0x80 | _addr) && recv());
  }

  bool set_sstcs (const uint8_t _addr, const uint8_t _data) {
    return (send(0xC0 | _addr) && send(_data));
     a32:	c8 2f       	mov	r28, r24
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:90
    return (send(0x24) && recv());
  }

  bool set_sst (const uint8_t _data) {
    return (send(0x64) && send(_data));
  }
     a34:	84 e6       	ldi	r24, 0x64	; 100
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:69
  bool get_sldcs (const uint8_t _addr) {
    return (send(0x80 | _addr) && recv());
  }

  bool set_sstcs (const uint8_t _addr, const uint8_t _data) {
    return (send(0xC0 | _addr) && send(_data));
     a36:	d3 df       	rcall	.-90     	; 0x9de <TPI::send(unsigned char)>
     a38:	88 23       	and	r24, r24
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:90
    return (send(0x24) && recv());
  }

  bool set_sst (const uint8_t _data) {
    return (send(0x64) && send(_data));
  }
     a3a:	19 f0       	breq	.+6      	; 0xa42 <TPI::set_sst(unsigned char)+0x12>
     a3c:	8c 2f       	mov	r24, r28
     a3e:	cf 91       	pop	r28
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:85
  bool set_sstpr (const uint16_t _addr) {
    return (send(0x68) && send(_addr & 0xFF) && send(0x69) && send(_addr >> 8));
  }

  bool get_sld (void) {
    return (send(0x24) && recv());
     a40:	ce cf       	rjmp	.-100    	; 0x9de <TPI::send(unsigned char)>
     a42:	80 e0       	ldi	r24, 0x00	; 0
     a44:	cf 91       	pop	r28
     a46:	08 95       	ret

00000a48 <TPI::get_sld()>:
get_sld():
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:65
  }

  /*** TPI control and CSS area command ***/

  bool get_sldcs (const uint8_t _addr) {
    return (send(0x80 | _addr) && recv());
     a48:	84 e2       	ldi	r24, 0x24	; 36
     a4a:	c9 df       	rcall	.-110    	; 0x9de <TPI::send(unsigned char)>
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:86
    return (send(0x68) && send(_addr & 0xFF) && send(0x69) && send(_addr >> 8));
  }

  bool get_sld (void) {
    return (send(0x24) && recv());
  }
     a4c:	81 11       	cpse	r24, r1
     a4e:	b7 cf       	rjmp	.-146    	; 0x9be <TPI::recv()>
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:80

  bool get_sin (const uint8_t _addr) {
    return (send(0x10 | _addr) && recv());
  }

  bool set_sstpr (const uint16_t _addr) {
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	08 95       	ret

00000a54 <TPI::set_sstpr(unsigned int)>:
set_sstpr():
     a54:	cf 93       	push	r28
     a56:	df 93       	push	r29
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:81
    return (send(0x68) && send(_addr & 0xFF) && send(0x69) && send(_addr >> 8));
     a58:	d8 2f       	mov	r29, r24
     a5a:	c9 2f       	mov	r28, r25
     a5c:	88 e6       	ldi	r24, 0x68	; 104
     a5e:	bf df       	rcall	.-130    	; 0x9de <TPI::send(unsigned char)>
     a60:	88 23       	and	r24, r24
     a62:	61 f0       	breq	.+24     	; 0xa7c <TPI::set_sstpr(unsigned int)+0x28>
     a64:	8d 2f       	mov	r24, r29
     a66:	bb df       	rcall	.-138    	; 0x9de <TPI::send(unsigned char)>
     a68:	88 23       	and	r24, r24
     a6a:	41 f0       	breq	.+16     	; 0xa7c <TPI::set_sstpr(unsigned int)+0x28>
     a6c:	89 e6       	ldi	r24, 0x69	; 105
     a6e:	b7 df       	rcall	.-146    	; 0x9de <TPI::send(unsigned char)>
     a70:	88 23       	and	r24, r24
     a72:	21 f0       	breq	.+8      	; 0xa7c <TPI::set_sstpr(unsigned int)+0x28>
     a74:	8c 2f       	mov	r24, r28
     a76:	df 91       	pop	r29
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:82
  }
     a78:	cf 91       	pop	r28
     a7a:	b1 cf       	rjmp	.-158    	; 0x9de <TPI::send(unsigned char)>
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:81
  bool get_sin (const uint8_t _addr) {
    return (send(0x10 | _addr) && recv());
  }

  bool set_sstpr (const uint16_t _addr) {
    return (send(0x68) && send(_addr & 0xFF) && send(0x69) && send(_addr >> 8));
     a7c:	80 e0       	ldi	r24, 0x00	; 0
     a7e:	df 91       	pop	r29
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:82
  }
     a80:	cf 91       	pop	r28
     a82:	08 95       	ret

00000a84 <TPI::idle_clock(unsigned int)>:
idle_clock():
     a84:	30 e0       	ldi	r19, 0x00	; 0
     a86:	20 e0       	ldi	r18, 0x00	; 0
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:43
  const static uint8_t nvmprog_key[] = {
    0xE0, 0xFF, 0x88, 0xD8, 0xCD, 0x45, 0xAB, 0x89, 0x12
  };

  void idle_clock (const size_t clock) {
    for (size_t i = 0; i < clock; i++) {
     a88:	40 91 08 04 	lds	r20, 0x0408	; 0x800408 <__TEXT_REGION_LENGTH__+0x7f0408>
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:44
      loop_until_bit_is_set(TCLK_IN, TCLK_bp);
     a8c:	42 ff       	sbrs	r20, 2
     a8e:	fc cf       	rjmp	.-8      	; 0xa88 <TPI::idle_clock(unsigned int)+0x4>
     a90:	40 91 08 04 	lds	r20, 0x0408	; 0x800408 <__TEXT_REGION_LENGTH__+0x7f0408>
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:45
      loop_until_bit_is_clear(TCLK_IN, TCLK_bp);
     a94:	42 fd       	sbrc	r20, 2
     a96:	fc cf       	rjmp	.-8      	; 0xa90 <TPI::idle_clock(unsigned int)+0xc>
     a98:	2f 5f       	subi	r18, 0xFF	; 255
     a9a:	3f 4f       	sbci	r19, 0xFF	; 255
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:43
  const static uint8_t nvmprog_key[] = {
    0xE0, 0xFF, 0x88, 0xD8, 0xCD, 0x45, 0xAB, 0x89, 0x12
  };

  void idle_clock (const size_t clock) {
    for (size_t i = 0; i < clock; i++) {
     a9c:	82 17       	cp	r24, r18
     a9e:	93 07       	cpc	r25, r19
     aa0:	99 f7       	brne	.-26     	; 0xa88 <TPI::idle_clock(unsigned int)+0x4>
     aa2:	08 95       	ret

00000aa4 <SYS::is_boundary_flash_page(unsigned long)>:
is_boundary_flash_page():
     aa4:	cf 92       	push	r12
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:47
      loop_until_bit_is_set(TCLK_IN, TCLK_bp);
      loop_until_bit_is_clear(TCLK_IN, TCLK_bp);
    }
  }
     aa6:	df 92       	push	r13
/Users/askn/Collaborator/UPDI4AVR-USB/src/sys.cpp:315
   * Flash memory boundary check
   *
   * True when a page area address different from the previous time is detected.
   * Indicates the need to erase a page in FLASH/USERROW/BOOTROW of the AVR-Dx series.
   */
  bool is_boundary_flash_page (uint32_t _dwAddr) {
     aa8:	ef 92       	push	r14
     aaa:	ff 92       	push	r15
     aac:	ab 01       	movw	r20, r22
     aae:	bc 01       	movw	r22, r24
     ab0:	80 91 bb 60 	lds	r24, 0x60BB	; 0x8060bb <Device_Descriptor+0x2d>
/Users/askn/Collaborator/UPDI4AVR-USB/src/sys.cpp:316
    uint32_t _mask = ~(((uint16_t)Device_Descriptor.UPDI.flash_page_size_msb << 8)
     ab4:	28 2f       	mov	r18, r24
     ab6:	30 e0       	ldi	r19, 0x00	; 0
     ab8:	32 2f       	mov	r19, r18
     aba:	22 27       	eor	r18, r18
     abc:	80 91 90 60 	lds	r24, 0x6090	; 0x806090 <Device_Descriptor+0x2>
/Users/askn/Collaborator/UPDI4AVR-USB/src/sys.cpp:317
                                + Device_Descriptor.UPDI.flash_page_size - 1);
     ac0:	82 0f       	add	r24, r18
     ac2:	93 2f       	mov	r25, r19
     ac4:	91 1d       	adc	r25, r1
     ac6:	91 95       	neg	r25
     ac8:	81 95       	neg	r24
/Users/askn/Collaborator/UPDI4AVR-USB/src/sys.cpp:316
   *
   * True when a page area address different from the previous time is detected.
   * Indicates the need to erase a page in FLASH/USERROW/BOOTROW of the AVR-Dx series.
   */
  bool is_boundary_flash_page (uint32_t _dwAddr) {
    uint32_t _mask = ~(((uint16_t)Device_Descriptor.UPDI.flash_page_size_msb << 8)
     aca:	91 09       	sbc	r25, r1
     acc:	b0 e0       	ldi	r27, 0x00	; 0
     ace:	a0 e0       	ldi	r26, 0x00	; 0
     ad0:	84 23       	and	r24, r20
     ad2:	95 23       	and	r25, r21
/Users/askn/Collaborator/UPDI4AVR-USB/src/sys.cpp:318
                                + Device_Descriptor.UPDI.flash_page_size - 1);
    uint32_t _after_page = _dwAddr & _mask;
     ad4:	a6 23       	and	r26, r22
     ad6:	b7 23       	and	r27, r23
     ad8:	21 e0       	ldi	r18, 0x01	; 1
     ada:	c0 90 da 62 	lds	r12, 0x62DA	; 0x8062da <_before_page>
/Users/askn/Collaborator/UPDI4AVR-USB/src/sys.cpp:319
    bool _result = _before_page != _after_page;
     ade:	d0 90 db 62 	lds	r13, 0x62DB	; 0x8062db <_before_page+0x1>
     ae2:	e0 90 dc 62 	lds	r14, 0x62DC	; 0x8062dc <_before_page+0x2>
     ae6:	f0 90 dd 62 	lds	r15, 0x62DD	; 0x8062dd <_before_page+0x3>
     aea:	c8 16       	cp	r12, r24
     aec:	d9 06       	cpc	r13, r25
     aee:	ea 06       	cpc	r14, r26
     af0:	fb 06       	cpc	r15, r27
     af2:	09 f4       	brne	.+2      	; 0xaf6 <SYS::is_boundary_flash_page(unsigned long)+0x52>
     af4:	20 e0       	ldi	r18, 0x00	; 0
     af6:	80 93 da 62 	sts	0x62DA, r24	; 0x8062da <_before_page>
/Users/askn/Collaborator/UPDI4AVR-USB/src/sys.cpp:320
    _before_page = _after_page;
     afa:	90 93 db 62 	sts	0x62DB, r25	; 0x8062db <_before_page+0x1>
     afe:	a0 93 dc 62 	sts	0x62DC, r26	; 0x8062dc <_before_page+0x2>
     b02:	b0 93 dd 62 	sts	0x62DD, r27	; 0x8062dd <_before_page+0x3>
     b06:	82 2f       	mov	r24, r18
     b08:	ff 90       	pop	r15
/Users/askn/Collaborator/UPDI4AVR-USB/src/sys.cpp:322
    return _result;
  }
     b0a:	ef 90       	pop	r14
     b0c:	df 90       	pop	r13
     b0e:	cf 90       	pop	r12
     b10:	08 95       	ret

00000b12 <SYS::LED_Flash()>:
LED_TCB1():
     b12:	80 91 7d 60 	lds	r24, 0x607D	; 0x80607d <_led_mode>
/Users/askn/Collaborator/UPDI4AVR-USB/src/sys.cpp:198
      _led_mode = 1;
    }
  }

  void LED_TCB1 (uint8_t _mode, uint16_t _ccmp) {
    if (_led_mode != _mode) {
     b16:	82 30       	cpi	r24, 0x02	; 2
     b18:	81 f0       	breq	.+32     	; 0xb3a <SYS::LED_Flash()+0x28>
     b1a:	10 92 00 0a 	sts	0x0A00, r1	; 0x800a00 <__TEXT_REGION_LENGTH__+0x7f0a00>
/Users/askn/Collaborator/UPDI4AVR-USB/src/sys.cpp:199
      TCA0_SPLIT_CTRLA = 0;
     b1e:	10 92 1a 0b 	sts	0x0B1A, r1	; 0x800b1a <__TEXT_REGION_LENGTH__+0x7f0b1a>
/Users/askn/Collaborator/UPDI4AVR-USB/src/sys.cpp:200
      TCB1_CNTL = 0;
     b22:	89 ea       	ldi	r24, 0xA9	; 169
     b24:	95 e0       	ldi	r25, 0x05	; 5
/Users/askn/Collaborator/UPDI4AVR-USB/src/sys.cpp:201
      TCB1_CCMP = _ccmp;
     b26:	80 93 1c 0b 	sts	0x0B1C, r24	; 0x800b1c <__TEXT_REGION_LENGTH__+0x7f0b1c>
     b2a:	90 93 1d 0b 	sts	0x0B1D, r25	; 0x800b1d <__TEXT_REGION_LENGTH__+0x7f0b1d>
     b2e:	8f e4       	ldi	r24, 0x4F	; 79
     b30:	80 93 10 0b 	sts	0x0B10, r24	; 0x800b10 <__TEXT_REGION_LENGTH__+0x7f0b10>
/Users/askn/Collaborator/UPDI4AVR-USB/src/sys.cpp:202
      TCB1_CTRLA = TCB_RUNSTDBY_bm | TCB_ENABLE_bm | TCB_CLKSEL_EVENT_gc;
     b34:	82 e0       	ldi	r24, 0x02	; 2
     b36:	80 93 7d 60 	sts	0x607D, r24	; 0x80607d <_led_mode>
LED_Flash():
/Users/askn/Collaborator/UPDI4AVR-USB/src/sys.cpp:203
      _led_mode = _mode;
     b3a:	08 95       	ret

00000b3c <SYS::LED_HeartBeat()>:
LED_HeartBeat():
     b3c:	80 91 7d 60 	lds	r24, 0x607D	; 0x80607d <_led_mode>
/Users/askn/Collaborator/UPDI4AVR-USB/src/sys.cpp:188
  * LED operation switching
  */

  /* Heartbeat (waiting) */
  void LED_HeartBeat (void) {
    if (_led_mode != 1) {
     b40:	81 30       	cpi	r24, 0x01	; 1
     b42:	89 f0       	breq	.+34     	; 0xb66 <SYS::LED_HeartBeat()+0x2a>
     b44:	8f e0       	ldi	r24, 0x0F	; 15
     b46:	80 93 00 0a 	sts	0x0A00, r24	; 0x800a00 <__TEXT_REGION_LENGTH__+0x7f0a00>
/Users/askn/Collaborator/UPDI4AVR-USB/src/sys.cpp:189
      TCA0_SPLIT_CTRLA = TCA_SPLIT_ENABLE_bm | TCA_SPLIT_CLKSEL_DIV1024_gc;
     b4a:	10 92 1a 0b 	sts	0x0B1A, r1	; 0x800b1a <__TEXT_REGION_LENGTH__+0x7f0b1a>
/Users/askn/Collaborator/UPDI4AVR-USB/src/sys.cpp:190
      TCB1_CNTL = 0;
     b4e:	84 ec       	ldi	r24, 0xC4	; 196
     b50:	92 e6       	ldi	r25, 0x62	; 98
/Users/askn/Collaborator/UPDI4AVR-USB/src/sys.cpp:191
      TCB1_CCMP = TCB1_HBEAT;
     b52:	80 93 1c 0b 	sts	0x0B1C, r24	; 0x800b1c <__TEXT_REGION_LENGTH__+0x7f0b1c>
     b56:	90 93 1d 0b 	sts	0x0B1D, r25	; 0x800b1d <__TEXT_REGION_LENGTH__+0x7f0b1d>
     b5a:	85 e4       	ldi	r24, 0x45	; 69
     b5c:	80 93 10 0b 	sts	0x0B10, r24	; 0x800b10 <__TEXT_REGION_LENGTH__+0x7f0b10>
/Users/askn/Collaborator/UPDI4AVR-USB/src/sys.cpp:192
      TCB1_CTRLA = TCB_RUNSTDBY_bm | TCB_ENABLE_bm | TCB_CLKSEL_TCA0_gc;
     b60:	81 e0       	ldi	r24, 0x01	; 1
     b62:	80 93 7d 60 	sts	0x607D, r24	; 0x80607d <_led_mode>
/Users/askn/Collaborator/UPDI4AVR-USB/src/sys.cpp:193
      _led_mode = 1;
     b66:	08 95       	ret

00000b68 <USART::change_vcp()>:
change_vcp():
     b68:	cf 92       	push	r12
/Users/askn/Collaborator/UPDI4AVR-USB/src/sys.cpp:195
    }
  }
     b6a:	df 92       	push	r13
/Users/askn/Collaborator/UPDI4AVR-USB/src/usart.cpp:115
    }
  }

  /*** Activates VCP operation. ***/
  /* Detailed parameters are specified in SET_LINE_ENCODING. */
  void change_vcp (void) {
     b6c:	ef 92       	push	r14
     b6e:	ff 92       	push	r15
     b70:	cf 93       	push	r28
     b72:	df 93       	push	r29
     b74:	00 d0       	rcall	.+0      	; 0xb76 <USART::change_vcp()+0xe>
     b76:	00 d0       	rcall	.+0      	; 0xb78 <USART::change_vcp()+0x10>
     b78:	cd b7       	in	r28, 0x3d	; 61
     b7a:	de b7       	in	r29, 0x3e	; 62
     b7c:	20 91 7e 60 	lds	r18, 0x607E	; 0x80607e <_set_line_encoding>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usart.cpp:121
  #ifdef CONFIG_VCP_TXD_ODM
    uint8_t _ctrlb = USART_RXEN_bm | USART_TXEN_bm | USART_ODME_bm;
  #else
    uint8_t _ctrlb = USART_RXEN_bm | USART_TXEN_bm;
  #endif
    uint32_t _baud = _set_line_encoding.dwDTERate;
     b80:	30 91 7f 60 	lds	r19, 0x607F	; 0x80607f <_set_line_encoding+0x1>
     b84:	40 91 80 60 	lds	r20, 0x6080	; 0x806080 <_set_line_encoding+0x2>
     b88:	50 91 81 60 	lds	r21, 0x6081	; 0x806081 <_set_line_encoding+0x3>
     b8c:	21 15       	cp	r18, r1
     b8e:	31 05       	cpc	r19, r1
/Users/askn/Collaborator/UPDI4AVR-USB/src/usart.cpp:123
    /* If the BAUD value is small, select double speed mode. */
    if (_baud) _baud = (((F_CPU * 8L) / _baud) + 1) >> 1;
     b90:	41 05       	cpc	r20, r1
     b92:	51 05       	cpc	r21, r1
     b94:	a1 f0       	breq	.+40     	; 0xbbe <USART::change_vcp()+0x56>
     b96:	60 e0       	ldi	r22, 0x00	; 0
     b98:	78 e6       	ldi	r23, 0x68	; 104
     b9a:	89 e8       	ldi	r24, 0x89	; 137
     b9c:	99 e0       	ldi	r25, 0x09	; 9
     b9e:	0e 94 78 15 	call	0x2af0	; 0x2af0 <__udivmodsi4>
     ba2:	2f 5f       	subi	r18, 0xFF	; 255
     ba4:	3f 4f       	sbci	r19, 0xFF	; 255
     ba6:	4f 4f       	sbci	r20, 0xFF	; 255
     ba8:	5f 4f       	sbci	r21, 0xFF	; 255
     baa:	56 95       	lsr	r21
     bac:	47 95       	ror	r20
     bae:	37 95       	ror	r19
     bb0:	27 95       	ror	r18
     bb2:	a8 ec       	ldi	r26, 0xC8	; 200
     bb4:	20 36       	cpi	r18, 0x60	; 96
/Users/askn/Collaborator/UPDI4AVR-USB/src/usart.cpp:117

  /*** Activates VCP operation. ***/
  /* Detailed parameters are specified in SET_LINE_ENCODING. */
  void change_vcp (void) {
  #ifdef CONFIG_VCP_TXD_ODM
    uint8_t _ctrlb = USART_RXEN_bm | USART_TXEN_bm | USART_ODME_bm;
     bb6:	31 05       	cpc	r19, r1
/Users/askn/Collaborator/UPDI4AVR-USB/src/usart.cpp:124
    uint8_t _ctrlb = USART_RXEN_bm | USART_TXEN_bm;
  #endif
    uint32_t _baud = _set_line_encoding.dwDTERate;
    /* If the BAUD value is small, select double speed mode. */
    if (_baud) _baud = (((F_CPU * 8L) / _baud) + 1) >> 1;
    if (_baud < 96) {
     bb8:	41 05       	cpc	r20, r1
     bba:	51 05       	cpc	r21, r1
     bbc:	28 f4       	brcc	.+10     	; 0xbc8 <USART::change_vcp()+0x60>
     bbe:	22 0f       	add	r18, r18
     bc0:	33 1f       	adc	r19, r19
/Users/askn/Collaborator/UPDI4AVR-USB/src/usart.cpp:125
      _baud <<= 1;
     bc2:	44 1f       	adc	r20, r20
     bc4:	55 1f       	adc	r21, r21
     bc6:	aa ec       	ldi	r26, 0xCA	; 202
/Users/askn/Collaborator/UPDI4AVR-USB/src/usart.cpp:126
      _ctrlb |= USART_RXMODE_CLK2X_gc;
     bc8:	69 01       	movw	r12, r18
/Users/askn/Collaborator/UPDI4AVR-USB/src/usart.cpp:129
    }
    D1PRINTF(" BAUD=%08lX:%02X\r\n", _baud, _ctrlb);
    if (_baud < 0x10000UL && _baud >= 64) {
     bca:	7a 01       	movw	r14, r20
     bcc:	80 e4       	ldi	r24, 0x40	; 64
     bce:	c8 1a       	sub	r12, r24
     bd0:	d1 08       	sbc	r13, r1
     bd2:	e1 08       	sbc	r14, r1
     bd4:	f1 08       	sbc	r15, r1
     bd6:	80 ec       	ldi	r24, 0xC0	; 192
     bd8:	c8 16       	cp	r12, r24
     bda:	8f ef       	ldi	r24, 0xFF	; 255
     bdc:	d8 06       	cpc	r13, r24
     bde:	e1 04       	cpc	r14, r1
     be0:	f1 04       	cpc	r15, r1
     be2:	d0 f5       	brcc	.+116    	; 0xc58 <USART::change_vcp()+0xf0>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usart.cpp:130
      uint8_t _bits = _set_line_encoding.bDataBits - 5;
     be4:	90 91 84 60 	lds	r25, 0x6084	; 0x806084 <_set_line_encoding+0x6>
     be8:	95 50       	subi	r25, 0x05	; 5
/Users/askn/Collaborator/UPDI4AVR-USB/src/usart.cpp:131
      uint8_t _ctrlc = (uint8_t[]){
     bea:	c0 90 2c 60 	lds	r12, 0x602C	; 0x80602c <SYS::_updi_bitmap+0x12>
     bee:	d0 90 2d 60 	lds	r13, 0x602D	; 0x80602d <SYS::_updi_bitmap+0x13>
     bf2:	e0 90 2e 60 	lds	r14, 0x602E	; 0x80602e <SYS::_updi_bitmap+0x14>
     bf6:	f0 90 2f 60 	lds	r15, 0x602F	; 0x80602f <SYS::_updi_bitmap+0x15>
     bfa:	c9 82       	std	Y+1, r12	; 0x01
     bfc:	da 82       	std	Y+2, r13	; 0x02
/Users/askn/Collaborator/UPDI4AVR-USB/src/usart.cpp:133
        USART_PMODE_DISABLED_gc, USART_PMODE_ODD_gc, USART_PMODE_EVEN_gc, USART_PMODE_DISABLED_gc
      }[_set_line_encoding.bParityType & 3]
     bfe:	eb 82       	std	Y+3, r14	; 0x03
     c00:	fc 82       	std	Y+4, r15	; 0x04
     c02:	e0 91 83 60 	lds	r30, 0x6083	; 0x806083 <_set_line_encoding+0x5>
     c06:	e3 70       	andi	r30, 0x03	; 3
     c08:	ec 0f       	add	r30, r28
/Users/askn/Collaborator/UPDI4AVR-USB/src/usart.cpp:134
      + _set_line_encoding.bCharFormat ? USART_SBMODE_2BIT_gc : USART_SBMODE_1BIT_gc;
     c0a:	fd 2f       	mov	r31, r29
     c0c:	f1 1d       	adc	r31, r1
     c0e:	61 81       	ldd	r22, Z+1	; 0x01
     c10:	80 91 82 60 	lds	r24, 0x6082	; 0x806082 <_set_line_encoding+0x4>
     c14:	68 0f       	add	r22, r24
     c16:	77 27       	eor	r23, r23
     c18:	77 1f       	adc	r23, r23
/Users/askn/Collaborator/UPDI4AVR-USB/src/usart.cpp:135
      if (_bits < 4) {
     c1a:	80 e0       	ldi	r24, 0x00	; 0
     c1c:	67 2b       	or	r22, r23
/Users/askn/Collaborator/UPDI4AVR-USB/src/usart.cpp:136
        _ctrlc += _bits; /* USART_CHSIZE_[5,6,7,8]BIT_gc */
     c1e:	09 f0       	breq	.+2      	; 0xc22 <USART::change_vcp()+0xba>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usart.cpp:151
      }
      else {
        _ctrlc += USART_CHSIZE_8BIT_gc;
        #endif
      }
      ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
     c20:	88 e0       	ldi	r24, 0x08	; 8
/Users/askn/Collaborator/UPDI4AVR-USB/src/usart.cpp:152
        PORTMUX_USARTROUTEA = PORTMUX_USART_VCP;
     c22:	94 30       	cpi	r25, 0x04	; 4
     c24:	28 f5       	brcc	.+74     	; 0xc70 <USART::change_vcp()+0x108>
     c26:	89 0f       	add	r24, r25
/Users/askn/Collaborator/UPDI4AVR-USB/src/usart.cpp:153
        USART0_STATUS = USART_DREIF_bm;
     c28:	9f b7       	in	r25, 0x3f	; 63
__iCliRetVal():
     c2a:	f8 94       	cli
change_vcp():
/Users/askn/Collaborator/UPDI4AVR-USB/src/usart.cpp:154
        USART0_BAUD = (uint16_t)_baud;
     c2c:	62 e1       	ldi	r22, 0x12	; 18
     c2e:	60 93 e2 05 	sts	0x05E2, r22	; 0x8005e2 <__TEXT_REGION_LENGTH__+0x7f05e2>
     c32:	60 e2       	ldi	r22, 0x20	; 32
/Users/askn/Collaborator/UPDI4AVR-USB/src/usart.cpp:155
        USART0_CTRLC = _ctrlc;
     c34:	60 93 04 08 	sts	0x0804, r22	; 0x800804 <__TEXT_REGION_LENGTH__+0x7f0804>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usart.cpp:156
        USART0_CTRLA = USART_RXCIF_bm;
     c38:	20 93 08 08 	sts	0x0808, r18	; 0x800808 <__TEXT_REGION_LENGTH__+0x7f0808>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usart.cpp:157
        USART0_CTRLB = _ctrlb;
     c3c:	30 93 09 08 	sts	0x0809, r19	; 0x800809 <__TEXT_REGION_LENGTH__+0x7f0809>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usart.cpp:158
        bit_set(GPCONF, GPCONF_VCP_bp);
     c40:	80 93 07 08 	sts	0x0807, r24	; 0x800807 <__TEXT_REGION_LENGTH__+0x7f0807>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usart.cpp:161
      }
      D1PRINTF(" UART=VCP\r\n");
      drain(32768);
     c44:	80 e8       	ldi	r24, 0x80	; 128
     c46:	80 93 05 08 	sts	0x0805, r24	; 0x800805 <__TEXT_REGION_LENGTH__+0x7f0805>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usart.cpp:167
    }
    else {
      /* If outside the supported range, the USART will remain in the BREAK state. */
      D1PRINTF(" UART=FAIL\r\n");
    }
    if (bit_is_set(GPCONF, GPCONF_USB_bp))
     c4a:	a0 93 06 08 	sts	0x0806, r26	; 0x800806 <__TEXT_REGION_LENGTH__+0x7f0806>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usart.cpp:171
      SYS::LED_HeartBeat();
    else
      SYS::LED_Flash();
  }
     c4e:	e1 9a       	sbi	0x1c, 1	; 28
__iRestore():
     c50:	9f bf       	out	0x3f, r25	; 63
change_vcp():
     c52:	80 e0       	ldi	r24, 0x00	; 0
     c54:	90 e8       	ldi	r25, 0x80	; 128
     c56:	b2 db       	rcall	.-2204   	; 0x3bc <USART::drain(unsigned int)>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usart.cpp:168
    else {
      /* If outside the supported range, the USART will remain in the BREAK state. */
      D1PRINTF(" UART=FAIL\r\n");
    }
    if (bit_is_set(GPCONF, GPCONF_USB_bp))
      SYS::LED_HeartBeat();
     c58:	e0 9b       	sbis	0x1c, 0	; 28
     c5a:	0c c0       	rjmp	.+24     	; 0xc74 <USART::change_vcp()+0x10c>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usart.cpp:148
        usart_receiver    = &USB::vcp_receiver_9bit;
        usart_transmitter = &USB::vcp_transceiver_9bit;
        #else
      }
      else {
        _ctrlc += USART_CHSIZE_8BIT_gc;
     c5c:	24 96       	adiw	r28, 0x04	; 4
/Users/askn/Collaborator/UPDI4AVR-USB/src/usart.cpp:171
    }
    if (bit_is_set(GPCONF, GPCONF_USB_bp))
      SYS::LED_HeartBeat();
    else
      SYS::LED_Flash();
  }
     c5e:	cd bf       	out	0x3d, r28	; 61
     c60:	de bf       	out	0x3e, r29	; 62
     c62:	df 91       	pop	r29
     c64:	cf 91       	pop	r28
     c66:	ff 90       	pop	r15
     c68:	ef 90       	pop	r14
     c6a:	df 90       	pop	r13
     c6c:	cf 90       	pop	r12
     c6e:	66 cf       	rjmp	.-308    	; 0xb3c <SYS::LED_HeartBeat()>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usart.cpp:170
      D1PRINTF(" UART=FAIL\r\n");
    }
    if (bit_is_set(GPCONF, GPCONF_USB_bp))
      SYS::LED_HeartBeat();
    else
      SYS::LED_Flash();
     c70:	8d 5f       	subi	r24, 0xFD	; 253
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:388
    bit_set(GPCONF, GPCONF_BRK_bp);
  }

  void break_off (void) {
    if (bit_is_set(GPCONF, GPCONF_VCP_bp)
     && bit_is_set(GPCONF, GPCONF_BRK_bp)) {
     c72:	da cf       	rjmp	.-76     	; 0xc28 <USART::change_vcp()+0xc0>
     c74:	24 96       	adiw	r28, 0x04	; 4
     c76:	cd bf       	out	0x3d, r28	; 61
     c78:	de bf       	out	0x3e, r29	; 62
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:389
      USART::change_vcp();
     c7a:	df 91       	pop	r29
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:390
      bit_set(GPCONF, GPCONF_OPN_bp);
     c7c:	cf 91       	pop	r28
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:392
    }
    bit_clear(GPCONF, GPCONF_BRK_bp);
     c7e:	ff 90       	pop	r15
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv3.cpp:55
  constexpr auto NVM_STATUS = 0x1006;
  constexpr auto PROD_SIG   = 0x1100;
  constexpr auto PROG_START = 0x800000;

  uint8_t nvm_wait (void) {
    do { UPDI::recv_byte(NVM_STATUS); } while (RXDATA & 3);
     c80:	ef 90       	pop	r14
     c82:	df 90       	pop	r13
     c84:	cf 90       	pop	r12
     c86:	45 cf       	rjmp	.-374    	; 0xb12 <SYS::LED_Flash()>

00000c88 <USB::break_off()>:
break_off():
     c88:	e1 9b       	sbis	0x1c, 1	; 28
     c8a:	04 c0       	rjmp	.+8      	; 0xc94 <USB::break_off()+0xc>
     c8c:	e3 9b       	sbis	0x1c, 3	; 28
     c8e:	02 c0       	rjmp	.+4      	; 0xc94 <USB::break_off()+0xc>
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv3.cpp:56
    return RXDATA;
     c90:	6b df       	rcall	.-298    	; 0xb68 <USART::change_vcp()>
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv3.cpp:57
  }
     c92:	e4 9a       	sbi	0x1c, 4	; 28
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv3.cpp:73
    D2PRINTF(" NVM_V3_FLPERW=%06lX\r\n", _dwAddr);
    return (
      nvm_ctrl_change(0x00)
      && UPDI::send_words_block(_dwAddr, _wLength)
      && nvm_ctrl_change(0x05)  /* NVM_V3_CMD_FLPERW */
      && (nvm_wait() & 0x73) == 0
     c94:	e3 98       	cbi	0x1c, 3	; 28
     c96:	08 95       	ret

00000c98 <NVM::V3::nvm_wait()>:
nvm_wait():
     c98:	66 e0       	ldi	r22, 0x06	; 6
     c9a:	70 e1       	ldi	r23, 0x10	; 16
     c9c:	80 e0       	ldi	r24, 0x00	; 0
     c9e:	90 e0       	ldi	r25, 0x00	; 0
     ca0:	44 dc       	rcall	.-1912   	; 0x52a <UPDI::recv_byte(unsigned long)>
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv3.cpp:75
    );
  }
     ca2:	8f b3       	in	r24, 0x1f	; 31
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv3.cpp:59
  uint8_t nvm_wait (void) {
    do { UPDI::recv_byte(NVM_STATUS); } while (RXDATA & 3);
    return RXDATA;
  }

  bool nvm_ctrl_change (uint8_t _nvmcmd) {
     ca4:	83 70       	andi	r24, 0x03	; 3
     ca6:	c1 f7       	brne	.-16     	; 0xc98 <NVM::V3::nvm_wait()>
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv3.cpp:60
    nvm_wait();
     ca8:	8f b3       	in	r24, 0x1f	; 31
     caa:	08 95       	ret

00000cac <NVM::V3::write_eeprom(unsigned long, unsigned int) [clone .part.3]>:
_ZN3NVM2V317write_words_flashEmj.part.1():
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv3.cpp:61
    if (UPDI::recv_byte(NVM_CTRL) && RXDATA == _nvmcmd) return true;
     cac:	f5 df       	rcall	.-22     	; 0xc98 <NVM::V3::nvm_wait()>
     cae:	98 2f       	mov	r25, r24
     cb0:	93 77       	andi	r25, 0x73	; 115
     cb2:	81 e0       	ldi	r24, 0x01	; 1
     cb4:	09 f0       	breq	.+2      	; 0xcb8 <NVM::V3::write_eeprom(unsigned long, unsigned int) [clone .part.3]+0xc>
     cb6:	80 e0       	ldi	r24, 0x00	; 0
     cb8:	08 95       	ret

00000cba <NVM::V3::nvm_ctrl_change(unsigned char)>:
nvm_ctrl_change():
     cba:	cf 93       	push	r28
     cbc:	c8 2f       	mov	r28, r24
     cbe:	ec df       	rcall	.-40     	; 0xc98 <NVM::V3::nvm_wait()>
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv3.cpp:65
    if (!UPDI::nvm_ctrl(0x00)) return false;
    if (0 != _nvmcmd) return UPDI::nvm_ctrl(_nvmcmd);
    return true;
  }
     cc0:	60 e0       	ldi	r22, 0x00	; 0
     cc2:	70 e1       	ldi	r23, 0x10	; 16
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv3.cpp:62
  }

  bool nvm_ctrl_change (uint8_t _nvmcmd) {
    nvm_wait();
    if (UPDI::recv_byte(NVM_CTRL) && RXDATA == _nvmcmd) return true;
    if (!UPDI::nvm_ctrl(0x00)) return false;
     cc4:	80 e0       	ldi	r24, 0x00	; 0
     cc6:	90 e0       	ldi	r25, 0x00	; 0
     cc8:	30 dc       	rcall	.-1952   	; 0x52a <UPDI::recv_byte(unsigned long)>
     cca:	88 23       	and	r24, r24
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv2.cpp:65

  bool nvm_ctrl_change (uint8_t _nvmcmd) {
    nvm_wait();
    if (UPDI::recv_byte(NVM_CTRL) && RXDATA == _nvmcmd) return true;
    if (!UPDI::nvm_ctrl(0x00)) return false;
    if (0 != _nvmcmd) return UPDI::nvm_ctrl(_nvmcmd);
     ccc:	31 f0       	breq	.+12     	; 0xcda <NVM::V3::nvm_ctrl_change(unsigned char)+0x20>
     cce:	8f b3       	in	r24, 0x1f	; 31
     cd0:	8c 13       	cpse	r24, r28
    if (0 != _nvmcmd) return UPDI::nvm_ctrl(_nvmcmd);
    return true;
  }
     cd2:	03 c0       	rjmp	.+6      	; 0xcda <NVM::V3::nvm_ctrl_change(unsigned char)+0x20>
     cd4:	81 e0       	ldi	r24, 0x01	; 1
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv4.cpp:116
      && nvm_ctrl_change(0x00)
    );
  }

  size_t prog_init (void) {
    return nvm_ctrl_change(0x00);
     cd6:	cf 91       	pop	r28
     cd8:	08 95       	ret
     cda:	80 e0       	ldi	r24, 0x00	; 0
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv4.cpp:117
  }
     cdc:	45 dd       	rcall	.-1398   	; 0x768 <UPDI::nvm_ctrl(unsigned char)>
     cde:	88 23       	and	r24, r24
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv4.cpp:78
    D2PRINTF(" NVM_V4_FLPER=%06lX\r\n", _dwAddr);
    return (
      nvm_ctrl_change(0x08)   /* NVM_V4_CMD_FLPER */
      && UPDI::send_byte(_dwAddr, 0xFF)
      && (nvm_wait() & 0x73) == 0
      && nvm_ctrl_change(0x00)
     ce0:	d1 f3       	breq	.-12     	; 0xcd6 <NVM::V3::nvm_ctrl_change(unsigned char)+0x1c>
     ce2:	cc 23       	and	r28, r28
     ce4:	b9 f3       	breq	.-18     	; 0xcd4 <NVM::V3::nvm_ctrl_change(unsigned char)+0x1a>
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv3.cpp:98
      && (nvm_wait() & 0x73) == 0
    );
  }

  size_t prog_init (void) {
    nvm_ctrl_change(0x0F);      /* NVM_V3_CMD_FLPBCLR */
     ce6:	8c 2f       	mov	r24, r28
     ce8:	cf 91       	pop	r28
     cea:	3e cd       	rjmp	.-1412   	; 0x768 <UPDI::nvm_ctrl(unsigned char)>

00000cec <NVM::V4::prog_init()>:
prog_init():
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv3.cpp:99
    nvm_ctrl_change(0x1F);      /* NVM_V3_CMD_EEPBCLR */
     cec:	80 e0       	ldi	r24, 0x00	; 0
     cee:	e5 df       	rcall	.-54     	; 0xcba <NVM::V3::nvm_ctrl_change(unsigned char)>
     cf0:	90 e0       	ldi	r25, 0x00	; 0
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv3.cpp:100
    return nvm_ctrl_change(0x00);
     cf2:	08 95       	ret

00000cf4 <NVM::V4::write_eeprom(unsigned long, unsigned int) [clone .part.5]>:
_ZN3NVM2V416erase_flash_pageEm.part.1():
     cf4:	80 e0       	ldi	r24, 0x00	; 0
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv3.cpp:101
  }
     cf6:	e1 cf       	rjmp	.-62     	; 0xcba <NVM::V3::nvm_ctrl_change(unsigned char)>

00000cf8 <NVM::V3::prog_init()>:
prog_init():
     cf8:	8f e0       	ldi	r24, 0x0F	; 15
     cfa:	df df       	rcall	.-66     	; 0xcba <NVM::V3::nvm_ctrl_change(unsigned char)>
     cfc:	8f e1       	ldi	r24, 0x1F	; 31
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv3.cpp:77
      && nvm_ctrl_change(0x05)  /* NVM_V3_CMD_FLPERW */
      && (nvm_wait() & 0x73) == 0
    );
  }

  bool write_bytes_flash (uint32_t _dwAddr, size_t _wLength) {
     cfe:	dd df       	rcall	.-70     	; 0xcba <NVM::V3::nvm_ctrl_change(unsigned char)>
     d00:	80 e0       	ldi	r24, 0x00	; 0
     d02:	db df       	rcall	.-74     	; 0xcba <NVM::V3::nvm_ctrl_change(unsigned char)>
     d04:	90 e0       	ldi	r25, 0x00	; 0
     d06:	08 95       	ret

00000d08 <NVM::V5::prog_init()>:
_ZN3NVM2V59prog_initEv():
     d08:	f7 cf       	rjmp	.-18     	; 0xcf8 <NVM::V3::prog_init()>

00000d0a <NVM::V3::write_bytes_flash(unsigned long, unsigned int)>:
write_bytes_flash():
     d0a:	cf 92       	push	r12
     d0c:	df 92       	push	r13
     d0e:	ef 92       	push	r14
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv3.cpp:80
    D2PRINTF(" NVM_V3_FLPERW=%06lX\r\n", _dwAddr);
    return (
      nvm_ctrl_change(0x00)
     d10:	ff 92       	push	r15
     d12:	cf 93       	push	r28
     d14:	df 93       	push	r29
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv3.cpp:83
      && UPDI::send_bytes_block(_dwAddr, _wLength)
      && nvm_ctrl_change(0x05)  /* NVM_V3_CMD_FLPERW */
      && (nvm_wait() & 0x73) == 0
     d16:	6b 01       	movw	r12, r22
     d18:	7c 01       	movw	r14, r24
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv3.cpp:81

  bool write_bytes_flash (uint32_t _dwAddr, size_t _wLength) {
    D2PRINTF(" NVM_V3_FLPERW=%06lX\r\n", _dwAddr);
    return (
      nvm_ctrl_change(0x00)
      && UPDI::send_bytes_block(_dwAddr, _wLength)
     d1a:	ea 01       	movw	r28, r20
     d1c:	80 e0       	ldi	r24, 0x00	; 0
     d1e:	cd df       	rcall	.-102    	; 0xcba <NVM::V3::nvm_ctrl_change(unsigned char)>
     d20:	88 23       	and	r24, r24
     d22:	89 f0       	breq	.+34     	; 0xd46 <NVM::V3::write_bytes_flash(unsigned long, unsigned int)+0x3c>
     d24:	ae 01       	movw	r20, r28
     d26:	c7 01       	movw	r24, r14
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv3.cpp:82
      && nvm_ctrl_change(0x05)  /* NVM_V3_CMD_FLPERW */
     d28:	b6 01       	movw	r22, r12
     d2a:	c6 dc       	rcall	.-1652   	; 0x6b8 <UPDI::send_bytes_block(unsigned long, unsigned int)>
     d2c:	88 23       	and	r24, r24
     d2e:	59 f0       	breq	.+22     	; 0xd46 <NVM::V3::write_bytes_flash(unsigned long, unsigned int)+0x3c>
     d30:	85 e0       	ldi	r24, 0x05	; 5
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv3.cpp:85
      && (nvm_wait() & 0x73) == 0
    );
  }
     d32:	c3 df       	rcall	.-122    	; 0xcba <NVM::V3::nvm_ctrl_change(unsigned char)>
     d34:	88 23       	and	r24, r24
     d36:	39 f0       	breq	.+14     	; 0xd46 <NVM::V3::write_bytes_flash(unsigned long, unsigned int)+0x3c>
     d38:	df 91       	pop	r29
     d3a:	cf 91       	pop	r28
     d3c:	ff 90       	pop	r15
     d3e:	ef 90       	pop	r14
     d40:	df 90       	pop	r13
     d42:	cf 90       	pop	r12
     d44:	b3 cf       	rjmp	.-154    	; 0xcac <NVM::V3::write_eeprom(unsigned long, unsigned int) [clone .part.3]>
     d46:	80 e0       	ldi	r24, 0x00	; 0
     d48:	df 91       	pop	r29
     d4a:	cf 91       	pop	r28
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv3.cpp:67
    if (!UPDI::nvm_ctrl(0x00)) return false;
    if (0 != _nvmcmd) return UPDI::nvm_ctrl(_nvmcmd);
    return true;
  }

  bool write_words_flash (uint32_t _dwAddr, size_t _wLength) {
     d4c:	ff 90       	pop	r15
     d4e:	ef 90       	pop	r14
     d50:	df 90       	pop	r13
     d52:	cf 90       	pop	r12
     d54:	08 95       	ret

00000d56 <NVM::V3::write_words_flash(unsigned long, unsigned int)>:
write_words_flash():
     d56:	cf 92       	push	r12
     d58:	df 92       	push	r13
     d5a:	ef 92       	push	r14
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv3.cpp:70
    D2PRINTF(" NVM_V3_FLPERW=%06lX\r\n", _dwAddr);
    return (
      nvm_ctrl_change(0x00)
     d5c:	ff 92       	push	r15
     d5e:	cf 93       	push	r28
     d60:	df 93       	push	r29
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv3.cpp:73
      && UPDI::send_words_block(_dwAddr, _wLength)
      && nvm_ctrl_change(0x05)  /* NVM_V3_CMD_FLPERW */
      && (nvm_wait() & 0x73) == 0
     d62:	6b 01       	movw	r12, r22
     d64:	7c 01       	movw	r14, r24
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv3.cpp:71

  bool write_words_flash (uint32_t _dwAddr, size_t _wLength) {
    D2PRINTF(" NVM_V3_FLPERW=%06lX\r\n", _dwAddr);
    return (
      nvm_ctrl_change(0x00)
      && UPDI::send_words_block(_dwAddr, _wLength)
     d66:	ea 01       	movw	r28, r20
     d68:	80 e0       	ldi	r24, 0x00	; 0
     d6a:	a7 df       	rcall	.-178    	; 0xcba <NVM::V3::nvm_ctrl_change(unsigned char)>
     d6c:	88 23       	and	r24, r24
     d6e:	89 f0       	breq	.+34     	; 0xd92 <NVM::V3::write_words_flash(unsigned long, unsigned int)+0x3c>
     d70:	ae 01       	movw	r20, r28
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv3.cpp:72
      && nvm_ctrl_change(0x05)  /* NVM_V3_CMD_FLPERW */
     d72:	c7 01       	movw	r24, r14
     d74:	b6 01       	movw	r22, r12
     d76:	f3 db       	rcall	.-2074   	; 0x55e <UPDI::send_words_block(unsigned long, unsigned int)>
     d78:	88 23       	and	r24, r24
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv3.cpp:75
      && (nvm_wait() & 0x73) == 0
    );
  }
     d7a:	59 f0       	breq	.+22     	; 0xd92 <NVM::V3::write_words_flash(unsigned long, unsigned int)+0x3c>
     d7c:	85 e0       	ldi	r24, 0x05	; 5
     d7e:	9d df       	rcall	.-198    	; 0xcba <NVM::V3::nvm_ctrl_change(unsigned char)>
     d80:	88 23       	and	r24, r24
     d82:	39 f0       	breq	.+14     	; 0xd92 <NVM::V3::write_words_flash(unsigned long, unsigned int)+0x3c>
     d84:	df 91       	pop	r29
     d86:	cf 91       	pop	r28
     d88:	ff 90       	pop	r15
     d8a:	ef 90       	pop	r14
     d8c:	df 90       	pop	r13
     d8e:	cf 90       	pop	r12
     d90:	8d cf       	rjmp	.-230    	; 0xcac <NVM::V3::write_eeprom(unsigned long, unsigned int) [clone .part.3]>
     d92:	80 e0       	ldi	r24, 0x00	; 0
     d94:	df 91       	pop	r29
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv5.cpp:136
    }
    /* Page erase will not be used if received. */
    return 1;
  }

  size_t write_memory (void) {
     d96:	cf 91       	pop	r28
     d98:	ff 90       	pop	r15
     d9a:	ef 90       	pop	r14
     d9c:	df 90       	pop	r13
     d9e:	cf 90       	pop	r12
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv5.cpp:140
    uint8_t   m_type = packet.out.bMType;
    uint32_t _dwAddr = packet.out.dwAddr;
    size_t  _wLength = packet.out.dwLength;
    if (bit_is_clear(PGCONF, PGCONF_PROG_bp)) return UPDI::write_userrow();
     da0:	08 95       	ret

00000da2 <NVM::V5::write_memory()>:
write_memory():
     da2:	cf 92       	push	r12
     da4:	df 92       	push	r13
     da6:	ef 92       	push	r14
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv5.cpp:160
      _dwAddr += PROG_START;
      return write_words_flash(_dwAddr, _wLength);
    }
    else {
      /* MTYPE_SRAM */
      return UPDI::send_bytes_block(_dwAddr, _wLength);
     da8:	ff 92       	push	r15
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv5.cpp:162
    }
  }
     daa:	cf 93       	push	r28
     dac:	df 93       	push	r29
     dae:	e9 99       	sbic	0x1d, 1	; 29
     db0:	09 c0       	rjmp	.+18     	; 0xdc4 <NVM::V5::write_memory()+0x22>
     db2:	13 dc       	rcall	.-2010   	; 0x5da <UPDI::write_userrow()>
     db4:	90 e0       	ldi	r25, 0x00	; 0
     db6:	df 91       	pop	r29
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv5.cpp:137
    /* Page erase will not be used if received. */
    return 1;
  }

  size_t write_memory (void) {
    uint8_t   m_type = packet.out.bMType;
     db8:	cf 91       	pop	r28
     dba:	ff 90       	pop	r15
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv5.cpp:138
    uint32_t _dwAddr = packet.out.dwAddr;
     dbc:	ef 90       	pop	r14
     dbe:	df 90       	pop	r13
     dc0:	cf 90       	pop	r12
     dc2:	08 95       	ret
     dc4:	80 91 c5 60 	lds	r24, 0x60C5	; 0x8060c5 <packet+0x7>
     dc8:	c0 90 c6 60 	lds	r12, 0x60C6	; 0x8060c6 <packet+0x8>
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv5.cpp:139
    size_t  _wLength = packet.out.dwLength;
     dcc:	d0 90 c7 60 	lds	r13, 0x60C7	; 0x8060c7 <packet+0x9>
     dd0:	e0 90 c8 60 	lds	r14, 0x60C8	; 0x8060c8 <packet+0xa>
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv5.cpp:141
    if (bit_is_clear(PGCONF, PGCONF_PROG_bp)) return UPDI::write_userrow();
    if (m_type == 0x22 || m_type == 0xB2 || m_type == 0xB3 || m_type == 0xC4) {
     dd4:	f0 90 c9 60 	lds	r15, 0x60C9	; 0x8060c9 <packet+0xb>
     dd8:	c0 91 ca 60 	lds	r28, 0x60CA	; 0x8060ca <packet+0xc>
     ddc:	d0 91 cb 60 	lds	r29, 0x60CB	; 0x8060cb <packet+0xd>
     de0:	82 32       	cpi	r24, 0x22	; 34
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv5.cpp:93
  }

  bool write_eeprom (uint32_t _dwAddr, size_t _wLength) {
    D2PRINTF(" NVM_V5_EEPERW=%06lX\r\n", _dwAddr);
    return (
      nvm_ctrl_change(0x00)
     de2:	31 f0       	breq	.+12     	; 0xdf0 <NVM::V5::write_memory()+0x4e>
     de4:	9e e4       	ldi	r25, 0x4E	; 78
     de6:	98 0f       	add	r25, r24
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv5.cpp:96
      && UPDI::send_bytes_block(_dwAddr, _wLength)
      && nvm_ctrl_change(0x15)  /* NVM_V5_CMD_EEPERW */
      && (nvm_wait() & 0x73) == 0
     de8:	92 30       	cpi	r25, 0x02	; 2
     dea:	10 f0       	brcs	.+4      	; 0xdf0 <NVM::V5::write_memory()+0x4e>
     dec:	84 3c       	cpi	r24, 0xC4	; 196
     dee:	91 f4       	brne	.+36     	; 0xe14 <NVM::V5::write_memory()+0x72>
write_eeprom():
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv5.cpp:94

  bool write_eeprom (uint32_t _dwAddr, size_t _wLength) {
    D2PRINTF(" NVM_V5_EEPERW=%06lX\r\n", _dwAddr);
    return (
      nvm_ctrl_change(0x00)
      && UPDI::send_bytes_block(_dwAddr, _wLength)
     df0:	80 e0       	ldi	r24, 0x00	; 0
     df2:	63 df       	rcall	.-314    	; 0xcba <NVM::V3::nvm_ctrl_change(unsigned char)>
     df4:	81 11       	cpse	r24, r1
     df6:	02 c0       	rjmp	.+4      	; 0xdfc <NVM::V5::write_memory()+0x5a>
write_memory():
     df8:	80 e0       	ldi	r24, 0x00	; 0
     dfa:	dc cf       	rjmp	.-72     	; 0xdb4 <NVM::V5::write_memory()+0x12>
write_eeprom():
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv5.cpp:95
      && nvm_ctrl_change(0x15)  /* NVM_V5_CMD_EEPERW */
     dfc:	ae 01       	movw	r20, r28
     dfe:	c7 01       	movw	r24, r14
     e00:	b6 01       	movw	r22, r12
     e02:	5a dc       	rcall	.-1868   	; 0x6b8 <UPDI::send_bytes_block(unsigned long, unsigned int)>
     e04:	88 23       	and	r24, r24
     e06:	c1 f3       	breq	.-16     	; 0xdf8 <NVM::V5::write_memory()+0x56>
     e08:	85 e1       	ldi	r24, 0x15	; 21
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv5.cpp:148
      /* MTYPE_LOCK_BITS */
      /* MTYPE_EEPROM */
      /* MTYPE_EEPROM_XMEGA */
      return write_eeprom(_dwAddr, _wLength);
    }
    else if (m_type == 0xC0 || m_type == 0xC5) {
     e0a:	57 df       	rcall	.-338    	; 0xcba <NVM::V3::nvm_ctrl_change(unsigned char)>
     e0c:	88 23       	and	r24, r24
     e0e:	a1 f3       	breq	.-24     	; 0xdf8 <NVM::V5::write_memory()+0x56>
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv5.cpp:151
      /* MTYPE_FLASH (alias) */
      /* MTYPE_USERSIG (USERROW, BOOTROW) */
      return write_bytes_flash(_dwAddr, _wLength);
     e10:	4d df       	rcall	.-358    	; 0xcac <NVM::V3::write_eeprom(unsigned long, unsigned int) [clone .part.3]>
     e12:	d0 cf       	rjmp	.-96     	; 0xdb4 <NVM::V5::write_memory()+0x12>
write_memory():
     e14:	80 3c       	cpi	r24, 0xC0	; 192
     e16:	11 f0       	breq	.+4      	; 0xe1c <NVM::V5::write_memory()+0x7a>
     e18:	85 3c       	cpi	r24, 0xC5	; 197
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv5.cpp:153
    }
    else if (m_type == 0xB0) {
     e1a:	29 f4       	brne	.+10     	; 0xe26 <NVM::V5::write_memory()+0x84>
     e1c:	ae 01       	movw	r20, r28
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv5.cpp:155
      /* MTYPE_FLASH_PAGE (PROGMEM) */
      _dwAddr += PROG_START;
     e1e:	c7 01       	movw	r24, r14
     e20:	b6 01       	movw	r22, r12
     e22:	73 df       	rcall	.-282    	; 0xd0a <NVM::V3::write_bytes_flash(unsigned long, unsigned int)>
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv5.cpp:156
      return write_words_flash(_dwAddr, _wLength);
     e24:	c7 cf       	rjmp	.-114    	; 0xdb4 <NVM::V5::write_memory()+0x12>
     e26:	80 3b       	cpi	r24, 0xB0	; 176
     e28:	39 f4       	brne	.+14     	; 0xe38 <NVM::V5::write_memory()+0x96>
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv5.cpp:160
    }
    else {
      /* MTYPE_SRAM */
      return UPDI::send_bytes_block(_dwAddr, _wLength);
     e2a:	c7 01       	movw	r24, r14
     e2c:	b6 01       	movw	r22, r12
     e2e:	80 58       	subi	r24, 0x80	; 128
     e30:	9f 4f       	sbci	r25, 0xFF	; 255
     e32:	ae 01       	movw	r20, r28
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv4.cpp:72
    if (!UPDI::nvm_ctrl(0x00)) return false;
    if (0 != _nvmcmd) return UPDI::nvm_ctrl(_nvmcmd);
    return true;
  }

  bool erase_flash_page (uint32_t _dwAddr) {
     e34:	90 df       	rcall	.-224    	; 0xd56 <NVM::V3::write_words_flash(unsigned long, unsigned int)>
     e36:	be cf       	rjmp	.-132    	; 0xdb4 <NVM::V5::write_memory()+0x12>
     e38:	ae 01       	movw	r20, r28
     e3a:	c7 01       	movw	r24, r14
     e3c:	b6 01       	movw	r22, r12
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv4.cpp:75
    D2PRINTF(" NVM_V4_FLPER=%06lX\r\n", _dwAddr);
    return (
      nvm_ctrl_change(0x08)   /* NVM_V4_CMD_FLPER */
     e3e:	3c dc       	rcall	.-1928   	; 0x6b8 <UPDI::send_bytes_block(unsigned long, unsigned int)>
     e40:	b9 cf       	rjmp	.-142    	; 0xdb4 <NVM::V5::write_memory()+0x12>

00000e42 <NVM::V4::erase_flash_page(unsigned long)>:
erase_flash_page():
     e42:	cf 92       	push	r12
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv4.cpp:78
      && UPDI::send_byte(_dwAddr, 0xFF)
      && (nvm_wait() & 0x73) == 0
      && nvm_ctrl_change(0x00)
     e44:	df 92       	push	r13
     e46:	ef 92       	push	r14
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv4.cpp:76

  bool erase_flash_page (uint32_t _dwAddr) {
    D2PRINTF(" NVM_V4_FLPER=%06lX\r\n", _dwAddr);
    return (
      nvm_ctrl_change(0x08)   /* NVM_V4_CMD_FLPER */
      && UPDI::send_byte(_dwAddr, 0xFF)
     e48:	ff 92       	push	r15
     e4a:	6b 01       	movw	r12, r22
     e4c:	7c 01       	movw	r14, r24
     e4e:	88 e0       	ldi	r24, 0x08	; 8
     e50:	34 df       	rcall	.-408    	; 0xcba <NVM::V3::nvm_ctrl_change(unsigned char)>
     e52:	88 23       	and	r24, r24
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv4.cpp:77
      && (nvm_wait() & 0x73) == 0
     e54:	71 f0       	breq	.+28     	; 0xe72 <NVM::V4::erase_flash_page(unsigned long)+0x30>
     e56:	4f ef       	ldi	r20, 0xFF	; 255
     e58:	c7 01       	movw	r24, r14
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv4.cpp:80
      && nvm_ctrl_change(0x00)
    );
  }
     e5a:	b6 01       	movw	r22, r12
     e5c:	68 dc       	rcall	.-1840   	; 0x72e <UPDI::send_byte(unsigned long, unsigned char)>
     e5e:	88 23       	and	r24, r24
     e60:	41 f0       	breq	.+16     	; 0xe72 <NVM::V4::erase_flash_page(unsigned long)+0x30>
     e62:	1a df       	rcall	.-460    	; 0xc98 <NVM::V3::nvm_wait()>
     e64:	83 77       	andi	r24, 0x73	; 115
     e66:	29 f4       	brne	.+10     	; 0xe72 <NVM::V4::erase_flash_page(unsigned long)+0x30>
     e68:	ff 90       	pop	r15
     e6a:	ef 90       	pop	r14
     e6c:	df 90       	pop	r13
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv4.cpp:158
    /* Page erase will not be used if received. */
    /* Instead, page erase is determined by the is_boundary_flash_page function. */
    return 1;
  }

  size_t write_memory (void) {
     e6e:	cf 90       	pop	r12
     e70:	41 cf       	rjmp	.-382    	; 0xcf4 <NVM::V4::write_eeprom(unsigned long, unsigned int) [clone .part.5]>
     e72:	80 e0       	ldi	r24, 0x00	; 0
     e74:	ff 90       	pop	r15
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv4.cpp:162
    uint8_t   m_type = packet.out.bMType;
    uint32_t _dwAddr = packet.out.dwAddr;
    size_t  _wLength = packet.out.dwLength;
    if (bit_is_clear(PGCONF, PGCONF_PROG_bp)) return UPDI::write_userrow();
     e76:	ef 90       	pop	r14
     e78:	df 90       	pop	r13
     e7a:	cf 90       	pop	r12
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv4.cpp:182
      _dwAddr += PROG_START;
      return write_words_flash(_dwAddr, _wLength);
    }
    else {
      /* MTYPE_SRAM */
      return UPDI::send_bytes_block(_dwAddr, _wLength);
     e7c:	08 95       	ret

00000e7e <NVM::V4::write_memory()>:
write_memory():
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv4.cpp:184
    }
  }
     e7e:	cf 92       	push	r12
     e80:	df 92       	push	r13
     e82:	ef 92       	push	r14
     e84:	ff 92       	push	r15
     e86:	cf 93       	push	r28
     e88:	df 93       	push	r29
     e8a:	e9 99       	sbic	0x1d, 1	; 29
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv4.cpp:159
    /* Instead, page erase is determined by the is_boundary_flash_page function. */
    return 1;
  }

  size_t write_memory (void) {
    uint8_t   m_type = packet.out.bMType;
     e8c:	09 c0       	rjmp	.+18     	; 0xea0 <NVM::V4::write_memory()+0x22>
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv4.cpp:160
    uint32_t _dwAddr = packet.out.dwAddr;
     e8e:	a5 db       	rcall	.-2230   	; 0x5da <UPDI::write_userrow()>
     e90:	90 e0       	ldi	r25, 0x00	; 0
     e92:	df 91       	pop	r29
     e94:	cf 91       	pop	r28
     e96:	ff 90       	pop	r15
     e98:	ef 90       	pop	r14
     e9a:	df 90       	pop	r13
     e9c:	cf 90       	pop	r12
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv4.cpp:161
    size_t  _wLength = packet.out.dwLength;
     e9e:	08 95       	ret
     ea0:	80 91 c5 60 	lds	r24, 0x60C5	; 0x8060c5 <packet+0x7>
     ea4:	c0 90 c6 60 	lds	r12, 0x60C6	; 0x8060c6 <packet+0x8>
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv4.cpp:163
    if (bit_is_clear(PGCONF, PGCONF_PROG_bp)) return UPDI::write_userrow();
    if (m_type == 0x22 || m_type == 0xB2 || m_type == 0xB3 || m_type == 0xC4) {
     ea8:	d0 90 c7 60 	lds	r13, 0x60C7	; 0x8060c7 <packet+0x9>
     eac:	e0 90 c8 60 	lds	r14, 0x60C8	; 0x8060c8 <packet+0xa>
     eb0:	f0 90 c9 60 	lds	r15, 0x60C9	; 0x8060c9 <packet+0xb>
     eb4:	c0 91 ca 60 	lds	r28, 0x60CA	; 0x8060ca <packet+0xc>
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv4.cpp:108
  }

  bool write_eeprom (uint32_t _dwAddr, size_t _wLength) {
    D2PRINTF(" NVM_V4_EEERWR=%06lX\r\n", _dwAddr);
    return (
      nvm_ctrl_change(0x13)   /* NVM_V4_CMD_EEERWR */
     eb8:	d0 91 cb 60 	lds	r29, 0x60CB	; 0x8060cb <packet+0xd>
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv4.cpp:111
      && UPDI::send_bytes_block_slow(_dwAddr, _wLength)
      && (nvm_wait() & 0x73) == 0
      && nvm_ctrl_change(0x00)
     ebc:	82 32       	cpi	r24, 0x22	; 34
     ebe:	31 f0       	breq	.+12     	; 0xecc <NVM::V4::write_memory()+0x4e>
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv4.cpp:90
    D2PRINTF(" NVM_V4_FLWR=%06lX\r\n", _dwAddr);
    return (
      nvm_ctrl_change(0x02)   /* NVM_V4_CMD_FLWR */
      && UPDI::send_words_block(_dwAddr, _wLength)
      && (nvm_wait() & 0x73) == 0
      && nvm_ctrl_change(0x00)
     ec0:	9e e4       	ldi	r25, 0x4E	; 78
     ec2:	98 0f       	add	r25, r24
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv4.cpp:109

  bool write_eeprom (uint32_t _dwAddr, size_t _wLength) {
    D2PRINTF(" NVM_V4_EEERWR=%06lX\r\n", _dwAddr);
    return (
      nvm_ctrl_change(0x13)   /* NVM_V4_CMD_EEERWR */
      && UPDI::send_bytes_block_slow(_dwAddr, _wLength)
     ec4:	92 30       	cpi	r25, 0x02	; 2
     ec6:	10 f0       	brcs	.+4      	; 0xecc <NVM::V4::write_memory()+0x4e>
     ec8:	84 3c       	cpi	r24, 0xC4	; 196
     eca:	89 f4       	brne	.+34     	; 0xeee <NVM::V4::write_memory()+0x70>
write_eeprom():
     ecc:	83 e1       	ldi	r24, 0x13	; 19
     ece:	f5 de       	rcall	.-534    	; 0xcba <NVM::V3::nvm_ctrl_change(unsigned char)>
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv4.cpp:110
      && (nvm_wait() & 0x73) == 0
     ed0:	81 11       	cpse	r24, r1
     ed2:	02 c0       	rjmp	.+4      	; 0xed8 <NVM::V4::write_memory()+0x5a>
write_memory():
     ed4:	80 e0       	ldi	r24, 0x00	; 0
     ed6:	dc cf       	rjmp	.-72     	; 0xe90 <NVM::V4::write_memory()+0x12>
write_eeprom():
     ed8:	ae 01       	movw	r20, r28
     eda:	c7 01       	movw	r24, r14
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv4.cpp:170
      /* MTYPE_LOCK_BITS */
      /* MTYPE_EEPROM */
      /* MTYPE_EEPROM_XMEGA */
      return write_eeprom(_dwAddr, _wLength);
    }
    else if (m_type == 0xC0 || m_type == 0xC5) {
     edc:	b6 01       	movw	r22, r12
     ede:	4a dc       	rcall	.-1900   	; 0x774 <UPDI::send_bytes_block_slow(unsigned long, unsigned int)>
     ee0:	88 23       	and	r24, r24
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv4.cpp:95
      && nvm_ctrl_change(0x00)
    );
  }

  bool write_bytes_flash (uint32_t _dwAddr, size_t _wLength) {
    if (SYS::is_boundary_flash_page(_dwAddr)) erase_flash_page(_dwAddr);
     ee2:	c1 f3       	breq	.-16     	; 0xed4 <NVM::V4::write_memory()+0x56>
     ee4:	d9 de       	rcall	.-590    	; 0xc98 <NVM::V3::nvm_wait()>
     ee6:	83 77       	andi	r24, 0x73	; 115
     ee8:	a9 f7       	brne	.-22     	; 0xed4 <NVM::V4::write_memory()+0x56>
     eea:	04 df       	rcall	.-504    	; 0xcf4 <NVM::V4::write_eeprom(unsigned long, unsigned int) [clone .part.5]>
     eec:	d1 cf       	rjmp	.-94     	; 0xe90 <NVM::V4::write_memory()+0x12>
write_memory():
     eee:	80 3c       	cpi	r24, 0xC0	; 192
     ef0:	11 f0       	breq	.+4      	; 0xef6 <NVM::V4::write_memory()+0x78>
     ef2:	85 3c       	cpi	r24, 0xC5	; 197
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv4.cpp:98
    D2PRINTF(" NVM_V4_FLWR=%06lX\r\n", _dwAddr);
    return (
      nvm_ctrl_change(0x02)   /* NVM_V4_CMD_FLWR */
     ef4:	b9 f4       	brne	.+46     	; 0xf24 <NVM::V4::write_memory()+0xa6>
write_bytes_flash():
     ef6:	c7 01       	movw	r24, r14
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv4.cpp:101
      && UPDI::send_bytes_block_slow(_dwAddr, _wLength)
      && (nvm_wait() & 0x73) == 0
      && nvm_ctrl_change(0x00)
     ef8:	b6 01       	movw	r22, r12
     efa:	d4 dd       	rcall	.-1112   	; 0xaa4 <SYS::is_boundary_flash_page(unsigned long)>
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv4.cpp:99
  bool write_bytes_flash (uint32_t _dwAddr, size_t _wLength) {
    if (SYS::is_boundary_flash_page(_dwAddr)) erase_flash_page(_dwAddr);
    D2PRINTF(" NVM_V4_FLWR=%06lX\r\n", _dwAddr);
    return (
      nvm_ctrl_change(0x02)   /* NVM_V4_CMD_FLWR */
      && UPDI::send_bytes_block_slow(_dwAddr, _wLength)
     efc:	88 23       	and	r24, r24
     efe:	19 f0       	breq	.+6      	; 0xf06 <NVM::V4::write_memory()+0x88>
     f00:	c7 01       	movw	r24, r14
     f02:	b6 01       	movw	r22, r12
     f04:	9e df       	rcall	.-196    	; 0xe42 <NVM::V4::erase_flash_page(unsigned long)>
     f06:	82 e0       	ldi	r24, 0x02	; 2
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv4.cpp:100
      && (nvm_wait() & 0x73) == 0
     f08:	d8 de       	rcall	.-592    	; 0xcba <NVM::V3::nvm_ctrl_change(unsigned char)>
     f0a:	88 23       	and	r24, r24
     f0c:	19 f3       	breq	.-58     	; 0xed4 <NVM::V4::write_memory()+0x56>
     f0e:	ae 01       	movw	r20, r28
     f10:	c7 01       	movw	r24, r14
     f12:	b6 01       	movw	r22, r12
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv4.cpp:175
    else if (m_type == 0xC0 || m_type == 0xC5) {
      /* MTYPE_FLASH (alias) */
      /* MTYPE_USERSIG (USERROW, BOOTROW) */
      return write_bytes_flash(_dwAddr, _wLength);
    }
    else if (m_type == 0xB0) {
     f14:	2f dc       	rcall	.-1954   	; 0x774 <UPDI::send_bytes_block_slow(unsigned long, unsigned int)>
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv4.cpp:177
      /* MTYPE_FLASH_PAGE (PROGMEM) */
      _dwAddr += PROG_START;
     f16:	88 23       	and	r24, r24
     f18:	e9 f2       	breq	.-70     	; 0xed4 <NVM::V4::write_memory()+0x56>
     f1a:	be de       	rcall	.-644    	; 0xc98 <NVM::V3::nvm_wait()>
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv4.cpp:84
    );
  }

  bool write_words_flash (uint32_t _dwAddr, size_t _wLength) {
    if (bit_is_clear(PGCONF, PGCONF_ERSE_bp)
      && SYS::is_boundary_flash_page(_dwAddr)) erase_flash_page(_dwAddr);
     f1c:	83 77       	andi	r24, 0x73	; 115
     f1e:	d1 f6       	brne	.-76     	; 0xed4 <NVM::V4::write_memory()+0x56>
     f20:	e9 de       	rcall	.-558    	; 0xcf4 <NVM::V4::write_eeprom(unsigned long, unsigned int) [clone .part.5]>
     f22:	b6 cf       	rjmp	.-148    	; 0xe90 <NVM::V4::write_memory()+0x12>
write_memory():
     f24:	80 3b       	cpi	r24, 0xB0	; 176
     f26:	f9 f4       	brne	.+62     	; 0xf66 <NVM::V4::write_memory()+0xe8>
     f28:	80 e8       	ldi	r24, 0x80	; 128
     f2a:	e8 0e       	add	r14, r24
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv4.cpp:87
    D2PRINTF(" NVM_V4_FLWR=%06lX\r\n", _dwAddr);
    return (
      nvm_ctrl_change(0x02)   /* NVM_V4_CMD_FLWR */
     f2c:	f1 1c       	adc	r15, r1
write_words_flash():
     f2e:	ea 99       	sbic	0x1d, 2	; 29
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv4.cpp:90
      && UPDI::send_words_block(_dwAddr, _wLength)
      && (nvm_wait() & 0x73) == 0
      && nvm_ctrl_change(0x00)
     f30:	08 c0       	rjmp	.+16     	; 0xf42 <NVM::V4::write_memory()+0xc4>
     f32:	c7 01       	movw	r24, r14
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv4.cpp:88
    if (bit_is_clear(PGCONF, PGCONF_ERSE_bp)
      && SYS::is_boundary_flash_page(_dwAddr)) erase_flash_page(_dwAddr);
    D2PRINTF(" NVM_V4_FLWR=%06lX\r\n", _dwAddr);
    return (
      nvm_ctrl_change(0x02)   /* NVM_V4_CMD_FLWR */
      && UPDI::send_words_block(_dwAddr, _wLength)
     f34:	b6 01       	movw	r22, r12
     f36:	b6 dd       	rcall	.-1172   	; 0xaa4 <SYS::is_boundary_flash_page(unsigned long)>
     f38:	88 23       	and	r24, r24
     f3a:	19 f0       	breq	.+6      	; 0xf42 <NVM::V4::write_memory()+0xc4>
     f3c:	c7 01       	movw	r24, r14
     f3e:	b6 01       	movw	r22, r12
     f40:	80 df       	rcall	.-256    	; 0xe42 <NVM::V4::erase_flash_page(unsigned long)>
     f42:	82 e0       	ldi	r24, 0x02	; 2
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv4.cpp:89
      && (nvm_wait() & 0x73) == 0
     f44:	ba de       	rcall	.-652    	; 0xcba <NVM::V3::nvm_ctrl_change(unsigned char)>
     f46:	88 23       	and	r24, r24
     f48:	09 f4       	brne	.+2      	; 0xf4c <NVM::V4::write_memory()+0xce>
     f4a:	c4 cf       	rjmp	.-120    	; 0xed4 <NVM::V4::write_memory()+0x56>
     f4c:	ae 01       	movw	r20, r28
     f4e:	c7 01       	movw	r24, r14
     f50:	b6 01       	movw	r22, r12
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv4.cpp:182
      _dwAddr += PROG_START;
      return write_words_flash(_dwAddr, _wLength);
    }
    else {
      /* MTYPE_SRAM */
      return UPDI::send_bytes_block(_dwAddr, _wLength);
     f52:	05 db       	rcall	.-2550   	; 0x55e <UPDI::send_words_block(unsigned long, unsigned int)>
     f54:	88 23       	and	r24, r24
     f56:	09 f4       	brne	.+2      	; 0xf5a <NVM::V4::write_memory()+0xdc>
     f58:	bd cf       	rjmp	.-134    	; 0xed4 <NVM::V4::write_memory()+0x56>
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv3.cpp:133
    }
    /* Page erase will not be used if received. */
    return 1;
  }

  size_t write_memory (void) {
     f5a:	9e de       	rcall	.-708    	; 0xc98 <NVM::V3::nvm_wait()>
     f5c:	83 77       	andi	r24, 0x73	; 115
     f5e:	09 f0       	breq	.+2      	; 0xf62 <NVM::V4::write_memory()+0xe4>
     f60:	b9 cf       	rjmp	.-142    	; 0xed4 <NVM::V4::write_memory()+0x56>
     f62:	c8 de       	rcall	.-624    	; 0xcf4 <NVM::V4::write_eeprom(unsigned long, unsigned int) [clone .part.5]>
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv3.cpp:137
    uint8_t   m_type = packet.out.bMType;
    uint32_t _dwAddr = packet.out.dwAddr;
    size_t  _wLength = packet.out.dwLength;
    if (bit_is_clear(PGCONF, PGCONF_PROG_bp)) return UPDI::write_userrow();
     f64:	95 cf       	rjmp	.-214    	; 0xe90 <NVM::V4::write_memory()+0x12>
write_memory():
     f66:	ae 01       	movw	r20, r28
     f68:	c7 01       	movw	r24, r14
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv3.cpp:157
      _dwAddr += PROG_START;
      return write_words_flash(_dwAddr, _wLength);
    }
    else {
      /* MTYPE_SRAM */
      return UPDI::send_bytes_block(_dwAddr, _wLength);
     f6a:	b6 01       	movw	r22, r12
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv3.cpp:159
    }
  }
     f6c:	a5 db       	rcall	.-2230   	; 0x6b8 <UPDI::send_bytes_block(unsigned long, unsigned int)>
     f6e:	90 cf       	rjmp	.-224    	; 0xe90 <NVM::V4::write_memory()+0x12>

00000f70 <NVM::V3::write_memory()>:
     f70:	cf 92       	push	r12
     f72:	df 92       	push	r13
     f74:	ef 92       	push	r14
     f76:	ff 92       	push	r15
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv3.cpp:134
    /* Page erase will not be used if received. */
    return 1;
  }

  size_t write_memory (void) {
    uint8_t   m_type = packet.out.bMType;
     f78:	cf 93       	push	r28
     f7a:	df 93       	push	r29
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv3.cpp:135
    uint32_t _dwAddr = packet.out.dwAddr;
     f7c:	e9 99       	sbic	0x1d, 1	; 29
     f7e:	09 c0       	rjmp	.+18     	; 0xf92 <NVM::V3::write_memory()+0x22>
     f80:	2c db       	rcall	.-2472   	; 0x5da <UPDI::write_userrow()>
     f82:	90 e0       	ldi	r25, 0x00	; 0
     f84:	df 91       	pop	r29
     f86:	cf 91       	pop	r28
     f88:	ff 90       	pop	r15
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv3.cpp:136
    size_t  _wLength = packet.out.dwLength;
     f8a:	ef 90       	pop	r14
     f8c:	df 90       	pop	r13
     f8e:	cf 90       	pop	r12
     f90:	08 95       	ret
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv3.cpp:138
    if (bit_is_clear(PGCONF, PGCONF_PROG_bp)) return UPDI::write_userrow();
    if (m_type == 0x22 || m_type == 0xB2 || m_type == 0xB3 || m_type == 0xC4) {
     f92:	80 91 c5 60 	lds	r24, 0x60C5	; 0x8060c5 <packet+0x7>
     f96:	c0 90 c6 60 	lds	r12, 0x60C6	; 0x8060c6 <packet+0x8>
     f9a:	d0 90 c7 60 	lds	r13, 0x60C7	; 0x8060c7 <packet+0x9>
     f9e:	e0 90 c8 60 	lds	r14, 0x60C8	; 0x8060c8 <packet+0xa>
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv3.cpp:90
  }

  bool write_eeprom (uint32_t _dwAddr, size_t _wLength) {
    D2PRINTF(" NVM_V3_EEPERW=%06lX\r\n", _dwAddr);
    return (
      nvm_ctrl_change(0x10)
     fa2:	f0 90 c9 60 	lds	r15, 0x60C9	; 0x8060c9 <packet+0xb>
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv3.cpp:93
      && UPDI::send_bytes_block(_dwAddr, _wLength)
      && nvm_ctrl_change(0x15)  /* NVM_V3_CMD_EEPERW */
      && (nvm_wait() & 0x73) == 0
     fa6:	c0 91 ca 60 	lds	r28, 0x60CA	; 0x8060ca <packet+0xc>
     faa:	d0 91 cb 60 	lds	r29, 0x60CB	; 0x8060cb <packet+0xd>
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv3.cpp:91

  bool write_eeprom (uint32_t _dwAddr, size_t _wLength) {
    D2PRINTF(" NVM_V3_EEPERW=%06lX\r\n", _dwAddr);
    return (
      nvm_ctrl_change(0x10)
      && UPDI::send_bytes_block(_dwAddr, _wLength)
     fae:	82 32       	cpi	r24, 0x22	; 34
     fb0:	31 f0       	breq	.+12     	; 0xfbe <NVM::V3::write_memory()+0x4e>
     fb2:	9e e4       	ldi	r25, 0x4E	; 78
     fb4:	98 0f       	add	r25, r24
     fb6:	92 30       	cpi	r25, 0x02	; 2
     fb8:	10 f0       	brcs	.+4      	; 0xfbe <NVM::V3::write_memory()+0x4e>
     fba:	84 3c       	cpi	r24, 0xC4	; 196
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv3.cpp:92
      && nvm_ctrl_change(0x15)  /* NVM_V3_CMD_EEPERW */
     fbc:	91 f4       	brne	.+36     	; 0xfe2 <NVM::V3::write_memory()+0x72>
write_eeprom():
     fbe:	80 e1       	ldi	r24, 0x10	; 16
     fc0:	7c de       	rcall	.-776    	; 0xcba <NVM::V3::nvm_ctrl_change(unsigned char)>
     fc2:	81 11       	cpse	r24, r1
     fc4:	02 c0       	rjmp	.+4      	; 0xfca <NVM::V3::write_memory()+0x5a>
write_memory():
     fc6:	80 e0       	ldi	r24, 0x00	; 0
     fc8:	dc cf       	rjmp	.-72     	; 0xf82 <NVM::V3::write_memory()+0x12>
write_eeprom():
     fca:	ae 01       	movw	r20, r28
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv3.cpp:145
      /* MTYPE_LOCK_BITS */
      /* MTYPE_EEPROM */
      /* MTYPE_EEPROM_XMEGA */
      return write_eeprom(_dwAddr, _wLength);
    }
    else if (m_type == 0xC0 || m_type == 0xC5) {
     fcc:	c7 01       	movw	r24, r14
     fce:	b6 01       	movw	r22, r12
     fd0:	73 db       	rcall	.-2330   	; 0x6b8 <UPDI::send_bytes_block(unsigned long, unsigned int)>
     fd2:	88 23       	and	r24, r24
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv3.cpp:148
      /* MTYPE_FLASH (alias) */
      /* MTYPE_USERSIG (USERROW) */
      return write_bytes_flash(_dwAddr, _wLength);
     fd4:	c1 f3       	breq	.-16     	; 0xfc6 <NVM::V3::write_memory()+0x56>
     fd6:	85 e1       	ldi	r24, 0x15	; 21
     fd8:	70 de       	rcall	.-800    	; 0xcba <NVM::V3::nvm_ctrl_change(unsigned char)>
     fda:	88 23       	and	r24, r24
     fdc:	a1 f3       	breq	.-24     	; 0xfc6 <NVM::V3::write_memory()+0x56>
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv3.cpp:150
    }
    else if (m_type == 0xB0) {
     fde:	66 de       	rcall	.-820    	; 0xcac <NVM::V3::write_eeprom(unsigned long, unsigned int) [clone .part.3]>
     fe0:	d0 cf       	rjmp	.-96     	; 0xf82 <NVM::V3::write_memory()+0x12>
write_memory():
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv3.cpp:152
      /* MTYPE_FLASH_PAGE (PROGMEM) */
      _dwAddr += PROG_START;
     fe2:	80 3c       	cpi	r24, 0xC0	; 192
     fe4:	11 f0       	breq	.+4      	; 0xfea <NVM::V3::write_memory()+0x7a>
     fe6:	85 3c       	cpi	r24, 0xC5	; 197
     fe8:	29 f4       	brne	.+10     	; 0xff4 <NVM::V3::write_memory()+0x84>
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv3.cpp:153
      return write_words_flash(_dwAddr, _wLength);
     fea:	ae 01       	movw	r20, r28
     fec:	c7 01       	movw	r24, r14
     fee:	b6 01       	movw	r22, r12
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv3.cpp:157
    }
    else {
      /* MTYPE_SRAM */
      return UPDI::send_bytes_block(_dwAddr, _wLength);
     ff0:	8c de       	rcall	.-744    	; 0xd0a <NVM::V3::write_bytes_flash(unsigned long, unsigned int)>
     ff2:	c7 cf       	rjmp	.-114    	; 0xf82 <NVM::V3::write_memory()+0x12>
     ff4:	80 3b       	cpi	r24, 0xB0	; 176
     ff6:	39 f4       	brne	.+14     	; 0x1006 <NVM::V3::write_memory()+0x96>
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv0.cpp:62
  constexpr auto NVM_STATUS = 0x1002;
  constexpr auto NVM_DATA   = 0x1006;
  constexpr auto PROD_SIG   = 0x1100;

  uint8_t nvm_wait (void) {
    do { UPDI::recv_byte(NVM_STATUS); } while (RXDATA & 3);
     ff8:	c7 01       	movw	r24, r14
     ffa:	b6 01       	movw	r22, r12
     ffc:	80 58       	subi	r24, 0x80	; 128
     ffe:	9f 4f       	sbci	r25, 0xFF	; 255
    1000:	ae 01       	movw	r20, r28
    1002:	a9 de       	rcall	.-686    	; 0xd56 <NVM::V3::write_words_flash(unsigned long, unsigned int)>
    1004:	be cf       	rjmp	.-132    	; 0xf82 <NVM::V3::write_memory()+0x12>
    1006:	ae 01       	movw	r20, r28
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv0.cpp:63
    return RXDATA;
    1008:	c7 01       	movw	r24, r14
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv0.cpp:108
      && (nvm_wait() & 7) == 0
    );
  }

  size_t prog_init (void) {
    nvm_wait();
    100a:	b6 01       	movw	r22, r12
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv0.cpp:109
    UPDI::nvm_ctrl(0x04);         /* NVM_CMD_PBC */
    100c:	55 db       	rcall	.-2390   	; 0x6b8 <UPDI::send_bytes_block(unsigned long, unsigned int)>
    100e:	b9 cf       	rjmp	.-142    	; 0xf82 <NVM::V3::write_memory()+0x12>

00001010 <NVM::V0::nvm_wait()>:
nvm_wait():
    1010:	62 e0       	ldi	r22, 0x02	; 2
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv0.cpp:110
    nvm_wait();
    1012:	70 e1       	ldi	r23, 0x10	; 16
    1014:	80 e0       	ldi	r24, 0x00	; 0
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv0.cpp:111
    return UPDI::nvm_ctrl(0x00);
    1016:	90 e0       	ldi	r25, 0x00	; 0
    1018:	88 da       	rcall	.-2800   	; 0x52a <UPDI::recv_byte(unsigned long)>
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv0.cpp:112
  }
    101a:	8f b3       	in	r24, 0x1f	; 31
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv2.cpp:61
  uint8_t nvm_wait (void) {
    do { UPDI::recv_byte(NVM_STATUS); } while (RXDATA & 3);
    return RXDATA;
  }

  bool nvm_ctrl_change (uint8_t _nvmcmd) {
    101c:	83 70       	andi	r24, 0x03	; 3
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv2.cpp:62
    nvm_wait();
    101e:	c1 f7       	brne	.-16     	; 0x1010 <NVM::V0::nvm_wait()>
    1020:	8f b3       	in	r24, 0x1f	; 31
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv2.cpp:63
    if (UPDI::recv_byte(NVM_CTRL) && RXDATA == _nvmcmd) return true;
    1022:	08 95       	ret

00001024 <NVM::V0::prog_init()>:
prog_init():
    1024:	f5 df       	rcall	.-22     	; 0x1010 <NVM::V0::nvm_wait()>
    1026:	84 e0       	ldi	r24, 0x04	; 4
    1028:	9f db       	rcall	.-2242   	; 0x768 <UPDI::nvm_ctrl(unsigned char)>
    102a:	f2 df       	rcall	.-28     	; 0x1010 <NVM::V0::nvm_wait()>
    102c:	80 e0       	ldi	r24, 0x00	; 0
    102e:	9c db       	rcall	.-2248   	; 0x768 <UPDI::nvm_ctrl(unsigned char)>
    1030:	90 e0       	ldi	r25, 0x00	; 0
    1032:	08 95       	ret

00001034 <NVM::V2::nvm_ctrl_change(unsigned char)>:
nvm_ctrl_change():
    1034:	cf 93       	push	r28
    1036:	c8 2f       	mov	r28, r24
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv2.cpp:67
    if (!UPDI::nvm_ctrl(0x00)) return false;
    if (0 != _nvmcmd) return UPDI::nvm_ctrl(_nvmcmd);
    return true;
  }
    1038:	eb df       	rcall	.-42     	; 0x1010 <NVM::V0::nvm_wait()>
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv2.cpp:64
  }

  bool nvm_ctrl_change (uint8_t _nvmcmd) {
    nvm_wait();
    if (UPDI::recv_byte(NVM_CTRL) && RXDATA == _nvmcmd) return true;
    if (!UPDI::nvm_ctrl(0x00)) return false;
    103a:	60 e0       	ldi	r22, 0x00	; 0
    103c:	70 e1       	ldi	r23, 0x10	; 16
    103e:	80 e0       	ldi	r24, 0x00	; 0
    1040:	90 e0       	ldi	r25, 0x00	; 0
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv2.cpp:65
    if (0 != _nvmcmd) return UPDI::nvm_ctrl(_nvmcmd);
    1042:	73 da       	rcall	.-2842   	; 0x52a <UPDI::recv_byte(unsigned long)>
    1044:	88 23       	and	r24, r24
    1046:	31 f0       	breq	.+12     	; 0x1054 <NVM::V2::nvm_ctrl_change(unsigned char)+0x20>
    1048:	8f b3       	in	r24, 0x1f	; 31
    104a:	8c 13       	cpse	r24, r28
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv2.cpp:113
      && nvm_ctrl_change(0x00)
    );
  }

  size_t prog_init (void) {
    return nvm_ctrl_change(0x00);
    104c:	03 c0       	rjmp	.+6      	; 0x1054 <NVM::V2::nvm_ctrl_change(unsigned char)+0x20>
    104e:	81 e0       	ldi	r24, 0x01	; 1
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv2.cpp:114
  }
    1050:	cf 91       	pop	r28
    1052:	08 95       	ret
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv2.cpp:75
    D2PRINTF(" NVM_V2_FLPER=%06lX\r\n", _dwAddr);
    return (
      nvm_ctrl_change(0x08)   /* NVM_V2_CMD_FLPER */
      && UPDI::send_byte(_dwAddr, 0xFF)
      && (nvm_wait() & 0x73) == 0
      && nvm_ctrl_change(0x00)
    1054:	80 e0       	ldi	r24, 0x00	; 0
    1056:	88 db       	rcall	.-2288   	; 0x768 <UPDI::nvm_ctrl(unsigned char)>
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv2.cpp:69
    if (!UPDI::nvm_ctrl(0x00)) return false;
    if (0 != _nvmcmd) return UPDI::nvm_ctrl(_nvmcmd);
    return true;
  }

  bool erase_flash_page (uint32_t _dwAddr) {
    1058:	88 23       	and	r24, r24
    105a:	d1 f3       	breq	.-12     	; 0x1050 <NVM::V2::nvm_ctrl_change(unsigned char)+0x1c>
    105c:	cc 23       	and	r28, r28
    105e:	b9 f3       	breq	.-18     	; 0x104e <NVM::V2::nvm_ctrl_change(unsigned char)+0x1a>
    1060:	8c 2f       	mov	r24, r28
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv2.cpp:72
    D2PRINTF(" NVM_V2_FLPER=%06lX\r\n", _dwAddr);
    return (
      nvm_ctrl_change(0x08)   /* NVM_V2_CMD_FLPER */
    1062:	cf 91       	pop	r28
    1064:	81 cb       	rjmp	.-2302   	; 0x768 <UPDI::nvm_ctrl(unsigned char)>

00001066 <NVM::V2::prog_init()>:
prog_init():
    1066:	80 e0       	ldi	r24, 0x00	; 0
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv2.cpp:75
      && UPDI::send_byte(_dwAddr, 0xFF)
      && (nvm_wait() & 0x73) == 0
      && nvm_ctrl_change(0x00)
    1068:	e5 df       	rcall	.-54     	; 0x1034 <NVM::V2::nvm_ctrl_change(unsigned char)>
    106a:	90 e0       	ldi	r25, 0x00	; 0
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv2.cpp:73

  bool erase_flash_page (uint32_t _dwAddr) {
    D2PRINTF(" NVM_V2_FLPER=%06lX\r\n", _dwAddr);
    return (
      nvm_ctrl_change(0x08)   /* NVM_V2_CMD_FLPER */
      && UPDI::send_byte(_dwAddr, 0xFF)
    106c:	08 95       	ret

0000106e <NVM::V2::write_eeprom(unsigned long, unsigned int) [clone .part.5]>:
_ZN3NVM2V216erase_flash_pageEm.part.1():
    106e:	80 e0       	ldi	r24, 0x00	; 0
    1070:	e1 cf       	rjmp	.-62     	; 0x1034 <NVM::V2::nvm_ctrl_change(unsigned char)>

00001072 <NVM::V2::erase_flash_page(unsigned long)>:
erase_flash_page():
    1072:	cf 92       	push	r12
    1074:	df 92       	push	r13
    1076:	ef 92       	push	r14
    1078:	ff 92       	push	r15
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv2.cpp:74
      && (nvm_wait() & 0x73) == 0
    107a:	6b 01       	movw	r12, r22
    107c:	7c 01       	movw	r14, r24
    107e:	88 e0       	ldi	r24, 0x08	; 8
    1080:	d9 df       	rcall	.-78     	; 0x1034 <NVM::V2::nvm_ctrl_change(unsigned char)>
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv2.cpp:77
      && nvm_ctrl_change(0x00)
    );
  }
    1082:	88 23       	and	r24, r24
    1084:	71 f0       	breq	.+28     	; 0x10a2 <NVM::V2::erase_flash_page(unsigned long)+0x30>
    1086:	4f ef       	ldi	r20, 0xFF	; 255
    1088:	c7 01       	movw	r24, r14
    108a:	b6 01       	movw	r22, r12
    108c:	50 db       	rcall	.-2400   	; 0x72e <UPDI::send_byte(unsigned long, unsigned char)>
    108e:	88 23       	and	r24, r24
    1090:	41 f0       	breq	.+16     	; 0x10a2 <NVM::V2::erase_flash_page(unsigned long)+0x30>
    1092:	be df       	rcall	.-132    	; 0x1010 <NVM::V0::nvm_wait()>
    1094:	83 77       	andi	r24, 0x73	; 115
    1096:	29 f4       	brne	.+10     	; 0x10a2 <NVM::V2::erase_flash_page(unsigned long)+0x30>
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv2.cpp:155
    /* Page erase will not be used if received. */
    /* Instead, page erase is determined by the is_boundary_flash_page function. */
    return 1;
  }

  size_t write_memory (void) {
    1098:	ff 90       	pop	r15
    109a:	ef 90       	pop	r14
    109c:	df 90       	pop	r13
    109e:	cf 90       	pop	r12
    10a0:	e6 cf       	rjmp	.-52     	; 0x106e <NVM::V2::write_eeprom(unsigned long, unsigned int) [clone .part.5]>
    10a2:	80 e0       	ldi	r24, 0x00	; 0
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv2.cpp:159
    uint8_t   m_type = packet.out.bMType;
    uint32_t _dwAddr = packet.out.dwAddr;
    size_t  _wLength = packet.out.dwLength;
    if (bit_is_clear(PGCONF, PGCONF_PROG_bp)) return UPDI::write_userrow();
    10a4:	ff 90       	pop	r15
    10a6:	ef 90       	pop	r14
    10a8:	df 90       	pop	r13
    10aa:	cf 90       	pop	r12
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv2.cpp:179
      _dwAddr += PROG_START;
      return write_words_flash(_dwAddr, _wLength);
    }
    else {
      /* MTYPE_SRAM */
      return UPDI::send_bytes_block(_dwAddr, _wLength);
    10ac:	08 95       	ret

000010ae <NVM::V2::write_memory()>:
write_memory():
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv2.cpp:181
    }
  }
    10ae:	cf 92       	push	r12
    10b0:	df 92       	push	r13
    10b2:	ef 92       	push	r14
    10b4:	ff 92       	push	r15
    10b6:	cf 93       	push	r28
    10b8:	df 93       	push	r29
    10ba:	e9 99       	sbic	0x1d, 1	; 29
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv2.cpp:156
    /* Instead, page erase is determined by the is_boundary_flash_page function. */
    return 1;
  }

  size_t write_memory (void) {
    uint8_t   m_type = packet.out.bMType;
    10bc:	09 c0       	rjmp	.+18     	; 0x10d0 <NVM::V2::write_memory()+0x22>
    10be:	8d da       	rcall	.-2790   	; 0x5da <UPDI::write_userrow()>
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv2.cpp:157
    uint32_t _dwAddr = packet.out.dwAddr;
    10c0:	90 e0       	ldi	r25, 0x00	; 0
    10c2:	df 91       	pop	r29
    10c4:	cf 91       	pop	r28
    10c6:	ff 90       	pop	r15
    10c8:	ef 90       	pop	r14
    10ca:	df 90       	pop	r13
    10cc:	cf 90       	pop	r12
    10ce:	08 95       	ret
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv2.cpp:158
    size_t  _wLength = packet.out.dwLength;
    10d0:	80 91 c5 60 	lds	r24, 0x60C5	; 0x8060c5 <packet+0x7>
    10d4:	c0 90 c6 60 	lds	r12, 0x60C6	; 0x8060c6 <packet+0x8>
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv2.cpp:160
    if (bit_is_clear(PGCONF, PGCONF_PROG_bp)) return UPDI::write_userrow();
    if (m_type == 0x22 || m_type == 0xB2 || m_type == 0xB3 || m_type == 0xC4) {
    10d8:	d0 90 c7 60 	lds	r13, 0x60C7	; 0x8060c7 <packet+0x9>
    10dc:	e0 90 c8 60 	lds	r14, 0x60C8	; 0x8060c8 <packet+0xa>
    10e0:	f0 90 c9 60 	lds	r15, 0x60C9	; 0x8060c9 <packet+0xb>
    10e4:	c0 91 ca 60 	lds	r28, 0x60CA	; 0x8060ca <packet+0xc>
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv2.cpp:105
  }

  bool write_eeprom (uint32_t _dwAddr, size_t _wLength) {
    D2PRINTF(" NVM_V2_EEERWR=%06lX\r\n", _dwAddr);
    return (
      nvm_ctrl_change(0x13)   /* NVM_V2_CMD_EEERWR */
    10e8:	d0 91 cb 60 	lds	r29, 0x60CB	; 0x8060cb <packet+0xd>
    10ec:	82 32       	cpi	r24, 0x22	; 34
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv2.cpp:108
      && UPDI::send_bytes_block_slow(_dwAddr, _wLength)
      && (nvm_wait() & 0x73) == 0
      && nvm_ctrl_change(0x00)
    10ee:	31 f0       	breq	.+12     	; 0x10fc <NVM::V2::write_memory()+0x4e>
    10f0:	9e e4       	ldi	r25, 0x4E	; 78
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv2.cpp:87
    D2PRINTF(" NVM_V2_FLWR=%06lX\r\n", _dwAddr);
    return (
      nvm_ctrl_change(0x02)   /* NVM_V2_CMD_FLWR */
      && UPDI::send_words_block(_dwAddr, _wLength)
      && (nvm_wait() & 0x73) == 0
      && nvm_ctrl_change(0x00)
    10f2:	98 0f       	add	r25, r24
    10f4:	92 30       	cpi	r25, 0x02	; 2
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv2.cpp:106

  bool write_eeprom (uint32_t _dwAddr, size_t _wLength) {
    D2PRINTF(" NVM_V2_EEERWR=%06lX\r\n", _dwAddr);
    return (
      nvm_ctrl_change(0x13)   /* NVM_V2_CMD_EEERWR */
      && UPDI::send_bytes_block_slow(_dwAddr, _wLength)
    10f6:	10 f0       	brcs	.+4      	; 0x10fc <NVM::V2::write_memory()+0x4e>
    10f8:	84 3c       	cpi	r24, 0xC4	; 196
    10fa:	89 f4       	brne	.+34     	; 0x111e <NVM::V2::write_memory()+0x70>
write_eeprom():
    10fc:	83 e1       	ldi	r24, 0x13	; 19
    10fe:	9a df       	rcall	.-204    	; 0x1034 <NVM::V2::nvm_ctrl_change(unsigned char)>
    1100:	81 11       	cpse	r24, r1
    1102:	02 c0       	rjmp	.+4      	; 0x1108 <NVM::V2::write_memory()+0x5a>
write_memory():
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv2.cpp:107
      && (nvm_wait() & 0x73) == 0
    1104:	80 e0       	ldi	r24, 0x00	; 0
    1106:	dc cf       	rjmp	.-72     	; 0x10c0 <NVM::V2::write_memory()+0x12>
write_eeprom():
    1108:	ae 01       	movw	r20, r28
    110a:	c7 01       	movw	r24, r14
    110c:	b6 01       	movw	r22, r12
    110e:	32 db       	rcall	.-2460   	; 0x774 <UPDI::send_bytes_block_slow(unsigned long, unsigned int)>
    1110:	88 23       	and	r24, r24
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv2.cpp:167
      /* MTYPE_LOCK_BITS */
      /* MTYPE_EEPROM */
      /* MTYPE_EEPROM_XMEGA */
      return write_eeprom(_dwAddr, _wLength);
    }
    else if (m_type == 0xC0 || m_type == 0xC5) {
    1112:	c1 f3       	breq	.-16     	; 0x1104 <NVM::V2::write_memory()+0x56>
    1114:	7d df       	rcall	.-262    	; 0x1010 <NVM::V0::nvm_wait()>
    1116:	83 77       	andi	r24, 0x73	; 115
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv2.cpp:92
      && nvm_ctrl_change(0x00)
    );
  }

  bool write_bytes_flash (uint32_t _dwAddr, size_t _wLength) {
    if (SYS::is_boundary_flash_page(_dwAddr)) erase_flash_page(_dwAddr);
    1118:	a9 f7       	brne	.-22     	; 0x1104 <NVM::V2::write_memory()+0x56>
    111a:	a9 df       	rcall	.-174    	; 0x106e <NVM::V2::write_eeprom(unsigned long, unsigned int) [clone .part.5]>
    111c:	d1 cf       	rjmp	.-94     	; 0x10c0 <NVM::V2::write_memory()+0x12>
write_memory():
    111e:	80 3c       	cpi	r24, 0xC0	; 192
    1120:	11 f0       	breq	.+4      	; 0x1126 <NVM::V2::write_memory()+0x78>
    1122:	85 3c       	cpi	r24, 0xC5	; 197
    1124:	b9 f4       	brne	.+46     	; 0x1154 <NVM::V2::write_memory()+0xa6>
write_bytes_flash():
    1126:	c7 01       	movw	r24, r14
    1128:	b6 01       	movw	r22, r12
    112a:	bc dc       	rcall	.-1672   	; 0xaa4 <SYS::is_boundary_flash_page(unsigned long)>
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv2.cpp:95
    D2PRINTF(" NVM_V2_FLWR=%06lX\r\n", _dwAddr);
    return (
      nvm_ctrl_change(0x02)   /* NVM_V2_CMD_FLWR */
    112c:	88 23       	and	r24, r24
    112e:	19 f0       	breq	.+6      	; 0x1136 <NVM::V2::write_memory()+0x88>
    1130:	c7 01       	movw	r24, r14
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv2.cpp:98
      && UPDI::send_bytes_block_slow(_dwAddr, _wLength)
      && (nvm_wait() & 0x73) == 0
      && nvm_ctrl_change(0x00)
    1132:	b6 01       	movw	r22, r12
    1134:	9e df       	rcall	.-196    	; 0x1072 <NVM::V2::erase_flash_page(unsigned long)>
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv2.cpp:96
  bool write_bytes_flash (uint32_t _dwAddr, size_t _wLength) {
    if (SYS::is_boundary_flash_page(_dwAddr)) erase_flash_page(_dwAddr);
    D2PRINTF(" NVM_V2_FLWR=%06lX\r\n", _dwAddr);
    return (
      nvm_ctrl_change(0x02)   /* NVM_V2_CMD_FLWR */
      && UPDI::send_bytes_block_slow(_dwAddr, _wLength)
    1136:	82 e0       	ldi	r24, 0x02	; 2
    1138:	7d df       	rcall	.-262    	; 0x1034 <NVM::V2::nvm_ctrl_change(unsigned char)>
    113a:	88 23       	and	r24, r24
    113c:	19 f3       	breq	.-58     	; 0x1104 <NVM::V2::write_memory()+0x56>
    113e:	ae 01       	movw	r20, r28
    1140:	c7 01       	movw	r24, r14
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv2.cpp:97
      && (nvm_wait() & 0x73) == 0
    1142:	b6 01       	movw	r22, r12
    1144:	17 db       	rcall	.-2514   	; 0x774 <UPDI::send_bytes_block_slow(unsigned long, unsigned int)>
    1146:	88 23       	and	r24, r24
    1148:	e9 f2       	breq	.-70     	; 0x1104 <NVM::V2::write_memory()+0x56>
    114a:	62 df       	rcall	.-316    	; 0x1010 <NVM::V0::nvm_wait()>
    114c:	83 77       	andi	r24, 0x73	; 115
    114e:	d1 f6       	brne	.-76     	; 0x1104 <NVM::V2::write_memory()+0x56>
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv2.cpp:172
    else if (m_type == 0xC0 || m_type == 0xC5) {
      /* MTYPE_FLASH (alias) */
      /* MTYPE_USERSIG (USERROW) */
      return write_bytes_flash(_dwAddr, _wLength);
    }
    else if (m_type == 0xB0) {
    1150:	8e df       	rcall	.-228    	; 0x106e <NVM::V2::write_eeprom(unsigned long, unsigned int) [clone .part.5]>
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv2.cpp:174
      /* MTYPE_FLASH_PAGE (PROGMEM) */
      _dwAddr += PROG_START;
    1152:	b6 cf       	rjmp	.-148    	; 0x10c0 <NVM::V2::write_memory()+0x12>
write_memory():
    1154:	80 3b       	cpi	r24, 0xB0	; 176
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv2.cpp:81
    );
  }

  bool write_words_flash (uint32_t _dwAddr, size_t _wLength) {
    if (bit_is_clear(PGCONF, PGCONF_ERSE_bp)
      && SYS::is_boundary_flash_page(_dwAddr)) erase_flash_page(_dwAddr);
    1156:	f9 f4       	brne	.+62     	; 0x1196 <NVM::V2::write_memory()+0xe8>
    1158:	80 e8       	ldi	r24, 0x80	; 128
    115a:	e8 0e       	add	r14, r24
    115c:	f1 1c       	adc	r15, r1
write_words_flash():
    115e:	ea 99       	sbic	0x1d, 2	; 29
    1160:	08 c0       	rjmp	.+16     	; 0x1172 <NVM::V2::write_memory()+0xc4>
    1162:	c7 01       	movw	r24, r14
    1164:	b6 01       	movw	r22, r12
    1166:	9e dc       	rcall	.-1732   	; 0xaa4 <SYS::is_boundary_flash_page(unsigned long)>
    1168:	88 23       	and	r24, r24
    116a:	19 f0       	breq	.+6      	; 0x1172 <NVM::V2::write_memory()+0xc4>
    116c:	c7 01       	movw	r24, r14
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv2.cpp:84
    D2PRINTF(" NVM_V2_FLWR=%06lX\r\n", _dwAddr);
    return (
      nvm_ctrl_change(0x02)   /* NVM_V2_CMD_FLWR */
    116e:	b6 01       	movw	r22, r12
    1170:	80 df       	rcall	.-256    	; 0x1072 <NVM::V2::erase_flash_page(unsigned long)>
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv2.cpp:87
      && UPDI::send_words_block(_dwAddr, _wLength)
      && (nvm_wait() & 0x73) == 0
      && nvm_ctrl_change(0x00)
    1172:	82 e0       	ldi	r24, 0x02	; 2
    1174:	5f df       	rcall	.-322    	; 0x1034 <NVM::V2::nvm_ctrl_change(unsigned char)>
    1176:	88 23       	and	r24, r24
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv2.cpp:85
    if (bit_is_clear(PGCONF, PGCONF_ERSE_bp)
      && SYS::is_boundary_flash_page(_dwAddr)) erase_flash_page(_dwAddr);
    D2PRINTF(" NVM_V2_FLWR=%06lX\r\n", _dwAddr);
    return (
      nvm_ctrl_change(0x02)   /* NVM_V2_CMD_FLWR */
      && UPDI::send_words_block(_dwAddr, _wLength)
    1178:	09 f4       	brne	.+2      	; 0x117c <NVM::V2::write_memory()+0xce>
    117a:	c4 cf       	rjmp	.-120    	; 0x1104 <NVM::V2::write_memory()+0x56>
    117c:	ae 01       	movw	r20, r28
    117e:	c7 01       	movw	r24, r14
    1180:	b6 01       	movw	r22, r12
    1182:	ed d9       	rcall	.-3110   	; 0x55e <UPDI::send_words_block(unsigned long, unsigned int)>
    1184:	88 23       	and	r24, r24
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv2.cpp:86
      && (nvm_wait() & 0x73) == 0
    1186:	09 f4       	brne	.+2      	; 0x118a <NVM::V2::write_memory()+0xdc>
    1188:	bd cf       	rjmp	.-134    	; 0x1104 <NVM::V2::write_memory()+0x56>
    118a:	42 df       	rcall	.-380    	; 0x1010 <NVM::V0::nvm_wait()>
    118c:	83 77       	andi	r24, 0x73	; 115
    118e:	09 f0       	breq	.+2      	; 0x1192 <NVM::V2::write_memory()+0xe4>
    1190:	b9 cf       	rjmp	.-142    	; 0x1104 <NVM::V2::write_memory()+0x56>
    1192:	6d df       	rcall	.-294    	; 0x106e <NVM::V2::write_eeprom(unsigned long, unsigned int) [clone .part.5]>
    1194:	95 cf       	rjmp	.-214    	; 0x10c0 <NVM::V2::write_memory()+0x12>
write_memory():
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv2.cpp:179
      _dwAddr += PROG_START;
      return write_words_flash(_dwAddr, _wLength);
    }
    else {
      /* MTYPE_SRAM */
      return UPDI::send_bytes_block(_dwAddr, _wLength);
    1196:	ae 01       	movw	r20, r28
    1198:	c7 01       	movw	r24, r14
    119a:	b6 01       	movw	r22, r12
    119c:	8d da       	rcall	.-2790   	; 0x6b8 <UPDI::send_bytes_block(unsigned long, unsigned int)>
    119e:	90 cf       	rjmp	.-224    	; 0x10c0 <NVM::V2::write_memory()+0x12>

000011a0 <NVM::V1::write_memory()>:
_ZN3NVM2V112write_memoryEv():
    11a0:	90 e0       	ldi	r25, 0x00	; 0
    11a2:	80 e0       	ldi	r24, 0x00	; 0
    11a4:	08 95       	ret

000011a6 <NVM::V1::read_memory()>:
_ZN3NVM2V111read_memoryEv():
    11a6:	90 e0       	ldi	r25, 0x00	; 0
    11a8:	80 e0       	ldi	r24, 0x00	; 0
    11aa:	08 95       	ret

000011ac <NVM::V1::erase_memory()>:
_ZN3NVM2V112erase_memoryEv():
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv0.cpp:142
    }
    /* Page erase will not be used if received. */
    return 1;
  }

  size_t write_memory (void) {
    11ac:	90 e0       	ldi	r25, 0x00	; 0
    11ae:	80 e0       	ldi	r24, 0x00	; 0
    11b0:	08 95       	ret

000011b2 <NVM::V0::write_memory()>:
write_memory():
    11b2:	4f 92       	push	r4
    11b4:	5f 92       	push	r5
    11b6:	6f 92       	push	r6
    11b8:	7f 92       	push	r7
    11ba:	af 92       	push	r10
    11bc:	bf 92       	push	r11
    11be:	cf 92       	push	r12
    11c0:	df 92       	push	r13
    11c2:	ef 92       	push	r14
    11c4:	ff 92       	push	r15
    11c6:	0f 93       	push	r16
    11c8:	1f 93       	push	r17
    11ca:	cf 93       	push	r28
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv0.cpp:146
    uint8_t  m_type = packet.out.bMType;
    uint16_t _wAddr = packet.out.dwAddr;
    size_t _wLength = packet.out.dwLength;
    if (bit_is_clear(PGCONF, PGCONF_PROG_bp)) return UPDI::write_userrow();
    11cc:	df 93       	push	r29
    11ce:	00 d0       	rcall	.+0      	; 0x11d0 <NVM::V0::write_memory()+0x1e>
    11d0:	00 d0       	rcall	.+0      	; 0x11d2 <NVM::V0::write_memory()+0x20>
    11d2:	cd b7       	in	r28, 0x3d	; 61
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv0.cpp:166
      _wAddr += Device_Descriptor.UPDI.prog_base;
      return write_flash(_wAddr, _wLength);
    }
    else {
      /* MTYPE_SRAM */
      return UPDI::send_bytes_block(_wAddr, _wLength);
    11d4:	de b7       	in	r29, 0x3e	; 62
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv0.cpp:168
    }
  }
    11d6:	e9 99       	sbic	0x1d, 1	; 29
    11d8:	14 c0       	rjmp	.+40     	; 0x1202 <NVM::V0::write_memory()+0x50>
    11da:	ff d9       	rcall	.-3074   	; 0x5da <UPDI::write_userrow()>
    11dc:	90 e0       	ldi	r25, 0x00	; 0
    11de:	24 96       	adiw	r28, 0x04	; 4
    11e0:	cd bf       	out	0x3d, r28	; 61
    11e2:	de bf       	out	0x3e, r29	; 62
    11e4:	df 91       	pop	r29
    11e6:	cf 91       	pop	r28
    11e8:	1f 91       	pop	r17
    11ea:	0f 91       	pop	r16
    11ec:	ff 90       	pop	r15
    11ee:	ef 90       	pop	r14
    11f0:	df 90       	pop	r13
    11f2:	cf 90       	pop	r12
    11f4:	bf 90       	pop	r11
    11f6:	af 90       	pop	r10
    11f8:	7f 90       	pop	r7
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv0.cpp:143
    /* Page erase will not be used if received. */
    return 1;
  }

  size_t write_memory (void) {
    uint8_t  m_type = packet.out.bMType;
    11fa:	6f 90       	pop	r6
    11fc:	5f 90       	pop	r5
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv0.cpp:144
    uint16_t _wAddr = packet.out.dwAddr;
    11fe:	4f 90       	pop	r4
    1200:	08 95       	ret
    1202:	80 91 c5 60 	lds	r24, 0x60C5	; 0x8060c5 <packet+0x7>
    1206:	c0 90 c6 60 	lds	r12, 0x60C6	; 0x8060c6 <packet+0x8>
    120a:	d0 90 c7 60 	lds	r13, 0x60C7	; 0x8060c7 <packet+0x9>
    120e:	e0 90 c8 60 	lds	r14, 0x60C8	; 0x8060c8 <packet+0xa>
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv0.cpp:145
    size_t _wLength = packet.out.dwLength;
    1212:	f0 90 c9 60 	lds	r15, 0x60C9	; 0x8060c9 <packet+0xb>
    1216:	96 01       	movw	r18, r12
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv0.cpp:147
    if (bit_is_clear(PGCONF, PGCONF_PROG_bp)) return UPDI::write_userrow();
    if (m_type == 0xB2 || m_type == 0xB3) {
    1218:	00 91 ca 60 	lds	r16, 0x60CA	; 0x8060ca <packet+0xc>
    121c:	10 91 cb 60 	lds	r17, 0x60CB	; 0x8060cb <packet+0xd>
    1220:	9e e4       	ldi	r25, 0x4E	; 78
    1222:	98 0f       	add	r25, r24
    1224:	92 30       	cpi	r25, 0x02	; 2
    1226:	08 f0       	brcs	.+2      	; 0x122a <NVM::V0::write_memory()+0x78>
    1228:	44 c0       	rjmp	.+136    	; 0x12b2 <NVM::V0::write_memory()+0x100>
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv0.cpp:73
      uint16_t data;  /* NVMCTRL_REG_DATA */
      uint16_t addr;  /* NVMCTRL_REG_ADDR */
    } fuses;
    for (size_t _i = 0; _i < _wLength; _i++) {
      fuses.data = packet.out.memData[_i];
      fuses.addr = _wAddr + _i;
    122a:	8e eb       	ldi	r24, 0xBE	; 190
    122c:	e8 2e       	mov	r14, r24
    122e:	80 e6       	ldi	r24, 0x60	; 96
    1230:	f8 2e       	mov	r15, r24
write_fuse():
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv0.cpp:71
  bool write_fuse (uint16_t _wAddr, size_t _wLength) {
    struct fuse_packet_t {
      uint16_t data;  /* NVMCTRL_REG_DATA */
      uint16_t addr;  /* NVMCTRL_REG_ADDR */
    } fuses;
    for (size_t _i = 0; _i < _wLength; _i++) {
    1232:	c9 01       	movw	r24, r18
    1234:	8e 5b       	subi	r24, 0xBE	; 190
    1236:	90 46       	sbci	r25, 0x60	; 96
    1238:	6c 01       	movw	r12, r24
    123a:	c7 01       	movw	r24, r14
    123c:	8e 5b       	subi	r24, 0xBE	; 190
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv0.cpp:72
      fuses.data = packet.out.memData[_i];
    123e:	90 46       	sbci	r25, 0x60	; 96
    1240:	80 17       	cp	r24, r16
    1242:	91 07       	cpc	r25, r17
    1244:	a0 f5       	brcc	.+104    	; 0x12ae <NVM::V0::write_memory()+0xfc>
    1246:	f7 01       	movw	r30, r14
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv0.cpp:73
      fuses.addr = _wAddr + _i;
    1248:	81 89       	ldd	r24, Z+17	; 0x11
    124a:	90 e0       	ldi	r25, 0x00	; 0
    124c:	89 83       	std	Y+1, r24	; 0x01
    124e:	9a 83       	std	Y+2, r25	; 0x02
    1250:	c6 01       	movw	r24, r12
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv0.cpp:75
      D2PRINTF(" NVM_V0_WFU=%04X<%02X\r\n", fuses.addr, fuses.data);
      nvm_wait();
    1252:	8e 0d       	add	r24, r14
    1254:	9f 1d       	adc	r25, r15
    1256:	8b 83       	std	Y+3, r24	; 0x03
    1258:	9c 83       	std	Y+4, r25	; 0x04
    125a:	da de       	rcall	.-588    	; 0x1010 <NVM::V0::nvm_wait()>
    125c:	ce 01       	movw	r24, r28
    125e:	01 96       	adiw	r24, 0x01	; 1
    1260:	5c 01       	movw	r10, r24
    1262:	66 e0       	ldi	r22, 0x06	; 6
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:202
      && clear_rsd();
  }

  bool send_bytes_data (uint32_t _dwAddr, uint8_t* _data, size_t _wLength) {
    for (size_t _i = 0; _i < _wLength; _i++) {
      if (!send_byte(_dwAddr++, *_data++)) return false;
    1264:	70 e1       	ldi	r23, 0x10	; 16
    1266:	80 e0       	ldi	r24, 0x00	; 0
    1268:	90 e0       	ldi	r25, 0x00	; 0
send_bytes_data():
    126a:	f5 01       	movw	r30, r10
    126c:	41 91       	ld	r20, Z+
    126e:	5f 01       	movw	r10, r30
    1270:	2b 01       	movw	r4, r22
    1272:	3c 01       	movw	r6, r24
    1274:	ff ef       	ldi	r31, 0xFF	; 255
    1276:	4f 1a       	sub	r4, r31
    1278:	5f 0a       	sbc	r5, r31
    127a:	6f 0a       	sbc	r6, r31
    127c:	7f 0a       	sbc	r7, r31
    127e:	57 da       	rcall	.-2898   	; 0x72e <UPDI::send_byte(unsigned long, unsigned char)>
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv0.cpp:78
      if (!(UPDI::send_bytes_data(NVM_DATA, (uint8_t*)&fuses, 4)
        && UPDI::nvm_ctrl(0x07)   /* NVM_CMD_WFU */
        && (nvm_wait() & 7) == 0)) return false;
    1280:	81 11       	cpse	r24, r1
    1282:	02 c0       	rjmp	.+4      	; 0x1288 <NVM::V0::write_memory()+0xd6>
write_memory():
    1284:	80 e0       	ldi	r24, 0x00	; 0
    1286:	aa cf       	rjmp	.-172    	; 0x11dc <NVM::V0::write_memory()+0x2a>
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:201
      && send_bytes(&packet.out.memData[0], _wLength & ~1)
      && clear_rsd();
  }

  bool send_bytes_data (uint32_t _dwAddr, uint8_t* _data, size_t _wLength) {
    for (size_t _i = 0; _i < _wLength; _i++) {
    1288:	c3 01       	movw	r24, r6
    128a:	b2 01       	movw	r22, r4
send_bytes_data():
    128c:	6a 30       	cpi	r22, 0x0A	; 10
    128e:	20 e1       	ldi	r18, 0x10	; 16
    1290:	72 07       	cpc	r23, r18
    1292:	81 05       	cpc	r24, r1
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv0.cpp:77
      fuses.data = packet.out.memData[_i];
      fuses.addr = _wAddr + _i;
      D2PRINTF(" NVM_V0_WFU=%04X<%02X\r\n", fuses.addr, fuses.data);
      nvm_wait();
      if (!(UPDI::send_bytes_data(NVM_DATA, (uint8_t*)&fuses, 4)
        && UPDI::nvm_ctrl(0x07)   /* NVM_CMD_WFU */
    1294:	91 05       	cpc	r25, r1
    1296:	49 f7       	brne	.-46     	; 0x126a <NVM::V0::write_memory()+0xb8>
write_fuse():
    1298:	87 e0       	ldi	r24, 0x07	; 7
    129a:	66 da       	rcall	.-2868   	; 0x768 <UPDI::nvm_ctrl(unsigned char)>
    129c:	88 23       	and	r24, r24
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv0.cpp:78
        && (nvm_wait() & 7) == 0)) return false;
    129e:	91 f3       	breq	.-28     	; 0x1284 <NVM::V0::write_memory()+0xd2>
    12a0:	b7 de       	rcall	.-658    	; 0x1010 <NVM::V0::nvm_wait()>
    12a2:	9f ef       	ldi	r25, 0xFF	; 255
    12a4:	e9 1a       	sub	r14, r25
    12a6:	f9 0a       	sbc	r15, r25
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv0.cpp:76
    for (size_t _i = 0; _i < _wLength; _i++) {
      fuses.data = packet.out.memData[_i];
      fuses.addr = _wAddr + _i;
      D2PRINTF(" NVM_V0_WFU=%04X<%02X\r\n", fuses.addr, fuses.data);
      nvm_wait();
      if (!(UPDI::send_bytes_data(NVM_DATA, (uint8_t*)&fuses, 4)
    12a8:	87 70       	andi	r24, 0x07	; 7
    12aa:	39 f2       	breq	.-114    	; 0x123a <NVM::V0::write_memory()+0x88>
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv0.cpp:80
        && UPDI::nvm_ctrl(0x07)   /* NVM_CMD_WFU */
        && (nvm_wait() & 7) == 0)) return false;
    }
    return true;
    12ac:	eb cf       	rjmp	.-42     	; 0x1284 <NVM::V0::write_memory()+0xd2>
write_memory():
    12ae:	81 e0       	ldi	r24, 0x01	; 1
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv0.cpp:152
    if (m_type == 0xB2 || m_type == 0xB3) {
      /* MTYPE_FUSE_BITS */
      /* MTYPE_LOCK_BITS */
      return write_fuse(_wAddr, _wLength);
    }
    else if (m_type == 0x22 || m_type == 0xC4 || m_type == 0xC5) {
    12b0:	95 cf       	rjmp	.-214    	; 0x11dc <NVM::V0::write_memory()+0x2a>
    12b2:	82 32       	cpi	r24, 0x22	; 34
    12b4:	21 f0       	breq	.+8      	; 0x12be <NVM::V0::write_memory()+0x10c>
    12b6:	9c e3       	ldi	r25, 0x3C	; 60
    12b8:	98 0f       	add	r25, r24
    12ba:	92 30       	cpi	r25, 0x02	; 2
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv0.cpp:99
    );
  }

  bool write_eeprom (uint16_t _wAddr, size_t _wLength) {
    D2PRINTF(" NVM_V0_ERWP=%04X\r\n", _wAddr);
    nvm_wait();
    12bc:	58 f4       	brcc	.+22     	; 0x12d4 <NVM::V0::write_memory()+0x122>
write_eeprom():
    12be:	a8 de       	rcall	.-688    	; 0x1010 <NVM::V0::nvm_wait()>
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv0.cpp:101
    return (
      UPDI::send_bytes_block(_wAddr, _wLength)
    12c0:	c7 01       	movw	r24, r14
    12c2:	b6 01       	movw	r22, r12
    12c4:	88 27       	eor	r24, r24
    12c6:	99 27       	eor	r25, r25
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv0.cpp:91
      nvm_wait();
      UPDI::nvm_ctrl(0x04);       /* NVM_CMD_PBC */
    }
    nvm_wait();
    return (
      UPDI::send_bytes_block(_wAddr, _wLength)
    12c8:	a8 01       	movw	r20, r16
write_flash():
    12ca:	f6 d9       	rcall	.-3092   	; 0x6b8 <UPDI::send_bytes_block(unsigned long, unsigned int)>
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv0.cpp:93
      && UPDI::nvm_ctrl(0x03)     /* NVM_CMD_ERWP */
      && (nvm_wait() & 7) == 0
    12cc:	81 11       	cpse	r24, r1
    12ce:	1b c0       	rjmp	.+54     	; 0x1306 <NVM::V0::write_memory()+0x154>
    12d0:	90 e0       	ldi	r25, 0x00	; 0
    12d2:	21 c0       	rjmp	.+66     	; 0x1316 <NVM::V0::write_memory()+0x164>
write_memory():
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv0.cpp:158
      /* MTYPE_EEPROM */
      /* MTYPE_EEPROM_XMEGA */
      /* MTYPE_USERSIG (USERROW) */
      return write_eeprom(_wAddr, _wLength);
    }
    else if (m_type == 0xB0 || m_type == 0xC0) {
    12d4:	80 3b       	cpi	r24, 0xB0	; 176
    12d6:	11 f0       	breq	.+4      	; 0x12dc <NVM::V0::write_memory()+0x12a>
    12d8:	80 3c       	cpi	r24, 0xC0	; 192
    12da:	f9 f4       	brne	.+62     	; 0x131a <NVM::V0::write_memory()+0x168>
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv0.cpp:161
      /* MTYPE_FLASH_PAGE (PROGMEM) */
      /* MTYPE_FLASH (alias) */
      _wAddr += Device_Descriptor.UPDI.prog_base;
    12dc:	60 91 8e 60 	lds	r22, 0x608E	; 0x80608e <Device_Descriptor>
    12e0:	70 91 8f 60 	lds	r23, 0x608F	; 0x80608f <Device_Descriptor+0x1>
    12e4:	c6 0e       	add	r12, r22
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv0.cpp:85
    return true;
  }

  bool write_flash (uint16_t _wAddr, size_t _wLength) {
    D2PRINTF(" NVM_V0_ERWP=%04X\r\n", _wAddr);
    if (SYS::is_boundary_flash_page(_wAddr)) {
    12e6:	d7 1e       	adc	r13, r23
write_flash():
    12e8:	f1 2c       	mov	r15, r1
    12ea:	e1 2c       	mov	r14, r1
    12ec:	c7 01       	movw	r24, r14
    12ee:	b6 01       	movw	r22, r12
    12f0:	d9 db       	rcall	.-2126   	; 0xaa4 <SYS::is_boundary_flash_page(unsigned long)>
    12f2:	88 23       	and	r24, r24
    12f4:	19 f0       	breq	.+6      	; 0x12fc <NVM::V0::write_memory()+0x14a>
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv0.cpp:86
      nvm_wait();
    12f6:	8c de       	rcall	.-744    	; 0x1010 <NVM::V0::nvm_wait()>
    12f8:	84 e0       	ldi	r24, 0x04	; 4
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv0.cpp:87
      UPDI::nvm_ctrl(0x04);       /* NVM_CMD_PBC */
    12fa:	36 da       	rcall	.-2964   	; 0x768 <UPDI::nvm_ctrl(unsigned char)>
    12fc:	89 de       	rcall	.-750    	; 0x1010 <NVM::V0::nvm_wait()>
    12fe:	a8 01       	movw	r20, r16
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv0.cpp:89
    }
    nvm_wait();
    1300:	c7 01       	movw	r24, r14
    1302:	b6 01       	movw	r22, r12
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv0.cpp:91
    return (
      UPDI::send_bytes_block(_wAddr, _wLength)
    1304:	e2 cf       	rjmp	.-60     	; 0x12ca <NVM::V0::write_memory()+0x118>
    1306:	83 e0       	ldi	r24, 0x03	; 3
    1308:	2f da       	rcall	.-2978   	; 0x768 <UPDI::nvm_ctrl(unsigned char)>
    130a:	88 23       	and	r24, r24
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv0.cpp:92
      && UPDI::nvm_ctrl(0x03)     /* NVM_CMD_ERWP */
    130c:	09 f3       	breq	.-62     	; 0x12d0 <NVM::V0::write_memory()+0x11e>
    130e:	80 de       	rcall	.-768    	; 0x1010 <NVM::V0::nvm_wait()>
    1310:	87 70       	andi	r24, 0x07	; 7
    1312:	91 e0       	ldi	r25, 0x01	; 1
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv0.cpp:93
      && (nvm_wait() & 7) == 0
    1314:	e9 f6       	brne	.-70     	; 0x12d0 <NVM::V0::write_memory()+0x11e>
write_memory():
    1316:	89 2f       	mov	r24, r25
    1318:	61 cf       	rjmp	.-318    	; 0x11dc <NVM::V0::write_memory()+0x2a>
    131a:	c7 01       	movw	r24, r14
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv0.cpp:162
    }
    else if (m_type == 0xB0 || m_type == 0xC0) {
      /* MTYPE_FLASH_PAGE (PROGMEM) */
      /* MTYPE_FLASH (alias) */
      _wAddr += Device_Descriptor.UPDI.prog_base;
      return write_flash(_wAddr, _wLength);
    131c:	b6 01       	movw	r22, r12
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv0.cpp:166
    }
    else {
      /* MTYPE_SRAM */
      return UPDI::send_bytes_block(_wAddr, _wLength);
    131e:	88 27       	eor	r24, r24
    1320:	99 27       	eor	r25, r25
    1322:	a8 01       	movw	r20, r16
    1324:	c9 d9       	rcall	.-3182   	; 0x6b8 <UPDI::send_bytes_block(unsigned long, unsigned int)>
    1326:	5a cf       	rjmp	.-332    	; 0x11dc <NVM::V0::write_memory()+0x2a>

00001328 <USB::setup_device(bool) [clone .part.2]>:
_ZN3USB12setup_deviceEb.part.2():
    1328:	cf 93       	push	r28
    132a:	df 93       	push	r29
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:234
    EP_MEM.cci_header.wIndex        = 1;    /* Interface#1 */
    EP_MEM.cci_header.wLength       = 2;
    EP_MEM.cci_wValue               = _state;
  }

  void setup_device (bool _force) {
    132c:	c0 e0       	ldi	r28, 0x00	; 0
    132e:	dc e0       	ldi	r29, 0x0C	; 12
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:238
    if (_led_mode != 3) SYS::LED_Flash();
    USB0_ADDR = 0;
    if (USB0_CTRLA || _force) {
      USB0_CTRLA = 0;
    1330:	18 82       	st	Y, r1
    1332:	10 92 04 0c 	sts	0x0C04, r1	; 0x800c04 <__TEXT_REGION_LENGTH__+0x7f0c04>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:239
      USB0_FIFOWP = 0;
    1336:	8e e2       	ldi	r24, 0x2E	; 46
    1338:	94 e6       	ldi	r25, 0x64	; 100
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:240
      USB0_EPPTR = (uint16_t)&EP_TABLE.EP;
    133a:	80 93 06 0c 	sts	0x0C06, r24	; 0x800c06 <__TEXT_REGION_LENGTH__+0x7f0c06>
    133e:	90 93 07 0c 	sts	0x0C07, r25	; 0x800c07 <__TEXT_REGION_LENGTH__+0x7f0c07>
    1342:	81 e0       	ldi	r24, 0x01	; 1
    1344:	80 93 01 0c 	sts	0x0C01, r24	; 0x800c01 <__TEXT_REGION_LENGTH__+0x7f0c01>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:241
      USB0_CTRLB = USB_ATTACH_bm;
    1348:	1c ba       	out	0x1c, r1	; 28
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:243
      GPCONF = 0;
      PGCONF = 0;
    134a:	1d ba       	out	0x1d, r1	; 29
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:244
      RXSTAT = 0;
    134c:	1e ba       	out	0x1e, r1	; 30
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:245
      _send_break = 0;
    134e:	10 92 23 64 	sts	0x6423, r1	; 0x806423 <_send_break>
    1352:	10 92 24 64 	sts	0x6424, r1	; 0x806424 <_send_break+0x1>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:246
      _send_count = 0;
    1356:	10 92 22 64 	sts	0x6422, r1	; 0x806422 <_send_count>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:248
      _recv_count = 0;
      _set_config = 0;
    135a:	10 92 21 64 	sts	0x6421, r1	; 0x806421 <_recv_count>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:249
      _sof_count = 0;
    135e:	10 92 20 64 	sts	0x6420, r1	; 0x806420 <_set_config>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:250
      memcpy_P(&EP_TABLE, &ep_init, sizeof(EP_TABLE_t));
    1362:	10 92 1f 64 	sts	0x641F, r1	; 0x80641f <_sof_count>
    1366:	4a e4       	ldi	r20, 0x4A	; 74
    1368:	50 e0       	ldi	r21, 0x00	; 0
    136a:	61 ed       	ldi	r22, 0xD1	; 209
    136c:	71 e0       	ldi	r23, 0x01	; 1
    136e:	86 e2       	ldi	r24, 0x26	; 38
    1370:	94 e6       	ldi	r25, 0x64	; 100
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:225
    if (_size) memcpy_P(_buffer, _pgmem, _size);
    return _size;
  }

  void set_cci_data (uint16_t _state) {
    _set_serial_state = _state;
    1372:	0e 94 5b 15 	call	0x2ab6	; 0x2ab6 <memcpy_P>
set_cci_data():
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:226
    EP_MEM.cci_header.bmRequestType = 0xA1; /* REQTYPE_DIRECTION | REQTYPE_CLASS | RECIPIENT_INTERFACE */
    1376:	10 92 1e 64 	sts	0x641E, r1	; 0x80641e <_set_serial_state>
    137a:	e6 e0       	ldi	r30, 0x06	; 6
    137c:	f3 e6       	ldi	r31, 0x63	; 99
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:227
    EP_MEM.cci_header.bRequest      = 0x20; /* CDC_REQ_SerialState */
    137e:	81 ea       	ldi	r24, 0xA1	; 161
    1380:	80 87       	std	Z+8, r24	; 0x08
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:228
    EP_MEM.cci_header.wValue        = 0;
    1382:	80 e2       	ldi	r24, 0x20	; 32
    1384:	81 87       	std	Z+9, r24	; 0x09
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:229
    EP_MEM.cci_header.wIndex        = 1;    /* Interface#1 */
    1386:	12 86       	std	Z+10, r1	; 0x0a
    1388:	13 86       	std	Z+11, r1	; 0x0b
    138a:	81 e0       	ldi	r24, 0x01	; 1
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:230
    EP_MEM.cci_header.wLength       = 2;
    138c:	90 e0       	ldi	r25, 0x00	; 0
    138e:	84 87       	std	Z+12, r24	; 0x0c
    1390:	95 87       	std	Z+13, r25	; 0x0d
    1392:	82 e0       	ldi	r24, 0x02	; 2
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:231
    EP_MEM.cci_wValue               = _state;
    1394:	90 e0       	ldi	r25, 0x00	; 0
    1396:	86 87       	std	Z+14, r24	; 0x0e
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:252
      _recv_count = 0;
      _set_config = 0;
      _sof_count = 0;
      memcpy_P(&EP_TABLE, &ep_init, sizeof(EP_TABLE_t));
      set_cci_data(0x00);
      USB0_CTRLA = USB_ENABLE_bm | (USB_ENDPOINTS_MAX - 1);
    1398:	97 87       	std	Z+15, r25	; 0x0f
    139a:	10 8a       	std	Z+16, r1	; 0x10
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:254
    }
  }
    139c:	11 8a       	std	Z+17, r1	; 0x11
_ZN3USB12setup_deviceEb.part.2():
    139e:	83 e8       	ldi	r24, 0x83	; 131
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/modernAVR/0.2.14/cores/modernAVR/api/delay_busywait.h:33
static __inline__ __attribute__((__always_inline__)) void delay_micros (uint32_t _us);
static __inline__ __attribute__((__always_inline__)) void delay_millis (uint32_t _ms);

void delay_micros (uint32_t _us) {
  if (F_CPU >= 1000000L) {
    __builtin_avr_delay_cycles((F_CPU / 1000000L) * _us);
    13a0:	88 83       	st	Y, r24
    13a2:	df 91       	pop	r29
    13a4:	cf 91       	pop	r28
    13a6:	08 95       	ret

000013a8 <USART::disable_vcp()>:
delay_micros():
/Users/askn/Collaborator/UPDI4AVR-USB/src/usart.cpp:55
  /*** Stop the VCP and release the ports in use. ***/
  void disable_vcp (void) {
    D1PRINTF(" UART=OFF\r\n");
    /* Allow time to move USART0_TXDATA */
    delay_micros(4);
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    13a8:	8a e1       	ldi	r24, 0x1A	; 26
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/tools/avr-gcc/7.3.0-avr8-gnu-toolchain/avr/include/util/atomic.h:50
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    13aa:	8a 95       	dec	r24
/Users/askn/Collaborator/UPDI4AVR-USB/src/usart.cpp:58
      /* Simply clearing the CTRLB does not disable the USART completely.                    */
      /* This errata is not documented for the AVR-DU, but is the same as for tinyAVR-0 etc. */
      USART0_CTRLB = 0;
    13ac:	f1 f7       	brne	.-4      	; 0x13aa <USART::disable_vcp()+0x2>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usart.cpp:59
      USART0_CTRLA = 0;
    13ae:	00 c0       	rjmp	.+0      	; 0x13b0 <USART::disable_vcp()+0x8>
disable_vcp():
    13b0:	8f b7       	in	r24, 0x3f	; 63
__iCliRetVal():
/Users/askn/Collaborator/UPDI4AVR-USB/src/usart.cpp:60
      RXSTAT = 0;
    13b2:	f8 94       	cli
disable_vcp():
/Users/askn/Collaborator/UPDI4AVR-USB/src/usart.cpp:61
      RXDATA = 0;
    13b4:	10 92 06 08 	sts	0x0806, r1	; 0x800806 <__TEXT_REGION_LENGTH__+0x7f0806>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usart.cpp:63
      PGCONF = 0;
      PORTMUX_USARTROUTEA = PORTMUX_USART_VCP;
    13b8:	10 92 05 08 	sts	0x0805, r1	; 0x800805 <__TEXT_REGION_LENGTH__+0x7f0805>
    13bc:	1e ba       	out	0x1e, r1	; 30
/Users/askn/Collaborator/UPDI4AVR-USB/src/usart.cpp:64
      bit_clear(GPCONF, GPCONF_VCP_bp);
    13be:	1f ba       	out	0x1f, r1	; 31
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/tools/avr-gcc/7.3.0-avr8-gnu-toolchain/avr/include/util/atomic.h:70
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    13c0:	1d ba       	out	0x1d, r1	; 29
/Users/askn/Collaborator/UPDI4AVR-USB/src/usart.cpp:66
    }
    pinModeMacro(PIN_PG_TDAT, INPUT_PULLUP);  /* open-drain */
    13c2:	92 e1       	ldi	r25, 0x12	; 18
    13c4:	90 93 e2 05 	sts	0x05E2, r25	; 0x8005e2 <__TEXT_REGION_LENGTH__+0x7f05e2>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usart.cpp:70
    /* TXD changes to INPUT when USART is disabled. */
    /* Force OUTPUT to maintain BREAK state.        */
  #ifdef CONFIG_VCP_TXD_ODM
    pinModeMacro(PIN_VCP_TXD, INPUT_PULLUP);  /* open-drain */
    13c8:	e1 98       	cbi	0x1c, 1	; 28
__iRestore():
    13ca:	8f bf       	out	0x3f, r24	; 63
disable_vcp():
    13cc:	00 98       	cbi	0x00, 0	; 0
/Users/askn/Collaborator/UPDI4AVR-USB/src/usart.cpp:71
    openDrainWriteMacro(PIN_VCP_TXD, HIGH);
    13ce:	88 e0       	ldi	r24, 0x08	; 8
/Users/askn/Collaborator/UPDI4AVR-USB/src/usart.cpp:75
  #else
    pinModeMacro(PIN_VCP_TXD, OUTPUT);        /* push-pull : There are problems when using TPI. */
  #endif
  }
    13d0:	80 93 10 04 	sts	0x0410, r24	; 0x800410 <__TEXT_REGION_LENGTH__+0x7f0410>
/Users/askn/Collaborator/UPDI4AVR-USB/src/sys.cpp:198

  void LED_TCB1 (uint8_t _mode, uint16_t _ccmp) {
    if (_led_mode != _mode) {
    13d4:	02 98       	cbi	0x00, 2	; 0
    13d6:	80 93 12 04 	sts	0x0412, r24	; 0x800412 <__TEXT_REGION_LENGTH__+0x7f0412>
/Users/askn/Collaborator/UPDI4AVR-USB/src/sys.cpp:199
      TCA0_SPLIT_CTRLA = 0;
    13da:	02 98       	cbi	0x00, 2	; 0
/Users/askn/Collaborator/UPDI4AVR-USB/src/sys.cpp:200
      TCB1_CNTL = 0;
    13dc:	08 95       	ret

000013de <USART::setup()>:
LED_TCB1():
    13de:	80 91 7d 60 	lds	r24, 0x607D	; 0x80607d <_led_mode>
/Users/askn/Collaborator/UPDI4AVR-USB/src/sys.cpp:201
      TCB1_CCMP = _ccmp;
    13e2:	84 30       	cpi	r24, 0x04	; 4
    13e4:	81 f0       	breq	.+32     	; 0x1406 <USART::setup()+0x28>
    13e6:	10 92 00 0a 	sts	0x0A00, r1	; 0x800a00 <__TEXT_REGION_LENGTH__+0x7f0a00>
/Users/askn/Collaborator/UPDI4AVR-USB/src/sys.cpp:202
      TCB1_CTRLA = TCB_RUNSTDBY_bm | TCB_ENABLE_bm | TCB_CLKSEL_EVENT_gc;
    13ea:	10 92 1a 0b 	sts	0x0B1A, r1	; 0x800b1a <__TEXT_REGION_LENGTH__+0x7f0b1a>
/Users/askn/Collaborator/UPDI4AVR-USB/src/sys.cpp:203
      _led_mode = _mode;
    13ee:	82 e2       	ldi	r24, 0x22	; 34
    13f0:	91 e1       	ldi	r25, 0x11	; 17
    13f2:	80 93 1c 0b 	sts	0x0B1C, r24	; 0x800b1c <__TEXT_REGION_LENGTH__+0x7f0b1c>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usart.cpp:26

namespace USART {

  void setup (void) {
    SYS::LED_Fast();
    disable_vcp();
    13f6:	90 93 1d 0b 	sts	0x0B1D, r25	; 0x800b1d <__TEXT_REGION_LENGTH__+0x7f0b1d>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usart.cpp:27
    pinModeMacro(PIN_VCP_RXD, INPUT_PULLUP);  /* USART0_DEFAULT or USART0_ALT2 */
    13fa:	8f e4       	ldi	r24, 0x4F	; 79
    13fc:	80 93 10 0b 	sts	0x0B10, r24	; 0x800b10 <__TEXT_REGION_LENGTH__+0x7f0b10>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usart.cpp:28
    pinModeMacro(PIN_PG_TRST, INPUT_PULLUP);  /* USART0_ALT3 or USART0_DEFAULT */
    1400:	84 e0       	ldi	r24, 0x04	; 4
    1402:	80 93 7d 60 	sts	0x607D, r24	; 0x80607d <_led_mode>
setup():
/Users/askn/Collaborator/UPDI4AVR-USB/src/usart.cpp:29
  }
    1406:	d0 df       	rcall	.-96     	; 0x13a8 <USART::disable_vcp()>
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:391
    nop();
    openDrainWriteMacro(PIN_PG_TRST, HIGH);
    return _result;
  }

  size_t enter_progmode (void) {
    1408:	03 98       	cbi	0x00, 3	; 0
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:392
    if (bit_is_set(PGCONF, PGCONF_PROG_bp)) return 1;
    140a:	88 e0       	ldi	r24, 0x08	; 8
    140c:	80 93 13 04 	sts	0x0413, r24	; 0x800413 <__TEXT_REGION_LENGTH__+0x7f0413>
    1410:	01 98       	cbi	0x00, 1	; 0
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:393
    if (!set_nvmprog_key()) return 0;
    1412:	80 93 11 04 	sts	0x0411, r24	; 0x800411 <__TEXT_REGION_LENGTH__+0x7f0411>
    1416:	08 95       	ret

00001418 <UPDI::enter_progmode()>:
enter_progmode():
    1418:	cf 93       	push	r28
    141a:	8d b3       	in	r24, 0x1d	; 29
    141c:	c8 2f       	mov	r28, r24
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:406
      sys_status();
    } while (bit_is_clear(RXDATA, 3));  /* wait set PROGSTART */
    D1PRINTF(" PROGSTART=%02X\r\n", RXDATA);
    bit_set(PGCONF, PGCONF_PROG_bp);
    return (*Command_Table.prog_init)();
  }
    141e:	c2 70       	andi	r28, 0x02	; 2
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:399
    uint8_t _count = 0;
    do {
      /* Do not wait for the global timeout to ensure that LOCKSTAT cannot */
      /* be released. Aborting the ACC instruction set here will adversely */
      /* affect subsequent USERROW writes or chip erases. */
      if (0 == ++_count) return 0;
    1420:	81 fd       	sbrc	r24, 1
    1422:	1b c0       	rjmp	.+54     	; 0x145a <UPDI::enter_progmode()+0x42>
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/modernAVR/0.2.14/cores/modernAVR/api/delay_busywait.h:33
    1424:	81 e0       	ldi	r24, 0x01	; 1
    1426:	66 d8       	rcall	.-3892   	; 0x4f4 <UPDI::set_nvmprog_key(bool)>
    1428:	81 11       	cpse	r24, r1
    142a:	06 c0       	rjmp	.+12     	; 0x1438 <UPDI::enter_progmode()+0x20>
    142c:	90 e0       	ldi	r25, 0x00	; 0
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:401
      delay_micros(50);
      sys_status();
    142e:	80 e0       	ldi	r24, 0x00	; 0
    1430:	cf 91       	pop	r28
    1432:	08 95       	ret
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:402
    } while (bit_is_clear(RXDATA, 3));  /* wait set PROGSTART */
    1434:	c1 30       	cpi	r28, 0x01	; 1
    1436:	d1 f3       	breq	.-12     	; 0x142c <UPDI::enter_progmode()+0x14>
delay_micros():
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:404
    D1PRINTF(" PROGSTART=%02X\r\n", RXDATA);
    bit_set(PGCONF, PGCONF_PROG_bp);
    1438:	89 ef       	ldi	r24, 0xF9	; 249
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:405
    return (*Command_Table.prog_init)();
    143a:	90 e0       	ldi	r25, 0x00	; 0
    143c:	01 97       	sbiw	r24, 0x01	; 1
    143e:	f1 f7       	brne	.-4      	; 0x143c <UPDI::enter_progmode()+0x24>
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:406
  }
    1440:	00 c0       	rjmp	.+0      	; 0x1442 <UPDI::enter_progmode()+0x2a>
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:405
      delay_micros(50);
      sys_status();
    } while (bit_is_clear(RXDATA, 3));  /* wait set PROGSTART */
    D1PRINTF(" PROGSTART=%02X\r\n", RXDATA);
    bit_set(PGCONF, PGCONF_PROG_bp);
    return (*Command_Table.prog_init)();
    1442:	00 00       	nop
enter_progmode():
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:392
    openDrainWriteMacro(PIN_PG_TRST, HIGH);
    return _result;
  }

  size_t enter_progmode (void) {
    if (bit_is_set(PGCONF, PGCONF_PROG_bp)) return 1;
    1444:	45 d8       	rcall	.-3958   	; 0x4d0 <UPDI::sys_status()>
    1446:	c1 50       	subi	r28, 0x01	; 1
    1448:	fb 9b       	sbis	0x1f, 3	; 31
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:252
    D1PRINTF(" KEY=%02X\r\n", RXDATA);
    return sys_reset(false);
  }

  bool chip_erase (void) {
    USART::drain();
    144a:	f4 cf       	rjmp	.-24     	; 0x1434 <UPDI::enter_progmode()+0x1c>
    144c:	e9 9a       	sbi	0x1d, 1	; 29
    144e:	e0 91 fe 62 	lds	r30, 0x62FE	; 0x8062fe <Command_Table>
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:235
    D1PRINTF(" KEY=%02X\r\n", RXDATA);
    return _reset ? sys_reset(false) : true;
  }

  bool set_erase_key (void) {
    if (bit_is_clear(PGCONF, PGCONF_PROG_bp)) set_nvmprog_key(false);
    1452:	f0 91 ff 62 	lds	r31, 0x62FF	; 0x8062ff <Command_Table+0x1>
    1456:	cf 91       	pop	r28
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:237
    D1PRINTF(" ERASE_KEY\r\n");
    if (!send_bytes(erase_key, sizeof(erase_key))) return false;
    1458:	09 94       	ijmp
    145a:	81 e0       	ldi	r24, 0x01	; 1
    145c:	90 e0       	ldi	r25, 0x00	; 0
    145e:	e8 cf       	rjmp	.-48     	; 0x1430 <UPDI::enter_progmode()+0x18>

00001460 <UPDI::chip_erase()>:
chip_erase():
    1460:	90 e0       	ldi	r25, 0x00	; 0
    1462:	80 e0       	ldi	r24, 0x00	; 0
    1464:	0e 94 de 01 	call	0x3bc	; 0x3bc <USART::drain(unsigned int)>
set_erase_key():
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:268
      do { sys_status(); } while(bit_is_clear(RXDATA, 3));  /* wait set PROGSTART */
    }
    D1PRINTF(" PROGSTART=%02X\r\n", RXDATA);
    bit_set(PGCONF, PGCONF_ERSE_bp);
    bit_set(PGCONF, PGCONF_PROG_bp);
    return (*Command_Table.prog_init)();
    1468:	e9 99       	sbic	0x1d, 1	; 29
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:238

  bool set_erase_key (void) {
    if (bit_is_clear(PGCONF, PGCONF_PROG_bp)) set_nvmprog_key(false);
    D1PRINTF(" ERASE_KEY\r\n");
    if (!send_bytes(erase_key, sizeof(erase_key))) return false;
    do { key_status(); } while(bit_is_clear(RXDATA, 3));  /* wait set CHIPERASE */
    146a:	02 c0       	rjmp	.+4      	; 0x1470 <UPDI::chip_erase()+0x10>
    146c:	80 e0       	ldi	r24, 0x00	; 0
    146e:	42 d8       	rcall	.-3964   	; 0x4f4 <UPDI::set_nvmprog_key(bool)>
    1470:	6a e0       	ldi	r22, 0x0A	; 10
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:130
    const static uint8_t _reset[] = {
      0x55, 0xC8, 0x59, /* SYSRST */
      0x55, 0xC8, 0x00, /* SYSRUN */
      0x55, 0xC3, 0x04  /* UPDIDIS */
    };
    return send_bytes(_reset, _leave ? 9 : 6);
    1472:	70 e0       	ldi	r23, 0x00	; 0
    1474:	8d e4       	ldi	r24, 0x4D	; 77
    1476:	90 e6       	ldi	r25, 0x60	; 96
    1478:	18 d8       	rcall	.-4048   	; 0x4aa <UPDI::send_bytes(unsigned char const*, unsigned int)>
    147a:	81 11       	cpse	r24, r1
    147c:	02 c0       	rjmp	.+4      	; 0x1482 <UPDI::chip_erase()+0x22>
chip_erase():
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:253
    return sys_reset(false);
  }

  bool chip_erase (void) {
    USART::drain();
    if (!set_erase_key()) return false;
    147e:	20 e0       	ldi	r18, 0x00	; 0
    1480:	35 c0       	rjmp	.+106    	; 0x14ec <UPDI::chip_erase()+0x8c>
set_erase_key():
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/modernAVR/0.2.14/cores/modernAVR/api/delay_busywait.h:42
  }
}

void delay_millis (uint32_t _ms) {
  if (F_CPU >= 1000000L) {
    __builtin_avr_delay_cycles((F_CPU / 1000L) * _ms);
    1482:	2f d8       	rcall	.-4002   	; 0x4e2 <UPDI::key_status()>
    1484:	fb 9b       	sbis	0x1f, 3	; 31
    1486:	fd cf       	rjmp	.-6      	; 0x1482 <UPDI::chip_erase()+0x22>
sys_reset():
    1488:	66 e0       	ldi	r22, 0x06	; 6
    148a:	70 e0       	ldi	r23, 0x00	; 0
    148c:	82 e7       	ldi	r24, 0x72	; 114
    148e:	90 e6       	ldi	r25, 0x60	; 96
    1490:	0c d8       	rcall	.-4072   	; 0x4aa <UPDI::send_bytes(unsigned char const*, unsigned int)>
chip_erase():
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:255
    delay_millis(200);
    USART::drain();
    1492:	88 23       	and	r24, r24
    1494:	a1 f3       	breq	.-24     	; 0x147e <UPDI::chip_erase()+0x1e>
delay_millis():
    1496:	2f ef       	ldi	r18, 0xFF	; 255
    1498:	84 e3       	ldi	r24, 0x34	; 52
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:256
    do { sys_status(); } while(bit_is_set(RXDATA, 5));    /* wait clear RSTSYS */
    149a:	9c e0       	ldi	r25, 0x0C	; 12
    149c:	21 50       	subi	r18, 0x01	; 1
    149e:	80 40       	sbci	r24, 0x00	; 0
    14a0:	90 40       	sbci	r25, 0x00	; 0
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:257
    do { sys_status(); } while(bit_is_set(RXDATA, 0));    /* wait clear LOCKSTATUS */
    14a2:	e1 f7       	brne	.-8      	; 0x149c <UPDI::chip_erase()+0x3c>
    14a4:	00 c0       	rjmp	.+0      	; 0x14a6 <UPDI::chip_erase()+0x46>
    14a6:	00 00       	nop
chip_erase():
    14a8:	90 e0       	ldi	r25, 0x00	; 0
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:259
    D1PRINTF(" <SYS:%02X>\r\n", RXDATA);
    do { key_status(); } while(bit_is_set(RXDATA, 3));    /* wait clear CHIPERASE */
    14aa:	80 e0       	ldi	r24, 0x00	; 0
    14ac:	0e 94 de 01 	call	0x3bc	; 0x3bc <USART::drain(unsigned int)>
    14b0:	0f d8       	rcall	.-4066   	; 0x4d0 <UPDI::sys_status()>
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:260
    sys_status();
    14b2:	fd 99       	sbic	0x1f, 5	; 31
    14b4:	fd cf       	rjmp	.-6      	; 0x14b0 <UPDI::chip_erase()+0x50>
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:261
    if (bit_is_clear(RXDATA, 3)) {
    14b6:	0c d8       	rcall	.-4072   	; 0x4d0 <UPDI::sys_status()>
    14b8:	f8 99       	sbic	0x1f, 0	; 31
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:262
      if (!set_nvmprog_key()) return false;
    14ba:	fd cf       	rjmp	.-6      	; 0x14b6 <UPDI::chip_erase()+0x56>
    14bc:	12 d8       	rcall	.-4060   	; 0x4e2 <UPDI::key_status()>
    14be:	fb 99       	sbic	0x1f, 3	; 31
    14c0:	fd cf       	rjmp	.-6      	; 0x14bc <UPDI::chip_erase()+0x5c>
    14c2:	06 d8       	rcall	.-4084   	; 0x4d0 <UPDI::sys_status()>
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:263
      do { sys_status(); } while(bit_is_clear(RXDATA, 3));  /* wait set PROGSTART */
    14c4:	fb 99       	sbic	0x1f, 3	; 31
    14c6:	08 c0       	rjmp	.+16     	; 0x14d8 <UPDI::chip_erase()+0x78>
    14c8:	81 e0       	ldi	r24, 0x01	; 1
    14ca:	14 d8       	rcall	.-4056   	; 0x4f4 <UPDI::set_nvmprog_key(bool)>
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:266
    }
    D1PRINTF(" PROGSTART=%02X\r\n", RXDATA);
    bit_set(PGCONF, PGCONF_ERSE_bp);
    14cc:	88 23       	and	r24, r24
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:267
    bit_set(PGCONF, PGCONF_PROG_bp);
    14ce:	b9 f2       	breq	.-82     	; 0x147e <UPDI::chip_erase()+0x1e>
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:268
    return (*Command_Table.prog_init)();
    14d0:	0e 94 68 02 	call	0x4d0	; 0x4d0 <UPDI::sys_status()>
    14d4:	fb 9b       	sbis	0x1f, 3	; 31
    14d6:	fc cf       	rjmp	.-8      	; 0x14d0 <UPDI::chip_erase()+0x70>
    14d8:	ea 9a       	sbi	0x1d, 2	; 29
    14da:	e9 9a       	sbi	0x1d, 1	; 29
    14dc:	e0 91 fe 62 	lds	r30, 0x62FE	; 0x8062fe <Command_Table>
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:269
  }
    14e0:	f0 91 ff 62 	lds	r31, 0x62FF	; 0x8062ff <Command_Table+0x1>
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv4.cpp:140
    }
    return 0;
  }

  size_t erase_memory (void) {
    uint8_t e_type = packet.out.bEType;
    14e4:	09 95       	icall
    14e6:	21 e0       	ldi	r18, 0x01	; 1
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv4.cpp:141
    if (e_type == 0x00) {
    14e8:	89 2b       	or	r24, r25
    14ea:	49 f2       	breq	.-110    	; 0x147e <UPDI::chip_erase()+0x1e>
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv4.cpp:143
      /* XMEGA_ERASE_CHIP */
      return UPDI::chip_erase();
    14ec:	82 2f       	mov	r24, r18
    14ee:	08 95       	ret

000014f0 <NVM::V4::erase_memory()>:
erase_memory():
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv4.cpp:150
    else {
      /* NOTE: AVRDUDE<=7.3 may pass the wrong M_TYPE. */
      /* For safety, only USERROW and BOOTROW are allowed to erase pages. */
      if (e_type == 0x07) {
        /* XMEGA_ERASE_USERSIG */
        return erase_flash_page(packet.out.dwAddr);
    14f0:	80 91 c5 60 	lds	r24, 0x60C5	; 0x8060c5 <packet+0x7>
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv4.cpp:148
      return UPDI::chip_erase();
    }
    else {
      /* NOTE: AVRDUDE<=7.3 may pass the wrong M_TYPE. */
      /* For safety, only USERROW and BOOTROW are allowed to erase pages. */
      if (e_type == 0x07) {
    14f4:	81 11       	cpse	r24, r1
    14f6:	03 c0       	rjmp	.+6      	; 0x14fe <NVM::V4::erase_memory()+0xe>
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv4.cpp:150
        /* XMEGA_ERASE_USERSIG */
        return erase_flash_page(packet.out.dwAddr);
    14f8:	b3 df       	rcall	.-154    	; 0x1460 <UPDI::chip_erase()>
    14fa:	90 e0       	ldi	r25, 0x00	; 0
    14fc:	08 95       	ret
    14fe:	87 30       	cpi	r24, 0x07	; 7
    1500:	51 f4       	brne	.+20     	; 0x1516 <NVM::V4::erase_memory()+0x26>
    1502:	60 91 c6 60 	lds	r22, 0x60C6	; 0x8060c6 <packet+0x8>
    1506:	70 91 c7 60 	lds	r23, 0x60C7	; 0x8060c7 <packet+0x9>
    150a:	80 91 c8 60 	lds	r24, 0x60C8	; 0x8060c8 <packet+0xa>
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv4.cpp:155
      }
    }
    /* Page erase will not be used if received. */
    /* Instead, page erase is determined by the is_boundary_flash_page function. */
    return 1;
    150e:	90 91 c9 60 	lds	r25, 0x60C9	; 0x8060c9 <packet+0xb>
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv4.cpp:156
  }
    1512:	97 dc       	rcall	.-1746   	; 0xe42 <NVM::V4::erase_flash_page(unsigned long)>
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv2.cpp:137
    }
    return 0;
  }

  size_t erase_memory (void) {
    uint8_t e_type = packet.out.bEType;
    1514:	f2 cf       	rjmp	.-28     	; 0x14fa <NVM::V4::erase_memory()+0xa>
    1516:	81 e0       	ldi	r24, 0x01	; 1
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv2.cpp:138
    if (e_type == 0x00) {
    1518:	90 e0       	ldi	r25, 0x00	; 0
    151a:	08 95       	ret

0000151c <NVM::V2::erase_memory()>:
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv2.cpp:140
      /* XMEGA_ERASE_CHIP */
      return UPDI::chip_erase();
    151c:	80 91 c5 60 	lds	r24, 0x60C5	; 0x8060c5 <packet+0x7>
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv2.cpp:147
    else {
      /* NOTE: AVRDUDE<=7.3 may pass the wrong M_TYPE. */
      /* For safety, only USERROW and BOOTROW are allowed to erase pages. */
      if (e_type == 0x07) {
        /* XMEGA_ERASE_USERSIG */
        return erase_flash_page(packet.out.dwAddr);
    1520:	81 11       	cpse	r24, r1
    1522:	03 c0       	rjmp	.+6      	; 0x152a <NVM::V2::erase_memory()+0xe>
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv2.cpp:145
      return UPDI::chip_erase();
    }
    else {
      /* NOTE: AVRDUDE<=7.3 may pass the wrong M_TYPE. */
      /* For safety, only USERROW and BOOTROW are allowed to erase pages. */
      if (e_type == 0x07) {
    1524:	9d df       	rcall	.-198    	; 0x1460 <UPDI::chip_erase()>
    1526:	90 e0       	ldi	r25, 0x00	; 0
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv2.cpp:147
        /* XMEGA_ERASE_USERSIG */
        return erase_flash_page(packet.out.dwAddr);
    1528:	08 95       	ret
    152a:	87 30       	cpi	r24, 0x07	; 7
    152c:	51 f4       	brne	.+20     	; 0x1542 <NVM::V2::erase_memory()+0x26>
    152e:	60 91 c6 60 	lds	r22, 0x60C6	; 0x8060c6 <packet+0x8>
    1532:	70 91 c7 60 	lds	r23, 0x60C7	; 0x8060c7 <packet+0x9>
    1536:	80 91 c8 60 	lds	r24, 0x60C8	; 0x8060c8 <packet+0xa>
    153a:	90 91 c9 60 	lds	r25, 0x60C9	; 0x8060c9 <packet+0xb>
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv2.cpp:152
      }
    }
    /* Page erase will not be used if received. */
    /* Instead, page erase is determined by the is_boundary_flash_page function. */
    return 1;
    153e:	99 dd       	rcall	.-1230   	; 0x1072 <NVM::V2::erase_flash_page(unsigned long)>
    1540:	f2 cf       	rjmp	.-28     	; 0x1526 <NVM::V2::erase_memory()+0xa>
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv2.cpp:153
  }
    1542:	81 e0       	ldi	r24, 0x01	; 1
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv0.cpp:134
    return 0;
  }

  size_t erase_memory (void) {
    uint8_t e_type = packet.out.bEType;
    if (e_type == 0x00) {
    1544:	90 e0       	ldi	r25, 0x00	; 0
    1546:	08 95       	ret

00001548 <NVM::V0::erase_memory()>:
    1548:	80 91 c5 60 	lds	r24, 0x60C5	; 0x8060c5 <packet+0x7>
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv0.cpp:136
      /* XMEGA_ERASE_CHIP */
      return UPDI::chip_erase();
    154c:	81 11       	cpse	r24, r1
    154e:	03 c0       	rjmp	.+6      	; 0x1556 <NVM::V0::erase_memory()+0xe>
    1550:	87 df       	rcall	.-242    	; 0x1460 <UPDI::chip_erase()>
    1552:	90 e0       	ldi	r25, 0x00	; 0
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv0.cpp:139
    }
    /* Page erase will not be used if received. */
    return 1;
    1554:	08 95       	ret
    1556:	81 e0       	ldi	r24, 0x01	; 1
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv0.cpp:140
  }
    1558:	90 e0       	ldi	r25, 0x00	; 0
    155a:	08 95       	ret

0000155c <NVM::V5::erase_memory()>:
_ZN3NVM2V512erase_memoryEv():
    155c:	f5 cf       	rjmp	.-22     	; 0x1548 <NVM::V0::erase_memory()>

0000155e <NVM::V3::erase_memory()>:
_ZN3NVM2V312erase_memoryEv():
    155e:	f4 cf       	rjmp	.-24     	; 0x1548 <NVM::V0::erase_memory()>

00001560 <TPI::connect()>:
connect():
    1560:	ef 92       	push	r14
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:211
    return nvm_ctrl(0x00);
  }

  /*** Application ****/

  size_t connect (void) {
    1562:	ff 92       	push	r15
    1564:	0f 93       	push	r16
    1566:	1f 93       	push	r17
    1568:	cf 93       	push	r28
    156a:	df 93       	push	r29
    156c:	00 d0       	rcall	.+0      	; 0x156e <TPI::connect()+0xe>
    156e:	cd b7       	in	r28, 0x3d	; 61
    1570:	de b7       	in	r29, 0x3e	; 62
    1572:	80 e8       	ldi	r24, 0x80	; 128
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:212
    PGCONF = PGCONF_FAIL_bm;
    1574:	8d bb       	out	0x1d, r24	; 29
    1576:	02 9a       	sbi	0x00, 2	; 0
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:222
      /* STUB */
    }

    /*** Enter RESET (normal programing) ***/
    /* TRST remains LOW until program mode is exited. */
    openDrainWriteMacro(PIN_VCP_TXD, LOW);
    1578:	01 9a       	sbi	0x00, 1	; 0
delay_millis():
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:223
    openDrainWriteMacro(PIN_PG_TRST, LOW);
    157a:	2f ef       	ldi	r18, 0xFF	; 255
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/modernAVR/0.2.14/cores/modernAVR/api/delay_busywait.h:42
    157c:	84 e3       	ldi	r24, 0x34	; 52
    157e:	9c e0       	ldi	r25, 0x0C	; 12
    1580:	21 50       	subi	r18, 0x01	; 1
    1582:	80 40       	sbci	r24, 0x00	; 0
    1584:	90 40       	sbci	r25, 0x00	; 0
    1586:	e1 f7       	brne	.-8      	; 0x1580 <TPI::connect()+0x20>
    1588:	00 c0       	rjmp	.+0      	; 0x158a <TPI::connect()+0x2a>
    158a:	00 00       	nop
set_sstcs():
    158c:	82 ec       	ldi	r24, 0xC2	; 194
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:69
  bool get_sldcs (const uint8_t _addr) {
    return (send(0x80 | _addr) && recv());
  }

  bool set_sstcs (const uint8_t _addr, const uint8_t _data) {
    return (send(0xC0 | _addr) && send(_data));
    158e:	27 da       	rcall	.-2994   	; 0x9de <TPI::send(unsigned char)>
    1590:	81 11       	cpse	r24, r1
    1592:	03 c0       	rjmp	.+6      	; 0x159a <TPI::connect()+0x3a>
connect():
    1594:	90 e0       	ldi	r25, 0x00	; 0
    1596:	80 e0       	ldi	r24, 0x00	; 0
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:246

    while (!(get_sldcs(0x00) && RXDATA == 0x02)) {  /* get TPISR */
      D1PRINTF(" SKEY\r\n");
      for (uint8_t i = 0; i < (uint8_t)sizeof(nvmprog_key); i++) {
        if (!send(nvmprog_key[i])) {
          return 0;
    1598:	4f c0       	rjmp	.+158    	; 0x1638 <TPI::connect()+0xd8>
set_sstcs():
    159a:	85 e0       	ldi	r24, 0x05	; 5
    159c:	20 da       	rcall	.-3008   	; 0x9de <TPI::send(unsigned char)>
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:69
  bool get_sldcs (const uint8_t _addr) {
    return (send(0x80 | _addr) && recv());
  }

  bool set_sstcs (const uint8_t _addr, const uint8_t _data) {
    return (send(0xC0 | _addr) && send(_data));
    159e:	88 23       	and	r24, r24
    15a0:	c9 f3       	breq	.-14     	; 0x1594 <TPI::connect()+0x34>
get_sldcs():
    15a2:	8f e8       	ldi	r24, 0x8F	; 143
    15a4:	1c da       	rcall	.-3016   	; 0x9de <TPI::send(unsigned char)>
    15a6:	88 23       	and	r24, r24
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:65
  }

  /*** TPI control and CSS area command ***/

  bool get_sldcs (const uint8_t _addr) {
    return (send(0x80 | _addr) && recv());
    15a8:	e1 f3       	breq	.-8      	; 0x15a2 <TPI::connect()+0x42>
    15aa:	09 da       	rcall	.-3054   	; 0x9be <TPI::recv()>
    15ac:	88 23       	and	r24, r24
    15ae:	c9 f3       	breq	.-14     	; 0x15a2 <TPI::connect()+0x42>
connect():
    15b0:	8f b3       	in	r24, 0x1f	; 31
    15b2:	80 38       	cpi	r24, 0x80	; 128
    15b4:	b1 f7       	brne	.-20     	; 0x15a2 <TPI::connect()+0x42>
    15b6:	e8 9a       	sbi	0x1d, 0	; 29
    15b8:	89 e3       	ldi	r24, 0x39	; 57
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:236
    /*** Set TPIPCR Guard Time : 4 clock ****/
    if (!set_sstcs(0x02, 0x05)) return 0;
    D1PRINTF(" TPIPCR<05\r\n");

    /*** Check TPIIR code : Fixed 0x80 ***/
    while (!(get_sldcs(0x0F) && (RXDATA == 0x80)));
    15ba:	e8 2e       	mov	r14, r24
    15bc:	80 e6       	ldi	r24, 0x60	; 96
    15be:	f8 2e       	mov	r15, r24
get_sldcs():
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:238
    D1PRINTF(" TPIIR>%02X\r\n", RXDATA);
    bit_set(PGCONF, PGCONF_UPDI_bp);
    15c0:	80 e8       	ldi	r24, 0x80	; 128
    15c2:	0d da       	rcall	.-3046   	; 0x9de <TPI::send(unsigned char)>
    15c4:	88 23       	and	r24, r24
    15c6:	11 f1       	breq	.+68     	; 0x160c <TPI::connect()+0xac>
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:65
  }

  /*** TPI control and CSS area command ***/

  bool get_sldcs (const uint8_t _addr) {
    return (send(0x80 | _addr) && recv());
    15c8:	fa d9       	rcall	.-3084   	; 0x9be <TPI::recv()>
    15ca:	88 23       	and	r24, r24
    15cc:	f9 f0       	breq	.+62     	; 0x160c <TPI::connect()+0xac>
connect():
    15ce:	8f b3       	in	r24, 0x1f	; 31
    15d0:	82 30       	cpi	r24, 0x02	; 2
    15d2:	e1 f4       	brne	.+56     	; 0x160c <TPI::connect()+0xac>
    15d4:	19 82       	std	Y+1, r1	; 0x01
    15d6:	1a 82       	std	Y+2, r1	; 0x02
    15d8:	81 ec       	ldi	r24, 0xC1	; 193
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:242
    D1PRINTF(" TPIIR>%02X\r\n", RXDATA);
    bit_set(PGCONF, PGCONF_UPDI_bp);

    /*** Activate NVMPROG mode ***/

    while (!(get_sldcs(0x00) && RXDATA == 0x02)) {  /* get TPISR */
    15da:	9f e3       	ldi	r25, 0x3F	; 63
    15dc:	3b da       	rcall	.-2954   	; 0xa54 <TPI::set_sstpr(unsigned int)>
    15de:	88 23       	and	r24, r24
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:265
     * Other is written in 1 word chunks.
     *
     * The original PICKit4 probably does the same thing,
     * since the JTAG3 protocol does not include these notifications.
     */
    uint16_t _signature = 0;
    15e0:	99 f0       	breq	.+38     	; 0x1608 <TPI::connect()+0xa8>
    15e2:	32 da       	rcall	.-2972   	; 0xa48 <TPI::get_sld()>
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:266
    if (set_sstpr(0x3FC1) && get_sld()) {
    15e4:	88 23       	and	r24, r24
    15e6:	81 f0       	breq	.+32     	; 0x1608 <TPI::connect()+0xa8>
    15e8:	8f b3       	in	r24, 0x1f	; 31
    15ea:	8a 83       	std	Y+2, r24	; 0x02
    15ec:	2d da       	rcall	.-2982   	; 0xa48 <TPI::get_sld()>
    15ee:	88 23       	and	r24, r24
    15f0:	11 f0       	breq	.+4      	; 0x15f6 <TPI::connect()+0x96>
    15f2:	8f b3       	in	r24, 0x1f	; 31
    15f4:	89 83       	std	Y+1, r24	; 0x01
    15f6:	89 81       	ldd	r24, Y+1	; 0x01
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:267
      _CAPS16(_signature)->bytes[1] = RXDATA;
    15f8:	9a 81       	ldd	r25, Y+2	; 0x02
    15fa:	8e 30       	cpi	r24, 0x0E	; 14
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:268
      if (get_sld()) _CAPS16(_signature)->bytes[0] = RXDATA;
    15fc:	f2 e9       	ldi	r31, 0x92	; 146
    15fe:	9f 07       	cpc	r25, r31
    1600:	a9 f0       	breq	.+42     	; 0x162c <TPI::connect()+0xcc>
    1602:	8f 30       	cpi	r24, 0x0F	; 15
    1604:	91 49       	sbci	r25, 0x91	; 145
    1606:	09 f1       	breq	.+66     	; 0x164a <TPI::connect()+0xea>
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:270
    }
    _tpi_chunks = _signature == 0x920E ? 8  /* ATtiny40 */
    1608:	82 e0       	ldi	r24, 0x02	; 2
    160a:	11 c0       	rjmp	.+34     	; 0x162e <TPI::connect()+0xce>
    160c:	00 e3       	ldi	r16, 0x30	; 48
    160e:	10 e6       	ldi	r17, 0x60	; 96
    1610:	f8 01       	movw	r30, r16
    1612:	81 91       	ld	r24, Z+
    1614:	8f 01       	movw	r16, r30
    1616:	e3 d9       	rcall	.-3130   	; 0x9de <TPI::send(unsigned char)>
    1618:	88 23       	and	r24, r24
    161a:	09 f4       	brne	.+2      	; 0x161e <TPI::connect()+0xbe>
    161c:	bb cf       	rjmp	.-138    	; 0x1594 <TPI::connect()+0x34>
    161e:	84 e0       	ldi	r24, 0x04	; 4
    1620:	90 e0       	ldi	r25, 0x00	; 0
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:245
    /*** Activate NVMPROG mode ***/

    while (!(get_sldcs(0x00) && RXDATA == 0x02)) {  /* get TPISR */
      D1PRINTF(" SKEY\r\n");
      for (uint8_t i = 0; i < (uint8_t)sizeof(nvmprog_key); i++) {
        if (!send(nvmprog_key[i])) {
    1622:	30 da       	rcall	.-2976   	; 0xa84 <TPI::idle_clock(unsigned int)>
    1624:	e0 16       	cp	r14, r16
    1626:	f1 06       	cpc	r15, r17
    1628:	99 f7       	brne	.-26     	; 0x1610 <TPI::connect()+0xb0>
    162a:	ca cf       	rjmp	.-108    	; 0x15c0 <TPI::connect()+0x60>
    162c:	88 e0       	ldi	r24, 0x08	; 8
    162e:	80 93 8d 60 	sts	0x608D, r24	; 0x80608d <_tpi_chunks>
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:248
          return 0;
        }
        idle_clock(4);
    1632:	e9 9a       	sbi	0x1d, 1	; 29
    1634:	81 e0       	ldi	r24, 0x01	; 1
    1636:	90 e0       	ldi	r25, 0x00	; 0
    1638:	0f 90       	pop	r0
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:244

    /*** Activate NVMPROG mode ***/

    while (!(get_sldcs(0x00) && RXDATA == 0x02)) {  /* get TPISR */
      D1PRINTF(" SKEY\r\n");
      for (uint8_t i = 0; i < (uint8_t)sizeof(nvmprog_key); i++) {
    163a:	0f 90       	pop	r0
    163c:	df 91       	pop	r29
    163e:	cf 91       	pop	r28
    1640:	1f 91       	pop	r17
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:270
    uint16_t _signature = 0;
    if (set_sstpr(0x3FC1) && get_sld()) {
      _CAPS16(_signature)->bytes[1] = RXDATA;
      if (get_sld()) _CAPS16(_signature)->bytes[0] = RXDATA;
    }
    _tpi_chunks = _signature == 0x920E ? 8  /* ATtiny40 */
    1642:	0f 91       	pop	r16
    1644:	ff 90       	pop	r15
    1646:	ef 90       	pop	r14
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:274
                : _signature == 0x910F ? 4  /* ATtiny20 */
                : 2;                        /* Othres   */
    D1PRINTF(" SIG>%04X:%02X\r\n", _signature, _tpi_chunks);
    bit_set(PGCONF, PGCONF_PROG_bp);
    1648:	08 95       	ret
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:275
    return 1;
    164a:	84 e0       	ldi	r24, 0x04	; 4
    164c:	f0 cf       	rjmp	.-32     	; 0x162e <TPI::connect()+0xce>

0000164e <UPDI::disconnect()>:
disconnect():
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:276
  }
    164e:	90 e0       	ldi	r25, 0x00	; 0
    1650:	80 e0       	ldi	r24, 0x00	; 0
    1652:	0e 94 de 01 	call	0x3bc	; 0x3bc <USART::drain(unsigned int)>
sys_reset():
    1656:	69 e0       	ldi	r22, 0x09	; 9
    1658:	70 e0       	ldi	r23, 0x00	; 0
    165a:	82 e7       	ldi	r24, 0x72	; 114
    165c:	90 e6       	ldi	r25, 0x60	; 96
    165e:	0e 94 55 02 	call	0x4aa	; 0x4aa <UPDI::send_bytes(unsigned char const*, unsigned int)>
disconnect():
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:270
    uint16_t _signature = 0;
    if (set_sstpr(0x3FC1) && get_sld()) {
      _CAPS16(_signature)->bytes[1] = RXDATA;
      if (get_sld()) _CAPS16(_signature)->bytes[0] = RXDATA;
    }
    _tpi_chunks = _signature == 0x920E ? 8  /* ATtiny40 */
    1662:	1d ba       	out	0x1d, r1	; 29
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:381
    }
    return 0;
  }

  size_t disconnect (void) {
    USART::drain();
    1664:	01 9a       	sbi	0x00, 1	; 0
    1666:	00 00       	nop
    1668:	01 98       	cbi	0x00, 1	; 0
    166a:	90 e0       	ldi	r25, 0x00	; 0
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:130
    const static uint8_t _reset[] = {
      0x55, 0xC8, 0x59, /* SYSRST */
      0x55, 0xC8, 0x00, /* SYSRUN */
      0x55, 0xC3, 0x04  /* UPDIDIS */
    };
    return send_bytes(_reset, _leave ? 9 : 6);
    166c:	08 95       	ret

0000166e <UPDI::connect()>:
connect():
    166e:	80 e8       	ldi	r24, 0x80	; 128
    1670:	8d bb       	out	0x1d, r24	; 29
    1672:	10 92 de 62 	sts	0x62DE, r1	; 0x8062de <_sib>
    1676:	8f ef       	ldi	r24, 0xFF	; 255
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:383
  }

  size_t disconnect (void) {
    USART::drain();
    bool _result = sys_reset(true);
    PGCONF = 0;
    1678:	9f ef       	ldi	r25, 0xFF	; 255
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:385
    D1PRINTF(" <RST:%d>\r\n", _result);
    openDrainWriteMacro(PIN_PG_TRST, LOW);
    167a:	dc 01       	movw	r26, r24
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:386
    nop();
    167c:	80 93 da 62 	sts	0x62DA, r24	; 0x8062da <_before_page>
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:389
    openDrainWriteMacro(PIN_PG_TRST, HIGH);
    return _result;
  }
    1680:	90 93 db 62 	sts	0x62DB, r25	; 0x8062db <_before_page+0x1>
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:335
      0x55, 0xC2, 0x05, /* GTVAL[4] */
    };
    const static uint8_t _sib256[] = {
      0x55, 0xE6        /* SIB[256] */
    };
    PGCONF = PGCONF_FAIL_bm;
    1684:	a0 93 dc 62 	sts	0x62DC, r26	; 0x8062dc <_before_page+0x2>
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:336
    _sib[0] = 0;
    1688:	b0 93 dd 62 	sts	0x62DD, r27	; 0x8062dd <_before_page+0x3>
setup():
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:337
    _before_page = -1L;
    168c:	8f e0       	ldi	r24, 0x0F	; 15
    168e:	92 e0       	ldi	r25, 0x02	; 2
    1690:	80 93 fe 62 	sts	0x62FE, r24	; 0x8062fe <Command_Table>
    1694:	90 93 ff 62 	sts	0x62FF, r25	; 0x8062ff <Command_Table+0x1>
    1698:	83 ed       	ldi	r24, 0xD3	; 211
    169a:	98 e0       	ldi	r25, 0x08	; 8
    169c:	80 93 00 63 	sts	0x6300, r24	; 0x806300 <Command_Table+0x2>
    16a0:	90 93 01 63 	sts	0x6301, r25	; 0x806301 <Command_Table+0x3>
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv1.cpp:68
    // else if (m_type == 0xD3)   /* MTYPE_SIB */ /* This is in its own memory space. */
    return 0;
  }

  bool setup (void) {
    Command_Table.prog_init    = &prog_init;
    16a4:	86 ed       	ldi	r24, 0xD6	; 214
    16a6:	98 e0       	ldi	r25, 0x08	; 8
    16a8:	80 93 02 63 	sts	0x6302, r24	; 0x806302 <Command_Table+0x4>
    16ac:	90 93 03 63 	sts	0x6303, r25	; 0x806303 <Command_Table+0x5>
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv1.cpp:69
    Command_Table.read_memory  = &read_memory;
    16b0:	80 ed       	ldi	r24, 0xD0	; 208
    16b2:	98 e0       	ldi	r25, 0x08	; 8
    16b4:	80 93 04 63 	sts	0x6304, r24	; 0x806304 <Command_Table+0x6>
    16b8:	90 93 05 63 	sts	0x6305, r25	; 0x806305 <Command_Table+0x7>
connect():
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv1.cpp:70
    Command_Table.erase_memory = &erase_memory;
    16bc:	01 9a       	sbi	0x00, 1	; 0
    16be:	00 00       	nop
    16c0:	80 91 c5 60 	lds	r24, 0x60C5	; 0x8060c5 <packet+0x7>
    16c4:	88 23       	and	r24, r24
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv1.cpp:71
    Command_Table.write_memory = &write_memory;
    16c6:	59 f0       	breq	.+22     	; 0x16de <UPDI::connect()+0x70>
power_reset():
    16c8:	0e 98       	cbi	0x01, 6	; 1
delay_millis():
    16ca:	2f ef       	ldi	r18, 0xFF	; 255
    16cc:	84 e3       	ldi	r24, 0x34	; 52
    16ce:	9c e0       	ldi	r25, 0x0C	; 12
    16d0:	21 50       	subi	r18, 0x01	; 1
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:339
    NVM::V1::setup();   /* default is dummy callback */
    openDrainWriteMacro(PIN_PG_TRST, LOW);
    16d2:	80 40       	sbci	r24, 0x00	; 0
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:340
    nop();
    16d4:	90 40       	sbci	r25, 0x00	; 0
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:343

    /* External Reset */
    if (packet.out.bMType) {
    16d6:	e1 f7       	brne	.-8      	; 0x16d0 <UPDI::connect()+0x62>
    16d8:	00 c0       	rjmp	.+0      	; 0x16da <UPDI::connect()+0x6c>
    16da:	00 00       	nop
power_reset():
    16dc:	0e 9a       	sbi	0x01, 6	; 1
connect():
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:136
  }

  void power_reset (void) {
  #ifdef PIN_HV_POWER
    /* If the previous connect attempt failed, power off the device if possible. */
    digitalWriteMacro(PIN_HV_POWER, LOW);
    16de:	01 98       	cbi	0x00, 1	; 0
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/modernAVR/0.2.14/cores/modernAVR/api/delay_busywait.h:42
    16e0:	90 e0       	ldi	r25, 0x00	; 0
    16e2:	80 e0       	ldi	r24, 0x00	; 0
    16e4:	0e 94 de 01 	call	0x3bc	; 0x3bc <USART::drain(unsigned int)>
long_break():
    16e8:	80 91 18 60 	lds	r24, 0x6018	; 0x806018 <_xclk>
    16ec:	90 91 19 60 	lds	r25, 0x6019	; 0x806019 <_xclk+0x1>
    16f0:	96 95       	lsr	r25
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:138
    delay_millis(200);
    digitalWriteMacro(PIN_HV_POWER, HIGH);
    16f2:	87 95       	ror	r24
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:351
  #ifdef CONFIG_HVCTRL_ENABLE
      /* High-Voltage control */
  #endif
    }

    openDrainWriteMacro(PIN_PG_TRST, HIGH);
    16f4:	96 95       	lsr	r25
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:352
    USART::drain();
    16f6:	87 95       	ror	r24
    16f8:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <USART::calk_baud_khz(unsigned int)>
    16fc:	80 93 08 08 	sts	0x0808, r24	; 0x800808 <__TEXT_REGION_LENGTH__+0x7f0808>
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:66
    return false;
  }

  void long_break (void) {
    D2PRINTF("<BREAK>");
    USART0_BAUD = USART::calk_baud_khz(_xclk >> 2);
    1700:	90 93 09 08 	sts	0x0809, r25	; 0x800809 <__TEXT_REGION_LENGTH__+0x7f0809>
    1704:	80 e0       	ldi	r24, 0x00	; 0
    1706:	0e 94 44 02 	call	0x488	; 0x488 <UPDI::send(unsigned char)>
    170a:	80 91 18 60 	lds	r24, 0x6018	; 0x806018 <_xclk>
    170e:	90 91 19 60 	lds	r25, 0x6019	; 0x806019 <_xclk+0x1>
    1712:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <USART::calk_baud_khz(unsigned int)>
    1716:	80 93 08 08 	sts	0x0808, r24	; 0x800808 <__TEXT_REGION_LENGTH__+0x7f0808>
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:67
    send(0x00);
    171a:	90 93 09 08 	sts	0x0809, r25	; 0x800809 <__TEXT_REGION_LENGTH__+0x7f0809>
connect():
    171e:	69 e0       	ldi	r22, 0x09	; 9
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:68
    USART0_BAUD = USART::calk_baud_khz(_xclk);
    1720:	70 e0       	ldi	r23, 0x00	; 0
    1722:	89 e6       	ldi	r24, 0x69	; 105
    1724:	90 e6       	ldi	r25, 0x60	; 96
    1726:	0e 94 55 02 	call	0x4aa	; 0x4aa <UPDI::send_bytes(unsigned char const*, unsigned int)>
    172a:	81 11       	cpse	r24, r1
    172c:	03 c0       	rjmp	.+6      	; 0x1734 <UPDI::connect()+0xc6>
    172e:	90 e0       	ldi	r25, 0x00	; 0
    1730:	80 e0       	ldi	r24, 0x00	; 0
    1732:	08 95       	ret
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:354
    }

    openDrainWriteMacro(PIN_PG_TRST, HIGH);
    USART::drain();
    long_break();
    if (send_bytes(_init, sizeof(_init))) {
    1734:	0e 94 68 02 	call	0x4d0	; 0x4d0 <UPDI::sys_status()>
    1738:	fc 99       	sbic	0x1f, 4	; 31
    173a:	fc cf       	rjmp	.-8      	; 0x1734 <UPDI::connect()+0xc6>
    173c:	62 e0       	ldi	r22, 0x02	; 2
    173e:	70 e0       	ldi	r23, 0x00	; 0
    1740:	87 e6       	ldi	r24, 0x67	; 103
    1742:	90 e6       	ldi	r25, 0x60	; 96
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:377
          bit_set(PGCONF, PGCONF_UPDI_bp);
          return 5;
        }
      }
    }
    return 0;
    1744:	0e 94 55 02 	call	0x4aa	; 0x4aa <UPDI::send_bytes(unsigned char const*, unsigned int)>
    1748:	88 23       	and	r24, r24
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:355

    openDrainWriteMacro(PIN_PG_TRST, HIGH);
    USART::drain();
    long_break();
    if (send_bytes(_init, sizeof(_init))) {
      do { sys_status(); } while(bit_is_set(RXDATA, 4));  /* wait clear INSLEEP */
    174a:	89 f3       	breq	.-30     	; 0x172e <UPDI::connect()+0xc0>
    174c:	60 e2       	ldi	r22, 0x20	; 32
    174e:	70 e0       	ldi	r23, 0x00	; 0
    1750:	8e ed       	ldi	r24, 0xDE	; 222
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:357
      D1PRINTF("<STAT:%02X>", RXDATA);
      if (send_bytes(_sib256, sizeof(_sib256))
    1752:	92 e6       	ldi	r25, 0x62	; 98
    1754:	39 d8       	rcall	.-3982   	; 0x7c8 <UPDI::recv_bytes(unsigned char*, unsigned int)>
    1756:	88 23       	and	r24, r24
    1758:	51 f3       	breq	.-44     	; 0x172e <UPDI::connect()+0xc0>
    175a:	80 91 e8 62 	lds	r24, 0x62E8	; 0x8062e8 <_sib+0xa>
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:358
       && recv_bytes(_sib, 32)) {
    175e:	85 33       	cpi	r24, 0x35	; 53
    1760:	59 f5       	brne	.+86     	; 0x17b8 <UPDI::connect()+0x14a>
setup():
    1762:	84 e8       	ldi	r24, 0x84	; 132
    1764:	96 e0       	ldi	r25, 0x06	; 6
    1766:	80 93 fe 62 	sts	0x62FE, r24	; 0x8062fe <Command_Table>
    176a:	90 93 ff 62 	sts	0x62FF, r25	; 0x8062ff <Command_Table+0x1>
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:363
        size_t _result = 0;
        D1PRINTF(" SIB=%s\r\n", _sib);
        D1PRINTF(" <NVM:%02X>\r\n", _sib[10]);
        /* Depending on the SIB, different low-level methods are executed. */
        if      (_sib[10] == '5') _result = NVM::V5::setup();
    176e:	84 e8       	ldi	r24, 0x84	; 132
    1770:	94 e0       	ldi	r25, 0x04	; 4
    1772:	80 93 00 63 	sts	0x6300, r24	; 0x806300 <Command_Table+0x2>
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv5.cpp:165
    }
  }

  bool setup (void) {
    Command_Table.prog_init    = &prog_init;
    1776:	90 93 01 63 	sts	0x6301, r25	; 0x806301 <Command_Table+0x3>
    177a:	8e ea       	ldi	r24, 0xAE	; 174
    177c:	9a e0       	ldi	r25, 0x0A	; 10
    177e:	80 93 02 63 	sts	0x6302, r24	; 0x806302 <Command_Table+0x4>
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv5.cpp:166
    Command_Table.read_memory  = &read_memory;
    1782:	90 93 03 63 	sts	0x6303, r25	; 0x806303 <Command_Table+0x5>
    1786:	81 ed       	ldi	r24, 0xD1	; 209
    1788:	96 e0       	ldi	r25, 0x06	; 6
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv5.cpp:167
    Command_Table.erase_memory = &erase_memory;
    178a:	80 93 04 63 	sts	0x6304, r24	; 0x806304 <Command_Table+0x6>
    178e:	90 93 05 63 	sts	0x6305, r25	; 0x806305 <Command_Table+0x7>
connect():
    1792:	80 91 de 62 	lds	r24, 0x62DE	; 0x8062de <_sib>
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv0.cpp:174

  bool setup (void) {
    Command_Table.prog_init    = &prog_init;
    Command_Table.read_memory  = &read_memory;
    Command_Table.erase_memory = &erase_memory;
    Command_Table.write_memory = &write_memory;
    1796:	ee ed       	ldi	r30, 0xDE	; 222
    1798:	f2 e6       	ldi	r31, 0x62	; 98
    179a:	80 32       	cpi	r24, 0x20	; 32
    179c:	11 f4       	brne	.+4      	; 0x17a2 <UPDI::connect()+0x134>
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:371
        else if (_sib[10] == '2') _result = NVM::V2::setup();
        else if (_sib[10] == '0') _result = NVM::V0::setup();
        if (_result) {
          /* If the SIB is obtained, the first 4-characters are returned.       */
          /* If the 1st character is blank, the next 4-characters are returned. */
          memcpy(&packet.in.data[0], _sib[0] == ' ' ? &_sib[4] : &_sib[0], 4);
    179e:	e2 ee       	ldi	r30, 0xE2	; 226
    17a0:	f2 e6       	ldi	r31, 0x62	; 98
    17a2:	84 e0       	ldi	r24, 0x04	; 4
    17a4:	a5 ec       	ldi	r26, 0xC5	; 197
    17a6:	b0 e6       	ldi	r27, 0x60	; 96
    17a8:	01 90       	ld	r0, Z+
    17aa:	0d 92       	st	X+, r0
    17ac:	8a 95       	dec	r24
    17ae:	e1 f7       	brne	.-8      	; 0x17a8 <UPDI::connect()+0x13a>
    17b0:	e8 9a       	sbi	0x1d, 0	; 29
    17b2:	85 e0       	ldi	r24, 0x05	; 5
    17b4:	90 e0       	ldi	r25, 0x00	; 0
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:372
          bit_set(PGCONF, PGCONF_UPDI_bp);
    17b6:	08 95       	ret
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:373
          return 5;
    17b8:	84 33       	cpi	r24, 0x34	; 52
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:378
        }
      }
    }
    return 0;
  }
    17ba:	a9 f4       	brne	.+42     	; 0x17e6 <UPDI::connect()+0x178>
setup():
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:364
        size_t _result = 0;
        D1PRINTF(" SIB=%s\r\n", _sib);
        D1PRINTF(" <NVM:%02X>\r\n", _sib[10]);
        /* Depending on the SIB, different low-level methods are executed. */
        if      (_sib[10] == '5') _result = NVM::V5::setup();
        else if (_sib[10] == '4') _result = NVM::V4::setup();
    17bc:	86 e7       	ldi	r24, 0x76	; 118
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv4.cpp:187
      return UPDI::send_bytes_block(_dwAddr, _wLength);
    }
  }

  bool setup (void) {
    Command_Table.prog_init    = &prog_init;
    17be:	96 e0       	ldi	r25, 0x06	; 6
    17c0:	80 93 fe 62 	sts	0x62FE, r24	; 0x8062fe <Command_Table>
    17c4:	90 93 ff 62 	sts	0x62FF, r25	; 0x8062ff <Command_Table+0x1>
    17c8:	85 e5       	ldi	r24, 0x55	; 85
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv4.cpp:188
    Command_Table.read_memory  = &read_memory;
    17ca:	94 e0       	ldi	r25, 0x04	; 4
    17cc:	80 93 00 63 	sts	0x6300, r24	; 0x806300 <Command_Table+0x2>
    17d0:	90 93 01 63 	sts	0x6301, r25	; 0x806301 <Command_Table+0x3>
    17d4:	88 e7       	ldi	r24, 0x78	; 120
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv4.cpp:189
    Command_Table.erase_memory = &erase_memory;
    17d6:	9a e0       	ldi	r25, 0x0A	; 10
    17d8:	80 93 02 63 	sts	0x6302, r24	; 0x806302 <Command_Table+0x4>
    17dc:	90 93 03 63 	sts	0x6303, r25	; 0x806303 <Command_Table+0x5>
    17e0:	8f e3       	ldi	r24, 0x3F	; 63
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv4.cpp:190
    Command_Table.write_memory = &write_memory;
    17e2:	97 e0       	ldi	r25, 0x07	; 7
    17e4:	d2 cf       	rjmp	.-92     	; 0x178a <UPDI::connect()+0x11c>
connect():
    17e6:	83 33       	cpi	r24, 0x33	; 51
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:365
        else if (_sib[10] == '3') _result = NVM::V3::setup();
    17e8:	a9 f4       	brne	.+42     	; 0x1814 <UPDI::connect()+0x1a6>
setup():
    17ea:	8c e7       	ldi	r24, 0x7C	; 124
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv3.cpp:162
    }
  }

  bool setup (void) {
    Command_Table.prog_init    = &prog_init;
    17ec:	96 e0       	ldi	r25, 0x06	; 6
    17ee:	80 93 fe 62 	sts	0x62FE, r24	; 0x8062fe <Command_Table>
    17f2:	90 93 ff 62 	sts	0x62FF, r25	; 0x8062ff <Command_Table+0x1>
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv3.cpp:163
    Command_Table.read_memory  = &read_memory;
    17f6:	83 eb       	ldi	r24, 0xB3	; 179
    17f8:	94 e0       	ldi	r25, 0x04	; 4
    17fa:	80 93 00 63 	sts	0x6300, r24	; 0x806300 <Command_Table+0x2>
    17fe:	90 93 01 63 	sts	0x6301, r25	; 0x806301 <Command_Table+0x3>
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv3.cpp:164
    Command_Table.erase_memory = &erase_memory;
    1802:	8f ea       	ldi	r24, 0xAF	; 175
    1804:	9a e0       	ldi	r25, 0x0A	; 10
    1806:	80 93 02 63 	sts	0x6302, r24	; 0x806302 <Command_Table+0x4>
    180a:	90 93 03 63 	sts	0x6303, r25	; 0x806303 <Command_Table+0x5>
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv3.cpp:165
    Command_Table.write_memory = &write_memory;
    180e:	88 eb       	ldi	r24, 0xB8	; 184
    1810:	97 e0       	ldi	r25, 0x07	; 7
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:366
        else if (_sib[10] == '2') _result = NVM::V2::setup();
    1812:	bb cf       	rjmp	.-138    	; 0x178a <UPDI::connect()+0x11c>
connect():
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv2.cpp:184
      return UPDI::send_bytes_block(_dwAddr, _wLength);
    }
  }

  bool setup (void) {
    Command_Table.prog_init    = &prog_init;
    1814:	82 33       	cpi	r24, 0x32	; 50
    1816:	a9 f4       	brne	.+42     	; 0x1842 <UPDI::connect()+0x1d4>
setup():
    1818:	83 e3       	ldi	r24, 0x33	; 51
    181a:	98 e0       	ldi	r25, 0x08	; 8
    181c:	80 93 fe 62 	sts	0x62FE, r24	; 0x8062fe <Command_Table>
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv2.cpp:185
    Command_Table.read_memory  = &read_memory;
    1820:	90 93 ff 62 	sts	0x62FF, r25	; 0x8062ff <Command_Table+0x1>
    1824:	85 e8       	ldi	r24, 0x85	; 133
    1826:	94 e0       	ldi	r25, 0x04	; 4
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv2.cpp:186
    Command_Table.erase_memory = &erase_memory;
    1828:	80 93 00 63 	sts	0x6300, r24	; 0x806300 <Command_Table+0x2>
    182c:	90 93 01 63 	sts	0x6301, r25	; 0x806301 <Command_Table+0x3>
    1830:	8e e8       	ldi	r24, 0x8E	; 142
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv2.cpp:187
    Command_Table.write_memory = &write_memory;
    1832:	9a e0       	ldi	r25, 0x0A	; 10
    1834:	80 93 02 63 	sts	0x6302, r24	; 0x806302 <Command_Table+0x4>
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:367
        else if (_sib[10] == '0') _result = NVM::V0::setup();
    1838:	90 93 03 63 	sts	0x6303, r25	; 0x806303 <Command_Table+0x5>
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv0.cpp:171
      return UPDI::send_bytes_block(_wAddr, _wLength);
    }
  }

  bool setup (void) {
    Command_Table.prog_init    = &prog_init;
    183c:	87 e5       	ldi	r24, 0x57	; 87
    183e:	98 e0       	ldi	r25, 0x08	; 8
    1840:	a4 cf       	rjmp	.-184    	; 0x178a <UPDI::connect()+0x11c>
connect():
    1842:	80 33       	cpi	r24, 0x30	; 48
    1844:	09 f0       	breq	.+2      	; 0x1848 <UPDI::connect()+0x1da>
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv0.cpp:172
    Command_Table.read_memory  = &read_memory;
    1846:	73 cf       	rjmp	.-282    	; 0x172e <UPDI::connect()+0xc0>
setup():
    1848:	82 e1       	ldi	r24, 0x12	; 18
    184a:	98 e0       	ldi	r25, 0x08	; 8
    184c:	80 93 fe 62 	sts	0x62FE, r24	; 0x8062fe <Command_Table>
    1850:	90 93 ff 62 	sts	0x62FF, r25	; 0x8062ff <Command_Table+0x1>
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv0.cpp:173
    Command_Table.erase_memory = &erase_memory;
    1854:	84 eb       	ldi	r24, 0xB4	; 180
    1856:	94 e0       	ldi	r25, 0x04	; 4
    1858:	80 93 00 63 	sts	0x6300, r24	; 0x806300 <Command_Table+0x2>
    185c:	90 93 01 63 	sts	0x6301, r25	; 0x806301 <Command_Table+0x3>
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv0.cpp:174
    Command_Table.write_memory = &write_memory;
    1860:	84 ea       	ldi	r24, 0xA4	; 164
    1862:	9a e0       	ldi	r25, 0x0A	; 10
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:152
      ++_cnt;
    }
    return _wLength + 1;
  }

  size_t write_memory (void) {
    1864:	80 93 02 63 	sts	0x6302, r24	; 0x806302 <Command_Table+0x4>
    1868:	90 93 03 63 	sts	0x6303, r25	; 0x806303 <Command_Table+0x5>
    186c:	89 ed       	ldi	r24, 0xD9	; 217
    186e:	98 e0       	ldi	r25, 0x08	; 8
    1870:	8c cf       	rjmp	.-232    	; 0x178a <UPDI::connect()+0x11c>

00001872 <TPI::write_memory()>:
write_memory():
    1872:	6f 92       	push	r6
    1874:	7f 92       	push	r7
    1876:	8f 92       	push	r8
    1878:	9f 92       	push	r9
    187a:	af 92       	push	r10
    187c:	bf 92       	push	r11
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:153
    uint8_t   m_type = packet.out.tpi.read.bMType;
    187e:	cf 92       	push	r12
    1880:	df 92       	push	r13
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/modernAVR/0.2.14/cores/modernAVR/api/cpp/btools.cpp:45
//
// Byte convert
//

uint16_t bswap16 (uint16_t _word) {
  return __builtin_bswap16(_word);
    1882:	ef 92       	push	r14
    1884:	ff 92       	push	r15
    1886:	0f 93       	push	r16
    1888:	1f 93       	push	r17
    188a:	cf 93       	push	r28
    188c:	df 93       	push	r29
    188e:	20 91 c4 60 	lds	r18, 0x60C4	; 0x8060c4 <packet+0x6>
bswap16():
    1892:	c0 90 c8 60 	lds	r12, 0x60C8	; 0x8060c8 <packet+0xa>
    1896:	d0 90 c9 60 	lds	r13, 0x60C9	; 0x8060c9 <packet+0xb>
    189a:	dc 24       	eor	r13, r12
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:161
    uint8_t *_p = &packet.out.tpi.write.memData[0];
    bool _result = true;

    /* To accommodate older host programs, */
    /* the address must be aligned to the top of the page. */
    while (_dwAddr & (_tpi_chunks - 1)) {
    189c:	cd 24       	eor	r12, r13
    189e:	dc 24       	eor	r13, r12
    18a0:	00 91 ca 60 	lds	r16, 0x60CA	; 0x8060ca <packet+0xc>
    18a4:	10 91 cb 60 	lds	r17, 0x60CB	; 0x8060cb <packet+0xd>
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:156

  size_t write_memory (void) {
    uint8_t   m_type = packet.out.tpi.read.bMType;
    uint16_t _dwAddr = bswap16(_CAPS32(packet.out.tpi.write.dwAddr)->words[1]);
    size_t  _wLength = bswap16(packet.out.tpi.write.wLength);
    uint8_t *_p = &packet.out.tpi.write.memData[0];
    18a8:	10 27       	eor	r17, r16
    18aa:	01 27       	eor	r16, r17
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:164
    /* To accommodate older host programs, */
    /* the address must be aligned to the top of the page. */
    while (_dwAddr & (_tpi_chunks - 1)) {
      _dwAddr--;
      _wLength++;
      *--_p = 0xFF;   /* NAND masked dummy bytes */
    18ac:	10 27       	eor	r17, r16
write_memory():
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:161
    uint8_t *_p = &packet.out.tpi.write.memData[0];
    bool _result = true;

    /* To accommodate older host programs, */
    /* the address must be aligned to the top of the page. */
    while (_dwAddr & (_tpi_chunks - 1)) {
    18ae:	60 90 8d 60 	lds	r6, 0x608D	; 0x80608d <_tpi_chunks>
    18b2:	86 2c       	mov	r8, r6
    18b4:	91 2c       	mov	r9, r1
    18b6:	c4 01       	movw	r24, r8
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:167
      _dwAddr--;
      _wLength++;
      *--_p = 0xFF;   /* NAND masked dummy bytes */
    }
    while (_wLength & (_tpi_chunks - 1)) {
      *((uint8_t*)(_dwAddr + _wLength++)) = 0xFF;
    18b8:	01 97       	sbiw	r24, 0x01	; 1
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:166
    while (_dwAddr & (_tpi_chunks - 1)) {
      _dwAddr--;
      _wLength++;
      *--_p = 0xFF;   /* NAND masked dummy bytes */
    }
    while (_wLength & (_tpi_chunks - 1)) {
    18ba:	cc ec       	ldi	r28, 0xCC	; 204
    18bc:	d0 e6       	ldi	r29, 0x60	; 96
    18be:	3f ef       	ldi	r19, 0xFF	; 255
    18c0:	ac 01       	movw	r20, r24
    18c2:	4c 21       	and	r20, r12
    18c4:	5d 21       	and	r21, r13
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:167
      *((uint8_t*)(_dwAddr + _wLength++)) = 0xFF;
    18c6:	45 2b       	or	r20, r21
    18c8:	71 f4       	brne	.+28     	; 0x18e6 <TPI::write_memory()+0x74>
    18ca:	3f ef       	ldi	r19, 0xFF	; 255
    18cc:	7c 01       	movw	r14, r24
    18ce:	e0 22       	and	r14, r16
    18d0:	f1 22       	and	r15, r17
    18d2:	e1 14       	cp	r14, r1
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:162
    bool _result = true;

    /* To accommodate older host programs, */
    /* the address must be aligned to the top of the page. */
    while (_dwAddr & (_tpi_chunks - 1)) {
      _dwAddr--;
    18d4:	f1 04       	cpc	r15, r1
    18d6:	71 f0       	breq	.+28     	; 0x18f4 <TPI::write_memory()+0x82>
    18d8:	f8 01       	movw	r30, r16
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:163
      _wLength++;
    18da:	ec 0d       	add	r30, r12
    18dc:	fd 1d       	adc	r31, r13
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:164
      *--_p = 0xFF;   /* NAND masked dummy bytes */
    18de:	30 83       	st	Z, r19
    18e0:	0f 5f       	subi	r16, 0xFF	; 255
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:174
    D2PRINTF(" FIXED_WRITE=%08X:%04X\r\n", _dwAddr, _wLength);

    /* For the flash code area, the page erase can be */
    /* omitted if the chip has already been erased.   */
    /* 0x01: XPRG_MEM_TYPE_APPL */
    if (m_type != 0x01) {
    18e2:	1f 4f       	sbci	r17, 0xFF	; 255
    18e4:	f3 cf       	rjmp	.-26     	; 0x18cc <TPI::write_memory()+0x5a>
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:185
        && set_sst(0xFF)
        && nvm_wait()
        && nvm_ctrl(0x00);
      if (!_result) return 0;
    }
    _result &= nvm_wait() && set_sstpr(_dwAddr);
    18e6:	41 e0       	ldi	r20, 0x01	; 1
    18e8:	c4 1a       	sub	r12, r20
    18ea:	d1 08       	sbc	r13, r1
    18ec:	0f 5f       	subi	r16, 0xFF	; 255
    18ee:	1f 4f       	sbci	r17, 0xFF	; 255
    18f0:	3a 93       	st	-Y, r19
    18f2:	e6 cf       	rjmp	.-52     	; 0x18c0 <TPI::write_memory()+0x4e>
    18f4:	21 30       	cpi	r18, 0x01	; 1
    18f6:	19 f5       	brne	.+70     	; 0x193e <TPI::write_memory()+0xcc>
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:156

  size_t write_memory (void) {
    uint8_t   m_type = packet.out.tpi.read.bMType;
    uint16_t _dwAddr = bswap16(_CAPS32(packet.out.tpi.write.dwAddr)->words[1]);
    size_t  _wLength = bswap16(packet.out.tpi.write.wLength);
    uint8_t *_p = &packet.out.tpi.write.memData[0];
    18f8:	8f d8       	rcall	.-3810   	; 0xa18 <TPI::nvm_wait()>
    18fa:	78 2e       	mov	r7, r24
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:187
        && nvm_ctrl(0x00);
      if (!_result) return 0;
    }
    _result &= nvm_wait() && set_sstpr(_dwAddr);
    /* WRITE_PAGE */
    for (size_t _i = 0; _i < _wLength; _i += _tpi_chunks) {
    18fc:	88 23       	and	r24, r24
    18fe:	19 f0       	breq	.+6      	; 0x1906 <TPI::write_memory()+0x94>
    1900:	c6 01       	movw	r24, r12
    1902:	a8 d8       	rcall	.-3760   	; 0xa54 <TPI::set_sstpr(unsigned int)>
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:189
      D2PRINTF(" CODE_WRITE=%08X:%04X\r\n", _dwAddr, _tpi_chunks);
      _result &= nvm_ctrl(0x1D)
    1904:	78 2e       	mov	r7, r24
    1906:	b1 2c       	mov	r11, r1
    1908:	a1 2c       	mov	r10, r1
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:191
              && set_sst(*_p++)
              && set_sst(*_p++);
    190a:	a0 16       	cp	r10, r16
    190c:	b1 06       	cpc	r11, r17
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:190
    _result &= nvm_wait() && set_sstpr(_dwAddr);
    /* WRITE_PAGE */
    for (size_t _i = 0; _i < _wLength; _i += _tpi_chunks) {
      D2PRINTF(" CODE_WRITE=%08X:%04X\r\n", _dwAddr, _tpi_chunks);
      _result &= nvm_ctrl(0x1D)
              && set_sst(*_p++)
    190e:	08 f0       	brcs	.+2      	; 0x1912 <TPI::write_memory()+0xa0>
    1910:	77 c0       	rjmp	.+238    	; 0x1a00 <TPI::write_memory()+0x18e>
    1912:	8d e1       	ldi	r24, 0x1D	; 29
    1914:	75 d8       	rcall	.-3862   	; 0xa00 <TPI::nvm_ctrl(unsigned char)>
    1916:	88 23       	and	r24, r24
    1918:	29 f0       	breq	.+10     	; 0x1924 <TPI::write_memory()+0xb2>
    191a:	88 81       	ld	r24, Y
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:192
              && set_sst(*_p++);
      if (_tpi_chunks == 4) {
    191c:	89 d8       	rcall	.-3822   	; 0xa30 <TPI::set_sst(unsigned char)>
    191e:	81 11       	cpse	r24, r1
    1920:	35 c0       	rjmp	.+106    	; 0x198c <TPI::write_memory()+0x11a>
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:193
        idle_clock(12);
    1922:	21 96       	adiw	r28, 0x01	; 1
    1924:	78 22       	and	r7, r24
    1926:	94 e0       	ldi	r25, 0x04	; 4
    1928:	69 12       	cpse	r6, r25
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:194
        _result &= set_sst(*_p++) && set_sst(*_p++);
    192a:	46 c0       	rjmp	.+140    	; 0x19b8 <TPI::write_memory()+0x146>
    192c:	8c e0       	ldi	r24, 0x0C	; 12
    192e:	90 e0       	ldi	r25, 0x00	; 0
    1930:	a9 d8       	rcall	.-3758   	; 0xa84 <TPI::idle_clock(unsigned int)>
    1932:	88 81       	ld	r24, Y
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:200
      }
      if (_tpi_chunks == 8) {
        idle_clock(12);
        _result &= set_sst(*_p++) && set_sst(*_p++);
        idle_clock(12);
        _result &= set_sst(*_p++) && set_sst(*_p++);
    1934:	7d d8       	rcall	.-3846   	; 0xa30 <TPI::set_sst(unsigned char)>
    1936:	81 11       	cpse	r24, r1
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:177
    /* omitted if the chip has already been erased.   */
    /* 0x01: XPRG_MEM_TYPE_APPL */
    if (m_type != 0x01) {
      /* SECTION_ERASE */
      D2PRINTF(" SECTION_ERASE=%04X>%04X\r\n", _dwAddr | 1, _CAPS16(_before_page)->word);
      _result &= nvm_wait()
    1938:	31 c0       	rjmp	.+98     	; 0x199c <TPI::write_memory()+0x12a>
    193a:	21 96       	adiw	r28, 0x01	; 1
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:182
        && set_sstpr(_dwAddr | 1)
        && nvm_ctrl(0x14)
        && set_sst(0xFF)
        && nvm_wait()
        && nvm_ctrl(0x00);
    193c:	36 c0       	rjmp	.+108    	; 0x19aa <TPI::write_memory()+0x138>
    193e:	6c d8       	rcall	.-3880   	; 0xa18 <TPI::nvm_wait()>
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:178
    /* 0x01: XPRG_MEM_TYPE_APPL */
    if (m_type != 0x01) {
      /* SECTION_ERASE */
      D2PRINTF(" SECTION_ERASE=%04X>%04X\r\n", _dwAddr | 1, _CAPS16(_before_page)->word);
      _result &= nvm_wait()
        && set_sstpr(_dwAddr | 1)
    1940:	88 23       	and	r24, r24
    1942:	a1 f0       	breq	.+40     	; 0x196c <TPI::write_memory()+0xfa>
    1944:	c6 01       	movw	r24, r12
    1946:	81 60       	ori	r24, 0x01	; 1
    1948:	85 d8       	rcall	.-3830   	; 0xa54 <TPI::set_sstpr(unsigned int)>
    194a:	88 23       	and	r24, r24
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:179
        && nvm_ctrl(0x14)
    194c:	79 f0       	breq	.+30     	; 0x196c <TPI::write_memory()+0xfa>
    194e:	84 e1       	ldi	r24, 0x14	; 20
    1950:	57 d8       	rcall	.-3922   	; 0xa00 <TPI::nvm_ctrl(unsigned char)>
    1952:	88 23       	and	r24, r24
    1954:	59 f0       	breq	.+22     	; 0x196c <TPI::write_memory()+0xfa>
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:180
        && set_sst(0xFF)
    1956:	8f ef       	ldi	r24, 0xFF	; 255
    1958:	6b d8       	rcall	.-3882   	; 0xa30 <TPI::set_sst(unsigned char)>
    195a:	88 23       	and	r24, r24
    195c:	39 f0       	breq	.+14     	; 0x196c <TPI::write_memory()+0xfa>
    195e:	5c d8       	rcall	.-3912   	; 0xa18 <TPI::nvm_wait()>
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:181
        && nvm_wait()
    1960:	88 23       	and	r24, r24
    1962:	21 f0       	breq	.+8      	; 0x196c <TPI::write_memory()+0xfa>
    1964:	80 e0       	ldi	r24, 0x00	; 0
    1966:	4c d8       	rcall	.-3944   	; 0xa00 <TPI::nvm_ctrl(unsigned char)>
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:182
        && nvm_ctrl(0x00);
    1968:	81 11       	cpse	r24, r1
    196a:	c6 cf       	rjmp	.-116    	; 0x18f8 <TPI::write_memory()+0x86>
    196c:	c7 01       	movw	r24, r14
    196e:	df 91       	pop	r29
    1970:	cf 91       	pop	r28
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:207
      _result &= nvm_wait();
      if (!_result) return 0;
      _dwAddr += _tpi_chunks;
    }
    return nvm_ctrl(0x00);
  }
    1972:	1f 91       	pop	r17
    1974:	0f 91       	pop	r16
    1976:	ff 90       	pop	r15
    1978:	ef 90       	pop	r14
    197a:	df 90       	pop	r13
    197c:	cf 90       	pop	r12
    197e:	bf 90       	pop	r11
    1980:	af 90       	pop	r10
    1982:	9f 90       	pop	r9
    1984:	8f 90       	pop	r8
    1986:	7f 90       	pop	r7
    1988:	6f 90       	pop	r6
    198a:	08 95       	ret
    198c:	6e 01       	movw	r12, r28
    198e:	82 e0       	ldi	r24, 0x02	; 2
    1990:	c8 0e       	add	r12, r24
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:191
    /* WRITE_PAGE */
    for (size_t _i = 0; _i < _wLength; _i += _tpi_chunks) {
      D2PRINTF(" CODE_WRITE=%08X:%04X\r\n", _dwAddr, _tpi_chunks);
      _result &= nvm_ctrl(0x1D)
              && set_sst(*_p++)
              && set_sst(*_p++);
    1992:	d1 1c       	adc	r13, r1
    1994:	89 81       	ldd	r24, Y+1	; 0x01
    1996:	4c d8       	rcall	.-3944   	; 0xa30 <TPI::set_sst(unsigned char)>
    1998:	e6 01       	movw	r28, r12
    199a:	c4 cf       	rjmp	.-120    	; 0x1924 <TPI::write_memory()+0xb2>
    199c:	6e 01       	movw	r12, r28
    199e:	e2 e0       	ldi	r30, 0x02	; 2
    19a0:	ce 0e       	add	r12, r30
    19a2:	d1 1c       	adc	r13, r1
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:194
      if (_tpi_chunks == 4) {
        idle_clock(12);
        _result &= set_sst(*_p++) && set_sst(*_p++);
    19a4:	89 81       	ldd	r24, Y+1	; 0x01
    19a6:	44 d8       	rcall	.-3960   	; 0xa30 <TPI::set_sst(unsigned char)>
    19a8:	e6 01       	movw	r28, r12
    19aa:	78 22       	and	r7, r24
    19ac:	35 d8       	rcall	.-3990   	; 0xa18 <TPI::nvm_wait()>
    19ae:	78 22       	and	r7, r24
    19b0:	e9 f2       	breq	.-70     	; 0x196c <TPI::write_memory()+0xfa>
    19b2:	a8 0c       	add	r10, r8
    19b4:	b9 1c       	adc	r11, r9
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:202
        idle_clock(12);
        _result &= set_sst(*_p++) && set_sst(*_p++);
        idle_clock(12);
        _result &= set_sst(*_p++) && set_sst(*_p++);
      }
      _result &= nvm_wait();
    19b6:	a9 cf       	rjmp	.-174    	; 0x190a <TPI::write_memory()+0x98>
    19b8:	f8 e0       	ldi	r31, 0x08	; 8
    19ba:	6f 12       	cpse	r6, r31
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:203
      if (!_result) return 0;
    19bc:	f7 cf       	rjmp	.-18     	; 0x19ac <TPI::write_memory()+0x13a>
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:187
        && nvm_ctrl(0x00);
      if (!_result) return 0;
    }
    _result &= nvm_wait() && set_sstpr(_dwAddr);
    /* WRITE_PAGE */
    for (size_t _i = 0; _i < _wLength; _i += _tpi_chunks) {
    19be:	8c e0       	ldi	r24, 0x0C	; 12
    19c0:	90 e0       	ldi	r25, 0x00	; 0
    19c2:	60 d8       	rcall	.-3904   	; 0xa84 <TPI::idle_clock(unsigned int)>
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:196
              && set_sst(*_p++);
      if (_tpi_chunks == 4) {
        idle_clock(12);
        _result &= set_sst(*_p++) && set_sst(*_p++);
      }
      if (_tpi_chunks == 8) {
    19c4:	88 81       	ld	r24, Y
    19c6:	34 d8       	rcall	.-3992   	; 0xa30 <TPI::set_sst(unsigned char)>
    19c8:	6e 01       	movw	r12, r28
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:197
        idle_clock(12);
    19ca:	81 11       	cpse	r24, r1
    19cc:	13 c0       	rjmp	.+38     	; 0x19f4 <TPI::write_memory()+0x182>
    19ce:	4f ef       	ldi	r20, 0xFF	; 255
    19d0:	c4 1a       	sub	r12, r20
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:198
        _result &= set_sst(*_p++) && set_sst(*_p++);
    19d2:	d4 0a       	sbc	r13, r20
    19d4:	78 22       	and	r7, r24
    19d6:	8c e0       	ldi	r24, 0x0C	; 12
    19d8:	90 e0       	ldi	r25, 0x00	; 0
    19da:	54 d8       	rcall	.-3928   	; 0xa84 <TPI::idle_clock(unsigned int)>
    19dc:	f6 01       	movw	r30, r12
    19de:	80 81       	ld	r24, Z
    19e0:	27 d8       	rcall	.-4018   	; 0xa30 <TPI::set_sst(unsigned char)>
    19e2:	e6 01       	movw	r28, r12
    19e4:	88 23       	and	r24, r24
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:199
        idle_clock(12);
    19e6:	09 f4       	brne	.+2      	; 0x19ea <TPI::write_memory()+0x178>
    19e8:	a8 cf       	rjmp	.-176    	; 0x193a <TPI::write_memory()+0xc8>
    19ea:	22 96       	adiw	r28, 0x02	; 2
    19ec:	f6 01       	movw	r30, r12
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:200
        _result &= set_sst(*_p++) && set_sst(*_p++);
    19ee:	81 81       	ldd	r24, Z+1	; 0x01
    19f0:	1f d8       	rcall	.-4034   	; 0xa30 <TPI::set_sst(unsigned char)>
    19f2:	db cf       	rjmp	.-74     	; 0x19aa <TPI::write_memory()+0x138>
    19f4:	82 e0       	ldi	r24, 0x02	; 2
    19f6:	c8 0e       	add	r12, r24
    19f8:	d1 1c       	adc	r13, r1
    19fa:	89 81       	ldd	r24, Y+1	; 0x01
    19fc:	19 d8       	rcall	.-4046   	; 0xa30 <TPI::set_sst(unsigned char)>
    19fe:	ea cf       	rjmp	.-44     	; 0x19d4 <TPI::write_memory()+0x162>
    1a00:	80 e0       	ldi	r24, 0x00	; 0
    1a02:	0e 94 00 05 	call	0xa00	; 0xa00 <TPI::nvm_ctrl(unsigned char)>
    1a06:	e8 2e       	mov	r14, r24
    1a08:	f1 2c       	mov	r15, r1
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:198
        idle_clock(12);
        _result &= set_sst(*_p++) && set_sst(*_p++);
      }
      if (_tpi_chunks == 8) {
        idle_clock(12);
        _result &= set_sst(*_p++) && set_sst(*_p++);
    1a0a:	b0 cf       	rjmp	.-160    	; 0x196c <TPI::write_memory()+0xfa>

00001a0c <TPI::read_memory()>:
read_memory():
    1a0c:	0f 93       	push	r16
    1a0e:	1f 93       	push	r17
    1a10:	cf 93       	push	r28
    1a12:	df 93       	push	r29
bswap16():
    1a14:	80 91 c7 60 	lds	r24, 0x60C7	; 0x8060c7 <packet+0x9>
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:206
      }
      _result &= nvm_wait();
      if (!_result) return 0;
      _dwAddr += _tpi_chunks;
    }
    return nvm_ctrl(0x00);
    1a18:	90 91 c8 60 	lds	r25, 0x60C8	; 0x8060c8 <packet+0xa>
    1a1c:	c0 91 c9 60 	lds	r28, 0x60C9	; 0x8060c9 <packet+0xb>
    1a20:	d0 91 ca 60 	lds	r29, 0x60CA	; 0x8060ca <packet+0xc>
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:136
        }
    }
    return 0;
  }

  size_t read_memory (void) {
    1a24:	dc 27       	eor	r29, r28
    1a26:	cd 27       	eor	r28, r29
    1a28:	dc 27       	eor	r29, r28
read_memory():
    1a2a:	98 27       	eor	r25, r24
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/modernAVR/0.2.14/cores/modernAVR/api/cpp/btools.cpp:45
    1a2c:	89 27       	eor	r24, r25
    1a2e:	98 27       	eor	r25, r24
    1a30:	11 d8       	rcall	.-4062   	; 0xa54 <TPI::set_sstpr(unsigned int)>
    1a32:	0e eb       	ldi	r16, 0xBE	; 190
    1a34:	10 e6       	ldi	r17, 0x60	; 96
    1a36:	c8 01       	movw	r24, r16
    1a38:	8e 5b       	subi	r24, 0xBE	; 190
    1a3a:	90 46       	sbci	r25, 0x60	; 96
    1a3c:	8c 17       	cp	r24, r28
    1a3e:	9d 07       	cpc	r25, r29
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:143
    uint16_t _dwAddr = bswap16(_CAPS32(packet.out.tpi.read.dwAddr)->words[1]);
    size_t  _wLength = bswap16(packet.out.tpi.read.wLength);
    uint8_t *_q = &packet.in.data[0];
    size_t _cnt = 0;
    D2PRINTF(" READ=%08X:%04X\r\n", _dwAddr, _wLength);
    set_sstpr(_dwAddr);
    1a40:	48 f4       	brcc	.+18     	; 0x1a54 <TPI::read_memory()+0x48>
    1a42:	02 d8       	rcall	.-4092   	; 0xa48 <TPI::get_sld()>
    1a44:	0f 5f       	subi	r16, 0xFF	; 255
    1a46:	1f 4f       	sbci	r17, 0xFF	; 255
    1a48:	88 23       	and	r24, r24
    1a4a:	59 f0       	breq	.+22     	; 0x1a62 <TPI::read_memory()+0x56>
    1a4c:	8f b3       	in	r24, 0x1f	; 31
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:144
    while (_cnt < _wLength) {
    1a4e:	f8 01       	movw	r30, r16
    1a50:	86 83       	std	Z+6, r24	; 0x06
    1a52:	f1 cf       	rjmp	.-30     	; 0x1a36 <TPI::read_memory()+0x2a>
    1a54:	ce 01       	movw	r24, r28
    1a56:	01 96       	adiw	r24, 0x01	; 1
    1a58:	df 91       	pop	r29
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:145
      if (!get_sld()) return 0;
    1a5a:	cf 91       	pop	r28
    1a5c:	1f 91       	pop	r17
    1a5e:	0f 91       	pop	r16
    1a60:	08 95       	ret
    1a62:	90 e0       	ldi	r25, 0x00	; 0
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:146
      *_q++ = RXDATA;
    1a64:	80 e0       	ldi	r24, 0x00	; 0
    1a66:	f8 cf       	rjmp	.-16     	; 0x1a58 <TPI::read_memory()+0x4c>

00001a68 <TPI::erase_memory()>:
erase_memory():
    1a68:	cf 93       	push	r28
    1a6a:	df 93       	push	r29
bswap16():
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:149
      ++_cnt;
    }
    return _wLength + 1;
    1a6c:	c0 91 c7 60 	lds	r28, 0x60C7	; 0x8060c7 <packet+0x9>
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:150
  }
    1a70:	d0 91 c8 60 	lds	r29, 0x60C8	; 0x8060c8 <packet+0xa>
    1a74:	dc 27       	eor	r29, r28
    1a76:	cd 27       	eor	r28, r29
    1a78:	dc 27       	eor	r29, r28
erase_memory():
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:145
    uint8_t *_q = &packet.in.data[0];
    size_t _cnt = 0;
    D2PRINTF(" READ=%08X:%04X\r\n", _dwAddr, _wLength);
    set_sstpr(_dwAddr);
    while (_cnt < _wLength) {
      if (!get_sld()) return 0;
    1a7a:	80 91 c4 60 	lds	r24, 0x60C4	; 0x8060c4 <packet+0x6>
    1a7e:	81 30       	cpi	r24, 0x01	; 1
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:103

  bool nvm_ctrl (const uint8_t _nvmcmd) {
    return set_sout(0x63, _nvmcmd);   /* NVMCMD_REG: IO=0x33 */
  }

  size_t erase_memory (void) {
    1a80:	09 f5       	brne	.+66     	; 0x1ac4 <TPI::erase_memory()+0x5c>
    1a82:	0e 94 0c 05 	call	0xa18	; 0xa18 <TPI::nvm_wait()>
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/modernAVR/0.2.14/cores/modernAVR/api/cpp/btools.cpp:45
    1a86:	81 11       	cpse	r24, r1
    1a88:	05 c0       	rjmp	.+10     	; 0x1a94 <TPI::erase_memory()+0x2c>
    1a8a:	90 e0       	ldi	r25, 0x00	; 0
    1a8c:	80 e0       	ldi	r24, 0x00	; 0
    1a8e:	df 91       	pop	r29
    1a90:	cf 91       	pop	r28
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:106
    uint8_t   m_type = packet.out.tpi.read.bMType;
    uint16_t _dwAddr = bswap16(_CAPS32(packet.out.tpi.read.dwAddr)->words[1]);
    if (m_type == 0x01) {
    1a92:	08 95       	ret
    1a94:	ce 01       	movw	r24, r28
    1a96:	0e 94 2a 05 	call	0xa54	; 0xa54 <TPI::set_sstpr(unsigned int)>
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:109
      /* XPRG_ERASE_CHIP */
      D1PRINTF(" CHIP_ERASE=%04X\r\n", _dwAddr);
      if (nvm_wait()
    1a9a:	88 23       	and	r24, r24
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:114
        && set_sstpr(_dwAddr)
        && nvm_ctrl(0x10)
        && set_sst(0xFF)
        && nvm_wait()
        && nvm_ctrl(0x00)) {
    1a9c:	b1 f3       	breq	.-20     	; 0x1a8a <TPI::erase_memory()+0x22>
    1a9e:	80 e1       	ldi	r24, 0x10	; 16
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:133
        && nvm_wait()
        && nvm_ctrl(0x00)) {
          return 1;
        }
    }
    return 0;
    1aa0:	0e 94 00 05 	call	0xa00	; 0xa00 <TPI::nvm_ctrl(unsigned char)>
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:134
  }
    1aa4:	88 23       	and	r24, r24
    1aa6:	89 f3       	breq	.-30     	; 0x1a8a <TPI::erase_memory()+0x22>
    1aa8:	8f ef       	ldi	r24, 0xFF	; 255
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:110
    uint16_t _dwAddr = bswap16(_CAPS32(packet.out.tpi.read.dwAddr)->words[1]);
    if (m_type == 0x01) {
      /* XPRG_ERASE_CHIP */
      D1PRINTF(" CHIP_ERASE=%04X\r\n", _dwAddr);
      if (nvm_wait()
        && set_sstpr(_dwAddr)
    1aaa:	0e 94 18 05 	call	0xa30	; 0xa30 <TPI::set_sst(unsigned char)>
    1aae:	88 23       	and	r24, r24
    1ab0:	61 f3       	breq	.-40     	; 0x1a8a <TPI::erase_memory()+0x22>
    1ab2:	0e 94 0c 05 	call	0xa18	; 0xa18 <TPI::nvm_wait()>
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:126
      /* Currently not called on AVRDUDE<=7.3. */
      /* It may be called from terminal mode.  */
      D1PRINTF(" SECTION_ERASE=%04X\r\n", _dwAddr);
      if (nvm_wait()
        && set_sstpr(_dwAddr)
        && nvm_ctrl(0x14)
    1ab6:	88 23       	and	r24, r24
    1ab8:	41 f3       	breq	.-48     	; 0x1a8a <TPI::erase_memory()+0x22>
    1aba:	80 e0       	ldi	r24, 0x00	; 0
    1abc:	0e 94 00 05 	call	0xa00	; 0xa00 <TPI::nvm_ctrl(unsigned char)>
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:127
        && set_sst(0xFF)
    1ac0:	90 e0       	ldi	r25, 0x00	; 0
    1ac2:	e5 cf       	rjmp	.-54     	; 0x1a8e <TPI::erase_memory()+0x26>
    1ac4:	0e 94 0c 05 	call	0xa18	; 0xa18 <TPI::nvm_wait()>
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:128
        && nvm_wait()
    1ac8:	88 23       	and	r24, r24
    1aca:	f9 f2       	breq	.-66     	; 0x1a8a <TPI::erase_memory()+0x22>
    1acc:	ce 01       	movw	r24, r28
    1ace:	0e 94 2a 05 	call	0xa54	; 0xa54 <TPI::set_sstpr(unsigned int)>
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:129
        && nvm_ctrl(0x00)) {
    1ad2:	88 23       	and	r24, r24
    1ad4:	d1 f2       	breq	.-76     	; 0x1a8a <TPI::erase_memory()+0x22>
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:133
          return 1;
        }
    }
    return 0;
    1ad6:	84 e1       	ldi	r24, 0x14	; 20
    1ad8:	e3 cf       	rjmp	.-58     	; 0x1aa0 <TPI::erase_memory()+0x38>

00001ada <__vector_19>:
__vector_19():
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:124
      /* 0x02: XPRG_ERASE_APP */
      /* 0x09: XPRG_ERASE_CONFIG */
      /* Currently not called on AVRDUDE<=7.3. */
      /* It may be called from terminal mode.  */
      D1PRINTF(" SECTION_ERASE=%04X\r\n", _dwAddr);
      if (nvm_wait()
    1ada:	1f 92       	push	r1
    1adc:	0f 92       	push	r0
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:129
        && set_sstpr(_dwAddr)
        && nvm_ctrl(0x14)
        && set_sst(0xFF)
        && nvm_wait()
        && nvm_ctrl(0x00)) {
    1ade:	0f b6       	in	r0, 0x3f	; 63
    1ae0:	0f 92       	push	r0
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:125
      /* 0x09: XPRG_ERASE_CONFIG */
      /* Currently not called on AVRDUDE<=7.3. */
      /* It may be called from terminal mode.  */
      D1PRINTF(" SECTION_ERASE=%04X\r\n", _dwAddr);
      if (nvm_wait()
        && set_sstpr(_dwAddr)
    1ae2:	11 24       	eor	r1, r1
    1ae4:	2f 93       	push	r18
    1ae6:	3f 93       	push	r19
    1ae8:	4f 93       	push	r20
    1aea:	5f 93       	push	r21
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:126
        && nvm_ctrl(0x14)
    1aec:	6f 93       	push	r22
    1aee:	7f 93       	push	r23
/Users/askn/Collaborator/UPDI4AVR-USB/src/usart.cpp:222
  }

};

/*** CMSIS-DAP VCOM,VCP transceiver ***/
ISR(USART0_RXC_vect) {
    1af0:	8f 93       	push	r24
    1af2:	9f 93       	push	r25
    1af4:	af 93       	push	r26
    1af6:	bf 93       	push	r27
    1af8:	cf 93       	push	r28
    1afa:	ef 93       	push	r30
    1afc:	ff 93       	push	r31
vcp_receiver():
    1afe:	c0 91 01 08 	lds	r28, 0x0801	; 0x800801 <__TEXT_REGION_LENGTH__+0x7f0801>
    1b02:	20 91 00 08 	lds	r18, 0x0800	; 0x800800 <__TEXT_REGION_LENGTH__+0x7f0800>
    1b06:	8c 2f       	mov	r24, r28
    1b08:	86 74       	andi	r24, 0x46	; 70
    1b0a:	b1 f4       	brne	.+44     	; 0x1b38 <__vector_19+0x5e>
write_byte():
    1b0c:	e2 99       	sbic	0x1c, 2	; 28
    1b0e:	5f c0       	rjmp	.+190    	; 0x1bce <__vector_19+0xf4>
__vector_19():
    1b10:	8e e9       	ldi	r24, 0x9E	; 158
    1b12:	93 e6       	ldi	r25, 0x63	; 99
write_byte():
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:470
  void read_drop (void) {
    if (bit_is_set(EP_CDO.STATUS, USB_BUSNAK_bp)) ep_cdo_listen();
  }

  void vcp_receiver (void) {
    uint8_t _d = USART0_RXDATAH;
    1b14:	e0 91 22 64 	lds	r30, 0x6422	; 0x806422 <_send_count>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:471
    uint8_t _c = USART0_RXDATAL;
    1b18:	31 e0       	ldi	r19, 0x01	; 1
    1b1a:	3e 0f       	add	r19, r30
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:472
    if (!(_d & (USART_BUFOVF_bm | USART_FERR_bm | USART_PERR_bm))) {
    1b1c:	30 93 22 64 	sts	0x6422, r19	; 0x806422 <_send_count>
    1b20:	e8 0f       	add	r30, r24
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:434
  }

  void write_byte (const uint8_t _c) {
    /* The double buffer consists of two blocks. */
    uint8_t* _buf = bit_is_set(GPCONF, GPCONF_DBL_bp)
      ? &EP_MEM.cdi_data[64]
    1b22:	f9 2f       	mov	r31, r25
    1b24:	f1 1d       	adc	r31, r1
    1b26:	20 83       	st	Z, r18
    1b28:	80 91 22 64 	lds	r24, 0x6422	; 0x806422 <_send_count>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:436
      : &EP_MEM.cdi_data[0];
    _buf[_send_count++] = _c;
    1b2c:	80 34       	cpi	r24, 0x40	; 64
    1b2e:	08 f0       	brcs	.+2      	; 0x1b32 <__vector_19+0x58>
    1b30:	51 c0       	rjmp	.+162    	; 0x1bd4 <__vector_19+0xfa>
    1b32:	8e e1       	ldi	r24, 0x1E	; 30
    1b34:	80 93 1f 64 	sts	0x641F, r24	; 0x80641f <_sof_count>
vcp_receiver():
    1b38:	8e b3       	in	r24, 0x1e	; 30
    1b3a:	c8 2b       	or	r28, r24
    1b3c:	ce bb       	out	0x1e, r28	; 30
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:437
    if (_send_count < 64) _sof_count = 30;
    1b3e:	80 91 56 64 	lds	r24, 0x6456	; 0x806456 <EP_TABLE+0x30>
    1b42:	81 ff       	sbrs	r24, 1
    1b44:	32 c0       	rjmp	.+100    	; 0x1baa <__vector_19+0xd0>
cci_interrupt():
    1b46:	8e b1       	in	r24, 0x0e	; 14
    1b48:	80 95       	com	r24
    1b4a:	8b 70       	andi	r24, 0x0B	; 11
    1b4c:	f2 99       	sbic	0x1e, 2	; 30
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:475
    uint8_t _d = USART0_RXDATAH;
    uint8_t _c = USART0_RXDATAL;
    if (!(_d & (USART_BUFOVF_bm | USART_FERR_bm | USART_PERR_bm))) {
      write_byte(_c);
    }
    RXSTAT |= _d;
    1b4e:	80 61       	ori	r24, 0x10	; 16
    1b50:	f1 99       	sbic	0x1e, 1	; 30
    1b52:	80 62       	ori	r24, 0x20	; 32
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:477
  #if defined(CONFIG_VCP_INTERRUPT_SUPPRT)
    if (bit_is_set(EP_CCI.STATUS, USB_BUSNAK_bp)) cci_interrupt();
    1b54:	f6 99       	sbic	0x1e, 6	; 30
    1b56:	80 64       	ori	r24, 0x40	; 64
    1b58:	1e ba       	out	0x1e, r1	; 30
    1b5a:	e4 9b       	sbis	0x1c, 4	; 28
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:415

  void cci_interrupt (void) {
  #if defined(CONFIG_VCP_INTERRUPT_SUPPRT)
    SerialState_t _value = {};
    #if defined(CONFIG_VCP_RS232C_ENABLE)
    uint8_t _c = VPORTD_IN;
    1b5c:	26 c0       	rjmp	.+76     	; 0x1baa <__vector_19+0xd0>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:416
    _value.bValue = (_c ^ 0x0B) & 0x0B;
    1b5e:	90 91 1e 64 	lds	r25, 0x641E	; 0x80641e <_set_serial_state>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:418
    #endif
    if (bit_is_set(RXSTAT, USART_FERR_bp))   _value.bFraming = true;
    1b62:	89 17       	cp	r24, r25
    1b64:	11 f1       	breq	.+68     	; 0x1baa <__vector_19+0xd0>
set_cci_data():
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:419
    if (bit_is_set(RXSTAT, USART_PERR_bp))   _value.bParity  = true;
    1b66:	80 93 1e 64 	sts	0x641E, r24	; 0x80641e <_set_serial_state>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:420
    if (bit_is_set(RXSTAT, USART_BUFOVF_bp)) _value.bOverRun = true;
    1b6a:	91 ea       	ldi	r25, 0xA1	; 161
    1b6c:	90 93 0e 63 	sts	0x630E, r25	; 0x80630e <EP_MEM+0x8>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:422
    RXSTAT = 0;
    if (bit_is_set(GPCONF, GPCONF_OPN_bp) && _set_serial_state != _value.bValue) {
    1b70:	90 e2       	ldi	r25, 0x20	; 32
    1b72:	90 93 0f 63 	sts	0x630F, r25	; 0x80630f <EP_MEM+0x9>
    1b76:	10 92 10 63 	sts	0x6310, r1	; 0x806310 <EP_MEM+0xa>
    1b7a:	10 92 11 63 	sts	0x6311, r1	; 0x806311 <EP_MEM+0xb>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:225
    if (_size) memcpy_P(_buffer, _pgmem, _size);
    return _size;
  }

  void set_cci_data (uint16_t _state) {
    _set_serial_state = _state;
    1b7e:	21 e0       	ldi	r18, 0x01	; 1
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:226
    EP_MEM.cci_header.bmRequestType = 0xA1; /* REQTYPE_DIRECTION | REQTYPE_CLASS | RECIPIENT_INTERFACE */
    1b80:	30 e0       	ldi	r19, 0x00	; 0
    1b82:	20 93 12 63 	sts	0x6312, r18	; 0x806312 <EP_MEM+0xc>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:227
    EP_MEM.cci_header.bRequest      = 0x20; /* CDC_REQ_SerialState */
    1b86:	30 93 13 63 	sts	0x6313, r19	; 0x806313 <EP_MEM+0xd>
    1b8a:	22 e0       	ldi	r18, 0x02	; 2
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:228
    EP_MEM.cci_header.wValue        = 0;
    1b8c:	30 e0       	ldi	r19, 0x00	; 0
    1b8e:	20 93 14 63 	sts	0x6314, r18	; 0x806314 <EP_MEM+0xe>
    1b92:	30 93 15 63 	sts	0x6315, r19	; 0x806315 <EP_MEM+0xf>
cci_interrupt():
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:229
    EP_MEM.cci_header.wIndex        = 1;    /* Interface#1 */
    1b96:	90 e0       	ldi	r25, 0x00	; 0
    1b98:	80 93 16 63 	sts	0x6316, r24	; 0x806316 <EP_MEM+0x10>
    1b9c:	90 93 17 63 	sts	0x6317, r25	; 0x806317 <EP_MEM+0x11>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:230
    EP_MEM.cci_header.wLength       = 2;
    1ba0:	80 91 56 64 	lds	r24, 0x6456	; 0x806456 <EP_TABLE+0x30>
    1ba4:	81 fd       	sbrc	r24, 1
    1ba6:	0e 94 b4 01 	call	0x368	; 0x368 <USB::ep_cci_listen()>
__vector_19():
    1baa:	ff 91       	pop	r31
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:423
    if (bit_is_set(RXSTAT, USART_FERR_bp))   _value.bFraming = true;
    if (bit_is_set(RXSTAT, USART_PERR_bp))   _value.bParity  = true;
    if (bit_is_set(RXSTAT, USART_BUFOVF_bp)) _value.bOverRun = true;
    RXSTAT = 0;
    if (bit_is_set(GPCONF, GPCONF_OPN_bp) && _set_serial_state != _value.bValue) {
      set_cci_data(_value.bValue);
    1bac:	ef 91       	pop	r30
    1bae:	cf 91       	pop	r28
    1bb0:	bf 91       	pop	r27
    1bb2:	af 91       	pop	r26
    1bb4:	9f 91       	pop	r25
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:426
      D1PRINTF(" CCI=");
      D1PRINTHEX(&EP_MEM.cci_data, 10);
      if (bit_is_set(EP_CCI.STATUS, USB_BUSNAK_bp)) ep_cci_listen();
    1bb6:	8f 91       	pop	r24
    1bb8:	7f 91       	pop	r23
    1bba:	6f 91       	pop	r22
    1bbc:	5f 91       	pop	r21
    1bbe:	4f 91       	pop	r20
/Users/askn/Collaborator/UPDI4AVR-USB/src/usart.cpp:228
#if defined(CONFIG_VCP_9BIT_SUPPORT)
  usart_receiver();
#else
  USB::vcp_receiver();
#endif
}
    1bc0:	3f 91       	pop	r19
    1bc2:	2f 91       	pop	r18
    1bc4:	0f 90       	pop	r0
    1bc6:	0f be       	out	0x3f, r0	; 63
    1bc8:	0f 90       	pop	r0
    1bca:	1f 90       	pop	r1
    1bcc:	18 95       	reti
    1bce:	8e ed       	ldi	r24, 0xDE	; 222
    1bd0:	93 e6       	ldi	r25, 0x63	; 99
    1bd2:	a0 cf       	rjmp	.-192    	; 0x1b14 <__vector_19+0x3a>
write_byte():
    1bd4:	0e 94 80 01 	call	0x300	; 0x300 <USB::ep_cdi_listen()>
    1bd8:	af cf       	rjmp	.-162    	; 0x1b38 <__vector_19+0x5e>

00001bda <__vector_15>:
__vector_15():
    1bda:	11 24       	eor	r1, r1
    1bdc:	10 92 00 0b 	sts	0x0B00, r1	; 0x800b00 <__TEXT_REGION_LENGTH__+0x7f0b00>
    1be0:	81 e0       	ldi	r24, 0x01	; 1
    1be2:	80 93 06 0b 	sts	0x0B06, r24	; 0x800b06 <__TEXT_REGION_LENGTH__+0x7f0b06>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:434
  }

  void write_byte (const uint8_t _c) {
    /* The double buffer consists of two blocks. */
    uint8_t* _buf = bit_is_set(GPCONF, GPCONF_DBL_bp)
      ? &EP_MEM.cdi_data[64]
    1be6:	62 e0       	ldi	r22, 0x02	; 2
    1be8:	70 e0       	ldi	r23, 0x00	; 0
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:438
      : &EP_MEM.cdi_data[0];
    _buf[_send_count++] = _c;
    if (_send_count < 64) _sof_count = 30;
    else ep_cdi_listen();
    1bea:	80 e7       	ldi	r24, 0x70	; 112
    1bec:	94 e6       	ldi	r25, 0x64	; 100
    1bee:	43 d7       	rcall	.+3718   	; 0x2a76 <longjmp>

00001bf0 <Timeout::stop()>:
_ZN7Timeout4stopEv():
/Users/askn/Collaborator/UPDI4AVR-USB/src/timeout.cpp:102
ISR(TCB0_INT_vect, ISR_NAKED) {
  /***
    This interrupt is a global escape due to timeout.
    There is no return to the source of the interrupt.
  ***/
  __asm__ __volatile__ ("EOR R1,R1");
    1bf0:	8f b7       	in	r24, 0x3f	; 63
__iCliRetVal():
/Users/askn/Collaborator/UPDI4AVR-USB/src/timeout.cpp:106
#if defined(DEBUG)
  RTC_CMP = SP;
#endif
  TCB0_CTRLA = 0;
    1bf2:	f8 94       	cli
_ZN7Timeout4stopEv():
    1bf4:	10 92 00 0b 	sts	0x0B00, r1	; 0x800b00 <__TEXT_REGION_LENGTH__+0x7f0b00>
/Users/askn/Collaborator/UPDI4AVR-USB/src/timeout.cpp:107
  TCB0_INTFLAGS = TCB_CAPT_bm;
    1bf8:	91 e0       	ldi	r25, 0x01	; 1
    1bfa:	90 93 06 0b 	sts	0x0B06, r25	; 0x800b06 <__TEXT_REGION_LENGTH__+0x7f0b06>
__iRestore():
/Users/askn/Collaborator/UPDI4AVR-USB/src/timeout.cpp:108
  longjmp(TIMEOUT_CONTEXT, 2);
    1bfe:	8f bf       	out	0x3f, r24	; 63
_ZN7Timeout4stopEv():
    1c00:	18 95       	reti

00001c02 <Timeout::command(unsigned int (*)(), unsigned int) [clone .constprop.8]>:
command():
    1c02:	cf 93       	push	r28
    1c04:	df 93       	push	r29
    1c06:	00 d0       	rcall	.+0      	; 0x1c08 <Timeout::command(unsigned int (*)(), unsigned int) [clone .constprop.8]+0x6>
/Users/askn/Collaborator/UPDI4AVR-USB/src/timeout.cpp:53
   * Exit from the timeout block.
   * The last RETI is required.
   */
  __attribute__((used, naked, noinline))
  void stop (void) {
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    1c08:	00 d0       	rcall	.+0      	; 0x1c0a <Timeout::command(unsigned int (*)(), unsigned int) [clone .constprop.8]+0x8>
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/tools/avr-gcc/7.3.0-avr8-gnu-toolchain/avr/include/util/atomic.h:50
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1c0a:	cd b7       	in	r28, 0x3d	; 61
/Users/askn/Collaborator/UPDI4AVR-USB/src/timeout.cpp:54
      TCB0_CTRLA = 0;
    1c0c:	de b7       	in	r29, 0x3e	; 62
    1c0e:	8b 83       	std	Y+3, r24	; 0x03
/Users/askn/Collaborator/UPDI4AVR-USB/src/timeout.cpp:55
      TCB0_INTFLAGS = TCB_CAPT_bm;
    1c10:	9c 83       	std	Y+4, r25	; 0x04
    1c12:	19 82       	std	Y+1, r1	; 0x01
    1c14:	1a 82       	std	Y+2, r1	; 0x02
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/tools/avr-gcc/7.3.0-avr8-gnu-toolchain/avr/include/util/atomic.h:70
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1c16:	80 e7       	ldi	r24, 0x70	; 112
/Users/askn/Collaborator/UPDI4AVR-USB/src/timeout.cpp:57
    }
    reti();
    1c18:	94 e6       	ldi	r25, 0x64	; 100
/Users/askn/Collaborator/UPDI4AVR-USB/src/timeout.cpp:74
  /*
   * Timeout block.
   * Does not work with interrupts disabled.
   * RETI must be called after the interrupt is suspended.
   */
  size_t command (size_t (*func_p)(void), uint16_t _ms) {
    1c1a:	0d d7       	rcall	.+3610   	; 0x2a36 <setjmp>
    1c1c:	89 2b       	or	r24, r25
    1c1e:	d9 f4       	brne	.+54     	; 0x1c56 <Timeout::command(unsigned int (*)(), unsigned int) [clone .constprop.8]+0x54>
start():
    1c20:	9f b7       	in	r25, 0x3f	; 63
__iCliRetVal():
    1c22:	f8 94       	cli
start():
    1c24:	10 92 0a 0b 	sts	0x0B0A, r1	; 0x800b0a <__TEXT_REGION_LENGTH__+0x7f0b0a>
    1c28:	10 92 0b 0b 	sts	0x0B0B, r1	; 0x800b0b <__TEXT_REGION_LENGTH__+0x7f0b0b>
/Users/askn/Collaborator/UPDI4AVR-USB/src/timeout.cpp:75
    volatile size_t _result = 0;
    1c2c:	20 e2       	ldi	r18, 0x20	; 32
/Users/askn/Collaborator/UPDI4AVR-USB/src/timeout.cpp:76
    if (setjmp(TIMEOUT_CONTEXT) == 0) {
    1c2e:	33 e0       	ldi	r19, 0x03	; 3
    1c30:	20 93 0c 0b 	sts	0x0B0C, r18	; 0x800b0c <__TEXT_REGION_LENGTH__+0x7f0b0c>
    1c34:	30 93 0d 0b 	sts	0x0B0D, r19	; 0x800b0d <__TEXT_REGION_LENGTH__+0x7f0b0d>
    1c38:	81 e0       	ldi	r24, 0x01	; 1
/Users/askn/Collaborator/UPDI4AVR-USB/src/timeout.cpp:38
  /*
   * Timeout after the specified time.
   * To be precise, in 1/1024 sec units.
   */
  void start (uint16_t _ms) {
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    1c3a:	80 93 05 0b 	sts	0x0B05, r24	; 0x800b05 <__TEXT_REGION_LENGTH__+0x7f0b05>
/Users/askn/Collaborator/UPDI4AVR-USB/src/timeout.cpp:39
      TCB0_CNT = 0;
    1c3e:	80 93 06 0b 	sts	0x0B06, r24	; 0x800b06 <__TEXT_REGION_LENGTH__+0x7f0b06>
    1c42:	8f e0       	ldi	r24, 0x0F	; 15
    1c44:	80 93 00 0b 	sts	0x0B00, r24	; 0x800b00 <__TEXT_REGION_LENGTH__+0x7f0b00>
__iRestore():
/Users/askn/Collaborator/UPDI4AVR-USB/src/timeout.cpp:40
      TCB0_CCMP = _ms;
    1c48:	9f bf       	out	0x3f, r25	; 63
command():
    1c4a:	eb 81       	ldd	r30, Y+3	; 0x03
    1c4c:	fc 81       	ldd	r31, Y+4	; 0x04
    1c4e:	09 95       	icall
    1c50:	89 83       	std	Y+1, r24	; 0x01
/Users/askn/Collaborator/UPDI4AVR-USB/src/timeout.cpp:41
      TCB0_INTCTRL = TCB_CAPT_bm;
    1c52:	9a 83       	std	Y+2, r25	; 0x02
    1c54:	ef 98       	cbi	0x1d, 7	; 29
    1c56:	cc df       	rcall	.-104    	; 0x1bf0 <Timeout::stop()>
/Users/askn/Collaborator/UPDI4AVR-USB/src/timeout.cpp:42
      TCB0_INTFLAGS = TCB_CAPT_bm;
    1c58:	89 81       	ldd	r24, Y+1	; 0x01
    1c5a:	9a 81       	ldd	r25, Y+2	; 0x02
/Users/askn/Collaborator/UPDI4AVR-USB/src/timeout.cpp:43
      TCB0_CTRLA = TCB_ENABLE_bm | TCB_CLKSEL_EVENT_gc; /* for EVSYS_USERTCB0COUNT */
    1c5c:	24 96       	adiw	r28, 0x04	; 4
    1c5e:	cd bf       	out	0x3d, r28	; 61
    1c60:	de bf       	out	0x3e, r29	; 62
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/tools/avr-gcc/7.3.0-avr8-gnu-toolchain/avr/include/util/atomic.h:70
    1c62:	df 91       	pop	r29
/Users/askn/Collaborator/UPDI4AVR-USB/src/timeout.cpp:78
   */
  size_t command (size_t (*func_p)(void), uint16_t _ms) {
    volatile size_t _result = 0;
    if (setjmp(TIMEOUT_CONTEXT) == 0) {
      Timeout::start(_ms);
      _result = (*func_p)();
    1c64:	cf 91       	pop	r28
    1c66:	08 95       	ret

00001c68 <__vector_6>:
__vector_6():
    1c68:	1f 92       	push	r1
    1c6a:	0f 92       	push	r0
    1c6c:	0f b6       	in	r0, 0x3f	; 63
/Users/askn/Collaborator/UPDI4AVR-USB/src/timeout.cpp:79
      bit_clear(PGCONF, PGCONF_FAIL_bp);
    1c6e:	0f 92       	push	r0
/Users/askn/Collaborator/UPDI4AVR-USB/src/timeout.cpp:87
      /* Stack dump. */
      /* An unused register is borrowed to store the SP. */
      D1PRINTF("\r\n!TIMEOUT:%04lX>", RTC_CMP);
      D1PRINTHEX((const void*)(RTC_CMP + 1), 16);
    }
    Timeout::stop();
    1c70:	11 24       	eor	r1, r1
    1c72:	8f 93       	push	r24
/Users/askn/Collaborator/UPDI4AVR-USB/src/timeout.cpp:88
    return _result;
    1c74:	8f ef       	ldi	r24, 0xFF	; 255
    1c76:	80 93 c7 01 	sts	0x01C7, r24	; 0x8001c7 <__TEXT_REGION_LENGTH__+0x7f01c7>
/Users/askn/Collaborator/UPDI4AVR-USB/src/timeout.cpp:89
  }
    1c7a:	e7 9a       	sbi	0x1c, 7	; 28
    1c7c:	8f 91       	pop	r24
    1c7e:	0f 90       	pop	r0
    1c80:	0f be       	out	0x3f, r0	; 63
    1c82:	0f 90       	pop	r0
/Users/askn/Collaborator/UPDI4AVR-USB/src/sys.cpp:358
  /* SW0 Raising Interrupt */
  vportRegister(PIN_SYS_SW0).INTFLAGS = ~0;
  bit_set(GPCONF, GPCONF_RIS_bp);
}

ISR(CCL_CCL_vect) {
    1c84:	1f 90       	pop	r1
    1c86:	18 95       	reti

00001c88 <__vector_24>:
__vector_24():
    1c88:	1f 92       	push	r1
    1c8a:	0f 92       	push	r0
    1c8c:	0f b6       	in	r0, 0x3f	; 63
    1c8e:	0f 92       	push	r0
/Users/askn/Collaborator/UPDI4AVR-USB/src/sys.cpp:360
  /* SW0 Falling Intrrupt */
  CCL_INTFLAGS = ~0;
    1c90:	11 24       	eor	r1, r1
    1c92:	8f 93       	push	r24
    1c94:	8f ef       	ldi	r24, 0xFF	; 255
/Users/askn/Collaborator/UPDI4AVR-USB/src/sys.cpp:361
  bit_set(GPCONF, GPCONF_FAL_bp);
    1c96:	87 bb       	out	0x17, r24	; 23
/Users/askn/Collaborator/UPDI4AVR-USB/src/sys.cpp:362
}
    1c98:	e6 9a       	sbi	0x1c, 6	; 28
    1c9a:	8f 91       	pop	r24
    1c9c:	0f 90       	pop	r0
    1c9e:	0f be       	out	0x3f, r0	; 63
    1ca0:	0f 90       	pop	r0
    1ca2:	1f 90       	pop	r1
/Users/askn/Collaborator/UPDI4AVR-USB/src/sys.cpp:352

};

#if defined(PIN_SYS_SW0)
/* If the level is not maintained for a sufficient period of time it will not function properly. */
ISR(portIntrruptVector(PIN_SYS_SW0)) {
    1ca4:	18 95       	reti

00001ca6 <main>:
main():
    1ca6:	cf 93       	push	r28
    1ca8:	df 93       	push	r29
    1caa:	cd b7       	in	r28, 0x3d	; 61
    1cac:	de b7       	in	r29, 0x3e	; 62
    1cae:	25 97       	sbiw	r28, 0x05	; 5
/Users/askn/Collaborator/UPDI4AVR-USB/src/sys.cpp:354
  /* SW0 Raising Interrupt */
  vportRegister(PIN_SYS_SW0).INTFLAGS = ~0;
    1cb0:	cd bf       	out	0x3d, r28	; 61
    1cb2:	de bf       	out	0x3e, r29	; 62
setup():
/Users/askn/Collaborator/UPDI4AVR-USB/src/sys.cpp:355
  bit_set(GPCONF, GPCONF_RIS_bp);
    1cb4:	64 9a       	sbi	0x0c, 4	; 12
/Users/askn/Collaborator/UPDI4AVR-USB/src/sys.cpp:356
}
    1cb6:	10 92 74 04 	sts	0x0474, r1	; 0x800474 <__TEXT_REGION_LENGTH__+0x7f0474>
    1cba:	65 9a       	sbi	0x0c, 5	; 12
    1cbc:	10 92 75 04 	sts	0x0475, r1	; 0x800475 <__TEXT_REGION_LENGTH__+0x7f0475>
    1cc0:	88 e0       	ldi	r24, 0x08	; 8
/Users/askn/Collaborator/UPDI4AVR-USB/src/sys.cpp:57
  #endif
  #if defined(PIN_VCP_CTS) && defined(CONFIG_VCP_CTS_ENABLE)
    pinControlRegister(PIN_VCP_CTS) = PORT_PULLUPEN_bm;
  #endif
  #if defined(PIN_VCP_DCD)
    pinControlRegister(PIN_VCP_DCD) = PORT_PULLUPEN_bm;
    1cc2:	80 93 70 04 	sts	0x0470, r24	; 0x800470 <__TEXT_REGION_LENGTH__+0x7f0470>
/Users/askn/Collaborator/UPDI4AVR-USB/src/sys.cpp:60
  #endif
  #if defined(PIN_VCP_DSR)
    pinControlRegister(PIN_VCP_DSR) = PORT_PULLUPEN_bm;
    1cc6:	80 93 71 04 	sts	0x0471, r24	; 0x800471 <__TEXT_REGION_LENGTH__+0x7f0471>
/Users/askn/Collaborator/UPDI4AVR-USB/src/sys.cpp:63
  #endif
  #if defined(PIN_VCP_RI)
    pinControlRegister(PIN_VCP_RI) = PORT_PULLUPEN_bm;
    1cca:	80 93 73 04 	sts	0x0473, r24	; 0x800473 <__TEXT_REGION_LENGTH__+0x7f0473>
/Users/askn/Collaborator/UPDI4AVR-USB/src/sys.cpp:90
    pinControlRegister(PIN_HV_SWITCH) = PORT_INVEN_bm;
    pinModeMacro(PIN_HV_SWITCH, OUTPUT);
  #endif
  #if defined(PIN_HV_POWER)
    /* Device power control: output positive logic */
    pinModeMacro(PIN_HV_POWER, OUTPUT);
    1cce:	06 9a       	sbi	0x00, 6	; 0
    1cd0:	10 92 16 04 	sts	0x0416, r1	; 0x800416 <__TEXT_REGION_LENGTH__+0x7f0416>
/Users/askn/Collaborator/UPDI4AVR-USB/src/sys.cpp:91
    digitalWriteMacro(PIN_HV_POWER, HIGH);
    1cd4:	0e 9a       	sbi	0x01, 6	; 1
/Users/askn/Collaborator/UPDI4AVR-USB/src/sys.cpp:99
    /*
     * GPIO - USB
     */

  #if defined(PIN_USB_VDETECT)
    pinControlRegister(PIN_USB_VDETECT) = PORT_PULLUPEN_bm;
    1cd6:	80 93 b4 04 	sts	0x04B4, r24	; 0x8004b4 <__TEXT_REGION_LENGTH__+0x7f04b4>
/Users/askn/Collaborator/UPDI4AVR-USB/src/sys.cpp:110

  #if defined(PIN_SYS_SW0)
    /* SW0 detection: Input negative logic. */
    /* Use CCL in conjunction to separate the falling edge and rising edge interrupts. */
    /* For the falling edge, use the CCL filter function to remove chattering noise.   */
    pinControlRegister(PIN_SYS_SW0) = PORT_PULLUPEN_bm | PORT_ISC_RISING_gc;
    1cda:	9a e0       	ldi	r25, 0x0A	; 10
    1cdc:	90 93 b6 04 	sts	0x04B6, r25	; 0x8004b6 <__TEXT_REGION_LENGTH__+0x7f04b6>
/Users/askn/Collaborator/UPDI4AVR-USB/src/sys.cpp:111
    portRegister(PIN_SYS_SW0).EVGENCTRLA = pinPosition(PIN_SYS_SW0);
    1ce0:	26 e0       	ldi	r18, 0x06	; 6
    1ce2:	20 93 b8 04 	sts	0x04B8, r18	; 0x8004b8 <__TEXT_REGION_LENGTH__+0x7f04b8>
/Users/askn/Collaborator/UPDI4AVR-USB/src/sys.cpp:113
    #if (PIN_SYS_SW0 & 0xF0) == 176
    EVSYS_CHANNEL3 = EVSYS_CHANNEL_PORTF_EVGEN0_gc;
    1ce6:	9a e4       	ldi	r25, 0x4A	; 74
    1ce8:	90 93 13 02 	sts	0x0213, r25	; 0x800213 <__TEXT_REGION_LENGTH__+0x7f0213>
/Users/askn/Collaborator/UPDI4AVR-USB/src/sys.cpp:133
    CCL_TRUTH0    = CCL_TRUTH_1_bm | CCL_TRUTH_2_bm;
    CCL_LUT0CTRLB = CCL_INSEL0_TCA0_gc | CCL_INSEL1_TCB1_gc;
    CCL_LUT0CTRLA = CCL_ENABLE_bm | CCL_OUTEN_bm; /* PIN_PC3 */
  #elif (CONFIG_HAL_TYPE == HAL_CNANO)
    /* PORTMUX LUT0OUT -> EVSYSOUTF -> PIN_PF2 Invert */
    pinControlRegister(PIN_PF2) = PORT_INVEN_bm;
    1cec:	40 e8       	ldi	r20, 0x80	; 128
    1cee:	40 93 b2 04 	sts	0x04B2, r20	; 0x8004b2 <__TEXT_REGION_LENGTH__+0x7f04b2>
/Users/askn/Collaborator/UPDI4AVR-USB/src/sys.cpp:134
    EVSYS_CHANNEL0 = EVSYS_CHANNEL_CCL_LUT0_gc;
    1cf2:	90 e1       	ldi	r25, 0x10	; 16
    1cf4:	90 93 10 02 	sts	0x0210, r25	; 0x800210 <__TEXT_REGION_LENGTH__+0x7f0210>
/Users/askn/Collaborator/UPDI4AVR-USB/src/sys.cpp:135
    EVSYS_USEREVSYSEVOUTF = EVSYS_USER_CHANNEL0_gc;
    1cf8:	91 e0       	ldi	r25, 0x01	; 1
    1cfa:	90 93 2b 02 	sts	0x022B, r25	; 0x80022b <__TEXT_REGION_LENGTH__+0x7f022b>
/Users/askn/Collaborator/UPDI4AVR-USB/src/sys.cpp:137
    /* TRUTH0: 000 001 010 011 is ON */
    CCL_TRUTH0    = CCL_TRUTH_1_bm | CCL_TRUTH_2_bm;
    1cfe:	20 93 cb 01 	sts	0x01CB, r18	; 0x8001cb <__TEXT_REGION_LENGTH__+0x7f01cb>
/Users/askn/Collaborator/UPDI4AVR-USB/src/sys.cpp:138
    CCL_LUT0CTRLB = CCL_INSEL0_TCA0_gc | CCL_INSEL1_TCB1_gc;
    1d02:	29 ea       	ldi	r18, 0xA9	; 169
    1d04:	20 93 c9 01 	sts	0x01C9, r18	; 0x8001c9 <__TEXT_REGION_LENGTH__+0x7f01c9>
/Users/askn/Collaborator/UPDI4AVR-USB/src/sys.cpp:139
    CCL_LUT0CTRLA = CCL_ENABLE_bm;
    1d08:	90 93 c8 01 	sts	0x01C8, r25	; 0x8001c8 <__TEXT_REGION_LENGTH__+0x7f01c8>
/Users/askn/Collaborator/UPDI4AVR-USB/src/sys.cpp:151
    CCL_LUT1CTRLA = CCL_ENABLE_bm | CCL_OUTEN_bm; /* PIN_PA6 */
  #endif

  #if defined(PIN_SYS_SW0)
    /* SW0 -> CH3 -> LUT3OUT -> INTFLAGS:INT3 */
    EVSYS_USERCCLLUT3A = EVSYS_USER_CHANNEL3_gc;
    1d0c:	24 e0       	ldi	r18, 0x04	; 4
    1d0e:	20 93 26 02 	sts	0x0226, r18	; 0x800226 <__TEXT_REGION_LENGTH__+0x7f0226>
/Users/askn/Collaborator/UPDI4AVR-USB/src/sys.cpp:152
    CCL_TRUTH3    = CCL_TRUTH_1_bm;
    1d12:	32 e0       	ldi	r19, 0x02	; 2
    1d14:	30 93 d7 01 	sts	0x01D7, r19	; 0x8001d7 <__TEXT_REGION_LENGTH__+0x7f01d7>
/Users/askn/Collaborator/UPDI4AVR-USB/src/sys.cpp:153
    CCL_LUT3CTRLB = CCL_INSEL0_EVENTA_gc;
    1d18:	23 e0       	ldi	r18, 0x03	; 3
    1d1a:	20 93 d5 01 	sts	0x01D5, r18	; 0x8001d5 <__TEXT_REGION_LENGTH__+0x7f01d5>
/Users/askn/Collaborator/UPDI4AVR-USB/src/sys.cpp:154
    CCL_LUT3CTRLA = CCL_ENABLE_bm | CCL_FILTSEL_FILTER_gc;
    1d1e:	51 e2       	ldi	r21, 0x21	; 33
    1d20:	50 93 d4 01 	sts	0x01D4, r21	; 0x8001d4 <__TEXT_REGION_LENGTH__+0x7f01d4>
/Users/askn/Collaborator/UPDI4AVR-USB/src/sys.cpp:155
    CCL_INTCTRL0  = CCL_INTMODE3_FALLING_gc;
    1d24:	40 93 c5 01 	sts	0x01C5, r20	; 0x8001c5 <__TEXT_REGION_LENGTH__+0x7f01c5>
/Users/askn/Collaborator/UPDI4AVR-USB/src/sys.cpp:160
  #endif

    /*** CCL enable ***/
    /* One of the CCL's is the LED output control. */
    CCL_CTRLA = CCL_RUNSTDBY_bm | CCL_ENABLE_bm;
    1d28:	41 e4       	ldi	r20, 0x41	; 65
    1d2a:	40 93 c0 01 	sts	0x01C0, r20	; 0x8001c0 <__TEXT_REGION_LENGTH__+0x7f01c0>
/Users/askn/Collaborator/UPDI4AVR-USB/src/sys.cpp:167
    /*** TCA0 ***/
    /* TCA0 is split into two 8-bit timers. */
    /* The lower timer controls the blinking rate of the LED. */
    /* The top timer is used as a period timer */
    /* and as the output for the charge pump.  */
    TCA0_SPLIT_CTRLD = TCA_SPLIT_SPLITM_bm;
    1d2e:	90 93 03 0a 	sts	0x0A03, r25	; 0x800a03 <__TEXT_REGION_LENGTH__+0x7f0a03>
/Users/askn/Collaborator/UPDI4AVR-USB/src/sys.cpp:168
    TCA0_SPLIT_LPER  = TCA0_STEP - 2;
    1d32:	43 ec       	ldi	r20, 0xC3	; 195
    1d34:	40 93 26 0a 	sts	0x0A26, r20	; 0x800a26 <__TEXT_REGION_LENGTH__+0x7f0a26>
/Users/askn/Collaborator/UPDI4AVR-USB/src/sys.cpp:169
    TCA0_SPLIT_LCMP0 = TCA0_STEP / 2;
    1d38:	42 e6       	ldi	r20, 0x62	; 98
    1d3a:	40 93 28 0a 	sts	0x0A28, r20	; 0x800a28 <__TEXT_REGION_LENGTH__+0x7f0a28>
/Users/askn/Collaborator/UPDI4AVR-USB/src/sys.cpp:176
    /*** TCB0 ***/
    /* The TCB0 timer is configured in the <timeout.cpp> module. */

    /*** TCB1 ***/
    /* TCB1 is used to control the LED blinking rate. */
    TCB1_CTRLB = TCB_ASYNC_bm | TCB_CNTMODE_PWM8_gc;
    1d3e:	47 e4       	ldi	r20, 0x47	; 71
    1d40:	40 93 11 0b 	sts	0x0B11, r20	; 0x800b11 <__TEXT_REGION_LENGTH__+0x7f0b11>
/Users/askn/Collaborator/UPDI4AVR-USB/src/sys.cpp:177
    TCB1_CCMP  = TCB1_FLASH;
    1d44:	49 ea       	ldi	r20, 0xA9	; 169
    1d46:	55 e0       	ldi	r21, 0x05	; 5
    1d48:	40 93 1c 0b 	sts	0x0B1C, r20	; 0x800b1c <__TEXT_REGION_LENGTH__+0x7f0b1c>
    1d4c:	50 93 1d 0b 	sts	0x0B1D, r21	; 0x800b1d <__TEXT_REGION_LENGTH__+0x7f0b1d>
/Users/askn/Collaborator/UPDI4AVR-USB/src/sys.cpp:178
    TCB1_CTRLA = TCB_RUNSTDBY_bm | TCB_ENABLE_bm | TCB_CLKSEL_EVENT_gc;
    1d50:	4f e4       	ldi	r20, 0x4F	; 79
    1d52:	40 93 10 0b 	sts	0x0B10, r20	; 0x800b10 <__TEXT_REGION_LENGTH__+0x7f0b10>
/Users/askn/Collaborator/UPDI4AVR-USB/src/timeout.cpp:25
#include "prototype.h"

namespace Timeout {

  void setup (void) {
    RTC_PITEVGENCTRLA = RTC_EVGEN0SEL_DIV32_gc | RTC_EVGEN1SEL_DIV128_gc;
    1d56:	44 e6       	ldi	r20, 0x64	; 100
    1d58:	40 93 56 01 	sts	0x0156, r20	; 0x800156 <__TEXT_REGION_LENGTH__+0x7f0156>
/Users/askn/Collaborator/UPDI4AVR-USB/src/timeout.cpp:26
    EVSYS_CHANNEL1 = EVSYS_CHANNEL_RTC_EVGEN0_gc; /* 1024Hz periodic.  */
    1d5c:	80 93 11 02 	sts	0x0211, r24	; 0x800211 <__TEXT_REGION_LENGTH__+0x7f0211>
/Users/askn/Collaborator/UPDI4AVR-USB/src/timeout.cpp:27
    EVSYS_CHANNEL2 = EVSYS_CHANNEL_RTC_EVGEN1_gc; /* 32Hz periodic.    */
    1d60:	89 e0       	ldi	r24, 0x09	; 9
    1d62:	80 93 12 02 	sts	0x0212, r24	; 0x800212 <__TEXT_REGION_LENGTH__+0x7f0212>
/Users/askn/Collaborator/UPDI4AVR-USB/src/timeout.cpp:28
    EVSYS_USERTCB0COUNT = EVSYS_USER_CHANNEL1_gc; /* TCB0_CLK = 1024Hz */
    1d66:	30 93 31 02 	sts	0x0231, r19	; 0x800231 <__TEXT_REGION_LENGTH__+0x7f0231>
/Users/askn/Collaborator/UPDI4AVR-USB/src/timeout.cpp:29
    EVSYS_USERTCB1COUNT = EVSYS_USER_CHANNEL2_gc; /* TCB1_CLK = 32Hz   */
    1d6a:	20 93 33 02 	sts	0x0233, r18	; 0x800233 <__TEXT_REGION_LENGTH__+0x7f0233>
/Users/askn/Collaborator/UPDI4AVR-USB/src/timeout.cpp:30
    RTC_PITCTRLA = RTC_PITEN_bm;
    1d6e:	90 93 50 01 	sts	0x0150, r25	; 0x800150 <__TEXT_REGION_LENGTH__+0x7f0150>
main():
/Users/askn/Collaborator/UPDI4AVR-USB/src/main.cpp:94
  Serial.print(F("__AVR_ARCH__ = ")).println(__AVR_ARCH__, DEC);
#endif

  SYS::setup();
  Timeout::setup();
  USART::setup();
    1d72:	35 db       	rcall	.-2454   	; 0x13de <USART::setup()>
/Users/askn/Collaborator/UPDI4AVR-USB/src/main.cpp:96

  loop_until_bit_is_clear(WDT_STATUS, WDT_SYNCBUSY_bp);
    1d74:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <__TEXT_REGION_LENGTH__+0x7f0101>
    1d78:	80 fd       	sbrc	r24, 0
    1d7a:	fc cf       	rjmp	.-8      	; 0x1d74 <main+0xce>
/Users/askn/Collaborator/UPDI4AVR-USB/src/main.cpp:97
  _PROTECTED_WRITE(WDT_CTRLA, WDT_PERIOD_1KCLK_gc);
    1d7c:	88 ed       	ldi	r24, 0xD8	; 216
    1d7e:	98 e0       	ldi	r25, 0x08	; 8
    1d80:	84 bf       	out	0x34, r24	; 52
    1d82:	90 93 00 01 	sts	0x0100, r25	; 0x800100 <__TEXT_REGION_LENGTH__+0x7f0100>
/Users/askn/Collaborator/UPDI4AVR-USB/src/main.cpp:101

  #if defined(PIN_SYS_SW0)
  /* Clear the dirty flag before enabling interrupts. */
  vportRegister(PIN_SYS_SW0).INTFLAGS = ~0;
    1d86:	8f ef       	ldi	r24, 0xFF	; 255
    1d88:	87 bb       	out	0x17, r24	; 23
/Users/askn/Collaborator/UPDI4AVR-USB/src/main.cpp:102
  CCL_INTFLAGS = ~0;
    1d8a:	80 93 c7 01 	sts	0x01C7, r24	; 0x8001c7 <__TEXT_REGION_LENGTH__+0x7f01c7>
/Users/askn/Collaborator/UPDI4AVR-USB/src/main.cpp:104
  #endif
  interrupts();
    1d8e:	78 94       	sei
/Users/askn/Collaborator/UPDI4AVR-USB/src/main.cpp:111
  #if !defined(PIN_USB_VDETECT)
  /* If you do not use VBD, insert the shortest possible delay instead. */
  delay_millis(250);
  USB::setup_device(true);
  #else
  SYS::LED_Flash();
    1d90:	0e 94 89 05 	call	0xb12	; 0xb12 <SYS::LED_Flash()>
    1d94:	4e 01       	movw	r8, r28
    1d96:	25 e0       	ldi	r18, 0x05	; 5
    1d98:	82 0e       	add	r8, r18
    1d9a:	91 1c       	adc	r9, r1
request_class():
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:628
        EP_MEM.res_encoding.dwDTERate = 9600UL;
        EP_MEM.res_encoding.bDataBits = 8;
      }
      D1PRINTF(" GLE=");
      D1PRINTHEX(&EP_MEM.res_encoding, sizeof(LineEncoding_t));
      EP_RES.CNT = sizeof(LineEncoding_t);
    1d9c:	b7 e0       	ldi	r27, 0x07	; 7
    1d9e:	ab 2e       	mov	r10, r27
    1da0:	b1 2c       	mov	r11, r1
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:623
    else if (bRequest == 0x21) {  /* GET_LINE_ENCODING */
      memcpy(&EP_MEM.res_encoding, &_set_line_encoding, sizeof(LineEncoding_t));
      if (EP_MEM.res_encoding.dwDTERate == 0) {
        /* Parameters that, if incorrectly accepted,           */
        /* would result in division by zero must be corrected. */
        EP_MEM.res_encoding.dwDTERate = 9600UL;
    1da2:	10 e8       	ldi	r17, 0x80	; 128
    1da4:	41 2e       	mov	r4, r17
    1da6:	15 e2       	ldi	r17, 0x25	; 37
    1da8:	51 2e       	mov	r5, r17
    1daa:	61 2c       	mov	r6, r1
    1dac:	71 2c       	mov	r7, r1
request_standard():
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:578
    }
    else if (bRequest == 0x0A) {  /* GET_INTREFACE */
      /* It seems not to be used. */
      D1PRINTF("<SI:0>\r\n");
      EP_MEM.res_data[0] = 0;
      EP_RES.CNT = 1;
    1dae:	cc 24       	eor	r12, r12
    1db0:	c3 94       	inc	r12
    1db2:	d1 2c       	mov	r13, r1
main():
/Users/askn/Collaborator/UPDI4AVR-USB/src/main.cpp:117
  #endif

  /* From here on, it's an endless loop. */
  D1PRINTF("<WAITING>\r\n");
  while (true) {
    wdt_reset();
    1db4:	a8 95       	wdr
handling_bus_events():
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:688

  /*** This process is equivalent to a bus interrupt. ***/
  /* The reason for using polling is to prioritize VCP performance. */
  /* The trade-off is that power standby is not available. */
  void handling_bus_events (void) {
    uint8_t busstate = USB0_INTFLAGSA;
    1db6:	10 91 0a 0c 	lds	r17, 0x0C0A	; 0x800c0a <__TEXT_REGION_LENGTH__+0x7f0c0a>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:689
    USB0_INTFLAGSA = busstate;
    1dba:	10 93 0a 0c 	sts	0x0C0A, r17	; 0x800c0a <__TEXT_REGION_LENGTH__+0x7f0c0a>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:692
  #if defined(PIN_USB_VDETECT)
    /* This section is still experimental. */
    if (digitalReadMacro(PIN_USB_VDETECT)) {
    1dbe:	b4 9b       	sbis	0x16, 4	; 22
    1dc0:	10 c0       	rjmp	.+32     	; 0x1de2 <main+0x13c>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:693
      if (!USB0_CTRLA) {
    1dc2:	80 91 00 0c 	lds	r24, 0x0C00	; 0x800c00 <__TEXT_REGION_LENGTH__+0x7f0c00>
    1dc6:	81 11       	cpse	r24, r1
    1dc8:	15 c0       	rjmp	.+42     	; 0x1df4 <main+0x14e>
setup_device():
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:235
    EP_MEM.cci_header.wLength       = 2;
    EP_MEM.cci_wValue               = _state;
  }

  void setup_device (bool _force) {
    if (_led_mode != 3) SYS::LED_Flash();
    1dca:	80 91 7d 60 	lds	r24, 0x607D	; 0x80607d <_led_mode>
    1dce:	83 30       	cpi	r24, 0x03	; 3
    1dd0:	11 f0       	breq	.+4      	; 0x1dd6 <main+0x130>
    1dd2:	0e 94 89 05 	call	0xb12	; 0xb12 <SYS::LED_Flash()>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:236
    USB0_ADDR = 0;
    1dd6:	10 92 03 0c 	sts	0x0C03, r1	; 0x800c03 <__TEXT_REGION_LENGTH__+0x7f0c03>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:237
    if (USB0_CTRLA || _force) {
    1dda:	80 91 00 0c 	lds	r24, 0x0C00	; 0x800c00 <__TEXT_REGION_LENGTH__+0x7f0c00>
    1dde:	a4 da       	rcall	.-2744   	; 0x1328 <USB::setup_device(bool) [clone .part.2]>
    1de0:	38 c0       	rjmp	.+112    	; 0x1e52 <main+0x1ac>
handling_bus_events():
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:698
      if (!USB0_CTRLA) {
        setup_device(true);
        return;
      }
    }
    else if (USB0_CTRLA) {
    1de2:	80 91 00 0c 	lds	r24, 0x0C00	; 0x800c00 <__TEXT_REGION_LENGTH__+0x7f0c00>
    1de6:	88 23       	and	r24, r24
    1de8:	29 f0       	breq	.+10     	; 0x1df4 <main+0x14e>
reboot():
/Users/askn/Collaborator/UPDI4AVR-USB/src/sys.cpp:306
  void reboot (void) {
  #if defined(DEBUG)
    D0PRINTF("<REBOOT>\r\n");
    Serial.flush();
  #endif
    _PROTECTED_WRITE(RSTCTRL_SWRR, 1);
    1dea:	88 ed       	ldi	r24, 0xD8	; 216
    1dec:	91 e0       	ldi	r25, 0x01	; 1
    1dee:	84 bf       	out	0x34, r24	; 52
    1df0:	90 93 41 00 	sts	0x0041, r25	; 0x800041 <__TEXT_REGION_LENGTH__+0x7f0041>
handling_bus_events():
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:714
    }
    if (bit_is_set(busstate, USB_RESUME_bp)) {
      D1PRINTF("<RESUME:%04X>\r\n", USB0_ADDR);
    }
  #endif
    if (bit_is_set(busstate, USB_SOF_bp)) {
    1df4:	17 ff       	sbrs	r17, 7
    1df6:	14 c0       	rjmp	.+40     	; 0x1e20 <main+0x17a>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:716
      /* If there is deferred data for a block transfer, it is sent here. */
      if (_sof_count > 0 && 0 == (--_sof_count)) {
    1df8:	80 91 1f 64 	lds	r24, 0x641F	; 0x80641f <_sof_count>
    1dfc:	88 23       	and	r24, r24
    1dfe:	81 f0       	breq	.+32     	; 0x1e20 <main+0x17a>
    1e00:	80 91 1f 64 	lds	r24, 0x641F	; 0x80641f <_sof_count>
    1e04:	81 50       	subi	r24, 0x01	; 1
    1e06:	80 93 1f 64 	sts	0x641F, r24	; 0x80641f <_sof_count>
    1e0a:	81 11       	cpse	r24, r1
    1e0c:	09 c0       	rjmp	.+18     	; 0x1e20 <main+0x17a>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:717
        if (bit_is_set(EP_CDI.STATUS, USB_BUSNAK_bp) && _send_count > 0) {
    1e0e:	80 91 66 64 	lds	r24, 0x6466	; 0x806466 <EP_TABLE+0x40>
    1e12:	81 ff       	sbrs	r24, 1
    1e14:	05 c0       	rjmp	.+10     	; 0x1e20 <main+0x17a>
    1e16:	80 91 22 64 	lds	r24, 0x6422	; 0x806422 <_send_count>
    1e1a:	81 11       	cpse	r24, r1
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:718
          ep_cdi_listen();
    1e1c:	0e 94 80 01 	call	0x300	; 0x300 <USB::ep_cdi_listen()>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:723
        }
      }
    }
    if (bit_is_set(busstate, USB_SUSPEND_bp)
     || bit_is_set(busstate, USB_RESUME_bp)) {
    1e20:	81 2f       	mov	r24, r17
    1e22:	80 76       	andi	r24, 0x60	; 96
    1e24:	41 f0       	breq	.+16     	; 0x1e36 <main+0x190>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:726
      /* This implementation does not transition to power saving mode. */
      /* This is only passed when the USB cable is unplugged. */
      if (bit_is_set(GPCONF, GPCONF_USB_bp)) {
    1e26:	e0 9b       	sbis	0x1c, 0	; 28
    1e28:	05 c0       	rjmp	.+10     	; 0x1e34 <main+0x18e>
reboot():
/Users/askn/Collaborator/UPDI4AVR-USB/src/sys.cpp:306
    1e2a:	88 ed       	ldi	r24, 0xD8	; 216
    1e2c:	91 e0       	ldi	r25, 0x01	; 1
    1e2e:	84 bf       	out	0x34, r24	; 52
    1e30:	90 93 41 00 	sts	0x0041, r25	; 0x800041 <__TEXT_REGION_LENGTH__+0x7f0041>
handling_bus_events():
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:730
        /* System reboot */
        SYS::reboot();
      }
      bit_set(busstate, USB_RESET_bp);
    1e34:	10 61       	ori	r17, 0x10	; 16
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:732
    }
    if (bit_is_set(busstate, USB_RESET_bp)) {
    1e36:	14 ff       	sbrs	r17, 4
    1e38:	0c c0       	rjmp	.+24     	; 0x1e52 <main+0x1ac>
setup_device():
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:235
    EP_MEM.cci_header.wLength       = 2;
    EP_MEM.cci_wValue               = _state;
  }

  void setup_device (bool _force) {
    if (_led_mode != 3) SYS::LED_Flash();
    1e3a:	80 91 7d 60 	lds	r24, 0x607D	; 0x80607d <_led_mode>
    1e3e:	83 30       	cpi	r24, 0x03	; 3
    1e40:	11 f0       	breq	.+4      	; 0x1e46 <main+0x1a0>
    1e42:	0e 94 89 05 	call	0xb12	; 0xb12 <SYS::LED_Flash()>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:236
    USB0_ADDR = 0;
    1e46:	10 92 03 0c 	sts	0x0C03, r1	; 0x800c03 <__TEXT_REGION_LENGTH__+0x7f0c03>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:237
    if (USB0_CTRLA || _force) {
    1e4a:	80 91 00 0c 	lds	r24, 0x0C00	; 0x800c00 <__TEXT_REGION_LENGTH__+0x7f0c00>
    1e4e:	81 11       	cpse	r24, r1
    1e50:	c6 cf       	rjmp	.-116    	; 0x1dde <main+0x138>
is_ep_setup():
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:256
      set_cci_data(0x00);
      USB0_CTRLA = USB_ENABLE_bm | (USB_ENDPOINTS_MAX - 1);
    }
  }

  bool is_ep_setup (void) { return bit_is_set(EP_REQ.STATUS, USB_EPSETUP_bp); }
    1e52:	80 91 2e 64 	lds	r24, 0x642E	; 0x80642e <EP_TABLE+0x8>
main():
/Users/askn/Collaborator/UPDI4AVR-USB/src/main.cpp:121

    /*** USB control handling ***/
    USB::handling_bus_events();
    if (USB::is_ep_setup()) USB::handling_control_transactions();
    1e56:	84 ff       	sbrs	r24, 4
    1e58:	1f c0       	rjmp	.+62     	; 0x1e98 <main+0x1f2>
handling_control_transactions():
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:656
  /*** Accept the EP0 setup packet. ***/
  /* This process is equivalent to a endpoint interrupt. */
  /* The reason for using polling is to prioritize VCP performance. */
  void handling_control_transactions (void) {
    bool _listen = false;
    uint8_t bmRequestType = EP_MEM.req_data.bmRequestType;
    1e5a:	10 91 06 63 	lds	r17, 0x6306	; 0x806306 <EP_MEM>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:661
    D1PRINTF("RQ=%02X:%04X:%02X:%02X:%04X:%04X:%04X\r\n",
      EP_REQ.STATUS, EP_REQ.CNT, EP_MEM.req_data.bmRequestType, EP_MEM.req_data.bRequest,
      EP_MEM.req_data.wValue, EP_MEM.req_data.wIndex, EP_MEM.req_data.wLength);
    /* Accepts subsequent EP0_DATA packets as needed. */
    if (bit_is_clear(bmRequestType, 7)) ep_req_listen();
    1e5e:	17 ff       	sbrs	r17, 7
    1e60:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <USB::ep_req_listen()>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:662
    bmRequestType &= (3 << 5);
    1e64:	10 76       	andi	r17, 0x60	; 96
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:663
    if (bmRequestType == (0 << 5)) {
    1e66:	09 f0       	breq	.+2      	; 0x1e6a <main+0x1c4>
    1e68:	f3 c1       	rjmp	.+998    	; 0x2250 <__DATA_REGION_LENGTH__+0x250>
request_standard():
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:526
  }

  /*** USB Standard Request Enumeration. ***/
  bool request_standard (void) {
    bool _listen = true;
    uint8_t bRequest = EP_MEM.req_data.bRequest;
    1e6a:	80 91 07 63 	lds	r24, 0x6307	; 0x806307 <EP_MEM+0x1>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:527
    if (bRequest == 0x00) {       /* GET_STATUS */
    1e6e:	81 11       	cpse	r24, r1
    1e70:	83 c0       	rjmp	.+262    	; 0x1f78 <main+0x2d2>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:528
      EP_MEM.res_data[0] = 0;
    1e72:	10 92 0e 63 	sts	0x630E, r1	; 0x80630e <EP_MEM+0x8>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:529
      EP_MEM.res_data[1] = 0;
    1e76:	10 92 0f 63 	sts	0x630F, r1	; 0x80630f <EP_MEM+0x9>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:530
      EP_RES.CNT = 2;
    1e7a:	82 e0       	ldi	r24, 0x02	; 2
    1e7c:	90 e0       	ldi	r25, 0x00	; 0
    1e7e:	80 93 38 64 	sts	0x6438, r24	; 0x806438 <EP_TABLE+0x12>
    1e82:	90 93 39 64 	sts	0x6439, r25	; 0x806439 <EP_TABLE+0x13>
handling_control_transactions():
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:675
    else if (bmRequestType == (2 << 5)) {
      _listen = request_vendor();
    }
  #endif
    if (_listen) {
      ep_res_listen();
    1e86:	0e 94 c6 01 	call	0x38c	; 0x38c <USB::ep_res_listen()>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:676
      ep_req_listen();
    1e8a:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <USB::ep_req_listen()>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:681
    }
    else {
      ep0_stalled();
    }
    USB0_INTFLAGSB |= USB_EPSETUP_bp;
    1e8e:	80 91 0b 0c 	lds	r24, 0x0C0B	; 0x800c0b <__TEXT_REGION_LENGTH__+0x7f0c0b>
    1e92:	84 60       	ori	r24, 0x04	; 4
    1e94:	80 93 0b 0c 	sts	0x0C0B, r24	; 0x800c0b <__TEXT_REGION_LENGTH__+0x7f0c0b>
main():
/Users/askn/Collaborator/UPDI4AVR-USB/src/main.cpp:124

    /* If SW0 was used, work here. */
    if (bit_is_clear(PGCONF, PGCONF_UPDI_bp)) {
    1e98:	e8 99       	sbic	0x1d, 0	; 29
    1e9a:	21 c0       	rjmp	.+66     	; 0x1ede <main+0x238>
/Users/askn/Collaborator/UPDI4AVR-USB/src/main.cpp:125
      if      (bit_is_set(GPCONF, GPCONF_FAL_bp)) SYS::reset_enter();
    1e9c:	e7 9b       	sbis	0x1c, 7	; 28
    1e9e:	67 c2       	rjmp	.+1230   	; 0x236e <__DATA_REGION_LENGTH__+0x36e>
LED_TCB1():
/Users/askn/Collaborator/UPDI4AVR-USB/src/sys.cpp:198
      _led_mode = 1;
    }
  }

  void LED_TCB1 (uint8_t _mode, uint16_t _ccmp) {
    if (_led_mode != _mode) {
    1ea0:	80 91 7d 60 	lds	r24, 0x607D	; 0x80607d <_led_mode>
    1ea4:	83 30       	cpi	r24, 0x03	; 3
    1ea6:	81 f0       	breq	.+32     	; 0x1ec8 <main+0x222>
/Users/askn/Collaborator/UPDI4AVR-USB/src/sys.cpp:199
      TCA0_SPLIT_CTRLA = 0;
    1ea8:	10 92 00 0a 	sts	0x0A00, r1	; 0x800a00 <__TEXT_REGION_LENGTH__+0x7f0a00>
/Users/askn/Collaborator/UPDI4AVR-USB/src/sys.cpp:200
      TCB1_CNTL = 0;
    1eac:	10 92 1a 0b 	sts	0x0B1A, r1	; 0x800b1a <__TEXT_REGION_LENGTH__+0x7f0b1a>
/Users/askn/Collaborator/UPDI4AVR-USB/src/sys.cpp:201
      TCB1_CCMP = _ccmp;
    1eb0:	89 ea       	ldi	r24, 0xA9	; 169
    1eb2:	95 e5       	ldi	r25, 0x55	; 85
    1eb4:	80 93 1c 0b 	sts	0x0B1C, r24	; 0x800b1c <__TEXT_REGION_LENGTH__+0x7f0b1c>
    1eb8:	90 93 1d 0b 	sts	0x0B1D, r25	; 0x800b1d <__TEXT_REGION_LENGTH__+0x7f0b1d>
/Users/askn/Collaborator/UPDI4AVR-USB/src/sys.cpp:202
      TCB1_CTRLA = TCB_RUNSTDBY_bm | TCB_ENABLE_bm | TCB_CLKSEL_EVENT_gc;
    1ebc:	8f e4       	ldi	r24, 0x4F	; 79
    1ebe:	80 93 10 0b 	sts	0x0B10, r24	; 0x800b10 <__TEXT_REGION_LENGTH__+0x7f0b10>
/Users/askn/Collaborator/UPDI4AVR-USB/src/sys.cpp:203
      _led_mode = _mode;
    1ec2:	83 e0       	ldi	r24, 0x03	; 3
    1ec4:	80 93 7d 60 	sts	0x607D, r24	; 0x80607d <_led_mode>
reset_enter():
/Users/askn/Collaborator/UPDI4AVR-USB/src/sys.cpp:256
   * Executed when SW0 is detected as being pressed.
   * May be called multiple times due to chattering.
   */
  void reset_enter (void) {
    LED_Blink();
    if (_jtag_arch == 5) {
    1ec8:	80 91 88 60 	lds	r24, 0x6088	; 0x806088 <_jtag_arch>
    1ecc:	85 30       	cpi	r24, 0x05	; 5
    1ece:	29 f4       	brne	.+10     	; 0x1eda <main+0x234>
/Users/askn/Collaborator/UPDI4AVR-USB/src/sys.cpp:262
      /* 
       * Puts a tinyAVR-0 which does not have a reset pad into reset state.
       * This applies to all chips which have an enabled UPDI pad.
       * Does not affect TPI/PDI types.
       */
      _updi_bitmap[10] = 0x59; /* SYSRST */
    1ed0:	89 e5       	ldi	r24, 0x59	; 89
    1ed2:	80 93 24 60 	sts	0x6024, r24	; 0x806024 <SYS::_updi_bitmap+0xa>
/Users/askn/Collaborator/UPDI4AVR-USB/src/sys.cpp:263
      send_bitmap(_updi_bitmap, sizeof(_updi_bitmap) * 8);
    1ed6:	0e 94 41 01 	call	0x282	; 0x282 <SYS::send_bitmap(unsigned char const*, unsigned int) [clone .constprop.7]>
/Users/askn/Collaborator/UPDI4AVR-USB/src/sys.cpp:265
    }
    openDrainWriteMacro(PIN_PG_TRST, LOW);
    1eda:	01 9a       	sbi	0x00, 1	; 0
/Users/askn/Collaborator/UPDI4AVR-USB/src/sys.cpp:267
    D1PRINTF("<RST:IN>\r\n");
    bit_clear(GPCONF, GPCONF_FAL_bp);
    1edc:	e7 98       	cbi	0x1c, 7	; 28
main():
/Users/askn/Collaborator/UPDI4AVR-USB/src/main.cpp:130
      else if (bit_is_set(GPCONF, GPCONF_RIS_bp)) SYS::reset_leave();
    }

    /* If the USB port is not open, go back to the loop beginning. */
    if (bit_is_clear(GPCONF, GPCONF_USB_bp)) continue;
    1ede:	e0 9b       	sbis	0x1c, 0	; 28
    1ee0:	69 cf       	rjmp	.-302    	; 0x1db4 <main+0x10e>
/Users/askn/Collaborator/UPDI4AVR-USB/src/main.cpp:140
    /* character arrives every 400 clocks on a 20MHz reference. */
    /* So we avoid using interrupts here and use polling to gain speed. */
  #if defined(CONFIG_VCP_9BIT_SUPPORT)
    if (bit_is_set(GPCONF, GPCONF_VCP_bp)) usart_transmitter();
  #else
    if (bit_is_set(GPCONF, GPCONF_VCP_bp)) USB::vcp_transceiver();
    1ee2:	e1 9b       	sbis	0x1c, 1	; 28
    1ee4:	8b c2       	rjmp	.+1302   	; 0x23fc <__DATA_REGION_LENGTH__+0x3fc>
vcp_transceiver():
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:502
    if (bit_is_clear(GPCONF, GPCONF_BRK_bp)
  #if defined(CONFIG_VCP_CTS_ENABLE)
     && !digitalReadMacro(PIN_VCP_CTS)
  #endif
     && bit_is_set(USART0_STATUS, USART_DREIF_bp)
     && read_available()) {
    1ee6:	e3 99       	sbic	0x1c, 3	; 28
    1ee8:	14 c0       	rjmp	.+40     	; 0x1f12 <main+0x26c>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:501
  void vcp_transceiver (void) {
    if (bit_is_clear(GPCONF, GPCONF_BRK_bp)
  #if defined(CONFIG_VCP_CTS_ENABLE)
     && !digitalReadMacro(PIN_VCP_CTS)
  #endif
     && bit_is_set(USART0_STATUS, USART_DREIF_bp)
    1eea:	80 91 04 08 	lds	r24, 0x0804	; 0x800804 <__TEXT_REGION_LENGTH__+0x7f0804>
    1eee:	85 ff       	sbrs	r24, 5
    1ef0:	10 c0       	rjmp	.+32     	; 0x1f12 <main+0x26c>
read_available():
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:458
    return _c;
  }

  bool read_available (void) {
    uint8_t _s = 0;
    if (bit_is_set(EP_CDO.STATUS, USB_BUSNAK_bp) && bit_is_set(GPCONF, GPCONF_VCP_bp)) {
    1ef2:	80 91 5e 64 	lds	r24, 0x645E	; 0x80645e <EP_TABLE+0x38>
    1ef6:	81 ff       	sbrs	r24, 1
    1ef8:	0c c0       	rjmp	.+24     	; 0x1f12 <main+0x26c>
    1efa:	e1 9b       	sbis	0x1c, 1	; 28
    1efc:	0a c0       	rjmp	.+20     	; 0x1f12 <main+0x26c>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:459
      _s = EP_CDO.CNT - _recv_count;
    1efe:	20 91 60 64 	lds	r18, 0x6460	; 0x806460 <EP_TABLE+0x3a>
    1f02:	30 91 61 64 	lds	r19, 0x6461	; 0x806461 <EP_TABLE+0x3b>
    1f06:	80 91 21 64 	lds	r24, 0x6421	; 0x806421 <_recv_count>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:460
      if (_s == 0) ep_cdo_listen();
    1f0a:	82 13       	cpse	r24, r18
    1f0c:	58 c2       	rjmp	.+1200   	; 0x23be <__DATA_REGION_LENGTH__+0x3be>
    1f0e:	0e 94 6f 01 	call	0x2de	; 0x2de <USB::ep_cdo_listen()>
main():
/Users/askn/Collaborator/UPDI4AVR-USB/src/main.cpp:145
  #endif
    else USB::read_drop();

    /*** If the break value is between 1 and 65534, it will count down. ***/
    if (bit_is_set(GPCONF, GPCONF_BRK_bp)) USB::cci_break_count();
    1f12:	e3 9b       	sbis	0x1c, 3	; 28
    1f14:	18 c0       	rjmp	.+48     	; 0x1f46 <main+0x2a0>
cci_break_count():
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:397
    bit_clear(GPCONF, GPCONF_BRK_bp);
  }

  void cci_break_count (void) {
    /* If the break value is between 1 and 65534, it will count down. */
    if ((_send_break + 1) > 1) {
    1f16:	80 91 23 64 	lds	r24, 0x6423	; 0x806423 <_send_break>
    1f1a:	90 91 24 64 	lds	r25, 0x6424	; 0x806424 <_send_break+0x1>
    1f1e:	9c 01       	movw	r18, r24
    1f20:	2f 5f       	subi	r18, 0xFF	; 255
    1f22:	3f 4f       	sbci	r19, 0xFF	; 255
    1f24:	22 30       	cpi	r18, 0x02	; 2
    1f26:	31 05       	cpc	r19, r1
    1f28:	70 f0       	brcs	.+28     	; 0x1f46 <main+0x2a0>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:398
      if (_send_break > USB_CCI_INTERVAL) {
    1f2a:	85 30       	cpi	r24, 0x05	; 5
    1f2c:	91 05       	cpc	r25, r1
    1f2e:	08 f4       	brcc	.+2      	; 0x1f32 <main+0x28c>
    1f30:	6a c2       	rjmp	.+1236   	; 0x2406 <__DATA_REGION_LENGTH__+0x406>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:399
        _send_break -= USB_CCI_INTERVAL;
    1f32:	04 97       	sbiw	r24, 0x04	; 4
    1f34:	80 93 23 64 	sts	0x6423, r24	; 0x806423 <_send_break>
    1f38:	90 93 24 64 	sts	0x6424, r25	; 0x806424 <_send_break+0x1>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:400
        if (bit_is_set(EP_CCI.STATUS, USB_BUSNAK_bp))
    1f3c:	80 91 56 64 	lds	r24, 0x6456	; 0x806456 <EP_TABLE+0x30>
    1f40:	81 fd       	sbrc	r24, 1
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:401
          ep_cci_listen();
    1f42:	0e 94 b4 01 	call	0x368	; 0x368 <USB::ep_cci_listen()>
is_not_dap():
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:257
      USB0_CTRLA = USB_ENABLE_bm | (USB_ENDPOINTS_MAX - 1);
    }
  }

  bool is_ep_setup (void) { return bit_is_set(EP_REQ.STATUS, USB_EPSETUP_bp); }
  bool is_not_dap (void) { return bit_is_clear(EP_DPO.STATUS, USB_BUSNAK_bp); }
    1f46:	80 91 4e 64 	lds	r24, 0x644E	; 0x80644e <EP_TABLE+0x28>
main():
/Users/askn/Collaborator/UPDI4AVR-USB/src/main.cpp:148

    /*** If CMSIS-DAP is not received, return to the top. ***/
    if (USB::is_not_dap()) continue;
    1f4a:	81 ff       	sbrs	r24, 1
    1f4c:	33 cf       	rjmp	.-410    	; 0x1db4 <main+0x10e>
dap_command_check():
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:52
   * Command numbers 0x80 and above are vendor extensions, EDBG Payload uses 0x80 and x81.
   * Additionally, 0x82 is reserved for device event notification.
   */
  bool dap_command_check (void) {
    bool _result = false;
    uint8_t _cmd = EP_MEM.dap_data[0];
    1f4e:	90 91 1e 63 	lds	r25, 0x631E	; 0x80631e <EP_MEM+0x18>
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:53
    uint8_t _sub = EP_MEM.dap_data[1];
    1f52:	80 91 1f 63 	lds	r24, 0x631F	; 0x80631f <EP_MEM+0x19>
ep_dpi_pending():
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:260
  void ep_req_pending (void) { loop_until_bit_is_set(EP_REQ.STATUS, USB_BUSNAK_bp); }
  void ep_res_pending (void) { loop_until_bit_is_set(EP_RES.STATUS, USB_BUSNAK_bp); }
  void ep_dpi_pending (void) { loop_until_bit_is_set(EP_DPI.STATUS, USB_BUSNAK_bp); }
    1f56:	20 91 46 64 	lds	r18, 0x6446	; 0x806446 <EP_TABLE+0x20>
    1f5a:	21 ff       	sbrs	r18, 1
    1f5c:	fc cf       	rjmp	.-8      	; 0x1f56 <main+0x2b0>
dap_command_check():
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:65
     * and the data is sent and received with a fixed length of 64 bytes,
     * determined by the value specified in the HID Report.
     * A maximum of 15 chunks is possible,
     * resulting in a maximum payload length of 900 bytes.
     */
    if (_cmd == 0x80) {             /* DAP_EDBG_VENDOR_AVR_CMD */
    1f5e:	90 38       	cpi	r25, 0x80	; 128
    1f60:	09 f0       	breq	.+2      	; 0x1f64 <main+0x2be>
    1f62:	c8 c2       	rjmp	.+1424   	; 0x24f4 <__DATA_REGION_LENGTH__+0x4f4>
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:66
      uint8_t _endf = _sub & 0x0F;
    1f64:	f8 2f       	mov	r31, r24
    1f66:	ff 70       	andi	r31, 0x0F	; 15
    1f68:	fd 83       	std	Y+5, r31	; 0x05
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:70
      uint8_t _frag = _sub >> 4;
      uint8_t _size = EP_MEM.dap_data[3];
      size_t  _ofst = (_frag - 1) * 60;
      if (_endf >= 10) {
    1f6a:	fa 30       	cpi	r31, 0x0A	; 10
    1f6c:	08 f4       	brcc	.+2      	; 0x1f70 <main+0x2ca>
    1f6e:	52 c2       	rjmp	.+1188   	; 0x2414 <__DATA_REGION_LENGTH__+0x414>
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:73
        /* Only a maximum of 540 bytes : 9 fragment records is accepted. */
        D1PRINTF("<EDBG_FAIL>\r\n");
        EP_MEM.dap_data[1] = 0x00;  /* EDBG_RSP_FAIL */
    1f70:	10 92 1f 63 	sts	0x631F, r1	; 0x80631f <EP_MEM+0x19>
main():
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:51
  /*
   * Command numbers 0x80 and above are vendor extensions, EDBG Payload uses 0x80 and x81.
   * Additionally, 0x82 is reserved for device event notification.
   */
  bool dap_command_check (void) {
    bool _result = false;
    1f74:	00 e0       	ldi	r16, 0x00	; 0
    1f76:	84 c2       	rjmp	.+1288   	; 0x2480 <__DATA_REGION_LENGTH__+0x480>
request_standard():
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:532
    if (bRequest == 0x00) {       /* GET_STATUS */
      EP_MEM.res_data[0] = 0;
      EP_MEM.res_data[1] = 0;
      EP_RES.CNT = 2;
    }
    else if (bRequest == 0x01) {  /* CLEAR_FEATURE */
    1f78:	81 30       	cpi	r24, 0x01	; 1
    1f7a:	d9 f4       	brne	.+54     	; 0x1fb2 <main+0x30c>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:534
      D1PRINTF(" CF=%02X:%02X\r\n", EP_MEM.req_data.wValue, EP_MEM.req_data.wIndex);
      if (0 == (uint8_t)EP_MEM.req_data.wValue) {
    1f7c:	80 91 08 63 	lds	r24, 0x6308	; 0x806308 <EP_MEM+0x2>
    1f80:	81 11       	cpse	r24, r1
    1f82:	12 c0       	rjmp	.+36     	; 0x1fa8 <main+0x302>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:536
        /* Assumes that an Endpoint number is passed. */
        uint8_t _EP = EP_MEM.req_data.wIndex;
    1f84:	e0 91 0a 63 	lds	r30, 0x630A	; 0x80630a <EP_MEM+0x4>
    1f88:	f0 91 0b 63 	lds	r31, 0x630B	; 0x80630b <EP_MEM+0x5>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:537
        loop_until_bit_is_clear(USB0_INTFLAGSB, USB_RMWBUSY_bp);
    1f8c:	80 91 0b 0c 	lds	r24, 0x0C0B	; 0x800c0b <__TEXT_REGION_LENGTH__+0x7f0c0b>
    1f90:	82 fd       	sbrc	r24, 2
    1f92:	fc cf       	rjmp	.-8      	; 0x1f8c <main+0x2e6>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:538
        USB_EP_STATUS_CLR(_EP) = USB_STALLED_bm | USB_TOGGLE_bm;
    1f94:	f5 95       	asr	r31
    1f96:	e7 95       	ror	r30
    1f98:	f5 95       	asr	r31
    1f9a:	e7 95       	ror	r30
    1f9c:	ef 73       	andi	r30, 0x3F	; 63
    1f9e:	ff 27       	eor	r31, r31
    1fa0:	e0 5c       	subi	r30, 0xC0	; 192
    1fa2:	f3 4f       	sbci	r31, 0xF3	; 243
    1fa4:	89 e0       	ldi	r24, 0x09	; 9
    1fa6:	80 83       	st	Z, r24
request_class():
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:643
      /* Nothing else is used unless programmed by the application. */
      D1PRINTF(" SB=%04X\r\n", EP_MEM.req_data.wValue);
      _send_break = EP_MEM.req_data.wValue;
      if (_send_break) break_on();
      else break_off();
      EP_RES.CNT = 0;
    1fa8:	10 92 38 64 	sts	0x6438, r1	; 0x806438 <EP_TABLE+0x12>
    1fac:	10 92 39 64 	sts	0x6439, r1	; 0x806439 <EP_TABLE+0x13>
    1fb0:	6a cf       	rjmp	.-300    	; 0x1e86 <main+0x1e0>
request_standard():
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:542
        loop_until_bit_is_clear(USB0_INTFLAGSB, USB_RMWBUSY_bp);
        USB_EP_STATUS_CLR(_EP) = USB_STALLED_bm | USB_TOGGLE_bm;
      }
      EP_RES.CNT = 0;
    }
    else if (bRequest == 0x04) {  /* SET_FEATURE */
    1fb2:	84 30       	cpi	r24, 0x04	; 4
    1fb4:	c9 f3       	breq	.-14     	; 0x1fa8 <main+0x302>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:547
      /* If used, it will be ignored. */
      D1PRINTF(" SF=%02X:%02X\r\n", EP_MEM.req_data.wValue, EP_MEM.req_data.wIndex);
      EP_RES.CNT = 0;
    }
    else if (bRequest == 0x05) {  /* SET_ADDRESS */
    1fb6:	85 30       	cpi	r24, 0x05	; 5
    1fb8:	61 f4       	brne	.+24     	; 0x1fd2 <main+0x32c>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:548
      uint8_t _addr = EP_MEM.req_data.wValue & 0x7F;
    1fba:	10 91 08 63 	lds	r17, 0x6308	; 0x806308 <EP_MEM+0x2>
    1fbe:	1f 77       	andi	r17, 0x7F	; 127
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:549
      ep_res_listen();
    1fc0:	0e 94 c6 01 	call	0x38c	; 0x38c <USB::ep_res_listen()>
ep_res_pending():
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:259
  }

  bool is_ep_setup (void) { return bit_is_set(EP_REQ.STATUS, USB_EPSETUP_bp); }
  bool is_not_dap (void) { return bit_is_clear(EP_DPO.STATUS, USB_BUSNAK_bp); }
  void ep_req_pending (void) { loop_until_bit_is_set(EP_REQ.STATUS, USB_BUSNAK_bp); }
  void ep_res_pending (void) { loop_until_bit_is_set(EP_RES.STATUS, USB_BUSNAK_bp); }
    1fc4:	80 91 36 64 	lds	r24, 0x6436	; 0x806436 <EP_TABLE+0x10>
    1fc8:	81 ff       	sbrs	r24, 1
    1fca:	fc cf       	rjmp	.-8      	; 0x1fc4 <main+0x31e>
request_standard():
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:551
    }
    else if (bRequest == 0x05) {  /* SET_ADDRESS */
      uint8_t _addr = EP_MEM.req_data.wValue & 0x7F;
      ep_res_listen();
      ep_res_pending();
      USB0_ADDR = _addr;
    1fcc:	10 93 03 0c 	sts	0x0C03, r17	; 0x800c03 <__TEXT_REGION_LENGTH__+0x7f0c03>
    1fd0:	eb cf       	rjmp	.-42     	; 0x1fa8 <main+0x302>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:555
      D1PRINTF(" USB0_ADDR=%d\r\n", _addr);
      EP_RES.CNT = 0;
    }
    else if (bRequest == 0x06) {  /* GET_DESCRIPTOR */
    1fd2:	86 30       	cpi	r24, 0x06	; 6
    1fd4:	09 f0       	breq	.+2      	; 0x1fd8 <main+0x332>
    1fd6:	1e c1       	rjmp	.+572    	; 0x2214 <__DATA_REGION_LENGTH__+0x214>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:556
      size_t _length = EP_MEM.req_data.wLength;
    1fd8:	e0 90 0c 63 	lds	r14, 0x630C	; 0x80630c <EP_MEM+0x6>
    1fdc:	f0 90 0d 63 	lds	r15, 0x630D	; 0x80630d <EP_MEM+0x7>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:557
      size_t _size = get_descriptor((uint8_t*)&EP_MEM.res_data, EP_MEM.req_data.wValue);
    1fe0:	80 91 08 63 	lds	r24, 0x6308	; 0x806308 <EP_MEM+0x2>
    1fe4:	90 91 09 63 	lds	r25, 0x6309	; 0x806309 <EP_MEM+0x3>
get_descriptor():
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:154

  size_t get_descriptor (uint8_t* _buffer, uint16_t _index) {
    uint8_t* _pgmem = 0;
    size_t   _size = 0;
    uint8_t  _type = _index >> 8;
    if (_type == 0x01) {          /* DEVICE */
    1fe8:	91 30       	cpi	r25, 0x01	; 1
    1fea:	01 f5       	brne	.+64     	; 0x202c <__DATA_REGION_LENGTH__+0x2c>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:157
      _pgmem = (uint8_t*)&device_descriptor;
      _size = sizeof(device_descriptor);
      memcpy_P(_buffer, _pgmem, _size);
    1fec:	42 e1       	ldi	r20, 0x12	; 18
    1fee:	50 e0       	ldi	r21, 0x00	; 0
    1ff0:	62 eb       	ldi	r22, 0xB2	; 178
    1ff2:	71 e0       	ldi	r23, 0x01	; 1
    1ff4:	8e e0       	ldi	r24, 0x0E	; 14
    1ff6:	93 e6       	ldi	r25, 0x63	; 99
    1ff8:	5e d5       	rcall	.+2748   	; 0x2ab6 <memcpy_P>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:158
      uint32_t _vidpid = *((uint32_t*)EEPROM_START);
    1ffa:	80 91 00 14 	lds	r24, 0x1400	; 0x801400 <__TEXT_REGION_LENGTH__+0x7f1400>
    1ffe:	90 91 01 14 	lds	r25, 0x1401	; 0x801401 <__TEXT_REGION_LENGTH__+0x7f1401>
    2002:	a0 91 02 14 	lds	r26, 0x1402	; 0x801402 <__TEXT_REGION_LENGTH__+0x7f1402>
    2006:	b0 91 03 14 	lds	r27, 0x1403	; 0x801403 <__TEXT_REGION_LENGTH__+0x7f1403>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:159
      if (_vidpid + 1) _CAPS32(_buffer[8])->dword = _vidpid;
    200a:	8f 3f       	cpi	r24, 0xFF	; 255
    200c:	4f ef       	ldi	r20, 0xFF	; 255
    200e:	94 07       	cpc	r25, r20
    2010:	a4 07       	cpc	r26, r20
    2012:	b4 07       	cpc	r27, r20
    2014:	41 f0       	breq	.+16     	; 0x2026 <__DATA_REGION_LENGTH__+0x26>
    2016:	80 93 16 63 	sts	0x6316, r24	; 0x806316 <EP_MEM+0x10>
    201a:	90 93 17 63 	sts	0x6317, r25	; 0x806317 <EP_MEM+0x11>
    201e:	a0 93 18 63 	sts	0x6318, r26	; 0x806318 <EP_MEM+0x12>
    2022:	b0 93 19 63 	sts	0x6319, r27	; 0x806319 <EP_MEM+0x13>
main():
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:161
      D1PRINTF(" VID:PID=%04X:%04X\r\n", _CAPS16(_buffer[8])->word, _CAPS16(_buffer[10])->word);
      return _size;
    2026:	02 e1       	ldi	r16, 0x12	; 18
    2028:	10 e0       	ldi	r17, 0x00	; 0
    202a:	1d c0       	rjmp	.+58     	; 0x2066 <__DATA_REGION_LENGTH__+0x66>
get_descriptor():
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:163
    }
    else if (_type == 0x02) {     /* CONFIGURATION */
    202c:	92 30       	cpi	r25, 0x02	; 2
    202e:	09 f4       	brne	.+2      	; 0x2032 <__DATA_REGION_LENGTH__+0x32>
    2030:	d9 c0       	rjmp	.+434    	; 0x21e4 <__DATA_REGION_LENGTH__+0x1e4>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:167
      _pgmem = (uint8_t*)&current_descriptor;
      _size = sizeof(current_descriptor);
    }
    else if (_type == 0x06) {     /* QUALIFIER */
    2032:	96 30       	cpi	r25, 0x06	; 6
    2034:	09 f4       	brne	.+2      	; 0x2038 <__DATA_REGION_LENGTH__+0x38>
    2036:	df c0       	rjmp	.+446    	; 0x21f6 <__DATA_REGION_LENGTH__+0x1f6>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:171
      _pgmem = (uint8_t*)&qualifier_descriptor;
      _size = sizeof(qualifier_descriptor);
    }
    else if (_type == 0x21) {     /* HID */
    2038:	91 32       	cpi	r25, 0x21	; 33
    203a:	09 f4       	brne	.+2      	; 0x203e <__DATA_REGION_LENGTH__+0x3e>
    203c:	e1 c0       	rjmp	.+450    	; 0x2200 <__DATA_REGION_LENGTH__+0x200>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:175
      _pgmem = (uint8_t*)&current_descriptor + 18;
      _size = 9;
    }
    else if (_type == 0x22) {     /* REPORT */
    203e:	92 32       	cpi	r25, 0x22	; 34
    2040:	09 f4       	brne	.+2      	; 0x2044 <__DATA_REGION_LENGTH__+0x44>
    2042:	e3 c0       	rjmp	.+454    	; 0x220a <__DATA_REGION_LENGTH__+0x20a>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:179
      _pgmem = (uint8_t*)&report_descriptor;
      _size = sizeof(report_descriptor);
    }
    else if (_index == 0x0300) {  /* LANGUAGE */
    2044:	81 15       	cp	r24, r1
    2046:	e3 e0       	ldi	r30, 0x03	; 3
    2048:	9e 07       	cpc	r25, r30
    204a:	51 f5       	brne	.+84     	; 0x20a0 <__DATA_REGION_LENGTH__+0xa0>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:181
      _size = 4;
      *_buffer++ = 4;
    204c:	84 e0       	ldi	r24, 0x04	; 4
    204e:	80 93 0e 63 	sts	0x630E, r24	; 0x80630e <EP_MEM+0x8>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:182
      *_buffer++ = 3;
    2052:	93 e0       	ldi	r25, 0x03	; 3
    2054:	90 93 0f 63 	sts	0x630F, r25	; 0x80630f <EP_MEM+0x9>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:183
      *_buffer++ = 0x09;
    2058:	99 e0       	ldi	r25, 0x09	; 9
    205a:	90 93 10 63 	sts	0x6310, r25	; 0x806310 <EP_MEM+0xa>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:184
      *_buffer++ = 0x04;
    205e:	80 93 11 63 	sts	0x6311, r24	; 0x806311 <EP_MEM+0xb>
main():
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:185
      return _size;
    2062:	04 e0       	ldi	r16, 0x04	; 4
    2064:	10 e0       	ldi	r17, 0x00	; 0
    2066:	c7 01       	movw	r24, r14
    2068:	0e 15       	cp	r16, r14
    206a:	1f 05       	cpc	r17, r15
    206c:	08 f4       	brcc	.+2      	; 0x2070 <__DATA_REGION_LENGTH__+0x70>
    206e:	c8 01       	movw	r24, r16
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:212
          for (uint8_t _i = 0; _i < 4; _i++) {
            uint8_t _c = *_p++;
            *_buffer++ = btoh(_c >> 4); *_buffer++ = 0;
            *_buffer++ = btoh(_c     ); *_buffer++ = 0;
          }
          return 22;
    2070:	98 01       	movw	r18, r16
    2072:	8c 01       	movw	r16, r24
request_standard():
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:558
      EP_RES.CNT = 0;
    }
    else if (bRequest == 0x06) {  /* GET_DESCRIPTOR */
      size_t _length = EP_MEM.req_data.wLength;
      size_t _size = get_descriptor((uint8_t*)&EP_MEM.res_data, EP_MEM.req_data.wValue);
      EP_RES.CNT = (_size > _length) ? _length : _size;
    2074:	00 93 38 64 	sts	0x6438, r16	; 0x806438 <EP_TABLE+0x12>
    2078:	10 93 39 64 	sts	0x6439, r17	; 0x806439 <EP_TABLE+0x13>
handling_control_transactions():
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:674
  #ifdef _Not_being_used_STUB_
    else if (bmRequestType == (2 << 5)) {
      _listen = request_vendor();
    }
  #endif
    if (_listen) {
    207c:	23 2b       	or	r18, r19
    207e:	09 f0       	breq	.+2      	; 0x2082 <__DATA_REGION_LENGTH__+0x82>
    2080:	02 cf       	rjmp	.-508    	; 0x1e86 <main+0x1e0>
ep0_stalled():
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:360
    USB_EP_STATUS_CLR(USB_EP_CDO) = ~USB_TOGGLE_bm;
  }

  void ep0_stalled (void) {
    D1PRINTF("[STALLED]\r\n");
    loop_until_bit_is_clear(USB0_INTFLAGSB, USB_RMWBUSY_bp);
    2082:	80 91 0b 0c 	lds	r24, 0x0C0B	; 0x800c0b <__TEXT_REGION_LENGTH__+0x7f0c0b>
    2086:	82 fd       	sbrc	r24, 2
    2088:	fc cf       	rjmp	.-8      	; 0x2082 <__DATA_REGION_LENGTH__+0x82>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:361
    USB_EP_STATUS_SET(USB_EP_RES) = USB_STALLED_bm;
    208a:	88 e0       	ldi	r24, 0x08	; 8
    208c:	80 93 43 0c 	sts	0x0C43, r24	; 0x800c43 <__TEXT_REGION_LENGTH__+0x7f0c43>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:362
    loop_until_bit_is_clear(USB0_INTFLAGSB, USB_RMWBUSY_bp);
    2090:	80 91 0b 0c 	lds	r24, 0x0C0B	; 0x800c0b <__TEXT_REGION_LENGTH__+0x7f0c0b>
    2094:	82 fd       	sbrc	r24, 2
    2096:	fc cf       	rjmp	.-8      	; 0x2090 <__DATA_REGION_LENGTH__+0x90>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:363
    USB_EP_STATUS_SET(USB_EP_REQ) = USB_STALLED_bm;
    2098:	88 e0       	ldi	r24, 0x08	; 8
    209a:	80 93 41 0c 	sts	0x0C41, r24	; 0x800c41 <__TEXT_REGION_LENGTH__+0x7f0c41>
    209e:	f7 ce       	rjmp	.-530    	; 0x1e8e <main+0x1e8>
get_descriptor():
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:188
      *_buffer++ = 0x09;
      *_buffer++ = 0x04;
      return _size;
    }
    else {
      switch (_index) {
    20a0:	82 30       	cpi	r24, 0x02	; 2
    20a2:	f3 e0       	ldi	r31, 0x03	; 3
    20a4:	9f 07       	cpc	r25, r31
    20a6:	41 f1       	breq	.+80     	; 0x20f8 <__DATA_REGION_LENGTH__+0xf8>
    20a8:	60 f4       	brcc	.+24     	; 0x20c2 <__DATA_REGION_LENGTH__+0xc2>
main():
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:189
        case 0x0301: _pgmem = (uint8_t*)&vstring; _size = sizeof(vstring); break;
    20aa:	04 e3       	ldi	r16, 0x34	; 52
    20ac:	10 e0       	ldi	r17, 0x00	; 0
    20ae:	66 ee       	ldi	r22, 0xE6	; 230
    20b0:	70 e0       	ldi	r23, 0x00	; 0
get_descriptor():
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:188
      *_buffer++ = 0x09;
      *_buffer++ = 0x04;
      return _size;
    }
    else {
      switch (_index) {
    20b2:	81 30       	cpi	r24, 0x01	; 1
    20b4:	93 40       	sbci	r25, 0x03	; 3
    20b6:	79 f0       	breq	.+30     	; 0x20d6 <__DATA_REGION_LENGTH__+0xd6>
main():
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:152
    { /* FRAMENUM */ }
  };

  size_t get_descriptor (uint8_t* _buffer, uint16_t _index) {
    uint8_t* _pgmem = 0;
    size_t   _size = 0;
    20b8:	10 e0       	ldi	r17, 0x00	; 0
    20ba:	00 e0       	ldi	r16, 0x00	; 0
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:151
    },
    { /* FRAMENUM */ }
  };

  size_t get_descriptor (uint8_t* _buffer, uint16_t _index) {
    uint8_t* _pgmem = 0;
    20bc:	70 e0       	ldi	r23, 0x00	; 0
    20be:	60 e0       	ldi	r22, 0x00	; 0
    20c0:	0a c0       	rjmp	.+20     	; 0x20d6 <__DATA_REGION_LENGTH__+0xd6>
get_descriptor():
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:188
      *_buffer++ = 0x09;
      *_buffer++ = 0x04;
      return _size;
    }
    else {
      switch (_index) {
    20c2:	83 30       	cpi	r24, 0x03	; 3
    20c4:	98 07       	cpc	r25, r24
    20c6:	e9 f0       	breq	.+58     	; 0x2102 <__DATA_REGION_LENGTH__+0x102>
main():
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:191
        case 0x0301: _pgmem = (uint8_t*)&vstring; _size = sizeof(vstring); break;
        case 0x0302: _pgmem = (uint8_t*)&mstring; _size = sizeof(mstring); break;
        case 0x0304: _pgmem = (uint8_t*)&istring; _size = sizeof(istring); break;
    20c8:	08 e1       	ldi	r16, 0x18	; 24
    20ca:	10 e0       	ldi	r17, 0x00	; 0
    20cc:	68 e8       	ldi	r22, 0x88	; 136
    20ce:	70 e0       	ldi	r23, 0x00	; 0
get_descriptor():
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:188
      *_buffer++ = 0x09;
      *_buffer++ = 0x04;
      return _size;
    }
    else {
      switch (_index) {
    20d0:	84 30       	cpi	r24, 0x04	; 4
    20d2:	93 40       	sbci	r25, 0x03	; 3
    20d4:	89 f7       	brne	.-30     	; 0x20b8 <__DATA_REGION_LENGTH__+0xb8>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:215
            *_buffer++ = btoh(_c     ); *_buffer++ = 0;
          }
          return 22;
        }
      }
      *_buffer++ = (uint8_t)_size;
    20d6:	00 93 0e 63 	sts	0x630E, r16	; 0x80630e <EP_MEM+0x8>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:216
      *_buffer++ = 3;
    20da:	83 e0       	ldi	r24, 0x03	; 3
    20dc:	80 93 0f 63 	sts	0x630F, r24	; 0x80630f <EP_MEM+0x9>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:217
      if (_size) memcpy_P(_buffer, _pgmem, _size - 2);
    20e0:	a8 01       	movw	r20, r16
    20e2:	42 50       	subi	r20, 0x02	; 2
    20e4:	51 09       	sbc	r21, r1
    20e6:	80 e1       	ldi	r24, 0x10	; 16
    20e8:	93 e6       	ldi	r25, 0x63	; 99
    20ea:	01 15       	cp	r16, r1
    20ec:	11 05       	cpc	r17, r1
    20ee:	09 f0       	breq	.+2      	; 0x20f2 <__DATA_REGION_LENGTH__+0xf2>
    20f0:	80 c0       	rjmp	.+256    	; 0x21f2 <__DATA_REGION_LENGTH__+0x1f2>
    20f2:	30 e0       	ldi	r19, 0x00	; 0
    20f4:	20 e0       	ldi	r18, 0x00	; 0
    20f6:	be cf       	rjmp	.-132    	; 0x2074 <__DATA_REGION_LENGTH__+0x74>
main():
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:190
      return _size;
    }
    else {
      switch (_index) {
        case 0x0301: _pgmem = (uint8_t*)&vstring; _size = sizeof(vstring); break;
        case 0x0302: _pgmem = (uint8_t*)&mstring; _size = sizeof(mstring); break;
    20f8:	06 e4       	ldi	r16, 0x46	; 70
    20fa:	10 e0       	ldi	r17, 0x00	; 0
    20fc:	60 ea       	ldi	r22, 0xA0	; 160
    20fe:	70 e0       	ldi	r23, 0x00	; 0
    2100:	ea cf       	rjmp	.-44     	; 0x20d6 <__DATA_REGION_LENGTH__+0xd6>
get_descriptor():
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:201
           *
           * If the 4 bytes from offset 4 of the EEPROM are anything other
           * than 0xFFFF:FFFF, use them, otherwise generate a 32-bit random
           * serial number using CRC32 from the factory information.
           */
          uint32_t _sn = ((User_EEP_t*)EEPROM_START)->dwSerialNumber;
    2102:	40 91 04 14 	lds	r20, 0x1404	; 0x801404 <__TEXT_REGION_LENGTH__+0x7f1404>
    2106:	50 91 05 14 	lds	r21, 0x1405	; 0x801405 <__TEXT_REGION_LENGTH__+0x7f1405>
    210a:	60 91 06 14 	lds	r22, 0x1406	; 0x801406 <__TEXT_REGION_LENGTH__+0x7f1406>
    210e:	70 91 07 14 	lds	r23, 0x1407	; 0x801407 <__TEXT_REGION_LENGTH__+0x7f1407>
    2112:	49 83       	std	Y+1, r20	; 0x01
    2114:	5a 83       	std	Y+2, r21	; 0x02
    2116:	6b 83       	std	Y+3, r22	; 0x03
    2118:	7c 83       	std	Y+4, r23	; 0x04
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:202
          if (!(_sn + 1)) _sn = crc32((uint8_t*)SIGNATURES_START, 32);
    211a:	4f 3f       	cpi	r20, 0xFF	; 255
    211c:	2f ef       	ldi	r18, 0xFF	; 255
    211e:	52 07       	cpc	r21, r18
    2120:	62 07       	cpc	r22, r18
    2122:	72 07       	cpc	r23, r18
    2124:	59 f5       	brne	.+86     	; 0x217c <__DATA_REGION_LENGTH__+0x17c>
main():
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/modernAVR/0.2.14/cores/modernAVR/api/cpp/btools.cpp:210
  return _crc;
}

uint32_t crc32 (void* _data, size_t _len) {
  uint32_t _crc = ~0;
  uint8_t* _p = (uint8_t*)_data;
    2126:	e0 e8       	ldi	r30, 0x80	; 128
    2128:	f0 e1       	ldi	r31, 0x10	; 16
crc32():
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/modernAVR/0.2.14/cores/modernAVR/api/cpp/btools.cpp:211
  while (_len--) _crc = _crc32_update(_crc, *_p++);
    212a:	cf 01       	movw	r24, r30
    212c:	01 96       	adiw	r24, 0x01	; 1
_crc32_update():
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/modernAVR/0.2.14/cores/modernAVR/api/cpp/btools.cpp:201
}

/* x32 + x26 + x23 + x22 + x16 + x12 + x11 + x10 + x8 + x7 + x5 + x4 + x2 + x + 1 */
/* (0xEDB88320 rev) init -1 */
uint32_t _crc32_update (uint32_t _crc, uint8_t _data) {
  _crc ^= _data;
    212e:	20 81       	ld	r18, Z
    2130:	42 27       	eor	r20, r18
    2132:	e8 e0       	ldi	r30, 0x08	; 8
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/modernAVR/0.2.14/cores/modernAVR/api/cpp/btools.cpp:203
  for (uint8_t j = 0; j < 8; j++) {
    _crc = (_crc >> 1) ^ (0xEDB88320UL & -(_crc & 1));
    2134:	8a 01       	movw	r16, r20
    2136:	9b 01       	movw	r18, r22
    2138:	36 95       	lsr	r19
    213a:	27 95       	ror	r18
    213c:	17 95       	ror	r17
    213e:	07 95       	ror	r16
    2140:	41 70       	andi	r20, 0x01	; 1
    2142:	55 27       	eor	r21, r21
    2144:	66 27       	eor	r22, r22
    2146:	77 27       	eor	r23, r23
    2148:	70 95       	com	r23
    214a:	60 95       	com	r22
    214c:	50 95       	com	r21
    214e:	41 95       	neg	r20
    2150:	5f 4f       	sbci	r21, 0xFF	; 255
    2152:	6f 4f       	sbci	r22, 0xFF	; 255
    2154:	7f 4f       	sbci	r23, 0xFF	; 255
    2156:	40 72       	andi	r20, 0x20	; 32
    2158:	53 78       	andi	r21, 0x83	; 131
    215a:	68 7b       	andi	r22, 0xB8	; 184
    215c:	7d 7e       	andi	r23, 0xED	; 237
    215e:	40 27       	eor	r20, r16
    2160:	51 27       	eor	r21, r17
    2162:	62 27       	eor	r22, r18
    2164:	73 27       	eor	r23, r19
    2166:	e1 50       	subi	r30, 0x01	; 1
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/modernAVR/0.2.14/cores/modernAVR/api/cpp/btools.cpp:202

/* x32 + x26 + x23 + x22 + x16 + x12 + x11 + x10 + x8 + x7 + x5 + x4 + x2 + x + 1 */
/* (0xEDB88320 rev) init -1 */
uint32_t _crc32_update (uint32_t _crc, uint8_t _data) {
  _crc ^= _data;
  for (uint8_t j = 0; j < 8; j++) {
    2168:	29 f7       	brne	.-54     	; 0x2134 <__DATA_REGION_LENGTH__+0x134>
    216a:	fc 01       	movw	r30, r24
crc32():
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/modernAVR/0.2.14/cores/modernAVR/api/cpp/btools.cpp:211
}

uint32_t crc32 (void* _data, size_t _len) {
  uint32_t _crc = ~0;
  uint8_t* _p = (uint8_t*)_data;
  while (_len--) _crc = _crc32_update(_crc, *_p++);
    216c:	e0 3a       	cpi	r30, 0xA0	; 160
    216e:	80 e1       	ldi	r24, 0x10	; 16
    2170:	f8 07       	cpc	r31, r24
    2172:	d9 f6       	brne	.-74     	; 0x212a <__DATA_REGION_LENGTH__+0x12a>
get_descriptor():
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:202
    2174:	49 83       	std	Y+1, r20	; 0x01
    2176:	5a 83       	std	Y+2, r21	; 0x02
    2178:	6b 83       	std	Y+3, r22	; 0x03
    217a:	7c 83       	std	Y+4, r23	; 0x04
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:204
          uint8_t* _p = (uint8_t*)&_sn;
          *_buffer++ = 22;  *_buffer++ = 3;
    217c:	86 e1       	ldi	r24, 0x16	; 22
    217e:	80 93 0e 63 	sts	0x630E, r24	; 0x80630e <EP_MEM+0x8>
    2182:	83 e0       	ldi	r24, 0x03	; 3
    2184:	80 93 0f 63 	sts	0x630F, r24	; 0x80630f <EP_MEM+0x9>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:205
          *_buffer++ = 'M'; *_buffer++ = 0;
    2188:	8d e4       	ldi	r24, 0x4D	; 77
    218a:	80 93 10 63 	sts	0x6310, r24	; 0x806310 <EP_MEM+0xa>
    218e:	10 92 11 63 	sts	0x6311, r1	; 0x806311 <EP_MEM+0xb>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:206
          *_buffer++ = 'X'; *_buffer++ = 0;
    2192:	88 e5       	ldi	r24, 0x58	; 88
    2194:	80 93 12 63 	sts	0x6312, r24	; 0x806312 <EP_MEM+0xc>
    2198:	10 92 13 63 	sts	0x6313, r1	; 0x806313 <EP_MEM+0xd>
    219c:	e4 e1       	ldi	r30, 0x14	; 20
    219e:	f3 e6       	ldi	r31, 0x63	; 99
    21a0:	de 01       	movw	r26, r28
    21a2:	11 96       	adiw	r26, 0x01	; 1
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:208
          for (uint8_t _i = 0; _i < 4; _i++) {
            uint8_t _c = *_p++;
    21a4:	8d 91       	ld	r24, X+
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:209
            *_buffer++ = btoh(_c >> 4); *_buffer++ = 0;
    21a6:	28 2f       	mov	r18, r24
    21a8:	30 e0       	ldi	r19, 0x00	; 0
    21aa:	74 e0       	ldi	r23, 0x04	; 4
    21ac:	35 95       	asr	r19
    21ae:	27 95       	ror	r18
    21b0:	7a 95       	dec	r23
    21b2:	e1 f7       	brne	.-8      	; 0x21ac <__DATA_REGION_LENGTH__+0x1ac>
btoh():
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/modernAVR/0.2.14/cores/modernAVR/api/cpp/btools.cpp:69
    _p++; _r--;
  }
}

char btoh (uint8_t _x) {
  _x = (_x & 15) + '0';
    21b4:	90 e3       	ldi	r25, 0x30	; 48
    21b6:	92 0f       	add	r25, r18
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/modernAVR/0.2.14/cores/modernAVR/api/cpp/btools.cpp:70
  if (_x > '9') _x += 7;
    21b8:	9a 33       	cpi	r25, 0x3A	; 58
    21ba:	10 f0       	brcs	.+4      	; 0x21c0 <__DATA_REGION_LENGTH__+0x1c0>
    21bc:	97 e3       	ldi	r25, 0x37	; 55
    21be:	92 0f       	add	r25, r18
get_descriptor():
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:209
    21c0:	90 83       	st	Z, r25
    21c2:	11 82       	std	Z+1, r1	; 0x01
btoh():
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/modernAVR/0.2.14/cores/modernAVR/api/cpp/btools.cpp:69
    _p++; _r--;
  }
}

char btoh (uint8_t _x) {
  _x = (_x & 15) + '0';
    21c4:	8f 70       	andi	r24, 0x0F	; 15
    21c6:	90 e3       	ldi	r25, 0x30	; 48
    21c8:	98 0f       	add	r25, r24
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/modernAVR/0.2.14/cores/modernAVR/api/cpp/btools.cpp:70
  if (_x > '9') _x += 7;
    21ca:	9a 33       	cpi	r25, 0x3A	; 58
    21cc:	10 f0       	brcs	.+4      	; 0x21d2 <__DATA_REGION_LENGTH__+0x1d2>
    21ce:	97 e3       	ldi	r25, 0x37	; 55
    21d0:	98 0f       	add	r25, r24
get_descriptor():
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:210
            *_buffer++ = btoh(_c     ); *_buffer++ = 0;
    21d2:	92 83       	std	Z+2, r25	; 0x02
    21d4:	13 82       	std	Z+3, r1	; 0x03
    21d6:	34 96       	adiw	r30, 0x04	; 4
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:207
          if (!(_sn + 1)) _sn = crc32((uint8_t*)SIGNATURES_START, 32);
          uint8_t* _p = (uint8_t*)&_sn;
          *_buffer++ = 22;  *_buffer++ = 3;
          *_buffer++ = 'M'; *_buffer++ = 0;
          *_buffer++ = 'X'; *_buffer++ = 0;
          for (uint8_t _i = 0; _i < 4; _i++) {
    21d8:	8a 16       	cp	r8, r26
    21da:	9b 06       	cpc	r9, r27
    21dc:	19 f7       	brne	.-58     	; 0x21a4 <__DATA_REGION_LENGTH__+0x1a4>
main():
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:212
            uint8_t _c = *_p++;
            *_buffer++ = btoh(_c >> 4); *_buffer++ = 0;
            *_buffer++ = btoh(_c     ); *_buffer++ = 0;
          }
          return 22;
    21de:	06 e1       	ldi	r16, 0x16	; 22
    21e0:	10 e0       	ldi	r17, 0x00	; 0
    21e2:	41 cf       	rjmp	.-382    	; 0x2066 <__DATA_REGION_LENGTH__+0x66>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:165
      D1PRINTF(" VID:PID=%04X:%04X\r\n", _CAPS16(_buffer[8])->word, _CAPS16(_buffer[10])->word);
      return _size;
    }
    else if (_type == 0x02) {     /* CONFIGURATION */
      _pgmem = (uint8_t*)&current_descriptor;
      _size = sizeof(current_descriptor);
    21e4:	0b e6       	ldi	r16, 0x6B	; 107
    21e6:	10 e0       	ldi	r17, 0x00	; 0
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:164
      if (_vidpid + 1) _CAPS32(_buffer[8])->dword = _vidpid;
      D1PRINTF(" VID:PID=%04X:%04X\r\n", _CAPS16(_buffer[8])->word, _CAPS16(_buffer[10])->word);
      return _size;
    }
    else if (_type == 0x02) {     /* CONFIGURATION */
      _pgmem = (uint8_t*)&current_descriptor;
    21e8:	6d e3       	ldi	r22, 0x3D	; 61
    21ea:	71 e0       	ldi	r23, 0x01	; 1
get_descriptor():
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:220
      *_buffer++ = (uint8_t)_size;
      *_buffer++ = 3;
      if (_size) memcpy_P(_buffer, _pgmem, _size - 2);
      return _size;
    }
    if (_size) memcpy_P(_buffer, _pgmem, _size);
    21ec:	a8 01       	movw	r20, r16
    21ee:	8e e0       	ldi	r24, 0x0E	; 14
    21f0:	93 e6       	ldi	r25, 0x63	; 99
    21f2:	61 d4       	rcall	.+2242   	; 0x2ab6 <memcpy_P>
    21f4:	38 cf       	rjmp	.-400    	; 0x2066 <__DATA_REGION_LENGTH__+0x66>
main():
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:169
      _pgmem = (uint8_t*)&current_descriptor;
      _size = sizeof(current_descriptor);
    }
    else if (_type == 0x06) {     /* QUALIFIER */
      _pgmem = (uint8_t*)&qualifier_descriptor;
      _size = sizeof(qualifier_descriptor);
    21f6:	0a e0       	ldi	r16, 0x0A	; 10
    21f8:	10 e0       	ldi	r17, 0x00	; 0
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:168
    else if (_type == 0x02) {     /* CONFIGURATION */
      _pgmem = (uint8_t*)&current_descriptor;
      _size = sizeof(current_descriptor);
    }
    else if (_type == 0x06) {     /* QUALIFIER */
      _pgmem = (uint8_t*)&qualifier_descriptor;
    21fa:	68 ea       	ldi	r22, 0xA8	; 168
    21fc:	71 e0       	ldi	r23, 0x01	; 1
    21fe:	f6 cf       	rjmp	.-20     	; 0x21ec <__DATA_REGION_LENGTH__+0x1ec>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:173
      _size = sizeof(qualifier_descriptor);
    }
    else if (_type == 0x21) {     /* HID */
      _pgmem = (uint8_t*)&current_descriptor + 18;
      _size = 9;
    2200:	09 e0       	ldi	r16, 0x09	; 9
    2202:	10 e0       	ldi	r17, 0x00	; 0
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:172
    else if (_type == 0x06) {     /* QUALIFIER */
      _pgmem = (uint8_t*)&qualifier_descriptor;
      _size = sizeof(qualifier_descriptor);
    }
    else if (_type == 0x21) {     /* HID */
      _pgmem = (uint8_t*)&current_descriptor + 18;
    2204:	6f e4       	ldi	r22, 0x4F	; 79
    2206:	71 e0       	ldi	r23, 0x01	; 1
    2208:	f1 cf       	rjmp	.-30     	; 0x21ec <__DATA_REGION_LENGTH__+0x1ec>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:177
      _size = 9;
    }
    else if (_type == 0x22) {     /* REPORT */
      _pgmem = (uint8_t*)&report_descriptor;
      _size = sizeof(report_descriptor);
    220a:	03 e2       	ldi	r16, 0x23	; 35
    220c:	10 e0       	ldi	r17, 0x00	; 0
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:176
    else if (_type == 0x21) {     /* HID */
      _pgmem = (uint8_t*)&current_descriptor + 18;
      _size = 9;
    }
    else if (_type == 0x22) {     /* REPORT */
      _pgmem = (uint8_t*)&report_descriptor;
    220e:	6a e1       	ldi	r22, 0x1A	; 26
    2210:	71 e0       	ldi	r23, 0x01	; 1
    2212:	ec cf       	rjmp	.-40     	; 0x21ec <__DATA_REGION_LENGTH__+0x1ec>
request_standard():
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:561
      size_t _length = EP_MEM.req_data.wLength;
      size_t _size = get_descriptor((uint8_t*)&EP_MEM.res_data, EP_MEM.req_data.wValue);
      EP_RES.CNT = (_size > _length) ? _length : _size;
      _listen = !!_size;
    }
    else if (bRequest == 0x08) {  /* GET_CONFIGURATION */
    2214:	88 30       	cpi	r24, 0x08	; 8
    2216:	49 f4       	brne	.+18     	; 0x222a <__DATA_REGION_LENGTH__+0x22a>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:562
      EP_MEM.res_data[0] = _set_config;
    2218:	80 91 20 64 	lds	r24, 0x6420	; 0x806420 <_set_config>
    221c:	80 93 0e 63 	sts	0x630E, r24	; 0x80630e <EP_MEM+0x8>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:578
    }
    else if (bRequest == 0x0A) {  /* GET_INTREFACE */
      /* It seems not to be used. */
      D1PRINTF("<SI:0>\r\n");
      EP_MEM.res_data[0] = 0;
      EP_RES.CNT = 1;
    2220:	c0 92 38 64 	sts	0x6438, r12	; 0x806438 <EP_TABLE+0x12>
    2224:	d0 92 39 64 	sts	0x6439, r13	; 0x806439 <EP_TABLE+0x13>
    2228:	2e ce       	rjmp	.-932    	; 0x1e86 <main+0x1e0>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:566
    else if (bRequest == 0x08) {  /* GET_CONFIGURATION */
      EP_MEM.res_data[0] = _set_config;
      D1PRINTF("<GC:%02X>\r\n", _set_config);
      EP_RES.CNT = 1;
    }
    else if (bRequest == 0x09) {  /* SET_CONFIGURATION */
    222a:	89 30       	cpi	r24, 0x09	; 9
    222c:	41 f4       	brne	.+16     	; 0x223e <__DATA_REGION_LENGTH__+0x23e>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:568
      /* Once the USB connection is fully initiated, it will go through here. */
      _set_config = (uint8_t)EP_MEM.req_data.wValue;
    222e:	80 91 08 63 	lds	r24, 0x6308	; 0x806308 <EP_MEM+0x2>
    2232:	80 93 20 64 	sts	0x6420, r24	; 0x806420 <_set_config>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:569
      bit_set(GPCONF, GPCONF_USB_bp);
    2236:	e0 9a       	sbi	0x1c, 0	; 28
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:570
      SYS::LED_HeartBeat();
    2238:	0e 94 9e 05 	call	0xb3c	; 0xb3c <SYS::LED_HeartBeat()>
    223c:	b5 ce       	rjmp	.-662    	; 0x1fa8 <main+0x302>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:574
      D1PRINTF("<SC:%02X>\r\n", _set_config);
      EP_RES.CNT = 0;
    }
    else if (bRequest == 0x0A) {  /* GET_INTREFACE */
    223e:	8a 30       	cpi	r24, 0x0A	; 10
    2240:	19 f4       	brne	.+6      	; 0x2248 <__DATA_REGION_LENGTH__+0x248>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:577
      /* It seems not to be used. */
      D1PRINTF("<SI:0>\r\n");
      EP_MEM.res_data[0] = 0;
    2242:	10 92 0e 63 	sts	0x630E, r1	; 0x80630e <EP_MEM+0x8>
    2246:	ec cf       	rjmp	.-40     	; 0x2220 <__DATA_REGION_LENGTH__+0x220>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:580
      EP_RES.CNT = 1;
    }
    else if (bRequest == 0x0B) {  /* SET_INTREFACE */
    2248:	8b 30       	cpi	r24, 0x0B	; 11
    224a:	09 f0       	breq	.+2      	; 0x224e <__DATA_REGION_LENGTH__+0x24e>
    224c:	1a cf       	rjmp	.-460    	; 0x2082 <__DATA_REGION_LENGTH__+0x82>
    224e:	ac ce       	rjmp	.-680    	; 0x1fa8 <main+0x302>
handling_control_transactions():
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:666
    if (bit_is_clear(bmRequestType, 7)) ep_req_listen();
    bmRequestType &= (3 << 5);
    if (bmRequestType == (0 << 5)) {
      _listen = request_standard();
    }
    else if (bmRequestType == (1 << 5)) {
    2250:	10 32       	cpi	r17, 0x20	; 32
    2252:	09 f0       	breq	.+2      	; 0x2256 <__DATA_REGION_LENGTH__+0x256>
    2254:	16 cf       	rjmp	.-468    	; 0x2082 <__DATA_REGION_LENGTH__+0x82>
request_class():
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:594
  }

  /*** CDC-ACM request processing. ***/
  bool request_class (void) {
    bool _listen = true;
    uint8_t bRequest = EP_MEM.req_data.bRequest;
    2256:	80 91 07 63 	lds	r24, 0x6307	; 0x806307 <EP_MEM+0x1>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:595
    if (bRequest == 0x0A) {       /* SET_IDLE */
    225a:	8a 30       	cpi	r24, 0x0A	; 10
    225c:	09 f4       	brne	.+2      	; 0x2260 <__DATA_REGION_LENGTH__+0x260>
    225e:	a4 ce       	rjmp	.-696    	; 0x1fa8 <main+0x302>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:601
      /* This is a HID Compliance Class Request. */
      /* It is called but not used. */
      D1PRINTF(" IDL=%02X\r\n", (uint8_t)EP_MEM.req_data.wValue);
      EP_RES.CNT = 0;
    }
    else if (bRequest == 0x20) {  /* SET_LINE_ENCODING */
    2260:	80 32       	cpi	r24, 0x20	; 32
    2262:	31 f5       	brne	.+76     	; 0x22b0 <__DATA_REGION_LENGTH__+0x2b0>
ep_req_pending():
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:258
    }
  }

  bool is_ep_setup (void) { return bit_is_set(EP_REQ.STATUS, USB_EPSETUP_bp); }
  bool is_not_dap (void) { return bit_is_clear(EP_DPO.STATUS, USB_BUSNAK_bp); }
  void ep_req_pending (void) { loop_until_bit_is_set(EP_REQ.STATUS, USB_BUSNAK_bp); }
    2264:	80 91 2e 64 	lds	r24, 0x642E	; 0x80642e <EP_TABLE+0x8>
    2268:	81 ff       	sbrs	r24, 1
    226a:	fc cf       	rjmp	.-8      	; 0x2264 <__DATA_REGION_LENGTH__+0x264>
set_line_encoding():
/Users/askn/Collaborator/UPDI4AVR-USB/src/usart.cpp:175
      SYS::LED_Flash();
  }

  void set_line_encoding (LineEncoding_t* _buff) {
    /* The USART will not change unless a different setting is given. */
    if (0 == memcmp(&_set_line_encoding, _buff, sizeof(LineEncoding_t))) return;
    226c:	47 e0       	ldi	r20, 0x07	; 7
    226e:	50 e0       	ldi	r21, 0x00	; 0
    2270:	6e e0       	ldi	r22, 0x0E	; 14
    2272:	73 e6       	ldi	r23, 0x63	; 99
    2274:	8e e7       	ldi	r24, 0x7E	; 126
    2276:	90 e6       	ldi	r25, 0x60	; 96
    2278:	79 d4       	rcall	.+2290   	; 0x2b6c <memcmp>
    227a:	89 2b       	or	r24, r25
    227c:	89 f0       	breq	.+34     	; 0x22a0 <__DATA_REGION_LENGTH__+0x2a0>
read_drop():
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:466
    }
    return _s != 0;
  }

  void read_drop (void) {
    if (bit_is_set(EP_CDO.STATUS, USB_BUSNAK_bp)) ep_cdo_listen();
    227e:	80 91 5e 64 	lds	r24, 0x645E	; 0x80645e <EP_TABLE+0x38>
    2282:	81 fd       	sbrc	r24, 1
    2284:	0e 94 6f 01 	call	0x2de	; 0x2de <USB::ep_cdo_listen()>
set_line_encoding():
/Users/askn/Collaborator/UPDI4AVR-USB/src/usart.cpp:177
    USB::read_drop();
    USART::setup();
    2288:	aa d8       	rcall	.-3756   	; 0x13de <USART::setup()>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usart.cpp:178
    memcpy(&_set_line_encoding, _buff, sizeof(LineEncoding_t));
    228a:	87 e0       	ldi	r24, 0x07	; 7
    228c:	ee e0       	ldi	r30, 0x0E	; 14
    228e:	f3 e6       	ldi	r31, 0x63	; 99
    2290:	ae e7       	ldi	r26, 0x7E	; 126
    2292:	b0 e6       	ldi	r27, 0x60	; 96
    2294:	01 90       	ld	r0, Z+
    2296:	0d 92       	st	X+, r0
    2298:	8a 95       	dec	r24
    229a:	e1 f7       	brne	.-8      	; 0x2294 <__DATA_REGION_LENGTH__+0x294>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usart.cpp:179
    change_vcp();
    229c:	0e 94 b4 05 	call	0xb68	; 0xb68 <USART::change_vcp()>
request_class():
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:612
      /* it's probably best to do nothing.        */
      ep_req_pending();
      USART::set_line_encoding(&EP_MEM.res_encoding);
      D1PRINTF(" SLE=");
      D1PRINTHEX(&_set_line_encoding, sizeof(LineEncoding_t));
      bit_set(GPCONF, GPCONF_OPN_bp);
    22a0:	e4 9a       	sbi	0x1c, 4	; 28
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:613
      _send_count = 0;
    22a2:	10 92 22 64 	sts	0x6422, r1	; 0x806422 <_send_count>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:614
      _recv_count = 0;
    22a6:	10 92 21 64 	sts	0x6421, r1	; 0x806421 <_recv_count>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:615
      _sof_count = 0;
    22aa:	10 92 1f 64 	sts	0x641F, r1	; 0x80641f <_sof_count>
    22ae:	7c ce       	rjmp	.-776    	; 0x1fa8 <main+0x302>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:618
      EP_RES.CNT = 0;
    }
    else if (bRequest == 0x21) {  /* GET_LINE_ENCODING */
    22b0:	81 32       	cpi	r24, 0x21	; 33
    22b2:	29 f5       	brne	.+74     	; 0x22fe <__DATA_REGION_LENGTH__+0x2fe>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:619
      memcpy(&EP_MEM.res_encoding, &_set_line_encoding, sizeof(LineEncoding_t));
    22b4:	87 e0       	ldi	r24, 0x07	; 7
    22b6:	ee e7       	ldi	r30, 0x7E	; 126
    22b8:	f0 e6       	ldi	r31, 0x60	; 96
    22ba:	ae e0       	ldi	r26, 0x0E	; 14
    22bc:	b3 e6       	ldi	r27, 0x63	; 99
    22be:	01 90       	ld	r0, Z+
    22c0:	0d 92       	st	X+, r0
    22c2:	8a 95       	dec	r24
    22c4:	e1 f7       	brne	.-8      	; 0x22be <__DATA_REGION_LENGTH__+0x2be>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:620
      if (EP_MEM.res_encoding.dwDTERate == 0) {
    22c6:	80 91 0e 63 	lds	r24, 0x630E	; 0x80630e <EP_MEM+0x8>
    22ca:	90 91 0f 63 	lds	r25, 0x630F	; 0x80630f <EP_MEM+0x9>
    22ce:	a0 91 10 63 	lds	r26, 0x6310	; 0x806310 <EP_MEM+0xa>
    22d2:	b0 91 11 63 	lds	r27, 0x6311	; 0x806311 <EP_MEM+0xb>
    22d6:	89 2b       	or	r24, r25
    22d8:	8a 2b       	or	r24, r26
    22da:	8b 2b       	or	r24, r27
    22dc:	59 f4       	brne	.+22     	; 0x22f4 <__DATA_REGION_LENGTH__+0x2f4>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:623
        /* Parameters that, if incorrectly accepted,           */
        /* would result in division by zero must be corrected. */
        EP_MEM.res_encoding.dwDTERate = 9600UL;
    22de:	40 92 0e 63 	sts	0x630E, r4	; 0x80630e <EP_MEM+0x8>
    22e2:	50 92 0f 63 	sts	0x630F, r5	; 0x80630f <EP_MEM+0x9>
    22e6:	60 92 10 63 	sts	0x6310, r6	; 0x806310 <EP_MEM+0xa>
    22ea:	70 92 11 63 	sts	0x6311, r7	; 0x806311 <EP_MEM+0xb>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:624
        EP_MEM.res_encoding.bDataBits = 8;
    22ee:	88 e0       	ldi	r24, 0x08	; 8
    22f0:	80 93 14 63 	sts	0x6314, r24	; 0x806314 <EP_MEM+0xe>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:628
      }
      D1PRINTF(" GLE=");
      D1PRINTHEX(&EP_MEM.res_encoding, sizeof(LineEncoding_t));
      EP_RES.CNT = sizeof(LineEncoding_t);
    22f4:	a0 92 38 64 	sts	0x6438, r10	; 0x806438 <EP_TABLE+0x12>
    22f8:	b0 92 39 64 	sts	0x6439, r11	; 0x806439 <EP_TABLE+0x13>
    22fc:	c4 cd       	rjmp	.-1144   	; 0x1e86 <main+0x1e0>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:630
    }
    else if (bRequest == 0x22) {  /* SET_LINE_STATE */
    22fe:	82 32       	cpi	r24, 0x22	; 34
    2300:	c9 f4       	brne	.+50     	; 0x2334 <__DATA_REGION_LENGTH__+0x334>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:633
      /* This includes the DTR and RTS settings. */
      D1PRINTF(" SLS=%02X\r\n", (uint8_t)EP_MEM.req_data.wValue);
      USART::set_line_state((uint8_t)EP_MEM.req_data.wValue);
    2302:	80 91 08 63 	lds	r24, 0x6308	; 0x806308 <EP_MEM+0x2>
set_line_state():
/Users/askn/Collaborator/UPDI4AVR-USB/src/usart.cpp:191
  void set_line_state (uint8_t _line_state) {

    /* If a physical port exists, it reflects DTR/RTS. */

  #if defined(PIN_VCP_DTR)
    if (bit_is_set(_line_state, 0))
    2306:	98 2f       	mov	r25, r24
    2308:	91 70       	andi	r25, 0x01	; 1
    230a:	80 ff       	sbrs	r24, 0
    230c:	0f c0       	rjmp	.+30     	; 0x232c <__DATA_REGION_LENGTH__+0x32c>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usart.cpp:192
      digitalWriteMacro(PIN_VCP_DTR, LOW);
    230e:	6c 98       	cbi	0x0d, 4	; 13
/Users/askn/Collaborator/UPDI4AVR-USB/src/usart.cpp:198
    else
      digitalWriteMacro(PIN_VCP_DTR, HIGH);
  #endif

  #if defined(PIN_VCP_RTS)
    if (bit_is_set(_line_state, 1))
    2310:	81 ff       	sbrs	r24, 1
    2312:	0e c0       	rjmp	.+28     	; 0x2330 <__DATA_REGION_LENGTH__+0x330>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usart.cpp:199
      digitalWriteMacro(PIN_VCP_RTS, LOW);
    2314:	6d 98       	cbi	0x0d, 5	; 13
/Users/askn/Collaborator/UPDI4AVR-USB/src/usart.cpp:206
      digitalWriteMacro(PIN_VCP_RTS, HIGH);
  #endif

  #if defined(CONFIG_VCP_DTR_RESET)
    /* If DTR is set, the device will reboot assuming the host has opened the port. */
    if (!_set_line_state.bStateDTR && bit_is_set(_line_state, 0)) {
    2316:	20 91 7c 60 	lds	r18, 0x607C	; 0x80607c <__data_end>
    231a:	20 fd       	sbrc	r18, 0
    231c:	04 c0       	rjmp	.+8      	; 0x2326 <__DATA_REGION_LENGTH__+0x326>
    231e:	99 23       	and	r25, r25
    2320:	11 f0       	breq	.+4      	; 0x2326 <__DATA_REGION_LENGTH__+0x326>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usart.cpp:207
      bit_set(GPCONF, GPCONF_FAL_bp);
    2322:	e7 9a       	sbi	0x1c, 7	; 28
/Users/askn/Collaborator/UPDI4AVR-USB/src/usart.cpp:208
      bit_set(GPCONF, GPCONF_RIS_bp);
    2324:	e6 9a       	sbi	0x1c, 6	; 28
/Users/askn/Collaborator/UPDI4AVR-USB/src/usart.cpp:212
    }
  #endif

    _set_line_state.bValue = _line_state;
    2326:	80 93 7c 60 	sts	0x607C, r24	; 0x80607c <__data_end>
    232a:	3e ce       	rjmp	.-900    	; 0x1fa8 <main+0x302>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usart.cpp:194

  #if defined(PIN_VCP_DTR)
    if (bit_is_set(_line_state, 0))
      digitalWriteMacro(PIN_VCP_DTR, LOW);
    else
      digitalWriteMacro(PIN_VCP_DTR, HIGH);
    232c:	6c 9a       	sbi	0x0d, 4	; 13
    232e:	f0 cf       	rjmp	.-32     	; 0x2310 <__DATA_REGION_LENGTH__+0x310>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usart.cpp:201

  #if defined(PIN_VCP_RTS)
    if (bit_is_set(_line_state, 1))
      digitalWriteMacro(PIN_VCP_RTS, LOW);
    else
      digitalWriteMacro(PIN_VCP_RTS, HIGH);
    2330:	6d 9a       	sbi	0x0d, 5	; 13
    2332:	f1 cf       	rjmp	.-30     	; 0x2316 <__DATA_REGION_LENGTH__+0x316>
request_class():
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:636
      EP_RES.CNT = 0;
    }
    else if (bRequest == 0x23) {  /* SET_SEND_BREAK */
    2334:	83 32       	cpi	r24, 0x23	; 35
    2336:	09 f0       	breq	.+2      	; 0x233a <__DATA_REGION_LENGTH__+0x33a>
    2338:	a4 ce       	rjmp	.-696    	; 0x2082 <__DATA_REGION_LENGTH__+0x82>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:640
      /* When the host application closes the port, it may send a BREAK=0. */
      /* Nothing else is used unless programmed by the application. */
      D1PRINTF(" SB=%04X\r\n", EP_MEM.req_data.wValue);
      _send_break = EP_MEM.req_data.wValue;
    233a:	80 91 08 63 	lds	r24, 0x6308	; 0x806308 <EP_MEM+0x2>
    233e:	90 91 09 63 	lds	r25, 0x6309	; 0x806309 <EP_MEM+0x3>
    2342:	80 93 23 64 	sts	0x6423, r24	; 0x806423 <_send_break>
    2346:	90 93 24 64 	sts	0x6424, r25	; 0x806424 <_send_break+0x1>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:641
      if (_send_break) break_on();
    234a:	89 2b       	or	r24, r25
    234c:	69 f0       	breq	.+26     	; 0x2368 <__DATA_REGION_LENGTH__+0x368>
break_on():
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:373
    ep_dpo_listen();  /* continue transaction */
  }

  void break_on (void) {
    if (bit_is_set(GPCONF, GPCONF_VCP_bp)
     && bit_is_clear(GPCONF, GPCONF_BRK_bp)) {
    234e:	e1 9b       	sbis	0x1c, 1	; 28
    2350:	09 c0       	rjmp	.+18     	; 0x2364 <__DATA_REGION_LENGTH__+0x364>
    2352:	e3 99       	sbic	0x1c, 3	; 28
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:375
      /* SET_SEND_BREAK is called when the port is closed successfully. */
      bit_clear(GPCONF, GPCONF_OPN_bp);
    2354:	07 c0       	rjmp	.+14     	; 0x2364 <__DATA_REGION_LENGTH__+0x364>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:376
      _sof_count = 0;
    2356:	e4 98       	cbi	0x1c, 4	; 28
    2358:	10 92 1f 64 	sts	0x641F, r1	; 0x80641f <_sof_count>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:377
      USART::disable_vcp();
    235c:	25 d8       	rcall	.-4022   	; 0x13a8 <USART::disable_vcp()>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:380
  #ifdef CONFIG_VCP_TXD_ODM
      /* During Break, VCP-TxD is pulled LOW. */
      pinModeMacro(PIN_VCP_TXD, OUTPUT);
    235e:	02 9a       	sbi	0x00, 2	; 0
    2360:	10 92 12 04 	sts	0x0412, r1	; 0x800412 <__TEXT_REGION_LENGTH__+0x7f0412>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:383
  #endif
    }
    bit_set(GPCONF, GPCONF_BRK_bp);
    2364:	e3 9a       	sbi	0x1c, 3	; 28
    2366:	20 ce       	rjmp	.-960    	; 0x1fa8 <main+0x302>
request_class():
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:642
      /* When the host application closes the port, it may send a BREAK=0. */
      /* Nothing else is used unless programmed by the application. */
      D1PRINTF(" SB=%04X\r\n", EP_MEM.req_data.wValue);
      _send_break = EP_MEM.req_data.wValue;
      if (_send_break) break_on();
      else break_off();
    2368:	0e 94 44 06 	call	0xc88	; 0xc88 <USB::break_off()>
    236c:	1d ce       	rjmp	.-966    	; 0x1fa8 <main+0x302>
main():
/Users/askn/Collaborator/UPDI4AVR-USB/src/main.cpp:126
    if (USB::is_ep_setup()) USB::handling_control_transactions();

    /* If SW0 was used, work here. */
    if (bit_is_clear(PGCONF, PGCONF_UPDI_bp)) {
      if      (bit_is_set(GPCONF, GPCONF_FAL_bp)) SYS::reset_enter();
      else if (bit_is_set(GPCONF, GPCONF_RIS_bp)) SYS::reset_leave();
    236e:	e6 9b       	sbis	0x1c, 6	; 28
    2370:	b6 cd       	rjmp	.-1172   	; 0x1ede <main+0x238>
reset_leave():
/Users/askn/Collaborator/UPDI4AVR-USB/src/sys.cpp:276
   * This will be executed when SW0 is released.
   * If the VCP is operating, it will return to normal operation,
   * but if the USB is stopped, it will reboot at the end.
   */
  void reset_leave (void) {
    if (_jtag_arch == 5) {
    2372:	80 91 88 60 	lds	r24, 0x6088	; 0x806088 <_jtag_arch>
    2376:	85 30       	cpi	r24, 0x05	; 5
    2378:	21 f4       	brne	.+8      	; 0x2382 <__DATA_REGION_LENGTH__+0x382>
/Users/askn/Collaborator/UPDI4AVR-USB/src/sys.cpp:277
      _updi_bitmap[10] = 0x00; /* SYSRUN */
    237a:	10 92 24 60 	sts	0x6024, r1	; 0x806024 <SYS::_updi_bitmap+0xa>
/Users/askn/Collaborator/UPDI4AVR-USB/src/sys.cpp:278
      send_bitmap(_updi_bitmap, sizeof(_updi_bitmap) * 8);
    237e:	0e 94 41 01 	call	0x282	; 0x282 <SYS::send_bitmap(unsigned char const*, unsigned int) [clone .constprop.7]>
/Users/askn/Collaborator/UPDI4AVR-USB/src/sys.cpp:280
    }
    openDrainWriteMacro(PIN_PG_TRST, HIGH);
    2382:	01 98       	cbi	0x00, 1	; 0
delay_millis():
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/modernAVR/0.2.14/cores/modernAVR/api/delay_busywait.h:42
    2384:	9f e7       	ldi	r25, 0x7F	; 127
    2386:	ea e1       	ldi	r30, 0x1A	; 26
    2388:	f6 e0       	ldi	r31, 0x06	; 6
    238a:	91 50       	subi	r25, 0x01	; 1
    238c:	e0 40       	sbci	r30, 0x00	; 0
    238e:	f0 40       	sbci	r31, 0x00	; 0
    2390:	e1 f7       	brne	.-8      	; 0x238a <__DATA_REGION_LENGTH__+0x38a>
    2392:	00 c0       	rjmp	.+0      	; 0x2394 <__DATA_REGION_LENGTH__+0x394>
    2394:	00 00       	nop
reset_leave():
/Users/askn/Collaborator/UPDI4AVR-USB/src/sys.cpp:286
  #ifdef CONFIG_VCP_DTR_RESET
    /* A delay of 64ms or more between when the bootloader starts and when RxD opens. */
    delay_millis(100);
  #endif
    D1PRINTF("<RST:OUT>\r\n");
    if (bit_is_set(GPCONF, GPCONF_USB_bp))
    2396:	e0 9b       	sbis	0x1c, 0	; 28
    2398:	05 c0       	rjmp	.+10     	; 0x23a4 <__DATA_REGION_LENGTH__+0x3a4>
/Users/askn/Collaborator/UPDI4AVR-USB/src/sys.cpp:287
      LED_HeartBeat();  /* The USB is ready. */
    239a:	0e 94 9e 05 	call	0xb3c	; 0xb3c <SYS::LED_HeartBeat()>
/Users/askn/Collaborator/UPDI4AVR-USB/src/sys.cpp:292
    else if (!USB0_ADDR)
      reboot();         /* USB disconnected, System reboot. */
    else
      LED_Flash();      /* USB is not yet enabled. */
    bit_clear(GPCONF, GPCONF_FAL_bp);
    239e:	e7 98       	cbi	0x1c, 7	; 28
/Users/askn/Collaborator/UPDI4AVR-USB/src/sys.cpp:293
    bit_clear(GPCONF, GPCONF_RIS_bp);
    23a0:	e6 98       	cbi	0x1c, 6	; 28
    23a2:	9d cd       	rjmp	.-1222   	; 0x1ede <main+0x238>
/Users/askn/Collaborator/UPDI4AVR-USB/src/sys.cpp:288
    delay_millis(100);
  #endif
    D1PRINTF("<RST:OUT>\r\n");
    if (bit_is_set(GPCONF, GPCONF_USB_bp))
      LED_HeartBeat();  /* The USB is ready. */
    else if (!USB0_ADDR)
    23a4:	80 91 03 0c 	lds	r24, 0x0C03	; 0x800c03 <__TEXT_REGION_LENGTH__+0x7f0c03>
    23a8:	81 11       	cpse	r24, r1
    23aa:	06 c0       	rjmp	.+12     	; 0x23b8 <__DATA_REGION_LENGTH__+0x3b8>
reboot():
/Users/askn/Collaborator/UPDI4AVR-USB/src/sys.cpp:306
  void reboot (void) {
  #if defined(DEBUG)
    D0PRINTF("<REBOOT>\r\n");
    Serial.flush();
  #endif
    _PROTECTED_WRITE(RSTCTRL_SWRR, 1);
    23ac:	88 ed       	ldi	r24, 0xD8	; 216
    23ae:	91 e0       	ldi	r25, 0x01	; 1
    23b0:	84 bf       	out	0x34, r24	; 52
    23b2:	90 93 41 00 	sts	0x0041, r25	; 0x800041 <__TEXT_REGION_LENGTH__+0x7f0041>
    23b6:	f3 cf       	rjmp	.-26     	; 0x239e <__DATA_REGION_LENGTH__+0x39e>
reset_leave():
/Users/askn/Collaborator/UPDI4AVR-USB/src/sys.cpp:291
    if (bit_is_set(GPCONF, GPCONF_USB_bp))
      LED_HeartBeat();  /* The USB is ready. */
    else if (!USB0_ADDR)
      reboot();         /* USB disconnected, System reboot. */
    else
      LED_Flash();      /* USB is not yet enabled. */
    23b8:	0e 94 89 05 	call	0xb12	; 0xb12 <SYS::LED_Flash()>
    23bc:	f0 cf       	rjmp	.-32     	; 0x239e <__DATA_REGION_LENGTH__+0x39e>
read_byte():
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:443
    else ep_cdi_listen();
  }

  uint8_t read_byte (void) {
    uint8_t _c = 0;
    if (EP_CDO.CNT != _recv_count) {
    23be:	40 91 60 64 	lds	r20, 0x6460	; 0x806460 <EP_TABLE+0x3a>
    23c2:	50 91 61 64 	lds	r21, 0x6461	; 0x806461 <EP_TABLE+0x3b>
    23c6:	28 2f       	mov	r18, r24
    23c8:	30 e0       	ldi	r19, 0x00	; 0
main():
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:442
    if (_send_count < 64) _sof_count = 30;
    else ep_cdi_listen();
  }

  uint8_t read_byte (void) {
    uint8_t _c = 0;
    23ca:	10 e0       	ldi	r17, 0x00	; 0
read_byte():
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:443
    if (EP_CDO.CNT != _recv_count) {
    23cc:	42 17       	cp	r20, r18
    23ce:	53 07       	cpc	r21, r19
    23d0:	39 f0       	breq	.+14     	; 0x23e0 <__DATA_REGION_LENGTH__+0x3e0>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:450
      if (_recv_count == 0) {
        D2PRINTF(" VO=%02X:", EP_CDO.CNT);
        D2PRINTHEX(&EP_MEM.cdo_data, EP_CDO.CNT);
      }
  #endif
      _c = EP_MEM.cdo_data[_recv_count++];
    23d2:	8f 5f       	subi	r24, 0xFF	; 255
    23d4:	80 93 21 64 	sts	0x6421, r24	; 0x806421 <_recv_count>
    23d8:	22 5a       	subi	r18, 0xA2	; 162
    23da:	3c 49       	sbci	r19, 0x9C	; 156
    23dc:	f9 01       	movw	r30, r18
    23de:	10 81       	ld	r17, Z
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:452
    }
    if (EP_CDO.CNT == _recv_count) ep_cdo_listen();
    23e0:	80 91 60 64 	lds	r24, 0x6460	; 0x806460 <EP_TABLE+0x3a>
    23e4:	90 91 61 64 	lds	r25, 0x6461	; 0x806461 <EP_TABLE+0x3b>
    23e8:	20 91 21 64 	lds	r18, 0x6421	; 0x806421 <_recv_count>
    23ec:	28 17       	cp	r18, r24
    23ee:	19 06       	cpc	r1, r25
    23f0:	11 f4       	brne	.+4      	; 0x23f6 <__DATA_REGION_LENGTH__+0x3f6>
    23f2:	0e 94 6f 01 	call	0x2de	; 0x2de <USB::ep_cdo_listen()>
vcp_transceiver():
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:503
  #if defined(CONFIG_VCP_CTS_ENABLE)
     && !digitalReadMacro(PIN_VCP_CTS)
  #endif
     && bit_is_set(USART0_STATUS, USART_DREIF_bp)
     && read_available()) {
      USART0_TXDATAL = read_byte();
    23f6:	10 93 02 08 	sts	0x0802, r17	; 0x800802 <__TEXT_REGION_LENGTH__+0x7f0802>
    23fa:	8b cd       	rjmp	.-1258   	; 0x1f12 <main+0x26c>
read_drop():
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:466
    }
    return _s != 0;
  }

  void read_drop (void) {
    if (bit_is_set(EP_CDO.STATUS, USB_BUSNAK_bp)) ep_cdo_listen();
    23fc:	80 91 5e 64 	lds	r24, 0x645E	; 0x80645e <EP_TABLE+0x38>
    2400:	81 ff       	sbrs	r24, 1
    2402:	87 cd       	rjmp	.-1266   	; 0x1f12 <main+0x26c>
    2404:	84 cd       	rjmp	.-1272   	; 0x1f0e <main+0x268>
cci_break_count():
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:404
        _send_break -= USB_CCI_INTERVAL;
        if (bit_is_set(EP_CCI.STATUS, USB_BUSNAK_bp))
          ep_cci_listen();
      }
      else {
        _send_break = 0;
    2406:	10 92 23 64 	sts	0x6423, r1	; 0x806423 <_send_break>
    240a:	10 92 24 64 	sts	0x6424, r1	; 0x806424 <_send_break+0x1>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:405
        break_off();
    240e:	0e 94 44 06 	call	0xc88	; 0xc88 <USB::break_off()>
    2412:	99 cd       	rjmp	.-1230   	; 0x1f46 <main+0x2a0>
dap_command_check():
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:67
     * A maximum of 15 chunks is possible,
     * resulting in a maximum payload length of 900 bytes.
     */
    if (_cmd == 0x80) {             /* DAP_EDBG_VENDOR_AVR_CMD */
      uint8_t _endf = _sub & 0x0F;
      uint8_t _frag = _sub >> 4;
    2414:	90 e0       	ldi	r25, 0x00	; 0
    2416:	64 e0       	ldi	r22, 0x04	; 4
    2418:	95 95       	asr	r25
    241a:	87 95       	ror	r24
    241c:	6a 95       	dec	r22
    241e:	e1 f7       	brne	.-8      	; 0x2418 <__DATA_REGION_LENGTH__+0x418>
    2420:	28 2e       	mov	r2, r24
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:68
      uint8_t _size = EP_MEM.dap_data[3];
    2422:	e0 90 21 63 	lds	r14, 0x6321	; 0x806321 <EP_MEM+0x1b>
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:77
        D1PRINTF("<EDBG_FAIL>\r\n");
        EP_MEM.dap_data[1] = 0x00;  /* EDBG_RSP_FAIL */
      }
      else {
        /* Detect the first chunk. */
        if (_frag == 1) _packet_chunks = 0;
    2426:	21 e0       	ldi	r18, 0x01	; 1
    2428:	82 13       	cpse	r24, r18
    242a:	02 c0       	rjmp	.+4      	; 0x2430 <__DATA_REGION_LENGTH__+0x430>
    242c:	10 92 86 60 	sts	0x6086, r1	; 0x806086 <_packet_chunks>
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:69
     */
    if (_cmd == 0x80) {             /* DAP_EDBG_VENDOR_AVR_CMD */
      uint8_t _endf = _sub & 0x0F;
      uint8_t _frag = _sub >> 4;
      uint8_t _size = EP_MEM.dap_data[3];
      size_t  _ofst = (_frag - 1) * 60;
    2430:	01 97       	sbiw	r24, 0x01	; 1
    2432:	2c e3       	ldi	r18, 0x3C	; 60
    2434:	28 9f       	mul	r18, r24
    2436:	80 01       	movw	r16, r0
    2438:	29 9f       	mul	r18, r25
    243a:	10 0d       	add	r17, r0
    243c:	11 24       	eor	r1, r1
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:78
        EP_MEM.dap_data[1] = 0x00;  /* EDBG_RSP_FAIL */
      }
      else {
        /* Detect the first chunk. */
        if (_frag == 1) _packet_chunks = 0;
        ++_packet_chunks;
    243e:	80 91 86 60 	lds	r24, 0x6086	; 0x806086 <_packet_chunks>
    2442:	33 24       	eor	r3, r3
    2444:	33 94       	inc	r3
    2446:	38 0e       	add	r3, r24
    2448:	30 92 86 60 	sts	0x6086, r3	; 0x806086 <_packet_chunks>
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:79
        memcpy(&packet.rawData[_ofst], &EP_MEM.dap_data[4], _size);
    244c:	f1 2c       	mov	r15, r1
    244e:	a7 01       	movw	r20, r14
    2450:	62 e2       	ldi	r22, 0x22	; 34
    2452:	73 e6       	ldi	r23, 0x63	; 99
    2454:	c8 01       	movw	r24, r16
    2456:	82 54       	subi	r24, 0x42	; 66
    2458:	9f 49       	sbci	r25, 0x9F	; 159
    245a:	95 d3       	rcall	.+1834   	; 0x2b86 <memcpy>
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:80
        EP_MEM.dap_data[1] = 0x01;  /* EDBG_RSP_OK */
    245c:	81 e0       	ldi	r24, 0x01	; 1
    245e:	80 93 1f 63 	sts	0x631F, r24	; 0x80631f <EP_MEM+0x19>
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:82
        D3PRINTHEX(&EP_MEM.dap_data, _size + 4);
        if (_endf == _frag) {       /* end of defragment */
    2462:	4d 81       	ldd	r20, Y+5	; 0x05
    2464:	42 11       	cpse	r20, r2
    2466:	86 cd       	rjmp	.-1268   	; 0x1f74 <main+0x2ce>
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:83
          _packet_length = _ofst + _size;
    2468:	0e 0d       	add	r16, r14
    246a:	1f 1d       	adc	r17, r15
    246c:	00 93 8b 60 	sts	0x608B, r16	; 0x80608b <_packet_length>
    2470:	10 93 8c 60 	sts	0x608C, r17	; 0x80608c <_packet_length+0x1>
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:86
          D2PRINTF(" SQ=%03X:%03X<", packet.out.sequence, _packet_length);
          D2PRINTHEX(&packet, _packet_length);
          if (_packet_chunks == _endf) {
    2474:	8d 81       	ldd	r24, Y+5	; 0x05
    2476:	83 11       	cpse	r24, r3
    2478:	7b cd       	rjmp	.-1290   	; 0x1f70 <main+0x2ca>
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:89
            /* True if an EDBG Payload is received. */
            D2PRINTF("<EDBG_OK>\r\n");
            _packet_endfrag = 0;
    247a:	10 92 89 60 	sts	0x6089, r1	; 0x806089 <_packet_endfrag>
main():
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:90
            _result = true;
    247e:	01 e0       	ldi	r16, 0x01	; 1
ep_dpi_listen():
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:279
    loop_until_bit_is_clear(USB0_INTFLAGSB, USB_RMWBUSY_bp);
    USB_EP_STATUS_CLR(USB_EP_RES) = ~USB_TOGGLE_bm;
  }

  void ep_dpi_listen (void) {
    EP_DPI.CNT = 64;
    2480:	80 e4       	ldi	r24, 0x40	; 64
    2482:	90 e0       	ldi	r25, 0x00	; 0
    2484:	80 93 48 64 	sts	0x6448, r24	; 0x806448 <EP_TABLE+0x22>
    2488:	90 93 49 64 	sts	0x6449, r25	; 0x806449 <EP_TABLE+0x23>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:280
    EP_DPI.MCNT = 0;
    248c:	10 92 4c 64 	sts	0x644C, r1	; 0x80644c <EP_TABLE+0x26>
    2490:	10 92 4d 64 	sts	0x644D, r1	; 0x80644d <EP_TABLE+0x27>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:281
    loop_until_bit_is_clear(USB0_INTFLAGSB, USB_RMWBUSY_bp);
    2494:	80 91 0b 0c 	lds	r24, 0x0C0B	; 0x800c0b <__TEXT_REGION_LENGTH__+0x7f0c0b>
    2498:	82 fd       	sbrc	r24, 2
    249a:	fc cf       	rjmp	.-8      	; 0x2494 <__DATA_REGION_LENGTH__+0x494>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:282
    USB_EP_STATUS_CLR(USB_EP_DPI) = ~USB_TOGGLE_bm;
    249c:	8e ef       	ldi	r24, 0xFE	; 254
    249e:	80 93 46 0c 	sts	0x0C46, r24	; 0x800c46 <__TEXT_REGION_LENGTH__+0x7f0c46>
ep_dpo_listen():
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:286
  }

  void ep_dpo_listen (void) {
    EP_DPO.CNT = 0;
    24a2:	10 92 50 64 	sts	0x6450, r1	; 0x806450 <EP_TABLE+0x2a>
    24a6:	10 92 51 64 	sts	0x6451, r1	; 0x806451 <EP_TABLE+0x2b>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:287
    loop_until_bit_is_clear(USB0_INTFLAGSB, USB_RMWBUSY_bp);
    24aa:	80 91 0b 0c 	lds	r24, 0x0C0B	; 0x800c0b <__TEXT_REGION_LENGTH__+0x7f0c0b>
    24ae:	82 fd       	sbrc	r24, 2
    24b0:	fc cf       	rjmp	.-8      	; 0x24aa <__DATA_REGION_LENGTH__+0x4aa>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:288
    USB_EP_STATUS_CLR(USB_EP_DPO) = ~USB_TOGGLE_bm;
    24b2:	8e ef       	ldi	r24, 0xFE	; 254
    24b4:	80 93 48 0c 	sts	0x0C48, r24	; 0x800c48 <__TEXT_REGION_LENGTH__+0x7f0c48>
main():
/Users/askn/Collaborator/UPDI4AVR-USB/src/main.cpp:151

    /*** If CMSIS-DAP is not received, return to the top. ***/
    if (USB::is_not_dap()) continue;

    /*** CMSIS-DAP and JTAG3 packet receiver ***/
    if (JTAG::dap_command_check()) JTAG::jtag_scope_branch();
    24b8:	00 23       	and	r16, r16
    24ba:	09 f4       	brne	.+2      	; 0x24be <__DATA_REGION_LENGTH__+0x4be>
    24bc:	7b cc       	rjmp	.-1802   	; 0x1db4 <main+0x10e>
jtag_scope_branch():
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:384

  /* Processing branches depending on the scope specifier. */
  /* Currently, four types of scope are known: */
  void jtag_scope_branch (void) {
    size_t _rspsize = 0;
    uint8_t _scope  = packet.out.scope;
    24be:	80 91 c2 60 	lds	r24, 0x60C2	; 0x8060c2 <packet+0x4>
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:390
    D1PRINTF("SCOPE=%02X,C=%02X,S=%02X,L=%02X\r\n",
      _scope,
      packet.out.cmd,
      packet.out.section,
      packet.out.index);
    if      (_scope == 0x01) _rspsize = jtag_scope_general();       /* SCOPE_GENERAL */
    24c2:	81 30       	cpi	r24, 0x01	; 1
    24c4:	09 f0       	breq	.+2      	; 0x24c8 <__DATA_REGION_LENGTH__+0x4c8>
    24c6:	c7 c0       	rjmp	.+398    	; 0x2656 <__DATA_REGION_LENGTH__+0x656>
jtag_scope_general():
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:175
  }

  /*** Only a subset of JTAGICE3 commands are implemented. ***/
  size_t jtag_scope_general (void) {
    size_t  _rspsize = 0;
    uint8_t _cmd     = packet.out.cmd;
    24c8:	80 91 c3 60 	lds	r24, 0x60C3	; 0x8060c3 <packet+0x5>
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:179
    uint8_t _section = packet.out.section;
    uint8_t _index   = packet.out.index;
    uint8_t _length  = packet.out.length;
    if (_cmd == 0x02) {             /* CMD3_GET_PARAMETER */
    24cc:	82 30       	cpi	r24, 0x02	; 2
    24ce:	09 f0       	breq	.+2      	; 0x24d2 <__DATA_REGION_LENGTH__+0x4d2>
    24d0:	b2 c0       	rjmp	.+356    	; 0x2636 <__DATA_REGION_LENGTH__+0x636>
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:176

  /*** Only a subset of JTAGICE3 commands are implemented. ***/
  size_t jtag_scope_general (void) {
    size_t  _rspsize = 0;
    uint8_t _cmd     = packet.out.cmd;
    uint8_t _section = packet.out.section;
    24d2:	80 91 c5 60 	lds	r24, 0x60C5	; 0x8060c5 <packet+0x7>
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:177
    uint8_t _index   = packet.out.index;
    24d6:	60 91 c6 60 	lds	r22, 0x60C6	; 0x8060c6 <packet+0x8>
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:178
    uint8_t _length  = packet.out.length;
    24da:	00 91 c7 60 	lds	r16, 0x60C7	; 0x8060c7 <packet+0x9>
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:181
    if (_cmd == 0x02) {             /* CMD3_GET_PARAMETER */
      D1PRINTF(" GEN_GET_PARAM=%02X:%02X:%02X\r\n", _section, _index, _length);
      if (_section == 0) {          /* SET_GET_CTXT_CONFIG */
    24de:	81 11       	cpse	r24, r1
    24e0:	68 c0       	rjmp	.+208    	; 0x25b2 <__DATA_REGION_LENGTH__+0x5b2>
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:183
        /* _index == 0-5 */
        memcpy_P(&packet.in.data[0], &jtag_version[_index], _length);
    24e2:	40 2f       	mov	r20, r16
    24e4:	50 e0       	ldi	r21, 0x00	; 0
    24e6:	70 e0       	ldi	r23, 0x00	; 0
    24e8:	64 53       	subi	r22, 0x34	; 52
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:197
          packet.in.wValue = _vtarget;
        }
        else {                      /* PARM3_ANALOG_XXXX */
          /* Called with PowerDebugger HAS_VTARG_ADJ */
          D1PRINTF(" PHYSICAL=%02X:%02X\r\n", _index, _length);
          memcpy_P(&packet.in.data[0], &jtag_physical[_index & 7], _length);
    24ea:	7e 4f       	sbci	r23, 0xFE	; 254
    24ec:	85 ec       	ldi	r24, 0xC5	; 197
    24ee:	90 e6       	ldi	r25, 0x60	; 96
    24f0:	e2 d2       	rcall	.+1476   	; 0x2ab6 <memcpy_P>
    24f2:	93 c0       	rjmp	.+294    	; 0x261a <__DATA_REGION_LENGTH__+0x61a>
dap_command_check():
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:100
            EP_MEM.dap_data[1] = 0x00;  /* EDBG_RSP_FAIL */
          }
        }
      }
    }
    else if (_cmd == 0x81) {        /* DAP_EDBG_VENDOR_AVR_RSP */
    24f4:	91 38       	cpi	r25, 0x81	; 129
    24f6:	a9 f5       	brne	.+106    	; 0x2562 <__DATA_REGION_LENGTH__+0x562>
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:101
      EP_MEM.dap_data[2] = 0;       /* Always zero */
    24f8:	10 92 20 63 	sts	0x6320, r1	; 0x806320 <EP_MEM+0x1a>
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:102
      if (_packet_endfrag == 0) {
    24fc:	90 91 89 60 	lds	r25, 0x6089	; 0x806089 <_packet_endfrag>
    2500:	91 11       	cpse	r25, r1
    2502:	05 c0       	rjmp	.+10     	; 0x250e <__DATA_REGION_LENGTH__+0x50e>
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:104
        D1PRINTF("<EDBG_EMPTY>\r\n");
        EP_MEM.dap_data[1] = 0;
    2504:	10 92 1f 63 	sts	0x631F, r1	; 0x80631f <EP_MEM+0x19>
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:124
      if (_sub == 0xFF              /* DAP_INFO_PACKET_SIZE      */
       || _sub == 0xFB              /* UART Receive Buffer Size  */
       || _sub == 0xFC) {           /* UART Transmit Buffer Size */
        EP_MEM.dap_data[1] = 0x02;  /* length=2 */
        EP_MEM.dap_data[2] = 0x40;  /* MaxPacketSize = 64 */
        EP_MEM.dap_data[3] = 0x00;
    2508:	10 92 21 63 	sts	0x6321, r1	; 0x806321 <EP_MEM+0x1b>
    250c:	33 cd       	rjmp	.-1434   	; 0x1f74 <main+0x2ce>
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:108
        D1PRINTF("<EDBG_EMPTY>\r\n");
        EP_MEM.dap_data[1] = 0;
        EP_MEM.dap_data[3] = 0;
      }
      else {
        memcpy(&EP_MEM.dap_data[4], &packet.in.token + (_packet_fragment * 60), 60);
    250e:	80 91 8a 60 	lds	r24, 0x608A	; 0x80608a <_packet_fragment>
    2512:	2c e3       	ldi	r18, 0x3C	; 60
    2514:	82 9f       	mul	r24, r18
    2516:	f0 01       	movw	r30, r0
    2518:	11 24       	eor	r1, r1
    251a:	e1 54       	subi	r30, 0x41	; 65
    251c:	ff 49       	sbci	r31, 0x9F	; 159
    251e:	a2 e2       	ldi	r26, 0x22	; 34
    2520:	b3 e6       	ldi	r27, 0x63	; 99
    2522:	01 90       	ld	r0, Z+
    2524:	0d 92       	st	X+, r0
    2526:	2a 95       	dec	r18
    2528:	e1 f7       	brne	.-8      	; 0x2522 <__DATA_REGION_LENGTH__+0x522>
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:109
        EP_MEM.dap_data[1] = ((++_packet_fragment) << 4) | _packet_endfrag;
    252a:	8f 5f       	subi	r24, 0xFF	; 255
    252c:	80 93 8a 60 	sts	0x608A, r24	; 0x80608a <_packet_fragment>
    2530:	e0 e1       	ldi	r30, 0x10	; 16
    2532:	8e 9f       	mul	r24, r30
    2534:	90 01       	movw	r18, r0
    2536:	11 24       	eor	r1, r1
    2538:	29 2b       	or	r18, r25
    253a:	20 93 1f 63 	sts	0x631F, r18	; 0x80631f <EP_MEM+0x19>
    253e:	20 91 8b 60 	lds	r18, 0x608B	; 0x80608b <_packet_length>
    2542:	30 91 8c 60 	lds	r19, 0x608C	; 0x80608c <_packet_length+0x1>
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:110
        EP_MEM.dap_data[3] = _packet_fragment == _packet_endfrag ? _packet_length : 60;
    2546:	98 17       	cp	r25, r24
    2548:	51 f0       	breq	.+20     	; 0x255e <__DATA_REGION_LENGTH__+0x55e>
    254a:	8c e3       	ldi	r24, 0x3C	; 60
    254c:	80 93 21 63 	sts	0x6321, r24	; 0x806321 <EP_MEM+0x1b>
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:111
        _packet_length -= 60;
    2550:	2c 53       	subi	r18, 0x3C	; 60
    2552:	31 09       	sbc	r19, r1
    2554:	20 93 8b 60 	sts	0x608B, r18	; 0x80608b <_packet_length>
    2558:	30 93 8c 60 	sts	0x608C, r19	; 0x80608c <_packet_length+0x1>
    255c:	0b cd       	rjmp	.-1514   	; 0x1f74 <main+0x2ce>
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:110
        EP_MEM.dap_data[3] = 0;
      }
      else {
        memcpy(&EP_MEM.dap_data[4], &packet.in.token + (_packet_fragment * 60), 60);
        EP_MEM.dap_data[1] = ((++_packet_fragment) << 4) | _packet_endfrag;
        EP_MEM.dap_data[3] = _packet_fragment == _packet_endfrag ? _packet_length : 60;
    255e:	82 2f       	mov	r24, r18
    2560:	f5 cf       	rjmp	.-22     	; 0x254c <__DATA_REGION_LENGTH__+0x54c>
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:118
        D3PRINTHEX(&EP_MEM.dap_data, EP_MEM.dap_data[3] + 4);
      }
    }

    /*** DAP Standard ***/
    else if (_cmd == 0x00) {        /* DAP_CMD_INFO */
    2562:	91 11       	cpse	r25, r1
    2564:	1a c0       	rjmp	.+52     	; 0x259a <__DATA_REGION_LENGTH__+0x59a>
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:119
      if (_sub == 0xFF              /* DAP_INFO_PACKET_SIZE      */
    2566:	8f 3f       	cpi	r24, 0xFF	; 255
    2568:	21 f0       	breq	.+8      	; 0x2572 <__DATA_REGION_LENGTH__+0x572>
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:120
       || _sub == 0xFB              /* UART Receive Buffer Size  */
    256a:	95 e0       	ldi	r25, 0x05	; 5
    256c:	98 0f       	add	r25, r24
    256e:	92 30       	cpi	r25, 0x02	; 2
    2570:	38 f4       	brcc	.+14     	; 0x2580 <__DATA_REGION_LENGTH__+0x580>
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:122
       || _sub == 0xFC) {           /* UART Transmit Buffer Size */
        EP_MEM.dap_data[1] = 0x02;  /* length=2 */
    2572:	82 e0       	ldi	r24, 0x02	; 2
    2574:	80 93 1f 63 	sts	0x631F, r24	; 0x80631f <EP_MEM+0x19>
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:123
        EP_MEM.dap_data[2] = 0x40;  /* MaxPacketSize = 64 */
    2578:	80 e4       	ldi	r24, 0x40	; 64
    257a:	80 93 20 63 	sts	0x6320, r24	; 0x806320 <EP_MEM+0x1a>
    257e:	c4 cf       	rjmp	.-120    	; 0x2508 <__DATA_REGION_LENGTH__+0x508>
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:128
        EP_MEM.dap_data[3] = 0x00;
        D3PRINTF(" PI=");
        D3PRINTHEX(&EP_MEM.dap_data, 4);
      }
      else if (_sub == 0xF1) {      /* DAP_INFO_Capabilities */
    2580:	81 3f       	cpi	r24, 0xF1	; 241
    2582:	09 f0       	breq	.+2      	; 0x2586 <__DATA_REGION_LENGTH__+0x586>
    2584:	f7 cc       	rjmp	.-1554   	; 0x1f74 <main+0x2ce>
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:129
        EP_MEM.dap_data[1] = 0x02;  /* length=2 */
    2586:	82 e0       	ldi	r24, 0x02	; 2
    2588:	80 93 1f 63 	sts	0x631F, r24	; 0x80631f <EP_MEM+0x19>
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:130
        EP_MEM.dap_data[2] = 0x80;  /* 7:UART Communication Port */
    258c:	80 e8       	ldi	r24, 0x80	; 128
    258e:	80 93 20 63 	sts	0x6320, r24	; 0x806320 <EP_MEM+0x1a>
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:131
        EP_MEM.dap_data[3] = 0x01;  /* 1:USB COM Port */
    2592:	81 e0       	ldi	r24, 0x01	; 1
    2594:	80 93 21 63 	sts	0x6321, r24	; 0x806321 <EP_MEM+0x1b>
    2598:	ed cc       	rjmp	.-1574   	; 0x1f74 <main+0x2ce>
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:136
        D3PRINTF(" PI=");
        D3PRINTHEX(&EP_MEM.dap_data, 4);
      }
    }
    else if (_cmd == 0x02) {        /* DAP_CMD_CONNECT */
    259a:	92 30       	cpi	r25, 0x02	; 2
    259c:	09 f4       	brne	.+2      	; 0x25a0 <__DATA_REGION_LENGTH__+0x5a0>
    259e:	ea cc       	rjmp	.-1580   	; 0x1f74 <main+0x2ce>
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:142
      /* EP_MEM.dap_data[1] == CONN_TYPE */
      /* Here, the response is returned without processing. */
      D3PRINTF(" PI=");
      D3PRINTHEX(&EP_MEM.dap_data, 2);
    }
    else if (_cmd == 0x01           /* DAP_CMD_HOSTSTATUS */
    25a0:	91 30       	cpi	r25, 0x01	; 1
    25a2:	19 f4       	brne	.+6      	; 0x25aa <__DATA_REGION_LENGTH__+0x5aa>
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:143
          && _sub == 0x00) {        /* DAP_LED_CONNECT */
    25a4:	81 11       	cpse	r24, r1
    25a6:	e4 cc       	rjmp	.-1592   	; 0x1f70 <main+0x2ca>
    25a8:	e5 cc       	rjmp	.-1590   	; 0x1f74 <main+0x2ce>
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:149
      /* EP_MEM.dap_data[2] == LED_ON/OFF */
      /* Here, the response is returned without processing. */
      D3PRINTF(" PI=");
      D3PRINTHEX(&EP_MEM.dap_data, 3);
    }
    else if (_cmd == 0x03) {        /* DAP_CMD_DISCONNECT */
    25aa:	93 30       	cpi	r25, 0x03	; 3
    25ac:	09 f0       	breq	.+2      	; 0x25b0 <__DATA_REGION_LENGTH__+0x5b0>
    25ae:	e0 cc       	rjmp	.-1600   	; 0x1f70 <main+0x2ca>
    25b0:	e1 cc       	rjmp	.-1598   	; 0x1f74 <main+0x2ce>
jtag_scope_general():
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:187
        /* _index == 0-5 */
        memcpy_P(&packet.in.data[0], &jtag_version[_index], _length);
        D1PRINTF(" VESRION=");
        D1PRINTHEX(&packet.in.data[0], _length);
      }
      else if (_section == 1) {     /* SET_GET_CTXT_PHYSICAL */
    25b2:	81 30       	cpi	r24, 0x01	; 1
    25b4:	91 f5       	brne	.+100    	; 0x261a <__DATA_REGION_LENGTH__+0x61a>
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:188
        if (_index == 0 || _index == 0x20) {  /* PARM3_VTARGET */
    25b6:	96 2f       	mov	r25, r22
    25b8:	9f 7d       	andi	r25, 0xDF	; 223
    25ba:	b1 f5       	brne	.+108    	; 0x2628 <__DATA_REGION_LENGTH__+0x628>
get_vdd():
/Users/askn/Collaborator/UPDI4AVR-USB/src/sys.cpp:333
   * A delay of 1250us is required for the voltage to stabilize.
   * The result is 10-bit, so multiply by 10.0 to convert to 1V * 0.0001.
   * The ADC0 peripheral is operational only during voltage measurements.
   */
  uint16_t get_vdd (void) {
    ADC0_INTFLAGS = ~0;
    25bc:	9f ef       	ldi	r25, 0xFF	; 255
    25be:	90 93 07 06 	sts	0x0607, r25	; 0x800607 <__TEXT_REGION_LENGTH__+0x7f0607>
/Users/askn/Collaborator/UPDI4AVR-USB/src/sys.cpp:334
    ADC0_SAMPLE = 0;
    25c2:	10 92 0e 06 	sts	0x060E, r1	; 0x80060e <__TEXT_REGION_LENGTH__+0x7f060e>
    25c6:	10 92 0f 06 	sts	0x060F, r1	; 0x80060f <__TEXT_REGION_LENGTH__+0x7f060f>
/Users/askn/Collaborator/UPDI4AVR-USB/src/sys.cpp:335
    ADC0_CTRLA = ADC_ENABLE_bm;
    25ca:	80 93 00 06 	sts	0x0600, r24	; 0x800600 <__TEXT_REGION_LENGTH__+0x7f0600>
/Users/askn/Collaborator/UPDI4AVR-USB/src/sys.cpp:336
    ADC0_CTRLB = ADC_PRESC_DIV4_gc;
    25ce:	80 93 01 06 	sts	0x0601, r24	; 0x800601 <__TEXT_REGION_LENGTH__+0x7f0601>
/Users/askn/Collaborator/UPDI4AVR-USB/src/sys.cpp:337
    ADC0_CTRLC = ADC_REFSEL_1V024_gc;
    25d2:	84 e0       	ldi	r24, 0x04	; 4
    25d4:	80 93 02 06 	sts	0x0602, r24	; 0x800602 <__TEXT_REGION_LENGTH__+0x7f0602>
/Users/askn/Collaborator/UPDI4AVR-USB/src/sys.cpp:338
    ADC0_CTRLE = 250; /* (SAMPDUR + 0.5) * fCLK_ADC sample duration */
    25d8:	8a ef       	ldi	r24, 0xFA	; 250
    25da:	80 93 04 06 	sts	0x0604, r24	; 0x800604 <__TEXT_REGION_LENGTH__+0x7f0604>
/Users/askn/Collaborator/UPDI4AVR-USB/src/sys.cpp:339
    ADC0_MUXPOS = ADC_MUXPOS_VDDDIV10_gc; /* ADC channel VDD * 0.1 */
    25de:	84 e4       	ldi	r24, 0x44	; 68
    25e0:	80 93 0b 06 	sts	0x060B, r24	; 0x80060b <__TEXT_REGION_LENGTH__+0x7f060b>
/Users/askn/Collaborator/UPDI4AVR-USB/src/sys.cpp:340
    ADC0_COMMAND = ADC_MODE_SINGLE_10BIT_gc | ADC_START_IMMEDIATE_gc;
    25e4:	81 e1       	ldi	r24, 0x11	; 17
    25e6:	80 93 0a 06 	sts	0x060A, r24	; 0x80060a <__TEXT_REGION_LENGTH__+0x7f060a>
/Users/askn/Collaborator/UPDI4AVR-USB/src/sys.cpp:341
    loop_until_bit_is_set(ADC0_INTFLAGS, ADC_SAMPRDY_bp);
    25ea:	80 91 07 06 	lds	r24, 0x0607	; 0x800607 <__TEXT_REGION_LENGTH__+0x7f0607>
    25ee:	81 ff       	sbrs	r24, 1
    25f0:	fc cf       	rjmp	.-8      	; 0x25ea <__DATA_REGION_LENGTH__+0x5ea>
/Users/askn/Collaborator/UPDI4AVR-USB/src/sys.cpp:342
    uint16_t _adc_reading = ADC0_SAMPLE;
    25f2:	80 91 0e 06 	lds	r24, 0x060E	; 0x80060e <__TEXT_REGION_LENGTH__+0x7f060e>
    25f6:	90 91 0f 06 	lds	r25, 0x060F	; 0x80060f <__TEXT_REGION_LENGTH__+0x7f060f>
/Users/askn/Collaborator/UPDI4AVR-USB/src/sys.cpp:343
    _adc_reading += (_adc_reading << 3) + _adc_reading;
    25fa:	9c 01       	movw	r18, r24
    25fc:	43 e0       	ldi	r20, 0x03	; 3
    25fe:	22 0f       	add	r18, r18
    2600:	33 1f       	adc	r19, r19
    2602:	4a 95       	dec	r20
    2604:	e1 f7       	brne	.-8      	; 0x25fe <__DATA_REGION_LENGTH__+0x5fe>
    2606:	88 0f       	add	r24, r24
    2608:	99 1f       	adc	r25, r25
/Users/askn/Collaborator/UPDI4AVR-USB/src/sys.cpp:344
    ADC0_CTRLA = 0;
    260a:	10 92 00 06 	sts	0x0600, r1	; 0x800600 <__TEXT_REGION_LENGTH__+0x7f0600>
/Users/askn/Collaborator/UPDI4AVR-USB/src/sys.cpp:343
    ADC0_CTRLE = 250; /* (SAMPDUR + 0.5) * fCLK_ADC sample duration */
    ADC0_MUXPOS = ADC_MUXPOS_VDDDIV10_gc; /* ADC channel VDD * 0.1 */
    ADC0_COMMAND = ADC_MODE_SINGLE_10BIT_gc | ADC_START_IMMEDIATE_gc;
    loop_until_bit_is_set(ADC0_INTFLAGS, ADC_SAMPRDY_bp);
    uint16_t _adc_reading = ADC0_SAMPLE;
    _adc_reading += (_adc_reading << 3) + _adc_reading;
    260e:	82 0f       	add	r24, r18
    2610:	93 1f       	adc	r25, r19
jtag_scope_general():
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:192
          /* Called with `-xvtarget` HAS_VTARG_READ */
          _vtarget = SYS::get_vdd();
          D1PRINTF(" VTARGET=%d\r\n", _vtarget);
          packet.in.wValue = _vtarget;
    2612:	80 93 c5 60 	sts	0x60C5, r24	; 0x8060c5 <packet+0x7>
    2616:	90 93 c6 60 	sts	0x60C6, r25	; 0x8060c6 <packet+0x8>
jtag_scope_edbg():
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:256
          /* Called with `-xvtarget_switch` HAS_VTARG_SWITCH */
          D1PRINTF(" TARGET_POWER=%02X\r\n", _jtag_vpow);
          packet.in.data[0] = _jtag_vpow;
        }
      }
      packet.in.res = 0x184;        /* RSP3_DATA */
    261a:	84 e8       	ldi	r24, 0x84	; 132
    261c:	91 e0       	ldi	r25, 0x01	; 1
    261e:	80 93 c3 60 	sts	0x60C3, r24	; 0x8060c3 <packet+0x5>
    2622:	90 93 c4 60 	sts	0x60C4, r25	; 0x8060c4 <packet+0x6>
    2626:	6b c0       	rjmp	.+214    	; 0x26fe <__DATA_REGION_LENGTH__+0x6fe>
jtag_scope_general():
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:197
          packet.in.wValue = _vtarget;
        }
        else {                      /* PARM3_ANALOG_XXXX */
          /* Called with PowerDebugger HAS_VTARG_ADJ */
          D1PRINTF(" PHYSICAL=%02X:%02X\r\n", _index, _length);
          memcpy_P(&packet.in.data[0], &jtag_physical[_index & 7], _length);
    2628:	40 2f       	mov	r20, r16
    262a:	50 e0       	ldi	r21, 0x00	; 0
    262c:	67 70       	andi	r22, 0x07	; 7
    262e:	70 e0       	ldi	r23, 0x00	; 0
    2630:	6c 53       	subi	r22, 0x3C	; 60
    2632:	7e 4f       	sbci	r23, 0xFE	; 254
    2634:	5b cf       	rjmp	.-330    	; 0x24ec <__DATA_REGION_LENGTH__+0x4ec>
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:203
        }
      }
      packet.in.res = 0x184;        /* RSP3_DATA */
      _rspsize = _length + 1;
    }
    else if (_cmd == 0x10) {        /* CMD3_SIGN_ON */
    2636:	80 31       	cpi	r24, 0x10	; 16
    2638:	49 f4       	brne	.+18     	; 0x264c <__DATA_REGION_LENGTH__+0x64c>
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:207
      D1PRINTF(" GEN_SIGN_ON\r\n");
      _jtag_hvctrl = 0;
      _jtag_unlock = 0;
      _jtag_arch = 0;
    263a:	10 92 88 60 	sts	0x6088, r1	; 0x806088 <_jtag_arch>
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:213
      _tpi_setmode = 0;
      packet.in.res = 0x80;         /* RSP3_OK */
    }
    else if (_cmd == 0x11) {        /* CMD3_SIGN_OFF */
      D1PRINTF(" GEN_SIGN_OFF\r\n");
      packet.in.res = 0x80;         /* RSP3_OK */
    263e:	80 e8       	ldi	r24, 0x80	; 128
    2640:	90 e0       	ldi	r25, 0x00	; 0
jtag_scope_avr_core():
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:376
    else if (_jtag_arch == 0x01) _rspsize = DWIRE::jtag_scope_tiny();   /* dWire? */
    else if (_jtag_arch == 0x02) _rspsize = MEGA::jtag_scope_mega();    /* MEGA */
    else if (_jtag_arch == 0x03) _rspsize = XMEGA::jtag_scope_xmega();  /* XMEGA */
  #endif
    else if (_jtag_arch == 0x05) _rspsize = UPDI::jtag_scope_updi();    /* UPDI support */
    else packet.in.res = 0xA0;      /* RSP3_FAILED */
    2642:	80 93 c3 60 	sts	0x60C3, r24	; 0x8060c3 <packet+0x5>
    2646:	90 93 c4 60 	sts	0x60C4, r25	; 0x8060c4 <packet+0x6>
    264a:	02 c0       	rjmp	.+4      	; 0x2650 <__DATA_REGION_LENGTH__+0x650>
jtag_scope_general():
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:211
      _jtag_unlock = 0;
      _jtag_arch = 0;
      _tpi_setmode = 0;
      packet.in.res = 0x80;         /* RSP3_OK */
    }
    else if (_cmd == 0x11) {        /* CMD3_SIGN_OFF */
    264c:	81 31       	cpi	r24, 0x11	; 17
    264e:	b9 f3       	breq	.-18     	; 0x263e <__DATA_REGION_LENGTH__+0x63e>
main():
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:174
    D2PRINTHEX(&packet.in.token, _packet_length);
  }

  /*** Only a subset of JTAGICE3 commands are implemented. ***/
  size_t jtag_scope_general (void) {
    size_t  _rspsize = 0;
    2650:	10 e0       	ldi	r17, 0x00	; 0
    2652:	00 e0       	ldi	r16, 0x00	; 0
    2654:	f7 c0       	rjmp	.+494    	; 0x2844 <__DATA_REGION_LENGTH__+0x844>
jtag_scope_branch():
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:396
  #ifdef _Not_yet_implemented_stub_
    else if (_scope == 0x00) _rspsize = jtag_scope_info();          /* SCOPE_INFO */ /* Not used with EDBG/CMSIS-DAP type */
    else if (_scope == 0x11) _rspsize = ISP::jtag_scope_isp();      /* SCOPE_AVR_ISP */
    else if (_scope == 0x13) _rspsize = AVR32::jtag_scope_avr32();  /* SCOPE_AVR32 */
  #endif
    else if (_scope == 0x12) _rspsize = jtag_scope_avr_core();      /* SCOPE_AVR */
    2656:	82 31       	cpi	r24, 0x12	; 18
    2658:	09 f0       	breq	.+2      	; 0x265c <__DATA_REGION_LENGTH__+0x65c>
    265a:	37 c1       	rjmp	.+622    	; 0x28ca <__DATA_REGION_LENGTH__+0x8ca>
jtag_scope_avr_core():
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:265
  }

  /* The AVR scope is further branched by the ARCH designator. */
  size_t jtag_scope_avr_core (void) {
    size_t  _rspsize = 0;
    uint8_t _cmd     = packet.out.cmd;
    265c:	10 91 c3 60 	lds	r17, 0x60C3	; 0x8060c3 <packet+0x5>
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:266
    uint8_t _section = packet.out.section;
    2660:	80 91 c5 60 	lds	r24, 0x60C5	; 0x8060c5 <packet+0x7>
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:267
    uint8_t _index   = packet.out.index;
    2664:	90 91 c6 60 	lds	r25, 0x60C6	; 0x8060c6 <packet+0x8>
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:268
    uint8_t _length  = packet.out.length;
    2668:	40 91 c7 60 	lds	r20, 0x60C7	; 0x8060c7 <packet+0x9>
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:269
    if (_cmd == 0x01) {             /* CMD3_SET_PARAMETER */
    266c:	11 30       	cpi	r17, 0x01	; 1
    266e:	c1 f5       	brne	.+112    	; 0x26e0 <__DATA_REGION_LENGTH__+0x6e0>
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:270
      uint16_t _data = packet.out.wValue;
    2670:	20 91 c8 60 	lds	r18, 0x60C8	; 0x8060c8 <packet+0xa>
    2674:	30 91 c9 60 	lds	r19, 0x60C9	; 0x8060c9 <packet+0xb>
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:272
      D1PRINTF(" AVR_SET_PARAM=%02X:%02X:%02X:%02X\r\n", _section, _index, _length, _data);
      if (_section == 0) {          /* SET_GET_CTXT_CONFIG */
    2678:	81 11       	cpse	r24, r1
    267a:	05 c0       	rjmp	.+10     	; 0x2686 <__DATA_REGION_LENGTH__+0x686>
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:273
        if (_index == 0) {          /* PARM3_ARCH */
    267c:	91 11       	cpse	r25, r1
    267e:	df cf       	rjmp	.-66     	; 0x263e <__DATA_REGION_LENGTH__+0x63e>
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:275
          D1PRINTF(" ARCH=%02X\r\n", _data);
          _jtag_arch = _data;       /* 5:PARM3_ARCH_UPDI */
    2680:	20 93 88 60 	sts	0x6088, r18	; 0x806088 <_jtag_arch>
    2684:	dc cf       	rjmp	.-72     	; 0x263e <__DATA_REGION_LENGTH__+0x63e>
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:282
        else if (_index == 1) {     /* PARM3_SESS_PURPOSE */
          D1PRINTF(" SESS_PURPOSE=%02X\r\n", _data);
          _jtag_sess = _data;       /* */
        }
      }
      else if (_section == 1) {     /* SET_GET_CTXT_PHYSICAL */
    2686:	81 30       	cpi	r24, 0x01	; 1
    2688:	f1 f4       	brne	.+60     	; 0x26c6 <__DATA_REGION_LENGTH__+0x6c6>
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:283
        if (_index == 0) {          /* PARM3_CONNECTION */
    268a:	91 11       	cpse	r25, r1
    268c:	03 c0       	rjmp	.+6      	; 0x2694 <__DATA_REGION_LENGTH__+0x694>
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:285
          D1PRINTF(" CONNECTION=%02X\r\n", _data);
          _jtag_conn = _data;       /* 8:PARM3_CONN_UPDI */
    268e:	20 93 87 60 	sts	0x6087, r18	; 0x806087 <_jtag_conn>
    2692:	d5 cf       	rjmp	.-86     	; 0x263e <__DATA_REGION_LENGTH__+0x63e>
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:287
        }
        else if (_index == 0x31) {  /* PARM3_CLK_XMEGA_PDI */
    2694:	91 33       	cpi	r25, 0x31	; 49
    2696:	99 f6       	brne	.-90     	; 0x263e <__DATA_REGION_LENGTH__+0x63e>
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:288
          _xclk = _data;
    2698:	20 93 18 60 	sts	0x6018, r18	; 0x806018 <_xclk>
    269c:	30 93 19 60 	sts	0x6019, r19	; 0x806019 <_xclk+0x1>
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:290
          D1PRINTF(" XCLK=%d\r\n", _xclk);
          if (_jtag_arch == 5) {
    26a0:	80 91 88 60 	lds	r24, 0x6088	; 0x806088 <_jtag_arch>
    26a4:	85 30       	cpi	r24, 0x05	; 5
    26a6:	59 f6       	brne	.-106    	; 0x263e <__DATA_REGION_LENGTH__+0x63e>
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:293
            /* Called with `-B xclk[unit]`. */
            /* XCLK Range Limitation : LSB=kHz */
            if (_xclk > 240) _xclk = 240;
    26a8:	80 ef       	ldi	r24, 0xF0	; 240
    26aa:	90 e0       	ldi	r25, 0x00	; 0
    26ac:	21 3f       	cpi	r18, 0xF1	; 241
    26ae:	31 05       	cpc	r19, r1
    26b0:	28 f4       	brcc	.+10     	; 0x26bc <__DATA_REGION_LENGTH__+0x6bc>
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:294
            else if (_xclk < 40) _xclk = 40;
    26b2:	28 32       	cpi	r18, 0x28	; 40
    26b4:	31 05       	cpc	r19, r1
    26b6:	18 f6       	brcc	.-122    	; 0x263e <__DATA_REGION_LENGTH__+0x63e>
    26b8:	88 e2       	ldi	r24, 0x28	; 40
    26ba:	90 e0       	ldi	r25, 0x00	; 0
    26bc:	80 93 18 60 	sts	0x6018, r24	; 0x806018 <_xclk>
    26c0:	90 93 19 60 	sts	0x6019, r25	; 0x806019 <_xclk+0x1>
    26c4:	bc cf       	rjmp	.-136    	; 0x263e <__DATA_REGION_LENGTH__+0x63e>
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:301
            if (_xclk != _data) D1PRINTF(" FIX_CLK=%d\r\n", _xclk);
  #endif
          }
        }
      }
      else if (_section == 2) {     /* SET_GET_CTXT_DEVICE */
    26c6:	82 30       	cpi	r24, 0x02	; 2
    26c8:	09 f0       	breq	.+2      	; 0x26cc <__DATA_REGION_LENGTH__+0x6cc>
    26ca:	b9 cf       	rjmp	.-142    	; 0x263e <__DATA_REGION_LENGTH__+0x63e>
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:302
        if (_index == 0) {          /* PARM3_DEVICEDESC */
    26cc:	91 11       	cpse	r25, r1
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:304
          D1PRINTF(" DEVICEDESC=%X\r\n", _length);
          memcpy(&Device_Descriptor, &packet.out.setData[0], _length & 63);
    26ce:	b7 cf       	rjmp	.-146    	; 0x263e <__DATA_REGION_LENGTH__+0x63e>
    26d0:	4f 73       	andi	r20, 0x3F	; 63
    26d2:	50 e0       	ldi	r21, 0x00	; 0
    26d4:	68 ec       	ldi	r22, 0xC8	; 200
    26d6:	70 e6       	ldi	r23, 0x60	; 96
    26d8:	8e e8       	ldi	r24, 0x8E	; 142
    26da:	90 e6       	ldi	r25, 0x60	; 96
    26dc:	54 d2       	rcall	.+1192   	; 0x2b86 <memcpy>
    26de:	af cf       	rjmp	.-162    	; 0x263e <__DATA_REGION_LENGTH__+0x63e>
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:347
          _jtag_unlock = _data;     /* 1:ENABLE */
        }
      }
      packet.in.res = 0x80;         /* RSP3_OK */
    }
    else if (_cmd == 0x02) {        /* CMD3_GET_PARAMETER */
    26e0:	12 30       	cpi	r17, 0x02	; 2
    26e2:	19 f5       	brne	.+70     	; 0x272a <__DATA_REGION_LENGTH__+0x72a>
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:349
      D1PRINTF(" AVR_GET_PARAMETER=%02X:%02X:%02X\r\n", _section, _index, _length);
      if (_section == 0) {          /* SET_GET_CTXT_CONFIG */
    26e4:	81 11       	cpse	r24, r1
    26e6:	0d c0       	rjmp	.+26     	; 0x2702 <__DATA_REGION_LENGTH__+0x702>
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:352
        if (_index == 0) {          /* PARM3_ARCH */
          D1PRINTF(" ARCH=%02X\r\n", _jtag_arch);
          packet.in.data[0] = _jtag_arch;
    26e8:	80 91 88 60 	lds	r24, 0x6088	; 0x806088 <_jtag_arch>
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:350
      packet.in.res = 0x80;         /* RSP3_OK */
    }
    else if (_cmd == 0x02) {        /* CMD3_GET_PARAMETER */
      D1PRINTF(" AVR_GET_PARAMETER=%02X:%02X:%02X\r\n", _section, _index, _length);
      if (_section == 0) {          /* SET_GET_CTXT_CONFIG */
        if (_index == 0) {          /* PARM3_ARCH */
    26ec:	99 23       	and	r25, r25
    26ee:	79 f0       	breq	.+30     	; 0x270e <__DATA_REGION_LENGTH__+0x70e>
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:367
          /* `-B <num>khz` : "khz" units are required. */
          D1PRINTF(" XCLK=%d\r\n", _xclk);
          packet.in.wValue = _xclk;
        }
      }
      packet.in.res = 0x184;        /* RSP3_DATA */
    26f0:	84 e8       	ldi	r24, 0x84	; 132
    26f2:	91 e0       	ldi	r25, 0x01	; 1
    26f4:	80 93 c3 60 	sts	0x60C3, r24	; 0x8060c3 <packet+0x5>
    26f8:	90 93 c4 60 	sts	0x60C4, r25	; 0x8060c4 <packet+0x6>
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:368
      _rspsize = _length + 1;
    26fc:	04 2f       	mov	r16, r20
jtag_scope_edbg():
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:257
          D1PRINTF(" TARGET_POWER=%02X\r\n", _jtag_vpow);
          packet.in.data[0] = _jtag_vpow;
        }
      }
      packet.in.res = 0x184;        /* RSP3_DATA */
      _rspsize = _length + 1;
    26fe:	10 e0       	ldi	r17, 0x00	; 0
    2700:	50 c1       	rjmp	.+672    	; 0x29a2 <__DATA_REGION_LENGTH__+0x9a2>
jtag_scope_avr_core():
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:355
        if (_index == 0) {          /* PARM3_ARCH */
          D1PRINTF(" ARCH=%02X\r\n", _jtag_arch);
          packet.in.data[0] = _jtag_arch;
        }
      }
      else if (_section == 1) {     /* SET_GET_CTXT_PHYSICAL */
    2702:	81 30       	cpi	r24, 0x01	; 1
    2704:	a9 f7       	brne	.-22     	; 0x26f0 <__DATA_REGION_LENGTH__+0x6f0>
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:356
        if (_index == 0) {          /* PARM3_CONNECTION */
    2706:	91 11       	cpse	r25, r1
    2708:	05 c0       	rjmp	.+10     	; 0x2714 <__DATA_REGION_LENGTH__+0x714>
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:359
          /* This is a stub that is called but not used. */
          D1PRINTF(" CONNECTION=%02X\r\n", _jtag_conn);
          packet.in.data[0] = _jtag_conn;
    270a:	80 91 87 60 	lds	r24, 0x6087	; 0x806087 <_jtag_conn>
    270e:	80 93 c5 60 	sts	0x60C5, r24	; 0x8060c5 <packet+0x7>
    2712:	ee cf       	rjmp	.-36     	; 0x26f0 <__DATA_REGION_LENGTH__+0x6f0>
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:361
        }
        else if (_index == 0x31) {  /* PARM3_CLK_XMEGA_PDI */
    2714:	91 33       	cpi	r25, 0x31	; 49
    2716:	61 f7       	brne	.-40     	; 0x26f0 <__DATA_REGION_LENGTH__+0x6f0>
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:364
          /* `-B <num>khz` : "khz" units are required. */
          D1PRINTF(" XCLK=%d\r\n", _xclk);
          packet.in.wValue = _xclk;
    2718:	80 91 18 60 	lds	r24, 0x6018	; 0x806018 <_xclk>
    271c:	90 91 19 60 	lds	r25, 0x6019	; 0x806019 <_xclk+0x1>
    2720:	80 93 c5 60 	sts	0x60C5, r24	; 0x8060c5 <packet+0x7>
    2724:	90 93 c6 60 	sts	0x60C6, r25	; 0x8060c6 <packet+0x8>
    2728:	e3 cf       	rjmp	.-58     	; 0x26f0 <__DATA_REGION_LENGTH__+0x6f0>
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:375
  #ifdef _Not_yet_implemented_stub_
    else if (_jtag_arch == 0x01) _rspsize = DWIRE::jtag_scope_tiny();   /* dWire? */
    else if (_jtag_arch == 0x02) _rspsize = MEGA::jtag_scope_mega();    /* MEGA */
    else if (_jtag_arch == 0x03) _rspsize = XMEGA::jtag_scope_xmega();  /* XMEGA */
  #endif
    else if (_jtag_arch == 0x05) _rspsize = UPDI::jtag_scope_updi();    /* UPDI support */
    272a:	90 91 88 60 	lds	r25, 0x6088	; 0x806088 <_jtag_arch>
    272e:	95 30       	cpi	r25, 0x05	; 5
    2730:	09 f0       	breq	.+2      	; 0x2734 <__DATA_REGION_LENGTH__+0x734>
    2732:	c8 c0       	rjmp	.+400    	; 0x28c4 <__DATA_REGION_LENGTH__+0x8c4>
jtag_scope_updi():
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:412

  /* ARCH=UPDI scope Provides functionality. */
  size_t jtag_scope_updi (void) {
    size_t _rspsize = 0;
    uint8_t _cmd = packet.out.cmd;
    if (_cmd == 0x10) {             /* CMD3_SIGN_ON */
    2734:	10 31       	cpi	r17, 0x10	; 16
    2736:	51 f5       	brne	.+84     	; 0x278c <__DATA_REGION_LENGTH__+0x78c>
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:414
      D1PRINTF(" UPDI_SIGN_ON=EXT:%02X\r\n", packet.out.bMType);
      USART::setup();
    2738:	0e 94 ef 09 	call	0x13de	; 0x13de <USART::setup()>
change_updi():
/Users/askn/Collaborator/UPDI4AVR-USB/src/usart.cpp:79
  #endif
  }

  /*** Sets up single-wire asynchronous mode for UPDI operation. ***/
  void change_updi (void) {
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    273c:	0f b7       	in	r16, 0x3f	; 63
__iCliRetVal():
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/tools/avr-gcc/7.3.0-avr8-gnu-toolchain/avr/include/util/atomic.h:50
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    273e:	f8 94       	cli
change_updi():
/Users/askn/Collaborator/UPDI4AVR-USB/src/usart.cpp:81
      D1PRINTF(" UART=UPDI\r\n");
      PORTMUX_USARTROUTEA = PORTMUX_USART_UPDI;
    2740:	10 93 e2 05 	sts	0x05E2, r17	; 0x8005e2 <__TEXT_REGION_LENGTH__+0x7f05e2>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usart.cpp:82
      USART0_STATUS = USART_DREIF_bm;
    2744:	80 e2       	ldi	r24, 0x20	; 32
    2746:	80 93 04 08 	sts	0x0804, r24	; 0x800804 <__TEXT_REGION_LENGTH__+0x7f0804>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usart.cpp:83
      USART0_BAUD  = calk_baud_khz(_xclk);
    274a:	80 91 18 60 	lds	r24, 0x6018	; 0x806018 <_xclk>
    274e:	90 91 19 60 	lds	r25, 0x6019	; 0x806019 <_xclk+0x1>
    2752:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <USART::calk_baud_khz(unsigned int)>
    2756:	80 93 08 08 	sts	0x0808, r24	; 0x800808 <__TEXT_REGION_LENGTH__+0x7f0808>
    275a:	90 93 09 08 	sts	0x0809, r25	; 0x800809 <__TEXT_REGION_LENGTH__+0x7f0809>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usart.cpp:84
      USART0_CTRLC = USART_CHSIZE_8BIT_gc | USART_PMODE_EVEN_gc | USART_SBMODE_2BIT_gc;
    275e:	8b e2       	ldi	r24, 0x2B	; 43
    2760:	80 93 07 08 	sts	0x0807, r24	; 0x800807 <__TEXT_REGION_LENGTH__+0x7f0807>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usart.cpp:87
      /* The RS485_INT:_BV(1) attribute is undocumented but works fine.     */
      /* Without it, an additional delay is required before sending a byte. */
      USART0_CTRLA = USART_LBME_bm | USART_RS485_INT_gc;
    2764:	8a e0       	ldi	r24, 0x0A	; 10
    2766:	80 93 05 08 	sts	0x0805, r24	; 0x800805 <__TEXT_REGION_LENGTH__+0x7f0805>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usart.cpp:88
      USART0_CTRLB = USART_RXEN_bm | USART_TXEN_bm | USART_ODME_bm;
    276a:	88 ec       	ldi	r24, 0xC8	; 200
    276c:	80 93 06 08 	sts	0x0806, r24	; 0x800806 <__TEXT_REGION_LENGTH__+0x7f0806>
__iRestore():
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:416
      USART::change_updi();
      _rspsize = Timeout::command(&connect);
    2770:	0f bf       	out	0x3f, r16	; 63
jtag_scope_updi():
    2772:	87 e3       	ldi	r24, 0x37	; 55
    2774:	9b e0       	ldi	r25, 0x0B	; 11
    2776:	45 da       	rcall	.-2934   	; 0x1c02 <Timeout::command(unsigned int (*)(), unsigned int) [clone .constprop.8]>
    2778:	8c 01       	movw	r16, r24
main():
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:418
      /* If it fails here, it is expected to try again, giving it a chance at HV control. */
      packet.in.res = _rspsize ? 0x84 : 0xA0; /* RSP3_DATA : RSP3_FAILED */
    277a:	84 e8       	ldi	r24, 0x84	; 132
    277c:	90 e0       	ldi	r25, 0x00	; 0
jtag_scope_updi():
    277e:	01 15       	cp	r16, r1
    2780:	11 05       	cpc	r17, r1
    2782:	09 f0       	breq	.+2      	; 0x2786 <__DATA_REGION_LENGTH__+0x786>
    2784:	5b c0       	rjmp	.+182    	; 0x283c <__DATA_REGION_LENGTH__+0x83c>
main():
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:471
    else if (_cmd == 0x23) {        /* CMD3_WRITE_MEMORY */
      D1PRINTF(" UPDI_WRITE=%02X:%06lX:%04X\r\n", packet.out.bMType,
        packet.out.dwAddr, (size_t)packet.out.dwLength);
      _rspsize = Timeout::command(Command_Table.write_memory);
    }
    packet.in.res = _rspsize ? 0x80 : 0xA0;   /* RSP3_OK : RSP3_FAILED */
    2786:	80 ea       	ldi	r24, 0xA0	; 160
    2788:	90 e0       	ldi	r25, 0x00	; 0
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:421
      _rspsize = Timeout::command(&connect);
      /* If it fails here, it is expected to try again, giving it a chance at HV control. */
      packet.in.res = _rspsize ? 0x84 : 0xA0; /* RSP3_DATA : RSP3_FAILED */
      return _rspsize;
    }
    else if (_cmd == 0x11) {        /* CMD3_SIGN_OFF */
    278a:	58 c0       	rjmp	.+176    	; 0x283c <__DATA_REGION_LENGTH__+0x83c>
jtag_scope_updi():
    278c:	11 31       	cpi	r17, 0x11	; 17
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:424
      D1PRINTF(" UPDI_SIGN_OFF\r\n");
      /* If UPDI control has failed, RSP3_OK is always returned. */
      _rspsize = bit_is_set(PGCONF, PGCONF_UPDI_bp) ? Timeout::command(&disconnect) : 1;
    278e:	99 f4       	brne	.+38     	; 0x27b6 <__DATA_REGION_LENGTH__+0x7b6>
    2790:	e8 9b       	sbis	0x1d, 0	; 29
    2792:	0e c0       	rjmp	.+28     	; 0x27b0 <__DATA_REGION_LENGTH__+0x7b0>
    2794:	87 e2       	ldi	r24, 0x27	; 39
    2796:	9b e0       	ldi	r25, 0x0B	; 11
    2798:	34 da       	rcall	.-2968   	; 0x1c02 <Timeout::command(unsigned int (*)(), unsigned int) [clone .constprop.8]>
    279a:	8c 01       	movw	r16, r24
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:425
      USART::setup();
    279c:	0e 94 ef 09 	call	0x13de	; 0x13de <USART::setup()>
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:426
      USART::change_vcp();
    27a0:	0e 94 b4 05 	call	0xb68	; 0xb68 <USART::change_vcp()>
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:471
    else if (_cmd == 0x23) {        /* CMD3_WRITE_MEMORY */
      D1PRINTF(" UPDI_WRITE=%02X:%06lX:%04X\r\n", packet.out.bMType,
        packet.out.dwAddr, (size_t)packet.out.dwLength);
      _rspsize = Timeout::command(Command_Table.write_memory);
    }
    packet.in.res = _rspsize ? 0x80 : 0xA0;   /* RSP3_OK : RSP3_FAILED */
    27a4:	01 15       	cp	r16, r1
    27a6:	11 05       	cpc	r17, r1
    27a8:	71 f3       	breq	.-36     	; 0x2786 <__DATA_REGION_LENGTH__+0x786>
main():
    27aa:	80 e8       	ldi	r24, 0x80	; 128
    27ac:	90 e0       	ldi	r25, 0x00	; 0
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:424
      return _rspsize;
    }
    else if (_cmd == 0x11) {        /* CMD3_SIGN_OFF */
      D1PRINTF(" UPDI_SIGN_OFF\r\n");
      /* If UPDI control has failed, RSP3_OK is always returned. */
      _rspsize = bit_is_set(PGCONF, PGCONF_UPDI_bp) ? Timeout::command(&disconnect) : 1;
    27ae:	46 c0       	rjmp	.+140    	; 0x283c <__DATA_REGION_LENGTH__+0x83c>
    27b0:	01 e0       	ldi	r16, 0x01	; 1
    27b2:	10 e0       	ldi	r17, 0x00	; 0
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:428
      USART::setup();
      USART::change_vcp();
    }
    else if (_cmd == 0x15) {        /* CMD3_ENTER_PROGMODE */
    27b4:	f3 cf       	rjmp	.-26     	; 0x279c <__DATA_REGION_LENGTH__+0x79c>
jtag_scope_updi():
    27b6:	15 31       	cpi	r17, 0x15	; 21
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:432
      D1PRINTF(" UPDI_ENTER_PROG\r\n");
      /* On failure, RSP3_OK is returned if a UPDI connection is available. */
      /* Locked devices are given the opportunity to write to USERROW and erase the chip. */
      _rspsize = Timeout::command(&enter_progmode) || bit_is_set(PGCONF, PGCONF_UPDI_bp);
    27b8:	49 f4       	brne	.+18     	; 0x27cc <__DATA_REGION_LENGTH__+0x7cc>
    27ba:	8c e0       	ldi	r24, 0x0C	; 12
    27bc:	9a e0       	ldi	r25, 0x0A	; 10
    27be:	21 da       	rcall	.-3006   	; 0x1c02 <Timeout::command(unsigned int (*)(), unsigned int) [clone .constprop.8]>
    27c0:	89 2b       	or	r24, r25
    27c2:	11 f4       	brne	.+4      	; 0x27c8 <__DATA_REGION_LENGTH__+0x7c8>
    27c4:	0d b3       	in	r16, 0x1d	; 29
    27c6:	01 70       	andi	r16, 0x01	; 1
    27c8:	10 e0       	ldi	r17, 0x00	; 0
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:434
    }
    else if (_cmd == 0x16) {        /* CMD3_LEAVE_PROGMODE */
    27ca:	ec cf       	rjmp	.-40     	; 0x27a4 <__DATA_REGION_LENGTH__+0x7a4>
    27cc:	16 31       	cpi	r17, 0x16	; 22
    27ce:	09 f4       	brne	.+2      	; 0x27d2 <__DATA_REGION_LENGTH__+0x7d2>
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:440
      D1PRINTF(" UPDI_LEAVE_PROG\r\n");
      /* There is nothing to do. */
      /* The actual termination process is delayed until CMD3_SIGN_OFF. */
      _rspsize = 1;
    }
    else if (_cmd == 0x20) {        /* CMD3_ERASE_MEMORY */
    27d0:	73 c0       	rjmp	.+230    	; 0x28b8 <__DATA_REGION_LENGTH__+0x8b8>
    27d2:	10 32       	cpi	r17, 0x20	; 32
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:443
      D1PRINTF(" UPDI_ERASE=%02X:%06lX\r\n",
        packet.out.bEType, packet.out.dwPageAddr);
      _rspsize = Timeout::command(Command_Table.erase_memory);
    27d4:	39 f4       	brne	.+14     	; 0x27e4 <__DATA_REGION_LENGTH__+0x7e4>
    27d6:	80 91 02 63 	lds	r24, 0x6302	; 0x806302 <Command_Table+0x4>
    27da:	90 91 03 63 	lds	r25, 0x6303	; 0x806303 <Command_Table+0x5>
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:469
      return _rspsize;
    }
    else if (_cmd == 0x23) {        /* CMD3_WRITE_MEMORY */
      D1PRINTF(" UPDI_WRITE=%02X:%06lX:%04X\r\n", packet.out.bMType,
        packet.out.dwAddr, (size_t)packet.out.dwLength);
      _rspsize = Timeout::command(Command_Table.write_memory);
    27de:	11 da       	rcall	.-3038   	; 0x1c02 <Timeout::command(unsigned int (*)(), unsigned int) [clone .constprop.8]>
    27e0:	8c 01       	movw	r16, r24
    27e2:	e0 cf       	rjmp	.-64     	; 0x27a4 <__DATA_REGION_LENGTH__+0x7a4>
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:445
    else if (_cmd == 0x20) {        /* CMD3_ERASE_MEMORY */
      D1PRINTF(" UPDI_ERASE=%02X:%06lX\r\n",
        packet.out.bEType, packet.out.dwPageAddr);
      _rspsize = Timeout::command(Command_Table.erase_memory);
    }
    else if (bit_is_clear(PGCONF, PGCONF_UPDI_bp)) { /* empty */ }
    27e4:	e8 9b       	sbis	0x1d, 0	; 29
    27e6:	6b c0       	rjmp	.+214    	; 0x28be <__DATA_REGION_LENGTH__+0x8be>
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:446
    else if (_cmd == 0x21) {        /* CMD3_READ_MEMORY */
    27e8:	11 32       	cpi	r17, 0x21	; 33
    27ea:	09 f0       	breq	.+2      	; 0x27ee <__DATA_REGION_LENGTH__+0x7ee>
    27ec:	5e c0       	rjmp	.+188    	; 0x28aa <__DATA_REGION_LENGTH__+0x8aa>
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:450
      D1PRINTF(" UPDI_READ=%02X:%06lX:%04X\r\n", packet.out.bMType,
        packet.out.dwAddr, (size_t)packet.out.dwLength);
      uint8_t m_type = packet.out.bMType;
      size_t _wLength = packet.out.dwLength;
    27ee:	00 91 ca 60 	lds	r16, 0x60CA	; 0x8060ca <packet+0xc>
    27f2:	10 91 cb 60 	lds	r17, 0x60CB	; 0x8060cb <packet+0xd>
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:451
      if (m_type == 0xD3) {         /* MTYPE_SIB */
    27f6:	83 3d       	cpi	r24, 0xD3	; 211
    27f8:	99 f4       	brne	.+38     	; 0x2820 <__DATA_REGION_LENGTH__+0x820>
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:453
        /* The SIB request occurs before ENTER_PROGMODE. */
        memcpy(&packet.in.data[(uint8_t)packet.out.dwAddr & 31], &_sib, ((_wLength - 1) & 31) + 1);
    27fa:	80 91 c6 60 	lds	r24, 0x60C6	; 0x8060c6 <packet+0x8>
    27fe:	8f 71       	andi	r24, 0x1F	; 31
    2800:	90 e0       	ldi	r25, 0x00	; 0
    2802:	a8 01       	movw	r20, r16
    2804:	41 50       	subi	r20, 0x01	; 1
    2806:	51 09       	sbc	r21, r1
    2808:	4f 71       	andi	r20, 0x1F	; 31
    280a:	55 27       	eor	r21, r21
    280c:	4f 5f       	subi	r20, 0xFF	; 255
    280e:	5f 4f       	sbci	r21, 0xFF	; 255
    2810:	6e ed       	ldi	r22, 0xDE	; 222
    2812:	72 e6       	ldi	r23, 0x62	; 98
    2814:	8b 53       	subi	r24, 0x3B	; 59
    2816:	9f 49       	sbci	r25, 0x9F	; 159
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:317
      packet.in.data[0] = 0x1E;
      packet.in.data[1] = _sib[0] == ' ' ? 'A' : _sib[0];
      packet.in.data[2] = _sib[10];
    }
    else memset(&packet.in.data[0], 0xFF, _wLength);
    return _wLength + 1;
    2818:	b6 d1       	rcall	.+876    	; 0x2b86 <memcpy>
read_dummy():
    281a:	0f 5f       	subi	r16, 0xFF	; 255
    281c:	1f 4f       	sbci	r17, 0xFF	; 255
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:456
      if (m_type == 0xD3) {         /* MTYPE_SIB */
        /* The SIB request occurs before ENTER_PROGMODE. */
        memcpy(&packet.in.data[(uint8_t)packet.out.dwAddr & 31], &_sib, ((_wLength - 1) & 31) + 1);
        _rspsize = _wLength + 1;
      }
      else if (bit_is_set(PGCONF, PGCONF_PROG_bp)) {
    281e:	08 c0       	rjmp	.+16     	; 0x2830 <__DATA_REGION_LENGTH__+0x830>
jtag_scope_updi():
    2820:	e9 9b       	sbis	0x1d, 1	; 29
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:457
        _rspsize = Timeout::command(Command_Table.read_memory);
    2822:	29 c0       	rjmp	.+82     	; 0x2876 <__DATA_REGION_LENGTH__+0x876>
    2824:	80 91 00 63 	lds	r24, 0x6300	; 0x806300 <Command_Table+0x2>
    2828:	90 91 01 63 	lds	r25, 0x6301	; 0x806301 <Command_Table+0x3>
    282c:	ea d9       	rcall	.-3116   	; 0x1c02 <Timeout::command(unsigned int (*)(), unsigned int) [clone .constprop.8]>
    282e:	8c 01       	movw	r16, r24
main():
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:463
      }
      /* If not in PROGMODE, respond with a dummy. */
      /* A dummy SIG will be returned for locked devices. */
      /* This will prevent AVRDUDE from displaying annoying errors. */
      else _rspsize = read_dummy();
      packet.in.res = _rspsize ? 0x184 : 0xA0;
    2830:	84 e8       	ldi	r24, 0x84	; 132
    2832:	91 e0       	ldi	r25, 0x01	; 1
jtag_scope_updi():
    2834:	01 15       	cp	r16, r1
    2836:	11 05       	cpc	r17, r1
    2838:	09 f4       	brne	.+2      	; 0x283c <__DATA_REGION_LENGTH__+0x83c>
    283a:	a5 cf       	rjmp	.-182    	; 0x2786 <__DATA_REGION_LENGTH__+0x786>
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:471
    else if (_cmd == 0x23) {        /* CMD3_WRITE_MEMORY */
      D1PRINTF(" UPDI_WRITE=%02X:%06lX:%04X\r\n", packet.out.bMType,
        packet.out.dwAddr, (size_t)packet.out.dwLength);
      _rspsize = Timeout::command(Command_Table.write_memory);
    }
    packet.in.res = _rspsize ? 0x80 : 0xA0;   /* RSP3_OK : RSP3_FAILED */
    283c:	80 93 c3 60 	sts	0x60C3, r24	; 0x8060c3 <packet+0x5>
    2840:	90 93 c4 60 	sts	0x60C4, r25	; 0x8060c4 <packet+0x6>
complete_jtag_transactions():
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:163
    return _result; /* True if an EDBG Payload is received. */
  }

  /*** Prepare for EDBG payload request from device to host ***/
  void complete_jtag_transactions (size_t _length) {
    _packet_length = _length + 6; /* TOKEN + SEQ[2] + EOT + PAD */
    2844:	98 01       	movw	r18, r16
    2846:	2a 5f       	subi	r18, 0xFA	; 250
    2848:	3f 4f       	sbci	r19, 0xFF	; 255
    284a:	20 93 8b 60 	sts	0x608B, r18	; 0x80608b <_packet_length>
    284e:	30 93 8c 60 	sts	0x608C, r19	; 0x80608c <_packet_length+0x1>
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:164
    _packet_fragment = 0;
    2852:	10 92 8a 60 	sts	0x608A, r1	; 0x80608a <_packet_fragment>
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:165
    _packet_endfrag = (_length + 65) / 60;  /* 1 to 15 */
    2856:	c8 01       	movw	r24, r16
    2858:	8f 5b       	subi	r24, 0xBF	; 191
    285a:	9f 4f       	sbci	r25, 0xFF	; 255
    285c:	6c e3       	ldi	r22, 0x3C	; 60
    285e:	70 e0       	ldi	r23, 0x00	; 0
    2860:	33 d1       	rcall	.+614    	; 0x2ac8 <__udivmodhi4>
    2862:	60 93 89 60 	sts	0x6089, r22	; 0x806089 <_packet_endfrag>
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:166
    packet.in.token = 0x0E;                 /* TOKEN */
    2866:	8e e0       	ldi	r24, 0x0E	; 14
    2868:	80 93 bf 60 	sts	0x60BF, r24	; 0x8060bf <packet+0x1>
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:167
    packet.rawData[_packet_length] = 0;     /* EOT */
    286c:	22 54       	subi	r18, 0x42	; 66
    286e:	3f 49       	sbci	r19, 0x9F	; 159
    2870:	f9 01       	movw	r30, r18
    2872:	10 82       	st	Z, r1
    2874:	9f ca       	rjmp	.-2754   	; 0x1db4 <main+0x10e>
read_dummy():
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:309
   * Read dummy memory if necessary.
   */
  size_t read_dummy (void) {
    uint8_t  m_type = packet.out.bMType;
    size_t _wLength = packet.out.dwLength;
    if (m_type == 0xB4 && _sib[0]) {
    2876:	84 3b       	cpi	r24, 0xB4	; 180
    2878:	89 f4       	brne	.+34     	; 0x289c <__DATA_REGION_LENGTH__+0x89c>
    287a:	80 91 de 62 	lds	r24, 0x62DE	; 0x8062de <_sib>
    287e:	88 23       	and	r24, r24
    2880:	69 f0       	breq	.+26     	; 0x289c <__DATA_REGION_LENGTH__+0x89c>
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:312
      /* The SIGNATURE of a locked device cannot be read.            */
      /* But, the SIB can be read, so a Dummy SIGNATURE is returned. */
      packet.in.data[0] = 0x1E;
    2882:	9e e1       	ldi	r25, 0x1E	; 30
    2884:	90 93 c5 60 	sts	0x60C5, r25	; 0x8060c5 <packet+0x7>
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:313
      packet.in.data[1] = _sib[0] == ' ' ? 'A' : _sib[0];
    2888:	80 32       	cpi	r24, 0x20	; 32
    288a:	09 f4       	brne	.+2      	; 0x288e <__DATA_REGION_LENGTH__+0x88e>
main():
    288c:	81 e4       	ldi	r24, 0x41	; 65
read_dummy():
    288e:	80 93 c6 60 	sts	0x60C6, r24	; 0x8060c6 <packet+0x8>
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:314
      packet.in.data[2] = _sib[10];
    2892:	80 91 e8 62 	lds	r24, 0x62E8	; 0x8062e8 <_sib+0xa>
    2896:	80 93 c7 60 	sts	0x60C7, r24	; 0x8060c7 <packet+0x9>
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:316
    }
    else memset(&packet.in.data[0], 0xFF, _wLength);
    289a:	bf cf       	rjmp	.-130    	; 0x281a <__DATA_REGION_LENGTH__+0x81a>
    289c:	a8 01       	movw	r20, r16
    289e:	6f ef       	ldi	r22, 0xFF	; 255
    28a0:	70 e0       	ldi	r23, 0x00	; 0
    28a2:	85 ec       	ldi	r24, 0xC5	; 197
    28a4:	90 e6       	ldi	r25, 0x60	; 96
    28a6:	78 d1       	rcall	.+752    	; 0x2b98 <memset>
    28a8:	b8 cf       	rjmp	.-144    	; 0x281a <__DATA_REGION_LENGTH__+0x81a>
jtag_scope_updi():
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:466
      /* This will prevent AVRDUDE from displaying annoying errors. */
      else _rspsize = read_dummy();
      packet.in.res = _rspsize ? 0x184 : 0xA0;
      return _rspsize;
    }
    else if (_cmd == 0x23) {        /* CMD3_WRITE_MEMORY */
    28aa:	13 32       	cpi	r17, 0x23	; 35
    28ac:	41 f4       	brne	.+16     	; 0x28be <__DATA_REGION_LENGTH__+0x8be>
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:469
      D1PRINTF(" UPDI_WRITE=%02X:%06lX:%04X\r\n", packet.out.bMType,
        packet.out.dwAddr, (size_t)packet.out.dwLength);
      _rspsize = Timeout::command(Command_Table.write_memory);
    28ae:	80 91 04 63 	lds	r24, 0x6304	; 0x806304 <Command_Table+0x6>
    28b2:	90 91 05 63 	lds	r25, 0x6305	; 0x806305 <Command_Table+0x7>
    28b6:	93 cf       	rjmp	.-218    	; 0x27de <__DATA_REGION_LENGTH__+0x7de>
main():
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:438
    }
    else if (_cmd == 0x16) {        /* CMD3_LEAVE_PROGMODE */
      D1PRINTF(" UPDI_LEAVE_PROG\r\n");
      /* There is nothing to do. */
      /* The actual termination process is delayed until CMD3_SIGN_OFF. */
      _rspsize = 1;
    28b8:	01 e0       	ldi	r16, 0x01	; 1
    28ba:	10 e0       	ldi	r17, 0x00	; 0
    28bc:	76 cf       	rjmp	.-276    	; 0x27aa <__DATA_REGION_LENGTH__+0x7aa>
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:410
    return (*Command_Table.prog_init)();
  }

  /* ARCH=UPDI scope Provides functionality. */
  size_t jtag_scope_updi (void) {
    size_t _rspsize = 0;
    28be:	10 e0       	ldi	r17, 0x00	; 0
    28c0:	00 e0       	ldi	r16, 0x00	; 0
    28c2:	61 cf       	rjmp	.-318    	; 0x2786 <__DATA_REGION_LENGTH__+0x786>
jtag_scope_avr_core():
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:376
    else if (_jtag_arch == 0x01) _rspsize = DWIRE::jtag_scope_tiny();   /* dWire? */
    else if (_jtag_arch == 0x02) _rspsize = MEGA::jtag_scope_mega();    /* MEGA */
    else if (_jtag_arch == 0x03) _rspsize = XMEGA::jtag_scope_xmega();  /* XMEGA */
  #endif
    else if (_jtag_arch == 0x05) _rspsize = UPDI::jtag_scope_updi();    /* UPDI support */
    else packet.in.res = 0xA0;      /* RSP3_FAILED */
    28c4:	80 ea       	ldi	r24, 0xA0	; 160
    28c6:	90 e0       	ldi	r25, 0x00	; 0
    28c8:	bc ce       	rjmp	.-648    	; 0x2642 <__DATA_REGION_LENGTH__+0x642>
jtag_scope_branch():
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:399
    else if (_scope == 0x13) _rspsize = AVR32::jtag_scope_avr32();  /* SCOPE_AVR32 */
  #endif
    else if (_scope == 0x12) _rspsize = jtag_scope_avr_core();      /* SCOPE_AVR */
  #ifdef CONFIG_PGM_TPI_ENABLE
    /* The 14P models have limited TPI support due to insufficient pin count. */
    else if (_scope == 0x14) _rspsize = TPI::jtag_scope_tpi();      /* SCOPE_AVR_TPI */
    28ca:	84 31       	cpi	r24, 0x14	; 20
    28cc:	09 f0       	breq	.+2      	; 0x28d0 <__DATA_REGION_LENGTH__+0x8d0>
    28ce:	88 c0       	rjmp	.+272    	; 0x29e0 <__DATA_REGION_LENGTH__+0x9e0>
jtag_scope_tpi():
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:301
   * It doesn't seem to be implemented in the "mEDBG".
   * which means it will start immediately with XPRG_CMD_ENTER_PROGMODE.
   */
  size_t jtag_scope_tpi (void) {
    size_t _rspsize = 0;  /* Make final adjustments. */
    uint8_t _cmd    = packet.out.cmd;
    28d0:	80 91 c3 60 	lds	r24, 0x60C3	; 0x8060c3 <packet+0x5>
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:302
    if (_cmd == 0x01) {             /* XPRG_CMD_ENTER_PROGMODE */
    28d4:	81 30       	cpi	r24, 0x01	; 1
    28d6:	09 f0       	breq	.+2      	; 0x28da <__DATA_REGION_LENGTH__+0x8da>
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:304
      D1PRINTF(" TPI_ENTER_PROGMODE\r\n");
      USART::setup();
    28d8:	44 c0       	rjmp	.+136    	; 0x2962 <__DATA_REGION_LENGTH__+0x962>
    28da:	0e 94 ef 09 	call	0x13de	; 0x13de <USART::setup()>
change_tpi():
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/tools/avr-gcc/7.3.0-avr8-gnu-toolchain/avr/include/util/atomic.h:50
    28de:	1f b7       	in	r17, 0x3f	; 63
__iCliRetVal():
/Users/askn/Collaborator/UPDI4AVR-USB/src/usart.cpp:99
  /* The VCD-TxD is repurposed to transmit the synchronous clock. */
  void change_tpi (void) {
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
      D1PRINTF(" UART=TPI\r\n");
      /* In synchronous mode the formula is different. */
      uint32_t _baud = ((F_CPU / 1000L) / _xclk + 1) / 2;
    28e0:	f8 94       	cli
change_tpi():
    28e2:	20 91 18 60 	lds	r18, 0x6018	; 0x806018 <_xclk>
    28e6:	30 91 19 60 	lds	r19, 0x6019	; 0x806019 <_xclk+0x1>
    28ea:	50 e0       	ldi	r21, 0x00	; 0
    28ec:	40 e0       	ldi	r20, 0x00	; 0
    28ee:	60 e2       	ldi	r22, 0x20	; 32
    28f0:	7e e4       	ldi	r23, 0x4E	; 78
    28f2:	80 e0       	ldi	r24, 0x00	; 0
    28f4:	90 e0       	ldi	r25, 0x00	; 0
    28f6:	1e d1       	rcall	.+572    	; 0x2b34 <__divmodsi4>
    28f8:	da 01       	movw	r26, r20
    28fa:	c9 01       	movw	r24, r18
    28fc:	01 96       	adiw	r24, 0x01	; 1
    28fe:	a1 1d       	adc	r26, r1
    2900:	b1 1d       	adc	r27, r1
    2902:	b5 95       	asr	r27
    2904:	a7 95       	ror	r26
    2906:	97 95       	ror	r25
    2908:	87 95       	ror	r24
/Users/askn/Collaborator/UPDI4AVR-USB/src/usart.cpp:100
      _baud <<= 6;
    290a:	36 e0       	ldi	r19, 0x06	; 6
    290c:	88 0f       	add	r24, r24
    290e:	99 1f       	adc	r25, r25
    2910:	aa 1f       	adc	r26, r26
    2912:	bb 1f       	adc	r27, r27
    2914:	3a 95       	dec	r19
    2916:	d1 f7       	brne	.-12     	; 0x290c <__DATA_REGION_LENGTH__+0x90c>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usart.cpp:102
      if (_baud < 64) _baud = 64;
      PORTMUX_USARTROUTEA = PORTMUX_USART_UPDI;
    2918:	20 e1       	ldi	r18, 0x10	; 16
    291a:	20 93 e2 05 	sts	0x05E2, r18	; 0x8005e2 <__TEXT_REGION_LENGTH__+0x7f05e2>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usart.cpp:103
      pinModeMacro(PIN_VCP_TXD, INPUT_PULLUP);
    291e:	02 98       	cbi	0x00, 2	; 0
    2920:	28 e0       	ldi	r18, 0x08	; 8
    2922:	20 93 12 04 	sts	0x0412, r18	; 0x800412 <__TEXT_REGION_LENGTH__+0x7f0412>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usart.cpp:104
      USART0_STATUS = USART_DREIF_bm;
    2926:	20 e2       	ldi	r18, 0x20	; 32
    2928:	20 93 04 08 	sts	0x0804, r18	; 0x800804 <__TEXT_REGION_LENGTH__+0x7f0804>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usart.cpp:105
      USART0_BAUD  = _baud;
    292c:	80 34       	cpi	r24, 0x40	; 64
    292e:	91 05       	cpc	r25, r1
    2930:	a1 05       	cpc	r26, r1
    2932:	b1 05       	cpc	r27, r1
    2934:	20 f4       	brcc	.+8      	; 0x293e <__DATA_REGION_LENGTH__+0x93e>
    2936:	80 e4       	ldi	r24, 0x40	; 64
    2938:	90 e0       	ldi	r25, 0x00	; 0
    293a:	a0 e0       	ldi	r26, 0x00	; 0
    293c:	b0 e0       	ldi	r27, 0x00	; 0
    293e:	80 93 08 08 	sts	0x0808, r24	; 0x800808 <__TEXT_REGION_LENGTH__+0x7f0808>
    2942:	90 93 09 08 	sts	0x0809, r25	; 0x800809 <__TEXT_REGION_LENGTH__+0x7f0809>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usart.cpp:106
      USART0_CTRLC = USART_CHSIZE_8BIT_gc | USART_PMODE_EVEN_gc | USART_CMODE_SYNCHRONOUS_gc | USART_SBMODE_2BIT_gc;
    2946:	8b e6       	ldi	r24, 0x6B	; 107
    2948:	80 93 07 08 	sts	0x0807, r24	; 0x800807 <__TEXT_REGION_LENGTH__+0x7f0807>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usart.cpp:107
      USART0_CTRLA = USART_LBME_bm | USART_RS485_INT_gc | USART_RS485_EXT_gc;
    294c:	8b e0       	ldi	r24, 0x0B	; 11
    294e:	80 93 05 08 	sts	0x0805, r24	; 0x800805 <__TEXT_REGION_LENGTH__+0x7f0805>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usart.cpp:108
      USART0_CTRLB = USART_RXEN_bm | USART_TXEN_bm | USART_ODME_bm;
    2952:	88 ec       	ldi	r24, 0xC8	; 200
    2954:	80 93 06 08 	sts	0x0806, r24	; 0x800806 <__TEXT_REGION_LENGTH__+0x7f0806>
__iRestore():
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:306
      USART::change_tpi();
      _rspsize = Timeout::command(&connect);
    2958:	1f bf       	out	0x3f, r17	; 63
jtag_scope_tpi():
    295a:	80 eb       	ldi	r24, 0xB0	; 176
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:337
      D1PRINTF(" TPI_READ=%02X:%08lX:%04X\r\n",
        packet.out.tpi.read.bMType,
        bswap32(packet.out.tpi.read.dwAddr),
        bswap16(packet.out.tpi.read.wLength)
      );
      _rspsize = Timeout::command(&read_memory);
    295c:	9a e0       	ldi	r25, 0x0A	; 10
    295e:	51 d9       	rcall	.-3422   	; 0x1c02 <Timeout::command(unsigned int (*)(), unsigned int) [clone .constprop.8]>
    2960:	19 c0       	rjmp	.+50     	; 0x2994 <__DATA_REGION_LENGTH__+0x994>
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:308
      D1PRINTF(" TPI_ENTER_PROGMODE\r\n");
      USART::setup();
      USART::change_tpi();
      _rspsize = Timeout::command(&connect);
    }
    else if (_cmd == 0x02) {        /* XPRG_CMD_LEAVE_PROGMODE */
    2962:	82 30       	cpi	r24, 0x02	; 2
    2964:	09 f5       	brne	.+66     	; 0x29a8 <__DATA_REGION_LENGTH__+0x9a8>
set_sstcs():
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:69
  bool get_sldcs (const uint8_t _addr) {
    return (send(0x80 | _addr) && recv());
  }

  bool set_sstcs (const uint8_t _addr, const uint8_t _data) {
    return (send(0xC0 | _addr) && send(_data));
    2966:	80 ec       	ldi	r24, 0xC0	; 192
    2968:	0e 94 ef 04 	call	0x9de	; 0x9de <TPI::send(unsigned char)>
    296c:	88 23       	and	r24, r24
    296e:	19 f0       	breq	.+6      	; 0x2976 <__DATA_REGION_LENGTH__+0x976>
    2970:	80 e0       	ldi	r24, 0x00	; 0
    2972:	0e 94 ef 04 	call	0x9de	; 0x9de <TPI::send(unsigned char)>
delay_micros():
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/modernAVR/0.2.14/cores/modernAVR/api/delay_busywait.h:33
static __inline__ __attribute__((__always_inline__)) void delay_micros (uint32_t _us);
static __inline__ __attribute__((__always_inline__)) void delay_millis (uint32_t _ms);

void delay_micros (uint32_t _us) {
  if (F_CPU >= 1000000L) {
    __builtin_avr_delay_cycles((F_CPU / 1000000L) * _us);
    2976:	83 ef       	ldi	r24, 0xF3	; 243
    2978:	91 e0       	ldi	r25, 0x01	; 1
    297a:	01 97       	sbiw	r24, 0x01	; 1
    297c:	f1 f7       	brne	.-4      	; 0x297a <__DATA_REGION_LENGTH__+0x97a>
    297e:	00 c0       	rjmp	.+0      	; 0x2980 <__DATA_REGION_LENGTH__+0x980>
    2980:	00 00       	nop
disconnect():
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:284
    /*** leave RESET (normal programing) ***/
    set_sstcs(0x00, 0x00);
    D1PRINTF(" TPISR<00\r\n");
    /* Send the NVM exit command, wait a short while and release RESET. */
    delay_micros(100);
    openDrainWriteMacro(PIN_VCP_TXD, HIGH);
    2982:	02 98       	cbi	0x00, 2	; 0
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:285
    openDrainWriteMacro(PIN_PG_TRST, HIGH);
    2984:	01 98       	cbi	0x00, 1	; 0
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:286
    PGCONF = 0;
    2986:	1d ba       	out	0x1d, r1	; 29
jtag_scope_tpi():
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:312
    }
    else if (_cmd == 0x02) {        /* XPRG_CMD_LEAVE_PROGMODE */
      D1PRINTF(" TPI_LEAVE_PROGMODE\r\n");
      _rspsize = disconnect();
      _tpi_setmode = 0;
      USART::setup();
    2988:	0e 94 ef 09 	call	0x13de	; 0x13de <USART::setup()>
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:313
      USART::change_vcp();
    298c:	0e 94 b4 05 	call	0xb68	; 0xb68 <USART::change_vcp()>
main():
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:310
      USART::change_tpi();
      _rspsize = Timeout::command(&connect);
    }
    else if (_cmd == 0x02) {        /* XPRG_CMD_LEAVE_PROGMODE */
      D1PRINTF(" TPI_LEAVE_PROGMODE\r\n");
      _rspsize = disconnect();
    2990:	81 e0       	ldi	r24, 0x01	; 1
    2992:	90 e0       	ldi	r25, 0x00	; 0
jtag_scope_tpi():
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:360
        _tpi_csr_addr = _bValue;    /* XPRG_TPI_NVMCSR_ADDRESS */
      }
  #endif
      _rspsize = 1;
    }
    packet.in.tpi_res = _rspsize ? 0x00 : 0x01; /* XPRG_ERR_OK : XPRG_ERR_FAILED */
    2994:	21 e0       	ldi	r18, 0x01	; 1
    2996:	00 97       	sbiw	r24, 0x00	; 0
    2998:	09 f0       	breq	.+2      	; 0x299c <__DATA_REGION_LENGTH__+0x99c>
    299a:	20 e0       	ldi	r18, 0x00	; 0
    299c:	20 93 c4 60 	sts	0x60C4, r18	; 0x8060c4 <packet+0x6>
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:364
    D1PRINTF(" <RES:%02X>\r\n", _rspsize);

    /* Adds padding to XPRG responses to adjust the length of the payload. */
    return ++_rspsize;
    29a0:	8c 01       	movw	r16, r24
jtag_scope_edbg():
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:257
          D1PRINTF(" TARGET_POWER=%02X\r\n", _jtag_vpow);
          packet.in.data[0] = _jtag_vpow;
        }
      }
      packet.in.res = 0x184;        /* RSP3_DATA */
      _rspsize = _length + 1;
    29a2:	0f 5f       	subi	r16, 0xFF	; 255
    29a4:	1f 4f       	sbci	r17, 0xFF	; 255
    29a6:	4e cf       	rjmp	.-356    	; 0x2844 <__DATA_REGION_LENGTH__+0x844>
jtag_scope_tpi():
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:315
      _rspsize = disconnect();
      _tpi_setmode = 0;
      USART::setup();
      USART::change_vcp();
    }
    else if (bit_is_clear(PGCONF, PGCONF_UPDI_bp)) { /* empty */ }
    29a8:	e8 9b       	sbis	0x1d, 0	; 29
    29aa:	17 c0       	rjmp	.+46     	; 0x29da <__DATA_REGION_LENGTH__+0x9da>
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:316
    else if (_cmd == 0x03) {        /* XPRG_CMD_ERASE */
    29ac:	83 30       	cpi	r24, 0x03	; 3
    29ae:	19 f4       	brne	.+6      	; 0x29b6 <__DATA_REGION_LENGTH__+0x9b6>
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:321
      D1PRINTF(" TPI_ERASE=%02X:%08lX\r\n",
        packet.out.tpi.read.bMType,
        bswap32(packet.out.tpi.read.dwAddr)
      );
      _rspsize = Timeout::command(&erase_memory);
    29b0:	84 e3       	ldi	r24, 0x34	; 52
    29b2:	9d e0       	ldi	r25, 0x0D	; 13
    29b4:	d4 cf       	rjmp	.-88     	; 0x295e <__DATA_REGION_LENGTH__+0x95e>
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:323
    }
    else if (_cmd == 0x04) {        /* XPRG_CMD_WRITE_MEM */
    29b6:	84 30       	cpi	r24, 0x04	; 4
    29b8:	19 f4       	brne	.+6      	; 0x29c0 <__DATA_REGION_LENGTH__+0x9c0>
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:329
      D1PRINTF(" TPI_WRITE=%02X:%08lX:%04X\r\n",
        packet.out.tpi.write.bMType,
        bswap32(packet.out.tpi.write.dwAddr),
        bswap16(packet.out.tpi.write.wLength)
      );
      _rspsize = Timeout::command(&write_memory);
    29ba:	89 e3       	ldi	r24, 0x39	; 57
    29bc:	9c e0       	ldi	r25, 0x0C	; 12
    29be:	cf cf       	rjmp	.-98     	; 0x295e <__DATA_REGION_LENGTH__+0x95e>
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:331
    }
    else if (_cmd == 0x05) {        /* XPRG_CMD_READ_MEM */
    29c0:	85 30       	cpi	r24, 0x05	; 5
    29c2:	19 f4       	brne	.+6      	; 0x29ca <__DATA_REGION_LENGTH__+0x9ca>
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:337
      D1PRINTF(" TPI_READ=%02X:%08lX:%04X\r\n",
        packet.out.tpi.read.bMType,
        bswap32(packet.out.tpi.read.dwAddr),
        bswap16(packet.out.tpi.read.wLength)
      );
      _rspsize = Timeout::command(&read_memory);
    29c4:	86 e0       	ldi	r24, 0x06	; 6
    29c6:	9d e0       	ldi	r25, 0x0D	; 13
    29c8:	ca cf       	rjmp	.-108    	; 0x295e <__DATA_REGION_LENGTH__+0x95e>
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:342
    }
    else if (_cmd == 0x06) {        /* XPRG_CMD_CRC */
      D1PRINTF(" TPI_CRC\r\n");     /* not used (Fail) */
    }
    else if (_cmd == 0x07) {        /* XPRG_CMD_SET_PARAM */
    29ca:	31 e0       	ldi	r19, 0x01	; 1
    29cc:	20 e0       	ldi	r18, 0x00	; 0
    29ce:	87 30       	cpi	r24, 0x07	; 7
    29d0:	09 f0       	breq	.+2      	; 0x29d4 <__DATA_REGION_LENGTH__+0x9d4>
    29d2:	30 e0       	ldi	r19, 0x00	; 0
main():
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:306
    uint8_t _cmd    = packet.out.cmd;
    if (_cmd == 0x01) {             /* XPRG_CMD_ENTER_PROGMODE */
      D1PRINTF(" TPI_ENTER_PROGMODE\r\n");
      USART::setup();
      USART::change_tpi();
      _rspsize = Timeout::command(&connect);
    29d4:	83 2f       	mov	r24, r19
    29d6:	92 2f       	mov	r25, r18
    29d8:	dd cf       	rjmp	.-70     	; 0x2994 <__DATA_REGION_LENGTH__+0x994>
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:300
   * When this scope is used, CMD3_SIGN_ON will not be called,
   * It doesn't seem to be implemented in the "mEDBG".
   * which means it will start immediately with XPRG_CMD_ENTER_PROGMODE.
   */
  size_t jtag_scope_tpi (void) {
    size_t _rspsize = 0;  /* Make final adjustments. */
    29da:	90 e0       	ldi	r25, 0x00	; 0
    29dc:	80 e0       	ldi	r24, 0x00	; 0
    29de:	da cf       	rjmp	.-76     	; 0x2994 <__DATA_REGION_LENGTH__+0x994>
jtag_scope_branch():
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:401
    else if (_scope == 0x12) _rspsize = jtag_scope_avr_core();      /* SCOPE_AVR */
  #ifdef CONFIG_PGM_TPI_ENABLE
    /* The 14P models have limited TPI support due to insufficient pin count. */
    else if (_scope == 0x14) _rspsize = TPI::jtag_scope_tpi();      /* SCOPE_AVR_TPI */
  #endif
    else if (_scope == 0x20) _rspsize = jtag_scope_edbg();          /* SCOPE_EDBG */
    29e0:	80 32       	cpi	r24, 0x20	; 32
    29e2:	09 f0       	breq	.+2      	; 0x29e6 <__DATA_REGION_LENGTH__+0x9e6>
    29e4:	35 ce       	rjmp	.-918    	; 0x2650 <__DATA_REGION_LENGTH__+0x650>
jtag_scope_edbg():
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:225

  /*** The EDBG scope provides access to the writer's hardware specifications. ***/
  /* There is no impact on operation if it is not called at all. */
  size_t jtag_scope_edbg (void) {
    size_t  _rspsize = 0;
    uint8_t _cmd     = packet.out.cmd;
    29e6:	20 91 c3 60 	lds	r18, 0x60C3	; 0x8060c3 <packet+0x5>
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:226
    uint8_t _section = packet.out.section;
    29ea:	90 91 c5 60 	lds	r25, 0x60C5	; 0x8060c5 <packet+0x7>
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:227
    uint8_t _index   = packet.out.index;
    29ee:	80 91 c6 60 	lds	r24, 0x60C6	; 0x8060c6 <packet+0x8>
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:229
    uint8_t _length  = packet.out.length;
    if (_cmd == 0x01) {             /* CMD3_SET_PARAMETER */
    29f2:	21 30       	cpi	r18, 0x01	; 1
    29f4:	89 f4       	brne	.+34     	; 0x2a18 <__DATA_REGION_LENGTH__+0xa18>
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:232
      uint16_t _data = packet.out.wValue;
      D1PRINTF(" AVR_SET_PARAM=%02X:%02X:%02X:%02X\r\n", _section, _index, _length, _data);
      if (_section == 0) {          /* SET_GET_CTXT_CONFIG */
    29f6:	91 11       	cpse	r25, r1
    29f8:	22 ce       	rjmp	.-956    	; 0x263e <__DATA_REGION_LENGTH__+0x63e>
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:233
        if (_index == 0x10) {       /* EDBG_CONTROL_TARGET_POWER */
    29fa:	80 31       	cpi	r24, 0x10	; 16
    29fc:	09 f0       	breq	.+2      	; 0x2a00 <__DATA_REGION_LENGTH__+0xa00>
    29fe:	1f ce       	rjmp	.-962    	; 0x263e <__DATA_REGION_LENGTH__+0x63e>
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:230
    uint8_t _cmd     = packet.out.cmd;
    uint8_t _section = packet.out.section;
    uint8_t _index   = packet.out.index;
    uint8_t _length  = packet.out.length;
    if (_cmd == 0x01) {             /* CMD3_SET_PARAMETER */
      uint16_t _data = packet.out.wValue;
    2a00:	80 91 c8 60 	lds	r24, 0x60C8	; 0x8060c8 <packet+0xa>
    2a04:	90 91 c9 60 	lds	r25, 0x60C9	; 0x8060c9 <packet+0xb>
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:236
      D1PRINTF(" AVR_SET_PARAM=%02X:%02X:%02X:%02X\r\n", _section, _index, _length, _data);
      if (_section == 0) {          /* SET_GET_CTXT_CONFIG */
        if (_index == 0x10) {       /* EDBG_CONTROL_TARGET_POWER */
          /* Called with `-xvtarget_switch=0,1` HAS_VTARG_SWITCH */
          D1PRINTF(" TARGET_POWER=%02X\r\n", _data);
          _jtag_vpow = _data;       /* 0,1 */
    2a08:	80 93 00 60 	sts	0x6000, r24	; 0x806000 <__DATA_REGION_ORIGIN__>
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:238
  #if defined(PIN_HV_POWER)
          if (_data)
    2a0c:	89 2b       	or	r24, r25
    2a0e:	11 f0       	breq	.+4      	; 0x2a14 <__DATA_REGION_LENGTH__+0xa14>
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:239
            digitalWriteMacro(PIN_HV_POWER, HIGH);
    2a10:	0e 9a       	sbi	0x01, 6	; 1
    2a12:	15 ce       	rjmp	.-982    	; 0x263e <__DATA_REGION_LENGTH__+0x63e>
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:241
          else
            digitalWriteMacro(PIN_HV_POWER, LOW);
    2a14:	0e 98       	cbi	0x01, 6	; 1
    2a16:	13 ce       	rjmp	.-986    	; 0x263e <__DATA_REGION_LENGTH__+0x63e>
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:247
  #endif
        }
      }
      packet.in.res = 0x80;         /* RSP3_OK */
    }
    else if (_cmd == 0x02) {        /* CMD3_GET_PARAMETER */
    2a18:	22 30       	cpi	r18, 0x02	; 2
    2a1a:	09 f0       	breq	.+2      	; 0x2a1e <__DATA_REGION_LENGTH__+0xa1e>
    2a1c:	19 ce       	rjmp	.-974    	; 0x2650 <__DATA_REGION_LENGTH__+0x650>
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:228
  size_t jtag_scope_edbg (void) {
    size_t  _rspsize = 0;
    uint8_t _cmd     = packet.out.cmd;
    uint8_t _section = packet.out.section;
    uint8_t _index   = packet.out.index;
    uint8_t _length  = packet.out.length;
    2a1e:	00 91 c7 60 	lds	r16, 0x60C7	; 0x8060c7 <packet+0x9>
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:249
      }
      packet.in.res = 0x80;         /* RSP3_OK */
    }
    else if (_cmd == 0x02) {        /* CMD3_GET_PARAMETER */
      D1PRINTF(" AVR_GET_PARAM=%02X:%02X:%02X\r\n", _section, _index, _length);
      if (_section == 0) {          /* SET_GET_CTXT_CONFIG */
    2a22:	91 11       	cpse	r25, r1
    2a24:	fa cd       	rjmp	.-1036   	; 0x261a <__DATA_REGION_LENGTH__+0x61a>
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:250
        if (_index == 0x10) {       /* EDBG_CONTROL_TARGET_POWER */
    2a26:	80 31       	cpi	r24, 0x10	; 16
    2a28:	09 f0       	breq	.+2      	; 0x2a2c <__DATA_REGION_LENGTH__+0xa2c>
    2a2a:	f7 cd       	rjmp	.-1042   	; 0x261a <__DATA_REGION_LENGTH__+0x61a>
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:253
          /* Called with `-xvtarget_switch` HAS_VTARG_SWITCH */
          D1PRINTF(" TARGET_POWER=%02X\r\n", _jtag_vpow);
          packet.in.data[0] = _jtag_vpow;
    2a2c:	80 91 00 60 	lds	r24, 0x6000	; 0x806000 <__DATA_REGION_ORIGIN__>
    2a30:	80 93 c5 60 	sts	0x60C5, r24	; 0x8060c5 <packet+0x7>
    2a34:	f2 cd       	rjmp	.-1052   	; 0x261a <__DATA_REGION_LENGTH__+0x61a>

00002a36 <setjmp>:
setjmp():
    2a36:	dc 01       	movw	r26, r24
    2a38:	2d 92       	st	X+, r2
    2a3a:	3d 92       	st	X+, r3
    2a3c:	4d 92       	st	X+, r4
    2a3e:	5d 92       	st	X+, r5
    2a40:	6d 92       	st	X+, r6
    2a42:	7d 92       	st	X+, r7
    2a44:	8d 92       	st	X+, r8
    2a46:	9d 92       	st	X+, r9
    2a48:	ad 92       	st	X+, r10
    2a4a:	bd 92       	st	X+, r11
    2a4c:	cd 92       	st	X+, r12
    2a4e:	dd 92       	st	X+, r13
    2a50:	ed 92       	st	X+, r14
    2a52:	fd 92       	st	X+, r15
    2a54:	0d 93       	st	X+, r16
    2a56:	1d 93       	st	X+, r17
    2a58:	cd 93       	st	X+, r28
    2a5a:	dd 93       	st	X+, r29
    2a5c:	ff 91       	pop	r31
    2a5e:	ef 91       	pop	r30
    2a60:	8d b7       	in	r24, 0x3d	; 61
    2a62:	8d 93       	st	X+, r24
    2a64:	8e b7       	in	r24, 0x3e	; 62
    2a66:	8d 93       	st	X+, r24
    2a68:	8f b7       	in	r24, 0x3f	; 63
    2a6a:	8d 93       	st	X+, r24
    2a6c:	ed 93       	st	X+, r30
    2a6e:	fd 93       	st	X+, r31
    2a70:	88 27       	eor	r24, r24
    2a72:	99 27       	eor	r25, r25
    2a74:	09 94       	ijmp

00002a76 <longjmp>:
longjmp():
    2a76:	dc 01       	movw	r26, r24
    2a78:	cb 01       	movw	r24, r22
    2a7a:	81 30       	cpi	r24, 0x01	; 1
    2a7c:	91 05       	cpc	r25, r1
    2a7e:	81 1d       	adc	r24, r1
    2a80:	2d 90       	ld	r2, X+
    2a82:	3d 90       	ld	r3, X+
    2a84:	4d 90       	ld	r4, X+
    2a86:	5d 90       	ld	r5, X+
    2a88:	6d 90       	ld	r6, X+
    2a8a:	7d 90       	ld	r7, X+
    2a8c:	8d 90       	ld	r8, X+
    2a8e:	9d 90       	ld	r9, X+
    2a90:	ad 90       	ld	r10, X+
    2a92:	bd 90       	ld	r11, X+
    2a94:	cd 90       	ld	r12, X+
    2a96:	dd 90       	ld	r13, X+
    2a98:	ed 90       	ld	r14, X+
    2a9a:	fd 90       	ld	r15, X+
    2a9c:	0d 91       	ld	r16, X+
    2a9e:	1d 91       	ld	r17, X+
    2aa0:	cd 91       	ld	r28, X+
    2aa2:	dd 91       	ld	r29, X+
    2aa4:	ed 91       	ld	r30, X+
    2aa6:	fd 91       	ld	r31, X+
    2aa8:	0d 90       	ld	r0, X+
    2aaa:	0f be       	out	0x3f, r0	; 63
    2aac:	ed bf       	out	0x3d, r30	; 61
    2aae:	fe bf       	out	0x3e, r31	; 62
    2ab0:	ed 91       	ld	r30, X+
    2ab2:	fd 91       	ld	r31, X+
    2ab4:	09 94       	ijmp

00002ab6 <memcpy_P>:
memcpy_P():
    2ab6:	fb 01       	movw	r30, r22
    2ab8:	dc 01       	movw	r26, r24
    2aba:	02 c0       	rjmp	.+4      	; 0x2ac0 <memcpy_P+0xa>
    2abc:	05 90       	lpm	r0, Z+
    2abe:	0d 92       	st	X+, r0
    2ac0:	41 50       	subi	r20, 0x01	; 1
    2ac2:	50 40       	sbci	r21, 0x00	; 0
    2ac4:	d8 f7       	brcc	.-10     	; 0x2abc <memcpy_P+0x6>
    2ac6:	08 95       	ret

00002ac8 <__udivmodhi4>:
__udivmodhi4():
    2ac8:	aa 1b       	sub	r26, r26
    2aca:	bb 1b       	sub	r27, r27
    2acc:	51 e1       	ldi	r21, 0x11	; 17
    2ace:	07 c0       	rjmp	.+14     	; 0x2ade <__udivmodhi4_ep>

00002ad0 <__udivmodhi4_loop>:
    2ad0:	aa 1f       	adc	r26, r26
    2ad2:	bb 1f       	adc	r27, r27
    2ad4:	a6 17       	cp	r26, r22
    2ad6:	b7 07       	cpc	r27, r23
    2ad8:	10 f0       	brcs	.+4      	; 0x2ade <__udivmodhi4_ep>
    2ada:	a6 1b       	sub	r26, r22
    2adc:	b7 0b       	sbc	r27, r23

00002ade <__udivmodhi4_ep>:
    2ade:	88 1f       	adc	r24, r24
    2ae0:	99 1f       	adc	r25, r25
    2ae2:	5a 95       	dec	r21
    2ae4:	a9 f7       	brne	.-22     	; 0x2ad0 <__udivmodhi4_loop>
    2ae6:	80 95       	com	r24
    2ae8:	90 95       	com	r25
    2aea:	bc 01       	movw	r22, r24
    2aec:	cd 01       	movw	r24, r26
    2aee:	08 95       	ret

00002af0 <__udivmodsi4>:
__udivmodsi4():
    2af0:	a1 e2       	ldi	r26, 0x21	; 33
    2af2:	1a 2e       	mov	r1, r26
    2af4:	aa 1b       	sub	r26, r26
    2af6:	bb 1b       	sub	r27, r27
    2af8:	fd 01       	movw	r30, r26
    2afa:	0d c0       	rjmp	.+26     	; 0x2b16 <__udivmodsi4_ep>

00002afc <__udivmodsi4_loop>:
    2afc:	aa 1f       	adc	r26, r26
    2afe:	bb 1f       	adc	r27, r27
    2b00:	ee 1f       	adc	r30, r30
    2b02:	ff 1f       	adc	r31, r31
    2b04:	a2 17       	cp	r26, r18
    2b06:	b3 07       	cpc	r27, r19
    2b08:	e4 07       	cpc	r30, r20
    2b0a:	f5 07       	cpc	r31, r21
    2b0c:	20 f0       	brcs	.+8      	; 0x2b16 <__udivmodsi4_ep>
    2b0e:	a2 1b       	sub	r26, r18
    2b10:	b3 0b       	sbc	r27, r19
    2b12:	e4 0b       	sbc	r30, r20
    2b14:	f5 0b       	sbc	r31, r21

00002b16 <__udivmodsi4_ep>:
    2b16:	66 1f       	adc	r22, r22
    2b18:	77 1f       	adc	r23, r23
    2b1a:	88 1f       	adc	r24, r24
    2b1c:	99 1f       	adc	r25, r25
    2b1e:	1a 94       	dec	r1
    2b20:	69 f7       	brne	.-38     	; 0x2afc <__udivmodsi4_loop>
    2b22:	60 95       	com	r22
    2b24:	70 95       	com	r23
    2b26:	80 95       	com	r24
    2b28:	90 95       	com	r25
    2b2a:	9b 01       	movw	r18, r22
    2b2c:	ac 01       	movw	r20, r24
    2b2e:	bd 01       	movw	r22, r26
    2b30:	cf 01       	movw	r24, r30
    2b32:	08 95       	ret

00002b34 <__divmodsi4>:
__divmodsi4():
    2b34:	05 2e       	mov	r0, r21
    2b36:	97 fb       	bst	r25, 7
    2b38:	16 f4       	brtc	.+4      	; 0x2b3e <__divmodsi4+0xa>
    2b3a:	00 94       	com	r0
    2b3c:	0f d0       	rcall	.+30     	; 0x2b5c <__negsi2>
    2b3e:	57 fd       	sbrc	r21, 7
    2b40:	05 d0       	rcall	.+10     	; 0x2b4c <__divmodsi4_neg2>
    2b42:	d6 df       	rcall	.-84     	; 0x2af0 <__udivmodsi4>
    2b44:	07 fc       	sbrc	r0, 7
    2b46:	02 d0       	rcall	.+4      	; 0x2b4c <__divmodsi4_neg2>
    2b48:	46 f4       	brtc	.+16     	; 0x2b5a <__divmodsi4_exit>
    2b4a:	08 c0       	rjmp	.+16     	; 0x2b5c <__negsi2>

00002b4c <__divmodsi4_neg2>:
    2b4c:	50 95       	com	r21
    2b4e:	40 95       	com	r20
    2b50:	30 95       	com	r19
    2b52:	21 95       	neg	r18
    2b54:	3f 4f       	sbci	r19, 0xFF	; 255
    2b56:	4f 4f       	sbci	r20, 0xFF	; 255
    2b58:	5f 4f       	sbci	r21, 0xFF	; 255

00002b5a <__divmodsi4_exit>:
    2b5a:	08 95       	ret

00002b5c <__negsi2>:
__negsi2():
    2b5c:	90 95       	com	r25
    2b5e:	80 95       	com	r24
    2b60:	70 95       	com	r23
    2b62:	61 95       	neg	r22
    2b64:	7f 4f       	sbci	r23, 0xFF	; 255
    2b66:	8f 4f       	sbci	r24, 0xFF	; 255
    2b68:	9f 4f       	sbci	r25, 0xFF	; 255
    2b6a:	08 95       	ret

00002b6c <memcmp>:
memcmp():
    2b6c:	fb 01       	movw	r30, r22
    2b6e:	dc 01       	movw	r26, r24
    2b70:	04 c0       	rjmp	.+8      	; 0x2b7a <memcmp+0xe>
    2b72:	8d 91       	ld	r24, X+
    2b74:	01 90       	ld	r0, Z+
    2b76:	80 19       	sub	r24, r0
    2b78:	21 f4       	brne	.+8      	; 0x2b82 <memcmp+0x16>
    2b7a:	41 50       	subi	r20, 0x01	; 1
    2b7c:	50 40       	sbci	r21, 0x00	; 0
    2b7e:	c8 f7       	brcc	.-14     	; 0x2b72 <memcmp+0x6>
    2b80:	88 1b       	sub	r24, r24
    2b82:	99 0b       	sbc	r25, r25
    2b84:	08 95       	ret

00002b86 <memcpy>:
memcpy():
    2b86:	fb 01       	movw	r30, r22
    2b88:	dc 01       	movw	r26, r24
    2b8a:	02 c0       	rjmp	.+4      	; 0x2b90 <memcpy+0xa>
    2b8c:	01 90       	ld	r0, Z+
    2b8e:	0d 92       	st	X+, r0
    2b90:	41 50       	subi	r20, 0x01	; 1
    2b92:	50 40       	sbci	r21, 0x00	; 0
    2b94:	d8 f7       	brcc	.-10     	; 0x2b8c <memcpy+0x6>
    2b96:	08 95       	ret

00002b98 <memset>:
memset():
    2b98:	dc 01       	movw	r26, r24
    2b9a:	01 c0       	rjmp	.+2      	; 0x2b9e <memset+0x6>
    2b9c:	6d 93       	st	X+, r22
    2b9e:	41 50       	subi	r20, 0x01	; 1
    2ba0:	50 40       	sbci	r21, 0x00	; 0
    2ba2:	e0 f7       	brcc	.-8      	; 0x2b9c <memset+0x4>
    2ba4:	08 95       	ret

00002ba6 <_exit>:
exit():
    2ba6:	f8 94       	cli

00002ba8 <__stop_program>:
__stop_program():
    2ba8:	ff cf       	rjmp	.-2      	; 0x2ba8 <__stop_program>

Disassembly of section .nvmem:

00002c26 <.nvmem>:
	...

Disassembly of section .eeprom:

00810000 <_EEP>:
  810000:	ff ff ff ff ff ff ff ff                             ........

Disassembly of section .fuse:

00820000 <__fuse>:
  820000:	00 00 00 00 00 d1 08 00 00 00 03 00                 ............
