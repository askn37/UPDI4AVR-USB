
/var/folders/mz/_z9vt_y13rdf9tt_4qkvv0k40000gn/T/arduino_build_813933/UPDI4AVR-USB.ino.elf:     file format elf32-avr


Disassembly of section .data:

00806000 <__data_start>:
__data_start():
  806000:	01 55       	subi	r16, 0x51	; 81

00806001 <UPDI::recv_byte(unsigned long)::_set_ptr>:
  806001:	55 08 00 00 00 00                                   U.....

00806007 <UPDI::send_byte(unsigned long, unsigned char)::_set_ptr>:
  806007:	55 48 00 00 00 00                                   UH....

0080600d <UPDI::_set_repeat>:
  80600d:	55 a0 00 55 04                                      U..U.

00806012 <UPDI::_set_ptr24>:
  806012:	55 6a 00 00 00 00                                   Uj....

00806018 <_xclk>:
  806018:	e1 00                                               ..

0080601a <SYS::_updi_bitmap>:
  80601a:	00 00 00 ff ff 7f 55 7e c8 7f 59 fe 55 7e c3 7e     ......U~..Y.U~.~
  80602a:	04 ff 00 30 20 00                                   ...0 .

00806030 <TPI::nvmprog_key>:
  806030:	e0 ff 88 d8 cd 45 ab 89 12                          .....E...

00806039 <UPDI::set_rsd()::_set_rsd>:
  806039:	55 c2 0d                                            U..

0080603c <UPDI::clear_rsd()::_clear_rsd>:
  80603c:	55 c2 05                                            U..

0080603f <UPDI::key_status()::_key_stat>:
  80603f:	55 87                                               U.

00806041 <UPDI::sys_status()::_sys_stat>:
  806041:	55 8b                                               U.

00806043 <UPDI::nvmprog_key>:
  806043:	55 e0 20 67 6f 72 50 4d 56 4e                       U. gorPMVN

0080604d <UPDI::erase_key>:
  80604d:	55 e0 65 73 61 72 45 4d 56 4e                       U.esarEMVN

00806057 <UPDI::urowwrite_key>:
  806057:	55 e0 65 74 26 73 55 4d 56 4e                       U.et&sUMVN

00806061 <UPDI::write_userrow()::_urowstop>:
  806061:	55 c7 20                                            U. 

00806064 <UPDI::write_userrow()::_urowdone>:
  806064:	55 ca 03                                            U..

00806067 <UPDI::connect()::_sib256>:
  806067:	55 e6                                               U.

00806069 <UPDI::connect()::_init>:
  806069:	55 c8 59 55 c3 08 55 c2 05                          U.YU..U..

00806072 <UPDI::sys_reset(bool)::_reset>:
  806072:	55 c8 59 55 c8 00 55 c3 04                          U.YU..U..

0080607b <vtable for HarfUART_Class>:
  80607b:	00 00 00 00 eb 04 0d 0a 00                          .........

Disassembly of section .text:

00000000 <__vectors>:
__vectors():
../../../../crt1/gcrt1.S:61
       0:	69 c4       	rjmp	.+2258   	; 0x8d4 <__ctors_end>
       2:	00 00       	nop
../../../../crt1/gcrt1.S:67
       4:	a4 c4       	rjmp	.+2376   	; 0x94e <__bad_interrupt>
       6:	00 00       	nop
../../../../crt1/gcrt1.S:68
       8:	a2 c4       	rjmp	.+2372   	; 0x94e <__bad_interrupt>
       a:	00 00       	nop
../../../../crt1/gcrt1.S:69
       c:	a0 c4       	rjmp	.+2368   	; 0x94e <__bad_interrupt>
       e:	00 00       	nop
../../../../crt1/gcrt1.S:70
      10:	9e c4       	rjmp	.+2364   	; 0x94e <__bad_interrupt>
      12:	00 00       	nop
../../../../crt1/gcrt1.S:71
      14:	9c c4       	rjmp	.+2360   	; 0x94e <__bad_interrupt>
      16:	00 00       	nop
../../../../crt1/gcrt1.S:72
      18:	0c 94 a3 15 	jmp	0x2b46	; 0x2b46 <__vector_6>
../../../../crt1/gcrt1.S:73
      1c:	98 c4       	rjmp	.+2352   	; 0x94e <__bad_interrupt>
      1e:	00 00       	nop
../../../../crt1/gcrt1.S:74
      20:	96 c4       	rjmp	.+2348   	; 0x94e <__bad_interrupt>
      22:	00 00       	nop
../../../../crt1/gcrt1.S:75
      24:	94 c4       	rjmp	.+2344   	; 0x94e <__bad_interrupt>
      26:	00 00       	nop
../../../../crt1/gcrt1.S:76
      28:	92 c4       	rjmp	.+2340   	; 0x94e <__bad_interrupt>
      2a:	00 00       	nop
../../../../crt1/gcrt1.S:77
      2c:	90 c4       	rjmp	.+2336   	; 0x94e <__bad_interrupt>
      2e:	00 00       	nop
../../../../crt1/gcrt1.S:78
      30:	8e c4       	rjmp	.+2332   	; 0x94e <__bad_interrupt>
      32:	00 00       	nop
../../../../crt1/gcrt1.S:79
      34:	8c c4       	rjmp	.+2328   	; 0x94e <__bad_interrupt>
      36:	00 00       	nop
../../../../crt1/gcrt1.S:80
      38:	8a c4       	rjmp	.+2324   	; 0x94e <__bad_interrupt>
      3a:	00 00       	nop
../../../../crt1/gcrt1.S:81
      3c:	0c 94 2e 15 	jmp	0x2a5c	; 0x2a5c <__vector_15>
../../../../crt1/gcrt1.S:82
      40:	86 c4       	rjmp	.+2316   	; 0x94e <__bad_interrupt>
      42:	00 00       	nop
../../../../crt1/gcrt1.S:83
      44:	84 c4       	rjmp	.+2312   	; 0x94e <__bad_interrupt>
      46:	00 00       	nop
../../../../crt1/gcrt1.S:84
      48:	82 c4       	rjmp	.+2308   	; 0x94e <__bad_interrupt>
      4a:	00 00       	nop
../../../../crt1/gcrt1.S:85
      4c:	0c 94 e5 14 	jmp	0x29ca	; 0x29ca <__vector_19>
../../../../crt1/gcrt1.S:86
      50:	7e c4       	rjmp	.+2300   	; 0x94e <__bad_interrupt>
      52:	00 00       	nop
../../../../crt1/gcrt1.S:87
      54:	7c c4       	rjmp	.+2296   	; 0x94e <__bad_interrupt>
      56:	00 00       	nop
../../../../crt1/gcrt1.S:88
      58:	7a c4       	rjmp	.+2292   	; 0x94e <__bad_interrupt>
      5a:	00 00       	nop
../../../../crt1/gcrt1.S:89
      5c:	78 c4       	rjmp	.+2288   	; 0x94e <__bad_interrupt>
      5e:	00 00       	nop
../../../../crt1/gcrt1.S:90
      60:	0c 94 b3 15 	jmp	0x2b66	; 0x2b66 <__vector_24>
../../../../crt1/gcrt1.S:91
      64:	74 c4       	rjmp	.+2280   	; 0x94e <__bad_interrupt>
      66:	00 00       	nop
../../../../crt1/gcrt1.S:92
      68:	72 c4       	rjmp	.+2276   	; 0x94e <__bad_interrupt>
      6a:	00 00       	nop
../../../../crt1/gcrt1.S:93
      6c:	70 c4       	rjmp	.+2272   	; 0x94e <__bad_interrupt>
      6e:	00 00       	nop
../../../../crt1/gcrt1.S:94
      70:	6e c4       	rjmp	.+2268   	; 0x94e <__bad_interrupt>
      72:	00 00       	nop
../../../../crt1/gcrt1.S:95
      74:	6c c4       	rjmp	.+2264   	; 0x94e <__bad_interrupt>
      76:	00 00       	nop
../../../../crt1/gcrt1.S:96
      78:	6a c4       	rjmp	.+2260   	; 0x94e <__bad_interrupt>
      7a:	00 00       	nop
../../../../crt1/gcrt1.S:97
      7c:	68 c4       	rjmp	.+2256   	; 0x94e <__bad_interrupt>
      7e:	00 00       	nop
../../../../crt1/gcrt1.S:98
      80:	66 c4       	rjmp	.+2252   	; 0x94e <__bad_interrupt>
      82:	00 00       	nop
../../../../crt1/gcrt1.S:99
      84:	64 c4       	rjmp	.+2248   	; 0x94e <__bad_interrupt>
	...

00000088 <__trampolines_end>:
__trampolines_start():
      88:	43 00       	.word	0x0043	; ????
      8a:	44 00       	.word	0x0044	; ????
      8c:	43 00       	.word	0x0043	; ????
      8e:	2d 00       	.word	0x002d	; ????
      90:	41 00       	.word	0x0041	; ????
      92:	43 00       	.word	0x0043	; ????
      94:	4d 00       	.word	0x004d	; ????
      96:	2f 00       	.word	0x002f	; ????
      98:	56 00       	.word	0x0056	; ????
      9a:	43 00       	.word	0x0043	; ????
      9c:	50 00       	.word	0x0050	; ????
	...

000000a0 <USB::mstring>:
      a0:	55 00 50 00 44 00 49 00 34 00 41 00 56 00 52 00     U.P.D.I.4.A.V.R.
      b0:	2d 00 55 00 53 00 42 00 3a 00 41 00 56 00 52 00     -.U.S.B.:.A.V.R.
      c0:	2d 00 44 00 55 00 3a 00 45 00 44 00 42 00 47 00     -.D.U.:.E.D.B.G.
      d0:	2f 00 43 00 4d 00 53 00 49 00 53 00 2d 00 44 00     /.C.M.S.I.S.-.D.
      e0:	41 00 50 00 00 00                                   A.P...

000000e6 <USB::vstring>:
      e6:	4d 00 75 00 6c 00 74 00 69 00 58 00 2e 00 6a 00     M.u.l.t.i.X...j.
      f6:	70 00 20 00 4f 00 53 00 53 00 57 00 2f 00 4f 00     p. .O.S.S.W./.O.
     106:	53 00 48 00 57 00 20 00 50 00 72 00 6f 00 64 00     S.H.W. .P.r.o.d.
     116:	2e 00 00 00                                         ....

0000011a <USB::report_descriptor>:
     11a:	06 00 ff 09 01 a1 01 15 00 26 ff 00 75 08 96 40     .........&..u..@
     12a:	00 09 01 81 02 96 40 00 09 01 91 02 95 04 09 01     ......@.........
     13a:	b1 02 c0                                            ...

0000013d <USB::current_descriptor>:
     13d:	09 02 6b 00 03 01 00 80 32 09 04 00 00 02 03 00     ..k.....2.......
     14d:	00 00 09 21 11 01 00 01 22 23 00 07 05 02 03 40     ...!...."#.....@
     15d:	00 01 07 05 81 03 40 00 01 08 0b 01 02 02 02 01     ......@.........
     16d:	04 09 04 01 00 01 02 02 01 00 05 24 00 10 01 04     ...........$....
     17d:	24 02 06 05 24 06 01 02 05 24 01 03 02 07 05 82     $...$....$......
     18d:	03 10 00 04 09 04 02 00 02 0a 00 00 00 07 05 03     ................
     19d:	02 40 00 00 07 05 83 02 40 00 00                    .@......@..

000001a8 <USB::qualifier_descriptor>:
     1a8:	0a 06 00 02 ef 02 01 40 00 00                       .......@..

000001b2 <USB::get_descriptor(unsigned char*, unsigned int)::__c>:
     1b2:	20 56 49 44 3a 50 49 44 3d 25 30 34 58 3a 25 30      VID:PID=%04X:%0
     1c2:	34 58 0d 0a 00                                      4X...

000001c7 <USB::device_descriptor>:
     1c7:	12 01 00 02 ef 02 01 40 db 04 15 0b 00 01 01 02     .......@........
     1d7:	03 01                                               ..

000001d9 <USB::request_standard()::__c>:
     1d9:	3c 47 49 3a 25 30 32 58 3e 0d 0a 00                 <GI:%02X>...

000001e5 <USB::request_standard()::__c>:
     1e5:	3c 53 49 3a 30 3e 0d 0a 00                          <SI:0>...

000001ee <USB::request_standard()::__c>:
     1ee:	3c 53 43 3a 25 30 32 58 3e 0d 0a 00                 <SC:%02X>...

000001fa <USB::request_standard()::__c>:
     1fa:	3c 47 43 3a 25 30 32 58 3e 0d 0a 00                 <GC:%02X>...

00000206 <USB::request_standard()::__c>:
     206:	20 55 53 42 30 5f 41 44 44 52 3d 25 64 0d 0a 00      USB0_ADDR=%d...

00000216 <USB::request_standard()::__c>:
     216:	20 53 46 3d 25 30 32 58 3a 25 30 32 58 0d 0a 00      SF=%02X:%02X...

00000226 <USB::request_standard()::__c>:
     226:	20 43 46 3d 25 30 32 58 3a 25 30 32 58 0d 0a 00      CF=%02X:%02X...

00000236 <USB::request_class()::__c>:
     236:	20 53 42 3d 25 30 34 58 0d 0a 00                     SB=%04X...

00000241 <USB::request_class()::__c>:
     241:	20 53 4c 53 3d 25 30 32 58 0d 0a 00                  SLS=%02X...

0000024d <USB::request_class()::__c>:
     24d:	20 47 4c 45 3d 00                                    GLE=.

00000253 <USB::request_class()::__c>:
     253:	20 53 4c 45 3d 00                                    SLE=.

00000259 <USB::request_class()::__c>:
     259:	20 49 44 4c 3d 25 30 32 58 0d 0a 00                  IDL=%02X...

00000265 <USB::ep0_stalled()::__c>:
     265:	5b 53 54 41 4c 4c 45 44 5d 0d 0a 00                 [STALLED]...

00000271 <USB::handling_control_transactions()::__c>:
     271:	52 51 3d 25 30 32 58 3a 25 30 34 58 3a 25 30 32     RQ=%02X:%04X:%02
     281:	58 3a 25 30 32 58 3a 25 30 34 58 3a 25 30 34 58     X:%02X:%04X:%04X
     291:	3a 25 30 34 58 0d 0a 00                             :%04X...

00000299 <SYS::reset_enter()::__c>:
     299:	3c 52 53 54 3a 49 4e 3e 0d 0a 00                    <RST:IN>...

000002a4 <SYS::reset_leave()::__c>:
     2a4:	3c 52 53 54 3a 4f 55 54 3e 0d 0a 00                 <RST:OUT>...

000002b0 <JTAG::dap_command_check()::__c>:
     2b0:	3c 45 44 42 47 5f 45 4d 50 54 59 3e 0d 0a 00        <EDBG_EMPTY>...

000002bf <JTAG::dap_command_check()::__c>:
     2bf:	3c 45 44 42 47 5f 46 41 49 4c 3e 0d 0a 00           <EDBG_FAIL>...

000002cd <JTAG::dap_command_check()::__c>:
     2cd:	3c 45 44 42 47 5f 46 41 49 4c 3e 0d 0a 00           <EDBG_FAIL>...

000002db <JTAG::jtag_scope_general()::__c>:
     2db:	20 47 45 4e 3d 25 30 32 58 3a 25 30 32 58 3a 25      GEN=%02X:%02X:%
     2eb:	30 32 58 0d 0a 00                                   02X...

000002f1 <JTAG::jtag_scope_general()::__c>:
     2f1:	20 47 45 4e 5f 53 49 47 4e 5f 4f 46 46 0d 0a 00      GEN_SIGN_OFF...

00000301 <JTAG::jtag_scope_general()::__c>:
     301:	20 47 45 4e 5f 53 49 47 4e 5f 4f 4e 0d 0a 00         GEN_SIGN_ON...

00000310 <JTAG::jtag_physical>:
     310:	90 28 00 18 38 00 00 00                             .(..8...

00000318 <JTAG::jtag_scope_general()::__c>:
     318:	20 50 48 59 53 49 43 41 4c 3d 25 30 32 58 3a 25      PHYSICAL=%02X:%
     328:	30 32 58 0d 0a 00                                   02X...

0000032e <JTAG::jtag_scope_general()::__c>:
     32e:	20 56 54 41 52 47 45 54 3d 25 64 0d 0a 00            VTARGET=%d...

0000033c <JTAG::jtag_scope_general()::__c>:
     33c:	20 56 45 53 52 49 4f 4e 3d 00                        VESRION=.

00000346 <JTAG::jtag_version>:
     346:	00 01 20 2d 00                                      .. -.

0000034b <JTAG::jtag_scope_general()::__c>:
     34b:	20 47 45 4e 5f 47 45 54 5f 50 41 52 41 4d 3d 25      GEN_GET_PARAM=%
     35b:	30 32 58 3a 25 30 32 58 3a 25 30 32 58 0d 0a 00     02X:%02X:%02X...

0000036b <USART::change_updi()::__c>:
     36b:	20 42 41 55 44 3d 25 30 34 58 3a 25 30 32 58 0d      BAUD=%04X:%02X.
     37b:	0a 00                                               ..

0000037d <USART::change_updi()::__c>:
     37d:	20 55 41 52 54 3d 55 50 44 49 0d 0a 00               UART=UPDI...

0000038a <UPDI::jtag_scope_updi()::__c>:
     38a:	20 55 50 44 49 5f 57 52 49 54 45 3d 25 30 32 58      UPDI_WRITE=%02X
     39a:	3a 25 30 36 6c 58 3a 25 30 34 58 0d 0a 00           :%06lX:%04X...

000003a8 <UPDI::jtag_scope_updi()::__c>:
     3a8:	20 55 50 44 49 5f 52 45 41 44 3d 25 30 32 58 3a      UPDI_READ=%02X:
     3b8:	25 30 36 6c 58 3a 25 30 34 58 0d 0a 00              %06lX:%04X...

000003c5 <UPDI::jtag_scope_updi()::__c>:
     3c5:	20 55 50 44 49 5f 45 52 41 53 45 3d 25 30 32 58      UPDI_ERASE=%02X
     3d5:	3a 25 30 36 6c 58 0d 0a 00                          :%06lX...

000003de <UPDI::jtag_scope_updi()::__c>:
     3de:	20 55 50 44 49 5f 4c 45 41 56 45 5f 50 52 4f 47      UPDI_LEAVE_PROG
     3ee:	0d 0a 00                                            ...

000003f1 <UPDI::jtag_scope_updi()::__c>:
     3f1:	20 55 50 44 49 5f 45 4e 54 45 52 5f 50 52 4f 47      UPDI_ENTER_PROG
     401:	0d 0a 00                                            ...

00000404 <UPDI::jtag_scope_updi()::__c>:
     404:	20 55 50 44 49 5f 53 49 47 4e 5f 4f 46 46 0d 0a      UPDI_SIGN_OFF..
	...

00000415 <UPDI::jtag_scope_updi()::__c>:
     415:	20 55 50 44 49 5f 53 49 47 4e 5f 4f 4e 3d 45 58      UPDI_SIGN_ON=EX
     425:	54 3a 25 30 32 58 0d 0a 00                          T:%02X...

0000042e <_ZZN4JTAG19jtag_scope_avr_coreEvE3__c__12_>:
     42e:	20 58 43 4c 4b 3d 25 64 0d 0a 00                     XCLK=%d...

00000439 <_ZZN4JTAG19jtag_scope_avr_coreEvE3__c__11_>:
     439:	20 43 4f 4e 4e 45 43 54 49 4f 4e 3d 25 30 32 58      CONNECTION=%02X
     449:	0d 0a 00                                            ...

0000044c <_ZZN4JTAG19jtag_scope_avr_coreEvE3__c__10_>:
     44c:	20 41 52 43 48 3d 25 30 32 58 0d 0a 00               ARCH=%02X...

00000459 <JTAG::jtag_scope_avr_core()::__c>:
     459:	20 41 56 52 5f 47 45 54 5f 50 41 52 41 4d 45 54      AVR_GET_PARAMET
     469:	45 52 3d 25 30 32 58 3a 25 30 32 58 3a 25 30 32     ER=%02X:%02X:%02
     479:	58 0d 0a 00                                         X...

0000047d <JTAG::jtag_scope_avr_core()::__c>:
     47d:	20 55 4e 4c 4f 43 4b 45 4e 3d 25 30 32 58 0d 0a      UNLOCKEN=%02X..
	...

0000048e <JTAG::jtag_scope_avr_core()::__c>:
     48e:	20 48 56 43 54 52 4c 45 4e 3d 25 30 32 58 0d 0a      HVCTRLEN=%02X..
	...

0000049f <JTAG::jtag_scope_avr_core()::__c>:
     49f:	20 48 56 54 59 50 45 3d 25 30 32 58 0d 0a 00         HVTYPE=%02X...

000004ae <JTAG::jtag_scope_avr_core()::__c>:
     4ae:	20 44 45 56 49 43 45 44 45 53 43 3d 25 58 0d 0a      DEVICEDESC=%X..
	...

000004bf <JTAG::jtag_scope_avr_core()::__c>:
     4bf:	20 46 49 58 5f 43 4c 4b 3d 25 64 0d 0a 00            FIX_CLK=%d...

000004cd <JTAG::jtag_scope_avr_core()::__c>:
     4cd:	20 58 43 4c 4b 3d 25 64 0d 0a 00                     XCLK=%d...

000004d8 <JTAG::jtag_scope_avr_core()::__c>:
     4d8:	20 43 4f 4e 4e 45 43 54 49 4f 4e 3d 25 30 32 58      CONNECTION=%02X
     4e8:	0d 0a 00                                            ...

000004eb <JTAG::jtag_scope_avr_core()::__c>:
     4eb:	20 53 45 53 53 5f 50 55 52 50 4f 53 45 3d 25 30      SESS_PURPOSE=%0
     4fb:	32 58 0d 0a 00                                      2X...

00000500 <JTAG::jtag_scope_avr_core()::__c>:
     500:	20 41 52 43 48 3d 25 30 32 58 0d 0a 00               ARCH=%02X...

0000050d <JTAG::jtag_scope_avr_core()::__c>:
     50d:	20 41 56 52 5f 53 45 54 5f 50 41 52 41 4d 3d 25      AVR_SET_PARAM=%
     51d:	30 32 58 3a 25 30 32 58 3a 25 30 32 58 3a 25 30     02X:%02X:%02X:%0
     52d:	32 58 0d 0a 00                                      2X...

00000532 <TPI::disconnect()::__c>:
     532:	20 54 50 49 53 52 3c 30 30 0d 0a 00                  TPISR<00...

0000053e <TPI::jtag_scope_tpi()::__c>:
     53e:	20 3c 52 45 53 3a 25 30 32 58 3e 0d 0a 00            <RES:%02X>...

0000054c <TPI::jtag_scope_tpi()::__c>:
     54c:	20 54 50 49 5f 43 52 43 0d 0a 00                     TPI_CRC...

00000557 <TPI::jtag_scope_tpi()::__c>:
     557:	20 54 50 49 5f 52 45 41 44 3d 25 30 32 58 3a 25      TPI_READ=%02X:%
     567:	30 38 6c 58 3a 25 30 34 58 0d 0a 00                 08lX:%04X...

00000573 <TPI::jtag_scope_tpi()::__c>:
     573:	20 54 50 49 5f 57 52 49 54 45 3d 25 30 32 58 3a      TPI_WRITE=%02X:
     583:	25 30 38 6c 58 3a 25 30 34 58 0d 0a 00              %08lX:%04X...

00000590 <TPI::jtag_scope_tpi()::__c>:
     590:	20 54 50 49 5f 45 52 41 53 45 3d 25 30 32 58 3a      TPI_ERASE=%02X:
     5a0:	25 30 38 6c 58 0d 0a 00                             %08lX...

000005a8 <TPI::jtag_scope_tpi()::__c>:
     5a8:	20 54 50 49 5f 4c 45 41 56 45 5f 50 52 4f 47 4d      TPI_LEAVE_PROGM
     5b8:	4f 44 45 0d 0a 00                                   ODE...

000005be <TPI::jtag_scope_tpi()::__c>:
     5be:	20 54 50 49 5f 45 4e 54 45 52 5f 50 52 4f 47 4d      TPI_ENTER_PROGM
     5ce:	4f 44 45 0d 0a 00                                   ODE...

000005d4 <JTAG::jtag_scope_edbg()::__c>:
     5d4:	20 54 41 52 47 45 54 5f 50 4f 57 45 52 3d 25 30      TARGET_POWER=%0
     5e4:	32 58 0d 0a 00                                      2X...

000005e9 <JTAG::jtag_scope_edbg()::__c>:
     5e9:	20 41 56 52 5f 47 45 54 5f 50 41 52 41 4d 3d 25      AVR_GET_PARAM=%
     5f9:	30 32 58 3a 25 30 32 58 3a 25 30 32 58 0d 0a 00     02X:%02X:%02X...

00000609 <JTAG::jtag_scope_edbg()::__c>:
     609:	20 54 41 52 47 45 54 5f 50 4f 57 45 52 3d 25 30      TARGET_POWER=%0
     619:	32 58 0d 0a 00                                      2X...

0000061e <JTAG::jtag_scope_edbg()::__c>:
     61e:	20 41 56 52 5f 53 45 54 5f 50 41 52 41 4d 3d 25      AVR_SET_PARAM=%
     62e:	30 32 58 3a 25 30 32 58 3a 25 30 32 58 3a 25 30     02X:%02X:%02X:%0
     63e:	32 58 0d 0a 00                                      2X...

00000643 <JTAG::jtag_scope_branch()::__c>:
     643:	53 43 4f 50 45 3d 25 30 32 58 2c 43 3d 25 30 32     SCOPE=%02X,C=%02
     653:	58 2c 53 3d 25 30 32 58 2c 4c 3d 25 30 32 58 0d     X,S=%02X,L=%02X.
     663:	0a 00                                               ..

00000665 <main::__c>:
     665:	3c 57 41 49 54 49 4e 47 3e 0d 0a 00                 <WAITING>...

00000671 <main::__c>:
     671:	5f 5f 41 56 52 5f 41 52 43 48 5f 5f 20 3d 20 00     __AVR_ARCH__ = .

00000681 <main::__c>:
     681:	69 6f 61 76 72 36 34 64 75 33 32 2e 68 00           ioavr64du32.h.

0000068f <main::__c>:
     68f:	5f 41 56 52 5f 49 4f 58 58 58 5f 48 5f 20 3d 20     _AVR_IOXXX_H_ = 
	...

000006a0 <main::__c>:
     6a0:	46 5f 43 50 55 20 3d 20 00                          F_CPU = .

000006a9 <main::__c>:
     6a9:	0a 3c 73 74 61 72 74 75 70 3e 00                    .<startup>.

000006b4 <SYS::reboot()::__c>:
     6b4:	3c 52 45 42 4f 4f 54 3e 0d 0a 00                    <REBOOT>...

000006bf <TPI::erase_memory()::__c>:
     6bf:	20 53 45 43 54 49 4f 4e 5f 45 52 41 53 45 3d 25      SECTION_ERASE=%
     6cf:	30 34 58 0d 0a 00                                   04X...

000006d5 <TPI::erase_memory()::__c>:
     6d5:	20 43 48 49 50 5f 45 52 41 53 45 3d 25 30 34 58      CHIP_ERASE=%04X
     6e5:	0d 0a 00                                            ...

000006e8 <USART::change_tpi()::__c>:
     6e8:	20 42 41 55 44 3d 25 30 34 58 3a 25 30 32 58 0d      BAUD=%04X:%02X.
     6f8:	0a 00                                               ..

000006fa <USART::change_tpi()::__c>:
     6fa:	20 55 41 52 54 3d 54 50 49 0d 0a 00                  UART=TPI...

00000706 <TPI::connect()::__c>:
     706:	20 53 49 47 3e 25 30 34 58 3a 25 30 32 58 0d 0a      SIG>%04X:%02X..
	...

00000717 <TPI::connect()::__c>:
     717:	20 53 4b 45 59 0d 0a 00                              SKEY...

0000071f <TPI::connect()::__c>:
     71f:	20 54 50 49 53 52 3e 25 30 32 58 0d 0a 00            TPISR>%02X...

0000072d <TPI::connect()::__c>:
     72d:	20 54 50 49 49 52 3e 25 30 32 58 0d 0a 00            TPIIR>%02X...

0000073b <TPI::connect()::__c>:
     73b:	20 54 50 49 50 43 52 3c 30 35 0d 0a 00               TPIPCR<05...

00000748 <TPI::connect()::__c>:
     748:	3c 48 56 45 4e 3e 0d 0a 00                          <HVEN>...

00000751 <UPDI::set_nvmprog_key(bool)::__c>:
     751:	20 4b 45 59 3d 25 30 32 58 0d 0a 00                  KEY=%02X...

0000075d <UPDI::set_nvmprog_key(bool)::__c>:
     75d:	20 50 52 4f 47 5f 4b 45 59 0d 0a 00                  PROG_KEY...

00000769 <UPDI::set_erase_key()::__c>:
     769:	20 4b 45 59 3d 25 30 32 58 0d 0a 00                  KEY=%02X...

00000775 <UPDI::set_erase_key()::__c>:
     775:	20 45 52 41 53 45 5f 4b 45 59 0d 0a 00               ERASE_KEY...

00000782 <UPDI::chip_erase()::__c>:
     782:	20 50 52 4f 47 53 54 41 52 54 3d 25 30 32 58 0d      PROGSTART=%02X.
     792:	0a 00                                               ..

00000794 <UPDI::chip_erase()::__c>:
     794:	20 3c 53 59 53 3a 25 30 32 58 3e 0d 0a 00            <SYS:%02X>...

000007a2 <UPDI::set_urowwrite_key()::__c>:
     7a2:	20 4b 45 59 3d 25 30 32 58 0d 0a 00                  KEY=%02X...

000007ae <UPDI::set_urowwrite_key()::__c>:
     7ae:	20 55 52 4f 57 5f 4b 45 59 0d 0a 00                  UROW_KEY...

000007ba <UPDI::write_userrow()::__c>:
     7ba:	20 52 45 5f 50 52 4f 47 53 54 41 52 54 3d 25 30      RE_PROGSTART=%0
     7ca:	32 58 0d 0a 00                                      2X...

000007cf <UPDI::write_userrow()::__c>:
     7cf:	20 45 4e 54 45 52 5f 55 52 4f 57 3d 25 30 34 6c      ENTER_UROW=%04l
     7df:	58 3a 25 30 34 58 0d 0a 00                          X:%04X...

000007e8 <UPDI::connect()::__c>:
     7e8:	20 3c 4e 56 4d 3a 25 30 32 58 3e 0d 0a 00            <NVM:%02X>...

000007f6 <UPDI::connect()::__c>:
     7f6:	20 53 49 42 3d 25 73 0d 0a 00                        SIB=%s...

00000800 <UPDI::connect()::__c>:
     800:	3c 53 54 41 54 3a 25 30 32 58 3e 00                 <STAT:%02X>.

0000080c <UPDI::connect()::__c>:
     80c:	3c 50 57 52 53 54 3e 0d 0a 00                       <PWRST>...

00000816 <UPDI::disconnect()::__c>:
     816:	20 3c 52 53 54 3a 25 64 3e 0d 0a 00                  <RST:%d>...

00000822 <UPDI::enter_progmode()::__c>:
     822:	20 50 52 4f 47 53 54 41 52 54 3d 25 30 32 58 0d      PROGSTART=%02X.
     832:	0a 00                                               ..

00000834 <USART::disable_vcp()::__c>:
     834:	20 55 41 52 54 3d 4f 46 46 0d 0a 00                  UART=OFF...

00000840 <USART::change_vcp()::__c>:
     840:	20 55 41 52 54 3d 46 41 49 4c 0d 0a 00               UART=FAIL...

0000084d <USART::change_vcp()::__c>:
     84d:	20 55 41 52 54 3d 56 43 50 0d 0a 00                  UART=VCP...

00000859 <USART::change_vcp()::__c>:
     859:	20 42 41 55 44 3d 25 30 38 6c 58 3a 25 30 32 58      BAUD=%08lX:%02X
     869:	0d 0a 00                                            ...

0000086c <USB::ep_init>:
	...
     874:	00 4b 00 00 16 63 00 00 00 7b 00 00 1e 63 00 00     .K...c...{...c..
	...
     88c:	00 bb 40 00 2e 63 00 00 00 8b 00 00 2e 63 40 00     ..@..c.......c@.
     89c:	00 b9 00 00 1e 63 00 00 00 8b 00 00 6e 63 40 00     .....c......nc@.
     8ac:	02 bb 00 00 ae 63 00 00 00 00                       .....c....

000008b6 <_portmux_usart1c>:
     8b6:	e2 05 18 10 60 04 40 80 77 04                       ....`.@.w.

000008c0 <Timeout::command(unsigned int (*)(), unsigned int)::__c>:
     8c0:	0d 0a 21 54 49 4d 45 4f 55 54 3a 25 30 34 58 3e     ..!TIMEOUT:%04X>
	...

000008d2 <__ctors_start>:
__ctors_start():
     8d2:	c2 15       	cp	r28, r2

000008d4 <__ctors_end>:
__dtors_end():
../../../../crt1/gcrt1.S:230
     8d4:	11 24       	eor	r1, r1
../../../../crt1/gcrt1.S:231
     8d6:	1f be       	out	0x3f, r1	; 63
../../../../crt1/gcrt1.S:232
     8d8:	cf ef       	ldi	r28, 0xFF	; 255
../../../../crt1/gcrt1.S:234
     8da:	cd bf       	out	0x3d, r28	; 61
../../../../crt1/gcrt1.S:236
     8dc:	df e7       	ldi	r29, 0x7F	; 127
../../../../crt1/gcrt1.S:237
     8de:	de bf       	out	0x3e, r29	; 62

000008e0 <setup_mcu()>:
_CLKCTRL_SETUP():
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/modernAVR/0.2.14/cores/modernAVR/api/CLKCTRL_modernAVR.h:301
#else
#assert This internal CPU clock is not supported
#endif

#if defined(_CLKCTRL_FREQSEL_)
  _PROTECTED_WRITE(CLKCTRL_OSCHFCTRLA, _CLKCTRL_FREQSEL_);
     8e0:	88 ed       	ldi	r24, 0xD8	; 216
     8e2:	90 e2       	ldi	r25, 0x20	; 32
     8e4:	84 bf       	out	0x34, r24	; 52
     8e6:	90 93 68 00 	sts	0x0068, r25	; 0x800068 <__TEXT_REGION_LENGTH__+0x7f0068>
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/modernAVR/0.2.14/cores/modernAVR/api/CLKCTRL_modernAVR.h:313
#endif

#if defined(_CLKCTRL_PDIV_)
  _PROTECTED_WRITE(CLKCTRL_MCLKCTRLB, _CLKCTRL_PDIV_ | CLKCTRL_PEN_bm);
#else
  _PROTECTED_WRITE(CLKCTRL_MCLKCTRLB, 0);
     8ea:	90 e0       	ldi	r25, 0x00	; 0
     8ec:	84 bf       	out	0x34, r24	; 52
     8ee:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__TEXT_REGION_LENGTH__+0x7f0061>
initVariant():
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/modernAVR/0.2.14/variants/avr_du32/variant.h:267
extern "C" {
#endif

inline void initVariant (void) {
  _CLKCTRL_SETUP();
  PORTA.PINCONFIG = PORT_ISC_INPUT_DISABLE_gc;
     8f2:	e0 e0       	ldi	r30, 0x00	; 0
     8f4:	f4 e0       	ldi	r31, 0x04	; 4
     8f6:	84 e0       	ldi	r24, 0x04	; 4
     8f8:	83 87       	std	Z+11, r24	; 0x0b
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/modernAVR/0.2.14/variants/avr_du32/variant.h:268
  PORTA.PINCTRLUPD = ~0;
     8fa:	8f ef       	ldi	r24, 0xFF	; 255
     8fc:	84 87       	std	Z+12, r24	; 0x0c
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/modernAVR/0.2.14/variants/avr_du32/variant.h:269
  PORTC.PINCTRLUPD = ~0;
     8fe:	80 93 4c 04 	sts	0x044C, r24	; 0x80044c <__TEXT_REGION_LENGTH__+0x7f044c>
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/modernAVR/0.2.14/variants/avr_du32/variant.h:270
  PORTD.PINCTRLUPD = ~0;
     902:	80 93 6c 04 	sts	0x046C, r24	; 0x80046c <__TEXT_REGION_LENGTH__+0x7f046c>
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/modernAVR/0.2.14/variants/avr_du32/variant.h:271
  PORTF.PINCTRLUPD = ~0;
     906:	80 93 ac 04 	sts	0x04AC, r24	; 0x8004ac <__TEXT_REGION_LENGTH__+0x7f04ac>

0000090a <__do_copy_data>:
__do_copy_data():
     90a:	10 e6       	ldi	r17, 0x60	; 96
     90c:	a0 e0       	ldi	r26, 0x00	; 0
     90e:	b0 e6       	ldi	r27, 0x60	; 96
     910:	e4 e6       	ldi	r30, 0x64	; 100
     912:	f9 e4       	ldi	r31, 0x49	; 73
     914:	02 c0       	rjmp	.+4      	; 0x91a <__do_copy_data+0x10>
     916:	05 90       	lpm	r0, Z+
     918:	0d 92       	st	X+, r0
     91a:	a4 38       	cpi	r26, 0x84	; 132
     91c:	b1 07       	cpc	r27, r17
     91e:	d9 f7       	brne	.-10     	; 0x916 <__do_copy_data+0xc>

00000920 <__do_clear_bss>:
__do_clear_bss():
     920:	20 e6       	ldi	r18, 0x60	; 96
     922:	a4 e8       	ldi	r26, 0x84	; 132
     924:	b0 e6       	ldi	r27, 0x60	; 96
     926:	01 c0       	rjmp	.+2      	; 0x92a <.do_clear_bss_start>

00000928 <.do_clear_bss_loop>:
     928:	1d 92       	st	X+, r1

0000092a <.do_clear_bss_start>:
     92a:	a4 39       	cpi	r26, 0x94	; 148
     92c:	b2 07       	cpc	r27, r18
     92e:	e1 f7       	brne	.-8      	; 0x928 <.do_clear_bss_loop>

00000930 <__do_global_ctors>:
__do_global_ctors():
     930:	14 e0       	ldi	r17, 0x04	; 4
     932:	ca e6       	ldi	r28, 0x6A	; 106
     934:	d4 e0       	ldi	r29, 0x04	; 4
     936:	04 c0       	rjmp	.+8      	; 0x940 <__do_global_ctors+0x10>
     938:	21 97       	sbiw	r28, 0x01	; 1
     93a:	fe 01       	movw	r30, r28
     93c:	0e 94 8d 24 	call	0x491a	; 0x491a <__tablejump2__>
     940:	c9 36       	cpi	r28, 0x69	; 105
     942:	d1 07       	cpc	r29, r17
     944:	c9 f7       	brne	.-14     	; 0x938 <__do_global_ctors+0x8>
../../../../crt1/gcrt1.S:314
     946:	0e 94 d1 15 	call	0x2ba2	; 0x2ba2 <main>
../../../../crt1/gcrt1.S:315
     94a:	0c 94 b0 24 	jmp	0x4960	; 0x4960 <_exit>

0000094e <__bad_interrupt>:
__vector_22():
../../../../crt1/gcrt1.S:209
     94e:	58 cb       	rjmp	.-2384   	; 0x0 <__vectors>

00000950 <printf_putchar(char, __file*)>:
printf_putchar():
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/modernAVR/0.2.14/cores/modernAVR/api/cpp/Print_format.cpp:22
/*
 * Format Printable
 */

static int printf_putchar (char _c, FILE *_fp) {
  return ((class Print *)(fdev_get_udata(_fp)))->write((uint8_t) _c);
     950:	fb 01       	movw	r30, r22
     952:	a4 85       	ldd	r26, Z+12	; 0x0c
     954:	b5 85       	ldd	r27, Z+13	; 0x0d
     956:	ed 91       	ld	r30, X+
     958:	fc 91       	ld	r31, X
     95a:	11 97       	sbiw	r26, 0x01	; 1
     95c:	01 90       	ld	r0, Z+
     95e:	f0 81       	ld	r31, Z
     960:	e0 2d       	mov	r30, r0
     962:	68 2f       	mov	r22, r24
     964:	cd 01       	movw	r24, r26
     966:	09 94       	ijmp

00000968 <SYS::send_bitmap(unsigned char const*, unsigned int) [clone .constprop.10]>:
send_bitmap():
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/sys.cpp:292

  /*** Low level TDAT stream manipulation ***/
  /* UPDI commands are sent from TDAT using only TCA0 and bit manipulation, without switching USART. */
  /* 128kbps is the lowest limit that can be achieved with an 8-bit timer at 32MHz or less. */
  void send_bitmap (const uint8_t _bitmap[], const size_t _length) {
    TCA0_SPLIT_HPER  = TCA0_225K;
     968:	88 e5       	ldi	r24, 0x58	; 88
     96a:	80 93 27 0a 	sts	0x0A27, r24	; 0x800a27 <__TEXT_REGION_LENGTH__+0x7f0a27>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/sys.cpp:293
    TCA0_SPLIT_CTRLA = TCA_SPLIT_ENABLE_bm | TCA_SPLIT_CLKSEL_DIV1_gc;
     96e:	81 e0       	ldi	r24, 0x01	; 1
     970:	80 93 00 0a 	sts	0x0A00, r24	; 0x800a00 <__TEXT_REGION_LENGTH__+0x7f0a00>
     974:	90 e0       	ldi	r25, 0x00	; 0
     976:	80 e0       	ldi	r24, 0x00	; 0
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/sys.cpp:295
    for (uint8_t i = 0; i < _length; i++) {
      uint8_t _d = (_bitmap[i >> 3]) >> (i & 7);
     978:	fc 01       	movw	r30, r24
     97a:	23 e0       	ldi	r18, 0x03	; 3
     97c:	f5 95       	asr	r31
     97e:	e7 95       	ror	r30
     980:	2a 95       	dec	r18
     982:	e1 f7       	brne	.-8      	; 0x97c <SYS::send_bitmap(unsigned char const*, unsigned int) [clone .constprop.10]+0x14>
     984:	e6 5e       	subi	r30, 0xE6	; 230
     986:	ff 49       	sbci	r31, 0x9F	; 159
     988:	20 81       	ld	r18, Z
     98a:	30 e0       	ldi	r19, 0x00	; 0
     98c:	48 2f       	mov	r20, r24
     98e:	47 70       	andi	r20, 0x07	; 7
     990:	02 c0       	rjmp	.+4      	; 0x996 <SYS::send_bitmap(unsigned char const*, unsigned int) [clone .constprop.10]+0x2e>
     992:	35 95       	asr	r19
     994:	27 95       	ror	r18
     996:	4a 95       	dec	r20
     998:	e2 f7       	brpl	.-8      	; 0x992 <SYS::send_bitmap(unsigned char const*, unsigned int) [clone .constprop.10]+0x2a>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/sys.cpp:296
      loop_until_bit_is_set(TCA0_SPLIT_INTFLAGS, TCA_SPLIT_HUNF_bp);
     99a:	40 91 0b 0a 	lds	r20, 0x0A0B	; 0x800a0b <__TEXT_REGION_LENGTH__+0x7f0a0b>
     99e:	41 ff       	sbrs	r20, 1
     9a0:	fc cf       	rjmp	.-8      	; 0x99a <SYS::send_bitmap(unsigned char const*, unsigned int) [clone .constprop.10]+0x32>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/sys.cpp:297
      if (bit_is_set(_d, 0))
     9a2:	20 ff       	sbrs	r18, 0
     9a4:	0d c0       	rjmp	.+26     	; 0x9c0 <SYS::send_bitmap(unsigned char const*, unsigned int) [clone .constprop.10]+0x58>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/sys.cpp:298
        openDrainWriteMacro(PIN_PGM_TDAT, HIGH);
     9a6:	00 98       	cbi	0x00, 0	; 0
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/sys.cpp:301
      else
        openDrainWriteMacro(PIN_PGM_TDAT, LOW);
      bit_set(TCA0_SPLIT_INTFLAGS, TCA_SPLIT_HUNF_bp);
     9a8:	20 91 0b 0a 	lds	r18, 0x0A0B	; 0x800a0b <__TEXT_REGION_LENGTH__+0x7f0a0b>
     9ac:	22 60       	ori	r18, 0x02	; 2
     9ae:	20 93 0b 0a 	sts	0x0A0B, r18	; 0x800a0b <__TEXT_REGION_LENGTH__+0x7f0a0b>
     9b2:	01 96       	adiw	r24, 0x01	; 1
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/sys.cpp:294
  /* UPDI commands are sent from TDAT using only TCA0 and bit manipulation, without switching USART. */
  /* 128kbps is the lowest limit that can be achieved with an 8-bit timer at 32MHz or less. */
  void send_bitmap (const uint8_t _bitmap[], const size_t _length) {
    TCA0_SPLIT_HPER  = TCA0_225K;
    TCA0_SPLIT_CTRLA = TCA_SPLIT_ENABLE_bm | TCA_SPLIT_CLKSEL_DIV1_gc;
    for (uint8_t i = 0; i < _length; i++) {
     9b4:	80 39       	cpi	r24, 0x90	; 144
     9b6:	91 05       	cpc	r25, r1
     9b8:	f9 f6       	brne	.-66     	; 0x978 <SYS::send_bitmap(unsigned char const*, unsigned int) [clone .constprop.10]+0x10>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/sys.cpp:303
        openDrainWriteMacro(PIN_PGM_TDAT, HIGH);
      else
        openDrainWriteMacro(PIN_PGM_TDAT, LOW);
      bit_set(TCA0_SPLIT_INTFLAGS, TCA_SPLIT_HUNF_bp);
    }
    TCA0_SPLIT_CTRLA = 0;
     9ba:	10 92 00 0a 	sts	0x0A00, r1	; 0x800a00 <__TEXT_REGION_LENGTH__+0x7f0a00>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/sys.cpp:304
  }
     9be:	08 95       	ret
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/sys.cpp:300
      uint8_t _d = (_bitmap[i >> 3]) >> (i & 7);
      loop_until_bit_is_set(TCA0_SPLIT_INTFLAGS, TCA_SPLIT_HUNF_bp);
      if (bit_is_set(_d, 0))
        openDrainWriteMacro(PIN_PGM_TDAT, HIGH);
      else
        openDrainWriteMacro(PIN_PGM_TDAT, LOW);
     9c0:	00 9a       	sbi	0x00, 0	; 0
     9c2:	f2 cf       	rjmp	.-28     	; 0x9a8 <SYS::send_bitmap(unsigned char const*, unsigned int) [clone .constprop.10]+0x40>

000009c4 <btoh>:
btoh():
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/modernAVR/0.2.14/cores/modernAVR/api/cpp/btools.cpp:69
    _p++; _r--;
  }
}

char btoh (uint8_t _x) {
  _x = (_x & 15) + '0';
     9c4:	98 2f       	mov	r25, r24
     9c6:	9f 70       	andi	r25, 0x0F	; 15
     9c8:	80 e3       	ldi	r24, 0x30	; 48
     9ca:	89 0f       	add	r24, r25
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/modernAVR/0.2.14/cores/modernAVR/api/cpp/btools.cpp:70
  if (_x > '9') _x += 7;
     9cc:	8a 33       	cpi	r24, 0x3A	; 58
     9ce:	10 f0       	brcs	.+4      	; 0x9d4 <btoh+0x10>
     9d0:	87 e3       	ldi	r24, 0x37	; 55
     9d2:	89 0f       	add	r24, r25
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/modernAVR/0.2.14/cores/modernAVR/api/cpp/btools.cpp:77
  // static char PROGMEM _hex[] = {
  //   '0','1','2','3','4','5','6','7',
  //   '8','9','A','B','C','D','E','F'
  // };
  // return pgm_read_byte(&_hex[_x & 15]);
}
     9d4:	08 95       	ret

000009d6 <UsartBaseClass::write(unsigned char)>:
write():
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/modernAVR/0.2.14/cores/modernAVR/api/cpp/UsartBaseClass.cpp:18
#if !defined(__AVR_TINY__)

#include "../UsartBaseClass.h"

size_t UsartBaseClass::write (const uint8_t _c) {
  loop_until_bit_is_set(usart->STATUS, USART_DREIF_bp);
     9d6:	dc 01       	movw	r26, r24
     9d8:	12 96       	adiw	r26, 0x02	; 2
     9da:	ed 91       	ld	r30, X+
     9dc:	fc 91       	ld	r31, X
     9de:	24 81       	ldd	r18, Z+4	; 0x04
     9e0:	25 ff       	sbrs	r18, 5
     9e2:	fd cf       	rjmp	.-6      	; 0x9de <UsartBaseClass::write(unsigned char)+0x8>
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/modernAVR/0.2.14/cores/modernAVR/api/cpp/UsartBaseClass.cpp:19
  usart->STATUS = USART_TXCIF_bm;
     9e4:	20 e4       	ldi	r18, 0x40	; 64
     9e6:	24 83       	std	Z+4, r18	; 0x04
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/modernAVR/0.2.14/cores/modernAVR/api/cpp/UsartBaseClass.cpp:20
  usart->TXDATAL = _c;
     9e8:	dc 01       	movw	r26, r24
     9ea:	12 96       	adiw	r26, 0x02	; 2
     9ec:	ed 91       	ld	r30, X+
     9ee:	fc 91       	ld	r31, X
     9f0:	62 83       	std	Z+2, r22	; 0x02
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/modernAVR/0.2.14/cores/modernAVR/api/cpp/UsartBaseClass.cpp:22
  return 1;
}
     9f2:	81 e0       	ldi	r24, 0x01	; 1
     9f4:	90 e0       	ldi	r25, 0x00	; 0
     9f6:	08 95       	ret

000009f8 <USB::ep_cdo_listen()>:
ep_cdo_listen():
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/usb.cpp:353
    loop_until_bit_is_clear(USB0_INTFLAGSB, USB_RMWBUSY_bp);
    USB_EP_STATUS_CLR(USB_EP_CDI) = ~USB_TOGGLE_bm;
  }

  void ep_cdo_listen (void) {
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
     9f8:	8f b7       	in	r24, 0x3f	; 63
__iCliRetVal():
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/tools/avr-gcc/7.3.0-avr8-gnu-toolchain/avr/include/util/atomic.h:50
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     9fa:	f8 94       	cli
ep_cdo_listen():
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/usb.cpp:354
      _recv_count = 0;
     9fc:	10 92 30 64 	sts	0x6430, r1	; 0x806430 <_recv_count>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/usb.cpp:355
      EP_CDO.CNT  = 0;
     a00:	10 92 6e 64 	sts	0x646E, r1	; 0x80646e <EP_TABLE+0x3a>
     a04:	10 92 6f 64 	sts	0x646F, r1	; 0x80646f <EP_TABLE+0x3b>
__iRestore():
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/tools/avr-gcc/7.3.0-avr8-gnu-toolchain/avr/include/util/atomic.h:70
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     a08:	8f bf       	out	0x3f, r24	; 63
ep_cdo_listen():
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/usb.cpp:357
    }
    loop_until_bit_is_clear(USB0_INTFLAGSB, USB_RMWBUSY_bp);
     a0a:	80 91 0b 0c 	lds	r24, 0x0C0B	; 0x800c0b <__TEXT_REGION_LENGTH__+0x7f0c0b>
     a0e:	82 fd       	sbrc	r24, 2
     a10:	fc cf       	rjmp	.-8      	; 0xa0a <USB::ep_cdo_listen()+0x12>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/usb.cpp:358
    USB_EP_STATUS_CLR(USB_EP_CDO) = ~USB_TOGGLE_bm;
     a12:	8e ef       	ldi	r24, 0xFE	; 254
     a14:	80 93 4c 0c 	sts	0x0C4C, r24	; 0x800c4c <__TEXT_REGION_LENGTH__+0x7f0c4c>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/usb.cpp:359
  }
     a18:	08 95       	ret

00000a1a <USB::ep_cdi_listen()>:
ep_cdi_listen():
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/usb.cpp:328
  #else
    /* If our math is correct, then if each side of the double */
    /* buffer can complete the transmission of 64 characters   */
    /* in 1 ms, then it can support 640 kbps. */
    if (bit_is_clear(GPCONF, GPCONF_OPN_bp)
     || bit_is_clear(EP_CDI.STATUS, USB_BUSNAK_bp)) {
     a1a:	e4 9b       	sbis	0x1c, 4	; 28
     a1c:	0b c0       	rjmp	.+22     	; 0xa34 <USB::ep_cdi_listen()+0x1a>
     a1e:	80 91 74 64 	lds	r24, 0x6474	; 0x806474 <EP_TABLE+0x40>
     a22:	81 ff       	sbrs	r24, 1
     a24:	07 c0       	rjmp	.+14     	; 0xa34 <USB::ep_cdi_listen()+0x1a>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/usb.cpp:339
  #endif
    D2PRINTF(" VI=%02X:", _send_count);
    D2PRINTHEX(bit_is_set(GPCONF, GPCONF_DBL_bp)
      ? &EP_MEM.cdi_data[64]
      : &EP_MEM.cdi_data[0], _send_count);
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
     a26:	2f b7       	in	r18, 0x3f	; 63
__iCliRetVal():
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/tools/avr-gcc/7.3.0-avr8-gnu-toolchain/avr/include/util/atomic.h:50
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     a28:	f8 94       	cli
ep_cdi_listen():
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/usb.cpp:341
      EP_CDI.DATAPTR = bit_is_set(GPCONF, GPCONF_DBL_bp)
        ? (register16_t)&EP_MEM.cdi_data[64]
     a2a:	e2 99       	sbic	0x1c, 2	; 28
     a2c:	0a c0       	rjmp	.+20     	; 0xa42 <USB::ep_cdi_listen()+0x28>
     a2e:	8e ea       	ldi	r24, 0xAE	; 174
     a30:	93 e6       	ldi	r25, 0x63	; 99
     a32:	09 c0       	rjmp	.+18     	; 0xa46 <USB::ep_cdi_listen()+0x2c>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/usb.cpp:331
    /* in 1 ms, then it can support 640 kbps. */
    if (bit_is_clear(GPCONF, GPCONF_OPN_bp)
     || bit_is_clear(EP_CDI.STATUS, USB_BUSNAK_bp)) {
      /* No sending allowed while port is closed.  */
      /* If the buffer overflows, it is discarded. */
      if (_send_count == 64) _send_count = 0;
     a34:	80 91 31 64 	lds	r24, 0x6431	; 0x806431 <_send_count>
     a38:	80 34       	cpi	r24, 0x40	; 64
     a3a:	11 f5       	brne	.+68     	; 0xa80 <USB::ep_cdi_listen()+0x66>
     a3c:	10 92 31 64 	sts	0x6431, r1	; 0x806431 <_send_count>
     a40:	08 95       	ret
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/usb.cpp:341
    D2PRINTHEX(bit_is_set(GPCONF, GPCONF_DBL_bp)
      ? &EP_MEM.cdi_data[64]
      : &EP_MEM.cdi_data[0], _send_count);
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
      EP_CDI.DATAPTR = bit_is_set(GPCONF, GPCONF_DBL_bp)
        ? (register16_t)&EP_MEM.cdi_data[64]
     a42:	8e ee       	ldi	r24, 0xEE	; 238
     a44:	93 e6       	ldi	r25, 0x63	; 99
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/usb.cpp:340
    D2PRINTF(" VI=%02X:", _send_count);
    D2PRINTHEX(bit_is_set(GPCONF, GPCONF_DBL_bp)
      ? &EP_MEM.cdi_data[64]
      : &EP_MEM.cdi_data[0], _send_count);
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
      EP_CDI.DATAPTR = bit_is_set(GPCONF, GPCONF_DBL_bp)
     a46:	80 93 78 64 	sts	0x6478, r24	; 0x806478 <EP_TABLE+0x44>
     a4a:	90 93 79 64 	sts	0x6479, r25	; 0x806479 <EP_TABLE+0x45>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/usb.cpp:343
        ? (register16_t)&EP_MEM.cdi_data[64]
        : (register16_t)&EP_MEM.cdi_data[0];
      EP_CDI.CNT = _send_count;
     a4e:	80 91 31 64 	lds	r24, 0x6431	; 0x806431 <_send_count>
     a52:	90 e0       	ldi	r25, 0x00	; 0
     a54:	80 93 76 64 	sts	0x6476, r24	; 0x806476 <EP_TABLE+0x42>
     a58:	90 93 77 64 	sts	0x6477, r25	; 0x806477 <EP_TABLE+0x43>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/usb.cpp:344
      EP_CDI.MCNT = 0;
     a5c:	10 92 7a 64 	sts	0x647A, r1	; 0x80647a <EP_TABLE+0x46>
     a60:	10 92 7b 64 	sts	0x647B, r1	; 0x80647b <EP_TABLE+0x47>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/usb.cpp:345
      _send_count = 0;
     a64:	10 92 31 64 	sts	0x6431, r1	; 0x806431 <_send_count>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/usb.cpp:346
      GPCONF ^= GPCONF_DBL_bm;
     a68:	8c b3       	in	r24, 0x1c	; 28
     a6a:	94 e0       	ldi	r25, 0x04	; 4
     a6c:	89 27       	eor	r24, r25
     a6e:	8c bb       	out	0x1c, r24	; 28
__iRestore():
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/tools/avr-gcc/7.3.0-avr8-gnu-toolchain/avr/include/util/atomic.h:70
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     a70:	2f bf       	out	0x3f, r18	; 63
ep_cdi_listen():
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/usb.cpp:348
    }
    loop_until_bit_is_clear(USB0_INTFLAGSB, USB_RMWBUSY_bp);
     a72:	80 91 0b 0c 	lds	r24, 0x0C0B	; 0x800c0b <__TEXT_REGION_LENGTH__+0x7f0c0b>
     a76:	82 fd       	sbrc	r24, 2
     a78:	fc cf       	rjmp	.-8      	; 0xa72 <USB::ep_cdi_listen()+0x58>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/usb.cpp:349
    USB_EP_STATUS_CLR(USB_EP_CDI) = ~USB_TOGGLE_bm;
     a7a:	8e ef       	ldi	r24, 0xFE	; 254
     a7c:	80 93 4e 0c 	sts	0x0C4E, r24	; 0x800c4e <__TEXT_REGION_LENGTH__+0x7f0c4e>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/usb.cpp:350
  }
     a80:	08 95       	ret

00000a82 <USB::ep_res_listen()>:
ep_res_listen():
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/usb.cpp:273
    loop_until_bit_is_clear(USB0_INTFLAGSB, USB_RMWBUSY_bp);
    USB_EP_STATUS_CLR(USB_EP_REQ) = ~USB_TOGGLE_bm;
  }

  void ep_res_listen (void) {
    EP_RES.MCNT = 0;
     a82:	10 92 4a 64 	sts	0x644A, r1	; 0x80644a <EP_TABLE+0x16>
     a86:	10 92 4b 64 	sts	0x644B, r1	; 0x80644b <EP_TABLE+0x17>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/usb.cpp:274
    loop_until_bit_is_clear(USB0_INTFLAGSB, USB_RMWBUSY_bp);
     a8a:	80 91 0b 0c 	lds	r24, 0x0C0B	; 0x800c0b <__TEXT_REGION_LENGTH__+0x7f0c0b>
     a8e:	82 fd       	sbrc	r24, 2
     a90:	fc cf       	rjmp	.-8      	; 0xa8a <USB::ep_res_listen()+0x8>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/usb.cpp:275
    USB_EP_STATUS_CLR(USB_EP_RES) = ~USB_TOGGLE_bm;
     a92:	8e ef       	ldi	r24, 0xFE	; 254
     a94:	80 93 42 0c 	sts	0x0C42, r24	; 0x800c42 <__TEXT_REGION_LENGTH__+0x7f0c42>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/usb.cpp:276
  }
     a98:	08 95       	ret

00000a9a <USB::ep_req_listen()>:
ep_req_listen():
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/usb.cpp:267
  void ep_cci_pending (void) { loop_until_bit_is_set(EP_CCI.STATUS, USB_BUSNAK_bp); }
  void ep_cdo_pending (void) { loop_until_bit_is_set(EP_CDO.STATUS, USB_BUSNAK_bp); }
  void ep_cdi_pending (void) { loop_until_bit_is_set(EP_CDI.STATUS, USB_BUSNAK_bp); }

  void ep_req_listen (void) {
    EP_REQ.CNT = 0;
     a9a:	10 92 3e 64 	sts	0x643E, r1	; 0x80643e <EP_TABLE+0xa>
     a9e:	10 92 3f 64 	sts	0x643F, r1	; 0x80643f <EP_TABLE+0xb>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/usb.cpp:268
    loop_until_bit_is_clear(USB0_INTFLAGSB, USB_RMWBUSY_bp);
     aa2:	80 91 0b 0c 	lds	r24, 0x0C0B	; 0x800c0b <__TEXT_REGION_LENGTH__+0x7f0c0b>
     aa6:	82 fd       	sbrc	r24, 2
     aa8:	fc cf       	rjmp	.-8      	; 0xaa2 <USB::ep_req_listen()+0x8>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/usb.cpp:269
    USB_EP_STATUS_CLR(USB_EP_REQ) = ~USB_TOGGLE_bm;
     aaa:	8e ef       	ldi	r24, 0xFE	; 254
     aac:	80 93 40 0c 	sts	0x0C40, r24	; 0x800c40 <__TEXT_REGION_LENGTH__+0x7f0c40>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/usb.cpp:270
  }
     ab0:	08 95       	ret

00000ab2 <USART::drain(unsigned int)>:
drain():
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/usart.cpp:42
    return _baud;
  }

  void drain (size_t _delay) {
    do {
      if (bit_is_set(USART0_STATUS, USART_RXCIF_bp)) {
     ab2:	20 91 04 08 	lds	r18, 0x0804	; 0x800804 <__TEXT_REGION_LENGTH__+0x7f0804>
     ab6:	27 ff       	sbrs	r18, 7
     ab8:	04 c0       	rjmp	.+8      	; 0xac2 <USART::drain(unsigned int)+0x10>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/usart.cpp:46
        __asm__ __volatile__ (
          "LDS R0, 0x0801\n"  /* drop USART0_RXDATAH */
          "LDS R0, 0x0800\n"  /* drop USART0_RXDATAL */
        );
     aba:	00 90 01 08 	lds	r0, 0x0801	; 0x800801 <__TEXT_REGION_LENGTH__+0x7f0801>
     abe:	00 90 00 08 	lds	r0, 0x0800	; 0x800800 <__TEXT_REGION_LENGTH__+0x7f0800>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/usart.cpp:48
      }
    } while (--_delay);
     ac2:	01 97       	sbiw	r24, 0x01	; 1
     ac4:	b1 f7       	brne	.-20     	; 0xab2 <USART::drain(unsigned int)>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/usart.cpp:49
  }
     ac6:	08 95       	ret

00000ac8 <USART::calk_baud_khz(unsigned int)>:
calk_baud_khz():
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/usart.cpp:34
    pinModeMacro(PIN_PGM_TRST, INPUT_PULLUP); /* USART0_ALT3 or USART0_DEFAULT */
  }

  /*** Calculate the baud rate for VCP asynchronous mode. ***/
  uint16_t calk_baud_khz (uint16_t _khz) {
    uint32_t _baud = ((F_CPU / 1000L * 8L) / _khz + 1) / 2;
     ac8:	9c 01       	movw	r18, r24
     aca:	50 e0       	ldi	r21, 0x00	; 0
     acc:	40 e0       	ldi	r20, 0x00	; 0
     ace:	60 e0       	ldi	r22, 0x00	; 0
     ad0:	71 e7       	ldi	r23, 0x71	; 113
     ad2:	82 e0       	ldi	r24, 0x02	; 2
     ad4:	90 e0       	ldi	r25, 0x00	; 0
     ad6:	0e 94 6a 24 	call	0x48d4	; 0x48d4 <__divmodsi4>
     ada:	da 01       	movw	r26, r20
     adc:	c9 01       	movw	r24, r18
     ade:	01 96       	adiw	r24, 0x01	; 1
     ae0:	a1 1d       	adc	r26, r1
     ae2:	b1 1d       	adc	r27, r1
     ae4:	b5 95       	asr	r27
     ae6:	a7 95       	ror	r26
     ae8:	97 95       	ror	r25
     aea:	87 95       	ror	r24
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/usart.cpp:35
    if (_baud < 64) _baud = 64;
     aec:	80 34       	cpi	r24, 0x40	; 64
     aee:	91 05       	cpc	r25, r1
     af0:	a1 05       	cpc	r26, r1
     af2:	b1 05       	cpc	r27, r1
     af4:	54 f0       	brlt	.+20     	; 0xb0a <USART::calk_baud_khz(unsigned int)+0x42>
     af6:	00 97       	sbiw	r24, 0x00	; 0
     af8:	21 e0       	ldi	r18, 0x01	; 1
     afa:	a2 07       	cpc	r26, r18
     afc:	b1 05       	cpc	r27, r1
     afe:	48 f0       	brcs	.+18     	; 0xb12 <USART::calk_baud_khz(unsigned int)+0x4a>
     b00:	8f ef       	ldi	r24, 0xFF	; 255
     b02:	9f ef       	ldi	r25, 0xFF	; 255
     b04:	a0 e0       	ldi	r26, 0x00	; 0
     b06:	b0 e0       	ldi	r27, 0x00	; 0
     b08:	08 95       	ret
     b0a:	80 e4       	ldi	r24, 0x40	; 64
     b0c:	90 e0       	ldi	r25, 0x00	; 0
     b0e:	a0 e0       	ldi	r26, 0x00	; 0
     b10:	b0 e0       	ldi	r27, 0x00	; 0
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/usart.cpp:38
    else if (_baud > 0xFFFFU) _baud = 0xFFFF;
    return _baud;
  }
     b12:	08 95       	ret

00000b14 <NVM::V1::prog_init()>:
prog_init():
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/nvmv1.cpp:30
 * This file is a template for the future.
 */

namespace NVM::V1 {

  size_t prog_init (void) { return 0; }
     b14:	90 e0       	ldi	r25, 0x00	; 0
     b16:	80 e0       	ldi	r24, 0x00	; 0
     b18:	08 95       	ret

00000b1a <UPDI::recv()>:
recv():
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/updi.cpp:72
    send(0x00);
    USART0_BAUD = USART::calk_baud_khz(_xclk);
  }

  bool recv (void) {
    loop_until_bit_is_set(USART0_STATUS, USART_RXCIF_bp);
     b1a:	80 91 04 08 	lds	r24, 0x0804	; 0x800804 <__TEXT_REGION_LENGTH__+0x7f0804>
     b1e:	87 ff       	sbrs	r24, 7
     b20:	fc cf       	rjmp	.-8      	; 0xb1a <UPDI::recv()>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/updi.cpp:73
    RXSTAT = USART0_RXDATAH ^ 0x80;
     b22:	80 91 01 08 	lds	r24, 0x0801	; 0x800801 <__TEXT_REGION_LENGTH__+0x7f0801>
     b26:	80 58       	subi	r24, 0x80	; 128
     b28:	8e bb       	out	0x1e, r24	; 30
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/updi.cpp:74
    RXDATA = USART0_RXDATAL;
     b2a:	80 91 00 08 	lds	r24, 0x0800	; 0x800800 <__TEXT_REGION_LENGTH__+0x7f0800>
     b2e:	8f bb       	out	0x1f, r24	; 31
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/updi.cpp:75
    return RXSTAT == 0 || send_break();
     b30:	8e b3       	in	r24, 0x1e	; 30
     b32:	88 23       	and	r24, r24
     b34:	11 f1       	breq	.+68     	; 0xb7a <UPDI::recv()+0x60>
send_break():
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/updi.cpp:57
    0x55, 0x04        /* LD,ST PTR++ DATA1,2 */
  };

  bool send_break (void) {
    D2PRINTF("<BRK>");
    USART0_BAUD = USART0_BAUD + (USART0_BAUD >> 2);
     b36:	20 91 08 08 	lds	r18, 0x0808	; 0x800808 <__TEXT_REGION_LENGTH__+0x7f0808>
     b3a:	30 91 09 08 	lds	r19, 0x0809	; 0x800809 <__TEXT_REGION_LENGTH__+0x7f0809>
     b3e:	80 91 08 08 	lds	r24, 0x0808	; 0x800808 <__TEXT_REGION_LENGTH__+0x7f0808>
     b42:	90 91 09 08 	lds	r25, 0x0809	; 0x800809 <__TEXT_REGION_LENGTH__+0x7f0809>
     b46:	96 95       	lsr	r25
     b48:	87 95       	ror	r24
     b4a:	96 95       	lsr	r25
     b4c:	87 95       	ror	r24
     b4e:	82 0f       	add	r24, r18
     b50:	93 1f       	adc	r25, r19
     b52:	80 93 08 08 	sts	0x0808, r24	; 0x800808 <__TEXT_REGION_LENGTH__+0x7f0808>
     b56:	90 93 09 08 	sts	0x0809, r25	; 0x800809 <__TEXT_REGION_LENGTH__+0x7f0809>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/updi.cpp:58
    send(0x00);
     b5a:	80 e0       	ldi	r24, 0x00	; 0
     b5c:	10 d0       	rcall	.+32     	; 0xb7e <UPDI::send(unsigned char)>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/updi.cpp:59
    USART0_BAUD = USART::calk_baud_khz(_xclk);
     b5e:	80 91 18 60 	lds	r24, 0x6018	; 0x806018 <_xclk>
     b62:	90 91 19 60 	lds	r25, 0x6019	; 0x806019 <_xclk+0x1>
     b66:	b0 df       	rcall	.-160    	; 0xac8 <USART::calk_baud_khz(unsigned int)>
     b68:	80 93 08 08 	sts	0x0808, r24	; 0x800808 <__TEXT_REGION_LENGTH__+0x7f0808>
     b6c:	90 93 09 08 	sts	0x0809, r25	; 0x800809 <__TEXT_REGION_LENGTH__+0x7f0809>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/updi.cpp:60
    USART::drain();
     b70:	90 e0       	ldi	r25, 0x00	; 0
     b72:	80 e0       	ldi	r24, 0x00	; 0
     b74:	9e df       	rcall	.-196    	; 0xab2 <USART::drain(unsigned int)>
     b76:	80 e0       	ldi	r24, 0x00	; 0
     b78:	08 95       	ret
recv():
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/updi.cpp:75

  bool recv (void) {
    loop_until_bit_is_set(USART0_STATUS, USART_RXCIF_bp);
    RXSTAT = USART0_RXDATAH ^ 0x80;
    RXDATA = USART0_RXDATAL;
    return RXSTAT == 0 || send_break();
     b7a:	81 e0       	ldi	r24, 0x01	; 1
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/updi.cpp:76
  }
     b7c:	08 95       	ret

00000b7e <UPDI::send(unsigned char)>:
send():
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/updi.cpp:90

  bool is_ack (void) {
    return recv() && 0x40 == RXDATA;
  }

  bool send (const uint8_t _data) {
     b7e:	cf 93       	push	r28
     b80:	c8 2f       	mov	r28, r24
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/updi.cpp:91
    loop_until_bit_is_set(USART0_STATUS, USART_DREIF_bp);
     b82:	80 91 04 08 	lds	r24, 0x0804	; 0x800804 <__TEXT_REGION_LENGTH__+0x7f0804>
     b86:	85 ff       	sbrs	r24, 5
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/updi.cpp:92
    USART0_TXDATAL = _data;
     b88:	fc cf       	rjmp	.-8      	; 0xb82 <UPDI::send(unsigned char)+0x4>
     b8a:	c0 93 02 08 	sts	0x0802, r28	; 0x800802 <__TEXT_REGION_LENGTH__+0x7f0802>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/updi.cpp:93
    return recv() && _data == RXDATA;
     b8e:	c5 df       	rcall	.-118    	; 0xb1a <UPDI::recv()>
     b90:	88 23       	and	r24, r24
     b92:	21 f0       	breq	.+8      	; 0xb9c <UPDI::send(unsigned char)+0x1e>
     b94:	9f b3       	in	r25, 0x1f	; 31
     b96:	81 e0       	ldi	r24, 0x01	; 1
     b98:	9c 13       	cpse	r25, r28
     b9a:	80 e0       	ldi	r24, 0x00	; 0
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/updi.cpp:94
  }
     b9c:	cf 91       	pop	r28
     b9e:	08 95       	ret

00000ba0 <UPDI::send_bytes(unsigned char const*, unsigned int)>:
send_bytes():
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/updi.cpp:96

  bool send_bytes (const uint8_t* _data, size_t _len) {
     ba0:	0f 93       	push	r16
     ba2:	1f 93       	push	r17
     ba4:	cf 93       	push	r28
     ba6:	df 93       	push	r29
     ba8:	eb 01       	movw	r28, r22
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/updi.cpp:98
    do {
      if (!send(*_data++)) return false;
     baa:	8c 01       	movw	r16, r24
     bac:	f8 01       	movw	r30, r16
     bae:	81 91       	ld	r24, Z+
     bb0:	8f 01       	movw	r16, r30
     bb2:	e5 df       	rcall	.-54     	; 0xb7e <UPDI::send(unsigned char)>
     bb4:	88 23       	and	r24, r24
     bb6:	11 f0       	breq	.+4      	; 0xbbc <UPDI::send_bytes(unsigned char const*, unsigned int)+0x1c>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/updi.cpp:99
    } while (--_len);
     bb8:	21 97       	sbiw	r28, 0x01	; 1
     bba:	c1 f7       	brne	.-16     	; 0xbac <UPDI::send_bytes(unsigned char const*, unsigned int)+0xc>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/updi.cpp:101
    return true;
  }
     bbc:	df 91       	pop	r29
     bbe:	cf 91       	pop	r28
     bc0:	1f 91       	pop	r17
     bc2:	0f 91       	pop	r16
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/updi.cpp:233
    return send_bytes(_key_stat, 2) && recv();
  }

  bool sys_status (void) {
    const static uint8_t _sys_stat[] = {0x55, 0x8B};
    return send_bytes(_sys_stat, 2) && recv();
     bc4:	08 95       	ret

00000bc6 <UPDI::sys_status()>:
sys_status():
     bc6:	62 e0       	ldi	r22, 0x02	; 2
     bc8:	70 e0       	ldi	r23, 0x00	; 0
     bca:	81 e4       	ldi	r24, 0x41	; 65
     bcc:	90 e6       	ldi	r25, 0x60	; 96
     bce:	e8 df       	rcall	.-48     	; 0xba0 <UPDI::send_bytes(unsigned char const*, unsigned int)>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/updi.cpp:117
  bool recv_byte (uint32_t _dwAddr) {
    static uint8_t _set_ptr[] = {
      0x55, 0x08, 0, 0, 0, 0  /* LDS ADDR3 DATA1 */
    };
    _CAPS32(_set_ptr[2])->dword = _dwAddr;
    return send_bytes(_set_ptr, 5) && recv();
     bd0:	81 11       	cpse	r24, r1
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/updi.cpp:234
  }

  bool sys_status (void) {
    const static uint8_t _sys_stat[] = {0x55, 0x8B};
    return send_bytes(_sys_stat, 2) && recv();
  }
     bd2:	a3 cf       	rjmp	.-186    	; 0xb1a <UPDI::recv()>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/updi.cpp:228
    return send_byte(0x1000, _nvmcmd);  /* NVMCTRL_CTRLA */
  }

  bool key_status (void) {
    const static uint8_t _key_stat[] = {0x55, 0x87};
    return send_bytes(_key_stat, 2) && recv();
     bd4:	80 e0       	ldi	r24, 0x00	; 0
     bd6:	08 95       	ret

00000bd8 <UPDI::key_status()>:
key_status():
     bd8:	62 e0       	ldi	r22, 0x02	; 2
     bda:	70 e0       	ldi	r23, 0x00	; 0
     bdc:	8f e3       	ldi	r24, 0x3F	; 63
     bde:	90 e6       	ldi	r25, 0x60	; 96
     be0:	df df       	rcall	.-66     	; 0xba0 <UPDI::send_bytes(unsigned char const*, unsigned int)>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/updi.cpp:117
  bool recv_byte (uint32_t _dwAddr) {
    static uint8_t _set_ptr[] = {
      0x55, 0x08, 0, 0, 0, 0  /* LDS ADDR3 DATA1 */
    };
    _CAPS32(_set_ptr[2])->dword = _dwAddr;
    return send_bytes(_set_ptr, 5) && recv();
     be2:	81 11       	cpse	r24, r1
     be4:	9a cf       	rjmp	.-204    	; 0xb1a <UPDI::recv()>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/updi.cpp:229
  }

  bool key_status (void) {
    const static uint8_t _key_stat[] = {0x55, 0x87};
    return send_bytes(_key_stat, 2) && recv();
  }
     be6:	80 e0       	ldi	r24, 0x00	; 0
     be8:	08 95       	ret

00000bea <UPDI::recv_byte(unsigned long)>:
recv_byte():
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/updi.cpp:116
  /* The acquired data is stored in RXDATA.    */
  bool recv_byte (uint32_t _dwAddr) {
    static uint8_t _set_ptr[] = {
      0x55, 0x08, 0, 0, 0, 0  /* LDS ADDR3 DATA1 */
    };
    _CAPS32(_set_ptr[2])->dword = _dwAddr;
     bea:	60 93 03 60 	sts	0x6003, r22	; 0x806003 <UPDI::recv_byte(unsigned long)::_set_ptr+0x2>
     bee:	70 93 04 60 	sts	0x6004, r23	; 0x806004 <UPDI::recv_byte(unsigned long)::_set_ptr+0x3>
     bf2:	80 93 05 60 	sts	0x6005, r24	; 0x806005 <UPDI::recv_byte(unsigned long)::_set_ptr+0x4>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/updi.cpp:117
    return send_bytes(_set_ptr, 5) && recv();
     bf6:	90 93 06 60 	sts	0x6006, r25	; 0x806006 <UPDI::recv_byte(unsigned long)::_set_ptr+0x5>
     bfa:	65 e0       	ldi	r22, 0x05	; 5
     bfc:	70 e0       	ldi	r23, 0x00	; 0
     bfe:	81 e0       	ldi	r24, 0x01	; 1
     c00:	90 e6       	ldi	r25, 0x60	; 96
     c02:	ce df       	rcall	.-100    	; 0xba0 <UPDI::send_bytes(unsigned char const*, unsigned int)>
     c04:	81 11       	cpse	r24, r1
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/updi.cpp:118
  }
     c06:	89 cf       	rjmp	.-238    	; 0xb1a <UPDI::recv()>
     c08:	80 e0       	ldi	r24, 0x00	; 0
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/updi.cpp:87
    } while (--_len);
    return true;
  }

  bool is_ack (void) {
    return recv() && 0x40 == RXDATA;
     c0a:	08 95       	ret

00000c0c <UPDI::is_ack()>:
is_ack():
     c0c:	86 df       	rcall	.-244    	; 0xb1a <UPDI::recv()>
     c0e:	88 23       	and	r24, r24
     c10:	29 f0       	breq	.+10     	; 0xc1c <UPDI::is_ack()+0x10>
     c12:	9f b3       	in	r25, 0x1f	; 31
     c14:	81 e0       	ldi	r24, 0x01	; 1
     c16:	90 34       	cpi	r25, 0x40	; 64
     c18:	09 f0       	breq	.+2      	; 0xc1c <UPDI::is_ack()+0x10>
     c1a:	80 e0       	ldi	r24, 0x00	; 0
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/updi.cpp:88
  }
     c1c:	08 95       	ret

00000c1e <UPDI::send_words_block(unsigned long, unsigned int)>:
send_words_block():
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/updi.cpp:196
      && send_bytes(_set_repeat, sizeof(_set_repeat))
      && send_bytes_fill(_wLength)
      && clear_rsd();
  }

  bool send_words_block (uint32_t _dwAddr, size_t _wLength) {
     c1e:	cf 93       	push	r28
     c20:	df 93       	push	r29
     c22:	ea 01       	movw	r28, r20
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/updi.cpp:199
    /* This function works in word units up to 256 words, */
    /* and will round down any fractional words.          */
    _CAPS32(_set_ptr24[2])->dword = _dwAddr;
     c24:	60 93 14 60 	sts	0x6014, r22	; 0x806014 <UPDI::_set_ptr24+0x2>
     c28:	70 93 15 60 	sts	0x6015, r23	; 0x806015 <UPDI::_set_ptr24+0x3>
     c2c:	80 93 16 60 	sts	0x6016, r24	; 0x806016 <UPDI::_set_ptr24+0x4>
     c30:	90 93 17 60 	sts	0x6017, r25	; 0x806017 <UPDI::_set_ptr24+0x5>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/updi.cpp:200
    _set_repeat[2] = (_wLength >> 1) - 1;
     c34:	ca 01       	movw	r24, r20
     c36:	96 95       	lsr	r25
     c38:	87 95       	ror	r24
     c3a:	81 50       	subi	r24, 0x01	; 1
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/updi.cpp:201
    _set_repeat[4] = 0x65;  /* ST PTR++ DATA2 */
     c3c:	80 93 0f 60 	sts	0x600F, r24	; 0x80600f <UPDI::_set_repeat+0x2>
     c40:	85 e6       	ldi	r24, 0x65	; 101
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/updi.cpp:202
    return send_bytes(_set_ptr24, 5)
     c42:	80 93 11 60 	sts	0x6011, r24	; 0x806011 <UPDI::_set_repeat+0x4>
     c46:	65 e0       	ldi	r22, 0x05	; 5
     c48:	70 e0       	ldi	r23, 0x00	; 0
     c4a:	82 e1       	ldi	r24, 0x12	; 18
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/updi.cpp:207
      && is_ack()
      && set_rsd()
      && send_bytes(_set_repeat, sizeof(_set_repeat))
      && send_bytes(&packet.out.memData[0], _wLength & ~1)
      && clear_rsd();
     c4c:	90 e6       	ldi	r25, 0x60	; 96
     c4e:	a8 df       	rcall	.-176    	; 0xba0 <UPDI::send_bytes(unsigned char const*, unsigned int)>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/updi.cpp:203
    /* and will round down any fractional words.          */
    _CAPS32(_set_ptr24[2])->dword = _dwAddr;
    _set_repeat[2] = (_wLength >> 1) - 1;
    _set_repeat[4] = 0x65;  /* ST PTR++ DATA2 */
    return send_bytes(_set_ptr24, 5)
      && is_ack()
     c50:	88 23       	and	r24, r24
     c52:	f9 f0       	breq	.+62     	; 0xc92 <UPDI::send_words_block(unsigned long, unsigned int)+0x74>
     c54:	db df       	rcall	.-74     	; 0xc0c <UPDI::is_ack()>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/updi.cpp:142
    return send_bytes(_reset, _leave ? 9 : 6);
  }

  bool set_rsd (void) {
    const static uint8_t _set_rsd[] = {0x55, 0xC2, 0x0D};
    return send_bytes(_set_rsd, 3);
     c56:	88 23       	and	r24, r24
     c58:	e1 f0       	breq	.+56     	; 0xc92 <UPDI::send_words_block(unsigned long, unsigned int)+0x74>
set_rsd():
     c5a:	63 e0       	ldi	r22, 0x03	; 3
     c5c:	70 e0       	ldi	r23, 0x00	; 0
     c5e:	89 e3       	ldi	r24, 0x39	; 57
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/updi.cpp:204
    _CAPS32(_set_ptr24[2])->dword = _dwAddr;
    _set_repeat[2] = (_wLength >> 1) - 1;
    _set_repeat[4] = 0x65;  /* ST PTR++ DATA2 */
    return send_bytes(_set_ptr24, 5)
      && is_ack()
      && set_rsd()
     c60:	90 e6       	ldi	r25, 0x60	; 96
     c62:	9e df       	rcall	.-196    	; 0xba0 <UPDI::send_bytes(unsigned char const*, unsigned int)>
send_words_block():
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/updi.cpp:205
      && send_bytes(_set_repeat, sizeof(_set_repeat))
     c64:	88 23       	and	r24, r24
     c66:	a9 f0       	breq	.+42     	; 0xc92 <UPDI::send_words_block(unsigned long, unsigned int)+0x74>
     c68:	65 e0       	ldi	r22, 0x05	; 5
     c6a:	70 e0       	ldi	r23, 0x00	; 0
     c6c:	8d e0       	ldi	r24, 0x0D	; 13
     c6e:	90 e6       	ldi	r25, 0x60	; 96
     c70:	97 df       	rcall	.-210    	; 0xba0 <UPDI::send_bytes(unsigned char const*, unsigned int)>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/updi.cpp:206
      && send_bytes(&packet.out.memData[0], _wLength & ~1)
     c72:	88 23       	and	r24, r24
     c74:	71 f0       	breq	.+28     	; 0xc92 <UPDI::send_words_block(unsigned long, unsigned int)+0x74>
     c76:	be 01       	movw	r22, r28
     c78:	6e 7f       	andi	r22, 0xFE	; 254
     c7a:	8f ed       	ldi	r24, 0xDF	; 223
     c7c:	90 e6       	ldi	r25, 0x60	; 96
     c7e:	90 df       	rcall	.-224    	; 0xba0 <UPDI::send_bytes(unsigned char const*, unsigned int)>
     c80:	88 23       	and	r24, r24
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/updi.cpp:147
    return send_bytes(_set_rsd, 3);
  }

  bool clear_rsd (void) {
    const static uint8_t _clear_rsd[] = {0x55, 0xC2, 0x05};
    return send_bytes(_clear_rsd, 3);
     c82:	39 f0       	breq	.+14     	; 0xc92 <UPDI::send_words_block(unsigned long, unsigned int)+0x74>
clear_rsd():
     c84:	63 e0       	ldi	r22, 0x03	; 3
     c86:	70 e0       	ldi	r23, 0x00	; 0
     c88:	8c e3       	ldi	r24, 0x3C	; 60
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/updi.cpp:208
      && is_ack()
      && set_rsd()
      && send_bytes(_set_repeat, sizeof(_set_repeat))
      && send_bytes(&packet.out.memData[0], _wLength & ~1)
      && clear_rsd();
  }
     c8a:	90 e6       	ldi	r25, 0x60	; 96
send_words_block():
     c8c:	df 91       	pop	r29
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/updi.cpp:147
    return send_bytes(_set_rsd, 3);
  }

  bool clear_rsd (void) {
    const static uint8_t _clear_rsd[] = {0x55, 0xC2, 0x05};
    return send_bytes(_clear_rsd, 3);
     c8e:	cf 91       	pop	r28
clear_rsd():
     c90:	87 cf       	rjmp	.-242    	; 0xba0 <UPDI::send_bytes(unsigned char const*, unsigned int)>
send_words_block():
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/updi.cpp:208
      && is_ack()
      && set_rsd()
      && send_bytes(_set_repeat, sizeof(_set_repeat))
      && send_bytes(&packet.out.memData[0], _wLength & ~1)
      && clear_rsd();
  }
     c92:	80 e0       	ldi	r24, 0x00	; 0
     c94:	df 91       	pop	r29
     c96:	cf 91       	pop	r28
     c98:	08 95       	ret

00000c9a <UPDI::send_bytes_block(unsigned long, unsigned int)>:
send_bytes_block():
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/updi.cpp:172
      && is_ack()
      && send_bytes(_set_repeat, sizeof(_set_repeat))
      && recv_bytes(&packet.in.data[0], _wLength & ~1);
  }

  bool send_bytes_block (uint32_t _dwAddr, size_t _wLength) {
     c9a:	cf 93       	push	r28
     c9c:	df 93       	push	r29
     c9e:	ea 01       	movw	r28, r20
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/updi.cpp:173
    _CAPS32(_set_ptr24[2])->dword = _dwAddr;
     ca0:	60 93 14 60 	sts	0x6014, r22	; 0x806014 <UPDI::_set_ptr24+0x2>
     ca4:	70 93 15 60 	sts	0x6015, r23	; 0x806015 <UPDI::_set_ptr24+0x3>
     ca8:	80 93 16 60 	sts	0x6016, r24	; 0x806016 <UPDI::_set_ptr24+0x4>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/updi.cpp:174
    _set_repeat[2] = _wLength - 1;
     cac:	90 93 17 60 	sts	0x6017, r25	; 0x806017 <UPDI::_set_ptr24+0x5>
     cb0:	8f ef       	ldi	r24, 0xFF	; 255
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/updi.cpp:175
    _set_repeat[4] = 0x64;  /* ST PTR++ DATA1 */
     cb2:	84 0f       	add	r24, r20
     cb4:	80 93 0f 60 	sts	0x600F, r24	; 0x80600f <UPDI::_set_repeat+0x2>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/updi.cpp:176
    return send_bytes(_set_ptr24, 5)
     cb8:	84 e6       	ldi	r24, 0x64	; 100
     cba:	80 93 11 60 	sts	0x6011, r24	; 0x806011 <UPDI::_set_repeat+0x4>
     cbe:	65 e0       	ldi	r22, 0x05	; 5
     cc0:	70 e0       	ldi	r23, 0x00	; 0
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/updi.cpp:181
      && is_ack()
      && set_rsd()
      && send_bytes(_set_repeat, sizeof(_set_repeat))
      && send_bytes(&packet.out.memData[0], _wLength)
      && clear_rsd();
     cc2:	82 e1       	ldi	r24, 0x12	; 18
     cc4:	90 e6       	ldi	r25, 0x60	; 96
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/updi.cpp:177
  bool send_bytes_block (uint32_t _dwAddr, size_t _wLength) {
    _CAPS32(_set_ptr24[2])->dword = _dwAddr;
    _set_repeat[2] = _wLength - 1;
    _set_repeat[4] = 0x64;  /* ST PTR++ DATA1 */
    return send_bytes(_set_ptr24, 5)
      && is_ack()
     cc6:	6c df       	rcall	.-296    	; 0xba0 <UPDI::send_bytes(unsigned char const*, unsigned int)>
     cc8:	88 23       	and	r24, r24
     cca:	f1 f0       	breq	.+60     	; 0xd08 <UPDI::send_bytes_block(unsigned long, unsigned int)+0x6e>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/updi.cpp:142
    return send_bytes(_reset, _leave ? 9 : 6);
  }

  bool set_rsd (void) {
    const static uint8_t _set_rsd[] = {0x55, 0xC2, 0x0D};
    return send_bytes(_set_rsd, 3);
     ccc:	9f df       	rcall	.-194    	; 0xc0c <UPDI::is_ack()>
     cce:	88 23       	and	r24, r24
     cd0:	d9 f0       	breq	.+54     	; 0xd08 <UPDI::send_bytes_block(unsigned long, unsigned int)+0x6e>
set_rsd():
     cd2:	63 e0       	ldi	r22, 0x03	; 3
     cd4:	70 e0       	ldi	r23, 0x00	; 0
     cd6:	89 e3       	ldi	r24, 0x39	; 57
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/updi.cpp:178
    _CAPS32(_set_ptr24[2])->dword = _dwAddr;
    _set_repeat[2] = _wLength - 1;
    _set_repeat[4] = 0x64;  /* ST PTR++ DATA1 */
    return send_bytes(_set_ptr24, 5)
      && is_ack()
      && set_rsd()
     cd8:	90 e6       	ldi	r25, 0x60	; 96
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/updi.cpp:179
      && send_bytes(_set_repeat, sizeof(_set_repeat))
     cda:	62 df       	rcall	.-316    	; 0xba0 <UPDI::send_bytes(unsigned char const*, unsigned int)>
send_bytes_block():
     cdc:	88 23       	and	r24, r24
     cde:	a1 f0       	breq	.+40     	; 0xd08 <UPDI::send_bytes_block(unsigned long, unsigned int)+0x6e>
     ce0:	65 e0       	ldi	r22, 0x05	; 5
     ce2:	70 e0       	ldi	r23, 0x00	; 0
     ce4:	8d e0       	ldi	r24, 0x0D	; 13
     ce6:	90 e6       	ldi	r25, 0x60	; 96
     ce8:	5b df       	rcall	.-330    	; 0xba0 <UPDI::send_bytes(unsigned char const*, unsigned int)>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/updi.cpp:180
      && send_bytes(&packet.out.memData[0], _wLength)
     cea:	88 23       	and	r24, r24
     cec:	69 f0       	breq	.+26     	; 0xd08 <UPDI::send_bytes_block(unsigned long, unsigned int)+0x6e>
     cee:	be 01       	movw	r22, r28
     cf0:	8f ed       	ldi	r24, 0xDF	; 223
     cf2:	90 e6       	ldi	r25, 0x60	; 96
     cf4:	55 df       	rcall	.-342    	; 0xba0 <UPDI::send_bytes(unsigned char const*, unsigned int)>
     cf6:	88 23       	and	r24, r24
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/updi.cpp:147
    return send_bytes(_set_rsd, 3);
  }

  bool clear_rsd (void) {
    const static uint8_t _clear_rsd[] = {0x55, 0xC2, 0x05};
    return send_bytes(_clear_rsd, 3);
     cf8:	39 f0       	breq	.+14     	; 0xd08 <UPDI::send_bytes_block(unsigned long, unsigned int)+0x6e>
clear_rsd():
     cfa:	63 e0       	ldi	r22, 0x03	; 3
     cfc:	70 e0       	ldi	r23, 0x00	; 0
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/updi.cpp:182
      && is_ack()
      && set_rsd()
      && send_bytes(_set_repeat, sizeof(_set_repeat))
      && send_bytes(&packet.out.memData[0], _wLength)
      && clear_rsd();
  }
     cfe:	8c e3       	ldi	r24, 0x3C	; 60
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/updi.cpp:147
    return send_bytes(_set_rsd, 3);
  }

  bool clear_rsd (void) {
    const static uint8_t _clear_rsd[] = {0x55, 0xC2, 0x05};
    return send_bytes(_clear_rsd, 3);
     d00:	90 e6       	ldi	r25, 0x60	; 96
send_bytes_block():
     d02:	df 91       	pop	r29
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/updi.cpp:182
      && is_ack()
      && set_rsd()
      && send_bytes(_set_repeat, sizeof(_set_repeat))
      && send_bytes(&packet.out.memData[0], _wLength)
      && clear_rsd();
  }
     d04:	cf 91       	pop	r28
clear_rsd():
     d06:	4c cf       	rjmp	.-360    	; 0xba0 <UPDI::send_bytes(unsigned char const*, unsigned int)>
send_bytes_block():
     d08:	80 e0       	ldi	r24, 0x00	; 0
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/updi.cpp:120
    };
    _CAPS32(_set_ptr[2])->dword = _dwAddr;
    return send_bytes(_set_ptr, 5) && recv();
  }

  bool send_byte (uint32_t _dwAddr, uint8_t _data) {
     d0a:	df 91       	pop	r29
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/updi.cpp:124
    static uint8_t _set_ptr[] = {
      0x55, 0x48, 0, 0, 0, 0  /* STS ADDR3 DATA1 */
    };
    _CAPS32(_set_ptr[2])->dword = _dwAddr;
     d0c:	cf 91       	pop	r28
     d0e:	08 95       	ret

00000d10 <UPDI::send_byte(unsigned long, unsigned char)>:
send_byte():
     d10:	cf 93       	push	r28
     d12:	c4 2f       	mov	r28, r20
     d14:	60 93 09 60 	sts	0x6009, r22	; 0x806009 <UPDI::send_byte(unsigned long, unsigned char)::_set_ptr+0x2>
     d18:	70 93 0a 60 	sts	0x600A, r23	; 0x80600a <UPDI::send_byte(unsigned long, unsigned char)::_set_ptr+0x3>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/updi.cpp:125
    return send_bytes(_set_ptr, 5)
     d1c:	80 93 0b 60 	sts	0x600B, r24	; 0x80600b <UPDI::send_byte(unsigned long, unsigned char)::_set_ptr+0x4>
     d20:	90 93 0c 60 	sts	0x600C, r25	; 0x80600c <UPDI::send_byte(unsigned long, unsigned char)::_set_ptr+0x5>
     d24:	65 e0       	ldi	r22, 0x05	; 5
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/updi.cpp:128
      && is_ack()
      && send(_data)
      && is_ack();
     d26:	70 e0       	ldi	r23, 0x00	; 0
     d28:	87 e0       	ldi	r24, 0x07	; 7
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/updi.cpp:126
    static uint8_t _set_ptr[] = {
      0x55, 0x48, 0, 0, 0, 0  /* STS ADDR3 DATA1 */
    };
    _CAPS32(_set_ptr[2])->dword = _dwAddr;
    return send_bytes(_set_ptr, 5)
      && is_ack()
     d2a:	90 e6       	ldi	r25, 0x60	; 96
     d2c:	39 df       	rcall	.-398    	; 0xba0 <UPDI::send_bytes(unsigned char const*, unsigned int)>
     d2e:	88 23       	and	r24, r24
     d30:	49 f0       	breq	.+18     	; 0xd44 <UPDI::send_byte(unsigned long, unsigned char)+0x34>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/updi.cpp:127
      && send(_data)
     d32:	6c df       	rcall	.-296    	; 0xc0c <UPDI::is_ack()>
     d34:	88 23       	and	r24, r24
     d36:	31 f0       	breq	.+12     	; 0xd44 <UPDI::send_byte(unsigned long, unsigned char)+0x34>
     d38:	8c 2f       	mov	r24, r28
     d3a:	21 df       	rcall	.-446    	; 0xb7e <UPDI::send(unsigned char)>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/updi.cpp:129
      && is_ack();
  }
     d3c:	88 23       	and	r24, r24
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/updi.cpp:128
    };
    _CAPS32(_set_ptr[2])->dword = _dwAddr;
    return send_bytes(_set_ptr, 5)
      && is_ack()
      && send(_data)
      && is_ack();
     d3e:	11 f0       	breq	.+4      	; 0xd44 <UPDI::send_byte(unsigned long, unsigned char)+0x34>
     d40:	cf 91       	pop	r28
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/updi.cpp:129
  }
     d42:	64 cf       	rjmp	.-312    	; 0xc0c <UPDI::is_ack()>
     d44:	80 e0       	ldi	r24, 0x00	; 0
     d46:	cf 91       	pop	r28
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/updi.cpp:223
    /* This slow process is due to USERROW and BOOTROW. */
    return send_bytes_data(_dwAddr, &packet.out.memData[0], _wLength);
  }

  bool nvm_ctrl (uint8_t _nvmcmd) {
    return send_byte(0x1000, _nvmcmd);  /* NVMCTRL_CTRLA */
     d48:	08 95       	ret

00000d4a <UPDI::nvm_ctrl(unsigned char)>:
nvm_ctrl():
     d4a:	48 2f       	mov	r20, r24
     d4c:	60 e0       	ldi	r22, 0x00	; 0
     d4e:	70 e1       	ldi	r23, 0x10	; 16
     d50:	80 e0       	ldi	r24, 0x00	; 0
     d52:	90 e0       	ldi	r25, 0x00	; 0
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/updi.cpp:217
      if (!send_byte(_dwAddr++, *_data++)) return false;
    }
    return true;
  }

  bool send_bytes_block_slow (uint32_t _dwAddr, size_t _wLength) {
     d54:	dd cf       	rjmp	.-70     	; 0xd10 <UPDI::send_byte(unsigned long, unsigned char)>

00000d56 <UPDI::send_bytes_block_slow(unsigned long, unsigned int)>:
send_bytes_block_slow():
     d56:	cf 92       	push	r12
     d58:	df 92       	push	r13
     d5a:	ef 92       	push	r14
     d5c:	ff 92       	push	r15
     d5e:	0f 93       	push	r16
     d60:	1f 93       	push	r17
     d62:	cf 93       	push	r28
     d64:	df 93       	push	r29
     d66:	ce ec       	ldi	r28, 0xCE	; 206
     d68:	d0 e6       	ldi	r29, 0x60	; 96
     d6a:	8a 01       	movw	r16, r20
     d6c:	02 53       	subi	r16, 0x32	; 50
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/updi.cpp:211
      && send_bytes(&packet.out.memData[0], _wLength & ~1)
      && clear_rsd();
  }

  bool send_bytes_data (uint32_t _dwAddr, uint8_t* _data, size_t _wLength) {
    for (size_t _i = 0; _i < _wLength; _i++) {
     d6e:	1f 49       	sbci	r17, 0x9F	; 159
send_bytes_data():
     d70:	c0 17       	cp	r28, r16
     d72:	d1 07       	cpc	r29, r17
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/updi.cpp:212
      if (!send_byte(_dwAddr++, *_data++)) return false;
     d74:	c1 f0       	breq	.+48     	; 0xda6 <UPDI::send_bytes_block_slow(unsigned long, unsigned int)+0x50>
     d76:	6b 01       	movw	r12, r22
     d78:	7c 01       	movw	r14, r24
     d7a:	2f ef       	ldi	r18, 0xFF	; 255
     d7c:	c2 1a       	sub	r12, r18
     d7e:	d2 0a       	sbc	r13, r18
     d80:	e2 0a       	sbc	r14, r18
     d82:	f2 0a       	sbc	r15, r18
     d84:	49 89       	ldd	r20, Y+17	; 0x11
     d86:	c4 df       	rcall	.-120    	; 0xd10 <UPDI::send_byte(unsigned long, unsigned char)>
     d88:	21 96       	adiw	r28, 0x01	; 1
     d8a:	81 11       	cpse	r24, r1
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/updi.cpp:220
  }

  bool send_bytes_block_slow (uint32_t _dwAddr, size_t _wLength) {
    /* This slow process is due to USERROW and BOOTROW. */
    return send_bytes_data(_dwAddr, &packet.out.memData[0], _wLength);
  }
     d8c:	09 c0       	rjmp	.+18     	; 0xda0 <UPDI::send_bytes_block_slow(unsigned long, unsigned int)+0x4a>
send_bytes_block_slow():
     d8e:	df 91       	pop	r29
     d90:	cf 91       	pop	r28
     d92:	1f 91       	pop	r17
     d94:	0f 91       	pop	r16
     d96:	ff 90       	pop	r15
     d98:	ef 90       	pop	r14
     d9a:	df 90       	pop	r13
     d9c:	cf 90       	pop	r12
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/updi.cpp:212
      && clear_rsd();
  }

  bool send_bytes_data (uint32_t _dwAddr, uint8_t* _data, size_t _wLength) {
    for (size_t _i = 0; _i < _wLength; _i++) {
      if (!send_byte(_dwAddr++, *_data++)) return false;
     d9e:	08 95       	ret
     da0:	c7 01       	movw	r24, r14
     da2:	b6 01       	movw	r22, r12
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/updi.cpp:214
    }
    return true;
     da4:	e5 cf       	rjmp	.-54     	; 0xd70 <UPDI::send_bytes_block_slow(unsigned long, unsigned int)+0x1a>
     da6:	81 e0       	ldi	r24, 0x01	; 1
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/updi.cpp:78
    RXSTAT = USART0_RXDATAH ^ 0x80;
    RXDATA = USART0_RXDATAL;
    return RXSTAT == 0 || send_break();
  }

  bool recv_bytes (uint8_t* _data, size_t _len) {
     da8:	f2 cf       	rjmp	.-28     	; 0xd8e <UPDI::send_bytes_block_slow(unsigned long, unsigned int)+0x38>

00000daa <UPDI::recv_bytes(unsigned char*, unsigned int)>:
recv_bytes():
     daa:	0f 93       	push	r16
     dac:	1f 93       	push	r17
     dae:	cf 93       	push	r28
     db0:	df 93       	push	r29
     db2:	eb 01       	movw	r28, r22
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/updi.cpp:80
    do {
      if (!recv()) return false;
     db4:	8c 01       	movw	r16, r24
     db6:	b1 de       	rcall	.-670    	; 0xb1a <UPDI::recv()>
     db8:	88 23       	and	r24, r24
     dba:	31 f0       	breq	.+12     	; 0xdc8 <UPDI::recv_bytes(unsigned char*, unsigned int)+0x1e>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/updi.cpp:81
      *_data++ = RXDATA;
     dbc:	9f b3       	in	r25, 0x1f	; 31
     dbe:	f8 01       	movw	r30, r16
     dc0:	91 93       	st	Z+, r25
     dc2:	8f 01       	movw	r16, r30
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/updi.cpp:82
    } while (--_len);
     dc4:	21 97       	sbiw	r28, 0x01	; 1
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/updi.cpp:84
    return true;
  }
     dc6:	b9 f7       	brne	.-18     	; 0xdb6 <UPDI::recv_bytes(unsigned char*, unsigned int)+0xc>
     dc8:	df 91       	pop	r29
     dca:	cf 91       	pop	r28
     dcc:	1f 91       	pop	r17
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/updi.cpp:160
      && is_ack()
      && send_bytes(_set_repeat, sizeof(_set_repeat))
      && recv_bytes(&packet.in.data[0], _wLength);
  }

  bool recv_words_block (uint32_t _dwAddr, size_t _wLength) {
     dce:	0f 91       	pop	r16
     dd0:	08 95       	ret

00000dd2 <UPDI::recv_words_block(unsigned long, unsigned int)>:
recv_words_block():
     dd2:	cf 93       	push	r28
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/updi.cpp:163
    /* This function works in word units up to 256 words, */
    /* and will round down any fractional words.          */
    _CAPS32(_set_ptr24[2])->dword = _dwAddr;
     dd4:	df 93       	push	r29
     dd6:	ea 01       	movw	r28, r20
     dd8:	60 93 14 60 	sts	0x6014, r22	; 0x806014 <UPDI::_set_ptr24+0x2>
     ddc:	70 93 15 60 	sts	0x6015, r23	; 0x806015 <UPDI::_set_ptr24+0x3>
     de0:	80 93 16 60 	sts	0x6016, r24	; 0x806016 <UPDI::_set_ptr24+0x4>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/updi.cpp:164
    _set_repeat[2] = (_wLength >> 1) - 1;
     de4:	90 93 17 60 	sts	0x6017, r25	; 0x806017 <UPDI::_set_ptr24+0x5>
     de8:	ca 01       	movw	r24, r20
     dea:	96 95       	lsr	r25
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/updi.cpp:165
    _set_repeat[4] = 0x25;  /* LD PTR++ DATA2 */
     dec:	87 95       	ror	r24
     dee:	81 50       	subi	r24, 0x01	; 1
     df0:	80 93 0f 60 	sts	0x600F, r24	; 0x80600f <UPDI::_set_repeat+0x2>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/updi.cpp:166
    return send_bytes(_set_ptr24, 5)
     df4:	85 e2       	ldi	r24, 0x25	; 37
     df6:	80 93 11 60 	sts	0x6011, r24	; 0x806011 <UPDI::_set_repeat+0x4>
     dfa:	65 e0       	ldi	r22, 0x05	; 5
     dfc:	70 e0       	ldi	r23, 0x00	; 0
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/updi.cpp:169
      && is_ack()
      && send_bytes(_set_repeat, sizeof(_set_repeat))
      && recv_bytes(&packet.in.data[0], _wLength & ~1);
     dfe:	82 e1       	ldi	r24, 0x12	; 18
     e00:	90 e6       	ldi	r25, 0x60	; 96
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/updi.cpp:167
    /* and will round down any fractional words.          */
    _CAPS32(_set_ptr24[2])->dword = _dwAddr;
    _set_repeat[2] = (_wLength >> 1) - 1;
    _set_repeat[4] = 0x25;  /* LD PTR++ DATA2 */
    return send_bytes(_set_ptr24, 5)
      && is_ack()
     e02:	ce de       	rcall	.-612    	; 0xba0 <UPDI::send_bytes(unsigned char const*, unsigned int)>
     e04:	88 23       	and	r24, r24
     e06:	89 f0       	breq	.+34     	; 0xe2a <UPDI::recv_words_block(unsigned long, unsigned int)+0x58>
     e08:	01 df       	rcall	.-510    	; 0xc0c <UPDI::is_ack()>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/updi.cpp:168
      && send_bytes(_set_repeat, sizeof(_set_repeat))
     e0a:	88 23       	and	r24, r24
     e0c:	71 f0       	breq	.+28     	; 0xe2a <UPDI::recv_words_block(unsigned long, unsigned int)+0x58>
     e0e:	65 e0       	ldi	r22, 0x05	; 5
     e10:	70 e0       	ldi	r23, 0x00	; 0
     e12:	8d e0       	ldi	r24, 0x0D	; 13
     e14:	90 e6       	ldi	r25, 0x60	; 96
     e16:	c4 de       	rcall	.-632    	; 0xba0 <UPDI::send_bytes(unsigned char const*, unsigned int)>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/updi.cpp:169
      && recv_bytes(&packet.in.data[0], _wLength & ~1);
     e18:	88 23       	and	r24, r24
     e1a:	39 f0       	breq	.+14     	; 0xe2a <UPDI::recv_words_block(unsigned long, unsigned int)+0x58>
     e1c:	be 01       	movw	r22, r28
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/updi.cpp:170
  }
     e1e:	6e 7f       	andi	r22, 0xFE	; 254
     e20:	85 ed       	ldi	r24, 0xD5	; 213
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/updi.cpp:169
    _set_repeat[2] = (_wLength >> 1) - 1;
    _set_repeat[4] = 0x25;  /* LD PTR++ DATA2 */
    return send_bytes(_set_ptr24, 5)
      && is_ack()
      && send_bytes(_set_repeat, sizeof(_set_repeat))
      && recv_bytes(&packet.in.data[0], _wLength & ~1);
     e22:	90 e6       	ldi	r25, 0x60	; 96
     e24:	df 91       	pop	r29
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/updi.cpp:170
  }
     e26:	cf 91       	pop	r28
     e28:	c0 cf       	rjmp	.-128    	; 0xdaa <UPDI::recv_bytes(unsigned char*, unsigned int)>
     e2a:	80 e0       	ldi	r24, 0x00	; 0
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/updi.cpp:150
  bool clear_rsd (void) {
    const static uint8_t _clear_rsd[] = {0x55, 0xC2, 0x05};
    return send_bytes(_clear_rsd, 3);
  }

  bool recv_bytes_block (uint32_t _dwAddr, size_t _wLength) {
     e2c:	df 91       	pop	r29
     e2e:	cf 91       	pop	r28
     e30:	08 95       	ret

00000e32 <UPDI::recv_bytes_block(unsigned long, unsigned int)>:
recv_bytes_block():
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/updi.cpp:151
    _CAPS32(_set_ptr24[2])->dword = _dwAddr;
     e32:	cf 93       	push	r28
     e34:	df 93       	push	r29
     e36:	ea 01       	movw	r28, r20
     e38:	60 93 14 60 	sts	0x6014, r22	; 0x806014 <UPDI::_set_ptr24+0x2>
     e3c:	70 93 15 60 	sts	0x6015, r23	; 0x806015 <UPDI::_set_ptr24+0x3>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/updi.cpp:152
    _set_repeat[2] = _wLength - 1;
     e40:	80 93 16 60 	sts	0x6016, r24	; 0x806016 <UPDI::_set_ptr24+0x4>
     e44:	90 93 17 60 	sts	0x6017, r25	; 0x806017 <UPDI::_set_ptr24+0x5>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/updi.cpp:153
    _set_repeat[4] = 0x24;  /* LD PTR++ DATA1 */
     e48:	8f ef       	ldi	r24, 0xFF	; 255
     e4a:	84 0f       	add	r24, r20
     e4c:	80 93 0f 60 	sts	0x600F, r24	; 0x80600f <UPDI::_set_repeat+0x2>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/updi.cpp:154
    return send_bytes(_set_ptr24, 5)
     e50:	84 e2       	ldi	r24, 0x24	; 36
     e52:	80 93 11 60 	sts	0x6011, r24	; 0x806011 <UPDI::_set_repeat+0x4>
     e56:	65 e0       	ldi	r22, 0x05	; 5
     e58:	70 e0       	ldi	r23, 0x00	; 0
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/updi.cpp:157
      && is_ack()
      && send_bytes(_set_repeat, sizeof(_set_repeat))
      && recv_bytes(&packet.in.data[0], _wLength);
     e5a:	82 e1       	ldi	r24, 0x12	; 18
     e5c:	90 e6       	ldi	r25, 0x60	; 96
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/updi.cpp:155
  bool recv_bytes_block (uint32_t _dwAddr, size_t _wLength) {
    _CAPS32(_set_ptr24[2])->dword = _dwAddr;
    _set_repeat[2] = _wLength - 1;
    _set_repeat[4] = 0x24;  /* LD PTR++ DATA1 */
    return send_bytes(_set_ptr24, 5)
      && is_ack()
     e5e:	a0 de       	rcall	.-704    	; 0xba0 <UPDI::send_bytes(unsigned char const*, unsigned int)>
     e60:	88 23       	and	r24, r24
     e62:	81 f0       	breq	.+32     	; 0xe84 <UPDI::recv_bytes_block(unsigned long, unsigned int)+0x52>
     e64:	d3 de       	rcall	.-602    	; 0xc0c <UPDI::is_ack()>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/updi.cpp:156
      && send_bytes(_set_repeat, sizeof(_set_repeat))
     e66:	88 23       	and	r24, r24
     e68:	69 f0       	breq	.+26     	; 0xe84 <UPDI::recv_bytes_block(unsigned long, unsigned int)+0x52>
     e6a:	65 e0       	ldi	r22, 0x05	; 5
     e6c:	70 e0       	ldi	r23, 0x00	; 0
     e6e:	8d e0       	ldi	r24, 0x0D	; 13
     e70:	90 e6       	ldi	r25, 0x60	; 96
     e72:	96 de       	rcall	.-724    	; 0xba0 <UPDI::send_bytes(unsigned char const*, unsigned int)>
     e74:	88 23       	and	r24, r24
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/updi.cpp:157
      && recv_bytes(&packet.in.data[0], _wLength);
     e76:	31 f0       	breq	.+12     	; 0xe84 <UPDI::recv_bytes_block(unsigned long, unsigned int)+0x52>
     e78:	be 01       	movw	r22, r28
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/updi.cpp:158
  }
     e7a:	85 ed       	ldi	r24, 0xD5	; 213
     e7c:	90 e6       	ldi	r25, 0x60	; 96
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/updi.cpp:157
    _set_repeat[2] = _wLength - 1;
    _set_repeat[4] = 0x24;  /* LD PTR++ DATA1 */
    return send_bytes(_set_ptr24, 5)
      && is_ack()
      && send_bytes(_set_repeat, sizeof(_set_repeat))
      && recv_bytes(&packet.in.data[0], _wLength);
     e7e:	df 91       	pop	r29
     e80:	cf 91       	pop	r28
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/updi.cpp:158
  }
     e82:	93 cf       	rjmp	.-218    	; 0xdaa <UPDI::recv_bytes(unsigned char*, unsigned int)>
     e84:	80 e0       	ldi	r24, 0x00	; 0
     e86:	df 91       	pop	r29
     e88:	cf 91       	pop	r28
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/nvmv4.cpp:119

  size_t prog_init (void) {
    return nvm_ctrl_change(0x00);
  }

  size_t read_memory (void) {
     e8a:	08 95       	ret

00000e8c <NVM::V4::read_memory()>:
read_memory():
     e8c:	cf 93       	push	r28
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/nvmv4.cpp:123
    uint8_t   m_type = packet.out.bMType;
    uint32_t _dwAddr = packet.out.dwAddr;
    size_t  _wLength = packet.out.dwLength;
    if (bit_is_set(PGCONF, PGCONF_PROG_bp)) {
     e8e:	df 93       	push	r29
     e90:	e9 99       	sbic	0x1d, 1	; 29
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/nvmv4.cpp:136
        _dwAddr = PROD_SIG + ((uint8_t)_dwAddr & 0x7F);
      }
      if (UPDI::recv_bytes_block(_dwAddr, _wLength))
        return _wLength + 1;
    }
    return 0;
     e92:	05 c0       	rjmp	.+10     	; 0xe9e <NVM::V4::read_memory()+0x12>
     e94:	90 e0       	ldi	r25, 0x00	; 0
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/nvmv4.cpp:137
  }
     e96:	80 e0       	ldi	r24, 0x00	; 0
     e98:	df 91       	pop	r29
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/nvmv4.cpp:120
  size_t prog_init (void) {
    return nvm_ctrl_change(0x00);
  }

  size_t read_memory (void) {
    uint8_t   m_type = packet.out.bMType;
     e9a:	cf 91       	pop	r28
     e9c:	08 95       	ret
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/nvmv4.cpp:121
    uint32_t _dwAddr = packet.out.dwAddr;
     e9e:	20 91 d5 60 	lds	r18, 0x60D5	; 0x8060d5 <packet+0x7>
     ea2:	60 91 d6 60 	lds	r22, 0x60D6	; 0x8060d6 <packet+0x8>
     ea6:	70 91 d7 60 	lds	r23, 0x60D7	; 0x8060d7 <packet+0x9>
     eaa:	80 91 d8 60 	lds	r24, 0x60D8	; 0x8060d8 <packet+0xa>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/nvmv4.cpp:122
    size_t  _wLength = packet.out.dwLength;
     eae:	90 91 d9 60 	lds	r25, 0x60D9	; 0x8060d9 <packet+0xb>
     eb2:	c0 91 da 60 	lds	r28, 0x60DA	; 0x8060da <packet+0xc>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/nvmv4.cpp:124
    if (bit_is_set(PGCONF, PGCONF_PROG_bp)) {
      if (m_type == 0xB0) {
     eb6:	d0 91 db 60 	lds	r29, 0x60DB	; 0x8060db <packet+0xd>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/nvmv4.cpp:126
        /* MTYPE_FLASH_PAGE (PROGMEM) */
        _dwAddr += PROG_START;
     eba:	20 3b       	cpi	r18, 0xB0	; 176
     ebc:	49 f4       	brne	.+18     	; 0xed0 <NVM::V4::read_memory()+0x44>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/nvmv4.cpp:127
        return UPDI::recv_words_block(_dwAddr, _wLength) ? _wLength + 1 : 0;
     ebe:	80 58       	subi	r24, 0x80	; 128
     ec0:	9f 4f       	sbci	r25, 0xFF	; 255
     ec2:	ae 01       	movw	r20, r28
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/nvmv4.cpp:133
      }
      if (m_type == 0xB4) {
        /* MTYPE_SIGN_JTAG */
        _dwAddr = PROD_SIG + ((uint8_t)_dwAddr & 0x7F);
      }
      if (UPDI::recv_bytes_block(_dwAddr, _wLength))
     ec4:	86 df       	rcall	.-244    	; 0xdd2 <UPDI::recv_words_block(unsigned long, unsigned int)>
     ec6:	88 23       	and	r24, r24
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/nvmv4.cpp:134
        return _wLength + 1;
     ec8:	29 f3       	breq	.-54     	; 0xe94 <NVM::V4::read_memory()+0x8>
     eca:	ce 01       	movw	r24, r28
     ecc:	01 96       	adiw	r24, 0x01	; 1
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/nvmv4.cpp:129
      if (m_type == 0xB0) {
        /* MTYPE_FLASH_PAGE (PROGMEM) */
        _dwAddr += PROG_START;
        return UPDI::recv_words_block(_dwAddr, _wLength) ? _wLength + 1 : 0;
      }
      if (m_type == 0xB4) {
     ece:	e4 cf       	rjmp	.-56     	; 0xe98 <NVM::V4::read_memory()+0xc>
     ed0:	24 3b       	cpi	r18, 0xB4	; 180
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/nvmv4.cpp:131
        /* MTYPE_SIGN_JTAG */
        _dwAddr = PROD_SIG + ((uint8_t)_dwAddr & 0x7F);
     ed2:	41 f4       	brne	.+16     	; 0xee4 <NVM::V4::read_memory()+0x58>
     ed4:	6f 77       	andi	r22, 0x7F	; 127
     ed6:	70 e0       	ldi	r23, 0x00	; 0
     ed8:	60 58       	subi	r22, 0x80	; 128
     eda:	7f 4e       	sbci	r23, 0xEF	; 239
     edc:	07 2e       	mov	r0, r23
     ede:	00 0c       	add	r0, r0
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/nvmv4.cpp:133
      }
      if (UPDI::recv_bytes_block(_dwAddr, _wLength))
     ee0:	88 0b       	sbc	r24, r24
     ee2:	99 0b       	sbc	r25, r25
     ee4:	ae 01       	movw	r20, r28
     ee6:	a5 df       	rcall	.-182    	; 0xe32 <UPDI::recv_bytes_block(unsigned long, unsigned int)>
     ee8:	ee cf       	rjmp	.-36     	; 0xec6 <NVM::V4::read_memory()+0x3a>

00000eea <NVM::V5::read_memory()>:
_ZN3NVM2V511read_memoryEv():
     eea:	d0 cf       	rjmp	.-96     	; 0xe8c <NVM::V4::read_memory()>

00000eec <NVM::V2::read_memory()>:
read_memory():
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/nvmv2.cpp:116

  size_t prog_init (void) {
    return nvm_ctrl_change(0x00);
  }

  size_t read_memory (void) {
     eec:	cf 93       	push	r28
     eee:	df 93       	push	r29
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/nvmv2.cpp:120
    uint8_t   m_type = packet.out.bMType;
    uint32_t _dwAddr = packet.out.dwAddr;
    size_t  _wLength = packet.out.dwLength;
    if (bit_is_set(PGCONF, PGCONF_PROG_bp)) {
     ef0:	e9 99       	sbic	0x1d, 1	; 29
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/nvmv2.cpp:133
        _dwAddr = PROD_SIG + ((uint8_t)_dwAddr & 0x7F);
      }
      if (UPDI::recv_bytes_block(_dwAddr, _wLength))
        return _wLength + 1;
    }
    return 0;
     ef2:	05 c0       	rjmp	.+10     	; 0xefe <NVM::V2::read_memory()+0x12>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/nvmv2.cpp:134
  }
     ef4:	90 e0       	ldi	r25, 0x00	; 0
     ef6:	80 e0       	ldi	r24, 0x00	; 0
     ef8:	df 91       	pop	r29
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/nvmv2.cpp:117
  size_t prog_init (void) {
    return nvm_ctrl_change(0x00);
  }

  size_t read_memory (void) {
    uint8_t   m_type = packet.out.bMType;
     efa:	cf 91       	pop	r28
     efc:	08 95       	ret
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/nvmv2.cpp:118
    uint32_t _dwAddr = packet.out.dwAddr;
     efe:	20 91 d5 60 	lds	r18, 0x60D5	; 0x8060d5 <packet+0x7>
     f02:	60 91 d6 60 	lds	r22, 0x60D6	; 0x8060d6 <packet+0x8>
     f06:	70 91 d7 60 	lds	r23, 0x60D7	; 0x8060d7 <packet+0x9>
     f0a:	80 91 d8 60 	lds	r24, 0x60D8	; 0x8060d8 <packet+0xa>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/nvmv2.cpp:119
    size_t  _wLength = packet.out.dwLength;
     f0e:	90 91 d9 60 	lds	r25, 0x60D9	; 0x8060d9 <packet+0xb>
     f12:	c0 91 da 60 	lds	r28, 0x60DA	; 0x8060da <packet+0xc>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/nvmv2.cpp:121
    if (bit_is_set(PGCONF, PGCONF_PROG_bp)) {
      if (m_type == 0xB0) {
     f16:	d0 91 db 60 	lds	r29, 0x60DB	; 0x8060db <packet+0xd>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/nvmv2.cpp:123
        /* MTYPE_FLASH_PAGE (PROGMEM) */
        _dwAddr += PROG_START;
     f1a:	20 3b       	cpi	r18, 0xB0	; 176
     f1c:	49 f4       	brne	.+18     	; 0xf30 <NVM::V2::read_memory()+0x44>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/nvmv2.cpp:124
        return UPDI::recv_words_block(_dwAddr, _wLength) ? _wLength + 1 : 0;
     f1e:	80 58       	subi	r24, 0x80	; 128
     f20:	9f 4f       	sbci	r25, 0xFF	; 255
     f22:	ae 01       	movw	r20, r28
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/nvmv2.cpp:130
      }
      if (m_type == 0xB4) {
        /* MTYPE_SIGN_JTAG */
        _dwAddr = PROD_SIG + ((uint8_t)_dwAddr & 0x7F);
      }
      if (UPDI::recv_bytes_block(_dwAddr, _wLength))
     f24:	56 df       	rcall	.-340    	; 0xdd2 <UPDI::recv_words_block(unsigned long, unsigned int)>
     f26:	88 23       	and	r24, r24
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/nvmv2.cpp:131
        return _wLength + 1;
     f28:	29 f3       	breq	.-54     	; 0xef4 <NVM::V2::read_memory()+0x8>
     f2a:	ce 01       	movw	r24, r28
     f2c:	01 96       	adiw	r24, 0x01	; 1
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/nvmv2.cpp:126
      if (m_type == 0xB0) {
        /* MTYPE_FLASH_PAGE (PROGMEM) */
        _dwAddr += PROG_START;
        return UPDI::recv_words_block(_dwAddr, _wLength) ? _wLength + 1 : 0;
      }
      if (m_type == 0xB4) {
     f2e:	e4 cf       	rjmp	.-56     	; 0xef8 <NVM::V2::read_memory()+0xc>
     f30:	24 3b       	cpi	r18, 0xB4	; 180
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/nvmv2.cpp:128
        /* MTYPE_SIGN_JTAG */
        _dwAddr = PROD_SIG + ((uint8_t)_dwAddr & 0x7F);
     f32:	39 f4       	brne	.+14     	; 0xf42 <NVM::V2::read_memory()+0x56>
     f34:	6f 77       	andi	r22, 0x7F	; 127
     f36:	70 e0       	ldi	r23, 0x00	; 0
     f38:	7f 5e       	subi	r23, 0xEF	; 239
     f3a:	07 2e       	mov	r0, r23
     f3c:	00 0c       	add	r0, r0
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/nvmv2.cpp:130
      }
      if (UPDI::recv_bytes_block(_dwAddr, _wLength))
     f3e:	88 0b       	sbc	r24, r24
     f40:	99 0b       	sbc	r25, r25
     f42:	ae 01       	movw	r20, r28
     f44:	76 df       	rcall	.-276    	; 0xe32 <UPDI::recv_bytes_block(unsigned long, unsigned int)>
     f46:	ef cf       	rjmp	.-34     	; 0xf26 <NVM::V2::read_memory()+0x3a>

00000f48 <NVM::V3::read_memory()>:
_ZN3NVM2V311read_memoryEv():
     f48:	d1 cf       	rjmp	.-94     	; 0xeec <NVM::V2::read_memory()>

00000f4a <NVM::V0::read_memory()>:
read_memory():
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/nvmv0.cpp:114
    UPDI::nvm_ctrl(0x04);         /* NVM_CMD_PBC */
    nvm_wait();
    return UPDI::nvm_ctrl(0x00);
  }

  size_t read_memory (void) {
     f4a:	cf 93       	push	r28
     f4c:	df 93       	push	r29
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/nvmv0.cpp:115
    uint8_t  m_type = packet.out.bMType;
     f4e:	80 91 d5 60 	lds	r24, 0x60D5	; 0x8060d5 <packet+0x7>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/nvmv0.cpp:116
    uint16_t _wAddr = packet.out.dwAddr;
     f52:	60 91 d6 60 	lds	r22, 0x60D6	; 0x8060d6 <packet+0x8>
     f56:	30 91 d7 60 	lds	r19, 0x60D7	; 0x8060d7 <packet+0x9>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/nvmv0.cpp:118
    size_t _wLength = packet.out.dwLength;
    if (m_type == 0xB4) {
     f5a:	84 3b       	cpi	r24, 0xB4	; 180
     f5c:	51 f4       	brne	.+20     	; 0xf72 <NVM::V0::read_memory()+0x28>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/nvmv0.cpp:120
      /* MTYPE_SIGN_JTAG */
      _wAddr = PROD_SIG + ((uint8_t)_wAddr & 0x7F);
     f5e:	6f 77       	andi	r22, 0x7F	; 127
     f60:	70 e0       	ldi	r23, 0x00	; 0
     f62:	7f 5e       	subi	r23, 0xEF	; 239
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/nvmv0.cpp:127
    else if (m_type == 0xB0) {
      /* MTYPE_FLASH_PAGE (PROGMEM) */
      _wAddr += Device_Descriptor.UPDI.prog_base;
    }
    if (bit_is_set(PGCONF, PGCONF_PROG_bp)
     && UPDI::recv_bytes_block(_wAddr, _wLength))
     f64:	e9 99       	sbic	0x1d, 1	; 29
     f66:	0f c0       	rjmp	.+30     	; 0xf86 <NVM::V0::read_memory()+0x3c>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/nvmv0.cpp:129
      return _wLength + 1;
    return 0;
     f68:	90 e0       	ldi	r25, 0x00	; 0
     f6a:	80 e0       	ldi	r24, 0x00	; 0
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/nvmv0.cpp:130
  }
     f6c:	df 91       	pop	r29
     f6e:	cf 91       	pop	r28
     f70:	08 95       	ret
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/nvmv0.cpp:116
    return UPDI::nvm_ctrl(0x00);
  }

  size_t read_memory (void) {
    uint8_t  m_type = packet.out.bMType;
    uint16_t _wAddr = packet.out.dwAddr;
     f72:	73 2f       	mov	r23, r19
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/nvmv0.cpp:122
    size_t _wLength = packet.out.dwLength;
    if (m_type == 0xB4) {
      /* MTYPE_SIGN_JTAG */
      _wAddr = PROD_SIG + ((uint8_t)_wAddr & 0x7F);
    }
    else if (m_type == 0xB0) {
     f74:	80 3b       	cpi	r24, 0xB0	; 176
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/nvmv0.cpp:124
      /* MTYPE_FLASH_PAGE (PROGMEM) */
      _wAddr += Device_Descriptor.UPDI.prog_base;
     f76:	b1 f7       	brne	.-20     	; 0xf64 <NVM::V0::read_memory()+0x1a>
     f78:	80 91 9e 60 	lds	r24, 0x609E	; 0x80609e <Device_Descriptor>
     f7c:	90 91 9f 60 	lds	r25, 0x609F	; 0x80609f <Device_Descriptor+0x1>
     f80:	68 0f       	add	r22, r24
     f82:	79 1f       	adc	r23, r25
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/nvmv0.cpp:117
  }

  size_t read_memory (void) {
    uint8_t  m_type = packet.out.bMType;
    uint16_t _wAddr = packet.out.dwAddr;
    size_t _wLength = packet.out.dwLength;
     f84:	ef cf       	rjmp	.-34     	; 0xf64 <NVM::V0::read_memory()+0x1a>
     f86:	c0 91 da 60 	lds	r28, 0x60DA	; 0x8060da <packet+0xc>
     f8a:	d0 91 db 60 	lds	r29, 0x60DB	; 0x8060db <packet+0xd>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/nvmv0.cpp:127
    else if (m_type == 0xB0) {
      /* MTYPE_FLASH_PAGE (PROGMEM) */
      _wAddr += Device_Descriptor.UPDI.prog_base;
    }
    if (bit_is_set(PGCONF, PGCONF_PROG_bp)
     && UPDI::recv_bytes_block(_wAddr, _wLength))
     f8e:	90 e0       	ldi	r25, 0x00	; 0
     f90:	80 e0       	ldi	r24, 0x00	; 0
     f92:	ae 01       	movw	r20, r28
     f94:	4e df       	rcall	.-356    	; 0xe32 <UPDI::recv_bytes_block(unsigned long, unsigned int)>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/nvmv0.cpp:128
      return _wLength + 1;
     f96:	88 23       	and	r24, r24
     f98:	39 f3       	breq	.-50     	; 0xf68 <NVM::V0::read_memory()+0x1e>
     f9a:	ce 01       	movw	r24, r28
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/tpi.cpp:50
      loop_until_bit_is_clear(TCLK_IN, TCLK_bp);
    }
  }

  bool recv (void) {
    loop_until_bit_is_set(USART0_STATUS, USART_RXCIF_bp);
     f9c:	01 96       	adiw	r24, 0x01	; 1
     f9e:	e6 cf       	rjmp	.-52     	; 0xf6c <NVM::V0::read_memory()+0x22>

00000fa0 <TPI::recv()>:
recv():
     fa0:	80 91 04 08 	lds	r24, 0x0804	; 0x800804 <__TEXT_REGION_LENGTH__+0x7f0804>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/tpi.cpp:51
    RXSTAT = USART0_RXDATAH ^ 0x80;
     fa4:	87 ff       	sbrs	r24, 7
     fa6:	fc cf       	rjmp	.-8      	; 0xfa0 <TPI::recv()>
     fa8:	80 91 01 08 	lds	r24, 0x0801	; 0x800801 <__TEXT_REGION_LENGTH__+0x7f0801>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/tpi.cpp:52
    RXDATA = USART0_RXDATAL;
     fac:	80 58       	subi	r24, 0x80	; 128
     fae:	8e bb       	out	0x1e, r24	; 30
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/tpi.cpp:53
    return RXSTAT == 0;
     fb0:	80 91 00 08 	lds	r24, 0x0800	; 0x800800 <__TEXT_REGION_LENGTH__+0x7f0800>
     fb4:	8f bb       	out	0x1f, r24	; 31
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/tpi.cpp:54
  }
     fb6:	9e b3       	in	r25, 0x1e	; 30
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/tpi.cpp:56

  bool send (const uint8_t _data) {
     fb8:	81 e0       	ldi	r24, 0x01	; 1
     fba:	91 11       	cpse	r25, r1
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/tpi.cpp:57
    loop_until_bit_is_set(USART0_STATUS, USART_DREIF_bp);
     fbc:	80 e0       	ldi	r24, 0x00	; 0
     fbe:	08 95       	ret

00000fc0 <TPI::send(unsigned char)>:
send():
     fc0:	cf 93       	push	r28
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/tpi.cpp:58
    USART0_TXDATAL = _data;
     fc2:	c8 2f       	mov	r28, r24
     fc4:	80 91 04 08 	lds	r24, 0x0804	; 0x800804 <__TEXT_REGION_LENGTH__+0x7f0804>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/tpi.cpp:59
    return (recv() && _data == RXDATA);
     fc8:	85 ff       	sbrs	r24, 5
     fca:	fc cf       	rjmp	.-8      	; 0xfc4 <TPI::send(unsigned char)+0x4>
     fcc:	c0 93 02 08 	sts	0x0802, r28	; 0x800802 <__TEXT_REGION_LENGTH__+0x7f0802>
     fd0:	e7 df       	rcall	.-50     	; 0xfa0 <TPI::recv()>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/tpi.cpp:60
  }
     fd2:	88 23       	and	r24, r24
     fd4:	21 f0       	breq	.+8      	; 0xfde <TPI::send(unsigned char)+0x1e>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/tpi.cpp:99
  bool nvm_wait (void) {
    while (get_sin(0x62) && RXDATA);  /* NVMCSR_REG: IO=0x32 */
    return true;
  }

  bool nvm_ctrl (const uint8_t _nvmcmd) {
     fd6:	9f b3       	in	r25, 0x1f	; 31
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/tpi.cpp:73
  bool set_sstcs (const uint8_t _addr, const uint8_t _data) {
    return (send(0xC0 | _addr) && send(_data));
  }

  bool set_sout (const uint8_t _addr, const uint8_t _data) {
    return (send(0x90 | _addr) && send(_data));
     fd8:	81 e0       	ldi	r24, 0x01	; 1
     fda:	9c 13       	cpse	r25, r28
     fdc:	80 e0       	ldi	r24, 0x00	; 0
     fde:	cf 91       	pop	r28
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/tpi.cpp:69
  bool get_sldcs (const uint8_t _addr) {
    return (send(0x80 | _addr) && recv());
  }

  bool set_sstcs (const uint8_t _addr, const uint8_t _data) {
    return (send(0xC0 | _addr) && send(_data));
     fe0:	08 95       	ret

00000fe2 <TPI::nvm_ctrl(unsigned char)>:
nvm_ctrl():
     fe2:	cf 93       	push	r28
     fe4:	c8 2f       	mov	r28, r24
set_sout():
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/tpi.cpp:101
    return true;
  }

  bool nvm_ctrl (const uint8_t _nvmcmd) {
    return set_sout(0x63, _nvmcmd);   /* NVMCMD_REG: IO=0x33 */
  }
     fe6:	83 ef       	ldi	r24, 0xF3	; 243
     fe8:	eb df       	rcall	.-42     	; 0xfc0 <TPI::send(unsigned char)>
     fea:	88 23       	and	r24, r24
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/tpi.cpp:77
  bool set_sout (const uint8_t _addr, const uint8_t _data) {
    return (send(0x90 | _addr) && send(_data));
  }

  bool get_sin (const uint8_t _addr) {
    return (send(0x10 | _addr) && recv());
     fec:	19 f0       	breq	.+6      	; 0xff4 <TPI::nvm_ctrl(unsigned char)+0x12>
     fee:	8c 2f       	mov	r24, r28
nvm_ctrl():
     ff0:	cf 91       	pop	r28
set_sout():
     ff2:	e6 cf       	rjmp	.-52     	; 0xfc0 <TPI::send(unsigned char)>
nvm_ctrl():
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/tpi.cpp:65
  }

  /*** TPI control and CSS area command ***/

  bool get_sldcs (const uint8_t _addr) {
    return (send(0x80 | _addr) && recv());
     ff4:	80 e0       	ldi	r24, 0x00	; 0
     ff6:	cf 91       	pop	r28
     ff8:	08 95       	ret

00000ffa <TPI::nvm_wait()>:
get_sin():
     ffa:	82 e7       	ldi	r24, 0x72	; 114
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/tpi.cpp:95
  }

  /*** NVM control ****/

  bool nvm_wait (void) {
    while (get_sin(0x62) && RXDATA);  /* NVMCSR_REG: IO=0x32 */
     ffc:	e1 df       	rcall	.-62     	; 0xfc0 <TPI::send(unsigned char)>
     ffe:	88 23       	and	r24, r24
    1000:	31 f0       	breq	.+12     	; 0x100e <TPI::nvm_wait()+0x14>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/tpi.cpp:97
    return true;
  }
    1002:	ce df       	rcall	.-100    	; 0xfa0 <TPI::recv()>
    1004:	88 23       	and	r24, r24
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/tpi.cpp:88

  bool get_sld (void) {
    return (send(0x24) && recv());
  }

  bool set_sst (const uint8_t _data) {
    1006:	19 f0       	breq	.+6      	; 0x100e <TPI::nvm_wait()+0x14>
nvm_wait():
    1008:	8f b3       	in	r24, 0x1f	; 31
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/tpi.cpp:89
    return (send(0x64) && send(_data));
    100a:	81 11       	cpse	r24, r1
    100c:	f6 cf       	rjmp	.-20     	; 0xffa <TPI::nvm_wait()>
    100e:	81 e0       	ldi	r24, 0x01	; 1
    1010:	08 95       	ret

00001012 <TPI::set_sst(unsigned char)>:
set_sst():
    1012:	cf 93       	push	r28
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/tpi.cpp:69
  bool get_sldcs (const uint8_t _addr) {
    return (send(0x80 | _addr) && recv());
  }

  bool set_sstcs (const uint8_t _addr, const uint8_t _data) {
    return (send(0xC0 | _addr) && send(_data));
    1014:	c8 2f       	mov	r28, r24
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/tpi.cpp:90
    return (send(0x24) && recv());
  }

  bool set_sst (const uint8_t _data) {
    return (send(0x64) && send(_data));
  }
    1016:	84 e6       	ldi	r24, 0x64	; 100
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/tpi.cpp:69
  bool get_sldcs (const uint8_t _addr) {
    return (send(0x80 | _addr) && recv());
  }

  bool set_sstcs (const uint8_t _addr, const uint8_t _data) {
    return (send(0xC0 | _addr) && send(_data));
    1018:	d3 df       	rcall	.-90     	; 0xfc0 <TPI::send(unsigned char)>
    101a:	88 23       	and	r24, r24
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/tpi.cpp:90
    return (send(0x24) && recv());
  }

  bool set_sst (const uint8_t _data) {
    return (send(0x64) && send(_data));
  }
    101c:	19 f0       	breq	.+6      	; 0x1024 <TPI::set_sst(unsigned char)+0x12>
    101e:	8c 2f       	mov	r24, r28
    1020:	cf 91       	pop	r28
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/tpi.cpp:85
  bool set_sstpr (const uint16_t _addr) {
    return (send(0x68) && send(_addr & 0xFF) && send(0x69) && send(_addr >> 8));
  }

  bool get_sld (void) {
    return (send(0x24) && recv());
    1022:	ce cf       	rjmp	.-100    	; 0xfc0 <TPI::send(unsigned char)>
    1024:	80 e0       	ldi	r24, 0x00	; 0
    1026:	cf 91       	pop	r28
    1028:	08 95       	ret

0000102a <TPI::get_sld()>:
get_sld():
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/tpi.cpp:65
  }

  /*** TPI control and CSS area command ***/

  bool get_sldcs (const uint8_t _addr) {
    return (send(0x80 | _addr) && recv());
    102a:	84 e2       	ldi	r24, 0x24	; 36
    102c:	c9 df       	rcall	.-110    	; 0xfc0 <TPI::send(unsigned char)>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/tpi.cpp:86
    return (send(0x68) && send(_addr & 0xFF) && send(0x69) && send(_addr >> 8));
  }

  bool get_sld (void) {
    return (send(0x24) && recv());
  }
    102e:	81 11       	cpse	r24, r1
    1030:	b7 cf       	rjmp	.-146    	; 0xfa0 <TPI::recv()>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/tpi.cpp:80

  bool get_sin (const uint8_t _addr) {
    return (send(0x10 | _addr) && recv());
  }

  bool set_sstpr (const uint16_t _addr) {
    1032:	80 e0       	ldi	r24, 0x00	; 0
    1034:	08 95       	ret

00001036 <TPI::set_sstpr(unsigned int)>:
set_sstpr():
    1036:	cf 93       	push	r28
    1038:	df 93       	push	r29
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/tpi.cpp:81
    return (send(0x68) && send(_addr & 0xFF) && send(0x69) && send(_addr >> 8));
    103a:	d8 2f       	mov	r29, r24
    103c:	c9 2f       	mov	r28, r25
    103e:	88 e6       	ldi	r24, 0x68	; 104
    1040:	bf df       	rcall	.-130    	; 0xfc0 <TPI::send(unsigned char)>
    1042:	88 23       	and	r24, r24
    1044:	61 f0       	breq	.+24     	; 0x105e <TPI::set_sstpr(unsigned int)+0x28>
    1046:	8d 2f       	mov	r24, r29
    1048:	bb df       	rcall	.-138    	; 0xfc0 <TPI::send(unsigned char)>
    104a:	88 23       	and	r24, r24
    104c:	41 f0       	breq	.+16     	; 0x105e <TPI::set_sstpr(unsigned int)+0x28>
    104e:	89 e6       	ldi	r24, 0x69	; 105
    1050:	b7 df       	rcall	.-146    	; 0xfc0 <TPI::send(unsigned char)>
    1052:	88 23       	and	r24, r24
    1054:	21 f0       	breq	.+8      	; 0x105e <TPI::set_sstpr(unsigned int)+0x28>
    1056:	8c 2f       	mov	r24, r28
    1058:	df 91       	pop	r29
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/tpi.cpp:82
  }
    105a:	cf 91       	pop	r28
    105c:	b1 cf       	rjmp	.-158    	; 0xfc0 <TPI::send(unsigned char)>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/tpi.cpp:81
  bool get_sin (const uint8_t _addr) {
    return (send(0x10 | _addr) && recv());
  }

  bool set_sstpr (const uint16_t _addr) {
    return (send(0x68) && send(_addr & 0xFF) && send(0x69) && send(_addr >> 8));
    105e:	80 e0       	ldi	r24, 0x00	; 0
    1060:	df 91       	pop	r29
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/tpi.cpp:82
  }
    1062:	cf 91       	pop	r28
    1064:	08 95       	ret

00001066 <TPI::idle_clock(unsigned int)>:
idle_clock():
    1066:	30 e0       	ldi	r19, 0x00	; 0
    1068:	20 e0       	ldi	r18, 0x00	; 0
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/tpi.cpp:43
  const static uint8_t nvmprog_key[] = {
    0xE0, 0xFF, 0x88, 0xD8, 0xCD, 0x45, 0xAB, 0x89, 0x12
  };

  void idle_clock (const size_t clock) {
    for (size_t i = 0; i < clock; i++) {
    106a:	40 91 08 04 	lds	r20, 0x0408	; 0x800408 <__TEXT_REGION_LENGTH__+0x7f0408>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/tpi.cpp:44
      loop_until_bit_is_set(TCLK_IN, TCLK_bp);
    106e:	42 ff       	sbrs	r20, 2
    1070:	fc cf       	rjmp	.-8      	; 0x106a <TPI::idle_clock(unsigned int)+0x4>
    1072:	40 91 08 04 	lds	r20, 0x0408	; 0x800408 <__TEXT_REGION_LENGTH__+0x7f0408>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/tpi.cpp:45
      loop_until_bit_is_clear(TCLK_IN, TCLK_bp);
    1076:	42 fd       	sbrc	r20, 2
    1078:	fc cf       	rjmp	.-8      	; 0x1072 <TPI::idle_clock(unsigned int)+0xc>
    107a:	2f 5f       	subi	r18, 0xFF	; 255
    107c:	3f 4f       	sbci	r19, 0xFF	; 255
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/tpi.cpp:43
  const static uint8_t nvmprog_key[] = {
    0xE0, 0xFF, 0x88, 0xD8, 0xCD, 0x45, 0xAB, 0x89, 0x12
  };

  void idle_clock (const size_t clock) {
    for (size_t i = 0; i < clock; i++) {
    107e:	82 17       	cp	r24, r18
    1080:	93 07       	cpc	r25, r19
    1082:	99 f7       	brne	.-26     	; 0x106a <TPI::idle_clock(unsigned int)+0x4>
    1084:	08 95       	ret

00001086 <SYS::is_boundary_flash_page(unsigned long)>:
is_boundary_flash_page():
    1086:	cf 92       	push	r12
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/tpi.cpp:47
      loop_until_bit_is_set(TCLK_IN, TCLK_bp);
      loop_until_bit_is_clear(TCLK_IN, TCLK_bp);
    }
  }
    1088:	df 92       	push	r13
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/sys.cpp:371
   * Flash memory boundary check
   *
   * True when a page area address different from the previous time is detected.
   * Indicates the need to erase a page in FLASH/USERROW/BOOTROW of the AVR-Dx series.
   */
  bool is_boundary_flash_page (uint32_t _dwAddr) {
    108a:	ef 92       	push	r14
    108c:	ff 92       	push	r15
    108e:	ab 01       	movw	r20, r22
    1090:	bc 01       	movw	r22, r24
    1092:	80 91 cb 60 	lds	r24, 0x60CB	; 0x8060cb <Device_Descriptor+0x2d>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/sys.cpp:372
    uint32_t _mask = ~(((uint16_t)Device_Descriptor.UPDI.flash_page_size_msb << 8)
    1096:	28 2f       	mov	r18, r24
    1098:	30 e0       	ldi	r19, 0x00	; 0
    109a:	32 2f       	mov	r19, r18
    109c:	22 27       	eor	r18, r18
    109e:	80 91 a0 60 	lds	r24, 0x60A0	; 0x8060a0 <Device_Descriptor+0x2>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/sys.cpp:373
                                + Device_Descriptor.UPDI.flash_page_size - 1);
    10a2:	82 0f       	add	r24, r18
    10a4:	93 2f       	mov	r25, r19
    10a6:	91 1d       	adc	r25, r1
    10a8:	91 95       	neg	r25
    10aa:	81 95       	neg	r24
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/sys.cpp:372
   *
   * True when a page area address different from the previous time is detected.
   * Indicates the need to erase a page in FLASH/USERROW/BOOTROW of the AVR-Dx series.
   */
  bool is_boundary_flash_page (uint32_t _dwAddr) {
    uint32_t _mask = ~(((uint16_t)Device_Descriptor.UPDI.flash_page_size_msb << 8)
    10ac:	91 09       	sbc	r25, r1
    10ae:	b0 e0       	ldi	r27, 0x00	; 0
    10b0:	a0 e0       	ldi	r26, 0x00	; 0
    10b2:	84 23       	and	r24, r20
    10b4:	95 23       	and	r25, r21
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/sys.cpp:374
                                + Device_Descriptor.UPDI.flash_page_size - 1);
    uint32_t _after_page = _dwAddr & _mask;
    10b6:	a6 23       	and	r26, r22
    10b8:	b7 23       	and	r27, r23
    10ba:	21 e0       	ldi	r18, 0x01	; 1
    10bc:	c0 90 ea 62 	lds	r12, 0x62EA	; 0x8062ea <_before_page>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/sys.cpp:375
    bool _result = _before_page != _after_page;
    10c0:	d0 90 eb 62 	lds	r13, 0x62EB	; 0x8062eb <_before_page+0x1>
    10c4:	e0 90 ec 62 	lds	r14, 0x62EC	; 0x8062ec <_before_page+0x2>
    10c8:	f0 90 ed 62 	lds	r15, 0x62ED	; 0x8062ed <_before_page+0x3>
    10cc:	c8 16       	cp	r12, r24
    10ce:	d9 06       	cpc	r13, r25
    10d0:	ea 06       	cpc	r14, r26
    10d2:	fb 06       	cpc	r15, r27
    10d4:	09 f4       	brne	.+2      	; 0x10d8 <SYS::is_boundary_flash_page(unsigned long)+0x52>
    10d6:	20 e0       	ldi	r18, 0x00	; 0
    10d8:	80 93 ea 62 	sts	0x62EA, r24	; 0x8062ea <_before_page>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/sys.cpp:376
    _before_page = _after_page;
    10dc:	90 93 eb 62 	sts	0x62EB, r25	; 0x8062eb <_before_page+0x1>
    10e0:	a0 93 ec 62 	sts	0x62EC, r26	; 0x8062ec <_before_page+0x2>
    10e4:	b0 93 ed 62 	sts	0x62ED, r27	; 0x8062ed <_before_page+0x3>
    10e8:	82 2f       	mov	r24, r18
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/sys.cpp:378
    return _result;
  }
    10ea:	ff 90       	pop	r15
    10ec:	ef 90       	pop	r14
    10ee:	df 90       	pop	r13
    10f0:	cf 90       	pop	r12
    10f2:	08 95       	ret

000010f4 <SYS::LED_Flash()>:
LED_TCB1():
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/sys.cpp:246
      _led_mode = 1;
    }
  }

  void LED_TCB1 (uint8_t _mode, uint16_t _ccmp) {
    if (_led_mode != _mode) {
    10f4:	80 91 85 60 	lds	r24, 0x6085	; 0x806085 <_led_mode>
    10f8:	82 30       	cpi	r24, 0x02	; 2
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/sys.cpp:247
      TCA0_SPLIT_CTRLA = 0;
    10fa:	81 f0       	breq	.+32     	; 0x111c <SYS::LED_Flash()+0x28>
    10fc:	10 92 00 0a 	sts	0x0A00, r1	; 0x800a00 <__TEXT_REGION_LENGTH__+0x7f0a00>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/sys.cpp:248
      TCB1_CNTL = 0;
    1100:	10 92 1a 0b 	sts	0x0B1A, r1	; 0x800b1a <__TEXT_REGION_LENGTH__+0x7f0b1a>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/sys.cpp:249
      TCB1_CCMP = _ccmp;
    1104:	89 ea       	ldi	r24, 0xA9	; 169
    1106:	95 e0       	ldi	r25, 0x05	; 5
    1108:	80 93 1c 0b 	sts	0x0B1C, r24	; 0x800b1c <__TEXT_REGION_LENGTH__+0x7f0b1c>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/sys.cpp:250
      TCB1_CTRLA = TCB_RUNSTDBY_bm | TCB_ENABLE_bm | TCB_CLKSEL_EVENT_gc;
    110c:	90 93 1d 0b 	sts	0x0B1D, r25	; 0x800b1d <__TEXT_REGION_LENGTH__+0x7f0b1d>
    1110:	8f e4       	ldi	r24, 0x4F	; 79
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/sys.cpp:251
      _led_mode = _mode;
    1112:	80 93 10 0b 	sts	0x0B10, r24	; 0x800b10 <__TEXT_REGION_LENGTH__+0x7f0b10>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/sys.cpp:264
     * Restarting TCBn in PWM8 mode may cause the duty
     * cycle of TCBn_WO to invert. Solution unknown.
     * This function is affected.
     */
    LED_TCB1(2, TCB1_FLASH);
  }
    1116:	82 e0       	ldi	r24, 0x02	; 2
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/sys.cpp:236
  * LED operation switching
  */

  /* Heartbeat (waiting) */
  void LED_HeartBeat (void) {
    if (_led_mode != 1) {
    1118:	80 93 85 60 	sts	0x6085, r24	; 0x806085 <_led_mode>
LED_Flash():
    111c:	08 95       	ret

0000111e <SYS::LED_HeartBeat()>:
LED_HeartBeat():
    111e:	80 91 85 60 	lds	r24, 0x6085	; 0x806085 <_led_mode>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/sys.cpp:237
      TCA0_SPLIT_CTRLA = TCA_SPLIT_ENABLE_bm | TCA_SPLIT_CLKSEL_DIV1024_gc;
    1122:	81 30       	cpi	r24, 0x01	; 1
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/sys.cpp:238
      TCB1_CNTL = 0;
    1124:	89 f0       	breq	.+34     	; 0x1148 <SYS::LED_HeartBeat()+0x2a>
    1126:	8f e0       	ldi	r24, 0x0F	; 15
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/sys.cpp:239
      TCB1_CCMP = TCB1_HBEAT;
    1128:	80 93 00 0a 	sts	0x0A00, r24	; 0x800a00 <__TEXT_REGION_LENGTH__+0x7f0a00>
    112c:	10 92 1a 0b 	sts	0x0B1A, r1	; 0x800b1a <__TEXT_REGION_LENGTH__+0x7f0b1a>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/sys.cpp:240
      TCB1_CTRLA = TCB_RUNSTDBY_bm | TCB_ENABLE_bm | TCB_CLKSEL_TCA0_gc;
    1130:	84 ec       	ldi	r24, 0xC4	; 196
    1132:	92 e6       	ldi	r25, 0x62	; 98
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/sys.cpp:241
      _led_mode = 1;
    1134:	80 93 1c 0b 	sts	0x0B1C, r24	; 0x800b1c <__TEXT_REGION_LENGTH__+0x7f0b1c>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/sys.cpp:243
    }
  }
    1138:	90 93 1d 0b 	sts	0x0B1D, r25	; 0x800b1d <__TEXT_REGION_LENGTH__+0x7f0b1d>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/nvmv3.cpp:55
  constexpr auto NVM_STATUS = 0x1006;
  constexpr auto PROD_SIG   = 0x1100;
  constexpr auto PROG_START = 0x800000;

  uint8_t nvm_wait (void) {
    do { UPDI::recv_byte(NVM_STATUS); } while (RXDATA & 3);
    113c:	85 e4       	ldi	r24, 0x45	; 69
    113e:	80 93 10 0b 	sts	0x0B10, r24	; 0x800b10 <__TEXT_REGION_LENGTH__+0x7f0b10>
    1142:	81 e0       	ldi	r24, 0x01	; 1
    1144:	80 93 85 60 	sts	0x6085, r24	; 0x806085 <_led_mode>
    1148:	08 95       	ret

0000114a <NVM::V3::nvm_wait()>:
nvm_wait():
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/nvmv3.cpp:56
    return RXDATA;
    114a:	66 e0       	ldi	r22, 0x06	; 6
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/nvmv3.cpp:57
  }
    114c:	70 e1       	ldi	r23, 0x10	; 16
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/nvmv3.cpp:73
    D2PRINTF(" NVM_V3_FLPERW=%06lX\r\n", _dwAddr);
    return (
      nvm_ctrl_change(0x00)
      && UPDI::send_words_block(_dwAddr, _wLength)
      && nvm_ctrl_change(0x05)  /* NVM_V3_CMD_FLPERW */
      && (nvm_wait() & 0x73) == 0
    114e:	80 e0       	ldi	r24, 0x00	; 0
    1150:	90 e0       	ldi	r25, 0x00	; 0
    1152:	4b dd       	rcall	.-1386   	; 0xbea <UPDI::recv_byte(unsigned long)>
    1154:	8f b3       	in	r24, 0x1f	; 31
    1156:	83 70       	andi	r24, 0x03	; 3
    1158:	c1 f7       	brne	.-16     	; 0x114a <NVM::V3::nvm_wait()>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/nvmv3.cpp:59
  uint8_t nvm_wait (void) {
    do { UPDI::recv_byte(NVM_STATUS); } while (RXDATA & 3);
    return RXDATA;
  }

  bool nvm_ctrl_change (uint8_t _nvmcmd) {
    115a:	8f b3       	in	r24, 0x1f	; 31
    115c:	08 95       	ret

0000115e <NVM::V3::write_eeprom(unsigned long, unsigned int) [clone .part.3]>:
_ZN3NVM2V317write_words_flashEmj.part.1():
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/nvmv3.cpp:60
    nvm_wait();
    115e:	f5 df       	rcall	.-22     	; 0x114a <NVM::V3::nvm_wait()>
    1160:	98 2f       	mov	r25, r24
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/nvmv3.cpp:61
    if (UPDI::recv_byte(NVM_CTRL) && RXDATA == _nvmcmd) return true;
    1162:	93 77       	andi	r25, 0x73	; 115
    1164:	81 e0       	ldi	r24, 0x01	; 1
    1166:	09 f0       	breq	.+2      	; 0x116a <NVM::V3::write_eeprom(unsigned long, unsigned int) [clone .part.3]+0xc>
    1168:	80 e0       	ldi	r24, 0x00	; 0
    116a:	08 95       	ret

0000116c <NVM::V3::nvm_ctrl_change(unsigned char)>:
nvm_ctrl_change():
    116c:	cf 93       	push	r28
    116e:	c8 2f       	mov	r28, r24
    1170:	ec df       	rcall	.-40     	; 0x114a <NVM::V3::nvm_wait()>
    1172:	60 e0       	ldi	r22, 0x00	; 0
    1174:	70 e1       	ldi	r23, 0x10	; 16
    1176:	80 e0       	ldi	r24, 0x00	; 0
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/nvmv3.cpp:65
    if (!UPDI::nvm_ctrl(0x00)) return false;
    if (0 != _nvmcmd) return UPDI::nvm_ctrl(_nvmcmd);
    return true;
  }
    1178:	90 e0       	ldi	r25, 0x00	; 0
    117a:	37 dd       	rcall	.-1426   	; 0xbea <UPDI::recv_byte(unsigned long)>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/nvmv3.cpp:62
  }

  bool nvm_ctrl_change (uint8_t _nvmcmd) {
    nvm_wait();
    if (UPDI::recv_byte(NVM_CTRL) && RXDATA == _nvmcmd) return true;
    if (!UPDI::nvm_ctrl(0x00)) return false;
    117c:	88 23       	and	r24, r24
    117e:	31 f0       	breq	.+12     	; 0x118c <NVM::V3::nvm_ctrl_change(unsigned char)+0x20>
    1180:	8f b3       	in	r24, 0x1f	; 31
    1182:	8c 13       	cpse	r24, r28
    1184:	03 c0       	rjmp	.+6      	; 0x118c <NVM::V3::nvm_ctrl_change(unsigned char)+0x20>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/nvmv2.cpp:65

  bool nvm_ctrl_change (uint8_t _nvmcmd) {
    nvm_wait();
    if (UPDI::recv_byte(NVM_CTRL) && RXDATA == _nvmcmd) return true;
    if (!UPDI::nvm_ctrl(0x00)) return false;
    if (0 != _nvmcmd) return UPDI::nvm_ctrl(_nvmcmd);
    1186:	81 e0       	ldi	r24, 0x01	; 1
    1188:	cf 91       	pop	r28
    118a:	08 95       	ret
    if (0 != _nvmcmd) return UPDI::nvm_ctrl(_nvmcmd);
    return true;
  }
    118c:	80 e0       	ldi	r24, 0x00	; 0
    118e:	dd dd       	rcall	.-1094   	; 0xd4a <UPDI::nvm_ctrl(unsigned char)>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/nvmv4.cpp:116
      && nvm_ctrl_change(0x00)
    );
  }

  size_t prog_init (void) {
    return nvm_ctrl_change(0x00);
    1190:	88 23       	and	r24, r24
    1192:	d1 f3       	breq	.-12     	; 0x1188 <NVM::V3::nvm_ctrl_change(unsigned char)+0x1c>
    1194:	cc 23       	and	r28, r28
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/nvmv4.cpp:117
  }
    1196:	b9 f3       	breq	.-18     	; 0x1186 <NVM::V3::nvm_ctrl_change(unsigned char)+0x1a>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/nvmv4.cpp:78
    D2PRINTF(" NVM_V4_FLPER=%06lX\r\n", _dwAddr);
    return (
      nvm_ctrl_change(0x08)   /* NVM_V4_CMD_FLPER */
      && UPDI::send_byte(_dwAddr, 0xFF)
      && (nvm_wait() & 0x73) == 0
      && nvm_ctrl_change(0x00)
    1198:	8c 2f       	mov	r24, r28
    119a:	cf 91       	pop	r28
    119c:	d6 cd       	rjmp	.-1108   	; 0xd4a <UPDI::nvm_ctrl(unsigned char)>

0000119e <NVM::V4::prog_init()>:
prog_init():
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/nvmv3.cpp:98
      && (nvm_wait() & 0x73) == 0
    );
  }

  size_t prog_init (void) {
    nvm_ctrl_change(0x0F);      /* NVM_V3_CMD_FLPBCLR */
    119e:	80 e0       	ldi	r24, 0x00	; 0
    11a0:	e5 df       	rcall	.-54     	; 0x116c <NVM::V3::nvm_ctrl_change(unsigned char)>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/nvmv3.cpp:99
    nvm_ctrl_change(0x1F);      /* NVM_V3_CMD_EEPBCLR */
    11a2:	90 e0       	ldi	r25, 0x00	; 0
    11a4:	08 95       	ret

000011a6 <NVM::V4::write_eeprom(unsigned long, unsigned int) [clone .part.5]>:
_ZN3NVM2V416erase_flash_pageEm.part.1():
    11a6:	80 e0       	ldi	r24, 0x00	; 0
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/nvmv3.cpp:100
    return nvm_ctrl_change(0x00);
    11a8:	e1 cf       	rjmp	.-62     	; 0x116c <NVM::V3::nvm_ctrl_change(unsigned char)>

000011aa <NVM::V3::prog_init()>:
prog_init():
    11aa:	8f e0       	ldi	r24, 0x0F	; 15
    11ac:	df df       	rcall	.-66     	; 0x116c <NVM::V3::nvm_ctrl_change(unsigned char)>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/nvmv3.cpp:101
  }
    11ae:	8f e1       	ldi	r24, 0x1F	; 31
    11b0:	dd df       	rcall	.-70     	; 0x116c <NVM::V3::nvm_ctrl_change(unsigned char)>
    11b2:	80 e0       	ldi	r24, 0x00	; 0
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/nvmv3.cpp:77
      && nvm_ctrl_change(0x05)  /* NVM_V3_CMD_FLPERW */
      && (nvm_wait() & 0x73) == 0
    );
  }

  bool write_bytes_flash (uint32_t _dwAddr, size_t _wLength) {
    11b4:	db df       	rcall	.-74     	; 0x116c <NVM::V3::nvm_ctrl_change(unsigned char)>
    11b6:	90 e0       	ldi	r25, 0x00	; 0
    11b8:	08 95       	ret

000011ba <NVM::V5::prog_init()>:
_ZN3NVM2V59prog_initEv():
    11ba:	f7 cf       	rjmp	.-18     	; 0x11aa <NVM::V3::prog_init()>

000011bc <NVM::V3::write_bytes_flash(unsigned long, unsigned int)>:
write_bytes_flash():
    11bc:	cf 92       	push	r12
    11be:	df 92       	push	r13
    11c0:	ef 92       	push	r14
    11c2:	ff 92       	push	r15
    11c4:	cf 93       	push	r28
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/nvmv3.cpp:80
    D2PRINTF(" NVM_V3_FLPERW=%06lX\r\n", _dwAddr);
    return (
      nvm_ctrl_change(0x00)
    11c6:	df 93       	push	r29
    11c8:	6b 01       	movw	r12, r22
    11ca:	7c 01       	movw	r14, r24
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/nvmv3.cpp:83
      && UPDI::send_bytes_block(_dwAddr, _wLength)
      && nvm_ctrl_change(0x05)  /* NVM_V3_CMD_FLPERW */
      && (nvm_wait() & 0x73) == 0
    11cc:	ea 01       	movw	r28, r20
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/nvmv3.cpp:81

  bool write_bytes_flash (uint32_t _dwAddr, size_t _wLength) {
    D2PRINTF(" NVM_V3_FLPERW=%06lX\r\n", _dwAddr);
    return (
      nvm_ctrl_change(0x00)
      && UPDI::send_bytes_block(_dwAddr, _wLength)
    11ce:	80 e0       	ldi	r24, 0x00	; 0
    11d0:	cd df       	rcall	.-102    	; 0x116c <NVM::V3::nvm_ctrl_change(unsigned char)>
    11d2:	88 23       	and	r24, r24
    11d4:	89 f0       	breq	.+34     	; 0x11f8 <NVM::V3::write_bytes_flash(unsigned long, unsigned int)+0x3c>
    11d6:	ae 01       	movw	r20, r28
    11d8:	c7 01       	movw	r24, r14
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/nvmv3.cpp:82
      && nvm_ctrl_change(0x05)  /* NVM_V3_CMD_FLPERW */
    11da:	b6 01       	movw	r22, r12
    11dc:	5e dd       	rcall	.-1348   	; 0xc9a <UPDI::send_bytes_block(unsigned long, unsigned int)>
    11de:	88 23       	and	r24, r24
    11e0:	59 f0       	breq	.+22     	; 0x11f8 <NVM::V3::write_bytes_flash(unsigned long, unsigned int)+0x3c>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/nvmv3.cpp:85
      && (nvm_wait() & 0x73) == 0
    );
  }
    11e2:	85 e0       	ldi	r24, 0x05	; 5
    11e4:	c3 df       	rcall	.-122    	; 0x116c <NVM::V3::nvm_ctrl_change(unsigned char)>
    11e6:	88 23       	and	r24, r24
    11e8:	39 f0       	breq	.+14     	; 0x11f8 <NVM::V3::write_bytes_flash(unsigned long, unsigned int)+0x3c>
    11ea:	df 91       	pop	r29
    11ec:	cf 91       	pop	r28
    11ee:	ff 90       	pop	r15
    11f0:	ef 90       	pop	r14
    11f2:	df 90       	pop	r13
    11f4:	cf 90       	pop	r12
    11f6:	b3 cf       	rjmp	.-154    	; 0x115e <NVM::V3::write_eeprom(unsigned long, unsigned int) [clone .part.3]>
    11f8:	80 e0       	ldi	r24, 0x00	; 0
    11fa:	df 91       	pop	r29
    11fc:	cf 91       	pop	r28
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/nvmv3.cpp:67
    if (!UPDI::nvm_ctrl(0x00)) return false;
    if (0 != _nvmcmd) return UPDI::nvm_ctrl(_nvmcmd);
    return true;
  }

  bool write_words_flash (uint32_t _dwAddr, size_t _wLength) {
    11fe:	ff 90       	pop	r15
    1200:	ef 90       	pop	r14
    1202:	df 90       	pop	r13
    1204:	cf 90       	pop	r12
    1206:	08 95       	ret

00001208 <NVM::V3::write_words_flash(unsigned long, unsigned int)>:
write_words_flash():
    1208:	cf 92       	push	r12
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/nvmv3.cpp:70
    D2PRINTF(" NVM_V3_FLPERW=%06lX\r\n", _dwAddr);
    return (
      nvm_ctrl_change(0x00)
    120a:	df 92       	push	r13
    120c:	ef 92       	push	r14
    120e:	ff 92       	push	r15
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/nvmv3.cpp:73
      && UPDI::send_words_block(_dwAddr, _wLength)
      && nvm_ctrl_change(0x05)  /* NVM_V3_CMD_FLPERW */
      && (nvm_wait() & 0x73) == 0
    1210:	cf 93       	push	r28
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/nvmv3.cpp:71

  bool write_words_flash (uint32_t _dwAddr, size_t _wLength) {
    D2PRINTF(" NVM_V3_FLPERW=%06lX\r\n", _dwAddr);
    return (
      nvm_ctrl_change(0x00)
      && UPDI::send_words_block(_dwAddr, _wLength)
    1212:	df 93       	push	r29
    1214:	6b 01       	movw	r12, r22
    1216:	7c 01       	movw	r14, r24
    1218:	ea 01       	movw	r28, r20
    121a:	80 e0       	ldi	r24, 0x00	; 0
    121c:	a7 df       	rcall	.-178    	; 0x116c <NVM::V3::nvm_ctrl_change(unsigned char)>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/nvmv3.cpp:72
      && nvm_ctrl_change(0x05)  /* NVM_V3_CMD_FLPERW */
    121e:	88 23       	and	r24, r24
    1220:	89 f0       	breq	.+34     	; 0x1244 <NVM::V3::write_words_flash(unsigned long, unsigned int)+0x3c>
    1222:	ae 01       	movw	r20, r28
    1224:	c7 01       	movw	r24, r14
    1226:	b6 01       	movw	r22, r12
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/nvmv3.cpp:75
      && (nvm_wait() & 0x73) == 0
    );
  }
    1228:	fa dc       	rcall	.-1548   	; 0xc1e <UPDI::send_words_block(unsigned long, unsigned int)>
    122a:	88 23       	and	r24, r24
    122c:	59 f0       	breq	.+22     	; 0x1244 <NVM::V3::write_words_flash(unsigned long, unsigned int)+0x3c>
    122e:	85 e0       	ldi	r24, 0x05	; 5
    1230:	9d df       	rcall	.-198    	; 0x116c <NVM::V3::nvm_ctrl_change(unsigned char)>
    1232:	88 23       	and	r24, r24
    1234:	39 f0       	breq	.+14     	; 0x1244 <NVM::V3::write_words_flash(unsigned long, unsigned int)+0x3c>
    1236:	df 91       	pop	r29
    1238:	cf 91       	pop	r28
    123a:	ff 90       	pop	r15
    123c:	ef 90       	pop	r14
    123e:	df 90       	pop	r13
    1240:	cf 90       	pop	r12
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/nvmv4.cpp:72
    if (!UPDI::nvm_ctrl(0x00)) return false;
    if (0 != _nvmcmd) return UPDI::nvm_ctrl(_nvmcmd);
    return true;
  }

  bool erase_flash_page (uint32_t _dwAddr) {
    1242:	8d cf       	rjmp	.-230    	; 0x115e <NVM::V3::write_eeprom(unsigned long, unsigned int) [clone .part.3]>
    1244:	80 e0       	ldi	r24, 0x00	; 0
    1246:	df 91       	pop	r29
    1248:	cf 91       	pop	r28
    124a:	ff 90       	pop	r15
    124c:	ef 90       	pop	r14
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/nvmv4.cpp:75
    D2PRINTF(" NVM_V4_FLPER=%06lX\r\n", _dwAddr);
    return (
      nvm_ctrl_change(0x08)   /* NVM_V4_CMD_FLPER */
    124e:	df 90       	pop	r13
    1250:	cf 90       	pop	r12
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/nvmv4.cpp:78
      && UPDI::send_byte(_dwAddr, 0xFF)
      && (nvm_wait() & 0x73) == 0
      && nvm_ctrl_change(0x00)
    1252:	08 95       	ret

00001254 <NVM::V4::erase_flash_page(unsigned long)>:
erase_flash_page():
    1254:	cf 92       	push	r12
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/nvmv4.cpp:76

  bool erase_flash_page (uint32_t _dwAddr) {
    D2PRINTF(" NVM_V4_FLPER=%06lX\r\n", _dwAddr);
    return (
      nvm_ctrl_change(0x08)   /* NVM_V4_CMD_FLPER */
      && UPDI::send_byte(_dwAddr, 0xFF)
    1256:	df 92       	push	r13
    1258:	ef 92       	push	r14
    125a:	ff 92       	push	r15
    125c:	6b 01       	movw	r12, r22
    125e:	7c 01       	movw	r14, r24
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/nvmv4.cpp:77
      && (nvm_wait() & 0x73) == 0
    1260:	88 e0       	ldi	r24, 0x08	; 8
    1262:	84 df       	rcall	.-248    	; 0x116c <NVM::V3::nvm_ctrl_change(unsigned char)>
    1264:	88 23       	and	r24, r24
    1266:	71 f0       	breq	.+28     	; 0x1284 <NVM::V4::erase_flash_page(unsigned long)+0x30>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/nvmv4.cpp:80
      && nvm_ctrl_change(0x00)
    );
  }
    1268:	4f ef       	ldi	r20, 0xFF	; 255
    126a:	c7 01       	movw	r24, r14
    126c:	b6 01       	movw	r22, r12
    126e:	50 dd       	rcall	.-1376   	; 0xd10 <UPDI::send_byte(unsigned long, unsigned char)>
    1270:	88 23       	and	r24, r24
    1272:	41 f0       	breq	.+16     	; 0x1284 <NVM::V4::erase_flash_page(unsigned long)+0x30>
    1274:	6a df       	rcall	.-300    	; 0x114a <NVM::V3::nvm_wait()>
    1276:	83 77       	andi	r24, 0x73	; 115
    1278:	29 f4       	brne	.+10     	; 0x1284 <NVM::V4::erase_flash_page(unsigned long)+0x30>
    127a:	ff 90       	pop	r15
    127c:	ef 90       	pop	r14
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/nvmv0.cpp:62
  constexpr auto NVM_STATUS = 0x1002;
  constexpr auto NVM_DATA   = 0x1006;
  constexpr auto PROD_SIG   = 0x1100;

  uint8_t nvm_wait (void) {
    do { UPDI::recv_byte(NVM_STATUS); } while (RXDATA & 3);
    127e:	df 90       	pop	r13
    1280:	cf 90       	pop	r12
    1282:	91 cf       	rjmp	.-222    	; 0x11a6 <NVM::V4::write_eeprom(unsigned long, unsigned int) [clone .part.5]>
    1284:	80 e0       	ldi	r24, 0x00	; 0
    1286:	ff 90       	pop	r15
    1288:	ef 90       	pop	r14
    128a:	df 90       	pop	r13
    128c:	cf 90       	pop	r12
    128e:	08 95       	ret

00001290 <NVM::V0::nvm_wait()>:
nvm_wait():
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/nvmv0.cpp:63
    return RXDATA;
    1290:	62 e0       	ldi	r22, 0x02	; 2
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/nvmv0.cpp:64
  }
    1292:	70 e1       	ldi	r23, 0x10	; 16
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/nvmv0.cpp:108
      && (nvm_wait() & 7) == 0
    );
  }

  size_t prog_init (void) {
    nvm_wait();
    1294:	80 e0       	ldi	r24, 0x00	; 0
    1296:	90 e0       	ldi	r25, 0x00	; 0
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/nvmv0.cpp:109
    UPDI::nvm_ctrl(0x04);         /* NVM_CMD_PBC */
    1298:	a8 dc       	rcall	.-1712   	; 0xbea <UPDI::recv_byte(unsigned long)>
    129a:	8f b3       	in	r24, 0x1f	; 31
    129c:	83 70       	andi	r24, 0x03	; 3
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/nvmv0.cpp:110
    nvm_wait();
    129e:	c1 f7       	brne	.-16     	; 0x1290 <NVM::V0::nvm_wait()>
    12a0:	8f b3       	in	r24, 0x1f	; 31
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/nvmv0.cpp:111
    return UPDI::nvm_ctrl(0x00);
    12a2:	08 95       	ret

000012a4 <NVM::V0::prog_init()>:
prog_init():
    12a4:	f5 df       	rcall	.-22     	; 0x1290 <NVM::V0::nvm_wait()>
    12a6:	84 e0       	ldi	r24, 0x04	; 4
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/nvmv0.cpp:112
  }
    12a8:	50 dd       	rcall	.-1376   	; 0xd4a <UPDI::nvm_ctrl(unsigned char)>
    12aa:	f2 df       	rcall	.-28     	; 0x1290 <NVM::V0::nvm_wait()>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/nvmv2.cpp:61
  uint8_t nvm_wait (void) {
    do { UPDI::recv_byte(NVM_STATUS); } while (RXDATA & 3);
    return RXDATA;
  }

  bool nvm_ctrl_change (uint8_t _nvmcmd) {
    12ac:	80 e0       	ldi	r24, 0x00	; 0
    12ae:	4d dd       	rcall	.-1382   	; 0xd4a <UPDI::nvm_ctrl(unsigned char)>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/nvmv2.cpp:62
    nvm_wait();
    12b0:	90 e0       	ldi	r25, 0x00	; 0
    12b2:	08 95       	ret

000012b4 <NVM::V2::nvm_ctrl_change(unsigned char)>:
nvm_ctrl_change():
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/nvmv2.cpp:63
    if (UPDI::recv_byte(NVM_CTRL) && RXDATA == _nvmcmd) return true;
    12b4:	cf 93       	push	r28
    12b6:	c8 2f       	mov	r28, r24
    12b8:	eb df       	rcall	.-42     	; 0x1290 <NVM::V0::nvm_wait()>
    12ba:	60 e0       	ldi	r22, 0x00	; 0
    12bc:	70 e1       	ldi	r23, 0x10	; 16
    12be:	80 e0       	ldi	r24, 0x00	; 0
    12c0:	90 e0       	ldi	r25, 0x00	; 0
    12c2:	93 dc       	rcall	.-1754   	; 0xbea <UPDI::recv_byte(unsigned long)>
    12c4:	88 23       	and	r24, r24
    12c6:	31 f0       	breq	.+12     	; 0x12d4 <NVM::V2::nvm_ctrl_change(unsigned char)+0x20>
    12c8:	8f b3       	in	r24, 0x1f	; 31
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/nvmv2.cpp:67
    if (!UPDI::nvm_ctrl(0x00)) return false;
    if (0 != _nvmcmd) return UPDI::nvm_ctrl(_nvmcmd);
    return true;
  }
    12ca:	8c 13       	cpse	r24, r28
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/nvmv2.cpp:64
  }

  bool nvm_ctrl_change (uint8_t _nvmcmd) {
    nvm_wait();
    if (UPDI::recv_byte(NVM_CTRL) && RXDATA == _nvmcmd) return true;
    if (!UPDI::nvm_ctrl(0x00)) return false;
    12cc:	03 c0       	rjmp	.+6      	; 0x12d4 <NVM::V2::nvm_ctrl_change(unsigned char)+0x20>
    12ce:	81 e0       	ldi	r24, 0x01	; 1
    12d0:	cf 91       	pop	r28
    12d2:	08 95       	ret
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/nvmv2.cpp:65
    if (0 != _nvmcmd) return UPDI::nvm_ctrl(_nvmcmd);
    12d4:	80 e0       	ldi	r24, 0x00	; 0
    12d6:	39 dd       	rcall	.-1422   	; 0xd4a <UPDI::nvm_ctrl(unsigned char)>
    12d8:	88 23       	and	r24, r24
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/nvmv2.cpp:67
    return true;
  }
    12da:	d1 f3       	breq	.-12     	; 0x12d0 <NVM::V2::nvm_ctrl_change(unsigned char)+0x1c>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/nvmv2.cpp:65

  bool nvm_ctrl_change (uint8_t _nvmcmd) {
    nvm_wait();
    if (UPDI::recv_byte(NVM_CTRL) && RXDATA == _nvmcmd) return true;
    if (!UPDI::nvm_ctrl(0x00)) return false;
    if (0 != _nvmcmd) return UPDI::nvm_ctrl(_nvmcmd);
    12dc:	cc 23       	and	r28, r28
    12de:	b9 f3       	breq	.-18     	; 0x12ce <NVM::V2::nvm_ctrl_change(unsigned char)+0x1a>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/nvmv2.cpp:113
      && nvm_ctrl_change(0x00)
    );
  }

  size_t prog_init (void) {
    return nvm_ctrl_change(0x00);
    12e0:	8c 2f       	mov	r24, r28
    12e2:	cf 91       	pop	r28
    12e4:	32 cd       	rjmp	.-1436   	; 0xd4a <UPDI::nvm_ctrl(unsigned char)>

000012e6 <NVM::V2::prog_init()>:
prog_init():
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/nvmv2.cpp:114
  }
    12e6:	80 e0       	ldi	r24, 0x00	; 0
    12e8:	e5 df       	rcall	.-54     	; 0x12b4 <NVM::V2::nvm_ctrl_change(unsigned char)>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/nvmv2.cpp:75
    D2PRINTF(" NVM_V2_FLPER=%06lX\r\n", _dwAddr);
    return (
      nvm_ctrl_change(0x08)   /* NVM_V2_CMD_FLPER */
      && UPDI::send_byte(_dwAddr, 0xFF)
      && (nvm_wait() & 0x73) == 0
      && nvm_ctrl_change(0x00)
    12ea:	90 e0       	ldi	r25, 0x00	; 0
    12ec:	08 95       	ret

000012ee <NVM::V2::write_eeprom(unsigned long, unsigned int) [clone .part.5]>:
_ZN3NVM2V216erase_flash_pageEm.part.1():
    12ee:	80 e0       	ldi	r24, 0x00	; 0
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/nvmv2.cpp:69
    if (!UPDI::nvm_ctrl(0x00)) return false;
    if (0 != _nvmcmd) return UPDI::nvm_ctrl(_nvmcmd);
    return true;
  }

  bool erase_flash_page (uint32_t _dwAddr) {
    12f0:	e1 cf       	rjmp	.-62     	; 0x12b4 <NVM::V2::nvm_ctrl_change(unsigned char)>

000012f2 <NVM::V2::erase_flash_page(unsigned long)>:
erase_flash_page():
    12f2:	cf 92       	push	r12
    12f4:	df 92       	push	r13
    12f6:	ef 92       	push	r14
    12f8:	ff 92       	push	r15
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/nvmv2.cpp:72
    D2PRINTF(" NVM_V2_FLPER=%06lX\r\n", _dwAddr);
    return (
      nvm_ctrl_change(0x08)   /* NVM_V2_CMD_FLPER */
    12fa:	6b 01       	movw	r12, r22
    12fc:	7c 01       	movw	r14, r24
    12fe:	88 e0       	ldi	r24, 0x08	; 8
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/nvmv2.cpp:75
      && UPDI::send_byte(_dwAddr, 0xFF)
      && (nvm_wait() & 0x73) == 0
      && nvm_ctrl_change(0x00)
    1300:	d9 df       	rcall	.-78     	; 0x12b4 <NVM::V2::nvm_ctrl_change(unsigned char)>
    1302:	88 23       	and	r24, r24
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/nvmv2.cpp:73

  bool erase_flash_page (uint32_t _dwAddr) {
    D2PRINTF(" NVM_V2_FLPER=%06lX\r\n", _dwAddr);
    return (
      nvm_ctrl_change(0x08)   /* NVM_V2_CMD_FLPER */
      && UPDI::send_byte(_dwAddr, 0xFF)
    1304:	71 f0       	breq	.+28     	; 0x1322 <NVM::V2::erase_flash_page(unsigned long)+0x30>
    1306:	4f ef       	ldi	r20, 0xFF	; 255
    1308:	c7 01       	movw	r24, r14
    130a:	b6 01       	movw	r22, r12
    130c:	01 dd       	rcall	.-1534   	; 0xd10 <UPDI::send_byte(unsigned long, unsigned char)>
    130e:	88 23       	and	r24, r24
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/nvmv2.cpp:74
      && (nvm_wait() & 0x73) == 0
    1310:	41 f0       	breq	.+16     	; 0x1322 <NVM::V2::erase_flash_page(unsigned long)+0x30>
    1312:	be df       	rcall	.-132    	; 0x1290 <NVM::V0::nvm_wait()>
    1314:	83 77       	andi	r24, 0x73	; 115
    1316:	29 f4       	brne	.+10     	; 0x1322 <NVM::V2::erase_flash_page(unsigned long)+0x30>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/nvmv2.cpp:77
      && nvm_ctrl_change(0x00)
    );
  }
    1318:	ff 90       	pop	r15
    131a:	ef 90       	pop	r14
    131c:	df 90       	pop	r13
    131e:	cf 90       	pop	r12
    1320:	e6 cf       	rjmp	.-52     	; 0x12ee <NVM::V2::write_eeprom(unsigned long, unsigned int) [clone .part.5]>
    1322:	80 e0       	ldi	r24, 0x00	; 0
    1324:	ff 90       	pop	r15
    1326:	ef 90       	pop	r14
    1328:	df 90       	pop	r13
    132a:	cf 90       	pop	r12
    132c:	08 95       	ret

0000132e <NVM::V1::write_memory()>:
_ZN3NVM2V112write_memoryEv():
    132e:	90 e0       	ldi	r25, 0x00	; 0
    1330:	80 e0       	ldi	r24, 0x00	; 0
    1332:	08 95       	ret

00001334 <NVM::V1::read_memory()>:
_ZN3NVM2V111read_memoryEv():
    1334:	90 e0       	ldi	r25, 0x00	; 0
    1336:	80 e0       	ldi	r24, 0x00	; 0
    1338:	08 95       	ret

0000133a <NVM::V1::erase_memory()>:
_ZN3NVM2V112erase_memoryEv():
    133a:	90 e0       	ldi	r25, 0x00	; 0
    133c:	80 e0       	ldi	r24, 0x00	; 0
    133e:	08 95       	ret

00001340 <Print::write(char)>:
write():
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/modernAVR/0.2.14/cores/modernAVR/api/Print.h:58

  virtual size_t write (uint8_t) = 0;

  /* Value and Strings */

  inline size_t write (const char _c) { return write((uint8_t) _c); }
    1340:	dc 01       	movw	r26, r24
    1342:	ed 91       	ld	r30, X+
    1344:	fc 91       	ld	r31, X
    1346:	01 90       	ld	r0, Z+
    1348:	f0 81       	ld	r31, Z
    134a:	e0 2d       	mov	r30, r0
    134c:	09 94       	ijmp

0000134e <Print::printHex(void const*, unsigned int, char, unsigned int, char const*) [clone .constprop.19]>:
printHex():
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/modernAVR/0.2.14/cores/modernAVR/api/cpp/Print_puts.cpp:85
    }
  }
  return *this;
}

Print& Print::printHex (const void* _source, size_t _length, char _separator, size_t _wrap, const char* _split) {
    134e:	cf 92       	push	r12
    1350:	df 92       	push	r13
    1352:	ef 92       	push	r14
    1354:	ff 92       	push	r15
    1356:	0f 93       	push	r16
    1358:	1f 93       	push	r17
    135a:	cf 93       	push	r28
    135c:	df 93       	push	r29
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/modernAVR/0.2.14/cores/modernAVR/api/cpp/Print_puts.cpp:72
uint8_t _read (uint32_t _addr, bool _prog) {
  return _prog ? pgm_read_byte(_addr) : *((uint8_t*)_addr);
}

Print& Print::_print_hex (Print_OPT_HEX_t p) {
  size_t _count = 0;
    135e:	8c 01       	movw	r16, r24
    1360:	d0 e0       	ldi	r29, 0x00	; 0
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/modernAVR/0.2.14/cores/modernAVR/api/cpp/Print_puts.cpp:73
  while (p.length--) {
    1362:	c0 e0       	ldi	r28, 0x00	; 0
_print_hex():
    1364:	7b 01       	movw	r14, r22
    1366:	81 e0       	ldi	r24, 0x01	; 1
    1368:	e8 1a       	sub	r14, r24
    136a:	f1 08       	sbc	r15, r1
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/modernAVR/0.2.14/cores/modernAVR/api/cpp/Print_puts.cpp:68
/*
 * Hex Dump
 */

uint8_t _read (uint32_t _addr, bool _prog) {
  return _prog ? pgm_read_byte(_addr) : *((uint8_t*)_addr);
    136c:	67 2b       	or	r22, r23
    136e:	61 f1       	breq	.+88     	; 0x13c8 <Print::printHex(void const*, unsigned int, char, unsigned int, char const*) [clone .constprop.19]+0x7a>
_read():
    1370:	f8 01       	movw	r30, r16
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/modernAVR/0.2.14/cores/modernAVR/api/cpp/Print_puts.cpp:75

Print& Print::_print_hex (Print_OPT_HEX_t p) {
  size_t _count = 0;
  while (p.length--) {
    uint8_t _c = _read(p.addr++, p.prog);
    write(btoh(__builtin_avr_swap(_c)));
    1372:	d1 90       	ld	r13, Z+
    1374:	8f 01       	movw	r16, r30
_print_hex():
    1376:	8d 2d       	mov	r24, r13
    1378:	82 95       	swap	r24
    137a:	24 db       	rcall	.-2488   	; 0x9c4 <btoh>
    137c:	68 2f       	mov	r22, r24
    137e:	8d e8       	ldi	r24, 0x8D	; 141
    1380:	90 e6       	ldi	r25, 0x60	; 96
    1382:	de df       	rcall	.-68     	; 0x1340 <Print::write(char)>
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/modernAVR/0.2.14/cores/modernAVR/api/cpp/Print_puts.cpp:76
    write(btoh(_c));
    1384:	8d 2d       	mov	r24, r13
    1386:	1e db       	rcall	.-2500   	; 0x9c4 <btoh>
    1388:	68 2f       	mov	r22, r24
    138a:	8d e8       	ldi	r24, 0x8D	; 141
    138c:	90 e6       	ldi	r25, 0x60	; 96
    138e:	d8 df       	rcall	.-80     	; 0x1340 <Print::write(char)>
    1390:	e1 14       	cp	r14, r1
    1392:	f1 04       	cpc	r15, r1
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/modernAVR/0.2.14/cores/modernAVR/api/cpp/Print_puts.cpp:77
    if (p.length) {
    1394:	91 f0       	breq	.+36     	; 0x13ba <Print::printHex(void const*, unsigned int, char, unsigned int, char const*) [clone .constprop.19]+0x6c>
    1396:	21 96       	adiw	r28, 0x01	; 1
    1398:	91 f4       	brne	.+36     	; 0x13be <Print::printHex(void const*, unsigned int, char, unsigned int, char const*) [clone .constprop.19]+0x70>
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/modernAVR/0.2.14/cores/modernAVR/api/cpp/Print_puts.cpp:78
      if (++_count == p.wrap) { puts(p.split); _count -= p.wrap; }
    139a:	81 e8       	ldi	r24, 0x81	; 129
    139c:	c8 2e       	mov	r12, r24
    139e:	80 e6       	ldi	r24, 0x60	; 96
    13a0:	d8 2e       	mov	r13, r24
puts():
    13a2:	f6 01       	movw	r30, r12
    13a4:	61 91       	ld	r22, Z+
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/modernAVR/0.2.14/cores/modernAVR/api/cpp/Print_puts.cpp:35

size_t Print::puts (const char _str[]) {
  char _c;
  size_t _n = 0;
  char* _p = (char *) _str;
  while ((_c = *_p++)) {
    13a6:	6f 01       	movw	r12, r30
    13a8:	66 23       	and	r22, r22
    13aa:	39 f0       	breq	.+14     	; 0x13ba <Print::printHex(void const*, unsigned int, char, unsigned int, char const*) [clone .constprop.19]+0x6c>
    13ac:	8d e8       	ldi	r24, 0x8D	; 141
    13ae:	90 e6       	ldi	r25, 0x60	; 96
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/modernAVR/0.2.14/cores/modernAVR/api/cpp/Print_puts.cpp:36
    if (write(_c)) _n++;
    13b0:	c7 df       	rcall	.-114    	; 0x1340 <Print::write(char)>
    13b2:	89 2b       	or	r24, r25
    13b4:	b1 f7       	brne	.-20     	; 0x13a2 <Print::printHex(void const*, unsigned int, char, unsigned int, char const*) [clone .constprop.19]+0x54>
printHex():
    13b6:	d0 e0       	ldi	r29, 0x00	; 0
    13b8:	c0 e0       	ldi	r28, 0x00	; 0
    13ba:	b7 01       	movw	r22, r14
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/modernAVR/0.2.14/cores/modernAVR/api/cpp/Print_puts.cpp:78
  while (p.length--) {
    uint8_t _c = _read(p.addr++, p.prog);
    write(btoh(__builtin_avr_swap(_c)));
    write(btoh(_c));
    if (p.length) {
      if (++_count == p.wrap) { puts(p.split); _count -= p.wrap; }
    13bc:	d3 cf       	rjmp	.-90     	; 0x1364 <Print::printHex(void const*, unsigned int, char, unsigned int, char const*) [clone .constprop.19]+0x16>
_print_hex():
    13be:	6a e3       	ldi	r22, 0x3A	; 58
    13c0:	8d e8       	ldi	r24, 0x8D	; 141
    13c2:	90 e6       	ldi	r25, 0x60	; 96
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/modernAVR/0.2.14/cores/modernAVR/api/cpp/Print_puts.cpp:79
      else if (p.sep) write(p.sep);
    13c4:	bd df       	rcall	.-134    	; 0x1340 <Print::write(char)>
    13c6:	f9 cf       	rjmp	.-14     	; 0x13ba <Print::printHex(void const*, unsigned int, char, unsigned int, char const*) [clone .constprop.19]+0x6c>
printHex():
    13c8:	8d e8       	ldi	r24, 0x8D	; 141
    13ca:	90 e6       	ldi	r25, 0x60	; 96
    13cc:	df 91       	pop	r29
    13ce:	cf 91       	pop	r28
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/modernAVR/0.2.14/cores/modernAVR/api/cpp/Print_puts.cpp:95
  , _wrap
  , _separator
  , false
  };
  return _print_hex(p);
}
    13d0:	1f 91       	pop	r17
    13d2:	0f 91       	pop	r16
    13d4:	ff 90       	pop	r15
    13d6:	ef 90       	pop	r14
    13d8:	df 90       	pop	r13
    13da:	cf 90       	pop	r12
    13dc:	08 95       	ret

000013de <Print::puts(PGM_t const*)>:
puts():
    13de:	ef 92       	push	r14
    13e0:	ff 92       	push	r15
    13e2:	0f 93       	push	r16
    13e4:	1f 93       	push	r17
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/modernAVR/0.2.14/cores/modernAVR/api/cpp/Print_puts.cpp:52
    else break;
  }
  return _n;
}

size_t Print::puts (const PGM_t _str[]) {
    13e6:	cf 93       	push	r28
    13e8:	df 93       	push	r29
    13ea:	8c 01       	movw	r16, r24
    13ec:	7b 01       	movw	r14, r22
    13ee:	d0 e0       	ldi	r29, 0x00	; 0
    13f0:	c0 e0       	ldi	r28, 0x00	; 0
    13f2:	f7 01       	movw	r30, r14
    13f4:	ec 0f       	add	r30, r28
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/modernAVR/0.2.14/cores/modernAVR/api/cpp/Print_puts.cpp:54
  char _c;
  size_t _n = 0;
    13f6:	fd 1f       	adc	r31, r29
    13f8:	64 91       	lpm	r22, Z
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/modernAVR/0.2.14/cores/modernAVR/api/cpp/Print_puts.cpp:56
  PGM_P _p = reinterpret_cast<PGM_P>(_str);
  while ((_c = pgm_read_byte(_p++))) {
    13fa:	66 23       	and	r22, r22
    13fc:	31 f0       	breq	.+12     	; 0x140a <Print::puts(PGM_t const*)+0x2c>
    13fe:	c8 01       	movw	r24, r16
    1400:	9f df       	rcall	.-194    	; 0x1340 <Print::write(char)>
    1402:	89 2b       	or	r24, r25
    1404:	11 f0       	breq	.+4      	; 0x140a <Print::puts(PGM_t const*)+0x2c>
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/modernAVR/0.2.14/cores/modernAVR/api/cpp/Print_puts.cpp:57
    if (write(_c)) _n++;
    1406:	21 96       	adiw	r28, 0x01	; 1
    1408:	f4 cf       	rjmp	.-24     	; 0x13f2 <Print::puts(PGM_t const*)+0x14>
    140a:	ce 01       	movw	r24, r28
    140c:	df 91       	pop	r29
    140e:	cf 91       	pop	r28
    1410:	1f 91       	pop	r17
    1412:	0f 91       	pop	r16
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/modernAVR/0.2.14/cores/modernAVR/api/cpp/Print_puts.cpp:61
    else break;
  }
  return _n;
}
    1414:	ff 90       	pop	r15
    1416:	ef 90       	pop	r14
    1418:	08 95       	ret

0000141a <Print::ln()>:
ln():
    141a:	cf 93       	push	r28
    141c:	df 93       	push	r29
    141e:	ec 01       	movw	r28, r24
    1420:	6d e0       	ldi	r22, 0x0D	; 13
    1422:	8e df       	rcall	.-228    	; 0x1340 <Print::write(char)>
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/modernAVR/0.2.14/cores/modernAVR/api/Print.h:73
  size_t puts (const char _str[]);
  size_t puts (const PGM_t _str[]);

  /* Support */

  inline Print& ln (void) { write('\r'); write('\n'); return *this; }
    1424:	6a e0       	ldi	r22, 0x0A	; 10
    1426:	ce 01       	movw	r24, r28
    1428:	8b df       	rcall	.-234    	; 0x1340 <Print::write(char)>
    142a:	ce 01       	movw	r24, r28
    142c:	df 91       	pop	r29
    142e:	cf 91       	pop	r28
    1430:	08 95       	ret

00001432 <Print::printf(PGM_t const*, ...) [clone .constprop.22]>:
printf():
    1432:	cf 93       	push	r28
    1434:	df 93       	push	r29
    1436:	cd b7       	in	r28, 0x3d	; 61
    1438:	de b7       	in	r29, 0x3e	; 62
    143a:	2e 97       	sbiw	r28, 0x0e	; 14
    143c:	cd bf       	out	0x3d, r28	; 61
    143e:	de bf       	out	0x3e, r29	; 62
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/modernAVR/0.2.14/cores/modernAVR/api/cpp/Print_format.cpp:35
  va_start(_ap, _format);
  vfprintf(&_fp, _format, _ap);
  return *this;
}

Print& Print::printf (const PGM_t *_format, ...) {
    1440:	88 ea       	ldi	r24, 0xA8	; 168
    1442:	94 e0       	ldi	r25, 0x04	; 4
    1444:	89 87       	std	Y+9, r24	; 0x09
    1446:	9a 87       	std	Y+10, r25	; 0x0a
    1448:	1b 86       	std	Y+11, r1	; 0x0b
    144a:	1c 86       	std	Y+12, r1	; 0x0c
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/modernAVR/0.2.14/cores/modernAVR/api/cpp/Print_format.cpp:38
  FILE _fp;
  va_list _ap;
  fdev_setup_stream(&_fp, printf_putchar, NULL, _FDEV_SETUP_WRITE);
    144c:	82 e0       	ldi	r24, 0x02	; 2
    144e:	8c 83       	std	Y+4, r24	; 0x04
    1450:	8d e8       	ldi	r24, 0x8D	; 141
    1452:	90 e6       	ldi	r25, 0x60	; 96
    1454:	8d 87       	std	Y+13, r24	; 0x0d
    1456:	9e 87       	std	Y+14, r25	; 0x0e
    1458:	ae 01       	movw	r20, r28
    145a:	49 5e       	subi	r20, 0xE9	; 233
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/modernAVR/0.2.14/cores/modernAVR/api/cpp/Print_format.cpp:39
  fdev_set_udata(&_fp, this);
    145c:	5f 4f       	sbci	r21, 0xFF	; 255
    145e:	6d 89       	ldd	r22, Y+21	; 0x15
    1460:	7e 89       	ldd	r23, Y+22	; 0x16
    1462:	ce 01       	movw	r24, r28
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/modernAVR/0.2.14/cores/modernAVR/api/cpp/Print_format.cpp:41
  va_start(_ap, _format);
  vfprintf_P(&_fp, (const char *) _format, _ap);
    1464:	01 96       	adiw	r24, 0x01	; 1
    1466:	0e 94 86 21 	call	0x430c	; 0x430c <vfprintf_P>
    146a:	8d e8       	ldi	r24, 0x8D	; 141
    146c:	90 e6       	ldi	r25, 0x60	; 96
    146e:	2e 96       	adiw	r28, 0x0e	; 14
    1470:	cd bf       	out	0x3d, r28	; 61
    1472:	de bf       	out	0x3e, r29	; 62
    1474:	df 91       	pop	r29
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/modernAVR/0.2.14/cores/modernAVR/api/cpp/Print_format.cpp:43
  return *this;
}
    1476:	cf 91       	pop	r28
    1478:	08 95       	ret

0000147a <USART::change_vcp()>:
change_vcp():
    147a:	bf 92       	push	r11
    147c:	cf 92       	push	r12
    147e:	df 92       	push	r13
    1480:	ef 92       	push	r14
    1482:	ff 92       	push	r15
    1484:	0f 93       	push	r16
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/usart.cpp:115
    }
  }

  /*** Activates VCP operation. ***/
  /* Detailed parameters are specified in SET_LINE_ENCODING. */
  void change_vcp (void) {
    1486:	1f 93       	push	r17
    1488:	cf 93       	push	r28
    148a:	df 93       	push	r29
    148c:	00 d0       	rcall	.+0      	; 0x148e <USART::change_vcp()+0x14>
    148e:	00 d0       	rcall	.+0      	; 0x1490 <USART::change_vcp()+0x16>
    1490:	cd b7       	in	r28, 0x3d	; 61
    1492:	de b7       	in	r29, 0x3e	; 62
    1494:	c0 90 86 60 	lds	r12, 0x6086	; 0x806086 <_set_line_encoding>
    1498:	d0 90 87 60 	lds	r13, 0x6087	; 0x806087 <_set_line_encoding+0x1>
    149c:	e0 90 88 60 	lds	r14, 0x6088	; 0x806088 <_set_line_encoding+0x2>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/usart.cpp:123
    digitalWrite(PIN_VCP_TXD, HIGH);
    pinModeMacro(PIN_VCP_TXD, OUTPUT);    /* push-pull */
  #else
    uint8_t _ctrlb = USART_RXEN_bm | USART_TXEN_bm | USART_ODME_bm;
  #endif
    uint32_t _baud = _set_line_encoding.dwDTERate;
    14a0:	f0 90 89 60 	lds	r15, 0x6089	; 0x806089 <_set_line_encoding+0x3>
    14a4:	c1 14       	cp	r12, r1
    14a6:	d1 04       	cpc	r13, r1
    14a8:	e1 04       	cpc	r14, r1
    14aa:	f1 04       	cpc	r15, r1
    14ac:	d9 f0       	breq	.+54     	; 0x14e4 <USART::change_vcp()+0x6a>
    14ae:	60 e0       	ldi	r22, 0x00	; 0
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/usart.cpp:125
    /* If the BAUD value is small, select double speed mode. */
    if (_baud) _baud = (((F_CPU * 8L) / _baud) + 1) >> 1;
    14b0:	78 e6       	ldi	r23, 0x68	; 104
    14b2:	89 e8       	ldi	r24, 0x89	; 137
    14b4:	99 e0       	ldi	r25, 0x09	; 9
    14b6:	a7 01       	movw	r20, r14
    14b8:	96 01       	movw	r18, r12
    14ba:	0e 94 48 24 	call	0x4890	; 0x4890 <__udivmodsi4>
    14be:	69 01       	movw	r12, r18
    14c0:	7a 01       	movw	r14, r20
    14c2:	8f ef       	ldi	r24, 0xFF	; 255
    14c4:	c8 1a       	sub	r12, r24
    14c6:	d8 0a       	sbc	r13, r24
    14c8:	e8 0a       	sbc	r14, r24
    14ca:	f8 0a       	sbc	r15, r24
    14cc:	f6 94       	lsr	r15
    14ce:	e7 94       	ror	r14
    14d0:	d7 94       	ror	r13
    14d2:	c7 94       	ror	r12
    14d4:	88 ec       	ldi	r24, 0xC8	; 200
    14d6:	b8 2e       	mov	r11, r24
    14d8:	90 e6       	ldi	r25, 0x60	; 96
    14da:	c9 16       	cp	r12, r25
    14dc:	d1 04       	cpc	r13, r1
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/usart.cpp:121
  #ifdef CONFIG_VCP_TXD_PUSHPULL
    uint8_t _ctrlb = USART_RXEN_bm | USART_TXEN_bm;
    digitalWrite(PIN_VCP_TXD, HIGH);
    pinModeMacro(PIN_VCP_TXD, OUTPUT);    /* push-pull */
  #else
    uint8_t _ctrlb = USART_RXEN_bm | USART_TXEN_bm | USART_ODME_bm;
    14de:	e1 04       	cpc	r14, r1
    14e0:	f1 04       	cpc	r15, r1
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/usart.cpp:126
  #endif
    uint32_t _baud = _set_line_encoding.dwDTERate;
    /* If the BAUD value is small, select double speed mode. */
    if (_baud) _baud = (((F_CPU * 8L) / _baud) + 1) >> 1;
    if (_baud < 96) {
    14e2:	30 f4       	brcc	.+12     	; 0x14f0 <USART::change_vcp()+0x76>
    14e4:	cc 0c       	add	r12, r12
    14e6:	dd 1c       	adc	r13, r13
    14e8:	ee 1c       	adc	r14, r14
    14ea:	ff 1c       	adc	r15, r15
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/usart.cpp:127
      _baud <<= 1;
    14ec:	2a ec       	ldi	r18, 0xCA	; 202
    14ee:	b2 2e       	mov	r11, r18
    14f0:	1f 92       	push	r1
    14f2:	bf 92       	push	r11
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/usart.cpp:128
      _ctrlb |= USART_RXMODE_CLK2X_gc;
    14f4:	ff 92       	push	r15
    14f6:	ef 92       	push	r14
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/usart.cpp:130
    }
    D1PRINTF(" BAUD=%08lX:%02X\r\n", _baud, _ctrlb);
    14f8:	df 92       	push	r13
    14fa:	cf 92       	push	r12
    14fc:	89 e5       	ldi	r24, 0x59	; 89
    14fe:	98 e0       	ldi	r25, 0x08	; 8
    1500:	9f 93       	push	r25
    1502:	8f 93       	push	r24
    1504:	0d e8       	ldi	r16, 0x8D	; 141
    1506:	10 e6       	ldi	r17, 0x60	; 96
    1508:	1f 93       	push	r17
    150a:	0f 93       	push	r16
    150c:	92 df       	rcall	.-220    	; 0x1432 <Print::printf(PGM_t const*, ...) [clone .constprop.22]>
    150e:	cd bf       	out	0x3d, r28	; 61
    1510:	de bf       	out	0x3e, r29	; 62
    1512:	d7 01       	movw	r26, r14
    1514:	c6 01       	movw	r24, r12
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/usart.cpp:131
    if (_baud < 0x10000UL && _baud >= 64) {
    1516:	80 54       	subi	r24, 0x40	; 64
    1518:	91 09       	sbc	r25, r1
    151a:	a1 09       	sbc	r26, r1
    151c:	b1 09       	sbc	r27, r1
    151e:	80 3c       	cpi	r24, 0xC0	; 192
    1520:	9f 4f       	sbci	r25, 0xFF	; 255
    1522:	a1 05       	cpc	r26, r1
    1524:	b1 05       	cpc	r27, r1
    1526:	08 f0       	brcs	.+2      	; 0x152a <USART::change_vcp()+0xb0>
    1528:	58 c0       	rjmp	.+176    	; 0x15da <USART::change_vcp()+0x160>
    152a:	90 91 8c 60 	lds	r25, 0x608C	; 0x80608c <_set_line_encoding+0x6>
    152e:	95 50       	subi	r25, 0x05	; 5
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/usart.cpp:132
      uint8_t _bits = _set_line_encoding.bDataBits - 5;
    1530:	40 91 2c 60 	lds	r20, 0x602C	; 0x80602c <SYS::_updi_bitmap+0x12>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/usart.cpp:133
      uint8_t _ctrlc = (uint8_t[]){
    1534:	50 91 2d 60 	lds	r21, 0x602D	; 0x80602d <SYS::_updi_bitmap+0x13>
    1538:	60 91 2e 60 	lds	r22, 0x602E	; 0x80602e <SYS::_updi_bitmap+0x14>
    153c:	70 91 2f 60 	lds	r23, 0x602F	; 0x80602f <SYS::_updi_bitmap+0x15>
    1540:	49 83       	std	Y+1, r20	; 0x01
    1542:	5a 83       	std	Y+2, r21	; 0x02
    1544:	6b 83       	std	Y+3, r22	; 0x03
    1546:	7c 83       	std	Y+4, r23	; 0x04
    1548:	e0 91 8b 60 	lds	r30, 0x608B	; 0x80608b <_set_line_encoding+0x5>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/usart.cpp:135
        USART_PMODE_DISABLED_gc, USART_PMODE_ODD_gc, USART_PMODE_EVEN_gc, USART_PMODE_DISABLED_gc
      }[_set_line_encoding.bParityType & 3]
    154c:	e3 70       	andi	r30, 0x03	; 3
    154e:	ec 0f       	add	r30, r28
    1550:	fd 2f       	mov	r31, r29
    1552:	f1 1d       	adc	r31, r1
    1554:	21 81       	ldd	r18, Z+1	; 0x01
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/usart.cpp:136
      + _set_line_encoding.bCharFormat ? USART_SBMODE_2BIT_gc : USART_SBMODE_1BIT_gc;
    1556:	80 91 8a 60 	lds	r24, 0x608A	; 0x80608a <_set_line_encoding+0x4>
    155a:	28 0f       	add	r18, r24
    155c:	33 27       	eor	r19, r19
    155e:	33 1f       	adc	r19, r19
    1560:	80 e0       	ldi	r24, 0x00	; 0
    1562:	23 2b       	or	r18, r19
    1564:	09 f0       	breq	.+2      	; 0x1568 <USART::change_vcp()+0xee>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/usart.cpp:137
      if (_bits < 4) {
    1566:	88 e0       	ldi	r24, 0x08	; 8
    1568:	94 30       	cpi	r25, 0x04	; 4
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/usart.cpp:153
      }
      else {
        _ctrlc += USART_CHSIZE_8BIT_gc;
        #endif
      }
      ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    156a:	a8 f5       	brcc	.+106    	; 0x15d6 <USART::change_vcp()+0x15c>
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/tools/avr-gcc/7.3.0-avr8-gnu-toolchain/avr/include/util/atomic.h:50
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    156c:	89 0f       	add	r24, r25
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/usart.cpp:154
        PORTMUX_USARTROUTEA = PORTMUX_USART_VCP;
    156e:	9f b7       	in	r25, 0x3f	; 63
__iCliRetVal():
    1570:	f8 94       	cli
change_vcp():
    1572:	22 e1       	ldi	r18, 0x12	; 18
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/usart.cpp:155
        USART0_STATUS = USART_DREIF_bm;
    1574:	20 93 e2 05 	sts	0x05E2, r18	; 0x8005e2 <__TEXT_REGION_LENGTH__+0x7f05e2>
    1578:	20 e2       	ldi	r18, 0x20	; 32
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/usart.cpp:156
        USART0_BAUD = (uint16_t)_baud;
    157a:	20 93 04 08 	sts	0x0804, r18	; 0x800804 <__TEXT_REGION_LENGTH__+0x7f0804>
    157e:	c0 92 08 08 	sts	0x0808, r12	; 0x800808 <__TEXT_REGION_LENGTH__+0x7f0808>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/usart.cpp:157
        USART0_CTRLC = _ctrlc;
    1582:	d0 92 09 08 	sts	0x0809, r13	; 0x800809 <__TEXT_REGION_LENGTH__+0x7f0809>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/usart.cpp:158
        USART0_CTRLA = USART_RXCIF_bm;
    1586:	80 93 07 08 	sts	0x0807, r24	; 0x800807 <__TEXT_REGION_LENGTH__+0x7f0807>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/usart.cpp:159
        USART0_CTRLB = _ctrlb;
    158a:	80 e8       	ldi	r24, 0x80	; 128
    158c:	80 93 05 08 	sts	0x0805, r24	; 0x800805 <__TEXT_REGION_LENGTH__+0x7f0805>
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/tools/avr-gcc/7.3.0-avr8-gnu-toolchain/avr/include/util/atomic.h:70
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1590:	b0 92 06 08 	sts	0x0806, r11	; 0x800806 <__TEXT_REGION_LENGTH__+0x7f0806>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/usart.cpp:162
        bit_set(GPCONF, GPCONF_VCP_bp);
      }
      D1PRINTF(" UART=VCP\r\n");
    1594:	e1 9a       	sbi	0x1c, 1	; 28
__iRestore():
    1596:	9f bf       	out	0x3f, r25	; 63
change_vcp():
    1598:	8d e4       	ldi	r24, 0x4D	; 77
    159a:	98 e0       	ldi	r25, 0x08	; 8
    159c:	9f 93       	push	r25
    159e:	8f 93       	push	r24
    15a0:	8d e8       	ldi	r24, 0x8D	; 141
    15a2:	90 e6       	ldi	r25, 0x60	; 96
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/usart.cpp:163
      drain(32768);
    15a4:	9f 93       	push	r25
    15a6:	8f 93       	push	r24
    15a8:	44 df       	rcall	.-376    	; 0x1432 <Print::printf(PGM_t const*, ...) [clone .constprop.22]>
    15aa:	80 e0       	ldi	r24, 0x00	; 0
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/usart.cpp:167
    }
    else {
      /* If outside the supported range, the USART will remain in the BREAK state. */
      D1PRINTF(" UART=FAIL\r\n");
    15ac:	90 e8       	ldi	r25, 0x80	; 128
    15ae:	81 da       	rcall	.-2814   	; 0xab2 <USART::drain(unsigned int)>
    15b0:	0f 90       	pop	r0
    15b2:	0f 90       	pop	r0
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/usart.cpp:169
    }
    if (bit_is_set(GPCONF, GPCONF_USB_bp))
    15b4:	0f 90       	pop	r0
    15b6:	0f 90       	pop	r0
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/usart.cpp:173
      SYS::LED_HeartBeat();
    else
      SYS::LED_Flash();
  }
    15b8:	e0 9b       	sbis	0x1c, 0	; 28
    15ba:	17 c0       	rjmp	.+46     	; 0x15ea <USART::change_vcp()+0x170>
    15bc:	24 96       	adiw	r28, 0x04	; 4
    15be:	cd bf       	out	0x3d, r28	; 61
    15c0:	de bf       	out	0x3e, r29	; 62
    15c2:	df 91       	pop	r29
    15c4:	cf 91       	pop	r28
    15c6:	1f 91       	pop	r17
    15c8:	0f 91       	pop	r16
    15ca:	ff 90       	pop	r15
    15cc:	ef 90       	pop	r14
    15ce:	df 90       	pop	r13
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/usart.cpp:170
    else {
      /* If outside the supported range, the USART will remain in the BREAK state. */
      D1PRINTF(" UART=FAIL\r\n");
    }
    if (bit_is_set(GPCONF, GPCONF_USB_bp))
      SYS::LED_HeartBeat();
    15d0:	cf 90       	pop	r12
    15d2:	bf 90       	pop	r11
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/usart.cpp:150
        usart_receiver    = &USB::vcp_receiver_9bit;
        usart_transmitter = &USB::vcp_transceiver_9bit;
        #else
      }
      else {
        _ctrlc += USART_CHSIZE_8BIT_gc;
    15d4:	a4 cd       	rjmp	.-1208   	; 0x111e <SYS::LED_HeartBeat()>
    15d6:	8d 5f       	subi	r24, 0xFD	; 253
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/usart.cpp:167
      D1PRINTF(" UART=VCP\r\n");
      drain(32768);
    }
    else {
      /* If outside the supported range, the USART will remain in the BREAK state. */
      D1PRINTF(" UART=FAIL\r\n");
    15d8:	ca cf       	rjmp	.-108    	; 0x156e <USART::change_vcp()+0xf4>
    15da:	80 e4       	ldi	r24, 0x40	; 64
    15dc:	98 e0       	ldi	r25, 0x08	; 8
    15de:	9f 93       	push	r25
    15e0:	8f 93       	push	r24
    15e2:	1f 93       	push	r17
    15e4:	0f 93       	push	r16
    15e6:	25 df       	rcall	.-438    	; 0x1432 <Print::printf(PGM_t const*, ...) [clone .constprop.22]>
    15e8:	e3 cf       	rjmp	.-58     	; 0x15b0 <USART::change_vcp()+0x136>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/usart.cpp:173
    }
    if (bit_is_set(GPCONF, GPCONF_USB_bp))
      SYS::LED_HeartBeat();
    else
      SYS::LED_Flash();
  }
    15ea:	24 96       	adiw	r28, 0x04	; 4
    15ec:	cd bf       	out	0x3d, r28	; 61
    15ee:	de bf       	out	0x3e, r29	; 62
    15f0:	df 91       	pop	r29
    15f2:	cf 91       	pop	r28
    15f4:	1f 91       	pop	r17
    15f6:	0f 91       	pop	r16
    15f8:	ff 90       	pop	r15
    15fa:	ef 90       	pop	r14
    15fc:	df 90       	pop	r13
    15fe:	cf 90       	pop	r12
    1600:	bf 90       	pop	r11
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/usart.cpp:172
      D1PRINTF(" UART=FAIL\r\n");
    }
    if (bit_is_set(GPCONF, GPCONF_USB_bp))
      SYS::LED_HeartBeat();
    else
      SYS::LED_Flash();
    1602:	78 cd       	rjmp	.-1296   	; 0x10f4 <SYS::LED_Flash()>

00001604 <USB::break_off()>:
break_off():
    1604:	e1 9b       	sbis	0x1c, 1	; 28
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/usb.cpp:391
    bit_set(GPCONF, GPCONF_BRK_bp);
  }

  void break_off (void) {
    if (bit_is_set(GPCONF, GPCONF_VCP_bp)
     && bit_is_set(GPCONF, GPCONF_BRK_bp)) {
    1606:	04 c0       	rjmp	.+8      	; 0x1610 <USB::break_off()+0xc>
    1608:	e3 9b       	sbis	0x1c, 3	; 28
    160a:	02 c0       	rjmp	.+4      	; 0x1610 <USB::break_off()+0xc>
    160c:	36 df       	rcall	.-404    	; 0x147a <USART::change_vcp()>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/usb.cpp:392
      USART::change_vcp();
    160e:	e4 9a       	sbi	0x1c, 4	; 28
    1610:	e3 98       	cbi	0x1c, 3	; 28
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/usb.cpp:395
      bit_set(GPCONF, GPCONF_OPN_bp);
    }
    bit_clear(GPCONF, GPCONF_BRK_bp);
    1612:	08 95       	ret

00001614 <UPDI::set_nvmprog_key(bool)>:
set_nvmprog_key():
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/usb.cpp:396
  }
    1614:	cf 93       	push	r28
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/updi.cpp:236
  bool sys_status (void) {
    const static uint8_t _sys_stat[] = {0x55, 0x8B};
    return send_bytes(_sys_stat, 2) && recv();
  }

  bool set_nvmprog_key (bool _reset = true) {
    1616:	df 93       	push	r29
    1618:	d8 2f       	mov	r29, r24
    161a:	8d e5       	ldi	r24, 0x5D	; 93
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/updi.cpp:237
    D1PRINTF(" PROG_KEY\r\n");
    161c:	97 e0       	ldi	r25, 0x07	; 7
    161e:	9f 93       	push	r25
    1620:	8f 93       	push	r24
    1622:	8d e8       	ldi	r24, 0x8D	; 141
    1624:	90 e6       	ldi	r25, 0x60	; 96
    1626:	9f 93       	push	r25
    1628:	8f 93       	push	r24
    162a:	03 df       	rcall	.-506    	; 0x1432 <Print::printf(PGM_t const*, ...) [clone .constprop.22]>
    162c:	6a e0       	ldi	r22, 0x0A	; 10
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/updi.cpp:238
    if (!send_bytes(nvmprog_key, sizeof(nvmprog_key))) return false;
    162e:	70 e0       	ldi	r23, 0x00	; 0
    1630:	83 e4       	ldi	r24, 0x43	; 67
    1632:	90 e6       	ldi	r25, 0x60	; 96
    1634:	b5 da       	rcall	.-2710   	; 0xba0 <UPDI::send_bytes(unsigned char const*, unsigned int)>
    1636:	c8 2f       	mov	r28, r24
    1638:	0f 90       	pop	r0
    163a:	0f 90       	pop	r0
    163c:	0f 90       	pop	r0
    163e:	0f 90       	pop	r0
    1640:	88 23       	and	r24, r24
    1642:	f1 f0       	breq	.+60     	; 0x1680 <UPDI::set_nvmprog_key(bool)+0x6c>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/updi.cpp:239
    do { key_status(); } while(bit_is_clear(RXDATA, 4));  /* wait set NVMPROG */
    1644:	c9 da       	rcall	.-2670   	; 0xbd8 <UPDI::key_status()>
    1646:	fc 9b       	sbis	0x1f, 4	; 31
    1648:	fd cf       	rjmp	.-6      	; 0x1644 <UPDI::set_nvmprog_key(bool)+0x30>
    164a:	8f b3       	in	r24, 0x1f	; 31
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/updi.cpp:240
    D1PRINTF(" KEY=%02X\r\n", RXDATA);
    164c:	1f 92       	push	r1
    164e:	8f 93       	push	r24
    1650:	81 e5       	ldi	r24, 0x51	; 81
    1652:	97 e0       	ldi	r25, 0x07	; 7
    1654:	9f 93       	push	r25
    1656:	8f 93       	push	r24
    1658:	8d e8       	ldi	r24, 0x8D	; 141
    165a:	90 e6       	ldi	r25, 0x60	; 96
    165c:	9f 93       	push	r25
    165e:	8f 93       	push	r24
    1660:	e8 de       	rcall	.-560    	; 0x1432 <Print::printf(PGM_t const*, ...) [clone .constprop.22]>
    1662:	0f 90       	pop	r0
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/updi.cpp:241
    return _reset ? sys_reset(false) : true;
    1664:	0f 90       	pop	r0
    1666:	0f 90       	pop	r0
    1668:	0f 90       	pop	r0
    166a:	0f 90       	pop	r0
    166c:	0f 90       	pop	r0
    166e:	dd 23       	and	r29, r29
    1670:	39 f0       	breq	.+14     	; 0x1680 <UPDI::set_nvmprog_key(bool)+0x6c>
sys_reset():
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/updi.cpp:137
    const static uint8_t _reset[] = {
      0x55, 0xC8, 0x59, /* SYSRST */
      0x55, 0xC8, 0x00, /* SYSRUN */
      0x55, 0xC3, 0x04  /* UPDIDIS */
    };
    return send_bytes(_reset, _leave ? 9 : 6);
    1672:	66 e0       	ldi	r22, 0x06	; 6
    1674:	70 e0       	ldi	r23, 0x00	; 0
    1676:	82 e7       	ldi	r24, 0x72	; 114
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/updi.cpp:242
    D1PRINTF(" PROG_KEY\r\n");
    if (!send_bytes(nvmprog_key, sizeof(nvmprog_key))) return false;
    do { key_status(); } while(bit_is_clear(RXDATA, 4));  /* wait set NVMPROG */
    D1PRINTF(" KEY=%02X\r\n", RXDATA);
    return _reset ? sys_reset(false) : true;
  }
    1678:	90 e6       	ldi	r25, 0x60	; 96
set_nvmprog_key():
    167a:	df 91       	pop	r29
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/updi.cpp:137
    const static uint8_t _reset[] = {
      0x55, 0xC8, 0x59, /* SYSRST */
      0x55, 0xC8, 0x00, /* SYSRUN */
      0x55, 0xC3, 0x04  /* UPDIDIS */
    };
    return send_bytes(_reset, _leave ? 9 : 6);
    167c:	cf 91       	pop	r28
sys_reset():
    167e:	90 ca       	rjmp	.-2784   	; 0xba0 <UPDI::send_bytes(unsigned char const*, unsigned int)>
set_nvmprog_key():
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/updi.cpp:242
    D1PRINTF(" PROG_KEY\r\n");
    if (!send_bytes(nvmprog_key, sizeof(nvmprog_key))) return false;
    do { key_status(); } while(bit_is_clear(RXDATA, 4));  /* wait set NVMPROG */
    D1PRINTF(" KEY=%02X\r\n", RXDATA);
    return _reset ? sys_reset(false) : true;
  }
    1680:	8c 2f       	mov	r24, r28
    1682:	df 91       	pop	r29
    1684:	cf 91       	pop	r28
    1686:	08 95       	ret

00001688 <UPDI::write_userrow()>:
write_userrow():
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/updi.cpp:286
  /*
   * Use the UPDI ACC to write to the USERROW of the locked chip.
   * The write start address should match the USERROW address.
   * The write length should match the USERROW field.
   */
  bool write_userrow (void) {
    1688:	cf 92       	push	r12
    168a:	df 92       	push	r13
    168c:	ef 92       	push	r14
    168e:	ff 92       	push	r15
    1690:	0f 93       	push	r16
    1692:	1f 93       	push	r17
    1694:	cf 93       	push	r28
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/updi.cpp:295
    uint32_t _dwAddr = packet.out.dwAddr;
    size_t  _wLength = packet.out.dwLength;
    if (bit_is_clear(PGCONF, PGCONF_UPDI_bp)
     || m_type != 0xC5
     || _wLength != Device_Descriptor.UPDI.user_sig_bytes
     || (uint16_t)_dwAddr != Device_Descriptor.UPDI.user_sig_base) return false;
    1696:	df 93       	push	r29
    1698:	e8 99       	sbic	0x1d, 0	; 29
    169a:	0b c0       	rjmp	.+22     	; 0x16b2 <UPDI::write_userrow()+0x2a>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/updi.cpp:311
      do { sys_status(); } while(bit_is_clear(RXDATA, 3));  /* wait set PROGSTART */
      D1PRINTF(" RE_PROGSTART=%02X\r\n", RXDATA);
      return true;
    }
    else return sys_reset(false);
  }
    169c:	10 e0       	ldi	r17, 0x00	; 0
    169e:	81 2f       	mov	r24, r17
    16a0:	df 91       	pop	r29
    16a2:	cf 91       	pop	r28
    16a4:	1f 91       	pop	r17
    16a6:	0f 91       	pop	r16
    16a8:	ff 90       	pop	r15
    16aa:	ef 90       	pop	r14
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/updi.cpp:293
    const static uint8_t _urowstop[] = { 0x55, 0xC7, 0x20 };  /* ASI_KEY_STATUS <= UROWWR */
    uint8_t   m_type = packet.out.bMType;
    uint32_t _dwAddr = packet.out.dwAddr;
    size_t  _wLength = packet.out.dwLength;
    if (bit_is_clear(PGCONF, PGCONF_UPDI_bp)
     || m_type != 0xC5
    16ac:	df 90       	pop	r13
    16ae:	cf 90       	pop	r12
    16b0:	08 95       	ret
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/updi.cpp:294
     || _wLength != Device_Descriptor.UPDI.user_sig_bytes
    16b2:	80 91 d5 60 	lds	r24, 0x60D5	; 0x8060d5 <packet+0x7>
    16b6:	85 3c       	cpi	r24, 0xC5	; 197
    16b8:	89 f7       	brne	.-30     	; 0x169c <UPDI::write_userrow()+0x14>
    16ba:	c0 91 b6 60 	lds	r28, 0x60B6	; 0x8060b6 <Device_Descriptor+0x18>
    16be:	d0 91 b7 60 	lds	r29, 0x60B7	; 0x8060b7 <Device_Descriptor+0x19>
    16c2:	80 91 da 60 	lds	r24, 0x60DA	; 0x8060da <packet+0xc>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/updi.cpp:290
   */
  bool write_userrow (void) {
    const static uint8_t _urowdone[] = { 0x55, 0xCA, 0x03 };  /* ASI_SYS_CTRLA <= UROWDONE|CLKREQ */
    const static uint8_t _urowstop[] = { 0x55, 0xC7, 0x20 };  /* ASI_KEY_STATUS <= UROWWR */
    uint8_t   m_type = packet.out.bMType;
    uint32_t _dwAddr = packet.out.dwAddr;
    16c6:	90 91 db 60 	lds	r25, 0x60DB	; 0x8060db <packet+0xd>
    16ca:	c8 17       	cp	r28, r24
    16cc:	d9 07       	cpc	r29, r25
    16ce:	31 f7       	brne	.-52     	; 0x169c <UPDI::write_userrow()+0x14>
    16d0:	c0 90 d6 60 	lds	r12, 0x60D6	; 0x8060d6 <packet+0x8>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/updi.cpp:295
    size_t  _wLength = packet.out.dwLength;
    if (bit_is_clear(PGCONF, PGCONF_UPDI_bp)
     || m_type != 0xC5
     || _wLength != Device_Descriptor.UPDI.user_sig_bytes
     || (uint16_t)_dwAddr != Device_Descriptor.UPDI.user_sig_base) return false;
    16d4:	d0 90 d7 60 	lds	r13, 0x60D7	; 0x8060d7 <packet+0x9>
    16d8:	e0 90 d8 60 	lds	r14, 0x60D8	; 0x8060d8 <packet+0xa>
    16dc:	f0 90 d9 60 	lds	r15, 0x60D9	; 0x8060d9 <packet+0xb>
    16e0:	80 91 c0 60 	lds	r24, 0x60C0	; 0x8060c0 <Device_Descriptor+0x22>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/updi.cpp:296
    USART::drain();
    16e4:	90 91 c1 60 	lds	r25, 0x60C1	; 0x8060c1 <Device_Descriptor+0x23>
    16e8:	8c 15       	cp	r24, r12
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/updi.cpp:297
    D1PRINTF(" ENTER_UROW=%04lX:%04X\r\n", _dwAddr, _wLength);
    16ea:	9d 05       	cpc	r25, r13
    16ec:	b9 f6       	brne	.-82     	; 0x169c <UPDI::write_userrow()+0x14>
    16ee:	90 e0       	ldi	r25, 0x00	; 0
    16f0:	80 e0       	ldi	r24, 0x00	; 0
    16f2:	df d9       	rcall	.-3138   	; 0xab2 <USART::drain(unsigned int)>
    16f4:	df 93       	push	r29
    16f6:	cf 93       	push	r28
    16f8:	ff 92       	push	r15
    16fa:	ef 92       	push	r14
    16fc:	df 92       	push	r13
    16fe:	cf 92       	push	r12
    1700:	8f ec       	ldi	r24, 0xCF	; 207
    1702:	97 e0       	ldi	r25, 0x07	; 7
    1704:	9f 93       	push	r25
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/updi.cpp:254
    D1PRINTF(" KEY=%02X\r\n", RXDATA);
    return sys_reset(false);
  }

  bool set_urowwrite_key (void) {
    D1PRINTF(" UROW_KEY\r\n");
    1706:	8f 93       	push	r24
    1708:	0d e8       	ldi	r16, 0x8D	; 141
    170a:	10 e6       	ldi	r17, 0x60	; 96
    170c:	1f 93       	push	r17
    170e:	0f 93       	push	r16
    1710:	90 de       	rcall	.-736    	; 0x1432 <Print::printf(PGM_t const*, ...) [clone .constprop.22]>
set_urowwrite_key():
    1712:	8e ea       	ldi	r24, 0xAE	; 174
    1714:	97 e0       	ldi	r25, 0x07	; 7
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/updi.cpp:255
    if (!send_bytes(urowwrite_key, sizeof(urowwrite_key))) return false;
    1716:	9f 93       	push	r25
    1718:	8f 93       	push	r24
    171a:	1f 93       	push	r17
    171c:	0f 93       	push	r16
    171e:	89 de       	rcall	.-750    	; 0x1432 <Print::printf(PGM_t const*, ...) [clone .constprop.22]>
    1720:	6a e0       	ldi	r22, 0x0A	; 10
    1722:	70 e0       	ldi	r23, 0x00	; 0
    1724:	87 e5       	ldi	r24, 0x57	; 87
    1726:	90 e6       	ldi	r25, 0x60	; 96
    1728:	3b da       	rcall	.-2954   	; 0xba0 <UPDI::send_bytes(unsigned char const*, unsigned int)>
    172a:	2d b7       	in	r18, 0x3d	; 61
    172c:	3e b7       	in	r19, 0x3e	; 62
    172e:	22 5f       	subi	r18, 0xF2	; 242
    1730:	3f 4f       	sbci	r19, 0xFF	; 255
    1732:	2d bf       	out	0x3d, r18	; 61
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/updi.cpp:256
    do { key_status(); } while(bit_is_clear(RXDATA, 5));  /* wait set UROWWRITE */
    1734:	3e bf       	out	0x3e, r19	; 62
    1736:	88 23       	and	r24, r24
    1738:	09 f4       	brne	.+2      	; 0x173c <UPDI::write_userrow()+0xb4>
    173a:	b0 cf       	rjmp	.-160    	; 0x169c <UPDI::write_userrow()+0x14>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/updi.cpp:257
    D1PRINTF(" KEY=%02X\r\n", RXDATA);
    173c:	4d da       	rcall	.-2918   	; 0xbd8 <UPDI::key_status()>
    173e:	fd 9b       	sbis	0x1f, 5	; 31
    1740:	fd cf       	rjmp	.-6      	; 0x173c <UPDI::write_userrow()+0xb4>
    1742:	8f b3       	in	r24, 0x1f	; 31
    1744:	1f 92       	push	r1
    1746:	8f 93       	push	r24
    1748:	82 ea       	ldi	r24, 0xA2	; 162
    174a:	97 e0       	ldi	r25, 0x07	; 7
    174c:	9f 93       	push	r25
    174e:	8f 93       	push	r24
    1750:	8d e8       	ldi	r24, 0x8D	; 141
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/updi.cpp:137
    const static uint8_t _reset[] = {
      0x55, 0xC8, 0x59, /* SYSRST */
      0x55, 0xC8, 0x00, /* SYSRUN */
      0x55, 0xC3, 0x04  /* UPDIDIS */
    };
    return send_bytes(_reset, _leave ? 9 : 6);
    1752:	90 e6       	ldi	r25, 0x60	; 96
    1754:	9f 93       	push	r25
    1756:	8f 93       	push	r24
    1758:	6c de       	rcall	.-808    	; 0x1432 <Print::printf(PGM_t const*, ...) [clone .constprop.22]>
sys_reset():
    175a:	66 e0       	ldi	r22, 0x06	; 6
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/updi.cpp:298
     || m_type != 0xC5
     || _wLength != Device_Descriptor.UPDI.user_sig_bytes
     || (uint16_t)_dwAddr != Device_Descriptor.UPDI.user_sig_base) return false;
    USART::drain();
    D1PRINTF(" ENTER_UROW=%04lX:%04X\r\n", _dwAddr, _wLength);
    if (!set_urowwrite_key()) return false;
    175c:	70 e0       	ldi	r23, 0x00	; 0
    175e:	82 e7       	ldi	r24, 0x72	; 114
    1760:	90 e6       	ldi	r25, 0x60	; 96
    1762:	1e da       	rcall	.-3012   	; 0xba0 <UPDI::send_bytes(unsigned char const*, unsigned int)>
    1764:	18 2f       	mov	r17, r24
write_userrow():
    1766:	0f 90       	pop	r0
    1768:	0f 90       	pop	r0
    176a:	0f 90       	pop	r0
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/updi.cpp:299
    do { sys_status(); } while(bit_is_clear(RXDATA, 2));    /* wait set UROWPROG */
    176c:	0f 90       	pop	r0
    176e:	0f 90       	pop	r0
    1770:	0f 90       	pop	r0
    1772:	88 23       	and	r24, r24
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/updi.cpp:300
    send_words_block(_dwAddr, _wLength);
    1774:	09 f4       	brne	.+2      	; 0x1778 <UPDI::write_userrow()+0xf0>
    1776:	92 cf       	rjmp	.-220    	; 0x169c <UPDI::write_userrow()+0x14>
    1778:	26 da       	rcall	.-2996   	; 0xbc6 <UPDI::sys_status()>
    177a:	fa 9b       	sbis	0x1f, 2	; 31
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/updi.cpp:301
    send_bytes(_urowdone, 3);
    177c:	fd cf       	rjmp	.-6      	; 0x1778 <UPDI::write_userrow()+0xf0>
    177e:	ae 01       	movw	r20, r28
    1780:	c7 01       	movw	r24, r14
    1782:	b6 01       	movw	r22, r12
    1784:	4c da       	rcall	.-2920   	; 0xc1e <UPDI::send_words_block(unsigned long, unsigned int)>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/updi.cpp:302
    do { sys_status(); } while(bit_is_set(RXDATA, 2));      /* wait clear UROWPROG */
    1786:	63 e0       	ldi	r22, 0x03	; 3
    1788:	70 e0       	ldi	r23, 0x00	; 0
    178a:	84 e6       	ldi	r24, 0x64	; 100
    178c:	90 e6       	ldi	r25, 0x60	; 96
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/updi.cpp:303
    send_bytes(_urowstop, 3);
    178e:	08 da       	rcall	.-3056   	; 0xba0 <UPDI::send_bytes(unsigned char const*, unsigned int)>
    1790:	1a da       	rcall	.-3020   	; 0xbc6 <UPDI::sys_status()>
    1792:	fa 99       	sbic	0x1f, 2	; 31
    1794:	fd cf       	rjmp	.-6      	; 0x1790 <UPDI::write_userrow()+0x108>
    1796:	63 e0       	ldi	r22, 0x03	; 3
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/updi.cpp:304
    if (bit_is_set(PGCONF, PGCONF_PROG_bp)) {
    1798:	70 e0       	ldi	r23, 0x00	; 0
    179a:	81 e6       	ldi	r24, 0x61	; 97
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/updi.cpp:305
      set_nvmprog_key();
    179c:	90 e6       	ldi	r25, 0x60	; 96
    179e:	00 da       	rcall	.-3072   	; 0xba0 <UPDI::send_bytes(unsigned char const*, unsigned int)>
    17a0:	e9 9b       	sbis	0x1d, 1	; 29
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/updi.cpp:306
      do { sys_status(); } while(bit_is_clear(RXDATA, 3));  /* wait set PROGSTART */
    17a2:	18 c0       	rjmp	.+48     	; 0x17d4 <UPDI::write_userrow()+0x14c>
    17a4:	81 e0       	ldi	r24, 0x01	; 1
    17a6:	36 df       	rcall	.-404    	; 0x1614 <UPDI::set_nvmprog_key(bool)>
    17a8:	0e da       	rcall	.-3044   	; 0xbc6 <UPDI::sys_status()>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/updi.cpp:307
      D1PRINTF(" RE_PROGSTART=%02X\r\n", RXDATA);
    17aa:	fb 9b       	sbis	0x1f, 3	; 31
    17ac:	fd cf       	rjmp	.-6      	; 0x17a8 <UPDI::write_userrow()+0x120>
    17ae:	8f b3       	in	r24, 0x1f	; 31
    17b0:	1f 92       	push	r1
    17b2:	8f 93       	push	r24
    17b4:	8a eb       	ldi	r24, 0xBA	; 186
    17b6:	97 e0       	ldi	r25, 0x07	; 7
    17b8:	9f 93       	push	r25
    17ba:	8f 93       	push	r24
    17bc:	8d e8       	ldi	r24, 0x8D	; 141
    17be:	90 e6       	ldi	r25, 0x60	; 96
    17c0:	9f 93       	push	r25
    17c2:	8f 93       	push	r24
    17c4:	36 de       	rcall	.-916    	; 0x1432 <Print::printf(PGM_t const*, ...) [clone .constprop.22]>
    17c6:	0f 90       	pop	r0
    17c8:	0f 90       	pop	r0
    17ca:	0f 90       	pop	r0
    17cc:	0f 90       	pop	r0
    17ce:	0f 90       	pop	r0
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/updi.cpp:137
    const static uint8_t _reset[] = {
      0x55, 0xC8, 0x59, /* SYSRST */
      0x55, 0xC8, 0x00, /* SYSRUN */
      0x55, 0xC3, 0x04  /* UPDIDIS */
    };
    return send_bytes(_reset, _leave ? 9 : 6);
    17d0:	0f 90       	pop	r0
    17d2:	65 cf       	rjmp	.-310    	; 0x169e <UPDI::write_userrow()+0x16>
sys_reset():
    17d4:	66 e0       	ldi	r22, 0x06	; 6
    17d6:	70 e0       	ldi	r23, 0x00	; 0
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/updi.cpp:311
      do { sys_status(); } while(bit_is_clear(RXDATA, 3));  /* wait set PROGSTART */
      D1PRINTF(" RE_PROGSTART=%02X\r\n", RXDATA);
      return true;
    }
    else return sys_reset(false);
  }
    17d8:	82 e7       	ldi	r24, 0x72	; 114
    17da:	90 e6       	ldi	r25, 0x60	; 96
write_userrow():
    17dc:	df 91       	pop	r29
    17de:	cf 91       	pop	r28
    17e0:	1f 91       	pop	r17
    17e2:	0f 91       	pop	r16
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/updi.cpp:137
    const static uint8_t _reset[] = {
      0x55, 0xC8, 0x59, /* SYSRST */
      0x55, 0xC8, 0x00, /* SYSRUN */
      0x55, 0xC3, 0x04  /* UPDIDIS */
    };
    return send_bytes(_reset, _leave ? 9 : 6);
    17e4:	ff 90       	pop	r15
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/nvmv5.cpp:136
    }
    /* Page erase will not be used if received. */
    return 1;
  }

  size_t write_memory (void) {
    17e6:	ef 90       	pop	r14
    17e8:	df 90       	pop	r13
    17ea:	cf 90       	pop	r12
sys_reset():
    17ec:	d9 c9       	rjmp	.-3150   	; 0xba0 <UPDI::send_bytes(unsigned char const*, unsigned int)>

000017ee <NVM::V5::write_memory()>:
write_memory():
    17ee:	cf 92       	push	r12
    17f0:	df 92       	push	r13
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/nvmv5.cpp:140
    uint8_t   m_type = packet.out.bMType;
    uint32_t _dwAddr = packet.out.dwAddr;
    size_t  _wLength = packet.out.dwLength;
    if (bit_is_clear(PGCONF, PGCONF_PROG_bp)) return UPDI::write_userrow();
    17f2:	ef 92       	push	r14
    17f4:	ff 92       	push	r15
    17f6:	cf 93       	push	r28
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/nvmv5.cpp:160
      _dwAddr += PROG_START;
      return write_words_flash(_dwAddr, _wLength);
    }
    else {
      /* MTYPE_SRAM */
      return UPDI::send_bytes_block(_dwAddr, _wLength);
    17f8:	df 93       	push	r29
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/nvmv5.cpp:162
    }
  }
    17fa:	e9 99       	sbic	0x1d, 1	; 29
    17fc:	09 c0       	rjmp	.+18     	; 0x1810 <NVM::V5::write_memory()+0x22>
    17fe:	44 df       	rcall	.-376    	; 0x1688 <UPDI::write_userrow()>
    1800:	90 e0       	ldi	r25, 0x00	; 0
    1802:	df 91       	pop	r29
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/nvmv5.cpp:137
    /* Page erase will not be used if received. */
    return 1;
  }

  size_t write_memory (void) {
    uint8_t   m_type = packet.out.bMType;
    1804:	cf 91       	pop	r28
    1806:	ff 90       	pop	r15
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/nvmv5.cpp:138
    uint32_t _dwAddr = packet.out.dwAddr;
    1808:	ef 90       	pop	r14
    180a:	df 90       	pop	r13
    180c:	cf 90       	pop	r12
    180e:	08 95       	ret
    1810:	80 91 d5 60 	lds	r24, 0x60D5	; 0x8060d5 <packet+0x7>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/nvmv5.cpp:139
    size_t  _wLength = packet.out.dwLength;
    1814:	c0 90 d6 60 	lds	r12, 0x60D6	; 0x8060d6 <packet+0x8>
    1818:	d0 90 d7 60 	lds	r13, 0x60D7	; 0x8060d7 <packet+0x9>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/nvmv5.cpp:141
    if (bit_is_clear(PGCONF, PGCONF_PROG_bp)) return UPDI::write_userrow();
    if (m_type == 0x22 || m_type == 0xB2 || m_type == 0xB3 || m_type == 0xC4) {
    181c:	e0 90 d8 60 	lds	r14, 0x60D8	; 0x8060d8 <packet+0xa>
    1820:	f0 90 d9 60 	lds	r15, 0x60D9	; 0x8060d9 <packet+0xb>
    1824:	c0 91 da 60 	lds	r28, 0x60DA	; 0x8060da <packet+0xc>
    1828:	d0 91 db 60 	lds	r29, 0x60DB	; 0x8060db <packet+0xd>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/nvmv5.cpp:93
  }

  bool write_eeprom (uint32_t _dwAddr, size_t _wLength) {
    D2PRINTF(" NVM_V5_EEPERW=%06lX\r\n", _dwAddr);
    return (
      nvm_ctrl_change(0x00)
    182c:	82 32       	cpi	r24, 0x22	; 34
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/nvmv5.cpp:96
      && UPDI::send_bytes_block(_dwAddr, _wLength)
      && nvm_ctrl_change(0x15)  /* NVM_V5_CMD_EEPERW */
      && (nvm_wait() & 0x73) == 0
    182e:	31 f0       	breq	.+12     	; 0x183c <NVM::V5::write_memory()+0x4e>
    1830:	9e e4       	ldi	r25, 0x4E	; 78
    1832:	98 0f       	add	r25, r24
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/nvmv5.cpp:94

  bool write_eeprom (uint32_t _dwAddr, size_t _wLength) {
    D2PRINTF(" NVM_V5_EEPERW=%06lX\r\n", _dwAddr);
    return (
      nvm_ctrl_change(0x00)
      && UPDI::send_bytes_block(_dwAddr, _wLength)
    1834:	92 30       	cpi	r25, 0x02	; 2
    1836:	10 f0       	brcs	.+4      	; 0x183c <NVM::V5::write_memory()+0x4e>
    1838:	84 3c       	cpi	r24, 0xC4	; 196
    183a:	91 f4       	brne	.+36     	; 0x1860 <NVM::V5::write_memory()+0x72>
write_eeprom():
    183c:	80 e0       	ldi	r24, 0x00	; 0
    183e:	96 dc       	rcall	.-1748   	; 0x116c <NVM::V3::nvm_ctrl_change(unsigned char)>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/nvmv5.cpp:95
      && nvm_ctrl_change(0x15)  /* NVM_V5_CMD_EEPERW */
    1840:	81 11       	cpse	r24, r1
    1842:	02 c0       	rjmp	.+4      	; 0x1848 <NVM::V5::write_memory()+0x5a>
write_memory():
    1844:	80 e0       	ldi	r24, 0x00	; 0
    1846:	dc cf       	rjmp	.-72     	; 0x1800 <NVM::V5::write_memory()+0x12>
write_eeprom():
    1848:	ae 01       	movw	r20, r28
    184a:	c7 01       	movw	r24, r14
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/nvmv5.cpp:148
      /* MTYPE_LOCK_BITS */
      /* MTYPE_EEPROM */
      /* MTYPE_EEPROM_XMEGA */
      return write_eeprom(_dwAddr, _wLength);
    }
    else if (m_type == 0xC0 || m_type == 0xC5) {
    184c:	b6 01       	movw	r22, r12
    184e:	25 da       	rcall	.-2998   	; 0xc9a <UPDI::send_bytes_block(unsigned long, unsigned int)>
    1850:	88 23       	and	r24, r24
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/nvmv5.cpp:151
      /* MTYPE_FLASH (alias) */
      /* MTYPE_USERSIG (USERROW, BOOTROW) */
      return write_bytes_flash(_dwAddr, _wLength);
    1852:	c1 f3       	breq	.-16     	; 0x1844 <NVM::V5::write_memory()+0x56>
    1854:	85 e1       	ldi	r24, 0x15	; 21
    1856:	8a dc       	rcall	.-1772   	; 0x116c <NVM::V3::nvm_ctrl_change(unsigned char)>
    1858:	88 23       	and	r24, r24
    185a:	a1 f3       	breq	.-24     	; 0x1844 <NVM::V5::write_memory()+0x56>
    185c:	80 dc       	rcall	.-1792   	; 0x115e <NVM::V3::write_eeprom(unsigned long, unsigned int) [clone .part.3]>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/nvmv5.cpp:153
    }
    else if (m_type == 0xB0) {
    185e:	d0 cf       	rjmp	.-96     	; 0x1800 <NVM::V5::write_memory()+0x12>
write_memory():
    1860:	80 3c       	cpi	r24, 0xC0	; 192
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/nvmv5.cpp:155
      /* MTYPE_FLASH_PAGE (PROGMEM) */
      _dwAddr += PROG_START;
    1862:	11 f0       	breq	.+4      	; 0x1868 <NVM::V5::write_memory()+0x7a>
    1864:	85 3c       	cpi	r24, 0xC5	; 197
    1866:	29 f4       	brne	.+10     	; 0x1872 <NVM::V5::write_memory()+0x84>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/nvmv5.cpp:156
      return write_words_flash(_dwAddr, _wLength);
    1868:	ae 01       	movw	r20, r28
    186a:	c7 01       	movw	r24, r14
    186c:	b6 01       	movw	r22, r12
    186e:	a6 dc       	rcall	.-1716   	; 0x11bc <NVM::V3::write_bytes_flash(unsigned long, unsigned int)>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/nvmv5.cpp:160
    }
    else {
      /* MTYPE_SRAM */
      return UPDI::send_bytes_block(_dwAddr, _wLength);
    1870:	c7 cf       	rjmp	.-114    	; 0x1800 <NVM::V5::write_memory()+0x12>
    1872:	80 3b       	cpi	r24, 0xB0	; 176
    1874:	39 f4       	brne	.+14     	; 0x1884 <NVM::V5::write_memory()+0x96>
    1876:	c7 01       	movw	r24, r14
    1878:	b6 01       	movw	r22, r12
    187a:	80 58       	subi	r24, 0x80	; 128
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/nvmv4.cpp:158
    /* Page erase will not be used if received. */
    /* Instead, page erase is determined by the is_boundary_flash_page function. */
    return 1;
  }

  size_t write_memory (void) {
    187c:	9f 4f       	sbci	r25, 0xFF	; 255
    187e:	ae 01       	movw	r20, r28
    1880:	c3 dc       	rcall	.-1658   	; 0x1208 <NVM::V3::write_words_flash(unsigned long, unsigned int)>
    1882:	be cf       	rjmp	.-132    	; 0x1800 <NVM::V5::write_memory()+0x12>
    1884:	ae 01       	movw	r20, r28
    1886:	c7 01       	movw	r24, r14
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/nvmv4.cpp:162
    uint8_t   m_type = packet.out.bMType;
    uint32_t _dwAddr = packet.out.dwAddr;
    size_t  _wLength = packet.out.dwLength;
    if (bit_is_clear(PGCONF, PGCONF_PROG_bp)) return UPDI::write_userrow();
    1888:	b6 01       	movw	r22, r12
    188a:	07 da       	rcall	.-3058   	; 0xc9a <UPDI::send_bytes_block(unsigned long, unsigned int)>
    188c:	b9 cf       	rjmp	.-142    	; 0x1800 <NVM::V5::write_memory()+0x12>

0000188e <NVM::V4::write_memory()>:
    188e:	cf 92       	push	r12
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/nvmv4.cpp:182
      _dwAddr += PROG_START;
      return write_words_flash(_dwAddr, _wLength);
    }
    else {
      /* MTYPE_SRAM */
      return UPDI::send_bytes_block(_dwAddr, _wLength);
    1890:	df 92       	push	r13
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/nvmv4.cpp:184
    }
  }
    1892:	ef 92       	push	r14
    1894:	ff 92       	push	r15
    1896:	cf 93       	push	r28
    1898:	df 93       	push	r29
    189a:	e9 99       	sbic	0x1d, 1	; 29
    189c:	09 c0       	rjmp	.+18     	; 0x18b0 <NVM::V4::write_memory()+0x22>
    189e:	f4 de       	rcall	.-536    	; 0x1688 <UPDI::write_userrow()>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/nvmv4.cpp:159
    /* Instead, page erase is determined by the is_boundary_flash_page function. */
    return 1;
  }

  size_t write_memory (void) {
    uint8_t   m_type = packet.out.bMType;
    18a0:	90 e0       	ldi	r25, 0x00	; 0
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/nvmv4.cpp:160
    uint32_t _dwAddr = packet.out.dwAddr;
    18a2:	df 91       	pop	r29
    18a4:	cf 91       	pop	r28
    18a6:	ff 90       	pop	r15
    18a8:	ef 90       	pop	r14
    18aa:	df 90       	pop	r13
    18ac:	cf 90       	pop	r12
    18ae:	08 95       	ret
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/nvmv4.cpp:161
    size_t  _wLength = packet.out.dwLength;
    18b0:	80 91 d5 60 	lds	r24, 0x60D5	; 0x8060d5 <packet+0x7>
    18b4:	c0 90 d6 60 	lds	r12, 0x60D6	; 0x8060d6 <packet+0x8>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/nvmv4.cpp:163
    if (bit_is_clear(PGCONF, PGCONF_PROG_bp)) return UPDI::write_userrow();
    if (m_type == 0x22 || m_type == 0xB2 || m_type == 0xB3 || m_type == 0xC4) {
    18b8:	d0 90 d7 60 	lds	r13, 0x60D7	; 0x8060d7 <packet+0x9>
    18bc:	e0 90 d8 60 	lds	r14, 0x60D8	; 0x8060d8 <packet+0xa>
    18c0:	f0 90 d9 60 	lds	r15, 0x60D9	; 0x8060d9 <packet+0xb>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/nvmv4.cpp:108
  }

  bool write_eeprom (uint32_t _dwAddr, size_t _wLength) {
    D2PRINTF(" NVM_V4_EEERWR=%06lX\r\n", _dwAddr);
    return (
      nvm_ctrl_change(0x13)   /* NVM_V4_CMD_EEERWR */
    18c4:	c0 91 da 60 	lds	r28, 0x60DA	; 0x8060da <packet+0xc>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/nvmv4.cpp:111
      && UPDI::send_bytes_block_slow(_dwAddr, _wLength)
      && (nvm_wait() & 0x73) == 0
      && nvm_ctrl_change(0x00)
    18c8:	d0 91 db 60 	lds	r29, 0x60DB	; 0x8060db <packet+0xd>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/nvmv4.cpp:90
    D2PRINTF(" NVM_V4_FLWR=%06lX\r\n", _dwAddr);
    return (
      nvm_ctrl_change(0x02)   /* NVM_V4_CMD_FLWR */
      && UPDI::send_words_block(_dwAddr, _wLength)
      && (nvm_wait() & 0x73) == 0
      && nvm_ctrl_change(0x00)
    18cc:	82 32       	cpi	r24, 0x22	; 34
    18ce:	31 f0       	breq	.+12     	; 0x18dc <NVM::V4::write_memory()+0x4e>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/nvmv4.cpp:109

  bool write_eeprom (uint32_t _dwAddr, size_t _wLength) {
    D2PRINTF(" NVM_V4_EEERWR=%06lX\r\n", _dwAddr);
    return (
      nvm_ctrl_change(0x13)   /* NVM_V4_CMD_EEERWR */
      && UPDI::send_bytes_block_slow(_dwAddr, _wLength)
    18d0:	9e e4       	ldi	r25, 0x4E	; 78
    18d2:	98 0f       	add	r25, r24
    18d4:	92 30       	cpi	r25, 0x02	; 2
    18d6:	10 f0       	brcs	.+4      	; 0x18dc <NVM::V4::write_memory()+0x4e>
    18d8:	84 3c       	cpi	r24, 0xC4	; 196
    18da:	89 f4       	brne	.+34     	; 0x18fe <NVM::V4::write_memory()+0x70>
write_eeprom():
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/nvmv4.cpp:110
      && (nvm_wait() & 0x73) == 0
    18dc:	83 e1       	ldi	r24, 0x13	; 19
    18de:	46 dc       	rcall	.-1908   	; 0x116c <NVM::V3::nvm_ctrl_change(unsigned char)>
    18e0:	81 11       	cpse	r24, r1
    18e2:	02 c0       	rjmp	.+4      	; 0x18e8 <NVM::V4::write_memory()+0x5a>
write_memory():
    18e4:	80 e0       	ldi	r24, 0x00	; 0
    18e6:	dc cf       	rjmp	.-72     	; 0x18a0 <NVM::V4::write_memory()+0x12>
write_eeprom():
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/nvmv4.cpp:170
      /* MTYPE_LOCK_BITS */
      /* MTYPE_EEPROM */
      /* MTYPE_EEPROM_XMEGA */
      return write_eeprom(_dwAddr, _wLength);
    }
    else if (m_type == 0xC0 || m_type == 0xC5) {
    18e8:	ae 01       	movw	r20, r28
    18ea:	c7 01       	movw	r24, r14
    18ec:	b6 01       	movw	r22, r12
    18ee:	33 da       	rcall	.-2970   	; 0xd56 <UPDI::send_bytes_block_slow(unsigned long, unsigned int)>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/nvmv4.cpp:95
      && nvm_ctrl_change(0x00)
    );
  }

  bool write_bytes_flash (uint32_t _dwAddr, size_t _wLength) {
    if (SYS::is_boundary_flash_page(_dwAddr)) erase_flash_page(_dwAddr);
    18f0:	88 23       	and	r24, r24
    18f2:	c1 f3       	breq	.-16     	; 0x18e4 <NVM::V4::write_memory()+0x56>
    18f4:	2a dc       	rcall	.-1964   	; 0x114a <NVM::V3::nvm_wait()>
    18f6:	83 77       	andi	r24, 0x73	; 115
    18f8:	a9 f7       	brne	.-22     	; 0x18e4 <NVM::V4::write_memory()+0x56>
    18fa:	55 dc       	rcall	.-1878   	; 0x11a6 <NVM::V4::write_eeprom(unsigned long, unsigned int) [clone .part.5]>
    18fc:	d1 cf       	rjmp	.-94     	; 0x18a0 <NVM::V4::write_memory()+0x12>
write_memory():
    18fe:	80 3c       	cpi	r24, 0xC0	; 192
    1900:	11 f0       	breq	.+4      	; 0x1906 <NVM::V4::write_memory()+0x78>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/nvmv4.cpp:98
    D2PRINTF(" NVM_V4_FLWR=%06lX\r\n", _dwAddr);
    return (
      nvm_ctrl_change(0x02)   /* NVM_V4_CMD_FLWR */
    1902:	85 3c       	cpi	r24, 0xC5	; 197
    1904:	b9 f4       	brne	.+46     	; 0x1934 <NVM::V4::write_memory()+0xa6>
write_bytes_flash():
    1906:	c7 01       	movw	r24, r14
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/nvmv4.cpp:101
      && UPDI::send_bytes_block_slow(_dwAddr, _wLength)
      && (nvm_wait() & 0x73) == 0
      && nvm_ctrl_change(0x00)
    1908:	b6 01       	movw	r22, r12
    190a:	bd db       	rcall	.-2182   	; 0x1086 <SYS::is_boundary_flash_page(unsigned long)>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/nvmv4.cpp:99
  bool write_bytes_flash (uint32_t _dwAddr, size_t _wLength) {
    if (SYS::is_boundary_flash_page(_dwAddr)) erase_flash_page(_dwAddr);
    D2PRINTF(" NVM_V4_FLWR=%06lX\r\n", _dwAddr);
    return (
      nvm_ctrl_change(0x02)   /* NVM_V4_CMD_FLWR */
      && UPDI::send_bytes_block_slow(_dwAddr, _wLength)
    190c:	88 23       	and	r24, r24
    190e:	19 f0       	breq	.+6      	; 0x1916 <NVM::V4::write_memory()+0x88>
    1910:	c7 01       	movw	r24, r14
    1912:	b6 01       	movw	r22, r12
    1914:	9f dc       	rcall	.-1730   	; 0x1254 <NVM::V4::erase_flash_page(unsigned long)>
    1916:	82 e0       	ldi	r24, 0x02	; 2
    1918:	29 dc       	rcall	.-1966   	; 0x116c <NVM::V3::nvm_ctrl_change(unsigned char)>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/nvmv4.cpp:100
      && (nvm_wait() & 0x73) == 0
    191a:	88 23       	and	r24, r24
    191c:	19 f3       	breq	.-58     	; 0x18e4 <NVM::V4::write_memory()+0x56>
    191e:	ae 01       	movw	r20, r28
    1920:	c7 01       	movw	r24, r14
    1922:	b6 01       	movw	r22, r12
    1924:	18 da       	rcall	.-3024   	; 0xd56 <UPDI::send_bytes_block_slow(unsigned long, unsigned int)>
    1926:	88 23       	and	r24, r24
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/nvmv4.cpp:175
    else if (m_type == 0xC0 || m_type == 0xC5) {
      /* MTYPE_FLASH (alias) */
      /* MTYPE_USERSIG (USERROW, BOOTROW) */
      return write_bytes_flash(_dwAddr, _wLength);
    }
    else if (m_type == 0xB0) {
    1928:	e9 f2       	breq	.-70     	; 0x18e4 <NVM::V4::write_memory()+0x56>
    192a:	0f dc       	rcall	.-2018   	; 0x114a <NVM::V3::nvm_wait()>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/nvmv4.cpp:177
      /* MTYPE_FLASH_PAGE (PROGMEM) */
      _dwAddr += PROG_START;
    192c:	83 77       	andi	r24, 0x73	; 115
    192e:	d1 f6       	brne	.-76     	; 0x18e4 <NVM::V4::write_memory()+0x56>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/nvmv4.cpp:84
    );
  }

  bool write_words_flash (uint32_t _dwAddr, size_t _wLength) {
    if (bit_is_clear(PGCONF, PGCONF_ERSE_bp)
      && SYS::is_boundary_flash_page(_dwAddr)) erase_flash_page(_dwAddr);
    1930:	3a dc       	rcall	.-1932   	; 0x11a6 <NVM::V4::write_eeprom(unsigned long, unsigned int) [clone .part.5]>
    1932:	b6 cf       	rjmp	.-148    	; 0x18a0 <NVM::V4::write_memory()+0x12>
write_memory():
    1934:	80 3b       	cpi	r24, 0xB0	; 176
    1936:	f9 f4       	brne	.+62     	; 0x1976 <NVM::V4::write_memory()+0xe8>
    1938:	80 e8       	ldi	r24, 0x80	; 128
    193a:	e8 0e       	add	r14, r24
    193c:	f1 1c       	adc	r15, r1
write_words_flash():
    193e:	ea 99       	sbic	0x1d, 2	; 29
    1940:	08 c0       	rjmp	.+16     	; 0x1952 <NVM::V4::write_memory()+0xc4>
    1942:	c7 01       	movw	r24, r14
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/nvmv4.cpp:87
    D2PRINTF(" NVM_V4_FLWR=%06lX\r\n", _dwAddr);
    return (
      nvm_ctrl_change(0x02)   /* NVM_V4_CMD_FLWR */
    1944:	b6 01       	movw	r22, r12
    1946:	9f db       	rcall	.-2242   	; 0x1086 <SYS::is_boundary_flash_page(unsigned long)>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/nvmv4.cpp:90
      && UPDI::send_words_block(_dwAddr, _wLength)
      && (nvm_wait() & 0x73) == 0
      && nvm_ctrl_change(0x00)
    1948:	88 23       	and	r24, r24
    194a:	19 f0       	breq	.+6      	; 0x1952 <NVM::V4::write_memory()+0xc4>
    194c:	c7 01       	movw	r24, r14
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/nvmv4.cpp:88
    if (bit_is_clear(PGCONF, PGCONF_ERSE_bp)
      && SYS::is_boundary_flash_page(_dwAddr)) erase_flash_page(_dwAddr);
    D2PRINTF(" NVM_V4_FLWR=%06lX\r\n", _dwAddr);
    return (
      nvm_ctrl_change(0x02)   /* NVM_V4_CMD_FLWR */
      && UPDI::send_words_block(_dwAddr, _wLength)
    194e:	b6 01       	movw	r22, r12
    1950:	81 dc       	rcall	.-1790   	; 0x1254 <NVM::V4::erase_flash_page(unsigned long)>
    1952:	82 e0       	ldi	r24, 0x02	; 2
    1954:	0b dc       	rcall	.-2026   	; 0x116c <NVM::V3::nvm_ctrl_change(unsigned char)>
    1956:	88 23       	and	r24, r24
    1958:	09 f4       	brne	.+2      	; 0x195c <NVM::V4::write_memory()+0xce>
    195a:	c4 cf       	rjmp	.-120    	; 0x18e4 <NVM::V4::write_memory()+0x56>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/nvmv4.cpp:89
      && (nvm_wait() & 0x73) == 0
    195c:	ae 01       	movw	r20, r28
    195e:	c7 01       	movw	r24, r14
    1960:	b6 01       	movw	r22, r12
    1962:	5d d9       	rcall	.-3398   	; 0xc1e <UPDI::send_words_block(unsigned long, unsigned int)>
    1964:	88 23       	and	r24, r24
    1966:	09 f4       	brne	.+2      	; 0x196a <NVM::V4::write_memory()+0xdc>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/nvmv4.cpp:182
      _dwAddr += PROG_START;
      return write_words_flash(_dwAddr, _wLength);
    }
    else {
      /* MTYPE_SRAM */
      return UPDI::send_bytes_block(_dwAddr, _wLength);
    1968:	bd cf       	rjmp	.-134    	; 0x18e4 <NVM::V4::write_memory()+0x56>
    196a:	ef db       	rcall	.-2082   	; 0x114a <NVM::V3::nvm_wait()>
    196c:	83 77       	andi	r24, 0x73	; 115
    196e:	09 f0       	breq	.+2      	; 0x1972 <NVM::V4::write_memory()+0xe4>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/nvmv3.cpp:133
    }
    /* Page erase will not be used if received. */
    return 1;
  }

  size_t write_memory (void) {
    1970:	b9 cf       	rjmp	.-142    	; 0x18e4 <NVM::V4::write_memory()+0x56>
    1972:	19 dc       	rcall	.-1998   	; 0x11a6 <NVM::V4::write_eeprom(unsigned long, unsigned int) [clone .part.5]>
    1974:	95 cf       	rjmp	.-214    	; 0x18a0 <NVM::V4::write_memory()+0x12>
write_memory():
    1976:	ae 01       	movw	r20, r28
    1978:	c7 01       	movw	r24, r14
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/nvmv3.cpp:137
    uint8_t   m_type = packet.out.bMType;
    uint32_t _dwAddr = packet.out.dwAddr;
    size_t  _wLength = packet.out.dwLength;
    if (bit_is_clear(PGCONF, PGCONF_PROG_bp)) return UPDI::write_userrow();
    197a:	b6 01       	movw	r22, r12
    197c:	8e d9       	rcall	.-3300   	; 0xc9a <UPDI::send_bytes_block(unsigned long, unsigned int)>
    197e:	90 cf       	rjmp	.-224    	; 0x18a0 <NVM::V4::write_memory()+0x12>

00001980 <NVM::V3::write_memory()>:
    1980:	cf 92       	push	r12
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/nvmv3.cpp:157
      _dwAddr += PROG_START;
      return write_words_flash(_dwAddr, _wLength);
    }
    else {
      /* MTYPE_SRAM */
      return UPDI::send_bytes_block(_dwAddr, _wLength);
    1982:	df 92       	push	r13
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/nvmv3.cpp:159
    }
  }
    1984:	ef 92       	push	r14
    1986:	ff 92       	push	r15
    1988:	cf 93       	push	r28
    198a:	df 93       	push	r29
    198c:	e9 99       	sbic	0x1d, 1	; 29
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/nvmv3.cpp:134
    /* Page erase will not be used if received. */
    return 1;
  }

  size_t write_memory (void) {
    uint8_t   m_type = packet.out.bMType;
    198e:	09 c0       	rjmp	.+18     	; 0x19a2 <NVM::V3::write_memory()+0x22>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/nvmv3.cpp:135
    uint32_t _dwAddr = packet.out.dwAddr;
    1990:	7b de       	rcall	.-778    	; 0x1688 <UPDI::write_userrow()>
    1992:	90 e0       	ldi	r25, 0x00	; 0
    1994:	df 91       	pop	r29
    1996:	cf 91       	pop	r28
    1998:	ff 90       	pop	r15
    199a:	ef 90       	pop	r14
    199c:	df 90       	pop	r13
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/nvmv3.cpp:136
    size_t  _wLength = packet.out.dwLength;
    199e:	cf 90       	pop	r12
    19a0:	08 95       	ret
    19a2:	80 91 d5 60 	lds	r24, 0x60D5	; 0x8060d5 <packet+0x7>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/nvmv3.cpp:138
    if (bit_is_clear(PGCONF, PGCONF_PROG_bp)) return UPDI::write_userrow();
    if (m_type == 0x22 || m_type == 0xB2 || m_type == 0xB3 || m_type == 0xC4) {
    19a6:	c0 90 d6 60 	lds	r12, 0x60D6	; 0x8060d6 <packet+0x8>
    19aa:	d0 90 d7 60 	lds	r13, 0x60D7	; 0x8060d7 <packet+0x9>
    19ae:	e0 90 d8 60 	lds	r14, 0x60D8	; 0x8060d8 <packet+0xa>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/nvmv3.cpp:90
  }

  bool write_eeprom (uint32_t _dwAddr, size_t _wLength) {
    D2PRINTF(" NVM_V3_EEPERW=%06lX\r\n", _dwAddr);
    return (
      nvm_ctrl_change(0x10)
    19b2:	f0 90 d9 60 	lds	r15, 0x60D9	; 0x8060d9 <packet+0xb>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/nvmv3.cpp:93
      && UPDI::send_bytes_block(_dwAddr, _wLength)
      && nvm_ctrl_change(0x15)  /* NVM_V3_CMD_EEPERW */
      && (nvm_wait() & 0x73) == 0
    19b6:	c0 91 da 60 	lds	r28, 0x60DA	; 0x8060da <packet+0xc>
    19ba:	d0 91 db 60 	lds	r29, 0x60DB	; 0x8060db <packet+0xd>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/nvmv3.cpp:91

  bool write_eeprom (uint32_t _dwAddr, size_t _wLength) {
    D2PRINTF(" NVM_V3_EEPERW=%06lX\r\n", _dwAddr);
    return (
      nvm_ctrl_change(0x10)
      && UPDI::send_bytes_block(_dwAddr, _wLength)
    19be:	82 32       	cpi	r24, 0x22	; 34
    19c0:	31 f0       	breq	.+12     	; 0x19ce <NVM::V3::write_memory()+0x4e>
    19c2:	9e e4       	ldi	r25, 0x4E	; 78
    19c4:	98 0f       	add	r25, r24
    19c6:	92 30       	cpi	r25, 0x02	; 2
    19c8:	10 f0       	brcs	.+4      	; 0x19ce <NVM::V3::write_memory()+0x4e>
    19ca:	84 3c       	cpi	r24, 0xC4	; 196
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/nvmv3.cpp:92
      && nvm_ctrl_change(0x15)  /* NVM_V3_CMD_EEPERW */
    19cc:	91 f4       	brne	.+36     	; 0x19f2 <NVM::V3::write_memory()+0x72>
write_eeprom():
    19ce:	80 e1       	ldi	r24, 0x10	; 16
    19d0:	cd db       	rcall	.-2150   	; 0x116c <NVM::V3::nvm_ctrl_change(unsigned char)>
    19d2:	81 11       	cpse	r24, r1
    19d4:	02 c0       	rjmp	.+4      	; 0x19da <NVM::V3::write_memory()+0x5a>
write_memory():
    19d6:	80 e0       	ldi	r24, 0x00	; 0
    19d8:	dc cf       	rjmp	.-72     	; 0x1992 <NVM::V3::write_memory()+0x12>
write_eeprom():
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/nvmv3.cpp:145
      /* MTYPE_LOCK_BITS */
      /* MTYPE_EEPROM */
      /* MTYPE_EEPROM_XMEGA */
      return write_eeprom(_dwAddr, _wLength);
    }
    else if (m_type == 0xC0 || m_type == 0xC5) {
    19da:	ae 01       	movw	r20, r28
    19dc:	c7 01       	movw	r24, r14
    19de:	b6 01       	movw	r22, r12
    19e0:	5c d9       	rcall	.-3400   	; 0xc9a <UPDI::send_bytes_block(unsigned long, unsigned int)>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/nvmv3.cpp:148
      /* MTYPE_FLASH (alias) */
      /* MTYPE_USERSIG (USERROW) */
      return write_bytes_flash(_dwAddr, _wLength);
    19e2:	88 23       	and	r24, r24
    19e4:	c1 f3       	breq	.-16     	; 0x19d6 <NVM::V3::write_memory()+0x56>
    19e6:	85 e1       	ldi	r24, 0x15	; 21
    19e8:	c1 db       	rcall	.-2174   	; 0x116c <NVM::V3::nvm_ctrl_change(unsigned char)>
    19ea:	88 23       	and	r24, r24
    19ec:	a1 f3       	breq	.-24     	; 0x19d6 <NVM::V3::write_memory()+0x56>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/nvmv3.cpp:150
    }
    else if (m_type == 0xB0) {
    19ee:	b7 db       	rcall	.-2194   	; 0x115e <NVM::V3::write_eeprom(unsigned long, unsigned int) [clone .part.3]>
    19f0:	d0 cf       	rjmp	.-96     	; 0x1992 <NVM::V3::write_memory()+0x12>
write_memory():
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/nvmv3.cpp:152
      /* MTYPE_FLASH_PAGE (PROGMEM) */
      _dwAddr += PROG_START;
    19f2:	80 3c       	cpi	r24, 0xC0	; 192
    19f4:	11 f0       	breq	.+4      	; 0x19fa <NVM::V3::write_memory()+0x7a>
    19f6:	85 3c       	cpi	r24, 0xC5	; 197
    19f8:	29 f4       	brne	.+10     	; 0x1a04 <NVM::V3::write_memory()+0x84>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/nvmv3.cpp:153
      return write_words_flash(_dwAddr, _wLength);
    19fa:	ae 01       	movw	r20, r28
    19fc:	c7 01       	movw	r24, r14
    19fe:	b6 01       	movw	r22, r12
    1a00:	dd db       	rcall	.-2118   	; 0x11bc <NVM::V3::write_bytes_flash(unsigned long, unsigned int)>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/nvmv3.cpp:157
    }
    else {
      /* MTYPE_SRAM */
      return UPDI::send_bytes_block(_dwAddr, _wLength);
    1a02:	c7 cf       	rjmp	.-114    	; 0x1992 <NVM::V3::write_memory()+0x12>
    1a04:	80 3b       	cpi	r24, 0xB0	; 176
    1a06:	39 f4       	brne	.+14     	; 0x1a16 <NVM::V3::write_memory()+0x96>
    1a08:	c7 01       	movw	r24, r14
    1a0a:	b6 01       	movw	r22, r12
    1a0c:	80 58       	subi	r24, 0x80	; 128
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/nvmv2.cpp:155
    /* Page erase will not be used if received. */
    /* Instead, page erase is determined by the is_boundary_flash_page function. */
    return 1;
  }

  size_t write_memory (void) {
    1a0e:	9f 4f       	sbci	r25, 0xFF	; 255
    1a10:	ae 01       	movw	r20, r28
    1a12:	fa db       	rcall	.-2060   	; 0x1208 <NVM::V3::write_words_flash(unsigned long, unsigned int)>
    1a14:	be cf       	rjmp	.-132    	; 0x1992 <NVM::V3::write_memory()+0x12>
    1a16:	ae 01       	movw	r20, r28
    1a18:	c7 01       	movw	r24, r14
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/nvmv2.cpp:159
    uint8_t   m_type = packet.out.bMType;
    uint32_t _dwAddr = packet.out.dwAddr;
    size_t  _wLength = packet.out.dwLength;
    if (bit_is_clear(PGCONF, PGCONF_PROG_bp)) return UPDI::write_userrow();
    1a1a:	b6 01       	movw	r22, r12
    1a1c:	3e d9       	rcall	.-3460   	; 0xc9a <UPDI::send_bytes_block(unsigned long, unsigned int)>
    1a1e:	b9 cf       	rjmp	.-142    	; 0x1992 <NVM::V3::write_memory()+0x12>

00001a20 <NVM::V2::write_memory()>:
    1a20:	cf 92       	push	r12
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/nvmv2.cpp:179
      _dwAddr += PROG_START;
      return write_words_flash(_dwAddr, _wLength);
    }
    else {
      /* MTYPE_SRAM */
      return UPDI::send_bytes_block(_dwAddr, _wLength);
    1a22:	df 92       	push	r13
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/nvmv2.cpp:181
    }
  }
    1a24:	ef 92       	push	r14
    1a26:	ff 92       	push	r15
    1a28:	cf 93       	push	r28
    1a2a:	df 93       	push	r29
    1a2c:	e9 99       	sbic	0x1d, 1	; 29
    1a2e:	09 c0       	rjmp	.+18     	; 0x1a42 <NVM::V2::write_memory()+0x22>
    1a30:	2b de       	rcall	.-938    	; 0x1688 <UPDI::write_userrow()>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/nvmv2.cpp:156
    /* Instead, page erase is determined by the is_boundary_flash_page function. */
    return 1;
  }

  size_t write_memory (void) {
    uint8_t   m_type = packet.out.bMType;
    1a32:	90 e0       	ldi	r25, 0x00	; 0
    1a34:	df 91       	pop	r29
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/nvmv2.cpp:157
    uint32_t _dwAddr = packet.out.dwAddr;
    1a36:	cf 91       	pop	r28
    1a38:	ff 90       	pop	r15
    1a3a:	ef 90       	pop	r14
    1a3c:	df 90       	pop	r13
    1a3e:	cf 90       	pop	r12
    1a40:	08 95       	ret
    1a42:	80 91 d5 60 	lds	r24, 0x60D5	; 0x8060d5 <packet+0x7>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/nvmv2.cpp:158
    size_t  _wLength = packet.out.dwLength;
    1a46:	c0 90 d6 60 	lds	r12, 0x60D6	; 0x8060d6 <packet+0x8>
    1a4a:	d0 90 d7 60 	lds	r13, 0x60D7	; 0x8060d7 <packet+0x9>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/nvmv2.cpp:160
    if (bit_is_clear(PGCONF, PGCONF_PROG_bp)) return UPDI::write_userrow();
    if (m_type == 0x22 || m_type == 0xB2 || m_type == 0xB3 || m_type == 0xC4) {
    1a4e:	e0 90 d8 60 	lds	r14, 0x60D8	; 0x8060d8 <packet+0xa>
    1a52:	f0 90 d9 60 	lds	r15, 0x60D9	; 0x8060d9 <packet+0xb>
    1a56:	c0 91 da 60 	lds	r28, 0x60DA	; 0x8060da <packet+0xc>
    1a5a:	d0 91 db 60 	lds	r29, 0x60DB	; 0x8060db <packet+0xd>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/nvmv2.cpp:105
  }

  bool write_eeprom (uint32_t _dwAddr, size_t _wLength) {
    D2PRINTF(" NVM_V2_EEERWR=%06lX\r\n", _dwAddr);
    return (
      nvm_ctrl_change(0x13)   /* NVM_V2_CMD_EEERWR */
    1a5e:	82 32       	cpi	r24, 0x22	; 34
    1a60:	31 f0       	breq	.+12     	; 0x1a6e <NVM::V2::write_memory()+0x4e>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/nvmv2.cpp:108
      && UPDI::send_bytes_block_slow(_dwAddr, _wLength)
      && (nvm_wait() & 0x73) == 0
      && nvm_ctrl_change(0x00)
    1a62:	9e e4       	ldi	r25, 0x4E	; 78
    1a64:	98 0f       	add	r25, r24
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/nvmv2.cpp:87
    D2PRINTF(" NVM_V2_FLWR=%06lX\r\n", _dwAddr);
    return (
      nvm_ctrl_change(0x02)   /* NVM_V2_CMD_FLWR */
      && UPDI::send_words_block(_dwAddr, _wLength)
      && (nvm_wait() & 0x73) == 0
      && nvm_ctrl_change(0x00)
    1a66:	92 30       	cpi	r25, 0x02	; 2
    1a68:	10 f0       	brcs	.+4      	; 0x1a6e <NVM::V2::write_memory()+0x4e>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/nvmv2.cpp:106

  bool write_eeprom (uint32_t _dwAddr, size_t _wLength) {
    D2PRINTF(" NVM_V2_EEERWR=%06lX\r\n", _dwAddr);
    return (
      nvm_ctrl_change(0x13)   /* NVM_V2_CMD_EEERWR */
      && UPDI::send_bytes_block_slow(_dwAddr, _wLength)
    1a6a:	84 3c       	cpi	r24, 0xC4	; 196
    1a6c:	89 f4       	brne	.+34     	; 0x1a90 <NVM::V2::write_memory()+0x70>
write_eeprom():
    1a6e:	83 e1       	ldi	r24, 0x13	; 19
    1a70:	21 dc       	rcall	.-1982   	; 0x12b4 <NVM::V2::nvm_ctrl_change(unsigned char)>
    1a72:	81 11       	cpse	r24, r1
    1a74:	02 c0       	rjmp	.+4      	; 0x1a7a <NVM::V2::write_memory()+0x5a>
write_memory():
    1a76:	80 e0       	ldi	r24, 0x00	; 0
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/nvmv2.cpp:107
      && (nvm_wait() & 0x73) == 0
    1a78:	dc cf       	rjmp	.-72     	; 0x1a32 <NVM::V2::write_memory()+0x12>
write_eeprom():
    1a7a:	ae 01       	movw	r20, r28
    1a7c:	c7 01       	movw	r24, r14
    1a7e:	b6 01       	movw	r22, r12
    1a80:	6a d9       	rcall	.-3372   	; 0xd56 <UPDI::send_bytes_block_slow(unsigned long, unsigned int)>
    1a82:	88 23       	and	r24, r24
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/nvmv2.cpp:167
      /* MTYPE_LOCK_BITS */
      /* MTYPE_EEPROM */
      /* MTYPE_EEPROM_XMEGA */
      return write_eeprom(_dwAddr, _wLength);
    }
    else if (m_type == 0xC0 || m_type == 0xC5) {
    1a84:	c1 f3       	breq	.-16     	; 0x1a76 <NVM::V2::write_memory()+0x56>
    1a86:	04 dc       	rcall	.-2040   	; 0x1290 <NVM::V0::nvm_wait()>
    1a88:	83 77       	andi	r24, 0x73	; 115
    1a8a:	a9 f7       	brne	.-22     	; 0x1a76 <NVM::V2::write_memory()+0x56>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/nvmv2.cpp:92
      && nvm_ctrl_change(0x00)
    );
  }

  bool write_bytes_flash (uint32_t _dwAddr, size_t _wLength) {
    if (SYS::is_boundary_flash_page(_dwAddr)) erase_flash_page(_dwAddr);
    1a8c:	30 dc       	rcall	.-1952   	; 0x12ee <NVM::V2::write_eeprom(unsigned long, unsigned int) [clone .part.5]>
    1a8e:	d1 cf       	rjmp	.-94     	; 0x1a32 <NVM::V2::write_memory()+0x12>
write_memory():
    1a90:	80 3c       	cpi	r24, 0xC0	; 192
    1a92:	11 f0       	breq	.+4      	; 0x1a98 <NVM::V2::write_memory()+0x78>
    1a94:	85 3c       	cpi	r24, 0xC5	; 197
    1a96:	b9 f4       	brne	.+46     	; 0x1ac6 <NVM::V2::write_memory()+0xa6>
write_bytes_flash():
    1a98:	c7 01       	movw	r24, r14
    1a9a:	b6 01       	movw	r22, r12
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/nvmv2.cpp:95
    D2PRINTF(" NVM_V2_FLWR=%06lX\r\n", _dwAddr);
    return (
      nvm_ctrl_change(0x02)   /* NVM_V2_CMD_FLWR */
    1a9c:	f4 da       	rcall	.-2584   	; 0x1086 <SYS::is_boundary_flash_page(unsigned long)>
    1a9e:	88 23       	and	r24, r24
    1aa0:	19 f0       	breq	.+6      	; 0x1aa8 <NVM::V2::write_memory()+0x88>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/nvmv2.cpp:98
      && UPDI::send_bytes_block_slow(_dwAddr, _wLength)
      && (nvm_wait() & 0x73) == 0
      && nvm_ctrl_change(0x00)
    1aa2:	c7 01       	movw	r24, r14
    1aa4:	b6 01       	movw	r22, r12
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/nvmv2.cpp:96
  bool write_bytes_flash (uint32_t _dwAddr, size_t _wLength) {
    if (SYS::is_boundary_flash_page(_dwAddr)) erase_flash_page(_dwAddr);
    D2PRINTF(" NVM_V2_FLWR=%06lX\r\n", _dwAddr);
    return (
      nvm_ctrl_change(0x02)   /* NVM_V2_CMD_FLWR */
      && UPDI::send_bytes_block_slow(_dwAddr, _wLength)
    1aa6:	25 dc       	rcall	.-1974   	; 0x12f2 <NVM::V2::erase_flash_page(unsigned long)>
    1aa8:	82 e0       	ldi	r24, 0x02	; 2
    1aaa:	04 dc       	rcall	.-2040   	; 0x12b4 <NVM::V2::nvm_ctrl_change(unsigned char)>
    1aac:	88 23       	and	r24, r24
    1aae:	19 f3       	breq	.-58     	; 0x1a76 <NVM::V2::write_memory()+0x56>
    1ab0:	ae 01       	movw	r20, r28
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/nvmv2.cpp:97
      && (nvm_wait() & 0x73) == 0
    1ab2:	c7 01       	movw	r24, r14
    1ab4:	b6 01       	movw	r22, r12
    1ab6:	4f d9       	rcall	.-3426   	; 0xd56 <UPDI::send_bytes_block_slow(unsigned long, unsigned int)>
    1ab8:	88 23       	and	r24, r24
    1aba:	e9 f2       	breq	.-70     	; 0x1a76 <NVM::V2::write_memory()+0x56>
    1abc:	e9 db       	rcall	.-2094   	; 0x1290 <NVM::V0::nvm_wait()>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/nvmv2.cpp:172
    else if (m_type == 0xC0 || m_type == 0xC5) {
      /* MTYPE_FLASH (alias) */
      /* MTYPE_USERSIG (USERROW) */
      return write_bytes_flash(_dwAddr, _wLength);
    }
    else if (m_type == 0xB0) {
    1abe:	83 77       	andi	r24, 0x73	; 115
    1ac0:	d1 f6       	brne	.-76     	; 0x1a76 <NVM::V2::write_memory()+0x56>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/nvmv2.cpp:174
      /* MTYPE_FLASH_PAGE (PROGMEM) */
      _dwAddr += PROG_START;
    1ac2:	15 dc       	rcall	.-2006   	; 0x12ee <NVM::V2::write_eeprom(unsigned long, unsigned int) [clone .part.5]>
    1ac4:	b6 cf       	rjmp	.-148    	; 0x1a32 <NVM::V2::write_memory()+0x12>
write_memory():
    1ac6:	80 3b       	cpi	r24, 0xB0	; 176
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/nvmv2.cpp:81
    );
  }

  bool write_words_flash (uint32_t _dwAddr, size_t _wLength) {
    if (bit_is_clear(PGCONF, PGCONF_ERSE_bp)
      && SYS::is_boundary_flash_page(_dwAddr)) erase_flash_page(_dwAddr);
    1ac8:	f9 f4       	brne	.+62     	; 0x1b08 <NVM::V2::write_memory()+0xe8>
    1aca:	80 e8       	ldi	r24, 0x80	; 128
    1acc:	e8 0e       	add	r14, r24
    1ace:	f1 1c       	adc	r15, r1
write_words_flash():
    1ad0:	ea 99       	sbic	0x1d, 2	; 29
    1ad2:	08 c0       	rjmp	.+16     	; 0x1ae4 <NVM::V2::write_memory()+0xc4>
    1ad4:	c7 01       	movw	r24, r14
    1ad6:	b6 01       	movw	r22, r12
    1ad8:	d6 da       	rcall	.-2644   	; 0x1086 <SYS::is_boundary_flash_page(unsigned long)>
    1ada:	88 23       	and	r24, r24
    1adc:	19 f0       	breq	.+6      	; 0x1ae4 <NVM::V2::write_memory()+0xc4>
    1ade:	c7 01       	movw	r24, r14
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/nvmv2.cpp:84
    D2PRINTF(" NVM_V2_FLWR=%06lX\r\n", _dwAddr);
    return (
      nvm_ctrl_change(0x02)   /* NVM_V2_CMD_FLWR */
    1ae0:	b6 01       	movw	r22, r12
    1ae2:	07 dc       	rcall	.-2034   	; 0x12f2 <NVM::V2::erase_flash_page(unsigned long)>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/nvmv2.cpp:87
      && UPDI::send_words_block(_dwAddr, _wLength)
      && (nvm_wait() & 0x73) == 0
      && nvm_ctrl_change(0x00)
    1ae4:	82 e0       	ldi	r24, 0x02	; 2
    1ae6:	e6 db       	rcall	.-2100   	; 0x12b4 <NVM::V2::nvm_ctrl_change(unsigned char)>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/nvmv2.cpp:85
    if (bit_is_clear(PGCONF, PGCONF_ERSE_bp)
      && SYS::is_boundary_flash_page(_dwAddr)) erase_flash_page(_dwAddr);
    D2PRINTF(" NVM_V2_FLWR=%06lX\r\n", _dwAddr);
    return (
      nvm_ctrl_change(0x02)   /* NVM_V2_CMD_FLWR */
      && UPDI::send_words_block(_dwAddr, _wLength)
    1ae8:	88 23       	and	r24, r24
    1aea:	09 f4       	brne	.+2      	; 0x1aee <NVM::V2::write_memory()+0xce>
    1aec:	c4 cf       	rjmp	.-120    	; 0x1a76 <NVM::V2::write_memory()+0x56>
    1aee:	ae 01       	movw	r20, r28
    1af0:	c7 01       	movw	r24, r14
    1af2:	b6 01       	movw	r22, r12
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/nvmv2.cpp:86
      && (nvm_wait() & 0x73) == 0
    1af4:	94 d8       	rcall	.-3800   	; 0xc1e <UPDI::send_words_block(unsigned long, unsigned int)>
    1af6:	88 23       	and	r24, r24
    1af8:	09 f4       	brne	.+2      	; 0x1afc <NVM::V2::write_memory()+0xdc>
    1afa:	bd cf       	rjmp	.-134    	; 0x1a76 <NVM::V2::write_memory()+0x56>
    1afc:	c9 db       	rcall	.-2158   	; 0x1290 <NVM::V0::nvm_wait()>
    1afe:	83 77       	andi	r24, 0x73	; 115
    1b00:	09 f0       	breq	.+2      	; 0x1b04 <NVM::V2::write_memory()+0xe4>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/nvmv2.cpp:179
      _dwAddr += PROG_START;
      return write_words_flash(_dwAddr, _wLength);
    }
    else {
      /* MTYPE_SRAM */
      return UPDI::send_bytes_block(_dwAddr, _wLength);
    1b02:	b9 cf       	rjmp	.-142    	; 0x1a76 <NVM::V2::write_memory()+0x56>
    1b04:	f4 db       	rcall	.-2072   	; 0x12ee <NVM::V2::write_eeprom(unsigned long, unsigned int) [clone .part.5]>
    1b06:	95 cf       	rjmp	.-214    	; 0x1a32 <NVM::V2::write_memory()+0x12>
write_memory():
    1b08:	ae 01       	movw	r20, r28
    1b0a:	c7 01       	movw	r24, r14
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/nvmv0.cpp:142
    }
    /* Page erase will not be used if received. */
    return 1;
  }

  size_t write_memory (void) {
    1b0c:	b6 01       	movw	r22, r12
    1b0e:	c5 d8       	rcall	.-3702   	; 0xc9a <UPDI::send_bytes_block(unsigned long, unsigned int)>
    1b10:	90 cf       	rjmp	.-224    	; 0x1a32 <NVM::V2::write_memory()+0x12>

00001b12 <NVM::V0::write_memory()>:
    1b12:	4f 92       	push	r4
    1b14:	5f 92       	push	r5
    1b16:	6f 92       	push	r6
    1b18:	7f 92       	push	r7
    1b1a:	af 92       	push	r10
    1b1c:	bf 92       	push	r11
    1b1e:	cf 92       	push	r12
    1b20:	df 92       	push	r13
    1b22:	ef 92       	push	r14
    1b24:	ff 92       	push	r15
    1b26:	0f 93       	push	r16
    1b28:	1f 93       	push	r17
    1b2a:	cf 93       	push	r28
    1b2c:	df 93       	push	r29
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/nvmv0.cpp:146
    uint8_t  m_type = packet.out.bMType;
    uint16_t _wAddr = packet.out.dwAddr;
    size_t _wLength = packet.out.dwLength;
    if (bit_is_clear(PGCONF, PGCONF_PROG_bp)) return UPDI::write_userrow();
    1b2e:	00 d0       	rcall	.+0      	; 0x1b30 <NVM::V0::write_memory()+0x1e>
    1b30:	00 d0       	rcall	.+0      	; 0x1b32 <NVM::V0::write_memory()+0x20>
    1b32:	cd b7       	in	r28, 0x3d	; 61
    1b34:	de b7       	in	r29, 0x3e	; 62
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/nvmv0.cpp:166
      _wAddr += Device_Descriptor.UPDI.prog_base;
      return write_flash(_wAddr, _wLength);
    }
    else {
      /* MTYPE_SRAM */
      return UPDI::send_bytes_block(_wAddr, _wLength);
    1b36:	e9 99       	sbic	0x1d, 1	; 29
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/nvmv0.cpp:168
    }
  }
    1b38:	14 c0       	rjmp	.+40     	; 0x1b62 <NVM::V0::write_memory()+0x50>
    1b3a:	a6 dd       	rcall	.-1204   	; 0x1688 <UPDI::write_userrow()>
    1b3c:	90 e0       	ldi	r25, 0x00	; 0
    1b3e:	24 96       	adiw	r28, 0x04	; 4
    1b40:	cd bf       	out	0x3d, r28	; 61
    1b42:	de bf       	out	0x3e, r29	; 62
    1b44:	df 91       	pop	r29
    1b46:	cf 91       	pop	r28
    1b48:	1f 91       	pop	r17
    1b4a:	0f 91       	pop	r16
    1b4c:	ff 90       	pop	r15
    1b4e:	ef 90       	pop	r14
    1b50:	df 90       	pop	r13
    1b52:	cf 90       	pop	r12
    1b54:	bf 90       	pop	r11
    1b56:	af 90       	pop	r10
    1b58:	7f 90       	pop	r7
    1b5a:	6f 90       	pop	r6
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/nvmv0.cpp:143
    /* Page erase will not be used if received. */
    return 1;
  }

  size_t write_memory (void) {
    uint8_t  m_type = packet.out.bMType;
    1b5c:	5f 90       	pop	r5
    1b5e:	4f 90       	pop	r4
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/nvmv0.cpp:144
    uint16_t _wAddr = packet.out.dwAddr;
    1b60:	08 95       	ret
    1b62:	80 91 d5 60 	lds	r24, 0x60D5	; 0x8060d5 <packet+0x7>
    1b66:	c0 90 d6 60 	lds	r12, 0x60D6	; 0x8060d6 <packet+0x8>
    1b6a:	d0 90 d7 60 	lds	r13, 0x60D7	; 0x8060d7 <packet+0x9>
    1b6e:	e0 90 d8 60 	lds	r14, 0x60D8	; 0x8060d8 <packet+0xa>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/nvmv0.cpp:145
    size_t _wLength = packet.out.dwLength;
    1b72:	f0 90 d9 60 	lds	r15, 0x60D9	; 0x8060d9 <packet+0xb>
    1b76:	96 01       	movw	r18, r12
    1b78:	00 91 da 60 	lds	r16, 0x60DA	; 0x8060da <packet+0xc>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/nvmv0.cpp:147
    if (bit_is_clear(PGCONF, PGCONF_PROG_bp)) return UPDI::write_userrow();
    if (m_type == 0xB2 || m_type == 0xB3) {
    1b7c:	10 91 db 60 	lds	r17, 0x60DB	; 0x8060db <packet+0xd>
    1b80:	9e e4       	ldi	r25, 0x4E	; 78
    1b82:	98 0f       	add	r25, r24
    1b84:	92 30       	cpi	r25, 0x02	; 2
    1b86:	08 f0       	brcs	.+2      	; 0x1b8a <NVM::V0::write_memory()+0x78>
    1b88:	44 c0       	rjmp	.+136    	; 0x1c12 <NVM::V0::write_memory()+0x100>
    1b8a:	8e ec       	ldi	r24, 0xCE	; 206
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/nvmv0.cpp:73
      uint16_t data;  /* NVMCTRL_REG_DATA */
      uint16_t addr;  /* NVMCTRL_REG_ADDR */
    } fuses;
    for (size_t _i = 0; _i < _wLength; _i++) {
      fuses.data = packet.out.memData[_i];
      fuses.addr = _wAddr + _i;
    1b8c:	e8 2e       	mov	r14, r24
    1b8e:	80 e6       	ldi	r24, 0x60	; 96
    1b90:	f8 2e       	mov	r15, r24
write_fuse():
    1b92:	c9 01       	movw	r24, r18
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/nvmv0.cpp:71
  bool write_fuse (uint16_t _wAddr, size_t _wLength) {
    struct fuse_packet_t {
      uint16_t data;  /* NVMCTRL_REG_DATA */
      uint16_t addr;  /* NVMCTRL_REG_ADDR */
    } fuses;
    for (size_t _i = 0; _i < _wLength; _i++) {
    1b94:	8e 5c       	subi	r24, 0xCE	; 206
    1b96:	90 46       	sbci	r25, 0x60	; 96
    1b98:	6c 01       	movw	r12, r24
    1b9a:	c7 01       	movw	r24, r14
    1b9c:	8e 5c       	subi	r24, 0xCE	; 206
    1b9e:	90 46       	sbci	r25, 0x60	; 96
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/nvmv0.cpp:72
      fuses.data = packet.out.memData[_i];
    1ba0:	80 17       	cp	r24, r16
    1ba2:	91 07       	cpc	r25, r17
    1ba4:	a0 f5       	brcc	.+104    	; 0x1c0e <NVM::V0::write_memory()+0xfc>
    1ba6:	f7 01       	movw	r30, r14
    1ba8:	81 89       	ldd	r24, Z+17	; 0x11
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/nvmv0.cpp:73
      fuses.addr = _wAddr + _i;
    1baa:	90 e0       	ldi	r25, 0x00	; 0
    1bac:	89 83       	std	Y+1, r24	; 0x01
    1bae:	9a 83       	std	Y+2, r25	; 0x02
    1bb0:	c6 01       	movw	r24, r12
    1bb2:	8e 0d       	add	r24, r14
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/nvmv0.cpp:75
      D2PRINTF(" NVM_V0_WFU=%04X<%02X\r\n", fuses.addr, fuses.data);
      nvm_wait();
    1bb4:	9f 1d       	adc	r25, r15
    1bb6:	8b 83       	std	Y+3, r24	; 0x03
    1bb8:	9c 83       	std	Y+4, r25	; 0x04
    1bba:	6a db       	rcall	.-2348   	; 0x1290 <NVM::V0::nvm_wait()>
    1bbc:	ce 01       	movw	r24, r28
    1bbe:	01 96       	adiw	r24, 0x01	; 1
    1bc0:	5c 01       	movw	r10, r24
    1bc2:	66 e0       	ldi	r22, 0x06	; 6
    1bc4:	70 e1       	ldi	r23, 0x10	; 16
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/updi.cpp:212
      && clear_rsd();
  }

  bool send_bytes_data (uint32_t _dwAddr, uint8_t* _data, size_t _wLength) {
    for (size_t _i = 0; _i < _wLength; _i++) {
      if (!send_byte(_dwAddr++, *_data++)) return false;
    1bc6:	80 e0       	ldi	r24, 0x00	; 0
    1bc8:	90 e0       	ldi	r25, 0x00	; 0
send_bytes_data():
    1bca:	f5 01       	movw	r30, r10
    1bcc:	41 91       	ld	r20, Z+
    1bce:	5f 01       	movw	r10, r30
    1bd0:	2b 01       	movw	r4, r22
    1bd2:	3c 01       	movw	r6, r24
    1bd4:	ff ef       	ldi	r31, 0xFF	; 255
    1bd6:	4f 1a       	sub	r4, r31
    1bd8:	5f 0a       	sbc	r5, r31
    1bda:	6f 0a       	sbc	r6, r31
    1bdc:	7f 0a       	sbc	r7, r31
    1bde:	98 d8       	rcall	.-3792   	; 0xd10 <UPDI::send_byte(unsigned long, unsigned char)>
    1be0:	81 11       	cpse	r24, r1
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/nvmv0.cpp:78
      if (!(UPDI::send_bytes_data(NVM_DATA, (uint8_t*)&fuses, 4)
        && UPDI::nvm_ctrl(0x07)   /* NVM_CMD_WFU */
        && (nvm_wait() & 7) == 0)) return false;
    1be2:	02 c0       	rjmp	.+4      	; 0x1be8 <NVM::V0::write_memory()+0xd6>
write_memory():
    1be4:	80 e0       	ldi	r24, 0x00	; 0
    1be6:	aa cf       	rjmp	.-172    	; 0x1b3c <NVM::V0::write_memory()+0x2a>
    1be8:	c3 01       	movw	r24, r6
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/updi.cpp:211
      && send_bytes(&packet.out.memData[0], _wLength & ~1)
      && clear_rsd();
  }

  bool send_bytes_data (uint32_t _dwAddr, uint8_t* _data, size_t _wLength) {
    for (size_t _i = 0; _i < _wLength; _i++) {
    1bea:	b2 01       	movw	r22, r4
send_bytes_data():
    1bec:	6a 30       	cpi	r22, 0x0A	; 10
    1bee:	20 e1       	ldi	r18, 0x10	; 16
    1bf0:	72 07       	cpc	r23, r18
    1bf2:	81 05       	cpc	r24, r1
    1bf4:	91 05       	cpc	r25, r1
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/nvmv0.cpp:77
      fuses.data = packet.out.memData[_i];
      fuses.addr = _wAddr + _i;
      D2PRINTF(" NVM_V0_WFU=%04X<%02X\r\n", fuses.addr, fuses.data);
      nvm_wait();
      if (!(UPDI::send_bytes_data(NVM_DATA, (uint8_t*)&fuses, 4)
        && UPDI::nvm_ctrl(0x07)   /* NVM_CMD_WFU */
    1bf6:	49 f7       	brne	.-46     	; 0x1bca <NVM::V0::write_memory()+0xb8>
write_fuse():
    1bf8:	87 e0       	ldi	r24, 0x07	; 7
    1bfa:	a7 d8       	rcall	.-3762   	; 0xd4a <UPDI::nvm_ctrl(unsigned char)>
    1bfc:	88 23       	and	r24, r24
    1bfe:	91 f3       	breq	.-28     	; 0x1be4 <NVM::V0::write_memory()+0xd2>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/nvmv0.cpp:78
        && (nvm_wait() & 7) == 0)) return false;
    1c00:	47 db       	rcall	.-2418   	; 0x1290 <NVM::V0::nvm_wait()>
    1c02:	9f ef       	ldi	r25, 0xFF	; 255
    1c04:	e9 1a       	sub	r14, r25
    1c06:	f9 0a       	sbc	r15, r25
    1c08:	87 70       	andi	r24, 0x07	; 7
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/nvmv0.cpp:76
    for (size_t _i = 0; _i < _wLength; _i++) {
      fuses.data = packet.out.memData[_i];
      fuses.addr = _wAddr + _i;
      D2PRINTF(" NVM_V0_WFU=%04X<%02X\r\n", fuses.addr, fuses.data);
      nvm_wait();
      if (!(UPDI::send_bytes_data(NVM_DATA, (uint8_t*)&fuses, 4)
    1c0a:	39 f2       	breq	.-114    	; 0x1b9a <NVM::V0::write_memory()+0x88>
    1c0c:	eb cf       	rjmp	.-42     	; 0x1be4 <NVM::V0::write_memory()+0xd2>
write_memory():
    1c0e:	81 e0       	ldi	r24, 0x01	; 1
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/nvmv0.cpp:80
        && UPDI::nvm_ctrl(0x07)   /* NVM_CMD_WFU */
        && (nvm_wait() & 7) == 0)) return false;
    }
    return true;
    1c10:	95 cf       	rjmp	.-214    	; 0x1b3c <NVM::V0::write_memory()+0x2a>
    1c12:	82 32       	cpi	r24, 0x22	; 34
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/nvmv0.cpp:152
    if (m_type == 0xB2 || m_type == 0xB3) {
      /* MTYPE_FUSE_BITS */
      /* MTYPE_LOCK_BITS */
      return write_fuse(_wAddr, _wLength);
    }
    else if (m_type == 0x22 || m_type == 0xC4 || m_type == 0xC5) {
    1c14:	21 f0       	breq	.+8      	; 0x1c1e <NVM::V0::write_memory()+0x10c>
    1c16:	9c e3       	ldi	r25, 0x3C	; 60
    1c18:	98 0f       	add	r25, r24
    1c1a:	92 30       	cpi	r25, 0x02	; 2
    1c1c:	58 f4       	brcc	.+22     	; 0x1c34 <NVM::V0::write_memory()+0x122>
write_eeprom():
    1c1e:	38 db       	rcall	.-2448   	; 0x1290 <NVM::V0::nvm_wait()>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/nvmv0.cpp:99
    );
  }

  bool write_eeprom (uint16_t _wAddr, size_t _wLength) {
    D2PRINTF(" NVM_V0_ERWP=%04X\r\n", _wAddr);
    nvm_wait();
    1c20:	c7 01       	movw	r24, r14
    1c22:	b6 01       	movw	r22, r12
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/nvmv0.cpp:101
    return (
      UPDI::send_bytes_block(_wAddr, _wLength)
    1c24:	88 27       	eor	r24, r24
    1c26:	99 27       	eor	r25, r25
    1c28:	a8 01       	movw	r20, r16
write_flash():
    1c2a:	37 d8       	rcall	.-3986   	; 0xc9a <UPDI::send_bytes_block(unsigned long, unsigned int)>
    1c2c:	81 11       	cpse	r24, r1
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/nvmv0.cpp:91
      nvm_wait();
      UPDI::nvm_ctrl(0x04);       /* NVM_CMD_PBC */
    }
    nvm_wait();
    return (
      UPDI::send_bytes_block(_wAddr, _wLength)
    1c2e:	1b c0       	rjmp	.+54     	; 0x1c66 <NVM::V0::write_memory()+0x154>
    1c30:	90 e0       	ldi	r25, 0x00	; 0
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/nvmv0.cpp:93
      && UPDI::nvm_ctrl(0x03)     /* NVM_CMD_ERWP */
      && (nvm_wait() & 7) == 0
    1c32:	21 c0       	rjmp	.+66     	; 0x1c76 <NVM::V0::write_memory()+0x164>
write_memory():
    1c34:	80 3b       	cpi	r24, 0xB0	; 176
    1c36:	11 f0       	breq	.+4      	; 0x1c3c <NVM::V0::write_memory()+0x12a>
    1c38:	80 3c       	cpi	r24, 0xC0	; 192
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/nvmv0.cpp:158
      /* MTYPE_EEPROM */
      /* MTYPE_EEPROM_XMEGA */
      /* MTYPE_USERSIG (USERROW) */
      return write_eeprom(_wAddr, _wLength);
    }
    else if (m_type == 0xB0 || m_type == 0xC0) {
    1c3a:	f9 f4       	brne	.+62     	; 0x1c7a <NVM::V0::write_memory()+0x168>
    1c3c:	60 91 9e 60 	lds	r22, 0x609E	; 0x80609e <Device_Descriptor>
    1c40:	70 91 9f 60 	lds	r23, 0x609F	; 0x80609f <Device_Descriptor+0x1>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/nvmv0.cpp:161
      /* MTYPE_FLASH_PAGE (PROGMEM) */
      /* MTYPE_FLASH (alias) */
      _wAddr += Device_Descriptor.UPDI.prog_base;
    1c44:	c6 0e       	add	r12, r22
    1c46:	d7 1e       	adc	r13, r23
write_flash():
    1c48:	f1 2c       	mov	r15, r1
    1c4a:	e1 2c       	mov	r14, r1
    1c4c:	c7 01       	movw	r24, r14
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/nvmv0.cpp:85
    return true;
  }

  bool write_flash (uint16_t _wAddr, size_t _wLength) {
    D2PRINTF(" NVM_V0_ERWP=%04X\r\n", _wAddr);
    if (SYS::is_boundary_flash_page(_wAddr)) {
    1c4e:	b6 01       	movw	r22, r12
    1c50:	1a da       	rcall	.-3020   	; 0x1086 <SYS::is_boundary_flash_page(unsigned long)>
    1c52:	88 23       	and	r24, r24
    1c54:	19 f0       	breq	.+6      	; 0x1c5c <NVM::V0::write_memory()+0x14a>
    1c56:	1c db       	rcall	.-2504   	; 0x1290 <NVM::V0::nvm_wait()>
    1c58:	84 e0       	ldi	r24, 0x04	; 4
    1c5a:	77 d8       	rcall	.-3858   	; 0xd4a <UPDI::nvm_ctrl(unsigned char)>
    1c5c:	19 db       	rcall	.-2510   	; 0x1290 <NVM::V0::nvm_wait()>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/nvmv0.cpp:86
      nvm_wait();
    1c5e:	a8 01       	movw	r20, r16
    1c60:	c7 01       	movw	r24, r14
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/nvmv0.cpp:87
      UPDI::nvm_ctrl(0x04);       /* NVM_CMD_PBC */
    1c62:	b6 01       	movw	r22, r12
    1c64:	e2 cf       	rjmp	.-60     	; 0x1c2a <NVM::V0::write_memory()+0x118>
    1c66:	83 e0       	ldi	r24, 0x03	; 3
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/nvmv0.cpp:89
    }
    nvm_wait();
    1c68:	70 d8       	rcall	.-3872   	; 0xd4a <UPDI::nvm_ctrl(unsigned char)>
    1c6a:	88 23       	and	r24, r24
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/nvmv0.cpp:91
    return (
      UPDI::send_bytes_block(_wAddr, _wLength)
    1c6c:	09 f3       	breq	.-62     	; 0x1c30 <NVM::V0::write_memory()+0x11e>
    1c6e:	10 db       	rcall	.-2528   	; 0x1290 <NVM::V0::nvm_wait()>
    1c70:	87 70       	andi	r24, 0x07	; 7
    1c72:	91 e0       	ldi	r25, 0x01	; 1
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/nvmv0.cpp:92
      && UPDI::nvm_ctrl(0x03)     /* NVM_CMD_ERWP */
    1c74:	e9 f6       	brne	.-70     	; 0x1c30 <NVM::V0::write_memory()+0x11e>
write_memory():
    1c76:	89 2f       	mov	r24, r25
    1c78:	61 cf       	rjmp	.-318    	; 0x1b3c <NVM::V0::write_memory()+0x2a>
    1c7a:	c7 01       	movw	r24, r14
    1c7c:	b6 01       	movw	r22, r12
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/nvmv0.cpp:93
      && (nvm_wait() & 7) == 0
    1c7e:	88 27       	eor	r24, r24
    1c80:	99 27       	eor	r25, r25
    1c82:	a8 01       	movw	r20, r16
    1c84:	0a d8       	rcall	.-4076   	; 0xc9a <UPDI::send_bytes_block(unsigned long, unsigned int)>
    1c86:	5a cf       	rjmp	.-332    	; 0x1b3c <NVM::V0::write_memory()+0x2a>

00001c88 <SYS::reboot()>:
reboot():
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/nvmv0.cpp:162
    }
    else if (m_type == 0xB0 || m_type == 0xC0) {
      /* MTYPE_FLASH_PAGE (PROGMEM) */
      /* MTYPE_FLASH (alias) */
      _wAddr += Device_Descriptor.UPDI.prog_base;
      return write_flash(_wAddr, _wLength);
    1c88:	84 eb       	ldi	r24, 0xB4	; 180
    1c8a:	96 e0       	ldi	r25, 0x06	; 6
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/nvmv0.cpp:166
    }
    else {
      /* MTYPE_SRAM */
      return UPDI::send_bytes_block(_wAddr, _wLength);
    1c8c:	9f 93       	push	r25
    1c8e:	8f 93       	push	r24
    1c90:	8d e8       	ldi	r24, 0x8D	; 141
    1c92:	90 e6       	ldi	r25, 0x60	; 96
    1c94:	9f 93       	push	r25
    1c96:	8f 93       	push	r24
    1c98:	cc db       	rcall	.-2152   	; 0x1432 <Print::printf(PGM_t const*, ...) [clone .constprop.22]>
    1c9a:	e0 91 8f 60 	lds	r30, 0x608F	; 0x80608f <Serial1C+0x2>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/sys.cpp:359
   *
   * Always run it after the USB has stopped.
   */
  void reboot (void) {
  #if defined(DEBUG)
    D0PRINTF("<REBOOT>\r\n");
    1c9e:	f0 91 90 60 	lds	r31, 0x6090	; 0x806090 <Serial1C+0x3>
    1ca2:	0f 90       	pop	r0
    1ca4:	0f 90       	pop	r0
    1ca6:	0f 90       	pop	r0
    1ca8:	0f 90       	pop	r0
_ZN14UsartBaseClass5flushEv.isra.0():
    1caa:	84 81       	ldd	r24, Z+4	; 0x04
    1cac:	86 ff       	sbrs	r24, 6
    1cae:	fd cf       	rjmp	.-6      	; 0x1caa <SYS::reboot()+0x22>
reboot():
    1cb0:	88 ed       	ldi	r24, 0xD8	; 216
    1cb2:	91 e0       	ldi	r25, 0x01	; 1
    1cb4:	84 bf       	out	0x34, r24	; 52
    1cb6:	90 93 41 00 	sts	0x0041, r25	; 0x800041 <__TEXT_REGION_LENGTH__+0x7f0041>
    1cba:	08 95       	ret

00001cbc <Print::_print_integer(unsigned long, unsigned char, signed char, signed char) [clone .constprop.15]>:
_print_integer():
    1cbc:	3f 92       	push	r3
    1cbe:	4f 92       	push	r4
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/modernAVR/0.2.14/cores/modernAVR/api/UsartBaseClass.h:32
  using Print::write; // pull in write(str) and write(buf, size) from Print

  int read (void);

  void flush (void) {
    loop_until_bit_is_set(usart->STATUS, USART_TXCIF_bp);
    1cc0:	5f 92       	push	r5
    1cc2:	6f 92       	push	r6
    1cc4:	7f 92       	push	r7
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/sys.cpp:362
    Serial.flush();
  #endif
    _PROTECTED_WRITE(RSTCTRL_SWRR, 1);
    1cc6:	8f 92       	push	r8
    1cc8:	9f 92       	push	r9
    1cca:	af 92       	push	r10
    1ccc:	bf 92       	push	r11
    1cce:	cf 92       	push	r12
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/sys.cpp:363
  }
    1cd0:	df 92       	push	r13
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/modernAVR/0.2.14/cores/modernAVR/api/cpp/Print_integer.cpp:15
 */
// MIT License : https://askn37.github.io/LICENSE.html

#include "../Print.h"

Print& Print::_print_integer (uint32_t _number, uint8_t _base, int8_t _direction, int8_t _offset) {
    1cd2:	ef 92       	push	r14
    1cd4:	ff 92       	push	r15
    1cd6:	0f 93       	push	r16
    1cd8:	1f 93       	push	r17
    1cda:	cf 93       	push	r28
    1cdc:	df 93       	push	r29
    1cde:	cd b7       	in	r28, 0x3d	; 61
    1ce0:	de b7       	in	r29, 0x3e	; 62
    1ce2:	2b 01       	movw	r4, r22
    1ce4:	3c 01       	movw	r6, r24
    1ce6:	92 2e       	mov	r9, r18
    1ce8:	ad b6       	in	r10, 0x3d	; 61
    1cea:	be b6       	in	r11, 0x3e	; 62
    1cec:	32 2e       	mov	r3, r18
    1cee:	82 2f       	mov	r24, r18
    1cf0:	22 0f       	add	r18, r18
    1cf2:	99 0b       	sbc	r25, r25
    1cf4:	01 96       	adiw	r24, 0x01	; 1
    1cf6:	2d b7       	in	r18, 0x3d	; 61
    1cf8:	3e b7       	in	r19, 0x3e	; 62
    1cfa:	28 1b       	sub	r18, r24
    1cfc:	39 0b       	sbc	r19, r25
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/modernAVR/0.2.14/cores/modernAVR/api/cpp/Print_integer.cpp:66
    _len = _size;
    _direction = - _direction;
    for (;_len < _direction; _len++) write(' ');
  }
  return *this;
}
    1cfe:	2d bf       	out	0x3d, r18	; 61
    1d00:	3e bf       	out	0x3e, r19	; 62
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/modernAVR/0.2.14/cores/modernAVR/api/cpp/Print_integer.cpp:16
// MIT License : https://askn37.github.io/LICENSE.html

#include "../Print.h"

Print& Print::_print_integer (uint32_t _number, uint8_t _base, int8_t _direction, int8_t _offset) {
  uint8_t _buff[(uint8_t)_offset + 1];
    1d02:	0d b7       	in	r16, 0x3d	; 61
    1d04:	1e b7       	in	r17, 0x3e	; 62
    1d06:	0f 5f       	subi	r16, 0xFF	; 255
    1d08:	1f 4f       	sbci	r17, 0xFF	; 255
    1d0a:	81 2c       	mov	r8, r1
    1d0c:	47 ff       	sbrs	r20, 7
    1d0e:	16 c0       	rjmp	.+44     	; 0x1d3c <Print::_print_integer(unsigned long, unsigned char, signed char, signed char) [clone .constprop.15]+0x80>
    1d10:	4f 73       	andi	r20, 0x3F	; 63
    1d12:	81 e0       	ldi	r24, 0x01	; 1
    1d14:	90 e0       	ldi	r25, 0x00	; 0
    1d16:	a0 e0       	ldi	r26, 0x00	; 0
    1d18:	b0 e0       	ldi	r27, 0x00	; 0
    1d1a:	09 2c       	mov	r0, r9
    1d1c:	04 c0       	rjmp	.+8      	; 0x1d26 <Print::_print_integer(unsigned long, unsigned char, signed char, signed char) [clone .constprop.15]+0x6a>
    1d1e:	88 0f       	add	r24, r24
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/modernAVR/0.2.14/cores/modernAVR/api/cpp/Print_integer.cpp:18
  int8_t _size = _offset;
  uint8_t _sign = 0;
    1d20:	99 1f       	adc	r25, r25
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/modernAVR/0.2.14/cores/modernAVR/api/cpp/Print_integer.cpp:21
  uint8_t _len = 0;

  if (_base & ZFILL) {
    1d22:	aa 1f       	adc	r26, r26
    1d24:	bb 1f       	adc	r27, r27
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/modernAVR/0.2.14/cores/modernAVR/api/cpp/Print_integer.cpp:23
    _sign = ZFILL;
    _base &= ~(ZFILL | _INT_);
    1d26:	0a 94       	dec	r0
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/modernAVR/0.2.14/cores/modernAVR/api/cpp/Print_integer.cpp:25
    if (_direction < 0) _direction = 0;
    _number &= (1L << _offset) - 1;
    1d28:	d2 f7       	brpl	.-12     	; 0x1d1e <Print::_print_integer(unsigned long, unsigned char, signed char, signed char) [clone .constprop.15]+0x62>
    1d2a:	01 97       	sbiw	r24, 0x01	; 1
    1d2c:	a1 09       	sbc	r26, r1
    1d2e:	b1 09       	sbc	r27, r1
    1d30:	48 22       	and	r4, r24
    1d32:	59 22       	and	r5, r25
    1d34:	6a 22       	and	r6, r26
    1d36:	7b 22       	and	r7, r27
    1d38:	50 e8       	ldi	r21, 0x80	; 128
    1d3a:	85 2e       	mov	r8, r21
    1d3c:	84 2f       	mov	r24, r20
    1d3e:	90 e0       	ldi	r25, 0x00	; 0
    1d40:	8f 73       	andi	r24, 0x3F	; 63
    1d42:	82 30       	cpi	r24, 0x02	; 2
    1d44:	91 05       	cpc	r25, r1
    1d46:	34 f4       	brge	.+12     	; 0x1d54 <Print::_print_integer(unsigned long, unsigned char, signed char, signed char) [clone .constprop.15]+0x98>
    1d48:	01 97       	sbiw	r24, 0x01	; 1
    1d4a:	11 f4       	brne	.+4      	; 0x1d50 <Print::_print_integer(unsigned long, unsigned char, signed char, signed char) [clone .constprop.15]+0x94>
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/modernAVR/0.2.14/cores/modernAVR/api/cpp/Print_integer.cpp:22
  int8_t _size = _offset;
  uint8_t _sign = 0;
  uint8_t _len = 0;

  if (_base & ZFILL) {
    _sign = ZFILL;
    1d4c:	32 e0       	ldi	r19, 0x02	; 2
    1d4e:	83 2e       	mov	r8, r19
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/modernAVR/0.2.14/cores/modernAVR/api/cpp/Print_integer.cpp:28
    _base &= ~(ZFILL | _INT_);
    if (_direction < 0) _direction = 0;
    _number &= (1L << _offset) - 1;
  }

  if ((_base & ~(ZFILL | _INT_)) <= SIGN) {
    1d50:	40 74       	andi	r20, 0x40	; 64
    1d52:	46 5f       	subi	r20, 0xF6	; 246
    1d54:	46 ff       	sbrs	r20, 6
    1d56:	0c c0       	rjmp	.+24     	; 0x1d70 <Print::_print_integer(unsigned long, unsigned char, signed char, signed char) [clone .constprop.15]+0xb4>
    1d58:	77 fe       	sbrs	r7, 7
    1d5a:	0a c0       	rjmp	.+20     	; 0x1d70 <Print::_print_integer(unsigned long, unsigned char, signed char, signed char) [clone .constprop.15]+0xb4>
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/modernAVR/0.2.14/cores/modernAVR/api/cpp/Print_integer.cpp:29
    if ((_base & ~(ZFILL | _INT_)) == SIGN) _sign = 2;
    1d5c:	68 94       	set
    1d5e:	80 f8       	bld	r8, 0
    1d60:	70 94       	com	r7
    1d62:	60 94       	com	r6
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/modernAVR/0.2.14/cores/modernAVR/api/cpp/Print_integer.cpp:30
    _base = 10 + (_base & _INT_);
    1d64:	50 94       	com	r5
    1d66:	40 94       	com	r4
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/modernAVR/0.2.14/cores/modernAVR/api/cpp/Print_integer.cpp:33
  }

  if (_base & _INT_) {
    1d68:	41 1c       	adc	r4, r1
    1d6a:	51 1c       	adc	r5, r1
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/modernAVR/0.2.14/cores/modernAVR/api/cpp/Print_integer.cpp:34
    if (0 > (int32_t) _number) {
    1d6c:	61 1c       	adc	r6, r1
    1d6e:	71 1c       	adc	r7, r1
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/modernAVR/0.2.14/cores/modernAVR/api/cpp/Print_integer.cpp:35
      _sign |= 1;
    1d70:	4f 73       	andi	r20, 0x3F	; 63
    1d72:	c4 2e       	mov	r12, r20
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/modernAVR/0.2.14/cores/modernAVR/api/cpp/Print_integer.cpp:36
      _number = - _number;
    1d74:	d1 2c       	mov	r13, r1
    1d76:	f1 2c       	mov	r15, r1
    1d78:	e1 2c       	mov	r14, r1
    1d7a:	c3 01       	movw	r24, r6
    1d7c:	b2 01       	movw	r22, r4
    1d7e:	a7 01       	movw	r20, r14
    1d80:	96 01       	movw	r18, r12
    1d82:	0e 94 48 24 	call	0x4890	; 0x4890 <__udivmodsi4>
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/modernAVR/0.2.14/cores/modernAVR/api/cpp/Print_integer.cpp:42
    }
  }
  _base &= ~(ZFILL | _INT_);

  do {
    uint8_t _d = _number % _base;
    1d86:	29 01       	movw	r4, r18
    1d88:	3a 01       	movw	r6, r20
    1d8a:	86 2f       	mov	r24, r22
    1d8c:	0e 94 e2 04 	call	0x9c4	; 0x9c4 <btoh>
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/modernAVR/0.2.14/cores/modernAVR/api/cpp/Print_integer.cpp:43
    _number /= _base;
    1d90:	99 2d       	mov	r25, r9
    1d92:	9a 94       	dec	r9
    1d94:	f8 01       	movw	r30, r16
    1d96:	e9 0d       	add	r30, r9
    1d98:	f1 1d       	adc	r31, r1
    1d9a:	97 fc       	sbrc	r9, 7
    1d9c:	fa 95       	dec	r31
    1d9e:	80 83       	st	Z, r24
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/modernAVR/0.2.14/cores/modernAVR/api/cpp/Print_integer.cpp:44
    _buff[--_offset] = btoh(_d);
    1da0:	41 14       	cp	r4, r1
    1da2:	51 04       	cpc	r5, r1
    1da4:	61 04       	cpc	r6, r1
    1da6:	71 04       	cpc	r7, r1
    1da8:	41 f7       	brne	.-48     	; 0x1d7a <Print::_print_integer(unsigned long, unsigned char, signed char, signed char) [clone .constprop.15]+0xbe>
    1daa:	32 e0       	ldi	r19, 0x02	; 2
    1dac:	83 12       	cpse	r8, r19
    1dae:	36 c0       	rjmp	.+108    	; 0x1e1c <Print::_print_integer(unsigned long, unsigned char, signed char, signed char) [clone .constprop.15]+0x160>
    1db0:	2e ef       	ldi	r18, 0xFE	; 254
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/modernAVR/0.2.14/cores/modernAVR/api/cpp/Print_integer.cpp:45
  } while (_number);
    1db2:	92 2e       	mov	r9, r18
    1db4:	99 0e       	add	r9, r25
    1db6:	f8 01       	movw	r30, r16
    1db8:	e9 0d       	add	r30, r9
    1dba:	f1 1d       	adc	r31, r1
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/modernAVR/0.2.14/cores/modernAVR/api/cpp/Print_integer.cpp:48

  /* before sign */
  if (_sign == 2) { _buff[--_offset] = '+'; }
    1dbc:	97 fc       	sbrc	r9, 7
    1dbe:	fa 95       	dec	r31
    1dc0:	8b e2       	ldi	r24, 0x2B	; 43
    1dc2:	80 83       	st	Z, r24
    1dc4:	09 0d       	add	r16, r9
    1dc6:	11 1d       	adc	r17, r1
    1dc8:	97 fc       	sbrc	r9, 7
    1dca:	1a 95       	dec	r17
    1dcc:	39 18       	sub	r3, r9
    1dce:	78 01       	movw	r14, r16
    1dd0:	e3 0c       	add	r14, r3
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/modernAVR/0.2.14/cores/modernAVR/api/cpp/Print_integer.cpp:49
  else if (_sign && !(_sign & ZFILL)) { _buff[--_offset] = '-'; }
    1dd2:	f1 1c       	adc	r15, r1
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/modernAVR/0.2.14/cores/modernAVR/api/cpp/Print_integer.cpp:57
  _len = _size;

  /* before padding */
  for (;_len < _direction; _len++) write(_sign == ZFILL ? '0' : ' ');

  _len += write((const char*)&_buff[_offset], _size);
    1dd4:	37 fc       	sbrc	r3, 7
    1dd6:	fa 94       	dec	r15
write():
    1dd8:	e0 16       	cp	r14, r16
    1dda:	f1 06       	cpc	r15, r17
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/modernAVR/0.2.14/cores/modernAVR/api/cpp/Print_integer.cpp:51

  /* before sign */
  if (_sign == 2) { _buff[--_offset] = '+'; }
  else if (_sign && !(_sign & ZFILL)) { _buff[--_offset] = '-'; }

  _size -= _offset;
    1ddc:	49 f0       	breq	.+18     	; 0x1df0 <Print::_print_integer(unsigned long, unsigned char, signed char, signed char) [clone .constprop.15]+0x134>
    1dde:	f8 01       	movw	r30, r16
    1de0:	61 91       	ld	r22, Z+
    1de2:	8f 01       	movw	r16, r30
    1de4:	8d e8       	ldi	r24, 0x8D	; 141
    1de6:	90 e6       	ldi	r25, 0x60	; 96
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/modernAVR/0.2.14/cores/modernAVR/api/cpp/Print_puts.cpp:24
 */

size_t Print::write (const void* _buffer, size_t _length) {
  size_t _n = 0;
  uint8_t *_p = (uint8_t*)_buffer;
  while (_length--) {
    1de8:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <UsartBaseClass::write(unsigned char)>
    1dec:	89 2b       	or	r24, r25
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/modernAVR/0.2.14/cores/modernAVR/api/cpp/Print_puts.cpp:25
    if ( write(*(_p++)) ) _n++;
    1dee:	a1 f7       	brne	.-24     	; 0x1dd8 <Print::_print_integer(unsigned long, unsigned char, signed char, signed char) [clone .constprop.15]+0x11c>
_print_integer():
    1df0:	8d e8       	ldi	r24, 0x8D	; 141
    1df2:	90 e6       	ldi	r25, 0x60	; 96
    1df4:	ad be       	out	0x3d, r10	; 61
    1df6:	be be       	out	0x3e, r11	; 62
    1df8:	df 91       	pop	r29
    1dfa:	cf 91       	pop	r28
    1dfc:	1f 91       	pop	r17
    1dfe:	0f 91       	pop	r16
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/modernAVR/0.2.14/cores/modernAVR/api/cpp/Print_integer.cpp:66
    _len = _size;
    _direction = - _direction;
    for (;_len < _direction; _len++) write(' ');
  }
  return *this;
}
    1e00:	ff 90       	pop	r15
    1e02:	ef 90       	pop	r14
    1e04:	df 90       	pop	r13
    1e06:	cf 90       	pop	r12
    1e08:	bf 90       	pop	r11
    1e0a:	af 90       	pop	r10
    1e0c:	9f 90       	pop	r9
    1e0e:	8f 90       	pop	r8
    1e10:	7f 90       	pop	r7
    1e12:	6f 90       	pop	r6
    1e14:	5f 90       	pop	r5
    1e16:	4f 90       	pop	r4
    1e18:	3f 90       	pop	r3
    1e1a:	08 95       	ret
    1e1c:	18 14       	cp	r1, r8
    1e1e:	94 f6       	brge	.-92     	; 0x1dc4 <Print::_print_integer(unsigned long, unsigned char, signed char, signed char) [clone .constprop.15]+0x108>
    1e20:	8e ef       	ldi	r24, 0xFE	; 254
    1e22:	98 2e       	mov	r9, r24
    1e24:	99 0e       	add	r9, r25
    1e26:	f8 01       	movw	r30, r16
    1e28:	e9 0d       	add	r30, r9
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/modernAVR/0.2.14/cores/modernAVR/api/cpp/Print_integer.cpp:49
    _buff[--_offset] = btoh(_d);
  } while (_number);

  /* before sign */
  if (_sign == 2) { _buff[--_offset] = '+'; }
  else if (_sign && !(_sign & ZFILL)) { _buff[--_offset] = '-'; }
    1e2a:	f1 1d       	adc	r31, r1
    1e2c:	97 fc       	sbrc	r9, 7
    1e2e:	fa 95       	dec	r31
    1e30:	8d e2       	ldi	r24, 0x2D	; 45
    1e32:	c7 cf       	rjmp	.-114    	; 0x1dc2 <Print::_print_integer(unsigned long, unsigned char, signed char, signed char) [clone .constprop.15]+0x106>

00001e34 <USB::setup_device(bool) [clone .part.2]>:
_ZN3USB12setup_deviceEb.part.2():
    1e34:	cf 93       	push	r28
    1e36:	df 93       	push	r29
    1e38:	c0 e0       	ldi	r28, 0x00	; 0
    1e3a:	dc e0       	ldi	r29, 0x0C	; 12
    1e3c:	18 82       	st	Y, r1
    1e3e:	10 92 04 0c 	sts	0x0C04, r1	; 0x800c04 <__TEXT_REGION_LENGTH__+0x7f0c04>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/usb.cpp:234
    EP_MEM.cci_header.wIndex        = 1;    /* Interface#1 */
    EP_MEM.cci_header.wLength       = 2;
    EP_MEM.cci_wValue               = _state;
  }

  void setup_device (bool _force) {
    1e42:	8c e3       	ldi	r24, 0x3C	; 60
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/usb.cpp:238
    if (_led_mode != 3) SYS::LED_Flash();
    USB0_ADDR = 0;
    if (USB0_CTRLA || _force) {
      USB0_CTRLA = 0;
    1e44:	94 e6       	ldi	r25, 0x64	; 100
    1e46:	80 93 06 0c 	sts	0x0C06, r24	; 0x800c06 <__TEXT_REGION_LENGTH__+0x7f0c06>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/usb.cpp:239
      USB0_FIFOWP = 0;
    1e4a:	90 93 07 0c 	sts	0x0C07, r25	; 0x800c07 <__TEXT_REGION_LENGTH__+0x7f0c07>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/usb.cpp:240
      USB0_EPPTR = (uint16_t)&EP_TABLE.EP;
    1e4e:	81 e0       	ldi	r24, 0x01	; 1
    1e50:	80 93 01 0c 	sts	0x0C01, r24	; 0x800c01 <__TEXT_REGION_LENGTH__+0x7f0c01>
    1e54:	1c ba       	out	0x1c, r1	; 28
    1e56:	1d ba       	out	0x1d, r1	; 29
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/usb.cpp:241
      USB0_CTRLB = USB_ATTACH_bm;
    1e58:	1e ba       	out	0x1e, r1	; 30
    1e5a:	10 92 32 64 	sts	0x6432, r1	; 0x806432 <_send_break>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/usb.cpp:242
      GPCONF = 0;
    1e5e:	10 92 33 64 	sts	0x6433, r1	; 0x806433 <_send_break+0x1>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/usb.cpp:244
      PGCONF = 0;
      RXSTAT = 0;
    1e62:	10 92 31 64 	sts	0x6431, r1	; 0x806431 <_send_count>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/usb.cpp:245
      _send_break = 0;
    1e66:	10 92 30 64 	sts	0x6430, r1	; 0x806430 <_recv_count>
    1e6a:	10 92 2f 64 	sts	0x642F, r1	; 0x80642f <_set_config>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/usb.cpp:246
      _send_count = 0;
    1e6e:	10 92 2e 64 	sts	0x642E, r1	; 0x80642e <_sof_count>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/usb.cpp:247
      _recv_count = 0;
    1e72:	4a e4       	ldi	r20, 0x4A	; 74
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/usb.cpp:248
      _set_config = 0;
    1e74:	50 e0       	ldi	r21, 0x00	; 0
    1e76:	6c e6       	ldi	r22, 0x6C	; 108
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/usb.cpp:249
      _sof_count = 0;
    1e78:	78 e0       	ldi	r23, 0x08	; 8
    1e7a:	84 e3       	ldi	r24, 0x34	; 52
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/usb.cpp:250
      memcpy_P(&EP_TABLE, &ep_init, sizeof(EP_TABLE_t));
    1e7c:	94 e6       	ldi	r25, 0x64	; 100
    1e7e:	0e 94 7d 21 	call	0x42fa	; 0x42fa <memcpy_P>
set_cci_data():
    1e82:	e6 e1       	ldi	r30, 0x16	; 22
    1e84:	f3 e6       	ldi	r31, 0x63	; 99
    1e86:	81 ea       	ldi	r24, 0xA1	; 161
    1e88:	80 87       	std	Z+8, r24	; 0x08
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/usb.cpp:226
    return _size;
  }

  void set_cci_data (uint16_t _state) {
    _set_serial_state = _state;
    EP_MEM.cci_header.bmRequestType = 0xA1; /* REQTYPE_DIRECTION | REQTYPE_CLASS | RECIPIENT_INTERFACE */
    1e8a:	80 e2       	ldi	r24, 0x20	; 32
    1e8c:	81 87       	std	Z+9, r24	; 0x09
    1e8e:	12 86       	std	Z+10, r1	; 0x0a
    1e90:	13 86       	std	Z+11, r1	; 0x0b
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/usb.cpp:227
    EP_MEM.cci_header.bRequest      = 0x20; /* CDC_REQ_SerialState */
    1e92:	81 e0       	ldi	r24, 0x01	; 1
    1e94:	90 e0       	ldi	r25, 0x00	; 0
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/usb.cpp:228
    EP_MEM.cci_header.wValue        = 0;
    1e96:	84 87       	std	Z+12, r24	; 0x0c
    1e98:	95 87       	std	Z+13, r25	; 0x0d
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/usb.cpp:229
    EP_MEM.cci_header.wIndex        = 1;    /* Interface#1 */
    1e9a:	82 e0       	ldi	r24, 0x02	; 2
    1e9c:	90 e0       	ldi	r25, 0x00	; 0
    1e9e:	86 87       	std	Z+14, r24	; 0x0e
    1ea0:	97 87       	std	Z+15, r25	; 0x0f
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/usb.cpp:230
    EP_MEM.cci_header.wLength       = 2;
    1ea2:	10 8a       	std	Z+16, r1	; 0x10
    1ea4:	11 8a       	std	Z+17, r1	; 0x11
_ZN3USB12setup_deviceEb.part.2():
    1ea6:	83 e8       	ldi	r24, 0x83	; 131
    1ea8:	88 83       	st	Y, r24
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/usb.cpp:231
    EP_MEM.cci_wValue               = _state;
    1eaa:	df 91       	pop	r29
    1eac:	cf 91       	pop	r28
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/usb.cpp:252
      _recv_count = 0;
      _set_config = 0;
      _sof_count = 0;
      memcpy_P(&EP_TABLE, &ep_init, sizeof(EP_TABLE_t));
      set_cci_data(0x00);
      USB0_CTRLA = USB_ENABLE_bm | (USB_ENDPOINTS_MAX - 1);
    1eae:	08 95       	ret

00001eb0 <USART::disable_vcp()>:
disable_vcp():
    1eb0:	80 91 06 08 	lds	r24, 0x0806	; 0x800806 <__TEXT_REGION_LENGTH__+0x7f0806>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/usb.cpp:254
    }
  }
    1eb4:	88 23       	and	r24, r24
    1eb6:	31 f1       	breq	.+76     	; 0x1f04 <USART::disable_vcp()+0x54>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/usart.cpp:53
    } while (--_delay);
  }

  /*** Stop the VCP and release the ports in use. ***/
  void disable_vcp (void) {
    if (USART0_CTRLB) {
    1eb8:	84 e3       	ldi	r24, 0x34	; 52
    1eba:	98 e0       	ldi	r25, 0x08	; 8
    1ebc:	9f 93       	push	r25
    1ebe:	8f 93       	push	r24
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/usart.cpp:54
      D1PRINTF(" UART=OFF\r\n");
    1ec0:	8d e8       	ldi	r24, 0x8D	; 141
    1ec2:	90 e6       	ldi	r25, 0x60	; 96
    1ec4:	9f 93       	push	r25
    1ec6:	8f 93       	push	r24
    1ec8:	b4 da       	rcall	.-2712   	; 0x1432 <Print::printf(PGM_t const*, ...) [clone .constprop.22]>
delay_micros():
    1eca:	8a e1       	ldi	r24, 0x1A	; 26
    1ecc:	8a 95       	dec	r24
    1ece:	f1 f7       	brne	.-4      	; 0x1ecc <USART::disable_vcp()+0x1c>
    1ed0:	00 c0       	rjmp	.+0      	; 0x1ed2 <USART::disable_vcp()+0x22>
disable_vcp():
    1ed2:	8f b7       	in	r24, 0x3f	; 63
__iCliRetVal():
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/modernAVR/0.2.14/cores/modernAVR/api/delay_busywait.h:33
static __inline__ __attribute__((__always_inline__)) void delay_micros (uint32_t _us);
static __inline__ __attribute__((__always_inline__)) void delay_millis (uint32_t _ms);

void delay_micros (uint32_t _us) {
  if (F_CPU >= 1000000L) {
    __builtin_avr_delay_cycles((F_CPU / 1000000L) * _us);
    1ed4:	f8 94       	cli
disable_vcp():
    1ed6:	10 92 06 08 	sts	0x0806, r1	; 0x800806 <__TEXT_REGION_LENGTH__+0x7f0806>
    1eda:	10 92 05 08 	sts	0x0805, r1	; 0x800805 <__TEXT_REGION_LENGTH__+0x7f0805>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/usart.cpp:60
      /* Allow time to move USART0_TXDATA */
      delay_micros(4);
      ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
        /* Simply clearing the CTRLB does not disable the USART completely.                    */
        /* This errata is not documented for the AVR-DU, but is the same as for tinyAVR-0 etc. */
        USART0_CTRLB = 0;
    1ede:	1e ba       	out	0x1e, r1	; 30
    1ee0:	1f ba       	out	0x1f, r1	; 31
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/usart.cpp:61
        USART0_CTRLA = 0;
    1ee2:	92 e1       	ldi	r25, 0x12	; 18
    1ee4:	90 93 e2 05 	sts	0x05E2, r25	; 0x8005e2 <__TEXT_REGION_LENGTH__+0x7f05e2>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/usart.cpp:63
        RXSTAT = 0;
        RXDATA = 0;
    1ee8:	e1 98       	cbi	0x1c, 1	; 28
__iRestore():
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/usart.cpp:64
        PORTMUX_USARTROUTEA = PORTMUX_USART_VCP;
    1eea:	8f bf       	out	0x3f, r24	; 63
disable_vcp():
    1eec:	00 98       	cbi	0x00, 0	; 0
    1eee:	88 e0       	ldi	r24, 0x08	; 8
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/usart.cpp:65
        bit_clear(GPCONF, GPCONF_VCP_bp);
    1ef0:	80 93 10 04 	sts	0x0410, r24	; 0x800410 <__TEXT_REGION_LENGTH__+0x7f0410>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/usart.cpp:67
      }
      pinModeMacro(PIN_PGM_TDAT, INPUT_PULLUP);   /* open-drain */
    1ef4:	02 98       	cbi	0x00, 2	; 0
    1ef6:	80 93 12 04 	sts	0x0412, r24	; 0x800412 <__TEXT_REGION_LENGTH__+0x7f0412>
    1efa:	02 98       	cbi	0x00, 2	; 0
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/usart.cpp:68
      pinModeMacro(PIN_VCP_TXD, INPUT_PULLUP);    /* open-drain */
    1efc:	0f 90       	pop	r0
    1efe:	0f 90       	pop	r0
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/usart.cpp:69
      openDrainWriteMacro(PIN_VCP_TXD, HIGH);
    1f00:	0f 90       	pop	r0
    1f02:	0f 90       	pop	r0
    1f04:	08 95       	ret

00001f06 <USART::setup()>:
LED_TCB1():
    1f06:	80 91 85 60 	lds	r24, 0x6085	; 0x806085 <_led_mode>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/usart.cpp:75
  #if (PIN_PGM_TCLK != PIN_VCP_TXD)
      pinModeMacro(PIN_PGM_TCLK, INPUT_PULLUP);   /* open-drain */
      openDrainWriteMacro(PIN_PGM_TCLK, HIGH);
  #endif
    }
  }
    1f0a:	84 30       	cpi	r24, 0x04	; 4
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/sys.cpp:246
      _led_mode = 1;
    }
  }

  void LED_TCB1 (uint8_t _mode, uint16_t _ccmp) {
    if (_led_mode != _mode) {
    1f0c:	81 f0       	breq	.+32     	; 0x1f2e <USART::setup()+0x28>
    1f0e:	10 92 00 0a 	sts	0x0A00, r1	; 0x800a00 <__TEXT_REGION_LENGTH__+0x7f0a00>
    1f12:	10 92 1a 0b 	sts	0x0B1A, r1	; 0x800b1a <__TEXT_REGION_LENGTH__+0x7f0b1a>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/sys.cpp:247
      TCA0_SPLIT_CTRLA = 0;
    1f16:	82 e2       	ldi	r24, 0x22	; 34
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/sys.cpp:248
      TCB1_CNTL = 0;
    1f18:	91 e1       	ldi	r25, 0x11	; 17
    1f1a:	80 93 1c 0b 	sts	0x0B1C, r24	; 0x800b1c <__TEXT_REGION_LENGTH__+0x7f0b1c>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/sys.cpp:249
      TCB1_CCMP = _ccmp;
    1f1e:	90 93 1d 0b 	sts	0x0B1D, r25	; 0x800b1d <__TEXT_REGION_LENGTH__+0x7f0b1d>
    1f22:	8f e4       	ldi	r24, 0x4F	; 79
    1f24:	80 93 10 0b 	sts	0x0B10, r24	; 0x800b10 <__TEXT_REGION_LENGTH__+0x7f0b10>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/sys.cpp:250
      TCB1_CTRLA = TCB_RUNSTDBY_bm | TCB_ENABLE_bm | TCB_CLKSEL_EVENT_gc;
    1f28:	84 e0       	ldi	r24, 0x04	; 4
    1f2a:	80 93 85 60 	sts	0x6085, r24	; 0x806085 <_led_mode>
setup():
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/sys.cpp:251
      _led_mode = _mode;
    1f2e:	1d ba       	out	0x1d, r1	; 29
    1f30:	bf df       	rcall	.-130    	; 0x1eb0 <USART::disable_vcp()>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/usart.cpp:26

namespace USART {

  void setup (void) {
    SYS::LED_Fast();
    PGCONF = 0;
    1f32:	03 98       	cbi	0x00, 3	; 0
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/usart.cpp:27
    disable_vcp();
    1f34:	88 e0       	ldi	r24, 0x08	; 8
    1f36:	80 93 13 04 	sts	0x0413, r24	; 0x800413 <__TEXT_REGION_LENGTH__+0x7f0413>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/usart.cpp:28
    pinModeMacro(PIN_VCP_RXD, INPUT_PULLUP);  /* USART0_DEFAULT or USART0_ALT2 */
    1f3a:	01 98       	cbi	0x00, 1	; 0
    1f3c:	80 93 11 04 	sts	0x0411, r24	; 0x800411 <__TEXT_REGION_LENGTH__+0x7f0411>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/usart.cpp:29
    pinModeMacro(PIN_PGM_TRST, INPUT_PULLUP); /* USART0_ALT3 or USART0_DEFAULT */
    1f40:	08 95       	ret

00001f42 <UPDI::enter_progmode()>:
enter_progmode():
    1f42:	cf 93       	push	r28
    1f44:	8d b3       	in	r24, 0x1d	; 29
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/usart.cpp:30
  }
    1f46:	c8 2f       	mov	r28, r24
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/updi.cpp:401
    nop();
    openDrainWriteMacro(PIN_PGM_TRST, HIGH);
    return _result;
  }

  size_t enter_progmode (void) {
    1f48:	c2 70       	andi	r28, 0x02	; 2
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/updi.cpp:402
    if (bit_is_set(PGCONF, PGCONF_PROG_bp)) return 1;
    1f4a:	81 fd       	sbrc	r24, 1
    1f4c:	2e c0       	rjmp	.+92     	; 0x1faa <UPDI::enter_progmode()+0x68>
    1f4e:	81 e0       	ldi	r24, 0x01	; 1
    1f50:	61 db       	rcall	.-2366   	; 0x1614 <UPDI::set_nvmprog_key(bool)>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/updi.cpp:403
    if (!set_nvmprog_key()) return 0;
    1f52:	81 11       	cpse	r24, r1
    1f54:	06 c0       	rjmp	.+12     	; 0x1f62 <UPDI::enter_progmode()+0x20>
    1f56:	90 e0       	ldi	r25, 0x00	; 0
    1f58:	80 e0       	ldi	r24, 0x00	; 0
    1f5a:	cf 91       	pop	r28
    1f5c:	08 95       	ret
    1f5e:	c1 30       	cpi	r28, 0x01	; 1
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/updi.cpp:416
      sys_status();
    } while (bit_is_clear(RXDATA, 3));  /* wait set PROGSTART */
    D1PRINTF(" PROGSTART=%02X\r\n", RXDATA);
    bit_set(PGCONF, PGCONF_PROG_bp);
    return (*Command_Table.prog_init)();
  }
    1f60:	d1 f3       	breq	.-12     	; 0x1f56 <UPDI::enter_progmode()+0x14>
delay_micros():
    1f62:	89 ef       	ldi	r24, 0xF9	; 249
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/updi.cpp:409
    uint8_t _count = 0;
    do {
      /* Do not wait for the global timeout to ensure that LOCKSTAT cannot */
      /* be released. Aborting the ACC instruction set here will adversely */
      /* affect subsequent USERROW writes or chip erases. */
      if (0 == ++_count) return 0;
    1f64:	90 e0       	ldi	r25, 0x00	; 0
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/modernAVR/0.2.14/cores/modernAVR/api/delay_busywait.h:33
    1f66:	01 97       	sbiw	r24, 0x01	; 1
    1f68:	f1 f7       	brne	.-4      	; 0x1f66 <UPDI::enter_progmode()+0x24>
    1f6a:	00 c0       	rjmp	.+0      	; 0x1f6c <UPDI::enter_progmode()+0x2a>
    1f6c:	00 00       	nop
enter_progmode():
    1f6e:	0e 94 e3 05 	call	0xbc6	; 0xbc6 <UPDI::sys_status()>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/updi.cpp:411
      delay_micros(50);
      sys_status();
    1f72:	c1 50       	subi	r28, 0x01	; 1
    1f74:	fb 9b       	sbis	0x1f, 3	; 31
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/updi.cpp:412
    } while (bit_is_clear(RXDATA, 3));  /* wait set PROGSTART */
    1f76:	f3 cf       	rjmp	.-26     	; 0x1f5e <UPDI::enter_progmode()+0x1c>
    1f78:	8f b3       	in	r24, 0x1f	; 31
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/updi.cpp:413
    D1PRINTF(" PROGSTART=%02X\r\n", RXDATA);
    1f7a:	1f 92       	push	r1
    1f7c:	8f 93       	push	r24
    1f7e:	82 e2       	ldi	r24, 0x22	; 34
    1f80:	98 e0       	ldi	r25, 0x08	; 8
    1f82:	9f 93       	push	r25
    1f84:	8f 93       	push	r24
    1f86:	8d e8       	ldi	r24, 0x8D	; 141
    1f88:	90 e6       	ldi	r25, 0x60	; 96
    1f8a:	9f 93       	push	r25
    1f8c:	8f 93       	push	r24
    1f8e:	51 da       	rcall	.-2910   	; 0x1432 <Print::printf(PGM_t const*, ...) [clone .constprop.22]>
    1f90:	e9 9a       	sbi	0x1d, 1	; 29
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/updi.cpp:414
    bit_set(PGCONF, PGCONF_PROG_bp);
    1f92:	0f 90       	pop	r0
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/updi.cpp:415
    return (*Command_Table.prog_init)();
    1f94:	0f 90       	pop	r0
    1f96:	0f 90       	pop	r0
    1f98:	0f 90       	pop	r0
    1f9a:	0f 90       	pop	r0
    1f9c:	0f 90       	pop	r0
    1f9e:	e0 91 0e 63 	lds	r30, 0x630E	; 0x80630e <Command_Table>
    1fa2:	f0 91 0f 63 	lds	r31, 0x630F	; 0x80630f <Command_Table+0x1>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/updi.cpp:416
  }
    1fa6:	cf 91       	pop	r28
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/updi.cpp:402
    openDrainWriteMacro(PIN_PGM_TRST, HIGH);
    return _result;
  }

  size_t enter_progmode (void) {
    if (bit_is_set(PGCONF, PGCONF_PROG_bp)) return 1;
    1fa8:	09 94       	ijmp
    1faa:	81 e0       	ldi	r24, 0x01	; 1
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/updi.cpp:262
    D1PRINTF(" KEY=%02X\r\n", RXDATA);
    return sys_reset(false);
  }

  bool chip_erase (void) {
    USART::drain();
    1fac:	90 e0       	ldi	r25, 0x00	; 0
    1fae:	d5 cf       	rjmp	.-86     	; 0x1f5a <UPDI::enter_progmode()+0x18>

00001fb0 <UPDI::chip_erase()>:
chip_erase():
    1fb0:	90 e0       	ldi	r25, 0x00	; 0
    1fb2:	80 e0       	ldi	r24, 0x00	; 0
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/updi.cpp:245
    D1PRINTF(" KEY=%02X\r\n", RXDATA);
    return _reset ? sys_reset(false) : true;
  }

  bool set_erase_key (void) {
    if (bit_is_clear(PGCONF, PGCONF_PROG_bp)) set_nvmprog_key(false);
    1fb4:	0e 94 59 05 	call	0xab2	; 0xab2 <USART::drain(unsigned int)>
set_erase_key():
    1fb8:	e9 99       	sbic	0x1d, 1	; 29
    1fba:	02 c0       	rjmp	.+4      	; 0x1fc0 <UPDI::chip_erase()+0x10>
    1fbc:	80 e0       	ldi	r24, 0x00	; 0
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/updi.cpp:246
    D1PRINTF(" ERASE_KEY\r\n");
    1fbe:	2a db       	rcall	.-2476   	; 0x1614 <UPDI::set_nvmprog_key(bool)>
    1fc0:	85 e7       	ldi	r24, 0x75	; 117
    1fc2:	97 e0       	ldi	r25, 0x07	; 7
    1fc4:	9f 93       	push	r25
    1fc6:	8f 93       	push	r24
    1fc8:	8d e8       	ldi	r24, 0x8D	; 141
    1fca:	90 e6       	ldi	r25, 0x60	; 96
    1fcc:	9f 93       	push	r25
    1fce:	8f 93       	push	r24
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/updi.cpp:247
    if (!send_bytes(erase_key, sizeof(erase_key))) return false;
    1fd0:	30 da       	rcall	.-2976   	; 0x1432 <Print::printf(PGM_t const*, ...) [clone .constprop.22]>
    1fd2:	6a e0       	ldi	r22, 0x0A	; 10
    1fd4:	70 e0       	ldi	r23, 0x00	; 0
    1fd6:	8d e4       	ldi	r24, 0x4D	; 77
    1fd8:	90 e6       	ldi	r25, 0x60	; 96
    1fda:	0e 94 d0 05 	call	0xba0	; 0xba0 <UPDI::send_bytes(unsigned char const*, unsigned int)>
    1fde:	0f 90       	pop	r0
    1fe0:	0f 90       	pop	r0
    1fe2:	0f 90       	pop	r0
    1fe4:	0f 90       	pop	r0
    1fe6:	81 11       	cpse	r24, r1
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/updi.cpp:278
      do { sys_status(); } while(bit_is_clear(RXDATA, 3));  /* wait set PROGSTART */
    }
    D1PRINTF(" PROGSTART=%02X\r\n", RXDATA);
    bit_set(PGCONF, PGCONF_ERSE_bp);
    bit_set(PGCONF, PGCONF_PROG_bp);
    return (*Command_Table.prog_init)();
    1fe8:	02 c0       	rjmp	.+4      	; 0x1fee <UPDI::chip_erase()+0x3e>
chip_erase():
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/updi.cpp:248

  bool set_erase_key (void) {
    if (bit_is_clear(PGCONF, PGCONF_PROG_bp)) set_nvmprog_key(false);
    D1PRINTF(" ERASE_KEY\r\n");
    if (!send_bytes(erase_key, sizeof(erase_key))) return false;
    do { key_status(); } while(bit_is_clear(RXDATA, 3));  /* wait set CHIPERASE */
    1fea:	20 e0       	ldi	r18, 0x00	; 0
    1fec:	73 c0       	rjmp	.+230    	; 0x20d4 <__DATA_REGION_LENGTH__+0xd4>
set_erase_key():
    1fee:	0e 94 ec 05 	call	0xbd8	; 0xbd8 <UPDI::key_status()>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/updi.cpp:249
    D1PRINTF(" KEY=%02X\r\n", RXDATA);
    1ff2:	fb 9b       	sbis	0x1f, 3	; 31
    1ff4:	fc cf       	rjmp	.-8      	; 0x1fee <UPDI::chip_erase()+0x3e>
    1ff6:	8f b3       	in	r24, 0x1f	; 31
    1ff8:	1f 92       	push	r1
    1ffa:	8f 93       	push	r24
    1ffc:	89 e6       	ldi	r24, 0x69	; 105
    1ffe:	97 e0       	ldi	r25, 0x07	; 7
    2000:	9f 93       	push	r25
    2002:	8f 93       	push	r24
    2004:	8d e8       	ldi	r24, 0x8D	; 141
    2006:	90 e6       	ldi	r25, 0x60	; 96
    2008:	9f 93       	push	r25
    200a:	8f 93       	push	r24
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/updi.cpp:137
    const static uint8_t _reset[] = {
      0x55, 0xC8, 0x59, /* SYSRST */
      0x55, 0xC8, 0x00, /* SYSRUN */
      0x55, 0xC3, 0x04  /* UPDIDIS */
    };
    return send_bytes(_reset, _leave ? 9 : 6);
    200c:	12 da       	rcall	.-3036   	; 0x1432 <Print::printf(PGM_t const*, ...) [clone .constprop.22]>
sys_reset():
    200e:	66 e0       	ldi	r22, 0x06	; 6
    2010:	70 e0       	ldi	r23, 0x00	; 0
    2012:	82 e7       	ldi	r24, 0x72	; 114
    2014:	90 e6       	ldi	r25, 0x60	; 96
    2016:	0e 94 d0 05 	call	0xba0	; 0xba0 <UPDI::send_bytes(unsigned char const*, unsigned int)>
chip_erase():
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/updi.cpp:263
    return sys_reset(false);
  }

  bool chip_erase (void) {
    USART::drain();
    if (!set_erase_key()) return false;
    201a:	0f 90       	pop	r0
    201c:	0f 90       	pop	r0
    201e:	0f 90       	pop	r0
    2020:	0f 90       	pop	r0
    2022:	0f 90       	pop	r0
    2024:	0f 90       	pop	r0
    2026:	88 23       	and	r24, r24
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/modernAVR/0.2.14/cores/modernAVR/api/delay_busywait.h:42
  }
}

void delay_millis (uint32_t _ms) {
  if (F_CPU >= 1000000L) {
    __builtin_avr_delay_cycles((F_CPU / 1000L) * _ms);
    2028:	01 f3       	breq	.-64     	; 0x1fea <UPDI::chip_erase()+0x3a>
delay_millis():
    202a:	2f ef       	ldi	r18, 0xFF	; 255
    202c:	84 e3       	ldi	r24, 0x34	; 52
    202e:	9c e0       	ldi	r25, 0x0C	; 12
    2030:	21 50       	subi	r18, 0x01	; 1
    2032:	80 40       	sbci	r24, 0x00	; 0
    2034:	90 40       	sbci	r25, 0x00	; 0
    2036:	e1 f7       	brne	.-8      	; 0x2030 <__DATA_REGION_LENGTH__+0x30>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/updi.cpp:265
    delay_millis(200);
    USART::drain();
    2038:	00 c0       	rjmp	.+0      	; 0x203a <__DATA_REGION_LENGTH__+0x3a>
    203a:	00 00       	nop
chip_erase():
    203c:	90 e0       	ldi	r25, 0x00	; 0
    203e:	80 e0       	ldi	r24, 0x00	; 0
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/updi.cpp:266
    do { sys_status(); } while(bit_is_set(RXDATA, 5));    /* wait clear RSTSYS */
    2040:	0e 94 59 05 	call	0xab2	; 0xab2 <USART::drain(unsigned int)>
    2044:	0e 94 e3 05 	call	0xbc6	; 0xbc6 <UPDI::sys_status()>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/updi.cpp:267
    do { sys_status(); } while(bit_is_set(RXDATA, 0));    /* wait clear LOCKSTATUS */
    2048:	fd 99       	sbic	0x1f, 5	; 31
    204a:	fc cf       	rjmp	.-8      	; 0x2044 <__DATA_REGION_LENGTH__+0x44>
    204c:	0e 94 e3 05 	call	0xbc6	; 0xbc6 <UPDI::sys_status()>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/updi.cpp:268
    D1PRINTF(" <SYS:%02X>\r\n", RXDATA);
    2050:	f8 99       	sbic	0x1f, 0	; 31
    2052:	fc cf       	rjmp	.-8      	; 0x204c <__DATA_REGION_LENGTH__+0x4c>
    2054:	8f b3       	in	r24, 0x1f	; 31
    2056:	1f 92       	push	r1
    2058:	8f 93       	push	r24
    205a:	84 e9       	ldi	r24, 0x94	; 148
    205c:	97 e0       	ldi	r25, 0x07	; 7
    205e:	9f 93       	push	r25
    2060:	8f 93       	push	r24
    2062:	8d e8       	ldi	r24, 0x8D	; 141
    2064:	90 e6       	ldi	r25, 0x60	; 96
    2066:	9f 93       	push	r25
    2068:	8f 93       	push	r24
    206a:	e3 d9       	rcall	.-3130   	; 0x1432 <Print::printf(PGM_t const*, ...) [clone .constprop.22]>
    206c:	0f 90       	pop	r0
    206e:	0f 90       	pop	r0
    2070:	0f 90       	pop	r0
    2072:	0f 90       	pop	r0
    2074:	0f 90       	pop	r0
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/updi.cpp:269
    do { key_status(); } while(bit_is_set(RXDATA, 3));    /* wait clear CHIPERASE */
    2076:	0f 90       	pop	r0
    2078:	0e 94 ec 05 	call	0xbd8	; 0xbd8 <UPDI::key_status()>
    207c:	fb 99       	sbic	0x1f, 3	; 31
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/updi.cpp:270
    sys_status();
    207e:	fc cf       	rjmp	.-8      	; 0x2078 <__DATA_REGION_LENGTH__+0x78>
    2080:	0e 94 e3 05 	call	0xbc6	; 0xbc6 <UPDI::sys_status()>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/updi.cpp:271
    if (bit_is_clear(RXDATA, 3)) {
    2084:	fb 99       	sbic	0x1f, 3	; 31
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/updi.cpp:272
      if (!set_nvmprog_key()) return false;
    2086:	09 c0       	rjmp	.+18     	; 0x209a <__DATA_REGION_LENGTH__+0x9a>
    2088:	81 e0       	ldi	r24, 0x01	; 1
    208a:	c4 da       	rcall	.-2680   	; 0x1614 <UPDI::set_nvmprog_key(bool)>
    208c:	88 23       	and	r24, r24
    208e:	09 f4       	brne	.+2      	; 0x2092 <__DATA_REGION_LENGTH__+0x92>
    2090:	ac cf       	rjmp	.-168    	; 0x1fea <UPDI::chip_erase()+0x3a>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/updi.cpp:273
      do { sys_status(); } while(bit_is_clear(RXDATA, 3));  /* wait set PROGSTART */
    2092:	0e 94 e3 05 	call	0xbc6	; 0xbc6 <UPDI::sys_status()>
    2096:	fb 9b       	sbis	0x1f, 3	; 31
    2098:	fc cf       	rjmp	.-8      	; 0x2092 <__DATA_REGION_LENGTH__+0x92>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/updi.cpp:275
    }
    D1PRINTF(" PROGSTART=%02X\r\n", RXDATA);
    209a:	8f b3       	in	r24, 0x1f	; 31
    209c:	1f 92       	push	r1
    209e:	8f 93       	push	r24
    20a0:	82 e8       	ldi	r24, 0x82	; 130
    20a2:	97 e0       	ldi	r25, 0x07	; 7
    20a4:	9f 93       	push	r25
    20a6:	8f 93       	push	r24
    20a8:	8d e8       	ldi	r24, 0x8D	; 141
    20aa:	90 e6       	ldi	r25, 0x60	; 96
    20ac:	9f 93       	push	r25
    20ae:	8f 93       	push	r24
    20b0:	c0 d9       	rcall	.-3200   	; 0x1432 <Print::printf(PGM_t const*, ...) [clone .constprop.22]>
    20b2:	ea 9a       	sbi	0x1d, 2	; 29
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/updi.cpp:276
    bit_set(PGCONF, PGCONF_ERSE_bp);
    20b4:	e9 9a       	sbi	0x1d, 1	; 29
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/updi.cpp:277
    bit_set(PGCONF, PGCONF_PROG_bp);
    20b6:	e0 91 0e 63 	lds	r30, 0x630E	; 0x80630e <Command_Table>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/updi.cpp:278
    return (*Command_Table.prog_init)();
    20ba:	f0 91 0f 63 	lds	r31, 0x630F	; 0x80630f <Command_Table+0x1>
    20be:	09 95       	icall
    20c0:	21 e0       	ldi	r18, 0x01	; 1
    20c2:	0f 90       	pop	r0
    20c4:	0f 90       	pop	r0
    20c6:	0f 90       	pop	r0
    20c8:	0f 90       	pop	r0
    20ca:	0f 90       	pop	r0
    20cc:	0f 90       	pop	r0
    20ce:	89 2b       	or	r24, r25
    20d0:	09 f4       	brne	.+2      	; 0x20d4 <__DATA_REGION_LENGTH__+0xd4>
    20d2:	8b cf       	rjmp	.-234    	; 0x1fea <UPDI::chip_erase()+0x3a>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/updi.cpp:279
  }
    20d4:	82 2f       	mov	r24, r18
    20d6:	08 95       	ret

000020d8 <NVM::V4::erase_memory()>:
erase_memory():
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/nvmv4.cpp:140
    }
    return 0;
  }

  size_t erase_memory (void) {
    uint8_t e_type = packet.out.bEType;
    20d8:	80 91 d5 60 	lds	r24, 0x60D5	; 0x8060d5 <packet+0x7>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/nvmv4.cpp:141
    if (e_type == 0x00) {
    20dc:	81 11       	cpse	r24, r1
    20de:	03 c0       	rjmp	.+6      	; 0x20e6 <NVM::V4::erase_memory()+0xe>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/nvmv4.cpp:143
      /* XMEGA_ERASE_CHIP */
      return UPDI::chip_erase();
    20e0:	67 df       	rcall	.-306    	; 0x1fb0 <UPDI::chip_erase()>
    20e2:	90 e0       	ldi	r25, 0x00	; 0
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/nvmv4.cpp:150
    else {
      /* NOTE: AVRDUDE<=7.3 may pass the wrong M_TYPE. */
      /* For safety, only USERROW and BOOTROW are allowed to erase pages. */
      if (e_type == 0x07) {
        /* XMEGA_ERASE_USERSIG */
        return erase_flash_page(packet.out.dwAddr);
    20e4:	08 95       	ret
    20e6:	87 30       	cpi	r24, 0x07	; 7
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/nvmv4.cpp:148
      return UPDI::chip_erase();
    }
    else {
      /* NOTE: AVRDUDE<=7.3 may pass the wrong M_TYPE. */
      /* For safety, only USERROW and BOOTROW are allowed to erase pages. */
      if (e_type == 0x07) {
    20e8:	51 f4       	brne	.+20     	; 0x20fe <NVM::V4::erase_memory()+0x26>
    20ea:	60 91 d6 60 	lds	r22, 0x60D6	; 0x8060d6 <packet+0x8>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/nvmv4.cpp:150
        /* XMEGA_ERASE_USERSIG */
        return erase_flash_page(packet.out.dwAddr);
    20ee:	70 91 d7 60 	lds	r23, 0x60D7	; 0x8060d7 <packet+0x9>
    20f2:	80 91 d8 60 	lds	r24, 0x60D8	; 0x8060d8 <packet+0xa>
    20f6:	90 91 d9 60 	lds	r25, 0x60D9	; 0x8060d9 <packet+0xb>
    20fa:	ac d8       	rcall	.-3752   	; 0x1254 <NVM::V4::erase_flash_page(unsigned long)>
    20fc:	f2 cf       	rjmp	.-28     	; 0x20e2 <NVM::V4::erase_memory()+0xa>
    20fe:	81 e0       	ldi	r24, 0x01	; 1
    2100:	90 e0       	ldi	r25, 0x00	; 0
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/nvmv4.cpp:155
      }
    }
    /* Page erase will not be used if received. */
    /* Instead, page erase is determined by the is_boundary_flash_page function. */
    return 1;
    2102:	08 95       	ret

00002104 <NVM::V2::erase_memory()>:
    2104:	80 91 d5 60 	lds	r24, 0x60D5	; 0x8060d5 <packet+0x7>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/nvmv2.cpp:137
    }
    return 0;
  }

  size_t erase_memory (void) {
    uint8_t e_type = packet.out.bEType;
    2108:	81 11       	cpse	r24, r1
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/nvmv2.cpp:138
    if (e_type == 0x00) {
    210a:	03 c0       	rjmp	.+6      	; 0x2112 <NVM::V2::erase_memory()+0xe>
    210c:	51 df       	rcall	.-350    	; 0x1fb0 <UPDI::chip_erase()>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/nvmv2.cpp:140
      /* XMEGA_ERASE_CHIP */
      return UPDI::chip_erase();
    210e:	90 e0       	ldi	r25, 0x00	; 0
    2110:	08 95       	ret
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/nvmv2.cpp:147
    else {
      /* NOTE: AVRDUDE<=7.3 may pass the wrong M_TYPE. */
      /* For safety, only USERROW and BOOTROW are allowed to erase pages. */
      if (e_type == 0x07) {
        /* XMEGA_ERASE_USERSIG */
        return erase_flash_page(packet.out.dwAddr);
    2112:	87 30       	cpi	r24, 0x07	; 7
    2114:	51 f4       	brne	.+20     	; 0x212a <NVM::V2::erase_memory()+0x26>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/nvmv2.cpp:145
      return UPDI::chip_erase();
    }
    else {
      /* NOTE: AVRDUDE<=7.3 may pass the wrong M_TYPE. */
      /* For safety, only USERROW and BOOTROW are allowed to erase pages. */
      if (e_type == 0x07) {
    2116:	60 91 d6 60 	lds	r22, 0x60D6	; 0x8060d6 <packet+0x8>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/nvmv2.cpp:147
        /* XMEGA_ERASE_USERSIG */
        return erase_flash_page(packet.out.dwAddr);
    211a:	70 91 d7 60 	lds	r23, 0x60D7	; 0x8060d7 <packet+0x9>
    211e:	80 91 d8 60 	lds	r24, 0x60D8	; 0x8060d8 <packet+0xa>
    2122:	90 91 d9 60 	lds	r25, 0x60D9	; 0x8060d9 <packet+0xb>
    2126:	e5 d8       	rcall	.-3638   	; 0x12f2 <NVM::V2::erase_flash_page(unsigned long)>
    2128:	f2 cf       	rjmp	.-28     	; 0x210e <NVM::V2::erase_memory()+0xa>
    212a:	81 e0       	ldi	r24, 0x01	; 1
    212c:	90 e0       	ldi	r25, 0x00	; 0
    212e:	08 95       	ret

00002130 <NVM::V0::erase_memory()>:
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/nvmv2.cpp:152
      }
    }
    /* Page erase will not be used if received. */
    /* Instead, page erase is determined by the is_boundary_flash_page function. */
    return 1;
    2130:	80 91 d5 60 	lds	r24, 0x60D5	; 0x8060d5 <packet+0x7>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/nvmv2.cpp:153
  }
    2134:	81 11       	cpse	r24, r1
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/nvmv0.cpp:134
    return 0;
  }

  size_t erase_memory (void) {
    uint8_t e_type = packet.out.bEType;
    if (e_type == 0x00) {
    2136:	03 c0       	rjmp	.+6      	; 0x213e <NVM::V0::erase_memory()+0xe>
    2138:	3b df       	rcall	.-394    	; 0x1fb0 <UPDI::chip_erase()>
    213a:	90 e0       	ldi	r25, 0x00	; 0
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/nvmv0.cpp:136
      /* XMEGA_ERASE_CHIP */
      return UPDI::chip_erase();
    213c:	08 95       	ret
    213e:	81 e0       	ldi	r24, 0x01	; 1
    2140:	90 e0       	ldi	r25, 0x00	; 0
    2142:	08 95       	ret

00002144 <NVM::V5::erase_memory()>:
_ZN3NVM2V512erase_memoryEv():
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/nvmv0.cpp:139
    }
    /* Page erase will not be used if received. */
    return 1;
    2144:	f5 cf       	rjmp	.-22     	; 0x2130 <NVM::V0::erase_memory()>

00002146 <NVM::V3::erase_memory()>:
_ZN3NVM2V312erase_memoryEv():
    2146:	f4 cf       	rjmp	.-24     	; 0x2130 <NVM::V0::erase_memory()>

00002148 <TPI::connect()>:
connect():
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/nvmv0.cpp:140
  }
    2148:	af 92       	push	r10
    214a:	bf 92       	push	r11
    214c:	cf 92       	push	r12
    214e:	df 92       	push	r13
    2150:	ef 92       	push	r14
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/tpi.cpp:211
    return nvm_ctrl(0x00);
  }

  /*** Application ****/

  size_t connect (void) {
    2152:	ff 92       	push	r15
    2154:	0f 93       	push	r16
    2156:	1f 93       	push	r17
    2158:	cf 93       	push	r28
    215a:	df 93       	push	r29
    215c:	00 d0       	rcall	.+0      	; 0x215e <TPI::connect()+0x16>
    215e:	cd b7       	in	r28, 0x3d	; 61
    2160:	de b7       	in	r29, 0x3e	; 62
    2162:	80 e8       	ldi	r24, 0x80	; 128
    2164:	8d bb       	out	0x1d, r24	; 29
    2166:	a4 de       	rcall	.-696    	; 0x1eb0 <USART::disable_vcp()>
    2168:	80 91 9c 60 	lds	r24, 0x609C	; 0x80609c <_packet_length>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/tpi.cpp:212
    PGCONF = PGCONF_FAIL_bm;
    216c:	90 91 9d 60 	lds	r25, 0x609D	; 0x80609d <_packet_length+0x1>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/tpi.cpp:213
    USART::disable_vcp();
    2170:	07 97       	sbiw	r24, 0x07	; 7
    2172:	88 f0       	brcs	.+34     	; 0x2196 <TPI::connect()+0x4e>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/tpi.cpp:215

    if (_packet_length > 6 && packet.out.tpi.bType) {
    2174:	80 91 d4 60 	lds	r24, 0x60D4	; 0x8060d4 <packet+0x6>
    2178:	88 23       	and	r24, r24
    217a:	69 f0       	breq	.+26     	; 0x2196 <TPI::connect()+0x4e>
    217c:	88 e4       	ldi	r24, 0x48	; 72
    217e:	97 e0       	ldi	r25, 0x07	; 7
    2180:	9f 93       	push	r25
    2182:	8f 93       	push	r24
    2184:	8d e8       	ldi	r24, 0x8D	; 141
    2186:	90 e6       	ldi	r25, 0x60	; 96
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/tpi.cpp:217
      /* External Reset : Activation High-Voltage mode */
      D1PRINTF("<HVEN>\r\n");
    2188:	9f 93       	push	r25
    218a:	8f 93       	push	r24
    218c:	52 d9       	rcall	.-3420   	; 0x1432 <Print::printf(PGM_t const*, ...) [clone .constprop.22]>
    218e:	0f 90       	pop	r0
    2190:	0f 90       	pop	r0
    2192:	0f 90       	pop	r0
    2194:	0f 90       	pop	r0
    2196:	00 9a       	sbi	0x00, 0	; 0
    2198:	01 9a       	sbi	0x00, 1	; 0
power_reset():
    219a:	ac 9a       	sbi	0x15, 4	; 21
delay_millis():
    219c:	2f ef       	ldi	r18, 0xFF	; 255
    219e:	34 e3       	ldi	r19, 0x34	; 52
    21a0:	8c e0       	ldi	r24, 0x0C	; 12
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/tpi.cpp:223
      /* STUB */
    }

    /*** Enter RESET (normal programing) ***/
    /* TRST remains LOW until program mode is exited. */
    openDrainWriteMacro(PIN_PGM_TDAT, LOW);
    21a2:	21 50       	subi	r18, 0x01	; 1
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/tpi.cpp:227
  #if (PIN_PGM_TCLK != PIN_VCP_TXD)
    openDrainWriteMacro(PIN_PGM_TCLK, LOW);
  #endif
    openDrainWriteMacro(PIN_PGM_TRST, LOW);
    21a4:	30 40       	sbci	r19, 0x00	; 0
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/sys.cpp:282
   * Target Reset
   */

  void power_reset (void) {
  #ifdef PIN_PGM_VPOWER
    digitalWriteMacro(PIN_PGM_VPOWER, HIGH);
    21a6:	80 40       	sbci	r24, 0x00	; 0
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/modernAVR/0.2.14/cores/modernAVR/api/delay_busywait.h:42
    21a8:	e1 f7       	brne	.-8      	; 0x21a2 <TPI::connect()+0x5a>
    21aa:	00 c0       	rjmp	.+0      	; 0x21ac <TPI::connect()+0x64>
    21ac:	00 00       	nop
power_reset():
    21ae:	ac 98       	cbi	0x15, 4	; 21
delay_millis():
    21b0:	ef e4       	ldi	r30, 0x4F	; 79
    21b2:	f3 ec       	ldi	r31, 0xC3	; 195
    21b4:	31 97       	sbiw	r30, 0x01	; 1
    21b6:	f1 f7       	brne	.-4      	; 0x21b4 <TPI::connect()+0x6c>
    21b8:	00 c0       	rjmp	.+0      	; 0x21ba <TPI::connect()+0x72>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/sys.cpp:284
    delay_millis(200);
    digitalWriteMacro(PIN_PGM_VPOWER, LOW);
    21ba:	00 00       	nop
change_tpi():
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/modernAVR/0.2.14/cores/modernAVR/api/delay_busywait.h:42
    21bc:	1f b7       	in	r17, 0x3f	; 63
__iCliRetVal():
    21be:	f8 94       	cli
change_tpi():
    21c0:	8a ef       	ldi	r24, 0xFA	; 250
    21c2:	96 e0       	ldi	r25, 0x06	; 6
    21c4:	9f 93       	push	r25
    21c6:	8f 93       	push	r24
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/usart.cpp:96
  }

  /*** Set up single-wire synchronous mode for TPI operation. ***/
  /* The VCD-TxD is repurposed to transmit the synchronous clock. */
  void change_tpi (void) {
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    21c8:	8d e8       	ldi	r24, 0x8D	; 141
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/tools/avr-gcc/7.3.0-avr8-gnu-toolchain/avr/include/util/atomic.h:50
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    21ca:	90 e6       	ldi	r25, 0x60	; 96
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/usart.cpp:97
      D1PRINTF(" UART=TPI\r\n");
    21cc:	9f 93       	push	r25
    21ce:	8f 93       	push	r24
    21d0:	30 d9       	rcall	.-3488   	; 0x1432 <Print::printf(PGM_t const*, ...) [clone .constprop.22]>
    21d2:	20 91 18 60 	lds	r18, 0x6018	; 0x806018 <_xclk>
    21d6:	30 91 19 60 	lds	r19, 0x6019	; 0x806019 <_xclk+0x1>
    21da:	50 e0       	ldi	r21, 0x00	; 0
    21dc:	40 e0       	ldi	r20, 0x00	; 0
    21de:	0f 90       	pop	r0
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/usart.cpp:99
      /* In synchronous mode the formula is different. */
      uint32_t _baud = ((F_CPU / 1000L) / _xclk + 1) / 2;
    21e0:	0f 90       	pop	r0
    21e2:	0f 90       	pop	r0
    21e4:	0f 90       	pop	r0
    21e6:	60 e2       	ldi	r22, 0x20	; 32
    21e8:	7e e4       	ldi	r23, 0x4E	; 78
    21ea:	80 e0       	ldi	r24, 0x00	; 0
    21ec:	90 e0       	ldi	r25, 0x00	; 0
    21ee:	0e 94 6a 24 	call	0x48d4	; 0x48d4 <__divmodsi4>
    21f2:	da 01       	movw	r26, r20
    21f4:	c9 01       	movw	r24, r18
    21f6:	01 96       	adiw	r24, 0x01	; 1
    21f8:	a1 1d       	adc	r26, r1
    21fa:	b1 1d       	adc	r27, r1
    21fc:	b5 95       	asr	r27
    21fe:	a7 95       	ror	r26
    2200:	97 95       	ror	r25
    2202:	87 95       	ror	r24
    2204:	56 e0       	ldi	r21, 0x06	; 6
    2206:	88 0f       	add	r24, r24
    2208:	99 1f       	adc	r25, r25
    220a:	aa 1f       	adc	r26, r26
    220c:	bb 1f       	adc	r27, r27
    220e:	5a 95       	dec	r21
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/usart.cpp:100
      _baud <<= 6;
    2210:	d1 f7       	brne	.-12     	; 0x2206 <TPI::connect()+0xbe>
    2212:	20 e1       	ldi	r18, 0x10	; 16
    2214:	20 93 e2 05 	sts	0x05E2, r18	; 0x8005e2 <__TEXT_REGION_LENGTH__+0x7f05e2>
    2218:	02 9a       	sbi	0x00, 2	; 0
    221a:	10 92 12 04 	sts	0x0412, r1	; 0x800412 <__TEXT_REGION_LENGTH__+0x7f0412>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/usart.cpp:102
      if (_baud < 64) _baud = 64;
      PORTMUX_USARTROUTEA = PORTMUX_USART_PGM;
    221e:	20 e2       	ldi	r18, 0x20	; 32
    2220:	20 93 04 08 	sts	0x0804, r18	; 0x800804 <__TEXT_REGION_LENGTH__+0x7f0804>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/usart.cpp:103
      pinModeMacro(PIN_PGM_TCLK, OUTPUT); /* push-pull */
    2224:	80 34       	cpi	r24, 0x40	; 64
    2226:	91 05       	cpc	r25, r1
    2228:	a1 05       	cpc	r26, r1
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/usart.cpp:104
      USART0_STATUS = USART_DREIF_bm;
    222a:	b1 05       	cpc	r27, r1
    222c:	20 f4       	brcc	.+8      	; 0x2236 <TPI::connect()+0xee>
    222e:	80 e4       	ldi	r24, 0x40	; 64
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/usart.cpp:105
      USART0_BAUD  = _baud;
    2230:	90 e0       	ldi	r25, 0x00	; 0
    2232:	a0 e0       	ldi	r26, 0x00	; 0
    2234:	b0 e0       	ldi	r27, 0x00	; 0
    2236:	80 93 08 08 	sts	0x0808, r24	; 0x800808 <__TEXT_REGION_LENGTH__+0x7f0808>
    223a:	90 93 09 08 	sts	0x0809, r25	; 0x800809 <__TEXT_REGION_LENGTH__+0x7f0809>
    223e:	8b e6       	ldi	r24, 0x6B	; 107
    2240:	80 93 07 08 	sts	0x0807, r24	; 0x800807 <__TEXT_REGION_LENGTH__+0x7f0807>
    2244:	8b e0       	ldi	r24, 0x0B	; 11
    2246:	80 93 05 08 	sts	0x0805, r24	; 0x800805 <__TEXT_REGION_LENGTH__+0x7f0805>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/usart.cpp:106
      USART0_CTRLC = USART_CHSIZE_8BIT_gc | USART_PMODE_EVEN_gc | USART_CMODE_SYNCHRONOUS_gc | USART_SBMODE_2BIT_gc;
    224a:	88 ec       	ldi	r24, 0xC8	; 200
    224c:	80 93 06 08 	sts	0x0806, r24	; 0x800806 <__TEXT_REGION_LENGTH__+0x7f0806>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/usart.cpp:107
      USART0_CTRLA = USART_LBME_bm | USART_RS485_INT_gc | USART_RS485_EXT_gc;
    2250:	20 91 06 08 	lds	r18, 0x0806	; 0x800806 <__TEXT_REGION_LENGTH__+0x7f0806>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/usart.cpp:108
      USART0_CTRLB = USART_RXEN_bm | USART_TXEN_bm | USART_ODME_bm;
    2254:	80 91 08 08 	lds	r24, 0x0808	; 0x800808 <__TEXT_REGION_LENGTH__+0x7f0808>
    2258:	90 91 09 08 	lds	r25, 0x0809	; 0x800809 <__TEXT_REGION_LENGTH__+0x7f0809>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/usart.cpp:109
      D1PRINTF(" BAUD=%04X:%02X\r\n", USART0_BAUD, USART0_CTRLB);
    225c:	1f 92       	push	r1
    225e:	2f 93       	push	r18
    2260:	9f 93       	push	r25
    2262:	8f 93       	push	r24
    2264:	88 ee       	ldi	r24, 0xE8	; 232
    2266:	96 e0       	ldi	r25, 0x06	; 6
    2268:	9f 93       	push	r25
    226a:	8f 93       	push	r24
    226c:	3d e8       	ldi	r19, 0x8D	; 141
    226e:	e3 2e       	mov	r14, r19
    2270:	30 e6       	ldi	r19, 0x60	; 96
    2272:	f3 2e       	mov	r15, r19
    2274:	ff 92       	push	r15
    2276:	ef 92       	push	r14
    2278:	dc d8       	rcall	.-3656   	; 0x1432 <Print::printf(PGM_t const*, ...) [clone .constprop.22]>
__iRestore():
    227a:	1f bf       	out	0x3f, r17	; 63
connect():
    227c:	84 e2       	ldi	r24, 0x24	; 36
    227e:	90 e0       	ldi	r25, 0x00	; 0
    2280:	0e 94 33 08 	call	0x1066	; 0x1066 <TPI::idle_clock(unsigned int)>
set_sstcs():
    2284:	82 ec       	ldi	r24, 0xC2	; 194
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/tools/avr-gcc/7.3.0-avr8-gnu-toolchain/avr/include/util/atomic.h:70
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    2286:	0e 94 e0 07 	call	0xfc0	; 0xfc0 <TPI::send(unsigned char)>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/tpi.cpp:236
    /* If a device is pushing or pulling a control pin at OUTPUT,     */
    /* the potential must be lowered for a sufficient period of time. */
    /* During the wait, TCLK will emit a sufficient number of pulses. */
    delay_millis(10);
    USART::change_tpi();
    idle_clock(36);
    228a:	cd bf       	out	0x3d, r28	; 61
    228c:	de bf       	out	0x3e, r29	; 62
    228e:	81 11       	cpse	r24, r1
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/tpi.cpp:69
  bool get_sldcs (const uint8_t _addr) {
    return (send(0x80 | _addr) && recv());
  }

  bool set_sstcs (const uint8_t _addr, const uint8_t _data) {
    return (send(0xC0 | _addr) && send(_data));
    2290:	03 c0       	rjmp	.+6      	; 0x2298 <TPI::connect()+0x150>
connect():
    2292:	90 e0       	ldi	r25, 0x00	; 0
    2294:	80 e0       	ldi	r24, 0x00	; 0
    2296:	ac c0       	rjmp	.+344    	; 0x23f0 <TPI::connect()+0x2a8>
set_sstcs():
    2298:	85 e0       	ldi	r24, 0x05	; 5
    229a:	0e 94 e0 07 	call	0xfc0	; 0xfc0 <TPI::send(unsigned char)>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/tpi.cpp:253

    while (!(get_sldcs(0x00) && RXDATA == 0x02)) {  /* get TPISR */
      D1PRINTF(" SKEY\r\n");
      for (uint8_t i = 0; i < (uint8_t)sizeof(nvmprog_key); i++) {
        if (!send(nvmprog_key[i])) {
          return 0;
    229e:	88 23       	and	r24, r24
    22a0:	c1 f3       	breq	.-16     	; 0x2292 <TPI::connect()+0x14a>
connect():
    22a2:	8b e3       	ldi	r24, 0x3B	; 59
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/tpi.cpp:69
  bool get_sldcs (const uint8_t _addr) {
    return (send(0x80 | _addr) && recv());
  }

  bool set_sstcs (const uint8_t _addr, const uint8_t _data) {
    return (send(0xC0 | _addr) && send(_data));
    22a4:	97 e0       	ldi	r25, 0x07	; 7
    22a6:	9f 93       	push	r25
    22a8:	8f 93       	push	r24
    22aa:	ff 92       	push	r15
    22ac:	ef 92       	push	r14
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/tpi.cpp:240
    USART::change_tpi();
    idle_clock(36);

    /*** Set TPIPCR Guard Time : 4 clock ****/
    if (!set_sstcs(0x02, 0x05)) return 0;
    D1PRINTF(" TPIPCR<05\r\n");
    22ae:	c1 d8       	rcall	.-3710   	; 0x1432 <Print::printf(PGM_t const*, ...) [clone .constprop.22]>
    22b0:	0f 90       	pop	r0
    22b2:	0f 90       	pop	r0
    22b4:	0f 90       	pop	r0
    22b6:	0f 90       	pop	r0
get_sldcs():
    22b8:	8f e8       	ldi	r24, 0x8F	; 143
    22ba:	0e 94 e0 07 	call	0xfc0	; 0xfc0 <TPI::send(unsigned char)>
    22be:	88 23       	and	r24, r24
    22c0:	d9 f3       	breq	.-10     	; 0x22b8 <TPI::connect()+0x170>
    22c2:	0e 94 d0 07 	call	0xfa0	; 0xfa0 <TPI::recv()>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/tpi.cpp:65
  }

  /*** TPI control and CSS area command ***/

  bool get_sldcs (const uint8_t _addr) {
    return (send(0x80 | _addr) && recv());
    22c6:	88 23       	and	r24, r24
    22c8:	b9 f3       	breq	.-18     	; 0x22b8 <TPI::connect()+0x170>
connect():
    22ca:	8f b3       	in	r24, 0x1f	; 31
    22cc:	80 38       	cpi	r24, 0x80	; 128
    22ce:	a1 f7       	brne	.-24     	; 0x22b8 <TPI::connect()+0x170>
    22d0:	8f b3       	in	r24, 0x1f	; 31
    22d2:	1f 92       	push	r1
    22d4:	8f 93       	push	r24
    22d6:	8d e2       	ldi	r24, 0x2D	; 45
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/tpi.cpp:243
    /*** Set TPIPCR Guard Time : 4 clock ****/
    if (!set_sstcs(0x02, 0x05)) return 0;
    D1PRINTF(" TPIPCR<05\r\n");

    /*** Check TPIIR code : Fixed 0x80 ***/
    while (!(get_sldcs(0x0F) && (RXDATA == 0x80)));
    22d8:	97 e0       	ldi	r25, 0x07	; 7
    22da:	9f 93       	push	r25
    22dc:	8f 93       	push	r24
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/tpi.cpp:244
    D1PRINTF(" TPIIR>%02X\r\n", RXDATA);
    22de:	8d e8       	ldi	r24, 0x8D	; 141
    22e0:	90 e6       	ldi	r25, 0x60	; 96
    22e2:	9f 93       	push	r25
    22e4:	8f 93       	push	r24
    22e6:	a5 d8       	rcall	.-3766   	; 0x1432 <Print::printf(PGM_t const*, ...) [clone .constprop.22]>
    22e8:	e8 9a       	sbi	0x1d, 0	; 29
    22ea:	0f 90       	pop	r0
    22ec:	0f 90       	pop	r0
    22ee:	0f 90       	pop	r0
    22f0:	0f 90       	pop	r0
    22f2:	0f 90       	pop	r0
    22f4:	0f 90       	pop	r0
    22f6:	87 e1       	ldi	r24, 0x17	; 23
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/tpi.cpp:245
    bit_set(PGCONF, PGCONF_UPDI_bp);
    22f8:	e8 2e       	mov	r14, r24
    22fa:	87 e0       	ldi	r24, 0x07	; 7
    22fc:	f8 2e       	mov	r15, r24
    22fe:	9d e8       	ldi	r25, 0x8D	; 141
    2300:	c9 2e       	mov	r12, r25
    2302:	90 e6       	ldi	r25, 0x60	; 96
    2304:	d9 2e       	mov	r13, r25
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/tpi.cpp:250

    /*** Activate NVMPROG mode ***/

    while (!(get_sldcs(0x00) && RXDATA == 0x02)) {  /* get TPISR */
      D1PRINTF(" SKEY\r\n");
    2306:	29 e3       	ldi	r18, 0x39	; 57
    2308:	a2 2e       	mov	r10, r18
    230a:	20 e6       	ldi	r18, 0x60	; 96
    230c:	b2 2e       	mov	r11, r18
get_sldcs():
    230e:	80 e8       	ldi	r24, 0x80	; 128
    2310:	0e 94 e0 07 	call	0xfc0	; 0xfc0 <TPI::send(unsigned char)>
    2314:	88 23       	and	r24, r24
    2316:	e1 f1       	breq	.+120    	; 0x2390 <TPI::connect()+0x248>
    2318:	0e 94 d0 07 	call	0xfa0	; 0xfa0 <TPI::recv()>
    231c:	88 23       	and	r24, r24
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/tpi.cpp:65
  }

  /*** TPI control and CSS area command ***/

  bool get_sldcs (const uint8_t _addr) {
    return (send(0x80 | _addr) && recv());
    231e:	c1 f1       	breq	.+112    	; 0x2390 <TPI::connect()+0x248>
connect():
    2320:	8f b3       	in	r24, 0x1f	; 31
    2322:	82 30       	cpi	r24, 0x02	; 2
    2324:	a9 f5       	brne	.+106    	; 0x2390 <TPI::connect()+0x248>
    2326:	8f b3       	in	r24, 0x1f	; 31
    2328:	1f 92       	push	r1
    232a:	8f 93       	push	r24
    232c:	8f e1       	ldi	r24, 0x1F	; 31
    232e:	97 e0       	ldi	r25, 0x07	; 7
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/tpi.cpp:249
    D1PRINTF(" TPIIR>%02X\r\n", RXDATA);
    bit_set(PGCONF, PGCONF_UPDI_bp);

    /*** Activate NVMPROG mode ***/

    while (!(get_sldcs(0x00) && RXDATA == 0x02)) {  /* get TPISR */
    2330:	9f 93       	push	r25
    2332:	8f 93       	push	r24
    2334:	8d e8       	ldi	r24, 0x8D	; 141
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/tpi.cpp:258
          return 0;
        }
        idle_clock(4);
      }
    };
    D1PRINTF(" TPISR>%02X\r\n", RXDATA);
    2336:	90 e6       	ldi	r25, 0x60	; 96
    2338:	9f 93       	push	r25
    233a:	8f 93       	push	r24
    233c:	7a d8       	rcall	.-3852   	; 0x1432 <Print::printf(PGM_t const*, ...) [clone .constprop.22]>
    233e:	19 82       	std	Y+1, r1	; 0x01
    2340:	1a 82       	std	Y+2, r1	; 0x02
    2342:	81 ec       	ldi	r24, 0xC1	; 193
    2344:	9f e3       	ldi	r25, 0x3F	; 63
    2346:	0e 94 1b 08 	call	0x1036	; 0x1036 <TPI::set_sstpr(unsigned int)>
    234a:	0f 90       	pop	r0
    234c:	0f 90       	pop	r0
    234e:	0f 90       	pop	r0
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/tpi.cpp:272
     * Other is written in 1 word chunks.
     *
     * The original PICKit4 probably does the same thing,
     * since the JTAG3 protocol does not include these notifications.
     */
    uint16_t _signature = 0;
    2350:	0f 90       	pop	r0
    2352:	0f 90       	pop	r0
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/tpi.cpp:273
    if (set_sstpr(0x3FC1) && get_sld()) {
    2354:	0f 90       	pop	r0
    2356:	88 23       	and	r24, r24
    2358:	09 f4       	brne	.+2      	; 0x235c <TPI::connect()+0x214>
    235a:	57 c0       	rjmp	.+174    	; 0x240a <TPI::connect()+0x2c2>
    235c:	0e 94 15 08 	call	0x102a	; 0x102a <TPI::get_sld()>
    2360:	88 23       	and	r24, r24
    2362:	09 f4       	brne	.+2      	; 0x2366 <TPI::connect()+0x21e>
    2364:	52 c0       	rjmp	.+164    	; 0x240a <TPI::connect()+0x2c2>
    2366:	8f b3       	in	r24, 0x1f	; 31
    2368:	8a 83       	std	Y+2, r24	; 0x02
    236a:	0e 94 15 08 	call	0x102a	; 0x102a <TPI::get_sld()>
    236e:	88 23       	and	r24, r24
    2370:	11 f0       	breq	.+4      	; 0x2376 <TPI::connect()+0x22e>
    2372:	8f b3       	in	r24, 0x1f	; 31
    2374:	89 83       	std	Y+1, r24	; 0x01
    2376:	29 81       	ldd	r18, Y+1	; 0x01
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/tpi.cpp:274
      _CAPS16(_signature)->bytes[1] = RXDATA;
    2378:	3a 81       	ldd	r19, Y+2	; 0x02
    237a:	88 e0       	ldi	r24, 0x08	; 8
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/tpi.cpp:275
      if (get_sld()) _CAPS16(_signature)->bytes[0] = RXDATA;
    237c:	2e 30       	cpi	r18, 0x0E	; 14
    237e:	f2 e9       	ldi	r31, 0x92	; 146
    2380:	3f 07       	cpc	r19, r31
    2382:	11 f1       	breq	.+68     	; 0x23c8 <TPI::connect()+0x280>
    2384:	2f 30       	cpi	r18, 0x0F	; 15
    2386:	81 e9       	ldi	r24, 0x91	; 145
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/tpi.cpp:277
    }
    _tpi_chunks = _signature == 0x920E ? 8  /* ATtiny40 */
    2388:	38 07       	cpc	r19, r24
    238a:	e9 f0       	breq	.+58     	; 0x23c6 <TPI::connect()+0x27e>
    238c:	82 e0       	ldi	r24, 0x02	; 2
    238e:	1c c0       	rjmp	.+56     	; 0x23c8 <TPI::connect()+0x280>
    2390:	ff 92       	push	r15
    2392:	ef 92       	push	r14
    2394:	df 92       	push	r13
    2396:	cf 92       	push	r12
    2398:	4c d8       	rcall	.-3944   	; 0x1432 <Print::printf(PGM_t const*, ...) [clone .constprop.22]>
    239a:	00 e3       	ldi	r16, 0x30	; 48
    239c:	10 e6       	ldi	r17, 0x60	; 96
    239e:	0f 90       	pop	r0
    23a0:	0f 90       	pop	r0
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/tpi.cpp:250
    bit_set(PGCONF, PGCONF_UPDI_bp);

    /*** Activate NVMPROG mode ***/

    while (!(get_sldcs(0x00) && RXDATA == 0x02)) {  /* get TPISR */
      D1PRINTF(" SKEY\r\n");
    23a2:	0f 90       	pop	r0
    23a4:	0f 90       	pop	r0
    23a6:	f8 01       	movw	r30, r16
    23a8:	81 91       	ld	r24, Z+
    23aa:	8f 01       	movw	r16, r30
    23ac:	0e 94 e0 07 	call	0xfc0	; 0xfc0 <TPI::send(unsigned char)>
    23b0:	88 23       	and	r24, r24
    23b2:	09 f4       	brne	.+2      	; 0x23b6 <TPI::connect()+0x26e>
    23b4:	6e cf       	rjmp	.-292    	; 0x2292 <TPI::connect()+0x14a>
    23b6:	84 e0       	ldi	r24, 0x04	; 4
    23b8:	90 e0       	ldi	r25, 0x00	; 0
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/tpi.cpp:252
      for (uint8_t i = 0; i < (uint8_t)sizeof(nvmprog_key); i++) {
        if (!send(nvmprog_key[i])) {
    23ba:	0e 94 33 08 	call	0x1066	; 0x1066 <TPI::idle_clock(unsigned int)>
    23be:	a0 16       	cp	r10, r16
    23c0:	b1 06       	cpc	r11, r17
    23c2:	89 f7       	brne	.-30     	; 0x23a6 <TPI::connect()+0x25e>
    23c4:	a4 cf       	rjmp	.-184    	; 0x230e <TPI::connect()+0x1c6>
    23c6:	84 e0       	ldi	r24, 0x04	; 4
    23c8:	80 93 9b 60 	sts	0x609B, r24	; 0x80609b <_tpi_chunks>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/tpi.cpp:255
          return 0;
        }
        idle_clock(4);
    23cc:	1f 92       	push	r1
    23ce:	8f 93       	push	r24
    23d0:	3f 93       	push	r19
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/tpi.cpp:251

    /*** Activate NVMPROG mode ***/

    while (!(get_sldcs(0x00) && RXDATA == 0x02)) {  /* get TPISR */
      D1PRINTF(" SKEY\r\n");
      for (uint8_t i = 0; i < (uint8_t)sizeof(nvmprog_key); i++) {
    23d2:	2f 93       	push	r18
    23d4:	86 e0       	ldi	r24, 0x06	; 6
    23d6:	97 e0       	ldi	r25, 0x07	; 7
    23d8:	9f 93       	push	r25
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/tpi.cpp:277
    uint16_t _signature = 0;
    if (set_sstpr(0x3FC1) && get_sld()) {
      _CAPS16(_signature)->bytes[1] = RXDATA;
      if (get_sld()) _CAPS16(_signature)->bytes[0] = RXDATA;
    }
    _tpi_chunks = _signature == 0x920E ? 8  /* ATtiny40 */
    23da:	8f 93       	push	r24
    23dc:	8d e8       	ldi	r24, 0x8D	; 141
    23de:	90 e6       	ldi	r25, 0x60	; 96
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/tpi.cpp:280
                : _signature == 0x910F ? 4  /* ATtiny20 */
                : 2;                        /* Othres   */
    D1PRINTF(" SIG>%04X:%02X\r\n", _signature, _tpi_chunks);
    23e0:	9f 93       	push	r25
    23e2:	8f 93       	push	r24
    23e4:	26 d8       	rcall	.-4020   	; 0x1432 <Print::printf(PGM_t const*, ...) [clone .constprop.22]>
    23e6:	e9 9a       	sbi	0x1d, 1	; 29
    23e8:	cd bf       	out	0x3d, r28	; 61
    23ea:	de bf       	out	0x3e, r29	; 62
    23ec:	81 e0       	ldi	r24, 0x01	; 1
    23ee:	90 e0       	ldi	r25, 0x00	; 0
    23f0:	0f 90       	pop	r0
    23f2:	0f 90       	pop	r0
    23f4:	df 91       	pop	r29
    23f6:	cf 91       	pop	r28
    23f8:	1f 91       	pop	r17
    23fa:	0f 91       	pop	r16
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/tpi.cpp:281
    bit_set(PGCONF, PGCONF_PROG_bp);
    23fc:	ff 90       	pop	r15
    23fe:	ef 90       	pop	r14
    2400:	df 90       	pop	r13
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/tpi.cpp:282
    return 1;
    2402:	cf 90       	pop	r12
    2404:	bf 90       	pop	r11
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/tpi.cpp:283
  }
    2406:	af 90       	pop	r10
    2408:	08 95       	ret
    240a:	29 81       	ldd	r18, Y+1	; 0x01
    240c:	3a 81       	ldd	r19, Y+2	; 0x02
    240e:	be cf       	rjmp	.-132    	; 0x238c <TPI::connect()+0x244>

00002410 <UPDI::disconnect()>:
disconnect():
    2410:	cf 93       	push	r28
    2412:	df 93       	push	r29
    2414:	90 e0       	ldi	r25, 0x00	; 0
    2416:	80 e0       	ldi	r24, 0x00	; 0
    2418:	0e 94 59 05 	call	0xab2	; 0xab2 <USART::drain(unsigned int)>
sys_reset():
    241c:	69 e0       	ldi	r22, 0x09	; 9
    241e:	70 e0       	ldi	r23, 0x00	; 0
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/tpi.cpp:277
    uint16_t _signature = 0;
    if (set_sstpr(0x3FC1) && get_sld()) {
      _CAPS16(_signature)->bytes[1] = RXDATA;
      if (get_sld()) _CAPS16(_signature)->bytes[0] = RXDATA;
    }
    _tpi_chunks = _signature == 0x920E ? 8  /* ATtiny40 */
    2420:	82 e7       	ldi	r24, 0x72	; 114
    2422:	90 e6       	ldi	r25, 0x60	; 96
    2424:	0e 94 d0 05 	call	0xba0	; 0xba0 <UPDI::send_bytes(unsigned char const*, unsigned int)>
disconnect():
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/updi.cpp:390
      }
    }
    return 0;
  }

  size_t disconnect (void) {
    2428:	1d ba       	out	0x1d, r1	; 29
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/updi.cpp:391
    USART::drain();
    242a:	c8 2f       	mov	r28, r24
    242c:	d0 e0       	ldi	r29, 0x00	; 0
    242e:	1f 92       	push	r1
    2430:	8f 93       	push	r24
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/updi.cpp:137
    const static uint8_t _reset[] = {
      0x55, 0xC8, 0x59, /* SYSRST */
      0x55, 0xC8, 0x00, /* SYSRUN */
      0x55, 0xC3, 0x04  /* UPDIDIS */
    };
    return send_bytes(_reset, _leave ? 9 : 6);
    2432:	86 e1       	ldi	r24, 0x16	; 22
    2434:	98 e0       	ldi	r25, 0x08	; 8
    2436:	9f 93       	push	r25
    2438:	8f 93       	push	r24
    243a:	8d e8       	ldi	r24, 0x8D	; 141
    243c:	90 e6       	ldi	r25, 0x60	; 96
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/updi.cpp:393
  }

  size_t disconnect (void) {
    USART::drain();
    bool _result = sys_reset(true);
    PGCONF = 0;
    243e:	9f 93       	push	r25
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/updi.cpp:394
    D1PRINTF(" <RST:%d>\r\n", _result);
    2440:	8f 93       	push	r24
    2442:	0e 94 19 0a 	call	0x1432	; 0x1432 <Print::printf(PGM_t const*, ...) [clone .constprop.22]>
    2446:	01 9a       	sbi	0x00, 1	; 0
    2448:	00 00       	nop
    244a:	01 98       	cbi	0x00, 1	; 0
    244c:	0f 90       	pop	r0
    244e:	0f 90       	pop	r0
    2450:	0f 90       	pop	r0
    2452:	0f 90       	pop	r0
    2454:	0f 90       	pop	r0
    2456:	0f 90       	pop	r0
    2458:	ce 01       	movw	r24, r28
    245a:	df 91       	pop	r29
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/updi.cpp:395
    openDrainWriteMacro(PIN_PGM_TRST, LOW);
    245c:	cf 91       	pop	r28
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/updi.cpp:396
    nop();
    245e:	08 95       	ret

00002460 <UPDI::connect()>:
connect():
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/updi.cpp:397
    openDrainWriteMacro(PIN_PGM_TRST, HIGH);
    2460:	cf 93       	push	r28
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/updi.cpp:398
    return _result;
    2462:	df 93       	push	r29
    2464:	80 e8       	ldi	r24, 0x80	; 128
    2466:	8d bb       	out	0x1d, r24	; 29
    2468:	10 92 ee 62 	sts	0x62EE, r1	; 0x8062ee <_sib>
    246c:	8f ef       	ldi	r24, 0xFF	; 255
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/updi.cpp:399
  }
    246e:	9f ef       	ldi	r25, 0xFF	; 255
    2470:	dc 01       	movw	r26, r24
    2472:	80 93 ea 62 	sts	0x62EA, r24	; 0x8062ea <_before_page>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/updi.cpp:336
   * For UPDI communication, first set the following:
   * - Keep forced reset for wakeup
   * - Ignore communication collisions
   * - Make guard time short enough
   */
  size_t connect (void) {
    2476:	90 93 eb 62 	sts	0x62EB, r25	; 0x8062eb <_before_page+0x1>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/updi.cpp:345
      0x55, 0xC2, 0x05, /* GTVAL[4] */
    };
    const static uint8_t _sib256[] = {
      0x55, 0xE6        /* SIB[256] */
    };
    PGCONF = PGCONF_FAIL_bm;
    247a:	a0 93 ec 62 	sts	0x62EC, r26	; 0x8062ec <_before_page+0x2>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/updi.cpp:346
    _sib[0] = 0;
    247e:	b0 93 ed 62 	sts	0x62ED, r27	; 0x8062ed <_before_page+0x3>
setup():
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/updi.cpp:347
    _before_page = -1L;
    2482:	8a e8       	ldi	r24, 0x8A	; 138
    2484:	95 e0       	ldi	r25, 0x05	; 5
    2486:	80 93 0e 63 	sts	0x630E, r24	; 0x80630e <Command_Table>
    248a:	90 93 0f 63 	sts	0x630F, r25	; 0x80630f <Command_Table+0x1>
    248e:	8a e9       	ldi	r24, 0x9A	; 154
    2490:	99 e0       	ldi	r25, 0x09	; 9
    2492:	80 93 10 63 	sts	0x6310, r24	; 0x806310 <Command_Table+0x2>
    2496:	90 93 11 63 	sts	0x6311, r25	; 0x806311 <Command_Table+0x3>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/nvmv1.cpp:68
    // else if (m_type == 0xD3)   /* MTYPE_SIB */ /* This is in its own memory space. */
    return 0;
  }

  bool setup (void) {
    Command_Table.prog_init    = &prog_init;
    249a:	8d e9       	ldi	r24, 0x9D	; 157
    249c:	99 e0       	ldi	r25, 0x09	; 9
    249e:	80 93 12 63 	sts	0x6312, r24	; 0x806312 <Command_Table+0x4>
    24a2:	90 93 13 63 	sts	0x6313, r25	; 0x806313 <Command_Table+0x5>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/nvmv1.cpp:69
    Command_Table.read_memory  = &read_memory;
    24a6:	87 e9       	ldi	r24, 0x97	; 151
    24a8:	99 e0       	ldi	r25, 0x09	; 9
    24aa:	80 93 14 63 	sts	0x6314, r24	; 0x806314 <Command_Table+0x6>
    24ae:	90 93 15 63 	sts	0x6315, r25	; 0x806315 <Command_Table+0x7>
connect():
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/nvmv1.cpp:70
    Command_Table.erase_memory = &erase_memory;
    24b2:	01 9a       	sbi	0x00, 1	; 0
    24b4:	00 00       	nop
    24b6:	80 91 d5 60 	lds	r24, 0x60D5	; 0x8060d5 <packet+0x7>
    24ba:	88 23       	and	r24, r24
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/nvmv1.cpp:71
    Command_Table.write_memory = &write_memory;
    24bc:	c9 f0       	breq	.+50     	; 0x24f0 <UPDI::connect()+0x90>
    24be:	8c e0       	ldi	r24, 0x0C	; 12
    24c0:	98 e0       	ldi	r25, 0x08	; 8
    24c2:	9f 93       	push	r25
    24c4:	8f 93       	push	r24
    24c6:	8d e8       	ldi	r24, 0x8D	; 141
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/updi.cpp:349
    NVM::V1::setup();   /* default is dummy callback */
    openDrainWriteMacro(PIN_PGM_TRST, LOW);
    24c8:	90 e6       	ldi	r25, 0x60	; 96
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/updi.cpp:350
    nop();
    24ca:	9f 93       	push	r25
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/updi.cpp:353

    /* External Reset */
    if (packet.out.bMType) {
    24cc:	8f 93       	push	r24
    24ce:	0e 94 19 0a 	call	0x1432	; 0x1432 <Print::printf(PGM_t const*, ...) [clone .constprop.22]>
power_reset():
    24d2:	ac 9a       	sbi	0x15, 4	; 21
delay_millis():
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/updi.cpp:354
      D1PRINTF("<PWRST>\r\n");
    24d4:	2f ef       	ldi	r18, 0xFF	; 255
    24d6:	34 e3       	ldi	r19, 0x34	; 52
    24d8:	8c e0       	ldi	r24, 0x0C	; 12
    24da:	21 50       	subi	r18, 0x01	; 1
    24dc:	30 40       	sbci	r19, 0x00	; 0
    24de:	80 40       	sbci	r24, 0x00	; 0
    24e0:	e1 f7       	brne	.-8      	; 0x24da <UPDI::connect()+0x7a>
    24e2:	00 c0       	rjmp	.+0      	; 0x24e4 <UPDI::connect()+0x84>
    24e4:	00 00       	nop
power_reset():
    24e6:	ac 98       	cbi	0x15, 4	; 21
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/sys.cpp:282
   * Target Reset
   */

  void power_reset (void) {
  #ifdef PIN_PGM_VPOWER
    digitalWriteMacro(PIN_PGM_VPOWER, HIGH);
    24e8:	0f 90       	pop	r0
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/modernAVR/0.2.14/cores/modernAVR/api/delay_busywait.h:42
    24ea:	0f 90       	pop	r0
    24ec:	0f 90       	pop	r0
    24ee:	0f 90       	pop	r0
connect():
    24f0:	01 98       	cbi	0x00, 1	; 0
    24f2:	90 e0       	ldi	r25, 0x00	; 0
    24f4:	80 e0       	ldi	r24, 0x00	; 0
    24f6:	0e 94 59 05 	call	0xab2	; 0xab2 <USART::drain(unsigned int)>
long_break():
    24fa:	80 91 18 60 	lds	r24, 0x6018	; 0x806018 <_xclk>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/sys.cpp:284
    delay_millis(200);
    digitalWriteMacro(PIN_PGM_VPOWER, LOW);
    24fe:	90 91 19 60 	lds	r25, 0x6019	; 0x806019 <_xclk+0x1>
    2502:	96 95       	lsr	r25
    2504:	87 95       	ror	r24
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/updi.cpp:361
  #ifdef CONFIG_HVC_ENABLE
      /* High-Voltage control */
  #endif
    }

    openDrainWriteMacro(PIN_PGM_TRST, HIGH);
    2506:	96 95       	lsr	r25
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/updi.cpp:362
    USART::drain();
    2508:	87 95       	ror	r24
    250a:	0e 94 64 05 	call	0xac8	; 0xac8 <USART::calk_baud_khz(unsigned int)>
    250e:	80 93 08 08 	sts	0x0808, r24	; 0x800808 <__TEXT_REGION_LENGTH__+0x7f0808>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/updi.cpp:66
    return false;
  }

  void long_break (void) {
    D2PRINTF("<BREAK>");
    USART0_BAUD = USART::calk_baud_khz(_xclk >> 2);
    2512:	90 93 09 08 	sts	0x0809, r25	; 0x800809 <__TEXT_REGION_LENGTH__+0x7f0809>
    2516:	80 e0       	ldi	r24, 0x00	; 0
    2518:	0e 94 bf 05 	call	0xb7e	; 0xb7e <UPDI::send(unsigned char)>
    251c:	80 91 18 60 	lds	r24, 0x6018	; 0x806018 <_xclk>
    2520:	90 91 19 60 	lds	r25, 0x6019	; 0x806019 <_xclk+0x1>
    2524:	0e 94 64 05 	call	0xac8	; 0xac8 <USART::calk_baud_khz(unsigned int)>
    2528:	80 93 08 08 	sts	0x0808, r24	; 0x800808 <__TEXT_REGION_LENGTH__+0x7f0808>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/updi.cpp:67
    send(0x00);
    252c:	90 93 09 08 	sts	0x0809, r25	; 0x800809 <__TEXT_REGION_LENGTH__+0x7f0809>
connect():
    2530:	69 e0       	ldi	r22, 0x09	; 9
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/updi.cpp:68
    USART0_BAUD = USART::calk_baud_khz(_xclk);
    2532:	70 e0       	ldi	r23, 0x00	; 0
    2534:	89 e6       	ldi	r24, 0x69	; 105
    2536:	90 e6       	ldi	r25, 0x60	; 96
    2538:	0e 94 d0 05 	call	0xba0	; 0xba0 <UPDI::send_bytes(unsigned char const*, unsigned int)>
    253c:	81 11       	cpse	r24, r1
    253e:	05 c0       	rjmp	.+10     	; 0x254a <UPDI::connect()+0xea>
    2540:	90 e0       	ldi	r25, 0x00	; 0
    2542:	80 e0       	ldi	r24, 0x00	; 0
    2544:	df 91       	pop	r29
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/updi.cpp:364
    }

    openDrainWriteMacro(PIN_PGM_TRST, HIGH);
    USART::drain();
    long_break();
    if (send_bytes(_init, sizeof(_init))) {
    2546:	cf 91       	pop	r28
    2548:	08 95       	ret
    254a:	0e 94 e3 05 	call	0xbc6	; 0xbc6 <UPDI::sys_status()>
    254e:	fc 99       	sbic	0x1f, 4	; 31
    2550:	fc cf       	rjmp	.-8      	; 0x254a <UPDI::connect()+0xea>
    2552:	8f b3       	in	r24, 0x1f	; 31
    2554:	1f 92       	push	r1
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/updi.cpp:387
          bit_set(PGCONF, PGCONF_UPDI_bp);
          return 5;
        }
      }
    }
    return 0;
    2556:	8f 93       	push	r24
    2558:	80 e0       	ldi	r24, 0x00	; 0
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/updi.cpp:388
  }
    255a:	98 e0       	ldi	r25, 0x08	; 8
    255c:	9f 93       	push	r25
    255e:	8f 93       	push	r24
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/updi.cpp:365

    openDrainWriteMacro(PIN_PGM_TRST, HIGH);
    USART::drain();
    long_break();
    if (send_bytes(_init, sizeof(_init))) {
      do { sys_status(); } while(bit_is_set(RXDATA, 4));  /* wait clear INSLEEP */
    2560:	cd e8       	ldi	r28, 0x8D	; 141
    2562:	d0 e6       	ldi	r29, 0x60	; 96
    2564:	df 93       	push	r29
    2566:	cf 93       	push	r28
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/updi.cpp:366
      D1PRINTF("<STAT:%02X>", RXDATA);
    2568:	0e 94 19 0a 	call	0x1432	; 0x1432 <Print::printf(PGM_t const*, ...) [clone .constprop.22]>
    256c:	62 e0       	ldi	r22, 0x02	; 2
    256e:	70 e0       	ldi	r23, 0x00	; 0
    2570:	87 e6       	ldi	r24, 0x67	; 103
    2572:	90 e6       	ldi	r25, 0x60	; 96
    2574:	0e 94 d0 05 	call	0xba0	; 0xba0 <UPDI::send_bytes(unsigned char const*, unsigned int)>
    2578:	0f 90       	pop	r0
    257a:	0f 90       	pop	r0
    257c:	0f 90       	pop	r0
    257e:	0f 90       	pop	r0
    2580:	0f 90       	pop	r0
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/updi.cpp:367
      if (send_bytes(_sib256, sizeof(_sib256))
    2582:	0f 90       	pop	r0
    2584:	88 23       	and	r24, r24
    2586:	e1 f2       	breq	.-72     	; 0x2540 <UPDI::connect()+0xe0>
    2588:	60 e2       	ldi	r22, 0x20	; 32
    258a:	70 e0       	ldi	r23, 0x00	; 0
    258c:	8e ee       	ldi	r24, 0xEE	; 238
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/updi.cpp:368
       && recv_bytes(_sib, 32)) {
    258e:	92 e6       	ldi	r25, 0x62	; 98
    2590:	0e 94 d5 06 	call	0xdaa	; 0xdaa <UPDI::recv_bytes(unsigned char*, unsigned int)>
    2594:	88 23       	and	r24, r24
    2596:	a1 f2       	breq	.-88     	; 0x2540 <UPDI::connect()+0xe0>
    2598:	8e ee       	ldi	r24, 0xEE	; 238
    259a:	92 e6       	ldi	r25, 0x62	; 98
    259c:	9f 93       	push	r25
    259e:	8f 93       	push	r24
    25a0:	86 ef       	ldi	r24, 0xF6	; 246
    25a2:	97 e0       	ldi	r25, 0x07	; 7
    25a4:	9f 93       	push	r25
    25a6:	8f 93       	push	r24
    25a8:	df 93       	push	r29
    25aa:	cf 93       	push	r28
    25ac:	0e 94 19 0a 	call	0x1432	; 0x1432 <Print::printf(PGM_t const*, ...) [clone .constprop.22]>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/updi.cpp:370
        size_t _result = 0;
        D1PRINTF(" SIB=%s\r\n", _sib);
    25b0:	80 91 f8 62 	lds	r24, 0x62F8	; 0x8062f8 <_sib+0xa>
    25b4:	1f 92       	push	r1
    25b6:	8f 93       	push	r24
    25b8:	88 ee       	ldi	r24, 0xE8	; 232
    25ba:	97 e0       	ldi	r25, 0x07	; 7
    25bc:	9f 93       	push	r25
    25be:	8f 93       	push	r24
    25c0:	df 93       	push	r29
    25c2:	cf 93       	push	r28
    25c4:	0e 94 19 0a 	call	0x1432	; 0x1432 <Print::printf(PGM_t const*, ...) [clone .constprop.22]>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/updi.cpp:371
        D1PRINTF(" <NVM:%02X>\r\n", _sib[10]);
    25c8:	80 91 f8 62 	lds	r24, 0x62F8	; 0x8062f8 <_sib+0xa>
    25cc:	2d b7       	in	r18, 0x3d	; 61
    25ce:	3e b7       	in	r19, 0x3e	; 62
    25d0:	24 5f       	subi	r18, 0xF4	; 244
    25d2:	3f 4f       	sbci	r19, 0xFF	; 255
    25d4:	2d bf       	out	0x3d, r18	; 61
    25d6:	3e bf       	out	0x3e, r19	; 62
    25d8:	85 33       	cpi	r24, 0x35	; 53
    25da:	59 f5       	brne	.+86     	; 0x2632 <UPDI::connect()+0x1d2>
setup():
    25dc:	8d ed       	ldi	r24, 0xDD	; 221
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/updi.cpp:373
        /* Depending on the SIB, different low-level methods are executed. */
        if      (_sib[10] == '5') _result = NVM::V5::setup();
    25de:	98 e0       	ldi	r25, 0x08	; 8
    25e0:	80 93 0e 63 	sts	0x630E, r24	; 0x80630e <Command_Table>
    25e4:	90 93 0f 63 	sts	0x630F, r25	; 0x80630f <Command_Table+0x1>
    25e8:	85 e7       	ldi	r24, 0x75	; 117
    25ea:	97 e0       	ldi	r25, 0x07	; 7
    25ec:	80 93 10 63 	sts	0x6310, r24	; 0x806310 <Command_Table+0x2>
    25f0:	90 93 11 63 	sts	0x6311, r25	; 0x806311 <Command_Table+0x3>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/nvmv5.cpp:165
    }
  }

  bool setup (void) {
    Command_Table.prog_init    = &prog_init;
    25f4:	82 ea       	ldi	r24, 0xA2	; 162
    25f6:	90 e1       	ldi	r25, 0x10	; 16
    25f8:	80 93 12 63 	sts	0x6312, r24	; 0x806312 <Command_Table+0x4>
    25fc:	90 93 13 63 	sts	0x6313, r25	; 0x806313 <Command_Table+0x5>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/nvmv5.cpp:166
    Command_Table.read_memory  = &read_memory;
    2600:	87 ef       	ldi	r24, 0xF7	; 247
    2602:	9b e0       	ldi	r25, 0x0B	; 11
    2604:	80 93 14 63 	sts	0x6314, r24	; 0x806314 <Command_Table+0x6>
    2608:	90 93 15 63 	sts	0x6315, r25	; 0x806315 <Command_Table+0x7>
connect():
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/nvmv5.cpp:167
    Command_Table.erase_memory = &erase_memory;
    260c:	80 91 ee 62 	lds	r24, 0x62EE	; 0x8062ee <_sib>
    2610:	ee ee       	ldi	r30, 0xEE	; 238
    2612:	f2 e6       	ldi	r31, 0x62	; 98
    2614:	80 32       	cpi	r24, 0x20	; 32
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/nvmv5.cpp:168
    Command_Table.write_memory = &write_memory;
    2616:	11 f4       	brne	.+4      	; 0x261c <UPDI::connect()+0x1bc>
    2618:	e2 ef       	ldi	r30, 0xF2	; 242
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/nvmv0.cpp:174

  bool setup (void) {
    Command_Table.prog_init    = &prog_init;
    Command_Table.read_memory  = &read_memory;
    Command_Table.erase_memory = &erase_memory;
    Command_Table.write_memory = &write_memory;
    261a:	f2 e6       	ldi	r31, 0x62	; 98
    261c:	84 e0       	ldi	r24, 0x04	; 4
    261e:	a5 ed       	ldi	r26, 0xD5	; 213
    2620:	b0 e6       	ldi	r27, 0x60	; 96
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/updi.cpp:381
        else if (_sib[10] == '2') _result = NVM::V2::setup();
        else if (_sib[10] == '0') _result = NVM::V0::setup();
        if (_result) {
          /* If the SIB is obtained, the first 4-characters are returned.       */
          /* If the 1st character is blank, the next 4-characters are returned. */
          memcpy(&packet.in.data[0], _sib[0] == ' ' ? &_sib[4] : &_sib[0], 4);
    2622:	01 90       	ld	r0, Z+
    2624:	0d 92       	st	X+, r0
    2626:	8a 95       	dec	r24
    2628:	e1 f7       	brne	.-8      	; 0x2622 <UPDI::connect()+0x1c2>
    262a:	e8 9a       	sbi	0x1d, 0	; 29
    262c:	85 e0       	ldi	r24, 0x05	; 5
    262e:	90 e0       	ldi	r25, 0x00	; 0
    2630:	89 cf       	rjmp	.-238    	; 0x2544 <UPDI::connect()+0xe4>
    2632:	84 33       	cpi	r24, 0x34	; 52
    2634:	a9 f4       	brne	.+42     	; 0x2660 <UPDI::connect()+0x200>
setup():
    2636:	8f ec       	ldi	r24, 0xCF	; 207
    2638:	98 e0       	ldi	r25, 0x08	; 8
    263a:	80 93 0e 63 	sts	0x630E, r24	; 0x80630e <Command_Table>
    263e:	90 93 0f 63 	sts	0x630F, r25	; 0x80630f <Command_Table+0x1>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/updi.cpp:383
          bit_set(PGCONF, PGCONF_UPDI_bp);
          return 5;
    2642:	86 e4       	ldi	r24, 0x46	; 70
    2644:	97 e0       	ldi	r25, 0x07	; 7
    2646:	80 93 10 63 	sts	0x6310, r24	; 0x806310 <Command_Table+0x2>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/updi.cpp:374
        size_t _result = 0;
        D1PRINTF(" SIB=%s\r\n", _sib);
        D1PRINTF(" <NVM:%02X>\r\n", _sib[10]);
        /* Depending on the SIB, different low-level methods are executed. */
        if      (_sib[10] == '5') _result = NVM::V5::setup();
        else if (_sib[10] == '4') _result = NVM::V4::setup();
    264a:	90 93 11 63 	sts	0x6311, r25	; 0x806311 <Command_Table+0x3>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/nvmv4.cpp:187
      return UPDI::send_bytes_block(_dwAddr, _wLength);
    }
  }

  bool setup (void) {
    Command_Table.prog_init    = &prog_init;
    264e:	8c e6       	ldi	r24, 0x6C	; 108
    2650:	90 e1       	ldi	r25, 0x10	; 16
    2652:	80 93 12 63 	sts	0x6312, r24	; 0x806312 <Command_Table+0x4>
    2656:	90 93 13 63 	sts	0x6313, r25	; 0x806313 <Command_Table+0x5>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/nvmv4.cpp:188
    Command_Table.read_memory  = &read_memory;
    265a:	87 e4       	ldi	r24, 0x47	; 71
    265c:	9c e0       	ldi	r25, 0x0C	; 12
    265e:	d2 cf       	rjmp	.-92     	; 0x2604 <UPDI::connect()+0x1a4>
connect():
    2660:	83 33       	cpi	r24, 0x33	; 51
    2662:	a9 f4       	brne	.+42     	; 0x268e <UPDI::connect()+0x22e>
setup():
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/nvmv4.cpp:189
    Command_Table.erase_memory = &erase_memory;
    2664:	85 ed       	ldi	r24, 0xD5	; 213
    2666:	98 e0       	ldi	r25, 0x08	; 8
    2668:	80 93 0e 63 	sts	0x630E, r24	; 0x80630e <Command_Table>
    266c:	90 93 0f 63 	sts	0x630F, r25	; 0x80630f <Command_Table+0x1>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/nvmv4.cpp:190
    Command_Table.write_memory = &write_memory;
    2670:	84 ea       	ldi	r24, 0xA4	; 164
    2672:	97 e0       	ldi	r25, 0x07	; 7
    2674:	80 93 10 63 	sts	0x6310, r24	; 0x806310 <Command_Table+0x2>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/updi.cpp:375
        else if (_sib[10] == '3') _result = NVM::V3::setup();
    2678:	90 93 11 63 	sts	0x6311, r25	; 0x806311 <Command_Table+0x3>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/nvmv3.cpp:162
    }
  }

  bool setup (void) {
    Command_Table.prog_init    = &prog_init;
    267c:	83 ea       	ldi	r24, 0xA3	; 163
    267e:	90 e1       	ldi	r25, 0x10	; 16
    2680:	80 93 12 63 	sts	0x6312, r24	; 0x806312 <Command_Table+0x4>
    2684:	90 93 13 63 	sts	0x6313, r25	; 0x806313 <Command_Table+0x5>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/nvmv3.cpp:163
    Command_Table.read_memory  = &read_memory;
    2688:	80 ec       	ldi	r24, 0xC0	; 192
    268a:	9c e0       	ldi	r25, 0x0C	; 12
    268c:	bb cf       	rjmp	.-138    	; 0x2604 <UPDI::connect()+0x1a4>
connect():
    268e:	82 33       	cpi	r24, 0x32	; 50
    2690:	a9 f4       	brne	.+42     	; 0x26bc <UPDI::connect()+0x25c>
setup():
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/nvmv3.cpp:164
    Command_Table.erase_memory = &erase_memory;
    2692:	83 e7       	ldi	r24, 0x73	; 115
    2694:	99 e0       	ldi	r25, 0x09	; 9
    2696:	80 93 0e 63 	sts	0x630E, r24	; 0x80630e <Command_Table>
    269a:	90 93 0f 63 	sts	0x630F, r25	; 0x80630f <Command_Table+0x1>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/nvmv3.cpp:165
    Command_Table.write_memory = &write_memory;
    269e:	86 e7       	ldi	r24, 0x76	; 118
    26a0:	97 e0       	ldi	r25, 0x07	; 7
    26a2:	80 93 10 63 	sts	0x6310, r24	; 0x806310 <Command_Table+0x2>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/updi.cpp:376
        else if (_sib[10] == '2') _result = NVM::V2::setup();
    26a6:	90 93 11 63 	sts	0x6311, r25	; 0x806311 <Command_Table+0x3>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/nvmv2.cpp:184
      return UPDI::send_bytes_block(_dwAddr, _wLength);
    }
  }

  bool setup (void) {
    Command_Table.prog_init    = &prog_init;
    26aa:	82 e8       	ldi	r24, 0x82	; 130
    26ac:	90 e1       	ldi	r25, 0x10	; 16
    26ae:	80 93 12 63 	sts	0x6312, r24	; 0x806312 <Command_Table+0x4>
    26b2:	90 93 13 63 	sts	0x6313, r25	; 0x806313 <Command_Table+0x5>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/nvmv2.cpp:185
    Command_Table.read_memory  = &read_memory;
    26b6:	80 e1       	ldi	r24, 0x10	; 16
    26b8:	9d e0       	ldi	r25, 0x0D	; 13
    26ba:	a4 cf       	rjmp	.-184    	; 0x2604 <UPDI::connect()+0x1a4>
connect():
    26bc:	80 33       	cpi	r24, 0x30	; 48
    26be:	09 f0       	breq	.+2      	; 0x26c2 <UPDI::connect()+0x262>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/nvmv2.cpp:186
    Command_Table.erase_memory = &erase_memory;
    26c0:	3f cf       	rjmp	.-386    	; 0x2540 <UPDI::connect()+0xe0>
setup():
    26c2:	82 e5       	ldi	r24, 0x52	; 82
    26c4:	99 e0       	ldi	r25, 0x09	; 9
    26c6:	80 93 0e 63 	sts	0x630E, r24	; 0x80630e <Command_Table>
    26ca:	90 93 0f 63 	sts	0x630F, r25	; 0x80630f <Command_Table+0x1>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/nvmv2.cpp:187
    Command_Table.write_memory = &write_memory;
    26ce:	85 ea       	ldi	r24, 0xA5	; 165
    26d0:	97 e0       	ldi	r25, 0x07	; 7
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/updi.cpp:377
        else if (_sib[10] == '0') _result = NVM::V0::setup();
    26d2:	80 93 10 63 	sts	0x6310, r24	; 0x806310 <Command_Table+0x2>
    26d6:	90 93 11 63 	sts	0x6311, r25	; 0x806311 <Command_Table+0x3>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/nvmv0.cpp:171
      return UPDI::send_bytes_block(_wAddr, _wLength);
    }
  }

  bool setup (void) {
    Command_Table.prog_init    = &prog_init;
    26da:	88 e9       	ldi	r24, 0x98	; 152
    26dc:	90 e1       	ldi	r25, 0x10	; 16
    26de:	80 93 12 63 	sts	0x6312, r24	; 0x806312 <Command_Table+0x4>
    26e2:	90 93 13 63 	sts	0x6313, r25	; 0x806313 <Command_Table+0x5>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/nvmv0.cpp:172
    Command_Table.read_memory  = &read_memory;
    26e6:	89 e8       	ldi	r24, 0x89	; 137
    26e8:	9d e0       	ldi	r25, 0x0D	; 13
    26ea:	8c cf       	rjmp	.-232    	; 0x2604 <UPDI::connect()+0x1a4>

000026ec <TPI::write_memory()>:
write_memory():
    26ec:	6f 92       	push	r6
    26ee:	7f 92       	push	r7
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/nvmv0.cpp:173
    Command_Table.erase_memory = &erase_memory;
    26f0:	8f 92       	push	r8
    26f2:	9f 92       	push	r9
    26f4:	af 92       	push	r10
    26f6:	bf 92       	push	r11
    26f8:	cf 92       	push	r12
    26fa:	df 92       	push	r13
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/nvmv0.cpp:174
    Command_Table.write_memory = &write_memory;
    26fc:	ef 92       	push	r14
    26fe:	ff 92       	push	r15
    2700:	0f 93       	push	r16
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/tpi.cpp:152
      ++_cnt;
    }
    return _wLength + 1;
  }

  size_t write_memory (void) {
    2702:	1f 93       	push	r17
    2704:	cf 93       	push	r28
    2706:	df 93       	push	r29
    2708:	20 91 d4 60 	lds	r18, 0x60D4	; 0x8060d4 <packet+0x6>
bswap16():
    270c:	c0 90 d8 60 	lds	r12, 0x60D8	; 0x8060d8 <packet+0xa>
    2710:	d0 90 d9 60 	lds	r13, 0x60D9	; 0x8060d9 <packet+0xb>
    2714:	dc 24       	eor	r13, r12
    2716:	cd 24       	eor	r12, r13
    2718:	dc 24       	eor	r13, r12
    271a:	00 91 da 60 	lds	r16, 0x60DA	; 0x8060da <packet+0xc>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/tpi.cpp:153
    uint8_t   m_type = packet.out.tpi.read.bMType;
    271e:	10 91 db 60 	lds	r17, 0x60DB	; 0x8060db <packet+0xd>
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/modernAVR/0.2.14/cores/modernAVR/api/cpp/btools.cpp:45
//
// Byte convert
//

uint16_t bswap16 (uint16_t _word) {
  return __builtin_bswap16(_word);
    2722:	10 27       	eor	r17, r16
    2724:	01 27       	eor	r16, r17
    2726:	10 27       	eor	r17, r16
write_memory():
    2728:	60 90 9b 60 	lds	r6, 0x609B	; 0x80609b <_tpi_chunks>
    272c:	86 2c       	mov	r8, r6
    272e:	91 2c       	mov	r9, r1
    2730:	c4 01       	movw	r24, r8
    2732:	01 97       	sbiw	r24, 0x01	; 1
    2734:	cc ed       	ldi	r28, 0xDC	; 220
    2736:	d0 e6       	ldi	r29, 0x60	; 96
    2738:	3f ef       	ldi	r19, 0xFF	; 255
    273a:	ac 01       	movw	r20, r24
    273c:	4c 21       	and	r20, r12
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/tpi.cpp:161
    uint8_t *_p = &packet.out.tpi.write.memData[0];
    bool _result = true;

    /* To accommodate older host programs, */
    /* the address must be aligned to the top of the page. */
    while (_dwAddr & (_tpi_chunks - 1)) {
    273e:	5d 21       	and	r21, r13
    2740:	45 2b       	or	r20, r21
    2742:	71 f4       	brne	.+28     	; 0x2760 <TPI::write_memory()+0x74>
    2744:	3f ef       	ldi	r19, 0xFF	; 255
    2746:	7c 01       	movw	r14, r24
    2748:	e0 22       	and	r14, r16
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/tpi.cpp:156

  size_t write_memory (void) {
    uint8_t   m_type = packet.out.tpi.read.bMType;
    uint16_t _dwAddr = bswap16(_CAPS32(packet.out.tpi.write.dwAddr)->words[1]);
    size_t  _wLength = bswap16(packet.out.tpi.write.wLength);
    uint8_t *_p = &packet.out.tpi.write.memData[0];
    274a:	f1 22       	and	r15, r17
    274c:	e1 14       	cp	r14, r1
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/tpi.cpp:164
    /* To accommodate older host programs, */
    /* the address must be aligned to the top of the page. */
    while (_dwAddr & (_tpi_chunks - 1)) {
      _dwAddr--;
      _wLength++;
      *--_p = 0xFF;   /* NAND masked dummy bytes */
    274e:	f1 04       	cpc	r15, r1
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/tpi.cpp:161
    uint8_t *_p = &packet.out.tpi.write.memData[0];
    bool _result = true;

    /* To accommodate older host programs, */
    /* the address must be aligned to the top of the page. */
    while (_dwAddr & (_tpi_chunks - 1)) {
    2750:	71 f0       	breq	.+28     	; 0x276e <TPI::write_memory()+0x82>
    2752:	f8 01       	movw	r30, r16
    2754:	ec 0d       	add	r30, r12
    2756:	fd 1d       	adc	r31, r13
    2758:	30 83       	st	Z, r19
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/tpi.cpp:167
      _dwAddr--;
      _wLength++;
      *--_p = 0xFF;   /* NAND masked dummy bytes */
    }
    while (_wLength & (_tpi_chunks - 1)) {
      *((uint8_t*)(_dwAddr + _wLength++)) = 0xFF;
    275a:	0f 5f       	subi	r16, 0xFF	; 255
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/tpi.cpp:166
    while (_dwAddr & (_tpi_chunks - 1)) {
      _dwAddr--;
      _wLength++;
      *--_p = 0xFF;   /* NAND masked dummy bytes */
    }
    while (_wLength & (_tpi_chunks - 1)) {
    275c:	1f 4f       	sbci	r17, 0xFF	; 255
    275e:	f3 cf       	rjmp	.-26     	; 0x2746 <TPI::write_memory()+0x5a>
    2760:	41 e0       	ldi	r20, 0x01	; 1
    2762:	c4 1a       	sub	r12, r20
    2764:	d1 08       	sbc	r13, r1
    2766:	0f 5f       	subi	r16, 0xFF	; 255
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/tpi.cpp:167
      *((uint8_t*)(_dwAddr + _wLength++)) = 0xFF;
    2768:	1f 4f       	sbci	r17, 0xFF	; 255
    276a:	3a 93       	st	-Y, r19
    276c:	e6 cf       	rjmp	.-52     	; 0x273a <TPI::write_memory()+0x4e>
    276e:	21 30       	cpi	r18, 0x01	; 1
    2770:	49 f5       	brne	.+82     	; 0x27c4 <TPI::write_memory()+0xd8>
    2772:	0e 94 fd 07 	call	0xffa	; 0xffa <TPI::nvm_wait()>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/tpi.cpp:162
    bool _result = true;

    /* To accommodate older host programs, */
    /* the address must be aligned to the top of the page. */
    while (_dwAddr & (_tpi_chunks - 1)) {
      _dwAddr--;
    2776:	78 2e       	mov	r7, r24
    2778:	88 23       	and	r24, r24
    277a:	21 f0       	breq	.+8      	; 0x2784 <TPI::write_memory()+0x98>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/tpi.cpp:163
      _wLength++;
    277c:	c6 01       	movw	r24, r12
    277e:	0e 94 1b 08 	call	0x1036	; 0x1036 <TPI::set_sstpr(unsigned int)>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/tpi.cpp:164
      *--_p = 0xFF;   /* NAND masked dummy bytes */
    2782:	78 2e       	mov	r7, r24
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/tpi.cpp:174
    D2PRINTF(" FIXED_WRITE=%08X:%04X\r\n", _dwAddr, _wLength);

    /* For the flash code area, the page erase can be */
    /* omitted if the chip has already been erased.   */
    /* 0x01: XPRG_MEM_TYPE_APPL */
    if (m_type != 0x01) {
    2784:	b1 2c       	mov	r11, r1
    2786:	a1 2c       	mov	r10, r1
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/tpi.cpp:185
        && set_sst(0xFF)
        && nvm_wait()
        && nvm_ctrl(0x00);
      if (!_result) return 0;
    }
    _result &= nvm_wait() && set_sstpr(_dwAddr);
    2788:	a0 16       	cp	r10, r16
    278a:	b1 06       	cpc	r11, r17
    278c:	08 f0       	brcs	.+2      	; 0x2790 <TPI::write_memory()+0xa4>
    278e:	8a c0       	rjmp	.+276    	; 0x28a4 <TPI::write_memory()+0x1b8>
    2790:	8d e1       	ldi	r24, 0x1D	; 29
    2792:	0e 94 f1 07 	call	0xfe2	; 0xfe2 <TPI::nvm_ctrl(unsigned char)>
    2796:	88 23       	and	r24, r24
    2798:	31 f0       	breq	.+12     	; 0x27a6 <TPI::write_memory()+0xba>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/tpi.cpp:156

  size_t write_memory (void) {
    uint8_t   m_type = packet.out.tpi.read.bMType;
    uint16_t _dwAddr = bswap16(_CAPS32(packet.out.tpi.write.dwAddr)->words[1]);
    size_t  _wLength = bswap16(packet.out.tpi.write.wLength);
    uint8_t *_p = &packet.out.tpi.write.memData[0];
    279a:	88 81       	ld	r24, Y
    279c:	0e 94 09 08 	call	0x1012	; 0x1012 <TPI::set_sst(unsigned char)>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/tpi.cpp:187
        && nvm_ctrl(0x00);
      if (!_result) return 0;
    }
    _result &= nvm_wait() && set_sstpr(_dwAddr);
    /* WRITE_PAGE */
    for (size_t _i = 0; _i < _wLength; _i += _tpi_chunks) {
    27a0:	81 11       	cpse	r24, r1
    27a2:	3d c0       	rjmp	.+122    	; 0x281e <TPI::write_memory()+0x132>
    27a4:	21 96       	adiw	r28, 0x01	; 1
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/tpi.cpp:189
      D2PRINTF(" CODE_WRITE=%08X:%04X\r\n", _dwAddr, _tpi_chunks);
      _result &= nvm_ctrl(0x1D)
    27a6:	78 22       	and	r7, r24
    27a8:	94 e0       	ldi	r25, 0x04	; 4
    27aa:	69 12       	cpse	r6, r25
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/tpi.cpp:191
              && set_sst(*_p++)
              && set_sst(*_p++);
    27ac:	51 c0       	rjmp	.+162    	; 0x2850 <TPI::write_memory()+0x164>
    27ae:	8c e0       	ldi	r24, 0x0C	; 12
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/tpi.cpp:190
    _result &= nvm_wait() && set_sstpr(_dwAddr);
    /* WRITE_PAGE */
    for (size_t _i = 0; _i < _wLength; _i += _tpi_chunks) {
      D2PRINTF(" CODE_WRITE=%08X:%04X\r\n", _dwAddr, _tpi_chunks);
      _result &= nvm_ctrl(0x1D)
              && set_sst(*_p++)
    27b0:	90 e0       	ldi	r25, 0x00	; 0
    27b2:	0e 94 33 08 	call	0x1066	; 0x1066 <TPI::idle_clock(unsigned int)>
    27b6:	88 81       	ld	r24, Y
    27b8:	0e 94 09 08 	call	0x1012	; 0x1012 <TPI::set_sst(unsigned char)>
    27bc:	81 11       	cpse	r24, r1
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/tpi.cpp:192
              && set_sst(*_p++);
      if (_tpi_chunks == 4) {
    27be:	38 c0       	rjmp	.+112    	; 0x2830 <TPI::write_memory()+0x144>
    27c0:	21 96       	adiw	r28, 0x01	; 1
    27c2:	3e c0       	rjmp	.+124    	; 0x2840 <TPI::write_memory()+0x154>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/tpi.cpp:193
        idle_clock(12);
    27c4:	0e 94 fd 07 	call	0xffa	; 0xffa <TPI::nvm_wait()>
    27c8:	88 23       	and	r24, r24
    27ca:	c9 f0       	breq	.+50     	; 0x27fe <TPI::write_memory()+0x112>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/tpi.cpp:194
        _result &= set_sst(*_p++) && set_sst(*_p++);
    27cc:	c6 01       	movw	r24, r12
    27ce:	81 60       	ori	r24, 0x01	; 1
    27d0:	0e 94 1b 08 	call	0x1036	; 0x1036 <TPI::set_sstpr(unsigned int)>
    27d4:	88 23       	and	r24, r24
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/tpi.cpp:200
      }
      if (_tpi_chunks == 8) {
        idle_clock(12);
        _result &= set_sst(*_p++) && set_sst(*_p++);
        idle_clock(12);
        _result &= set_sst(*_p++) && set_sst(*_p++);
    27d6:	99 f0       	breq	.+38     	; 0x27fe <TPI::write_memory()+0x112>
    27d8:	84 e1       	ldi	r24, 0x14	; 20
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/tpi.cpp:177
    /* omitted if the chip has already been erased.   */
    /* 0x01: XPRG_MEM_TYPE_APPL */
    if (m_type != 0x01) {
      /* SECTION_ERASE */
      D2PRINTF(" SECTION_ERASE=%04X>%04X\r\n", _dwAddr | 1, _CAPS16(_before_page)->word);
      _result &= nvm_wait()
    27da:	0e 94 f1 07 	call	0xfe2	; 0xfe2 <TPI::nvm_ctrl(unsigned char)>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/tpi.cpp:182
        && set_sstpr(_dwAddr | 1)
        && nvm_ctrl(0x14)
        && set_sst(0xFF)
        && nvm_wait()
        && nvm_ctrl(0x00);
    27de:	88 23       	and	r24, r24
    27e0:	71 f0       	breq	.+28     	; 0x27fe <TPI::write_memory()+0x112>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/tpi.cpp:178
    /* 0x01: XPRG_MEM_TYPE_APPL */
    if (m_type != 0x01) {
      /* SECTION_ERASE */
      D2PRINTF(" SECTION_ERASE=%04X>%04X\r\n", _dwAddr | 1, _CAPS16(_before_page)->word);
      _result &= nvm_wait()
        && set_sstpr(_dwAddr | 1)
    27e2:	8f ef       	ldi	r24, 0xFF	; 255
    27e4:	0e 94 09 08 	call	0x1012	; 0x1012 <TPI::set_sst(unsigned char)>
    27e8:	88 23       	and	r24, r24
    27ea:	49 f0       	breq	.+18     	; 0x27fe <TPI::write_memory()+0x112>
    27ec:	0e 94 fd 07 	call	0xffa	; 0xffa <TPI::nvm_wait()>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/tpi.cpp:179
        && nvm_ctrl(0x14)
    27f0:	88 23       	and	r24, r24
    27f2:	29 f0       	breq	.+10     	; 0x27fe <TPI::write_memory()+0x112>
    27f4:	80 e0       	ldi	r24, 0x00	; 0
    27f6:	0e 94 f1 07 	call	0xfe2	; 0xfe2 <TPI::nvm_ctrl(unsigned char)>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/tpi.cpp:180
        && set_sst(0xFF)
    27fa:	81 11       	cpse	r24, r1
    27fc:	ba cf       	rjmp	.-140    	; 0x2772 <TPI::write_memory()+0x86>
    27fe:	c7 01       	movw	r24, r14
    2800:	df 91       	pop	r29
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/tpi.cpp:181
        && nvm_wait()
    2802:	cf 91       	pop	r28
    2804:	1f 91       	pop	r17
    2806:	0f 91       	pop	r16
    2808:	ff 90       	pop	r15
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/tpi.cpp:182
        && nvm_ctrl(0x00);
    280a:	ef 90       	pop	r14
    280c:	df 90       	pop	r13
    280e:	cf 90       	pop	r12
    2810:	bf 90       	pop	r11
    2812:	af 90       	pop	r10
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/tpi.cpp:207
      _result &= nvm_wait();
      if (!_result) return 0;
      _dwAddr += _tpi_chunks;
    }
    return nvm_ctrl(0x00);
  }
    2814:	9f 90       	pop	r9
    2816:	8f 90       	pop	r8
    2818:	7f 90       	pop	r7
    281a:	6f 90       	pop	r6
    281c:	08 95       	ret
    281e:	6e 01       	movw	r12, r28
    2820:	82 e0       	ldi	r24, 0x02	; 2
    2822:	c8 0e       	add	r12, r24
    2824:	d1 1c       	adc	r13, r1
    2826:	89 81       	ldd	r24, Y+1	; 0x01
    2828:	0e 94 09 08 	call	0x1012	; 0x1012 <TPI::set_sst(unsigned char)>
    282c:	e6 01       	movw	r28, r12
    282e:	bb cf       	rjmp	.-138    	; 0x27a6 <TPI::write_memory()+0xba>
    2830:	6e 01       	movw	r12, r28
    2832:	e2 e0       	ldi	r30, 0x02	; 2
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/tpi.cpp:191
    /* WRITE_PAGE */
    for (size_t _i = 0; _i < _wLength; _i += _tpi_chunks) {
      D2PRINTF(" CODE_WRITE=%08X:%04X\r\n", _dwAddr, _tpi_chunks);
      _result &= nvm_ctrl(0x1D)
              && set_sst(*_p++)
              && set_sst(*_p++);
    2834:	ce 0e       	add	r12, r30
    2836:	d1 1c       	adc	r13, r1
    2838:	89 81       	ldd	r24, Y+1	; 0x01
    283a:	0e 94 09 08 	call	0x1012	; 0x1012 <TPI::set_sst(unsigned char)>
    283e:	e6 01       	movw	r28, r12
    2840:	78 22       	and	r7, r24
    2842:	0e 94 fd 07 	call	0xffa	; 0xffa <TPI::nvm_wait()>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/tpi.cpp:194
      if (_tpi_chunks == 4) {
        idle_clock(12);
        _result &= set_sst(*_p++) && set_sst(*_p++);
    2846:	78 22       	and	r7, r24
    2848:	d1 f2       	breq	.-76     	; 0x27fe <TPI::write_memory()+0x112>
    284a:	a8 0c       	add	r10, r8
    284c:	b9 1c       	adc	r11, r9
    284e:	9c cf       	rjmp	.-200    	; 0x2788 <TPI::write_memory()+0x9c>
    2850:	f8 e0       	ldi	r31, 0x08	; 8
    2852:	6f 12       	cpse	r6, r31
    2854:	f6 cf       	rjmp	.-20     	; 0x2842 <TPI::write_memory()+0x156>
    2856:	8c e0       	ldi	r24, 0x0C	; 12
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/tpi.cpp:202
        idle_clock(12);
        _result &= set_sst(*_p++) && set_sst(*_p++);
        idle_clock(12);
        _result &= set_sst(*_p++) && set_sst(*_p++);
      }
      _result &= nvm_wait();
    2858:	90 e0       	ldi	r25, 0x00	; 0
    285a:	0e 94 33 08 	call	0x1066	; 0x1066 <TPI::idle_clock(unsigned int)>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/tpi.cpp:203
      if (!_result) return 0;
    285e:	88 81       	ld	r24, Y
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/tpi.cpp:187
        && nvm_ctrl(0x00);
      if (!_result) return 0;
    }
    _result &= nvm_wait() && set_sstpr(_dwAddr);
    /* WRITE_PAGE */
    for (size_t _i = 0; _i < _wLength; _i += _tpi_chunks) {
    2860:	0e 94 09 08 	call	0x1012	; 0x1012 <TPI::set_sst(unsigned char)>
    2864:	6e 01       	movw	r12, r28
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/tpi.cpp:196
              && set_sst(*_p++);
      if (_tpi_chunks == 4) {
        idle_clock(12);
        _result &= set_sst(*_p++) && set_sst(*_p++);
      }
      if (_tpi_chunks == 8) {
    2866:	81 11       	cpse	r24, r1
    2868:	16 c0       	rjmp	.+44     	; 0x2896 <TPI::write_memory()+0x1aa>
    286a:	4f ef       	ldi	r20, 0xFF	; 255
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/tpi.cpp:197
        idle_clock(12);
    286c:	c4 1a       	sub	r12, r20
    286e:	d4 0a       	sbc	r13, r20
    2870:	78 22       	and	r7, r24
    2872:	8c e0       	ldi	r24, 0x0C	; 12
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/tpi.cpp:198
        _result &= set_sst(*_p++) && set_sst(*_p++);
    2874:	90 e0       	ldi	r25, 0x00	; 0
    2876:	0e 94 33 08 	call	0x1066	; 0x1066 <TPI::idle_clock(unsigned int)>
    287a:	f6 01       	movw	r30, r12
    287c:	80 81       	ld	r24, Z
    287e:	0e 94 09 08 	call	0x1012	; 0x1012 <TPI::set_sst(unsigned char)>
    2882:	e6 01       	movw	r28, r12
    2884:	88 23       	and	r24, r24
    2886:	09 f4       	brne	.+2      	; 0x288a <TPI::write_memory()+0x19e>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/tpi.cpp:199
        idle_clock(12);
    2888:	9b cf       	rjmp	.-202    	; 0x27c0 <TPI::write_memory()+0xd4>
    288a:	22 96       	adiw	r28, 0x02	; 2
    288c:	f6 01       	movw	r30, r12
    288e:	81 81       	ldd	r24, Z+1	; 0x01
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/tpi.cpp:200
        _result &= set_sst(*_p++) && set_sst(*_p++);
    2890:	0e 94 09 08 	call	0x1012	; 0x1012 <TPI::set_sst(unsigned char)>
    2894:	d5 cf       	rjmp	.-86     	; 0x2840 <TPI::write_memory()+0x154>
    2896:	82 e0       	ldi	r24, 0x02	; 2
    2898:	c8 0e       	add	r12, r24
    289a:	d1 1c       	adc	r13, r1
    289c:	89 81       	ldd	r24, Y+1	; 0x01
    289e:	0e 94 09 08 	call	0x1012	; 0x1012 <TPI::set_sst(unsigned char)>
    28a2:	e6 cf       	rjmp	.-52     	; 0x2870 <TPI::write_memory()+0x184>
    28a4:	80 e0       	ldi	r24, 0x00	; 0
    28a6:	0e 94 f1 07 	call	0xfe2	; 0xfe2 <TPI::nvm_ctrl(unsigned char)>
    28aa:	e8 2e       	mov	r14, r24
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/tpi.cpp:198
        idle_clock(12);
        _result &= set_sst(*_p++) && set_sst(*_p++);
      }
      if (_tpi_chunks == 8) {
        idle_clock(12);
        _result &= set_sst(*_p++) && set_sst(*_p++);
    28ac:	f1 2c       	mov	r15, r1
    28ae:	a7 cf       	rjmp	.-178    	; 0x27fe <TPI::write_memory()+0x112>

000028b0 <TPI::read_memory()>:
read_memory():
    28b0:	0f 93       	push	r16
    28b2:	1f 93       	push	r17
    28b4:	cf 93       	push	r28
    28b6:	df 93       	push	r29
bswap16():
    28b8:	80 91 d7 60 	lds	r24, 0x60D7	; 0x8060d7 <packet+0x9>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/tpi.cpp:206
      }
      _result &= nvm_wait();
      if (!_result) return 0;
      _dwAddr += _tpi_chunks;
    }
    return nvm_ctrl(0x00);
    28bc:	90 91 d8 60 	lds	r25, 0x60D8	; 0x8060d8 <packet+0xa>
    28c0:	c0 91 d9 60 	lds	r28, 0x60D9	; 0x8060d9 <packet+0xb>
    28c4:	d0 91 da 60 	lds	r29, 0x60DA	; 0x8060da <packet+0xc>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/tpi.cpp:136
        }
    }
    return 0;
  }

  size_t read_memory (void) {
    28c8:	dc 27       	eor	r29, r28
    28ca:	cd 27       	eor	r28, r29
    28cc:	dc 27       	eor	r29, r28
read_memory():
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/modernAVR/0.2.14/cores/modernAVR/api/cpp/btools.cpp:45
    28ce:	98 27       	eor	r25, r24
    28d0:	89 27       	eor	r24, r25
    28d2:	98 27       	eor	r25, r24
    28d4:	0e 94 1b 08 	call	0x1036	; 0x1036 <TPI::set_sstpr(unsigned int)>
    28d8:	0e ec       	ldi	r16, 0xCE	; 206
    28da:	10 e6       	ldi	r17, 0x60	; 96
    28dc:	c8 01       	movw	r24, r16
    28de:	8e 5c       	subi	r24, 0xCE	; 206
    28e0:	90 46       	sbci	r25, 0x60	; 96
    28e2:	8c 17       	cp	r24, r28
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/tpi.cpp:143
    uint16_t _dwAddr = bswap16(_CAPS32(packet.out.tpi.read.dwAddr)->words[1]);
    size_t  _wLength = bswap16(packet.out.tpi.read.wLength);
    uint8_t *_q = &packet.in.data[0];
    size_t _cnt = 0;
    D2PRINTF(" READ=%08X:%04X\r\n", _dwAddr, _wLength);
    set_sstpr(_dwAddr);
    28e4:	9d 07       	cpc	r25, r29
    28e6:	50 f4       	brcc	.+20     	; 0x28fc <TPI::read_memory()+0x4c>
    28e8:	0e 94 15 08 	call	0x102a	; 0x102a <TPI::get_sld()>
    28ec:	0f 5f       	subi	r16, 0xFF	; 255
    28ee:	1f 4f       	sbci	r17, 0xFF	; 255
    28f0:	88 23       	and	r24, r24
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/tpi.cpp:144
    while (_cnt < _wLength) {
    28f2:	59 f0       	breq	.+22     	; 0x290a <TPI::read_memory()+0x5a>
    28f4:	8f b3       	in	r24, 0x1f	; 31
    28f6:	f8 01       	movw	r30, r16
    28f8:	86 83       	std	Z+6, r24	; 0x06
    28fa:	f0 cf       	rjmp	.-32     	; 0x28dc <TPI::read_memory()+0x2c>
    28fc:	ce 01       	movw	r24, r28
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/tpi.cpp:145
      if (!get_sld()) return 0;
    28fe:	01 96       	adiw	r24, 0x01	; 1
    2900:	df 91       	pop	r29
    2902:	cf 91       	pop	r28
    2904:	1f 91       	pop	r17
    2906:	0f 91       	pop	r16
    2908:	08 95       	ret
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/tpi.cpp:146
      *_q++ = RXDATA;
    290a:	90 e0       	ldi	r25, 0x00	; 0
    290c:	80 e0       	ldi	r24, 0x00	; 0
    290e:	f8 cf       	rjmp	.-16     	; 0x2900 <TPI::read_memory()+0x50>

00002910 <TPI::erase_memory()>:
erase_memory():
    2910:	cf 93       	push	r28
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/tpi.cpp:149
      ++_cnt;
    }
    return _wLength + 1;
    2912:	df 93       	push	r29
bswap16():
    2914:	c0 91 d7 60 	lds	r28, 0x60D7	; 0x8060d7 <packet+0x9>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/tpi.cpp:150
  }
    2918:	d0 91 d8 60 	lds	r29, 0x60D8	; 0x8060d8 <packet+0xa>
    291c:	dc 27       	eor	r29, r28
    291e:	cd 27       	eor	r28, r29
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/tpi.cpp:145
    uint8_t *_q = &packet.in.data[0];
    size_t _cnt = 0;
    D2PRINTF(" READ=%08X:%04X\r\n", _dwAddr, _wLength);
    set_sstpr(_dwAddr);
    while (_cnt < _wLength) {
      if (!get_sld()) return 0;
    2920:	dc 27       	eor	r29, r28
erase_memory():
    2922:	80 91 d4 60 	lds	r24, 0x60D4	; 0x8060d4 <packet+0x6>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/tpi.cpp:103

  bool nvm_ctrl (const uint8_t _nvmcmd) {
    return set_sout(0x63, _nvmcmd);   /* NVMCMD_REG: IO=0x33 */
  }

  size_t erase_memory (void) {
    2926:	81 30       	cpi	r24, 0x01	; 1
    2928:	99 f5       	brne	.+102    	; 0x2990 <TPI::erase_memory()+0x80>
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/modernAVR/0.2.14/cores/modernAVR/api/cpp/btools.cpp:45
    292a:	df 93       	push	r29
    292c:	cf 93       	push	r28
    292e:	85 ed       	ldi	r24, 0xD5	; 213
    2930:	96 e0       	ldi	r25, 0x06	; 6
    2932:	9f 93       	push	r25
    2934:	8f 93       	push	r24
    2936:	8d e8       	ldi	r24, 0x8D	; 141
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/tpi.cpp:106
    uint8_t   m_type = packet.out.tpi.read.bMType;
    uint16_t _dwAddr = bswap16(_CAPS32(packet.out.tpi.read.dwAddr)->words[1]);
    if (m_type == 0x01) {
    2938:	90 e6       	ldi	r25, 0x60	; 96
    293a:	9f 93       	push	r25
    293c:	8f 93       	push	r24
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/tpi.cpp:108
      /* XPRG_ERASE_CHIP */
      D1PRINTF(" CHIP_ERASE=%04X\r\n", _dwAddr);
    293e:	0e 94 19 0a 	call	0x1432	; 0x1432 <Print::printf(PGM_t const*, ...) [clone .constprop.22]>
    2942:	0e 94 fd 07 	call	0xffa	; 0xffa <TPI::nvm_wait()>
    2946:	0f 90       	pop	r0
    2948:	0f 90       	pop	r0
    294a:	0f 90       	pop	r0
    294c:	0f 90       	pop	r0
    294e:	0f 90       	pop	r0
    2950:	0f 90       	pop	r0
    2952:	81 11       	cpse	r24, r1
    2954:	05 c0       	rjmp	.+10     	; 0x2960 <TPI::erase_memory()+0x50>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/tpi.cpp:109
      if (nvm_wait()
    2956:	90 e0       	ldi	r25, 0x00	; 0
    2958:	80 e0       	ldi	r24, 0x00	; 0
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/tpi.cpp:114
        && set_sstpr(_dwAddr)
        && nvm_ctrl(0x10)
        && set_sst(0xFF)
        && nvm_wait()
        && nvm_ctrl(0x00)) {
    295a:	df 91       	pop	r29
    295c:	cf 91       	pop	r28
    295e:	08 95       	ret
    2960:	ce 01       	movw	r24, r28
    2962:	0e 94 1b 08 	call	0x1036	; 0x1036 <TPI::set_sstpr(unsigned int)>
    2966:	88 23       	and	r24, r24
    2968:	b1 f3       	breq	.-20     	; 0x2956 <TPI::erase_memory()+0x46>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/tpi.cpp:133
        && nvm_wait()
        && nvm_ctrl(0x00)) {
          return 1;
        }
    }
    return 0;
    296a:	80 e1       	ldi	r24, 0x10	; 16
    296c:	0e 94 f1 07 	call	0xfe2	; 0xfe2 <TPI::nvm_ctrl(unsigned char)>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/tpi.cpp:134
  }
    2970:	88 23       	and	r24, r24
    2972:	89 f3       	breq	.-30     	; 0x2956 <TPI::erase_memory()+0x46>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/tpi.cpp:110
    uint16_t _dwAddr = bswap16(_CAPS32(packet.out.tpi.read.dwAddr)->words[1]);
    if (m_type == 0x01) {
      /* XPRG_ERASE_CHIP */
      D1PRINTF(" CHIP_ERASE=%04X\r\n", _dwAddr);
      if (nvm_wait()
        && set_sstpr(_dwAddr)
    2974:	8f ef       	ldi	r24, 0xFF	; 255
    2976:	0e 94 09 08 	call	0x1012	; 0x1012 <TPI::set_sst(unsigned char)>
    297a:	88 23       	and	r24, r24
    297c:	61 f3       	breq	.-40     	; 0x2956 <TPI::erase_memory()+0x46>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/tpi.cpp:111
        && nvm_ctrl(0x10)
    297e:	0e 94 fd 07 	call	0xffa	; 0xffa <TPI::nvm_wait()>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/tpi.cpp:126
      /* Currently not called on AVRDUDE<=8.0. */
      /* It may be called from terminal mode.  */
      D1PRINTF(" SECTION_ERASE=%04X\r\n", _dwAddr);
      if (nvm_wait()
        && set_sstpr(_dwAddr)
        && nvm_ctrl(0x14)
    2982:	88 23       	and	r24, r24
    2984:	41 f3       	breq	.-48     	; 0x2956 <TPI::erase_memory()+0x46>
    2986:	80 e0       	ldi	r24, 0x00	; 0
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/tpi.cpp:127
        && set_sst(0xFF)
    2988:	0e 94 f1 07 	call	0xfe2	; 0xfe2 <TPI::nvm_ctrl(unsigned char)>
    298c:	90 e0       	ldi	r25, 0x00	; 0
    298e:	e5 cf       	rjmp	.-54     	; 0x295a <TPI::erase_memory()+0x4a>
    2990:	df 93       	push	r29
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/tpi.cpp:128
        && nvm_wait()
    2992:	cf 93       	push	r28
    2994:	8f eb       	ldi	r24, 0xBF	; 191
    2996:	96 e0       	ldi	r25, 0x06	; 6
    2998:	9f 93       	push	r25
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/tpi.cpp:129
        && nvm_ctrl(0x00)) {
    299a:	8f 93       	push	r24
    299c:	8d e8       	ldi	r24, 0x8D	; 141
    299e:	90 e6       	ldi	r25, 0x60	; 96
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/tpi.cpp:133
          return 1;
        }
    }
    return 0;
    29a0:	9f 93       	push	r25
    29a2:	8f 93       	push	r24
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/tpi.cpp:123
    else {
      /* 0x02: XPRG_ERASE_APP */
      /* 0x09: XPRG_ERASE_CONFIG */
      /* Currently not called on AVRDUDE<=8.0. */
      /* It may be called from terminal mode.  */
      D1PRINTF(" SECTION_ERASE=%04X\r\n", _dwAddr);
    29a4:	0e 94 19 0a 	call	0x1432	; 0x1432 <Print::printf(PGM_t const*, ...) [clone .constprop.22]>
    29a8:	0e 94 fd 07 	call	0xffa	; 0xffa <TPI::nvm_wait()>
    29ac:	0f 90       	pop	r0
    29ae:	0f 90       	pop	r0
    29b0:	0f 90       	pop	r0
    29b2:	0f 90       	pop	r0
    29b4:	0f 90       	pop	r0
    29b6:	0f 90       	pop	r0
    29b8:	88 23       	and	r24, r24
    29ba:	69 f2       	breq	.-102    	; 0x2956 <TPI::erase_memory()+0x46>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/tpi.cpp:124
      if (nvm_wait()
    29bc:	ce 01       	movw	r24, r28
    29be:	0e 94 1b 08 	call	0x1036	; 0x1036 <TPI::set_sstpr(unsigned int)>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/tpi.cpp:129
        && set_sstpr(_dwAddr)
        && nvm_ctrl(0x14)
        && set_sst(0xFF)
        && nvm_wait()
        && nvm_ctrl(0x00)) {
    29c2:	88 23       	and	r24, r24
    29c4:	41 f2       	breq	.-112    	; 0x2956 <TPI::erase_memory()+0x46>
    29c6:	84 e1       	ldi	r24, 0x14	; 20
    29c8:	d1 cf       	rjmp	.-94     	; 0x296c <TPI::erase_memory()+0x5c>

000029ca <__vector_19>:
__vector_19():
    29ca:	1f 92       	push	r1
    29cc:	0f 92       	push	r0
    29ce:	0f b6       	in	r0, 0x3f	; 63
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/tpi.cpp:125
      /* 0x09: XPRG_ERASE_CONFIG */
      /* Currently not called on AVRDUDE<=8.0. */
      /* It may be called from terminal mode.  */
      D1PRINTF(" SECTION_ERASE=%04X\r\n", _dwAddr);
      if (nvm_wait()
        && set_sstpr(_dwAddr)
    29d0:	0f 92       	push	r0
    29d2:	11 24       	eor	r1, r1
    29d4:	2f 93       	push	r18
    29d6:	3f 93       	push	r19
    29d8:	4f 93       	push	r20
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/tpi.cpp:126
        && nvm_ctrl(0x14)
    29da:	5f 93       	push	r21
    29dc:	6f 93       	push	r22
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/usart.cpp:224
  }

};

/*** CMSIS-DAP VCOM,VCP transceiver ***/
ISR(USART0_RXC_vect) {
    29de:	7f 93       	push	r23
    29e0:	8f 93       	push	r24
    29e2:	9f 93       	push	r25
    29e4:	af 93       	push	r26
    29e6:	bf 93       	push	r27
    29e8:	cf 93       	push	r28
    29ea:	ef 93       	push	r30
    29ec:	ff 93       	push	r31
vcp_receiver():
    29ee:	c0 91 01 08 	lds	r28, 0x0801	; 0x800801 <__TEXT_REGION_LENGTH__+0x7f0801>
    29f2:	20 91 00 08 	lds	r18, 0x0800	; 0x800800 <__TEXT_REGION_LENGTH__+0x7f0800>
    29f6:	8c 2f       	mov	r24, r28
    29f8:	86 74       	andi	r24, 0x46	; 70
    29fa:	a9 f4       	brne	.+42     	; 0x2a26 <__vector_19+0x5c>
write_byte():
    29fc:	e2 99       	sbic	0x1c, 2	; 28
    29fe:	28 c0       	rjmp	.+80     	; 0x2a50 <__vector_19+0x86>
__vector_19():
    2a00:	8e ea       	ldi	r24, 0xAE	; 174
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/usb.cpp:471
  void read_drop (void) {
    if (bit_is_set(EP_CDO.STATUS, USB_BUSNAK_bp)) ep_cdo_listen();
  }

  void vcp_receiver (void) {
    uint8_t _d = USART0_RXDATAH;
    2a02:	93 e6       	ldi	r25, 0x63	; 99
write_byte():
    2a04:	e0 91 31 64 	lds	r30, 0x6431	; 0x806431 <_send_count>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/usb.cpp:472
    uint8_t _c = USART0_RXDATAL;
    2a08:	31 e0       	ldi	r19, 0x01	; 1
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/usb.cpp:473
    if (!(_d & (USART_BUFOVF_bm | USART_FERR_bm | USART_PERR_bm))) {
    2a0a:	3e 0f       	add	r19, r30
    2a0c:	30 93 31 64 	sts	0x6431, r19	; 0x806431 <_send_count>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/usb.cpp:435
  }

  void write_byte (const uint8_t _c) {
    /* The double buffer consists of two blocks. */
    uint8_t* _buf = bit_is_set(GPCONF, GPCONF_DBL_bp)
      ? &EP_MEM.cdi_data[64]
    2a10:	e8 0f       	add	r30, r24
    2a12:	f9 2f       	mov	r31, r25
    2a14:	f1 1d       	adc	r31, r1
    2a16:	20 83       	st	Z, r18
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/usb.cpp:437
      : &EP_MEM.cdi_data[0];
    _buf[_send_count++] = _c;
    2a18:	80 91 31 64 	lds	r24, 0x6431	; 0x806431 <_send_count>
    2a1c:	80 34       	cpi	r24, 0x40	; 64
    2a1e:	d8 f4       	brcc	.+54     	; 0x2a56 <__vector_19+0x8c>
    2a20:	8e e1       	ldi	r24, 0x1E	; 30
    2a22:	80 93 2e 64 	sts	0x642E, r24	; 0x80642e <_sof_count>
vcp_receiver():
    2a26:	8e b3       	in	r24, 0x1e	; 30
    2a28:	c8 2b       	or	r28, r24
    2a2a:	ce bb       	out	0x1e, r28	; 30
__vector_19():
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/usb.cpp:438
    if (_send_count < 64) _sof_count = 30;
    2a2c:	ff 91       	pop	r31
    2a2e:	ef 91       	pop	r30
    2a30:	cf 91       	pop	r28
    2a32:	bf 91       	pop	r27
    2a34:	af 91       	pop	r26
    2a36:	9f 91       	pop	r25
    2a38:	8f 91       	pop	r24
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/usb.cpp:476
    uint8_t _d = USART0_RXDATAH;
    uint8_t _c = USART0_RXDATAL;
    if (!(_d & (USART_BUFOVF_bm | USART_FERR_bm | USART_PERR_bm))) {
      write_byte(_c);
    }
    RXSTAT |= _d;
    2a3a:	7f 91       	pop	r23
    2a3c:	6f 91       	pop	r22
    2a3e:	5f 91       	pop	r21
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/usart.cpp:230
#if defined(CONFIG_VCP_9BIT_SUPPORT)
  usart_receiver();
#else
  USB::vcp_receiver();
#endif
}
    2a40:	4f 91       	pop	r20
    2a42:	3f 91       	pop	r19
    2a44:	2f 91       	pop	r18
    2a46:	0f 90       	pop	r0
    2a48:	0f be       	out	0x3f, r0	; 63
    2a4a:	0f 90       	pop	r0
    2a4c:	1f 90       	pop	r1
    2a4e:	18 95       	reti
    2a50:	8e ee       	ldi	r24, 0xEE	; 238
    2a52:	93 e6       	ldi	r25, 0x63	; 99
    2a54:	d7 cf       	rjmp	.-82     	; 0x2a04 <__vector_19+0x3a>
write_byte():
    2a56:	0e 94 0d 05 	call	0xa1a	; 0xa1a <USB::ep_cdi_listen()>
    2a5a:	e5 cf       	rjmp	.-54     	; 0x2a26 <__vector_19+0x5c>

00002a5c <__vector_15>:
__vector_15():
    2a5c:	11 24       	eor	r1, r1
    2a5e:	8d b7       	in	r24, 0x3d	; 61
    2a60:	9e b7       	in	r25, 0x3e	; 62
    2a62:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <__TEXT_REGION_LENGTH__+0x7f014c>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/usb.cpp:435
  }

  void write_byte (const uint8_t _c) {
    /* The double buffer consists of two blocks. */
    uint8_t* _buf = bit_is_set(GPCONF, GPCONF_DBL_bp)
      ? &EP_MEM.cdi_data[64]
    2a66:	90 93 4d 01 	sts	0x014D, r25	; 0x80014d <__TEXT_REGION_LENGTH__+0x7f014d>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/usb.cpp:439
      : &EP_MEM.cdi_data[0];
    _buf[_send_count++] = _c;
    if (_send_count < 64) _sof_count = 30;
    else ep_cdi_listen();
    2a6a:	10 92 00 0b 	sts	0x0B00, r1	; 0x800b00 <__TEXT_REGION_LENGTH__+0x7f0b00>
    2a6e:	81 e0       	ldi	r24, 0x01	; 1
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/timeout.cpp:102
ISR(TCB0_INT_vect, ISR_NAKED) {
  /***
    This interrupt is a global escape due to timeout.
    There is no return to the source of the interrupt.
  ***/
  __asm__ __volatile__ ("EOR R1,R1");
    2a70:	80 93 06 0b 	sts	0x0B06, r24	; 0x800b06 <__TEXT_REGION_LENGTH__+0x7f0b06>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/timeout.cpp:104
#if defined(DEBUG)
  RTC_CMP = SP;
    2a74:	62 e0       	ldi	r22, 0x02	; 2
    2a76:	70 e0       	ldi	r23, 0x00	; 0
    2a78:	8e e7       	ldi	r24, 0x7E	; 126
    2a7a:	94 e6       	ldi	r25, 0x64	; 100
    2a7c:	0e 94 5d 21 	call	0x42ba	; 0x42ba <longjmp>

00002a80 <Timeout::stop()>:
_ZN7Timeout4stopEv():
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/timeout.cpp:106
#endif
  TCB0_CTRLA = 0;
    2a80:	8f b7       	in	r24, 0x3f	; 63
__iCliRetVal():
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/timeout.cpp:107
  TCB0_INTFLAGS = TCB_CAPT_bm;
    2a82:	f8 94       	cli
_ZN7Timeout4stopEv():
    2a84:	10 92 00 0b 	sts	0x0B00, r1	; 0x800b00 <__TEXT_REGION_LENGTH__+0x7f0b00>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/timeout.cpp:108
  longjmp(TIMEOUT_CONTEXT, 2);
    2a88:	91 e0       	ldi	r25, 0x01	; 1
    2a8a:	90 93 06 0b 	sts	0x0B06, r25	; 0x800b06 <__TEXT_REGION_LENGTH__+0x7f0b06>
__iRestore():
    2a8e:	8f bf       	out	0x3f, r24	; 63
_ZN7Timeout4stopEv():
    2a90:	18 95       	reti

00002a92 <Timeout::command(unsigned int (*)(), unsigned int) [clone .constprop.17]>:
command():
    2a92:	0f 93       	push	r16
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/timeout.cpp:53
   * Exit from the timeout block.
   * The last RETI is required.
   */
  __attribute__((used, naked, noinline))
  void stop (void) {
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    2a94:	1f 93       	push	r17
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/tools/avr-gcc/7.3.0-avr8-gnu-toolchain/avr/include/util/atomic.h:50
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    2a96:	cf 93       	push	r28
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/timeout.cpp:54
      TCB0_CTRLA = 0;
    2a98:	df 93       	push	r29
    2a9a:	00 d0       	rcall	.+0      	; 0x2a9c <Timeout::command(unsigned int (*)(), unsigned int) [clone .constprop.17]+0xa>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/timeout.cpp:55
      TCB0_INTFLAGS = TCB_CAPT_bm;
    2a9c:	00 d0       	rcall	.+0      	; 0x2a9e <Timeout::command(unsigned int (*)(), unsigned int) [clone .constprop.17]+0xc>
    2a9e:	cd b7       	in	r28, 0x3d	; 61
    2aa0:	de b7       	in	r29, 0x3e	; 62
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/tools/avr-gcc/7.3.0-avr8-gnu-toolchain/avr/include/util/atomic.h:70
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    2aa2:	8b 83       	std	Y+3, r24	; 0x03
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/timeout.cpp:57
    }
    reti();
    2aa4:	9c 83       	std	Y+4, r25	; 0x04
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/timeout.cpp:74
  /*
   * Timeout block.
   * Does not work with interrupts disabled.
   * RETI must be called after the interrupt is suspended.
   */
  size_t command (size_t (*func_p)(void), uint16_t _ms) {
    2aa6:	19 82       	std	Y+1, r1	; 0x01
    2aa8:	1a 82       	std	Y+2, r1	; 0x02
    2aaa:	8e e7       	ldi	r24, 0x7E	; 126
    2aac:	94 e6       	ldi	r25, 0x64	; 100
    2aae:	0e 94 3d 21 	call	0x427a	; 0x427a <setjmp>
    2ab2:	89 2b       	or	r24, r25
    2ab4:	31 f5       	brne	.+76     	; 0x2b02 <Timeout::command(unsigned int (*)(), unsigned int) [clone .constprop.17]+0x70>
start():
    2ab6:	9f b7       	in	r25, 0x3f	; 63
__iCliRetVal():
    2ab8:	f8 94       	cli
start():
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/timeout.cpp:75
    volatile size_t _result = 0;
    2aba:	10 92 0a 0b 	sts	0x0B0A, r1	; 0x800b0a <__TEXT_REGION_LENGTH__+0x7f0b0a>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/timeout.cpp:76
    if (setjmp(TIMEOUT_CONTEXT) == 0) {
    2abe:	10 92 0b 0b 	sts	0x0B0B, r1	; 0x800b0b <__TEXT_REGION_LENGTH__+0x7f0b0b>
    2ac2:	20 e2       	ldi	r18, 0x20	; 32
    2ac4:	33 e0       	ldi	r19, 0x03	; 3
    2ac6:	20 93 0c 0b 	sts	0x0B0C, r18	; 0x800b0c <__TEXT_REGION_LENGTH__+0x7f0b0c>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/timeout.cpp:38
  /*
   * Timeout after the specified time.
   * To be precise, in 1/1024 sec units.
   */
  void start (uint16_t _ms) {
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    2aca:	30 93 0d 0b 	sts	0x0B0D, r19	; 0x800b0d <__TEXT_REGION_LENGTH__+0x7f0b0d>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/timeout.cpp:39
      TCB0_CNT = 0;
    2ace:	81 e0       	ldi	r24, 0x01	; 1
    2ad0:	80 93 05 0b 	sts	0x0B05, r24	; 0x800b05 <__TEXT_REGION_LENGTH__+0x7f0b05>
    2ad4:	80 93 06 0b 	sts	0x0B06, r24	; 0x800b06 <__TEXT_REGION_LENGTH__+0x7f0b06>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/timeout.cpp:40
      TCB0_CCMP = _ms;
    2ad8:	8f e0       	ldi	r24, 0x0F	; 15
    2ada:	80 93 00 0b 	sts	0x0B00, r24	; 0x800b00 <__TEXT_REGION_LENGTH__+0x7f0b00>
__iRestore():
    2ade:	9f bf       	out	0x3f, r25	; 63
command():
    2ae0:	eb 81       	ldd	r30, Y+3	; 0x03
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/timeout.cpp:41
      TCB0_INTCTRL = TCB_CAPT_bm;
    2ae2:	fc 81       	ldd	r31, Y+4	; 0x04
    2ae4:	09 95       	icall
    2ae6:	89 83       	std	Y+1, r24	; 0x01
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/timeout.cpp:42
      TCB0_INTFLAGS = TCB_CAPT_bm;
    2ae8:	9a 83       	std	Y+2, r25	; 0x02
    2aea:	ef 98       	cbi	0x1d, 7	; 29
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/timeout.cpp:43
      TCB0_CTRLA = TCB_ENABLE_bm | TCB_CLKSEL_EVENT_gc; /* for EVSYS_USERTCB0COUNT */
    2aec:	c9 df       	rcall	.-110    	; 0x2a80 <Timeout::stop()>
    2aee:	89 81       	ldd	r24, Y+1	; 0x01
    2af0:	9a 81       	ldd	r25, Y+2	; 0x02
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/tools/avr-gcc/7.3.0-avr8-gnu-toolchain/avr/include/util/atomic.h:70
    2af2:	24 96       	adiw	r28, 0x04	; 4
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/timeout.cpp:78
   */
  size_t command (size_t (*func_p)(void), uint16_t _ms) {
    volatile size_t _result = 0;
    if (setjmp(TIMEOUT_CONTEXT) == 0) {
      Timeout::start(_ms);
      _result = (*func_p)();
    2af4:	cd bf       	out	0x3d, r28	; 61
    2af6:	de bf       	out	0x3e, r29	; 62
    2af8:	df 91       	pop	r29
    2afa:	cf 91       	pop	r28
    2afc:	1f 91       	pop	r17
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/timeout.cpp:79
      bit_clear(PGCONF, PGCONF_FAIL_bp);
    2afe:	0f 91       	pop	r16
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/timeout.cpp:87
      /* Stack dump. */
      /* An unused register is borrowed to store the SP. */
      D1PRINTF("\r\n!TIMEOUT:%04X>", RTC_CMP);
      D1PRINTHEX((const void*)(RTC_CMP + 1), 16);
    }
    Timeout::stop();
    2b00:	08 95       	ret
    2b02:	0c e4       	ldi	r16, 0x4C	; 76
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/timeout.cpp:88
    return _result;
    2b04:	11 e0       	ldi	r17, 0x01	; 1
    2b06:	f8 01       	movw	r30, r16
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/timeout.cpp:89
  }
    2b08:	80 81       	ld	r24, Z
    2b0a:	91 81       	ldd	r25, Z+1	; 0x01
    2b0c:	9f 93       	push	r25
    2b0e:	8f 93       	push	r24
    2b10:	80 ec       	ldi	r24, 0xC0	; 192
    2b12:	98 e0       	ldi	r25, 0x08	; 8
    2b14:	9f 93       	push	r25
    2b16:	8f 93       	push	r24
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/timeout.cpp:84
      bit_clear(PGCONF, PGCONF_FAIL_bp);
    }
    else {
      /* Stack dump. */
      /* An unused register is borrowed to store the SP. */
      D1PRINTF("\r\n!TIMEOUT:%04X>", RTC_CMP);
    2b18:	8d e8       	ldi	r24, 0x8D	; 141
    2b1a:	90 e6       	ldi	r25, 0x60	; 96
    2b1c:	9f 93       	push	r25
    2b1e:	8f 93       	push	r24
    2b20:	0e 94 19 0a 	call	0x1432	; 0x1432 <Print::printf(PGM_t const*, ...) [clone .constprop.22]>
    2b24:	0f 90       	pop	r0
    2b26:	0f 90       	pop	r0
    2b28:	0f 90       	pop	r0
    2b2a:	0f 90       	pop	r0
    2b2c:	0f 90       	pop	r0
    2b2e:	0f 90       	pop	r0
    2b30:	f8 01       	movw	r30, r16
    2b32:	80 81       	ld	r24, Z
    2b34:	91 81       	ldd	r25, Z+1	; 0x01
    2b36:	60 e1       	ldi	r22, 0x10	; 16
    2b38:	70 e0       	ldi	r23, 0x00	; 0
    2b3a:	01 96       	adiw	r24, 0x01	; 1
    2b3c:	0e 94 a7 09 	call	0x134e	; 0x134e <Print::printHex(void const*, unsigned int, char, unsigned int, char const*) [clone .constprop.19]>
    2b40:	0e 94 0d 0a 	call	0x141a	; 0x141a <Print::ln()>
    2b44:	d3 cf       	rjmp	.-90     	; 0x2aec <Timeout::command(unsigned int (*)(), unsigned int) [clone .constprop.17]+0x5a>

00002b46 <__vector_6>:
__vector_6():
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/timeout.cpp:85
      D1PRINTHEX((const void*)(RTC_CMP + 1), 16);
    2b46:	1f 92       	push	r1
    2b48:	0f 92       	push	r0
    2b4a:	0f b6       	in	r0, 0x3f	; 63
    2b4c:	0f 92       	push	r0
    2b4e:	11 24       	eor	r1, r1
    2b50:	8f 93       	push	r24
    2b52:	8f ef       	ldi	r24, 0xFF	; 255
    2b54:	80 93 c7 01 	sts	0x01C7, r24	; 0x8001c7 <__TEXT_REGION_LENGTH__+0x7f01c7>
    2b58:	e7 9a       	sbi	0x1c, 7	; 28
    2b5a:	8f 91       	pop	r24
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/sys.cpp:414
  /* SW0 Raising Interrupt */
  vportRegister(PIN_SYS_SW0).INTFLAGS = ~0;
  bit_set(GPCONF, GPCONF_RIS_bp);
}

ISR(CCL_CCL_vect) {
    2b5c:	0f 90       	pop	r0
    2b5e:	0f be       	out	0x3f, r0	; 63
    2b60:	0f 90       	pop	r0
    2b62:	1f 90       	pop	r1
    2b64:	18 95       	reti

00002b66 <__vector_24>:
__vector_24():
    2b66:	1f 92       	push	r1
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/sys.cpp:416
  /* SW0 Falling Intrrupt from CCL2 */
  CCL_INTFLAGS = ~0;
    2b68:	0f 92       	push	r0
    2b6a:	0f b6       	in	r0, 0x3f	; 63
    2b6c:	0f 92       	push	r0
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/sys.cpp:417
  bit_set(GPCONF, GPCONF_FAL_bp);
    2b6e:	11 24       	eor	r1, r1
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/sys.cpp:418
}
    2b70:	8f 93       	push	r24
    2b72:	8f ef       	ldi	r24, 0xFF	; 255
    2b74:	87 bb       	out	0x17, r24	; 23
    2b76:	e6 9a       	sbi	0x1c, 6	; 28
    2b78:	8f 91       	pop	r24
    2b7a:	0f 90       	pop	r0
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/sys.cpp:408

};

#if defined(PIN_SYS_SW0)
/* If the level is not maintained for a sufficient period of time it will not function properly. */
ISR(portIntrruptVector(PIN_SYS_SW0)) {
    2b7c:	0f be       	out	0x3f, r0	; 63
    2b7e:	0f 90       	pop	r0
    2b80:	1f 90       	pop	r1
    2b82:	18 95       	reti

00002b84 <_GLOBAL__sub_I_Serial0A>:
_ZN14UsartBaseClassC2EP12USART_struct():
    2b84:	ed e8       	ldi	r30, 0x8D	; 141
    2b86:	f0 e6       	ldi	r31, 0x60	; 96
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/sys.cpp:410
  /* SW0 Raising Interrupt */
  vportRegister(PIN_SYS_SW0).INTFLAGS = ~0;
    2b88:	80 e2       	ldi	r24, 0x20	; 32
    2b8a:	98 e0       	ldi	r25, 0x08	; 8
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/sys.cpp:411
  bit_set(GPCONF, GPCONF_RIS_bp);
    2b8c:	82 83       	std	Z+2, r24	; 0x02
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/sys.cpp:412
}
    2b8e:	93 83       	std	Z+3, r25	; 0x03
_ZN14HarfUART_ClassC2EP12USART_structPK14UART_portmux_t():
    2b90:	8f e7       	ldi	r24, 0x7F	; 127
    2b92:	90 e6       	ldi	r25, 0x60	; 96
    2b94:	80 83       	st	Z, r24
    2b96:	91 83       	std	Z+1, r25	; 0x01
    2b98:	86 eb       	ldi	r24, 0xB6	; 182
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/modernAVR/0.2.14/cores/modernAVR/api/HarfUART.h:28
private:
  const UART_portmux_t* portmux;

public:
  inline HarfUART_Class (USART_t* _usart, const UART_portmux_t* _portmux) :
    UsartBaseClass(_usart), portmux(_portmux) {}
    2b9a:	98 e0       	ldi	r25, 0x08	; 8
    2b9c:	85 83       	std	Z+5, r24	; 0x05
    2b9e:	96 83       	std	Z+6, r25	; 0x06
_GLOBAL__sub_I_Serial0A():
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/modernAVR/0.2.14/cores/modernAVR/api/cpp/Portmux_USART.cpp:69
HarfUART_Class Serial1B {&USART1, &_portmux_usart1b};
#endif

#ifdef _PORTMUX_USART1C
const UART_portmux_t PROGMEM _portmux_usart1c = _PORTMUX_USART1C;
HarfUART_Class Serial1C {&USART1, &_portmux_usart1c};
    2ba0:	08 95       	ret

00002ba2 <main>:
main():
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/main.cpp:83
} /* NAMELESS */;

__attribute__((used, naked, section(".init3")))
void setup_mcu (void) { initVariant(); }

int main (void) {
    2ba2:	cf 93       	push	r28
    2ba4:	df 93       	push	r29
    2ba6:	cd b7       	in	r28, 0x3d	; 61
    2ba8:	de b7       	in	r29, 0x3e	; 62
    2baa:	25 97       	sbiw	r28, 0x05	; 5
    2bac:	cd bf       	out	0x3d, r28	; 61
    2bae:	de bf       	out	0x3e, r29	; 62
initiate():
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/modernAVR/0.2.14/cores/modernAVR/api/cpp/HarfUART.cpp:26
  uint8_t _baud2x = 0;
  if (_baudrate <= 63) {
    _baud2x = 1;
    _usart_ctrl_b = USART_RXEN_bm | USART_TXEN_bm | USART_RXMODE_CLK2X_gc;
  }
  const UART_portmux_t* _mux = portmux;
    2bb0:	80 91 92 60 	lds	r24, 0x6092	; 0x806092 <Serial1C+0x5>
    2bb4:	90 91 93 60 	lds	r25, 0x6093	; 0x806093 <Serial1C+0x6>
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/modernAVR/0.2.14/cores/modernAVR/api/cpp/HarfUART.cpp:27
  register8_t *_portmux = (register8_t*)pgm_read_ptr(&_mux->portmux_reg);
    2bb8:	fc 01       	movw	r30, r24
    2bba:	a5 91       	lpm	r26, Z+
    2bbc:	b4 91       	lpm	r27, Z
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/modernAVR/0.2.14/cores/modernAVR/api/cpp/HarfUART.cpp:28
  *_portmux = (*_portmux & pgm_read_byte(&_mux->portmux_mask))
    2bbe:	2c 91       	ld	r18, X
    2bc0:	fc 01       	movw	r30, r24
    2bc2:	32 96       	adiw	r30, 0x02	; 2
    2bc4:	34 91       	lpm	r19, Z
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/modernAVR/0.2.14/cores/modernAVR/api/cpp/HarfUART.cpp:29
                         | pgm_read_byte(&_mux->portmux_set);
    2bc6:	31 96       	adiw	r30, 0x01	; 1
    2bc8:	e4 91       	lpm	r30, Z
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/modernAVR/0.2.14/cores/modernAVR/api/cpp/HarfUART.cpp:28
    _baud2x = 1;
    _usart_ctrl_b = USART_RXEN_bm | USART_TXEN_bm | USART_RXMODE_CLK2X_gc;
  }
  const UART_portmux_t* _mux = portmux;
  register8_t *_portmux = (register8_t*)pgm_read_ptr(&_mux->portmux_reg);
  *_portmux = (*_portmux & pgm_read_byte(&_mux->portmux_mask))
    2bca:	23 23       	and	r18, r19
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/modernAVR/0.2.14/cores/modernAVR/api/cpp/HarfUART.cpp:29
                         | pgm_read_byte(&_mux->portmux_set);
    2bcc:	2e 2b       	or	r18, r30
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/modernAVR/0.2.14/cores/modernAVR/api/cpp/HarfUART.cpp:28
    _baud2x = 1;
    _usart_ctrl_b = USART_RXEN_bm | USART_TXEN_bm | USART_RXMODE_CLK2X_gc;
  }
  const UART_portmux_t* _mux = portmux;
  register8_t *_portmux = (register8_t*)pgm_read_ptr(&_mux->portmux_reg);
  *_portmux = (*_portmux & pgm_read_byte(&_mux->portmux_mask))
    2bce:	2c 93       	st	X, r18
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/modernAVR/0.2.14/cores/modernAVR/api/cpp/HarfUART.cpp:30
                         | pgm_read_byte(&_mux->portmux_set);
  PORT_t *_port = pgm_read_ptr(&_mux->port_reg);
    2bd0:	fc 01       	movw	r30, r24
    2bd2:	34 96       	adiw	r30, 0x04	; 4
    2bd4:	a5 91       	lpm	r26, Z+
    2bd6:	b4 91       	lpm	r27, Z
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/modernAVR/0.2.14/cores/modernAVR/api/cpp/HarfUART.cpp:31
  _port->DIRSET = pgm_read_byte(&_mux->tx_pin);
    2bd8:	fc 01       	movw	r30, r24
    2bda:	36 96       	adiw	r30, 0x06	; 6
    2bdc:	e4 91       	lpm	r30, Z
    2bde:	11 96       	adiw	r26, 0x01	; 1
    2be0:	ec 93       	st	X, r30
    2be2:	11 97       	sbiw	r26, 0x01	; 1
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/modernAVR/0.2.14/cores/modernAVR/api/cpp/HarfUART.cpp:32
  _port->DIRCLR = pgm_read_byte(&_mux->rx_pin);
    2be4:	fc 01       	movw	r30, r24
    2be6:	37 96       	adiw	r30, 0x07	; 7
    2be8:	e4 91       	lpm	r30, Z
    2bea:	12 96       	adiw	r26, 0x02	; 2
    2bec:	ec 93       	st	X, r30
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/modernAVR/0.2.14/cores/modernAVR/api/cpp/HarfUART.cpp:33
  (*(register8_t*)pgm_read_ptr(&_mux->rx_pin_ctrl)) = PORT_PULLUPEN_bm
    2bee:	fc 01       	movw	r30, r24
    2bf0:	38 96       	adiw	r30, 0x08	; 8
    2bf2:	a5 91       	lpm	r26, Z+
    2bf4:	b4 91       	lpm	r27, Z
    2bf6:	18 e0       	ldi	r17, 0x08	; 8
    2bf8:	1c 93       	st	X, r17
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/modernAVR/0.2.14/cores/modernAVR/api/cpp/HarfUART.cpp:35
                                                    | PORT_ISC_INTDISABLE_gc;
  USART_t* _usart = usart;
    2bfa:	e0 91 8f 60 	lds	r30, 0x608F	; 0x80608f <Serial1C+0x2>
    2bfe:	f0 91 90 60 	lds	r31, 0x6090	; 0x806090 <Serial1C+0x3>
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/modernAVR/0.2.14/cores/modernAVR/api/cpp/HarfUART.cpp:36
  _usart->BAUD = (_baudrate << _baud2x);
    2c02:	80 ea       	ldi	r24, 0xA0	; 160
    2c04:	90 e0       	ldi	r25, 0x00	; 0
    2c06:	80 87       	std	Z+8, r24	; 0x08
    2c08:	91 87       	std	Z+9, r25	; 0x09
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/modernAVR/0.2.14/cores/modernAVR/api/cpp/HarfUART.cpp:37
  _usart->CTRLA = 0;
    2c0a:	15 82       	std	Z+5, r1	; 0x05
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/modernAVR/0.2.14/cores/modernAVR/api/cpp/HarfUART.cpp:38
  _usart->CTRLC = USART_CHSIZE_8BIT_gc
    2c0c:	03 e0       	ldi	r16, 0x03	; 3
    2c0e:	07 83       	std	Z+7, r16	; 0x07
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/modernAVR/0.2.14/cores/modernAVR/api/cpp/HarfUART.cpp:42
                | USART_PMODE_DISABLED_gc
                | USART_CMODE_ASYNCHRONOUS_gc
                | USART_SBMODE_1BIT_gc;
  _usart->CTRLB = _usart_ctrl_b;
    2c10:	80 ec       	ldi	r24, 0xC0	; 192
    2c12:	86 83       	std	Z+6, r24	; 0x06
println():
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/modernAVR/0.2.14/cores/modernAVR/api/Print.h:85
  inline Print& print (const PGM_t _str[]) { puts(_str); return *this; }

  inline Print& println (void) { return ln(); }
  inline Print& println (char _c) { write((uint8_t) _c); return ln(); }
  inline Print& println (const char _str[]) { puts(_str); return ln(); }
  inline Print& println (const PGM_t _str[]) { puts(_str); return ln(); }
    2c14:	69 ea       	ldi	r22, 0xA9	; 169
    2c16:	76 e0       	ldi	r23, 0x06	; 6
    2c18:	8d e8       	ldi	r24, 0x8D	; 141
    2c1a:	90 e6       	ldi	r25, 0x60	; 96
    2c1c:	0e 94 ef 09 	call	0x13de	; 0x13de <Print::puts(PGM_t const*)>
    2c20:	8d e8       	ldi	r24, 0x8D	; 141
    2c22:	90 e6       	ldi	r25, 0x60	; 96
    2c24:	0e 94 0d 0a 	call	0x141a	; 0x141a <Print::ln()>
_ZN5Print5printEPK5PGM_t():
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/modernAVR/0.2.14/cores/modernAVR/api/Print.h:80
  /* Print */

  inline Print& print (void) { return *this; }
  inline Print& print (const char _c) { write((uint8_t) _c); return *this; }
  inline Print& print (const char _str[]) { puts(_str); return *this; }
  inline Print& print (const PGM_t _str[]) { puts(_str); return *this; }
    2c28:	60 ea       	ldi	r22, 0xA0	; 160
    2c2a:	76 e0       	ldi	r23, 0x06	; 6
    2c2c:	8d e8       	ldi	r24, 0x8D	; 141
    2c2e:	90 e6       	ldi	r25, 0x60	; 96
    2c30:	0e 94 ef 09 	call	0x13de	; 0x13de <Print::puts(PGM_t const*)>
print():
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/modernAVR/0.2.14/cores/modernAVR/api/cpp/Print_integer.cpp:88
  if (_base == DEC) _base = SPACE;
  return _print_integer ((uint32_t)((int32_t)_n), _base | _INT_, _dir, 16);
}
Print& Print::print (int32_t _n, uint8_t _base, int8_t _dir) {
  if (_base == DEC) _base = SPACE;
  return _print_integer ((uint32_t)_n, _base | _INT_, _dir, 32);
    2c34:	20 e2       	ldi	r18, 0x20	; 32
    2c36:	40 e4       	ldi	r20, 0x40	; 64
    2c38:	60 e0       	ldi	r22, 0x00	; 0
    2c3a:	7d e2       	ldi	r23, 0x2D	; 45
    2c3c:	81 e3       	ldi	r24, 0x31	; 49
    2c3e:	91 e0       	ldi	r25, 0x01	; 1
    2c40:	3d d8       	rcall	.-3974   	; 0x1cbc <Print::_print_integer(unsigned long, unsigned char, signed char, signed char) [clone .constprop.15]>
println():
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/modernAVR/0.2.14/cores/modernAVR/api/Print.h:116
  inline Print& println (uint16_t _n, uint8_t _base = DEC, int8_t _dir = 0) { print((uint16_t) _n, _base, _dir); return ln(); }
  inline Print& println (uint32_t _n, uint8_t _base = DEC, int8_t _dir = 0) { print((uint32_t) _n, _base, _dir); return ln(); }

  inline Print& println ( int8_t _n, uint8_t _base, int8_t _dir = 0) { print((int8_t) _n, _base, _dir); return ln(); }
  inline Print& println (int16_t _n, uint8_t _base = DEC, int8_t _dir = 0) { print((int16_t) _n, _base, _dir); return ln(); }
  inline Print& println (int32_t _n, uint8_t _base = DEC, int8_t _dir = 0) { print((int32_t) _n, _base, _dir); return ln(); }
    2c42:	8d e8       	ldi	r24, 0x8D	; 141
    2c44:	90 e6       	ldi	r25, 0x60	; 96
    2c46:	0e 94 0d 0a 	call	0x141a	; 0x141a <Print::ln()>
_ZN5Print5printEPK5PGM_t():
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/modernAVR/0.2.14/cores/modernAVR/api/Print.h:80
  /* Print */

  inline Print& print (void) { return *this; }
  inline Print& print (const char _c) { write((uint8_t) _c); return *this; }
  inline Print& print (const char _str[]) { puts(_str); return *this; }
  inline Print& print (const PGM_t _str[]) { puts(_str); return *this; }
    2c4a:	6f e8       	ldi	r22, 0x8F	; 143
    2c4c:	76 e0       	ldi	r23, 0x06	; 6
    2c4e:	8d e8       	ldi	r24, 0x8D	; 141
    2c50:	90 e6       	ldi	r25, 0x60	; 96
    2c52:	0e 94 ef 09 	call	0x13de	; 0x13de <Print::puts(PGM_t const*)>
println():
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/modernAVR/0.2.14/cores/modernAVR/api/Print.h:85

  inline Print& println (void) { return ln(); }
  inline Print& println (char _c) { write((uint8_t) _c); return ln(); }
  inline Print& println (const char _str[]) { puts(_str); return ln(); }
  inline Print& println (const PGM_t _str[]) { puts(_str); return ln(); }
    2c56:	61 e8       	ldi	r22, 0x81	; 129
    2c58:	76 e0       	ldi	r23, 0x06	; 6
    2c5a:	8d e8       	ldi	r24, 0x8D	; 141
    2c5c:	90 e6       	ldi	r25, 0x60	; 96
    2c5e:	0e 94 ef 09 	call	0x13de	; 0x13de <Print::puts(PGM_t const*)>
    2c62:	8d e8       	ldi	r24, 0x8D	; 141
    2c64:	90 e6       	ldi	r25, 0x60	; 96
    2c66:	0e 94 0d 0a 	call	0x141a	; 0x141a <Print::ln()>
_ZN5Print5printEPK5PGM_t():
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/modernAVR/0.2.14/cores/modernAVR/api/Print.h:80
  /* Print */

  inline Print& print (void) { return *this; }
  inline Print& print (const char _c) { write((uint8_t) _c); return *this; }
  inline Print& print (const char _str[]) { puts(_str); return *this; }
  inline Print& print (const PGM_t _str[]) { puts(_str); return *this; }
    2c6a:	61 e7       	ldi	r22, 0x71	; 113
    2c6c:	76 e0       	ldi	r23, 0x06	; 6
    2c6e:	8d e8       	ldi	r24, 0x8D	; 141
    2c70:	90 e6       	ldi	r25, 0x60	; 96
    2c72:	0e 94 ef 09 	call	0x13de	; 0x13de <Print::puts(PGM_t const*)>
print():
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/modernAVR/0.2.14/cores/modernAVR/api/cpp/Print_integer.cpp:84
  if (_base == DEC) _base = SPACE;
  return _print_integer ((uint32_t)((int32_t)_n), _base | _INT_, _dir, 8);
}
Print& Print::print (int16_t _n, uint8_t _base, int8_t _dir) {
  if (_base == DEC) _base = SPACE;
  return _print_integer ((uint32_t)((int32_t)_n), _base | _INT_, _dir, 16);
    2c76:	20 e1       	ldi	r18, 0x10	; 16
    2c78:	40 e4       	ldi	r20, 0x40	; 64
    2c7a:	66 e6       	ldi	r22, 0x66	; 102
    2c7c:	70 e0       	ldi	r23, 0x00	; 0
    2c7e:	80 e0       	ldi	r24, 0x00	; 0
    2c80:	90 e0       	ldi	r25, 0x00	; 0
    2c82:	1c d8       	rcall	.-4040   	; 0x1cbc <Print::_print_integer(unsigned long, unsigned char, signed char, signed char) [clone .constprop.15]>
println():
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/modernAVR/0.2.14/cores/modernAVR/api/Print.h:115
  inline Print& println ( uint8_t _n, uint8_t _base, int8_t _dir = 0) { print((uint8_t) _n, _base, _dir); return ln(); }
  inline Print& println (uint16_t _n, uint8_t _base = DEC, int8_t _dir = 0) { print((uint16_t) _n, _base, _dir); return ln(); }
  inline Print& println (uint32_t _n, uint8_t _base = DEC, int8_t _dir = 0) { print((uint32_t) _n, _base, _dir); return ln(); }

  inline Print& println ( int8_t _n, uint8_t _base, int8_t _dir = 0) { print((int8_t) _n, _base, _dir); return ln(); }
  inline Print& println (int16_t _n, uint8_t _base = DEC, int8_t _dir = 0) { print((int16_t) _n, _base, _dir); return ln(); }
    2c84:	8d e8       	ldi	r24, 0x8D	; 141
    2c86:	90 e6       	ldi	r25, 0x60	; 96
    2c88:	0e 94 0d 0a 	call	0x141a	; 0x141a <Print::ln()>
setup():
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/sys.cpp:65
     * Charge pump voltage control; AC0 Output negative logic.
     *
     * V-Target power control: output negative logic.
     */

    pinControlRegister(PIN_VCP_TXD)  = PORT_PULLUPEN_bm | PORT_ISC_INTDISABLE_gc;
    2c8c:	10 93 12 04 	sts	0x0412, r17	; 0x800412 <__TEXT_REGION_LENGTH__+0x7f0412>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/sys.cpp:66
    pinControlRegister(PIN_VCP_RXD)  = PORT_PULLUPEN_bm | PORT_ISC_INTDISABLE_gc;
    2c90:	10 93 13 04 	sts	0x0413, r17	; 0x800413 <__TEXT_REGION_LENGTH__+0x7f0413>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/sys.cpp:67
    pinControlRegister(PIN_PGM_TDAT) = PORT_PULLUPEN_bm | PORT_ISC_INTDISABLE_gc;
    2c94:	10 93 10 04 	sts	0x0410, r17	; 0x800410 <__TEXT_REGION_LENGTH__+0x7f0410>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/sys.cpp:68
    pinControlRegister(PIN_PGM_TRST) = PORT_PULLUPEN_bm | PORT_ISC_INPUT_DISABLE_gc;
    2c98:	8c e0       	ldi	r24, 0x0C	; 12
    2c9a:	80 93 11 04 	sts	0x0411, r24	; 0x800411 <__TEXT_REGION_LENGTH__+0x7f0411>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/sys.cpp:69
    pinControlRegister(PIN_SYS_SW0)  = PORT_PULLUPEN_bm | PORT_ISC_RISING_gc;
    2c9e:	8a e0       	ldi	r24, 0x0A	; 10
    2ca0:	80 93 b6 04 	sts	0x04B6, r24	; 0x8004b6 <__TEXT_REGION_LENGTH__+0x7f04b6>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/sys.cpp:112
    AC0_MUXCTRL = AC_INVERT_bm | AC_MUXPOS_AINP4_gc | AC_MUXNEG_DACREF_gc;

  #elif (CONFIG_HAL_TYPE == HAL_CNANO)
    /* In this profile, PA6 and PD3 remain unused. */

    pinControlRegister(PIN_SYS_LED0) = PORT_INVEN_bm | PORT_ISC_INPUT_DISABLE_gc;
    2ca4:	44 e8       	ldi	r20, 0x84	; 132
    2ca6:	40 93 b2 04 	sts	0x04B2, r20	; 0x8004b2 <__TEXT_REGION_LENGTH__+0x7f04b2>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/sys.cpp:114
    #ifdef CONFIG_HVC_ENABLE
    pinControlRegister(PIN_HVC_FEEDBACK) = PORT_ISC_INTDISABLE_gc;
    2caa:	10 92 72 04 	sts	0x0472, r1	; 0x800472 <__TEXT_REGION_LENGTH__+0x7f0472>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/sys.cpp:120
    #endif
    #ifdef CONFIG_VCP_CTS_ENABLE
    pinControlRegister(PIN_VCP_CTS) = PORT_PULLUPEN_bm | PORT_ISC_INTDISABLE_gc;
    #endif

    VPORTA_DIR = _BV(4) | _BV(5) | _BV(7);  /* WO4 WO5 HVSW */
    2cae:	80 eb       	ldi	r24, 0xB0	; 176
    2cb0:	80 b9       	out	0x00, r24	; 0
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/sys.cpp:121
    VPORTD_DIR = _BV(0) | _BV(4) | _BV(5);  /* DTR HVSL1 HVSL2 */
    2cb2:	81 e3       	ldi	r24, 0x31	; 49
    2cb4:	8c b9       	out	0x0c, r24	; 12
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/sys.cpp:122
    VPORTF_DIR = _BV(3) | _BV(4) | _BV(5);  /* LED1 VPW PDIS */
    2cb6:	88 e3       	ldi	r24, 0x38	; 56
    2cb8:	84 bb       	out	0x14, r24	; 20
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/sys.cpp:124

    PORTMUX_EVSYSROUTEA   = PORTMUX_EVOUTA_ALT1_gc;     /* EVOUTA -> PIN_PA7 */
    2cba:	81 e0       	ldi	r24, 0x01	; 1
    2cbc:	80 93 e0 05 	sts	0x05E0, r24	; 0x8005e0 <__TEXT_REGION_LENGTH__+0x7f05e0>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/sys.cpp:125
    EVSYS_CHANNEL0        = EVSYS_CHANNEL_CCL_LUT0_gc;  /* <- LED0 */
    2cc0:	90 e1       	ldi	r25, 0x10	; 16
    2cc2:	90 93 10 02 	sts	0x0210, r25	; 0x800210 <__TEXT_REGION_LENGTH__+0x7f0210>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/sys.cpp:126
    EVSYS_USEREVSYSEVOUTF = EVSYS_USER_CHANNEL0_gc;     /* LED0 -> EVOUTF:PIN_PF2 */
    2cc6:	80 93 2b 02 	sts	0x022B, r24	; 0x80022b <__TEXT_REGION_LENGTH__+0x7f022b>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/sys.cpp:127
    EVSYS_USEREVSYSEVOUTA = EVSYS_CHANNEL_AC0_OUT_gc;   /* AC0_OUT -> EVOUTA */
    2cca:	30 e2       	ldi	r19, 0x20	; 32
    2ccc:	30 93 29 02 	sts	0x0229, r19	; 0x800229 <__TEXT_REGION_LENGTH__+0x7f0229>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/sys.cpp:128
    EVSYS_USERCCLLUT3A    = EVSYS_USER_CHANNEL4_gc;     /* <- VRxD */
    2cd0:	95 e0       	ldi	r25, 0x05	; 5
    2cd2:	90 93 26 02 	sts	0x0226, r25	; 0x800226 <__TEXT_REGION_LENGTH__+0x7f0226>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/sys.cpp:131

    /*** LED0 Heart-Beat generator ***/
    CCL_TRUTH0    = CCL_TRUTH_1_bm     | CCL_TRUTH_2_bm;
    2cd6:	26 e0       	ldi	r18, 0x06	; 6
    2cd8:	20 93 cb 01 	sts	0x01CB, r18	; 0x8001cb <__TEXT_REGION_LENGTH__+0x7f01cb>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/sys.cpp:132
    CCL_LUT0CTRLB = CCL_INSEL0_TCA0_gc | CCL_INSEL1_TCB1_gc;
    2cdc:	99 ea       	ldi	r25, 0xA9	; 169
    2cde:	90 93 c9 01 	sts	0x01C9, r25	; 0x8001c9 <__TEXT_REGION_LENGTH__+0x7f01c9>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/sys.cpp:133
    CCL_LUT0CTRLA = CCL_ENABLE_bm;                      /* LED0 */
    2ce2:	80 93 c8 01 	sts	0x01C8, r24	; 0x8001c8 <__TEXT_REGION_LENGTH__+0x7f01c8>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/sys.cpp:136

    /*** LED1 Flash generator ***/
    CCL_TRUTH3    = CCL_TRUTH_0_bm       | CCL_TRUTH_1_bm | CCL_TRUTH_2_bm;
    2ce6:	97 e0       	ldi	r25, 0x07	; 7
    2ce8:	90 93 d7 01 	sts	0x01D7, r25	; 0x8001d7 <__TEXT_REGION_LENGTH__+0x7f01d7>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/sys.cpp:137
    CCL_LUT3CTRLB = CCL_INSEL0_USART0_gc | CCL_INSEL1_EVENTA_gc;
    2cec:	97 e3       	ldi	r25, 0x37	; 55
    2cee:	90 93 d5 01 	sts	0x01D5, r25	; 0x8001d5 <__TEXT_REGION_LENGTH__+0x7f01d5>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/sys.cpp:138
    CCL_LUT3CTRLA = CCL_ENABLE_bm        | CCL_OUTEN_bm;  /* LED1 -> PIN_PF3 */
    2cf2:	91 e4       	ldi	r25, 0x41	; 65
    2cf4:	90 93 d4 01 	sts	0x01D4, r25	; 0x8001d4 <__TEXT_REGION_LENGTH__+0x7f01d4>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/sys.cpp:140

    AC0_MUXCTRL = AC_INVERT_bm | AC_MUXPOS_AINP0_gc | AC_MUXNEG_DACREF_gc;
    2cf8:	40 93 82 06 	sts	0x0682, r20	; 0x800682 <__TEXT_REGION_LENGTH__+0x7f0682>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/sys.cpp:177
    AC0_MUXCTRL = AC_INVERT_bm | AC_MUXPOS_AINP4_gc | AC_MUXNEG_DACREF_gc;

  #endif

  #if (PIN_SYS_SW0 & 0xF0) == 176
    EVSYS_CHANNEL3 = EVSYS_CHANNEL_PORTF_EVGEN0_gc;
    2cfc:	4a e4       	ldi	r20, 0x4A	; 74
    2cfe:	40 93 13 02 	sts	0x0213, r20	; 0x800213 <__TEXT_REGION_LENGTH__+0x7f0213>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/sys.cpp:189
  #if (PIN_VCP_RXD & 0xF0) == 176
    EVSYS_CHANNEL4 = EVSYS_CHANNEL_PORTF_EVGEN1_gc;
  #elif (PIN_VCP_RXD & 0xF0) == 112
    EVSYS_CHANNEL4 = EVSYS_CHANNEL_PORTD_EVGEN1_gc;
  #elif (PIN_VCP_RXD & 0xF0) == 16
    EVSYS_CHANNEL4 = EVSYS_CHANNEL_PORTA_EVGEN1_gc;
    2d02:	90 93 14 02 	sts	0x0214, r25	; 0x800214 <__TEXT_REGION_LENGTH__+0x7f0214>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/sys.cpp:195
  #endif

  #if (PIN_SYS_SW0 & 0xF0) == (PIN_VCP_RXD & 0xF0)
    portRegister(PIN_SYS_SW0).EVGENCTRLA = pinPosition(PIN_SYS_SW0) | (pinPosition(PIN_VCP_RXD) << 4);
  #else
    portRegister(PIN_SYS_SW0).EVGENCTRLA = pinPosition(PIN_SYS_SW0);
    2d06:	20 93 b8 04 	sts	0x04B8, r18	; 0x8004b8 <__TEXT_REGION_LENGTH__+0x7f04b8>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/sys.cpp:196
    portRegister(PIN_VCP_RXD).EVGENCTRLA = pinPosition(PIN_VCP_RXD) << 4;
    2d0a:	20 e3       	ldi	r18, 0x30	; 48
    2d0c:	20 93 18 04 	sts	0x0418, r18	; 0x800418 <__TEXT_REGION_LENGTH__+0x7f0418>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/sys.cpp:200
  #endif

    /*** SW0 FALLING Interrupt generator ***/
    EVSYS_USERCCLLUT2A = EVSYS_USER_CHANNEL3_gc;  /* <- SW0 */
    2d10:	24 e0       	ldi	r18, 0x04	; 4
    2d12:	20 93 24 02 	sts	0x0224, r18	; 0x800224 <__TEXT_REGION_LENGTH__+0x7f0224>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/sys.cpp:201
    CCL_TRUTH2    = CCL_TRUTH_1_bm;
    2d16:	22 e0       	ldi	r18, 0x02	; 2
    2d18:	20 93 d3 01 	sts	0x01D3, r18	; 0x8001d3 <__TEXT_REGION_LENGTH__+0x7f01d3>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/sys.cpp:202
    CCL_LUT2CTRLB = CCL_INSEL0_EVENTA_gc;
    2d1c:	00 93 d1 01 	sts	0x01D1, r16	; 0x8001d1 <__TEXT_REGION_LENGTH__+0x7f01d1>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/sys.cpp:203
    CCL_LUT2CTRLA = CCL_ENABLE_bm | CCL_FILTSEL_FILTER_gc;
    2d20:	41 e2       	ldi	r20, 0x21	; 33
    2d22:	40 93 d0 01 	sts	0x01D0, r20	; 0x8001d0 <__TEXT_REGION_LENGTH__+0x7f01d0>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/sys.cpp:204
    CCL_INTCTRL0  = CCL_INTMODE2_FALLING_gc;
    2d26:	30 93 c5 01 	sts	0x01C5, r19	; 0x8001c5 <__TEXT_REGION_LENGTH__+0x7f01c5>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/sys.cpp:208

    /*** CCL enable ***/
    /* One of the CCL's is the LED output control. */
    CCL_CTRLA = CCL_RUNSTDBY_bm | CCL_ENABLE_bm;
    2d2a:	90 93 c0 01 	sts	0x01C0, r25	; 0x8001c0 <__TEXT_REGION_LENGTH__+0x7f01c0>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/sys.cpp:215
    /*** TCA0 ***/
    /* TCA0 is split into two 8-bit timers. */
    /* The lower timer controls the blinking rate of the LED. */
    /* The top timer is used as a period timer */
    /* and as the output for the charge pump.  */
    TCA0_SPLIT_CTRLD = TCA_SPLIT_SPLITM_bm;
    2d2e:	80 93 03 0a 	sts	0x0A03, r24	; 0x800a03 <__TEXT_REGION_LENGTH__+0x7f0a03>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/sys.cpp:216
    TCA0_SPLIT_LPER  = TCA0_STEP - 2;
    2d32:	93 ec       	ldi	r25, 0xC3	; 195
    2d34:	90 93 26 0a 	sts	0x0A26, r25	; 0x800a26 <__TEXT_REGION_LENGTH__+0x7f0a26>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/sys.cpp:217
    TCA0_SPLIT_LCMP0 = TCA0_STEP / 2;
    2d38:	92 e6       	ldi	r25, 0x62	; 98
    2d3a:	90 93 28 0a 	sts	0x0A28, r25	; 0x800a28 <__TEXT_REGION_LENGTH__+0x7f0a28>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/sys.cpp:224
    /*** TCB0 ***/
    /* The TCB0 timer is configured in the <timeout.cpp> module. */

    /*** TCB1 ***/
    /* TCB1 is used to control the LED blinking rate. */
    TCB1_CTRLB = TCB_ASYNC_bm | TCB_CNTMODE_PWM8_gc;
    2d3e:	97 e4       	ldi	r25, 0x47	; 71
    2d40:	90 93 11 0b 	sts	0x0B11, r25	; 0x800b11 <__TEXT_REGION_LENGTH__+0x7f0b11>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/sys.cpp:225
    TCB1_CCMP  = TCB1_FLASH;
    2d44:	49 ea       	ldi	r20, 0xA9	; 169
    2d46:	55 e0       	ldi	r21, 0x05	; 5
    2d48:	40 93 1c 0b 	sts	0x0B1C, r20	; 0x800b1c <__TEXT_REGION_LENGTH__+0x7f0b1c>
    2d4c:	50 93 1d 0b 	sts	0x0B1D, r21	; 0x800b1d <__TEXT_REGION_LENGTH__+0x7f0b1d>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/sys.cpp:226
    TCB1_CTRLA = TCB_RUNSTDBY_bm | TCB_ENABLE_bm | TCB_CLKSEL_EVENT_gc;
    2d50:	9f e4       	ldi	r25, 0x4F	; 79
    2d52:	90 93 10 0b 	sts	0x0B10, r25	; 0x800b10 <__TEXT_REGION_LENGTH__+0x7f0b10>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/timeout.cpp:25
#include "prototype.h"

namespace Timeout {

  void setup (void) {
    RTC_PITEVGENCTRLA = RTC_EVGEN0SEL_DIV32_gc | RTC_EVGEN1SEL_DIV128_gc;
    2d56:	94 e6       	ldi	r25, 0x64	; 100
    2d58:	90 93 56 01 	sts	0x0156, r25	; 0x800156 <__TEXT_REGION_LENGTH__+0x7f0156>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/timeout.cpp:26
    EVSYS_CHANNEL1 = EVSYS_CHANNEL_RTC_EVGEN0_gc; /* 1024Hz periodic.  */
    2d5c:	10 93 11 02 	sts	0x0211, r17	; 0x800211 <__TEXT_REGION_LENGTH__+0x7f0211>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/timeout.cpp:27
    EVSYS_CHANNEL2 = EVSYS_CHANNEL_RTC_EVGEN1_gc; /* 32Hz periodic.    */
    2d60:	99 e0       	ldi	r25, 0x09	; 9
    2d62:	90 93 12 02 	sts	0x0212, r25	; 0x800212 <__TEXT_REGION_LENGTH__+0x7f0212>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/timeout.cpp:28
    EVSYS_USERTCB0COUNT = EVSYS_USER_CHANNEL1_gc; /* TCB0_CLK = 1024Hz */
    2d66:	20 93 31 02 	sts	0x0231, r18	; 0x800231 <__TEXT_REGION_LENGTH__+0x7f0231>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/timeout.cpp:29
    EVSYS_USERTCB1COUNT = EVSYS_USER_CHANNEL2_gc; /* TCB1_CLK = 32Hz   */
    2d6a:	00 93 33 02 	sts	0x0233, r16	; 0x800233 <__TEXT_REGION_LENGTH__+0x7f0233>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/timeout.cpp:30
    RTC_PITCTRLA = RTC_PITEN_bm;
    2d6e:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <__TEXT_REGION_LENGTH__+0x7f0150>
main():
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/main.cpp:94
  Serial.print(F("__AVR_ARCH__ = ")).println(__AVR_ARCH__, DEC);
#endif

  SYS::setup();
  Timeout::setup();
  USART::setup();
    2d72:	c9 d8       	rcall	.-3694   	; 0x1f06 <USART::setup()>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/main.cpp:96

  loop_until_bit_is_clear(WDT_STATUS, WDT_SYNCBUSY_bp);
    2d74:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <__TEXT_REGION_LENGTH__+0x7f0101>
    2d78:	80 fd       	sbrc	r24, 0
    2d7a:	fc cf       	rjmp	.-8      	; 0x2d74 <main+0x1d2>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/main.cpp:97
  _PROTECTED_WRITE(WDT_CTRLA, WDT_PERIOD_1KCLK_gc);
    2d7c:	88 ed       	ldi	r24, 0xD8	; 216
    2d7e:	98 e0       	ldi	r25, 0x08	; 8
    2d80:	84 bf       	out	0x34, r24	; 52
    2d82:	90 93 00 01 	sts	0x0100, r25	; 0x800100 <__TEXT_REGION_LENGTH__+0x7f0100>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/main.cpp:101

  #if defined(PIN_SYS_SW0)
  /* Clear the dirty flag before enabling interrupts. */
  vportRegister(PIN_SYS_SW0).INTFLAGS = ~0;
    2d86:	8f ef       	ldi	r24, 0xFF	; 255
    2d88:	87 bb       	out	0x17, r24	; 23
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/main.cpp:102
  CCL_INTFLAGS = ~0;
    2d8a:	80 93 c7 01 	sts	0x01C7, r24	; 0x8001c7 <__TEXT_REGION_LENGTH__+0x7f01c7>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/main.cpp:104
  #endif
  interrupts();
    2d8e:	78 94       	sei
delay_millis():
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/modernAVR/0.2.14/cores/modernAVR/api/delay_busywait.h:42
    2d90:	2f e3       	ldi	r18, 0x3F	; 63
    2d92:	32 e4       	ldi	r19, 0x42	; 66
    2d94:	4f e0       	ldi	r20, 0x0F	; 15
    2d96:	21 50       	subi	r18, 0x01	; 1
    2d98:	30 40       	sbci	r19, 0x00	; 0
    2d9a:	40 40       	sbci	r20, 0x00	; 0
    2d9c:	e1 f7       	brne	.-8      	; 0x2d96 <main+0x1f4>
    2d9e:	00 c0       	rjmp	.+0      	; 0x2da0 <main+0x1fe>
    2da0:	00 00       	nop
setup_device():
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/usb.cpp:235
    EP_MEM.cci_header.wLength       = 2;
    EP_MEM.cci_wValue               = _state;
  }

  void setup_device (bool _force) {
    if (_led_mode != 3) SYS::LED_Flash();
    2da2:	80 91 85 60 	lds	r24, 0x6085	; 0x806085 <_led_mode>
    2da6:	83 30       	cpi	r24, 0x03	; 3
    2da8:	11 f0       	breq	.+4      	; 0x2dae <main+0x20c>
    2daa:	0e 94 7a 08 	call	0x10f4	; 0x10f4 <SYS::LED_Flash()>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/usb.cpp:236
    USB0_ADDR = 0;
    2dae:	10 92 03 0c 	sts	0x0C03, r1	; 0x800c03 <__TEXT_REGION_LENGTH__+0x7f0c03>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/usb.cpp:237
    if (USB0_CTRLA || _force) {
    2db2:	80 91 00 0c 	lds	r24, 0x0C00	; 0x800c00 <__TEXT_REGION_LENGTH__+0x7f0c00>
    2db6:	3e d8       	rcall	.-3972   	; 0x1e34 <USB::setup_device(bool) [clone .part.2]>
main():
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/main.cpp:115
  #else
  SYS::LED_Flash();
  #endif

  /* From here on, it's an endless loop. */
  D1PRINTF("<WAITING>\r\n");
    2db8:	85 e6       	ldi	r24, 0x65	; 101
    2dba:	96 e0       	ldi	r25, 0x06	; 6
    2dbc:	9f 93       	push	r25
    2dbe:	8f 93       	push	r24
    2dc0:	8d e8       	ldi	r24, 0x8D	; 141
    2dc2:	90 e6       	ldi	r25, 0x60	; 96
    2dc4:	9f 93       	push	r25
    2dc6:	8f 93       	push	r24
    2dc8:	0e 94 19 0a 	call	0x1432	; 0x1432 <Print::printf(PGM_t const*, ...) [clone .constprop.22]>
    2dcc:	0f 90       	pop	r0
    2dce:	0f 90       	pop	r0
    2dd0:	0f 90       	pop	r0
    2dd2:	0f 90       	pop	r0
handling_control_transactions():
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/usb.cpp:659
  /* This process is equivalent to a endpoint interrupt. */
  /* The reason for using polling is to prioritize VCP performance. */
  void handling_control_transactions (void) {
    bool _listen = false;
    uint8_t bmRequestType = EP_MEM.req_data.bmRequestType;
    D1PRINTF("RQ=%02X:%04X:%02X:%02X:%04X:%04X:%04X\r\n",
    2dd4:	0d e8       	ldi	r16, 0x8D	; 141
    2dd6:	10 e6       	ldi	r17, 0x60	; 96
    2dd8:	1e 01       	movw	r2, r28
    2dda:	85 e0       	ldi	r24, 0x05	; 5
    2ddc:	28 0e       	add	r2, r24
    2dde:	31 1c       	adc	r3, r1
request_class():
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/usb.cpp:625
    else if (bRequest == 0x21) {  /* GET_LINE_ENCODING */
      memcpy(&EP_MEM.res_encoding, &_set_line_encoding, sizeof(LineEncoding_t));
      if (EP_MEM.res_encoding.dwDTERate == 0) {
        /* Parameters that, if incorrectly accepted,           */
        /* would result in division by zero must be corrected. */
        EP_MEM.res_encoding.dwDTERate = 9600UL;
    2de0:	80 e8       	ldi	r24, 0x80	; 128
    2de2:	88 2e       	mov	r8, r24
    2de4:	85 e2       	ldi	r24, 0x25	; 37
    2de6:	98 2e       	mov	r9, r24
    2de8:	a1 2c       	mov	r10, r1
    2dea:	b1 2c       	mov	r11, r1
request_standard():
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/usb.cpp:580
    }
    else if (bRequest == 0x0A) {  /* GET_INTREFACE */
      /* It seems not to be used. */
      D1PRINTF("<SI:0>\r\n");
      EP_MEM.res_data[0] = 0;
      EP_RES.CNT = 1;
    2dec:	66 24       	eor	r6, r6
    2dee:	63 94       	inc	r6
    2df0:	71 2c       	mov	r7, r1
main():
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/main.cpp:117
  while (true) {
    wdt_reset();
    2df2:	a8 95       	wdr
handling_bus_events():
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/usb.cpp:690

  /*** This process is equivalent to a bus interrupt. ***/
  /* The reason for using polling is to prioritize VCP performance. */
  /* The trade-off is that power standby is not available. */
  void handling_bus_events (void) {
    uint8_t busstate = USB0_INTFLAGSA;
    2df4:	f0 90 0a 0c 	lds	r15, 0x0C0A	; 0x800c0a <__TEXT_REGION_LENGTH__+0x7f0c0a>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/usb.cpp:691
    USB0_INTFLAGSA = busstate;
    2df8:	f0 92 0a 0c 	sts	0x0C0A, r15	; 0x800c0a <__TEXT_REGION_LENGTH__+0x7f0c0a>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/usb.cpp:716
    }
    if (bit_is_set(busstate, USB_RESUME_bp)) {
      D1PRINTF("<RESUME:%04X>\r\n", USB0_ADDR);
    }
  #endif
    if (bit_is_set(busstate, USB_SOF_bp)) {
    2dfc:	f7 fe       	sbrs	r15, 7
    2dfe:	14 c0       	rjmp	.+40     	; 0x2e28 <main+0x286>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/usb.cpp:718
      /* If there is deferred data for a block transfer, it is sent here. */
      if (_sof_count > 0 && 0 == (--_sof_count)) {
    2e00:	80 91 2e 64 	lds	r24, 0x642E	; 0x80642e <_sof_count>
    2e04:	88 23       	and	r24, r24
    2e06:	81 f0       	breq	.+32     	; 0x2e28 <main+0x286>
    2e08:	80 91 2e 64 	lds	r24, 0x642E	; 0x80642e <_sof_count>
    2e0c:	81 50       	subi	r24, 0x01	; 1
    2e0e:	80 93 2e 64 	sts	0x642E, r24	; 0x80642e <_sof_count>
    2e12:	81 11       	cpse	r24, r1
    2e14:	09 c0       	rjmp	.+18     	; 0x2e28 <main+0x286>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/usb.cpp:719
        if (bit_is_set(EP_CDI.STATUS, USB_BUSNAK_bp) && _send_count > 0) {
    2e16:	80 91 74 64 	lds	r24, 0x6474	; 0x806474 <EP_TABLE+0x40>
    2e1a:	81 ff       	sbrs	r24, 1
    2e1c:	05 c0       	rjmp	.+10     	; 0x2e28 <main+0x286>
    2e1e:	80 91 31 64 	lds	r24, 0x6431	; 0x806431 <_send_count>
    2e22:	81 11       	cpse	r24, r1
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/usb.cpp:720
          ep_cdi_listen();
    2e24:	0e 94 0d 05 	call	0xa1a	; 0xa1a <USB::ep_cdi_listen()>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/usb.cpp:725
        }
      }
    }
    if (bit_is_set(busstate, USB_SUSPEND_bp)
     || bit_is_set(busstate, USB_RESUME_bp)) {
    2e28:	8f 2d       	mov	r24, r15
    2e2a:	80 76       	andi	r24, 0x60	; 96
    2e2c:	29 f0       	breq	.+10     	; 0x2e38 <main+0x296>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/usb.cpp:728
      /* This implementation does not transition to power saving mode. */
      /* This is only passed when the USB cable is unplugged. */
      if (bit_is_set(GPCONF, GPCONF_USB_bp)) {
    2e2e:	e0 99       	sbic	0x1c, 0	; 28
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/usb.cpp:730
        /* System reboot */
        SYS::reboot();
    2e30:	0e 94 44 0e 	call	0x1c88	; 0x1c88 <SYS::reboot()>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/usb.cpp:732
      }
      bit_set(busstate, USB_RESET_bp);
    2e34:	68 94       	set
    2e36:	f4 f8       	bld	r15, 4
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/usb.cpp:734
    }
    if (bit_is_set(busstate, USB_RESET_bp)) {
    2e38:	f4 fe       	sbrs	r15, 4
    2e3a:	0d c0       	rjmp	.+26     	; 0x2e56 <main+0x2b4>
setup_device():
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/usb.cpp:235
    EP_MEM.cci_header.wLength       = 2;
    EP_MEM.cci_wValue               = _state;
  }

  void setup_device (bool _force) {
    if (_led_mode != 3) SYS::LED_Flash();
    2e3c:	80 91 85 60 	lds	r24, 0x6085	; 0x806085 <_led_mode>
    2e40:	83 30       	cpi	r24, 0x03	; 3
    2e42:	11 f0       	breq	.+4      	; 0x2e48 <main+0x2a6>
    2e44:	0e 94 7a 08 	call	0x10f4	; 0x10f4 <SYS::LED_Flash()>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/usb.cpp:236
    USB0_ADDR = 0;
    2e48:	10 92 03 0c 	sts	0x0C03, r1	; 0x800c03 <__TEXT_REGION_LENGTH__+0x7f0c03>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/usb.cpp:237
    if (USB0_CTRLA || _force) {
    2e4c:	80 91 00 0c 	lds	r24, 0x0C00	; 0x800c00 <__TEXT_REGION_LENGTH__+0x7f0c00>
    2e50:	81 11       	cpse	r24, r1
    2e52:	0e 94 1a 0f 	call	0x1e34	; 0x1e34 <USB::setup_device(bool) [clone .part.2]>
is_ep_setup():
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/usb.cpp:256
      set_cci_data(0x00);
      USB0_CTRLA = USB_ENABLE_bm | (USB_ENDPOINTS_MAX - 1);
    }
  }

  bool is_ep_setup (void) { return bit_is_set(EP_REQ.STATUS, USB_EPSETUP_bp); }
    2e56:	80 91 3c 64 	lds	r24, 0x643C	; 0x80643c <EP_TABLE+0x8>
main():
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/main.cpp:121

    /*** USB control handling ***/
    USB::handling_bus_events();
    if (USB::is_ep_setup()) USB::handling_control_transactions();
    2e5a:	84 ff       	sbrs	r24, 4
    2e5c:	4c c0       	rjmp	.+152    	; 0x2ef6 <main+0x354>
handling_control_transactions():
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/usb.cpp:658
  /*** Accept the EP0 setup packet. ***/
  /* This process is equivalent to a endpoint interrupt. */
  /* The reason for using polling is to prioritize VCP performance. */
  void handling_control_transactions (void) {
    bool _listen = false;
    uint8_t bmRequestType = EP_MEM.req_data.bmRequestType;
    2e5e:	f0 90 16 63 	lds	r15, 0x6316	; 0x806316 <EP_MEM>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/usb.cpp:659
    D1PRINTF("RQ=%02X:%04X:%02X:%02X:%04X:%04X:%04X\r\n",
    2e62:	80 91 3e 64 	lds	r24, 0x643E	; 0x80643e <EP_TABLE+0xa>
    2e66:	90 91 3f 64 	lds	r25, 0x643F	; 0x80643f <EP_TABLE+0xb>
    2e6a:	20 91 3c 64 	lds	r18, 0x643C	; 0x80643c <EP_TABLE+0x8>
    2e6e:	30 91 1d 63 	lds	r19, 0x631D	; 0x80631d <EP_MEM+0x7>
    2e72:	3f 93       	push	r19
    2e74:	30 91 1c 63 	lds	r19, 0x631C	; 0x80631c <EP_MEM+0x6>
    2e78:	3f 93       	push	r19
    2e7a:	30 91 1b 63 	lds	r19, 0x631B	; 0x80631b <EP_MEM+0x5>
    2e7e:	3f 93       	push	r19
    2e80:	30 91 1a 63 	lds	r19, 0x631A	; 0x80631a <EP_MEM+0x4>
    2e84:	3f 93       	push	r19
    2e86:	30 91 19 63 	lds	r19, 0x6319	; 0x806319 <EP_MEM+0x3>
    2e8a:	3f 93       	push	r19
    2e8c:	30 91 18 63 	lds	r19, 0x6318	; 0x806318 <EP_MEM+0x2>
    2e90:	3f 93       	push	r19
    2e92:	30 91 17 63 	lds	r19, 0x6317	; 0x806317 <EP_MEM+0x1>
    2e96:	1f 92       	push	r1
    2e98:	3f 93       	push	r19
    2e9a:	1f 92       	push	r1
    2e9c:	ff 92       	push	r15
    2e9e:	9f 93       	push	r25
    2ea0:	8f 93       	push	r24
    2ea2:	1f 92       	push	r1
    2ea4:	2f 93       	push	r18
    2ea6:	e1 e7       	ldi	r30, 0x71	; 113
    2ea8:	f2 e0       	ldi	r31, 0x02	; 2
    2eaa:	ff 93       	push	r31
    2eac:	ef 93       	push	r30
    2eae:	1f 93       	push	r17
    2eb0:	0f 93       	push	r16
    2eb2:	0e 94 19 0a 	call	0x1432	; 0x1432 <Print::printf(PGM_t const*, ...) [clone .constprop.22]>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/usb.cpp:663
      EP_REQ.STATUS, EP_REQ.CNT, EP_MEM.req_data.bmRequestType, EP_MEM.req_data.bRequest,
      EP_MEM.req_data.wValue, EP_MEM.req_data.wIndex, EP_MEM.req_data.wLength);
    /* Accepts subsequent EP0_DATA packets as needed. */
    if (bit_is_clear(bmRequestType, 7)) ep_req_listen();
    2eb6:	cd bf       	out	0x3d, r28	; 61
    2eb8:	de bf       	out	0x3e, r29	; 62
    2eba:	f7 fe       	sbrs	r15, 7
    2ebc:	0e 94 4d 05 	call	0xa9a	; 0xa9a <USB::ep_req_listen()>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/usb.cpp:664
    bmRequestType &= (3 << 5);
    2ec0:	8f 2d       	mov	r24, r15
    2ec2:	80 76       	andi	r24, 0x60	; 96
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/usb.cpp:665
    if (bmRequestType == (0 << 5)) {
    2ec4:	09 f0       	breq	.+2      	; 0x2ec8 <main+0x326>
    2ec6:	b5 c2       	rjmp	.+1386   	; 0x3432 <main+0x890>
request_standard():
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/usb.cpp:527
  }

  /*** USB Standard Request Enumeration. ***/
  bool request_standard (void) {
    bool _listen = true;
    uint8_t bRequest = EP_MEM.req_data.bRequest;
    2ec8:	80 91 17 63 	lds	r24, 0x6317	; 0x806317 <EP_MEM+0x1>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/usb.cpp:528
    if (bRequest == 0x00) {       /* GET_STATUS */
    2ecc:	81 11       	cpse	r24, r1
    2ece:	ab c0       	rjmp	.+342    	; 0x3026 <main+0x484>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/usb.cpp:529
      EP_MEM.res_data[0] = 0;
    2ed0:	10 92 1e 63 	sts	0x631E, r1	; 0x80631e <EP_MEM+0x8>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/usb.cpp:530
      EP_MEM.res_data[1] = 0;
    2ed4:	10 92 1f 63 	sts	0x631F, r1	; 0x80631f <EP_MEM+0x9>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/usb.cpp:531
      EP_RES.CNT = 2;
    2ed8:	82 e0       	ldi	r24, 0x02	; 2
    2eda:	90 e0       	ldi	r25, 0x00	; 0
    2edc:	80 93 46 64 	sts	0x6446, r24	; 0x806446 <EP_TABLE+0x12>
    2ee0:	90 93 47 64 	sts	0x6447, r25	; 0x806447 <EP_TABLE+0x13>
handling_control_transactions():
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/usb.cpp:677
    else if (bmRequestType == (2 << 5)) {
      _listen = request_vendor();
    }
  #endif
    if (_listen) {
      ep_res_listen();
    2ee4:	0e 94 41 05 	call	0xa82	; 0xa82 <USB::ep_res_listen()>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/usb.cpp:678
      ep_req_listen();
    2ee8:	0e 94 4d 05 	call	0xa9a	; 0xa9a <USB::ep_req_listen()>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/usb.cpp:683
    }
    else {
      ep0_stalled();
    }
    USB0_INTFLAGSB |= USB_EPSETUP_bp;
    2eec:	80 91 0b 0c 	lds	r24, 0x0C0B	; 0x800c0b <__TEXT_REGION_LENGTH__+0x7f0c0b>
    2ef0:	84 60       	ori	r24, 0x04	; 4
    2ef2:	80 93 0b 0c 	sts	0x0C0B, r24	; 0x800c0b <__TEXT_REGION_LENGTH__+0x7f0c0b>
main():
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/main.cpp:124

    /* If SW0 was used, work here. */
    if (bit_is_clear(PGCONF, PGCONF_UPDI_bp)) {
    2ef6:	e8 99       	sbic	0x1d, 0	; 29
    2ef8:	2d c0       	rjmp	.+90     	; 0x2f54 <main+0x3b2>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/main.cpp:125
      if      (bit_is_set(GPCONF, GPCONF_FAL_bp)) SYS::reset_enter();
    2efa:	e7 9b       	sbis	0x1c, 7	; 28
    2efc:	7e c3       	rjmp	.+1788   	; 0x35fa <main+0xa58>
LED_TCB1():
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/sys.cpp:246
      _led_mode = 1;
    }
  }

  void LED_TCB1 (uint8_t _mode, uint16_t _ccmp) {
    if (_led_mode != _mode) {
    2efe:	80 91 85 60 	lds	r24, 0x6085	; 0x806085 <_led_mode>
    2f02:	83 30       	cpi	r24, 0x03	; 3
    2f04:	81 f0       	breq	.+32     	; 0x2f26 <main+0x384>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/sys.cpp:247
      TCA0_SPLIT_CTRLA = 0;
    2f06:	10 92 00 0a 	sts	0x0A00, r1	; 0x800a00 <__TEXT_REGION_LENGTH__+0x7f0a00>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/sys.cpp:248
      TCB1_CNTL = 0;
    2f0a:	10 92 1a 0b 	sts	0x0B1A, r1	; 0x800b1a <__TEXT_REGION_LENGTH__+0x7f0b1a>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/sys.cpp:249
      TCB1_CCMP = _ccmp;
    2f0e:	89 ea       	ldi	r24, 0xA9	; 169
    2f10:	95 e5       	ldi	r25, 0x55	; 85
    2f12:	80 93 1c 0b 	sts	0x0B1C, r24	; 0x800b1c <__TEXT_REGION_LENGTH__+0x7f0b1c>
    2f16:	90 93 1d 0b 	sts	0x0B1D, r25	; 0x800b1d <__TEXT_REGION_LENGTH__+0x7f0b1d>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/sys.cpp:250
      TCB1_CTRLA = TCB_RUNSTDBY_bm | TCB_ENABLE_bm | TCB_CLKSEL_EVENT_gc;
    2f1a:	8f e4       	ldi	r24, 0x4F	; 79
    2f1c:	80 93 10 0b 	sts	0x0B10, r24	; 0x800b10 <__TEXT_REGION_LENGTH__+0x7f0b10>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/sys.cpp:251
      _led_mode = _mode;
    2f20:	83 e0       	ldi	r24, 0x03	; 3
    2f22:	80 93 85 60 	sts	0x6085, r24	; 0x806085 <_led_mode>
reset_enter():
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/sys.cpp:312
   * Executed when SW0 is detected as being pressed.
   * May be called multiple times due to chattering.
   */
  void reset_enter (void) {
    LED_Blink();
    if (_jtag_arch == 5) {
    2f26:	80 91 98 60 	lds	r24, 0x6098	; 0x806098 <_jtag_arch>
    2f2a:	85 30       	cpi	r24, 0x05	; 5
    2f2c:	29 f4       	brne	.+10     	; 0x2f38 <main+0x396>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/sys.cpp:318
      /*
       * Puts a tinyAVR-0 which does not have a reset pad into reset state.
       * This applies to all chips which have an enabled UPDI pad.
       * Does not affect TPI/PDI types.
       */
      _updi_bitmap[10] = 0x59; /* SYSRST */
    2f2e:	89 e5       	ldi	r24, 0x59	; 89
    2f30:	80 93 24 60 	sts	0x6024, r24	; 0x806024 <SYS::_updi_bitmap+0xa>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/sys.cpp:319
      send_bitmap(_updi_bitmap, sizeof(_updi_bitmap) * 8);
    2f34:	0e 94 b4 04 	call	0x968	; 0x968 <SYS::send_bitmap(unsigned char const*, unsigned int) [clone .constprop.10]>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/sys.cpp:321
    }
    openDrainWriteMacro(PIN_PGM_TRST, LOW);
    2f38:	01 9a       	sbi	0x00, 1	; 0
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/sys.cpp:322
    D1PRINTF("<RST:IN>\r\n");
    2f3a:	89 e9       	ldi	r24, 0x99	; 153
    2f3c:	92 e0       	ldi	r25, 0x02	; 2
    2f3e:	9f 93       	push	r25
    2f40:	8f 93       	push	r24
    2f42:	1f 93       	push	r17
    2f44:	0f 93       	push	r16
    2f46:	0e 94 19 0a 	call	0x1432	; 0x1432 <Print::printf(PGM_t const*, ...) [clone .constprop.22]>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/sys.cpp:323
    bit_clear(GPCONF, GPCONF_FAL_bp);
    2f4a:	e7 98       	cbi	0x1c, 7	; 28
    2f4c:	0f 90       	pop	r0
    2f4e:	0f 90       	pop	r0
    2f50:	0f 90       	pop	r0
    2f52:	0f 90       	pop	r0
main():
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/main.cpp:130
      else if (bit_is_set(GPCONF, GPCONF_RIS_bp)) SYS::reset_leave();
    }

    /* If the USB port is not open, go back to the loop beginning. */
    if (bit_is_clear(GPCONF, GPCONF_USB_bp)) continue;
    2f54:	e0 9b       	sbis	0x1c, 0	; 28
    2f56:	4d cf       	rjmp	.-358    	; 0x2df2 <main+0x250>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/main.cpp:140
    /* character arrives every 400 clocks on a 20MHz reference. */
    /* So we avoid using interrupts here and use polling to gain speed. */
  #if defined(CONFIG_VCP_9BIT_SUPPORT)
    if (bit_is_set(GPCONF, GPCONF_VCP_bp)) usart_transmitter();
  #else
    if (bit_is_set(GPCONF, GPCONF_VCP_bp)) USB::vcp_transceiver();
    2f58:	e1 9b       	sbis	0x1c, 1	; 28
    2f5a:	9f c3       	rjmp	.+1854   	; 0x369a <main+0xaf8>
vcp_transceiver():
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/usb.cpp:503
    if (bit_is_clear(GPCONF, GPCONF_BRK_bp)
  #if defined(CONFIG_VCP_CTS_ENABLE)
     && !digitalReadMacro(PIN_VCP_CTS)
  #endif
     && bit_is_set(USART0_STATUS, USART_DREIF_bp)
     && read_available()) {
    2f5c:	e3 99       	sbic	0x1c, 3	; 28
    2f5e:	14 c0       	rjmp	.+40     	; 0x2f88 <main+0x3e6>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/usb.cpp:502
  void vcp_transceiver (void) {
    if (bit_is_clear(GPCONF, GPCONF_BRK_bp)
  #if defined(CONFIG_VCP_CTS_ENABLE)
     && !digitalReadMacro(PIN_VCP_CTS)
  #endif
     && bit_is_set(USART0_STATUS, USART_DREIF_bp)
    2f60:	80 91 04 08 	lds	r24, 0x0804	; 0x800804 <__TEXT_REGION_LENGTH__+0x7f0804>
    2f64:	85 ff       	sbrs	r24, 5
    2f66:	10 c0       	rjmp	.+32     	; 0x2f88 <main+0x3e6>
read_available():
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/usb.cpp:459
    return _c;
  }

  bool read_available (void) {
    uint8_t _s = 0;
    if (bit_is_set(EP_CDO.STATUS, USB_BUSNAK_bp) && bit_is_set(GPCONF, GPCONF_VCP_bp)) {
    2f68:	80 91 6c 64 	lds	r24, 0x646C	; 0x80646c <EP_TABLE+0x38>
    2f6c:	81 ff       	sbrs	r24, 1
    2f6e:	0c c0       	rjmp	.+24     	; 0x2f88 <main+0x3e6>
    2f70:	e1 9b       	sbis	0x1c, 1	; 28
    2f72:	0a c0       	rjmp	.+20     	; 0x2f88 <main+0x3e6>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/usb.cpp:460
      _s = EP_CDO.CNT - _recv_count;
    2f74:	20 91 6e 64 	lds	r18, 0x646E	; 0x80646e <EP_TABLE+0x3a>
    2f78:	30 91 6f 64 	lds	r19, 0x646F	; 0x80646f <EP_TABLE+0x3b>
    2f7c:	80 91 30 64 	lds	r24, 0x6430	; 0x806430 <_recv_count>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/usb.cpp:461
      if (_s == 0) ep_cdo_listen();
    2f80:	82 13       	cpse	r24, r18
    2f82:	6c c3       	rjmp	.+1752   	; 0x365c <main+0xaba>
    2f84:	0e 94 fc 04 	call	0x9f8	; 0x9f8 <USB::ep_cdo_listen()>
main():
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/main.cpp:145
  #endif
    else USB::read_drop();

    /*** If the break value is between 1 and 65534, it will count down. ***/
    if (bit_is_set(GPCONF, GPCONF_BRK_bp)) USB::cci_break_count();
    2f88:	e3 9b       	sbis	0x1c, 3	; 28
    2f8a:	28 c0       	rjmp	.+80     	; 0x2fdc <main+0x43a>
cci_break_count():
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/usb.cpp:400
    bit_clear(GPCONF, GPCONF_BRK_bp);
  }

  void cci_break_count (void) {
    /* If the break value is between 1 and 65534, it will count down. */
    if ((_send_break + 1) > 1) {
    2f8c:	80 91 32 64 	lds	r24, 0x6432	; 0x806432 <_send_break>
    2f90:	90 91 33 64 	lds	r25, 0x6433	; 0x806433 <_send_break+0x1>
    2f94:	9c 01       	movw	r18, r24
    2f96:	2f 5f       	subi	r18, 0xFF	; 255
    2f98:	3f 4f       	sbci	r19, 0xFF	; 255
    2f9a:	22 30       	cpi	r18, 0x02	; 2
    2f9c:	31 05       	cpc	r19, r1
    2f9e:	f0 f0       	brcs	.+60     	; 0x2fdc <main+0x43a>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/usb.cpp:401
      if (_send_break > USB_CCI_INTERVAL) {
    2fa0:	85 30       	cpi	r24, 0x05	; 5
    2fa2:	91 05       	cpc	r25, r1
    2fa4:	08 f4       	brcc	.+2      	; 0x2fa8 <main+0x406>
    2fa6:	7e c3       	rjmp	.+1788   	; 0x36a4 <main+0xb02>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/usb.cpp:402
        if (bit_is_set(EP_CCI.STATUS, USB_BUSNAK_bp)) ep_cci_listen();
    2fa8:	20 91 64 64 	lds	r18, 0x6464	; 0x806464 <EP_TABLE+0x30>
    2fac:	21 ff       	sbrs	r18, 1
    2fae:	16 c0       	rjmp	.+44     	; 0x2fdc <main+0x43a>
ep_cci_listen():
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/usb.cpp:293
    USB_EP_STATUS_CLR(USB_EP_DPO) = ~USB_TOGGLE_bm;
  }

  void ep_cci_listen (void) {
    if ((_send_break + 1) > 1 && _send_break > USB_CCI_INTERVAL) {
      _send_break -= USB_CCI_INTERVAL;
    2fb0:	04 97       	sbiw	r24, 0x04	; 4
    2fb2:	80 93 32 64 	sts	0x6432, r24	; 0x806432 <_send_break>
    2fb6:	90 93 33 64 	sts	0x6433, r25	; 0x806433 <_send_break+0x1>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/usb.cpp:295
    }
    EP_CCI.CNT = 10;
    2fba:	8a e0       	ldi	r24, 0x0A	; 10
    2fbc:	90 e0       	ldi	r25, 0x00	; 0
    2fbe:	80 93 66 64 	sts	0x6466, r24	; 0x806466 <EP_TABLE+0x32>
    2fc2:	90 93 67 64 	sts	0x6467, r25	; 0x806467 <EP_TABLE+0x33>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/usb.cpp:296
    EP_CCI.MCNT = 0;
    2fc6:	10 92 6a 64 	sts	0x646A, r1	; 0x80646a <EP_TABLE+0x36>
    2fca:	10 92 6b 64 	sts	0x646B, r1	; 0x80646b <EP_TABLE+0x37>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/usb.cpp:297
    loop_until_bit_is_clear(USB0_INTFLAGSB, USB_RMWBUSY_bp);
    2fce:	80 91 0b 0c 	lds	r24, 0x0C0B	; 0x800c0b <__TEXT_REGION_LENGTH__+0x7f0c0b>
    2fd2:	82 fd       	sbrc	r24, 2
    2fd4:	fc cf       	rjmp	.-8      	; 0x2fce <main+0x42c>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/usb.cpp:298
    USB_EP_STATUS_CLR(USB_EP_CCI) = ~USB_TOGGLE_bm;
    2fd6:	8e ef       	ldi	r24, 0xFE	; 254
    2fd8:	80 93 4a 0c 	sts	0x0C4A, r24	; 0x800c4a <__TEXT_REGION_LENGTH__+0x7f0c4a>
is_not_dap():
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/usb.cpp:257
      USB0_CTRLA = USB_ENABLE_bm | (USB_ENDPOINTS_MAX - 1);
    }
  }

  bool is_ep_setup (void) { return bit_is_set(EP_REQ.STATUS, USB_EPSETUP_bp); }
  bool is_not_dap (void) { return bit_is_clear(EP_DPO.STATUS, USB_BUSNAK_bp); }
    2fdc:	80 91 5c 64 	lds	r24, 0x645C	; 0x80645c <EP_TABLE+0x28>
main():
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/main.cpp:148

    /*** If CMSIS-DAP is not received, return to the top. ***/
    if (USB::is_not_dap()) continue;
    2fe0:	81 ff       	sbrs	r24, 1
    2fe2:	04 cf       	rjmp	.-504    	; 0x2dec <main+0x24a>
dap_command_check():
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/jtag.cpp:52
   * Command numbers 0x80 and above are vendor extensions, EDBG Payload uses 0x80 and x81.
   * Additionally, 0x82 is reserved for device event notification.
   */
  bool dap_command_check (void) {
    bool _result = false;
    uint8_t _cmd = EP_MEM.dap_data[0];
    2fe4:	90 91 2e 63 	lds	r25, 0x632E	; 0x80632e <EP_MEM+0x18>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/jtag.cpp:53
    uint8_t _sub = EP_MEM.dap_data[1];
    2fe8:	80 91 2f 63 	lds	r24, 0x632F	; 0x80632f <EP_MEM+0x19>
ep_dpi_pending():
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/usb.cpp:260
  void ep_req_pending (void) { loop_until_bit_is_set(EP_REQ.STATUS, USB_BUSNAK_bp); }
  void ep_res_pending (void) { loop_until_bit_is_set(EP_RES.STATUS, USB_BUSNAK_bp); }
  void ep_dpi_pending (void) { loop_until_bit_is_set(EP_DPI.STATUS, USB_BUSNAK_bp); }
    2fec:	20 91 54 64 	lds	r18, 0x6454	; 0x806454 <EP_TABLE+0x20>
    2ff0:	21 ff       	sbrs	r18, 1
    2ff2:	fc cf       	rjmp	.-8      	; 0x2fec <main+0x44a>
dap_command_check():
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/jtag.cpp:65
     * and the data is sent and received with a fixed length of 64 bytes,
     * determined by the value specified in the HID Report.
     * A maximum of 15 chunks is possible,
     * resulting in a maximum payload length of 900 bytes.
     */
    if (_cmd == 0x80) {             /* DAP_EDBG_VENDOR_AVR_CMD */
    2ff4:	90 38       	cpi	r25, 0x80	; 128
    2ff6:	09 f0       	breq	.+2      	; 0x2ffa <main+0x458>
    2ff8:	2f c4       	rjmp	.+2142   	; 0x3858 <main+0xcb6>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/jtag.cpp:66
      uint8_t _endf = _sub & 0x0F;
    2ffa:	f8 2f       	mov	r31, r24
    2ffc:	ff 70       	andi	r31, 0x0F	; 15
    2ffe:	6f 2e       	mov	r6, r31
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/jtag.cpp:70
      uint8_t _frag = _sub >> 4;
      uint8_t _size = EP_MEM.dap_data[3];
      size_t  _ofst = (_frag - 1) * 60;
      if (_endf >= 10) {
    3000:	29 e0       	ldi	r18, 0x09	; 9
    3002:	2f 17       	cp	r18, r31
    3004:	08 f0       	brcs	.+2      	; 0x3008 <main+0x466>
    3006:	55 c3       	rjmp	.+1706   	; 0x36b2 <main+0xb10>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/jtag.cpp:72
        /* Only a maximum of 540 bytes : 9 fragment records is accepted. */
        D1PRINTF("<EDBG_FAIL>\r\n");
    3008:	8d ec       	ldi	r24, 0xCD	; 205
    300a:	92 e0       	ldi	r25, 0x02	; 2
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/jtag.cpp:94
            _packet_endfrag = 0;
            _result = true;
          }
          else {
            /* A missing chunk is detected, so an error is returned. */
            D1PRINTF("<EDBG_FAIL>\r\n");
    300c:	9f 93       	push	r25
    300e:	8f 93       	push	r24
    3010:	1f 93       	push	r17
    3012:	0f 93       	push	r16
    3014:	0e 94 19 0a 	call	0x1432	; 0x1432 <Print::printf(PGM_t const*, ...) [clone .constprop.22]>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/jtag.cpp:95
            EP_MEM.dap_data[1] = 0x00;  /* EDBG_RSP_FAIL */
    3018:	10 92 2f 63 	sts	0x632F, r1	; 0x80632f <EP_MEM+0x19>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/jtag.cpp:105
    else if (_cmd == 0x81) {        /* DAP_EDBG_VENDOR_AVR_RSP */
      EP_MEM.dap_data[2] = 0;       /* Always zero */
      if (_packet_endfrag == 0) {
        D1PRINTF("<EDBG_EMPTY>\r\n");
        EP_MEM.dap_data[1] = 0;
        EP_MEM.dap_data[3] = 0;
    301c:	0f 90       	pop	r0
    301e:	0f 90       	pop	r0
    3020:	0f 90       	pop	r0
    3022:	0f 90       	pop	r0
    3024:	6e c3       	rjmp	.+1756   	; 0x3702 <main+0xb60>
request_standard():
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/usb.cpp:533
    if (bRequest == 0x00) {       /* GET_STATUS */
      EP_MEM.res_data[0] = 0;
      EP_MEM.res_data[1] = 0;
      EP_RES.CNT = 2;
    }
    else if (bRequest == 0x01) {  /* CLEAR_FEATURE */
    3026:	81 30       	cpi	r24, 0x01	; 1
    3028:	79 f5       	brne	.+94     	; 0x3088 <main+0x4e6>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/usb.cpp:534
      D1PRINTF(" CF=%02X:%02X\r\n", EP_MEM.req_data.wValue, EP_MEM.req_data.wIndex);
    302a:	80 91 1b 63 	lds	r24, 0x631B	; 0x80631b <EP_MEM+0x5>
    302e:	8f 93       	push	r24
    3030:	80 91 1a 63 	lds	r24, 0x631A	; 0x80631a <EP_MEM+0x4>
    3034:	8f 93       	push	r24
    3036:	80 91 19 63 	lds	r24, 0x6319	; 0x806319 <EP_MEM+0x3>
    303a:	8f 93       	push	r24
    303c:	80 91 18 63 	lds	r24, 0x6318	; 0x806318 <EP_MEM+0x2>
    3040:	8f 93       	push	r24
    3042:	86 e2       	ldi	r24, 0x26	; 38
    3044:	92 e0       	ldi	r25, 0x02	; 2
    3046:	9f 93       	push	r25
    3048:	8f 93       	push	r24
    304a:	1f 93       	push	r17
    304c:	0f 93       	push	r16
    304e:	0e 94 19 0a 	call	0x1432	; 0x1432 <Print::printf(PGM_t const*, ...) [clone .constprop.22]>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/usb.cpp:535
      if (0 == (uint8_t)EP_MEM.req_data.wValue) {
    3052:	cd bf       	out	0x3d, r28	; 61
    3054:	de bf       	out	0x3e, r29	; 62
    3056:	80 91 18 63 	lds	r24, 0x6318	; 0x806318 <EP_MEM+0x2>
    305a:	81 11       	cpse	r24, r1
    305c:	10 c0       	rjmp	.+32     	; 0x307e <main+0x4dc>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/usb.cpp:538
        /* Expects an endpoint number to be passed in. Swaps the high and low */
        /* nibbles to make it a representation of the USB controller. */
        uint8_t _EP = USB_EP_ID_SWAP(EP_MEM.req_data.wIndex);
    305e:	e0 91 1a 63 	lds	r30, 0x631A	; 0x80631a <EP_MEM+0x4>
    3062:	e2 95       	swap	r30
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/usb.cpp:539
        loop_until_bit_is_clear(USB0_INTFLAGSB, USB_RMWBUSY_bp);
    3064:	80 91 0b 0c 	lds	r24, 0x0C0B	; 0x800c0b <__TEXT_REGION_LENGTH__+0x7f0c0b>
    3068:	82 fd       	sbrc	r24, 2
    306a:	fc cf       	rjmp	.-8      	; 0x3064 <main+0x4c2>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/usb.cpp:540
        USB_EP_STATUS_CLR(_EP) = USB_STALLED_bm | USB_BUSNAK_bm | USB_TOGGLE_bm;
    306c:	f0 e0       	ldi	r31, 0x00	; 0
    306e:	f5 95       	asr	r31
    3070:	e7 95       	ror	r30
    3072:	f5 95       	asr	r31
    3074:	e7 95       	ror	r30
    3076:	e0 5c       	subi	r30, 0xC0	; 192
    3078:	f3 4f       	sbci	r31, 0xF3	; 243
    307a:	8b e0       	ldi	r24, 0x0B	; 11
    307c:	80 83       	st	Z, r24
request_class():
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/usb.cpp:645
      /* Nothing else is used unless programmed by the application. */
      D1PRINTF(" SB=%04X\r\n", EP_MEM.req_data.wValue);
      _send_break = EP_MEM.req_data.wValue;
      if (_send_break) break_on();
      else break_off();
      EP_RES.CNT = 0;
    307e:	10 92 46 64 	sts	0x6446, r1	; 0x806446 <EP_TABLE+0x12>
    3082:	10 92 47 64 	sts	0x6447, r1	; 0x806447 <EP_TABLE+0x13>
    3086:	2e cf       	rjmp	.-420    	; 0x2ee4 <main+0x342>
request_standard():
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/usb.cpp:544
        loop_until_bit_is_clear(USB0_INTFLAGSB, USB_RMWBUSY_bp);
        USB_EP_STATUS_CLR(_EP) = USB_STALLED_bm | USB_BUSNAK_bm | USB_TOGGLE_bm;
      }
      EP_RES.CNT = 0;
    }
    else if (bRequest == 0x04) {  /* SET_FEATURE */
    3088:	84 30       	cpi	r24, 0x04	; 4
    308a:	d9 f4       	brne	.+54     	; 0x30c2 <main+0x520>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/usb.cpp:546
      /* If used, it will be ignored. */
      D1PRINTF(" SF=%02X:%02X\r\n", EP_MEM.req_data.wValue, EP_MEM.req_data.wIndex);
    308c:	80 91 1b 63 	lds	r24, 0x631B	; 0x80631b <EP_MEM+0x5>
    3090:	8f 93       	push	r24
    3092:	80 91 1a 63 	lds	r24, 0x631A	; 0x80631a <EP_MEM+0x4>
    3096:	8f 93       	push	r24
    3098:	80 91 19 63 	lds	r24, 0x6319	; 0x806319 <EP_MEM+0x3>
    309c:	8f 93       	push	r24
    309e:	80 91 18 63 	lds	r24, 0x6318	; 0x806318 <EP_MEM+0x2>
    30a2:	8f 93       	push	r24
    30a4:	86 e1       	ldi	r24, 0x16	; 22
    30a6:	92 e0       	ldi	r25, 0x02	; 2
    30a8:	9f 93       	push	r25
    30aa:	8f 93       	push	r24
    30ac:	1f 93       	push	r17
    30ae:	0f 93       	push	r16
    30b0:	0e 94 19 0a 	call	0x1432	; 0x1432 <Print::printf(PGM_t const*, ...) [clone .constprop.22]>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/usb.cpp:547
      EP_RES.CNT = 0;
    30b4:	10 92 46 64 	sts	0x6446, r1	; 0x806446 <EP_TABLE+0x12>
    30b8:	10 92 47 64 	sts	0x6447, r1	; 0x806447 <EP_TABLE+0x13>
    30bc:	cd bf       	out	0x3d, r28	; 61
    30be:	de bf       	out	0x3e, r29	; 62
    30c0:	11 cf       	rjmp	.-478    	; 0x2ee4 <main+0x342>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/usb.cpp:549
    }
    else if (bRequest == 0x05) {  /* SET_ADDRESS */
    30c2:	85 30       	cpi	r24, 0x05	; 5
    30c4:	e1 f4       	brne	.+56     	; 0x30fe <main+0x55c>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/usb.cpp:550
      uint8_t _addr = EP_MEM.req_data.wValue & 0x7F;
    30c6:	80 91 18 63 	lds	r24, 0x6318	; 0x806318 <EP_MEM+0x2>
    30ca:	f8 2e       	mov	r15, r24
    30cc:	e8 94       	clt
    30ce:	f7 f8       	bld	r15, 7
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/usb.cpp:551
      ep_res_listen();
    30d0:	0e 94 41 05 	call	0xa82	; 0xa82 <USB::ep_res_listen()>
ep_res_pending():
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/usb.cpp:259
  }

  bool is_ep_setup (void) { return bit_is_set(EP_REQ.STATUS, USB_EPSETUP_bp); }
  bool is_not_dap (void) { return bit_is_clear(EP_DPO.STATUS, USB_BUSNAK_bp); }
  void ep_req_pending (void) { loop_until_bit_is_set(EP_REQ.STATUS, USB_BUSNAK_bp); }
  void ep_res_pending (void) { loop_until_bit_is_set(EP_RES.STATUS, USB_BUSNAK_bp); }
    30d4:	80 91 44 64 	lds	r24, 0x6444	; 0x806444 <EP_TABLE+0x10>
    30d8:	81 ff       	sbrs	r24, 1
    30da:	fc cf       	rjmp	.-8      	; 0x30d4 <main+0x532>
request_standard():
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/usb.cpp:553
    }
    else if (bRequest == 0x05) {  /* SET_ADDRESS */
      uint8_t _addr = EP_MEM.req_data.wValue & 0x7F;
      ep_res_listen();
      ep_res_pending();
      USB0_ADDR = _addr;
    30dc:	f0 92 03 0c 	sts	0x0C03, r15	; 0x800c03 <__TEXT_REGION_LENGTH__+0x7f0c03>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/usb.cpp:554
      D1PRINTF(" USB0_ADDR=%d\r\n", _addr);
    30e0:	1f 92       	push	r1
    30e2:	ff 92       	push	r15
    30e4:	86 e0       	ldi	r24, 0x06	; 6
    30e6:	92 e0       	ldi	r25, 0x02	; 2
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/usb.cpp:573
    else if (bRequest == 0x09) {  /* SET_CONFIGURATION */
      /* Once the USB connection is fully initiated, it will go through here. */
      _set_config = (uint8_t)EP_MEM.req_data.wValue;
      bit_set(GPCONF, GPCONF_USB_bp);
      SYS::LED_HeartBeat();
      D1PRINTF("<SC:%02X>\r\n", _set_config);
    30e8:	9f 93       	push	r25
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/usb.cpp:584
      EP_MEM.res_data[0] = 0;
      EP_RES.CNT = 1;
    }
    else if (bRequest == 0x0B) {  /* SET_INTREFACE */
      /* It seems not to be used. */
      D1PRINTF("<GI:%02X>\r\n", EP_MEM.req_data.wValue);
    30ea:	8f 93       	push	r24
    30ec:	1f 93       	push	r17
    30ee:	0f 93       	push	r16
    30f0:	0e 94 19 0a 	call	0x1432	; 0x1432 <Print::printf(PGM_t const*, ...) [clone .constprop.22]>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/usb.cpp:585
      EP_RES.CNT = 0;
    30f4:	10 92 46 64 	sts	0x6446, r1	; 0x806446 <EP_TABLE+0x12>
    30f8:	10 92 47 64 	sts	0x6447, r1	; 0x806447 <EP_TABLE+0x13>
    30fc:	61 c1       	rjmp	.+706    	; 0x33c0 <main+0x81e>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/usb.cpp:557
      ep_res_pending();
      USB0_ADDR = _addr;
      D1PRINTF(" USB0_ADDR=%d\r\n", _addr);
      EP_RES.CNT = 0;
    }
    else if (bRequest == 0x06) {  /* GET_DESCRIPTOR */
    30fe:	86 30       	cpi	r24, 0x06	; 6
    3100:	09 f0       	breq	.+2      	; 0x3104 <main+0x562>
    3102:	4a c1       	rjmp	.+660    	; 0x3398 <main+0x7f6>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/usb.cpp:558
      size_t _length = EP_MEM.req_data.wLength;
    3104:	40 90 1c 63 	lds	r4, 0x631C	; 0x80631c <EP_MEM+0x6>
    3108:	30 91 1d 63 	lds	r19, 0x631D	; 0x80631d <EP_MEM+0x7>
    310c:	3d 83       	std	Y+5, r19	; 0x05
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/usb.cpp:559
      size_t _size = get_descriptor((uint8_t*)&EP_MEM.res_data, EP_MEM.req_data.wValue);
    310e:	80 91 18 63 	lds	r24, 0x6318	; 0x806318 <EP_MEM+0x2>
    3112:	90 91 19 63 	lds	r25, 0x6319	; 0x806319 <EP_MEM+0x3>
get_descriptor():
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/usb.cpp:154

  size_t get_descriptor (uint8_t* _buffer, uint16_t _index) {
    uint8_t* _pgmem = 0;
    size_t   _size = 0;
    uint8_t  _type = _index >> 8;
    if (_type == 0x01) {          /* DEVICE */
    3116:	91 30       	cpi	r25, 0x01	; 1
    3118:	09 f0       	breq	.+2      	; 0x311c <main+0x57a>
    311a:	61 c0       	rjmp	.+194    	; 0x31de <main+0x63c>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/usb.cpp:157
      _pgmem = (uint8_t*)&device_descriptor;
      _size = sizeof(device_descriptor);
      memcpy_P(_buffer, _pgmem, _size);
    311c:	42 e1       	ldi	r20, 0x12	; 18
    311e:	50 e0       	ldi	r21, 0x00	; 0
    3120:	67 ec       	ldi	r22, 0xC7	; 199
    3122:	71 e0       	ldi	r23, 0x01	; 1
    3124:	8e e1       	ldi	r24, 0x1E	; 30
    3126:	93 e6       	ldi	r25, 0x63	; 99
    3128:	0e 94 7d 21 	call	0x42fa	; 0x42fa <memcpy_P>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/usb.cpp:158
      uint32_t _vidpid = *((uint32_t*)EEPROM_START);
    312c:	80 91 00 14 	lds	r24, 0x1400	; 0x801400 <__TEXT_REGION_LENGTH__+0x7f1400>
    3130:	90 91 01 14 	lds	r25, 0x1401	; 0x801401 <__TEXT_REGION_LENGTH__+0x7f1401>
    3134:	a0 91 02 14 	lds	r26, 0x1402	; 0x801402 <__TEXT_REGION_LENGTH__+0x7f1402>
    3138:	b0 91 03 14 	lds	r27, 0x1403	; 0x801403 <__TEXT_REGION_LENGTH__+0x7f1403>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/usb.cpp:159
      if (_vidpid + 1) _CAPS32(_buffer[8])->dword = _vidpid;
    313c:	8f 3f       	cpi	r24, 0xFF	; 255
    313e:	4f ef       	ldi	r20, 0xFF	; 255
    3140:	94 07       	cpc	r25, r20
    3142:	a4 07       	cpc	r26, r20
    3144:	b4 07       	cpc	r27, r20
    3146:	41 f0       	breq	.+16     	; 0x3158 <main+0x5b6>
    3148:	80 93 26 63 	sts	0x6326, r24	; 0x806326 <EP_MEM+0x10>
    314c:	90 93 27 63 	sts	0x6327, r25	; 0x806327 <EP_MEM+0x11>
    3150:	a0 93 28 63 	sts	0x6328, r26	; 0x806328 <EP_MEM+0x12>
    3154:	b0 93 29 63 	sts	0x6329, r27	; 0x806329 <EP_MEM+0x13>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/usb.cpp:160
      D1PRINTF(" VID:PID=%04X:%04X\r\n", _CAPS16(_buffer[8])->word, _CAPS16(_buffer[10])->word);
    3158:	80 91 29 63 	lds	r24, 0x6329	; 0x806329 <EP_MEM+0x13>
    315c:	8f 93       	push	r24
    315e:	80 91 28 63 	lds	r24, 0x6328	; 0x806328 <EP_MEM+0x12>
    3162:	8f 93       	push	r24
    3164:	80 91 27 63 	lds	r24, 0x6327	; 0x806327 <EP_MEM+0x11>
    3168:	8f 93       	push	r24
    316a:	80 91 26 63 	lds	r24, 0x6326	; 0x806326 <EP_MEM+0x10>
    316e:	8f 93       	push	r24
    3170:	82 eb       	ldi	r24, 0xB2	; 178
    3172:	91 e0       	ldi	r25, 0x01	; 1
    3174:	9f 93       	push	r25
    3176:	8f 93       	push	r24
    3178:	1f 93       	push	r17
    317a:	0f 93       	push	r16
    317c:	0e 94 19 0a 	call	0x1432	; 0x1432 <Print::printf(PGM_t const*, ...) [clone .constprop.22]>
    3180:	cd bf       	out	0x3d, r28	; 61
    3182:	de bf       	out	0x3e, r29	; 62
main():
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/usb.cpp:161
      return _size;
    3184:	72 e1       	ldi	r23, 0x12	; 18
    3186:	e7 2e       	mov	r14, r23
    3188:	f1 2c       	mov	r15, r1
    318a:	84 2d       	mov	r24, r4
    318c:	9d 81       	ldd	r25, Y+5	; 0x05
    318e:	e8 16       	cp	r14, r24
    3190:	f9 06       	cpc	r15, r25
    3192:	08 f4       	brcc	.+2      	; 0x3196 <main+0x5f4>
    3194:	c7 01       	movw	r24, r14
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/usb.cpp:185
      _size = 4;
      *_buffer++ = 4;
      *_buffer++ = 3;
      *_buffer++ = 0x09;
      *_buffer++ = 0x04;
      return _size;
    3196:	97 01       	movw	r18, r14
    3198:	7c 01       	movw	r14, r24
request_standard():
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/usb.cpp:560
      EP_RES.CNT = 0;
    }
    else if (bRequest == 0x06) {  /* GET_DESCRIPTOR */
      size_t _length = EP_MEM.req_data.wLength;
      size_t _size = get_descriptor((uint8_t*)&EP_MEM.res_data, EP_MEM.req_data.wValue);
      EP_RES.CNT = (_size > _length) ? _length : _size;
    319a:	e0 92 46 64 	sts	0x6446, r14	; 0x806446 <EP_TABLE+0x12>
    319e:	f0 92 47 64 	sts	0x6447, r15	; 0x806447 <EP_TABLE+0x13>
handling_control_transactions():
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/usb.cpp:676
  #ifdef _Not_being_used_STUB_
    else if (bmRequestType == (2 << 5)) {
      _listen = request_vendor();
    }
  #endif
    if (_listen) {
    31a2:	23 2b       	or	r18, r19
    31a4:	09 f0       	breq	.+2      	; 0x31a8 <main+0x606>
    31a6:	9e ce       	rjmp	.-708    	; 0x2ee4 <main+0x342>
ep0_stalled():
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/usb.cpp:362
    loop_until_bit_is_clear(USB0_INTFLAGSB, USB_RMWBUSY_bp);
    USB_EP_STATUS_CLR(USB_EP_CDO) = ~USB_TOGGLE_bm;
  }

  void ep0_stalled (void) {
    D1PRINTF("[STALLED]\r\n");
    31a8:	85 e6       	ldi	r24, 0x65	; 101
    31aa:	92 e0       	ldi	r25, 0x02	; 2
    31ac:	9f 93       	push	r25
    31ae:	8f 93       	push	r24
    31b0:	1f 93       	push	r17
    31b2:	0f 93       	push	r16
    31b4:	0e 94 19 0a 	call	0x1432	; 0x1432 <Print::printf(PGM_t const*, ...) [clone .constprop.22]>
    31b8:	0f 90       	pop	r0
    31ba:	0f 90       	pop	r0
    31bc:	0f 90       	pop	r0
    31be:	0f 90       	pop	r0
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/usb.cpp:363
    loop_until_bit_is_clear(USB0_INTFLAGSB, USB_RMWBUSY_bp);
    31c0:	80 91 0b 0c 	lds	r24, 0x0C0B	; 0x800c0b <__TEXT_REGION_LENGTH__+0x7f0c0b>
    31c4:	82 fd       	sbrc	r24, 2
    31c6:	fc cf       	rjmp	.-8      	; 0x31c0 <main+0x61e>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/usb.cpp:364
    USB_EP_STATUS_SET(USB_EP_RES) = USB_STALLED_bm;
    31c8:	88 e0       	ldi	r24, 0x08	; 8
    31ca:	80 93 43 0c 	sts	0x0C43, r24	; 0x800c43 <__TEXT_REGION_LENGTH__+0x7f0c43>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/usb.cpp:365
    loop_until_bit_is_clear(USB0_INTFLAGSB, USB_RMWBUSY_bp);
    31ce:	80 91 0b 0c 	lds	r24, 0x0C0B	; 0x800c0b <__TEXT_REGION_LENGTH__+0x7f0c0b>
    31d2:	82 fd       	sbrc	r24, 2
    31d4:	fc cf       	rjmp	.-8      	; 0x31ce <main+0x62c>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/usb.cpp:366
    USB_EP_STATUS_SET(USB_EP_REQ) = USB_STALLED_bm;
    31d6:	88 e0       	ldi	r24, 0x08	; 8
    31d8:	80 93 41 0c 	sts	0x0C41, r24	; 0x800c41 <__TEXT_REGION_LENGTH__+0x7f0c41>
    31dc:	87 ce       	rjmp	.-754    	; 0x2eec <main+0x34a>
get_descriptor():
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/usb.cpp:163
      uint32_t _vidpid = *((uint32_t*)EEPROM_START);
      if (_vidpid + 1) _CAPS32(_buffer[8])->dword = _vidpid;
      D1PRINTF(" VID:PID=%04X:%04X\r\n", _CAPS16(_buffer[8])->word, _CAPS16(_buffer[10])->word);
      return _size;
    }
    else if (_type == 0x02) {     /* CONFIGURATION */
    31de:	92 30       	cpi	r25, 0x02	; 2
    31e0:	09 f4       	brne	.+2      	; 0x31e4 <main+0x642>
    31e2:	be c0       	rjmp	.+380    	; 0x3360 <main+0x7be>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/usb.cpp:167
      _pgmem = (uint8_t*)&current_descriptor;
      _size = sizeof(current_descriptor);
    }
    else if (_type == 0x06) {     /* QUALIFIER */
    31e4:	96 30       	cpi	r25, 0x06	; 6
    31e6:	09 f4       	brne	.+2      	; 0x31ea <main+0x648>
    31e8:	c5 c0       	rjmp	.+394    	; 0x3374 <main+0x7d2>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/usb.cpp:171
      _pgmem = (uint8_t*)&qualifier_descriptor;
      _size = sizeof(qualifier_descriptor);
    }
    else if (_type == 0x21) {     /* HID */
    31ea:	91 32       	cpi	r25, 0x21	; 33
    31ec:	09 f4       	brne	.+2      	; 0x31f0 <main+0x64e>
    31ee:	c8 c0       	rjmp	.+400    	; 0x3380 <main+0x7de>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/usb.cpp:175
      _pgmem = (uint8_t*)&current_descriptor + 18;
      _size = 9;
    }
    else if (_type == 0x22) {     /* REPORT */
    31f0:	92 32       	cpi	r25, 0x22	; 34
    31f2:	09 f4       	brne	.+2      	; 0x31f6 <main+0x654>
    31f4:	cb c0       	rjmp	.+406    	; 0x338c <main+0x7ea>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/usb.cpp:179
      _pgmem = (uint8_t*)&report_descriptor;
      _size = sizeof(report_descriptor);
    }
    else if (_index == 0x0300) {  /* LANGUAGE */
    31f6:	81 15       	cp	r24, r1
    31f8:	e3 e0       	ldi	r30, 0x03	; 3
    31fa:	9e 07       	cpc	r25, r30
    31fc:	79 f4       	brne	.+30     	; 0x321c <main+0x67a>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/usb.cpp:181
      _size = 4;
      *_buffer++ = 4;
    31fe:	84 e0       	ldi	r24, 0x04	; 4
    3200:	80 93 1e 63 	sts	0x631E, r24	; 0x80631e <EP_MEM+0x8>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/usb.cpp:182
      *_buffer++ = 3;
    3204:	93 e0       	ldi	r25, 0x03	; 3
    3206:	90 93 1f 63 	sts	0x631F, r25	; 0x80631f <EP_MEM+0x9>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/usb.cpp:183
      *_buffer++ = 0x09;
    320a:	99 e0       	ldi	r25, 0x09	; 9
    320c:	90 93 20 63 	sts	0x6320, r25	; 0x806320 <EP_MEM+0xa>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/usb.cpp:184
      *_buffer++ = 0x04;
    3210:	80 93 21 63 	sts	0x6321, r24	; 0x806321 <EP_MEM+0xb>
main():
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/usb.cpp:185
      return _size;
    3214:	64 e0       	ldi	r22, 0x04	; 4
    3216:	e6 2e       	mov	r14, r22
    3218:	f1 2c       	mov	r15, r1
    321a:	b7 cf       	rjmp	.-146    	; 0x318a <main+0x5e8>
get_descriptor():
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/usb.cpp:188
    }
    else {
      switch (_index) {
    321c:	82 30       	cpi	r24, 0x02	; 2
    321e:	f3 e0       	ldi	r31, 0x03	; 3
    3220:	9f 07       	cpc	r25, r31
    3222:	51 f1       	breq	.+84     	; 0x3278 <main+0x6d6>
    3224:	68 f4       	brcc	.+26     	; 0x3240 <main+0x69e>
main():
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/usb.cpp:189
        case 0x0301: _pgmem = (uint8_t*)&vstring; _size = sizeof(vstring); break;
    3226:	b4 e3       	ldi	r27, 0x34	; 52
    3228:	eb 2e       	mov	r14, r27
    322a:	f1 2c       	mov	r15, r1
    322c:	66 ee       	ldi	r22, 0xE6	; 230
    322e:	70 e0       	ldi	r23, 0x00	; 0
get_descriptor():
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/usb.cpp:188
      *_buffer++ = 0x09;
      *_buffer++ = 0x04;
      return _size;
    }
    else {
      switch (_index) {
    3230:	81 30       	cpi	r24, 0x01	; 1
    3232:	93 40       	sbci	r25, 0x03	; 3
    3234:	81 f0       	breq	.+32     	; 0x3256 <main+0x6b4>
main():
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/usb.cpp:152
    { /* FRAMENUM */ }
  };

  size_t get_descriptor (uint8_t* _buffer, uint16_t _index) {
    uint8_t* _pgmem = 0;
    size_t   _size = 0;
    3236:	f1 2c       	mov	r15, r1
    3238:	e1 2c       	mov	r14, r1
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/usb.cpp:151
    },
    { /* FRAMENUM */ }
  };

  size_t get_descriptor (uint8_t* _buffer, uint16_t _index) {
    uint8_t* _pgmem = 0;
    323a:	70 e0       	ldi	r23, 0x00	; 0
    323c:	60 e0       	ldi	r22, 0x00	; 0
    323e:	0b c0       	rjmp	.+22     	; 0x3256 <main+0x6b4>
get_descriptor():
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/usb.cpp:188
      *_buffer++ = 0x09;
      *_buffer++ = 0x04;
      return _size;
    }
    else {
      switch (_index) {
    3240:	83 30       	cpi	r24, 0x03	; 3
    3242:	98 07       	cpc	r25, r24
    3244:	f9 f0       	breq	.+62     	; 0x3284 <main+0x6e2>
main():
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/usb.cpp:191
        case 0x0301: _pgmem = (uint8_t*)&vstring; _size = sizeof(vstring); break;
        case 0x0302: _pgmem = (uint8_t*)&mstring; _size = sizeof(mstring); break;
        case 0x0304: _pgmem = (uint8_t*)&istring; _size = sizeof(istring); break;
    3246:	48 e1       	ldi	r20, 0x18	; 24
    3248:	e4 2e       	mov	r14, r20
    324a:	f1 2c       	mov	r15, r1
    324c:	68 e8       	ldi	r22, 0x88	; 136
    324e:	70 e0       	ldi	r23, 0x00	; 0
get_descriptor():
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/usb.cpp:188
      *_buffer++ = 0x09;
      *_buffer++ = 0x04;
      return _size;
    }
    else {
      switch (_index) {
    3250:	84 30       	cpi	r24, 0x04	; 4
    3252:	93 40       	sbci	r25, 0x03	; 3
    3254:	81 f7       	brne	.-32     	; 0x3236 <main+0x694>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/usb.cpp:215
            *_buffer++ = btoh(_c     ); *_buffer++ = 0;
          }
          return 22;
        }
      }
      *_buffer++ = (uint8_t)_size;
    3256:	e0 92 1e 63 	sts	0x631E, r14	; 0x80631e <EP_MEM+0x8>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/usb.cpp:216
      *_buffer++ = 3;
    325a:	83 e0       	ldi	r24, 0x03	; 3
    325c:	80 93 1f 63 	sts	0x631F, r24	; 0x80631f <EP_MEM+0x9>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/usb.cpp:217
      if (_size) memcpy_P(_buffer, _pgmem, _size - 2);
    3260:	a7 01       	movw	r20, r14
    3262:	42 50       	subi	r20, 0x02	; 2
    3264:	51 09       	sbc	r21, r1
    3266:	80 e2       	ldi	r24, 0x20	; 32
    3268:	93 e6       	ldi	r25, 0x63	; 99
    326a:	e1 14       	cp	r14, r1
    326c:	f1 04       	cpc	r15, r1
    326e:	09 f0       	breq	.+2      	; 0x3272 <main+0x6d0>
    3270:	7f c0       	rjmp	.+254    	; 0x3370 <main+0x7ce>
    3272:	30 e0       	ldi	r19, 0x00	; 0
    3274:	20 e0       	ldi	r18, 0x00	; 0
    3276:	91 cf       	rjmp	.-222    	; 0x319a <main+0x5f8>
main():
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/usb.cpp:190
      return _size;
    }
    else {
      switch (_index) {
        case 0x0301: _pgmem = (uint8_t*)&vstring; _size = sizeof(vstring); break;
        case 0x0302: _pgmem = (uint8_t*)&mstring; _size = sizeof(mstring); break;
    3278:	56 e4       	ldi	r21, 0x46	; 70
    327a:	e5 2e       	mov	r14, r21
    327c:	f1 2c       	mov	r15, r1
    327e:	60 ea       	ldi	r22, 0xA0	; 160
    3280:	70 e0       	ldi	r23, 0x00	; 0
    3282:	e9 cf       	rjmp	.-46     	; 0x3256 <main+0x6b4>
get_descriptor():
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/usb.cpp:201
           *
           * If the 4 bytes from offset 4 of the EEPROM are anything other
           * than 0xFFFF:FFFF, use them, otherwise generate a 32-bit random
           * serial number using CRC32 from the factory information.
           */
          uint32_t _sn = ((User_EEP_t*)EEPROM_START)->dwSerialNumber;
    3284:	40 91 04 14 	lds	r20, 0x1404	; 0x801404 <__TEXT_REGION_LENGTH__+0x7f1404>
    3288:	50 91 05 14 	lds	r21, 0x1405	; 0x801405 <__TEXT_REGION_LENGTH__+0x7f1405>
    328c:	60 91 06 14 	lds	r22, 0x1406	; 0x801406 <__TEXT_REGION_LENGTH__+0x7f1406>
    3290:	70 91 07 14 	lds	r23, 0x1407	; 0x801407 <__TEXT_REGION_LENGTH__+0x7f1407>
    3294:	49 83       	std	Y+1, r20	; 0x01
    3296:	5a 83       	std	Y+2, r21	; 0x02
    3298:	6b 83       	std	Y+3, r22	; 0x03
    329a:	7c 83       	std	Y+4, r23	; 0x04
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/usb.cpp:202
          if (!(_sn + 1)) _sn = crc32((uint8_t*)SIGNATURES_START, 32);
    329c:	4f 3f       	cpi	r20, 0xFF	; 255
    329e:	ff ef       	ldi	r31, 0xFF	; 255
    32a0:	5f 07       	cpc	r21, r31
    32a2:	6f 07       	cpc	r22, r31
    32a4:	7f 07       	cpc	r23, r31
    32a6:	51 f5       	brne	.+84     	; 0x32fc <main+0x75a>
main():
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/modernAVR/0.2.14/cores/modernAVR/api/cpp/btools.cpp:210
  return _crc;
}

uint32_t crc32 (void* _data, size_t _len) {
  uint32_t _crc = ~0;
  uint8_t* _p = (uint8_t*)_data;
    32a8:	e0 e8       	ldi	r30, 0x80	; 128
    32aa:	f0 e1       	ldi	r31, 0x10	; 16
crc32():
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/modernAVR/0.2.14/cores/modernAVR/api/cpp/btools.cpp:211
  while (_len--) _crc = _crc32_update(_crc, *_p++);
    32ac:	cf 01       	movw	r24, r30
    32ae:	01 96       	adiw	r24, 0x01	; 1
_crc32_update():
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/modernAVR/0.2.14/cores/modernAVR/api/cpp/btools.cpp:201
}

/* x32 + x26 + x23 + x22 + x16 + x12 + x11 + x10 + x8 + x7 + x5 + x4 + x2 + x + 1 */
/* (0xEDB88320 rev) init -1 */
uint32_t _crc32_update (uint32_t _crc, uint8_t _data) {
  _crc ^= _data;
    32b0:	20 81       	ld	r18, Z
    32b2:	42 27       	eor	r20, r18
    32b4:	28 e0       	ldi	r18, 0x08	; 8
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/modernAVR/0.2.14/cores/modernAVR/api/cpp/btools.cpp:203
  for (uint8_t j = 0; j < 8; j++) {
    _crc = (_crc >> 1) ^ (0xEDB88320UL & -(_crc & 1));
    32b6:	6a 01       	movw	r12, r20
    32b8:	7b 01       	movw	r14, r22
    32ba:	f6 94       	lsr	r15
    32bc:	e7 94       	ror	r14
    32be:	d7 94       	ror	r13
    32c0:	c7 94       	ror	r12
    32c2:	41 70       	andi	r20, 0x01	; 1
    32c4:	55 27       	eor	r21, r21
    32c6:	66 27       	eor	r22, r22
    32c8:	77 27       	eor	r23, r23
    32ca:	70 95       	com	r23
    32cc:	60 95       	com	r22
    32ce:	50 95       	com	r21
    32d0:	41 95       	neg	r20
    32d2:	5f 4f       	sbci	r21, 0xFF	; 255
    32d4:	6f 4f       	sbci	r22, 0xFF	; 255
    32d6:	7f 4f       	sbci	r23, 0xFF	; 255
    32d8:	40 72       	andi	r20, 0x20	; 32
    32da:	53 78       	andi	r21, 0x83	; 131
    32dc:	68 7b       	andi	r22, 0xB8	; 184
    32de:	7d 7e       	andi	r23, 0xED	; 237
    32e0:	4c 25       	eor	r20, r12
    32e2:	5d 25       	eor	r21, r13
    32e4:	6e 25       	eor	r22, r14
    32e6:	7f 25       	eor	r23, r15
    32e8:	21 50       	subi	r18, 0x01	; 1
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/modernAVR/0.2.14/cores/modernAVR/api/cpp/btools.cpp:202

/* x32 + x26 + x23 + x22 + x16 + x12 + x11 + x10 + x8 + x7 + x5 + x4 + x2 + x + 1 */
/* (0xEDB88320 rev) init -1 */
uint32_t _crc32_update (uint32_t _crc, uint8_t _data) {
  _crc ^= _data;
  for (uint8_t j = 0; j < 8; j++) {
    32ea:	29 f7       	brne	.-54     	; 0x32b6 <main+0x714>
    32ec:	fc 01       	movw	r30, r24
crc32():
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/modernAVR/0.2.14/cores/modernAVR/api/cpp/btools.cpp:211
}

uint32_t crc32 (void* _data, size_t _len) {
  uint32_t _crc = ~0;
  uint8_t* _p = (uint8_t*)_data;
  while (_len--) _crc = _crc32_update(_crc, *_p++);
    32ee:	80 3a       	cpi	r24, 0xA0	; 160
    32f0:	90 41       	sbci	r25, 0x10	; 16
    32f2:	e1 f6       	brne	.-72     	; 0x32ac <main+0x70a>
get_descriptor():
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/usb.cpp:202
    32f4:	49 83       	std	Y+1, r20	; 0x01
    32f6:	5a 83       	std	Y+2, r21	; 0x02
    32f8:	6b 83       	std	Y+3, r22	; 0x03
    32fa:	7c 83       	std	Y+4, r23	; 0x04
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/usb.cpp:204
          uint8_t* _p = (uint8_t*)&_sn;
          *_buffer++ = 22;  *_buffer++ = 3;
    32fc:	86 e1       	ldi	r24, 0x16	; 22
    32fe:	80 93 1e 63 	sts	0x631E, r24	; 0x80631e <EP_MEM+0x8>
    3302:	83 e0       	ldi	r24, 0x03	; 3
    3304:	80 93 1f 63 	sts	0x631F, r24	; 0x80631f <EP_MEM+0x9>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/usb.cpp:205
          *_buffer++ = 'M'; *_buffer++ = 0;
    3308:	8d e4       	ldi	r24, 0x4D	; 77
    330a:	80 93 20 63 	sts	0x6320, r24	; 0x806320 <EP_MEM+0xa>
    330e:	10 92 21 63 	sts	0x6321, r1	; 0x806321 <EP_MEM+0xb>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/usb.cpp:206
          *_buffer++ = 'X'; *_buffer++ = 0;
    3312:	88 e5       	ldi	r24, 0x58	; 88
    3314:	80 93 22 63 	sts	0x6322, r24	; 0x806322 <EP_MEM+0xc>
    3318:	10 92 23 63 	sts	0x6323, r1	; 0x806323 <EP_MEM+0xd>
    331c:	94 e2       	ldi	r25, 0x24	; 36
    331e:	e9 2e       	mov	r14, r25
    3320:	93 e6       	ldi	r25, 0x63	; 99
    3322:	f9 2e       	mov	r15, r25
    3324:	ce 01       	movw	r24, r28
    3326:	01 96       	adiw	r24, 0x01	; 1
    3328:	6c 01       	movw	r12, r24
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/usb.cpp:208
          for (uint8_t _i = 0; _i < 4; _i++) {
            uint8_t _c = *_p++;
    332a:	f6 01       	movw	r30, r12
    332c:	51 90       	ld	r5, Z+
    332e:	6f 01       	movw	r12, r30
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/usb.cpp:209
            *_buffer++ = btoh(_c >> 4); *_buffer++ = 0;
    3330:	85 2d       	mov	r24, r5
    3332:	82 95       	swap	r24
    3334:	8f 70       	andi	r24, 0x0F	; 15
    3336:	0e 94 e2 04 	call	0x9c4	; 0x9c4 <btoh>
    333a:	f7 01       	movw	r30, r14
    333c:	80 83       	st	Z, r24
    333e:	11 82       	std	Z+1, r1	; 0x01
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/usb.cpp:210
            *_buffer++ = btoh(_c     ); *_buffer++ = 0;
    3340:	85 2d       	mov	r24, r5
    3342:	0e 94 e2 04 	call	0x9c4	; 0x9c4 <btoh>
    3346:	f7 01       	movw	r30, r14
    3348:	82 83       	std	Z+2, r24	; 0x02
    334a:	13 82       	std	Z+3, r1	; 0x03
    334c:	f4 e0       	ldi	r31, 0x04	; 4
    334e:	ef 0e       	add	r14, r31
    3350:	f1 1c       	adc	r15, r1
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/usb.cpp:207
          if (!(_sn + 1)) _sn = crc32((uint8_t*)SIGNATURES_START, 32);
          uint8_t* _p = (uint8_t*)&_sn;
          *_buffer++ = 22;  *_buffer++ = 3;
          *_buffer++ = 'M'; *_buffer++ = 0;
          *_buffer++ = 'X'; *_buffer++ = 0;
          for (uint8_t _i = 0; _i < 4; _i++) {
    3352:	2c 14       	cp	r2, r12
    3354:	3d 04       	cpc	r3, r13
    3356:	49 f7       	brne	.-46     	; 0x332a <main+0x788>
main():
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/usb.cpp:212
            uint8_t _c = *_p++;
            *_buffer++ = btoh(_c >> 4); *_buffer++ = 0;
            *_buffer++ = btoh(_c     ); *_buffer++ = 0;
          }
          return 22;
    3358:	86 e1       	ldi	r24, 0x16	; 22
    335a:	e8 2e       	mov	r14, r24
    335c:	f1 2c       	mov	r15, r1
    335e:	15 cf       	rjmp	.-470    	; 0x318a <main+0x5e8>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/usb.cpp:165
      D1PRINTF(" VID:PID=%04X:%04X\r\n", _CAPS16(_buffer[8])->word, _CAPS16(_buffer[10])->word);
      return _size;
    }
    else if (_type == 0x02) {     /* CONFIGURATION */
      _pgmem = (uint8_t*)&current_descriptor;
      _size = sizeof(current_descriptor);
    3360:	ab e6       	ldi	r26, 0x6B	; 107
    3362:	ea 2e       	mov	r14, r26
    3364:	f1 2c       	mov	r15, r1
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/usb.cpp:164
      if (_vidpid + 1) _CAPS32(_buffer[8])->dword = _vidpid;
      D1PRINTF(" VID:PID=%04X:%04X\r\n", _CAPS16(_buffer[8])->word, _CAPS16(_buffer[10])->word);
      return _size;
    }
    else if (_type == 0x02) {     /* CONFIGURATION */
      _pgmem = (uint8_t*)&current_descriptor;
    3366:	6d e3       	ldi	r22, 0x3D	; 61
    3368:	71 e0       	ldi	r23, 0x01	; 1
get_descriptor():
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/usb.cpp:220
      *_buffer++ = (uint8_t)_size;
      *_buffer++ = 3;
      if (_size) memcpy_P(_buffer, _pgmem, _size - 2);
      return _size;
    }
    if (_size) memcpy_P(_buffer, _pgmem, _size);
    336a:	a7 01       	movw	r20, r14
    336c:	8e e1       	ldi	r24, 0x1E	; 30
    336e:	93 e6       	ldi	r25, 0x63	; 99
    3370:	c4 d7       	rcall	.+3976   	; 0x42fa <memcpy_P>
    3372:	0b cf       	rjmp	.-490    	; 0x318a <main+0x5e8>
main():
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/usb.cpp:169
      _pgmem = (uint8_t*)&current_descriptor;
      _size = sizeof(current_descriptor);
    }
    else if (_type == 0x06) {     /* QUALIFIER */
      _pgmem = (uint8_t*)&qualifier_descriptor;
      _size = sizeof(qualifier_descriptor);
    3374:	fa e0       	ldi	r31, 0x0A	; 10
    3376:	ef 2e       	mov	r14, r31
    3378:	f1 2c       	mov	r15, r1
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/usb.cpp:168
    else if (_type == 0x02) {     /* CONFIGURATION */
      _pgmem = (uint8_t*)&current_descriptor;
      _size = sizeof(current_descriptor);
    }
    else if (_type == 0x06) {     /* QUALIFIER */
      _pgmem = (uint8_t*)&qualifier_descriptor;
    337a:	68 ea       	ldi	r22, 0xA8	; 168
    337c:	71 e0       	ldi	r23, 0x01	; 1
    337e:	f5 cf       	rjmp	.-22     	; 0x336a <main+0x7c8>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/usb.cpp:173
      _size = sizeof(qualifier_descriptor);
    }
    else if (_type == 0x21) {     /* HID */
      _pgmem = (uint8_t*)&current_descriptor + 18;
      _size = 9;
    3380:	e9 e0       	ldi	r30, 0x09	; 9
    3382:	ee 2e       	mov	r14, r30
    3384:	f1 2c       	mov	r15, r1
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/usb.cpp:172
    else if (_type == 0x06) {     /* QUALIFIER */
      _pgmem = (uint8_t*)&qualifier_descriptor;
      _size = sizeof(qualifier_descriptor);
    }
    else if (_type == 0x21) {     /* HID */
      _pgmem = (uint8_t*)&current_descriptor + 18;
    3386:	6f e4       	ldi	r22, 0x4F	; 79
    3388:	71 e0       	ldi	r23, 0x01	; 1
    338a:	ef cf       	rjmp	.-34     	; 0x336a <main+0x7c8>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/usb.cpp:177
      _size = 9;
    }
    else if (_type == 0x22) {     /* REPORT */
      _pgmem = (uint8_t*)&report_descriptor;
      _size = sizeof(report_descriptor);
    338c:	73 e2       	ldi	r23, 0x23	; 35
    338e:	e7 2e       	mov	r14, r23
    3390:	f1 2c       	mov	r15, r1
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/usb.cpp:176
    else if (_type == 0x21) {     /* HID */
      _pgmem = (uint8_t*)&current_descriptor + 18;
      _size = 9;
    }
    else if (_type == 0x22) {     /* REPORT */
      _pgmem = (uint8_t*)&report_descriptor;
    3392:	6a e1       	ldi	r22, 0x1A	; 26
    3394:	71 e0       	ldi	r23, 0x01	; 1
    3396:	e9 cf       	rjmp	.-46     	; 0x336a <main+0x7c8>
request_standard():
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/usb.cpp:563
      size_t _length = EP_MEM.req_data.wLength;
      size_t _size = get_descriptor((uint8_t*)&EP_MEM.res_data, EP_MEM.req_data.wValue);
      EP_RES.CNT = (_size > _length) ? _length : _size;
      _listen = !!_size;
    }
    else if (bRequest == 0x08) {  /* GET_CONFIGURATION */
    3398:	88 30       	cpi	r24, 0x08	; 8
    339a:	c9 f4       	brne	.+50     	; 0x33ce <main+0x82c>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/usb.cpp:564
      EP_MEM.res_data[0] = _set_config;
    339c:	80 91 2f 64 	lds	r24, 0x642F	; 0x80642f <_set_config>
    33a0:	80 93 1e 63 	sts	0x631E, r24	; 0x80631e <EP_MEM+0x8>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/usb.cpp:565
      D1PRINTF("<GC:%02X>\r\n", _set_config);
    33a4:	1f 92       	push	r1
    33a6:	8f 93       	push	r24
    33a8:	8a ef       	ldi	r24, 0xFA	; 250
    33aa:	91 e0       	ldi	r25, 0x01	; 1
    33ac:	9f 93       	push	r25
    33ae:	8f 93       	push	r24
    33b0:	1f 93       	push	r17
    33b2:	0f 93       	push	r16
    33b4:	0e 94 19 0a 	call	0x1432	; 0x1432 <Print::printf(PGM_t const*, ...) [clone .constprop.22]>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/usb.cpp:566
      EP_RES.CNT = 1;
    33b8:	60 92 46 64 	sts	0x6446, r6	; 0x806446 <EP_TABLE+0x12>
    33bc:	70 92 47 64 	sts	0x6447, r7	; 0x806447 <EP_TABLE+0x13>
    33c0:	0f 90       	pop	r0
    33c2:	0f 90       	pop	r0
    33c4:	0f 90       	pop	r0
    33c6:	0f 90       	pop	r0
    33c8:	0f 90       	pop	r0
    33ca:	0f 90       	pop	r0
    33cc:	8b cd       	rjmp	.-1258   	; 0x2ee4 <main+0x342>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/usb.cpp:568
    }
    else if (bRequest == 0x09) {  /* SET_CONFIGURATION */
    33ce:	89 30       	cpi	r24, 0x09	; 9
    33d0:	71 f4       	brne	.+28     	; 0x33ee <main+0x84c>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/usb.cpp:570
      /* Once the USB connection is fully initiated, it will go through here. */
      _set_config = (uint8_t)EP_MEM.req_data.wValue;
    33d2:	80 91 18 63 	lds	r24, 0x6318	; 0x806318 <EP_MEM+0x2>
    33d6:	80 93 2f 64 	sts	0x642F, r24	; 0x80642f <_set_config>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/usb.cpp:571
      bit_set(GPCONF, GPCONF_USB_bp);
    33da:	e0 9a       	sbi	0x1c, 0	; 28
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/usb.cpp:572
      SYS::LED_HeartBeat();
    33dc:	0e 94 8f 08 	call	0x111e	; 0x111e <SYS::LED_HeartBeat()>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/usb.cpp:573
      D1PRINTF("<SC:%02X>\r\n", _set_config);
    33e0:	80 91 2f 64 	lds	r24, 0x642F	; 0x80642f <_set_config>
    33e4:	1f 92       	push	r1
    33e6:	8f 93       	push	r24
    33e8:	8e ee       	ldi	r24, 0xEE	; 238
    33ea:	91 e0       	ldi	r25, 0x01	; 1
    33ec:	7d ce       	rjmp	.-774    	; 0x30e8 <main+0x546>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/usb.cpp:576
      EP_RES.CNT = 0;
    }
    else if (bRequest == 0x0A) {  /* GET_INTREFACE */
    33ee:	8a 30       	cpi	r24, 0x0A	; 10
    33f0:	99 f4       	brne	.+38     	; 0x3418 <main+0x876>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/usb.cpp:578
      /* It seems not to be used. */
      D1PRINTF("<SI:0>\r\n");
    33f2:	25 ee       	ldi	r18, 0xE5	; 229
    33f4:	31 e0       	ldi	r19, 0x01	; 1
    33f6:	3f 93       	push	r19
    33f8:	2f 93       	push	r18
    33fa:	1f 93       	push	r17
    33fc:	0f 93       	push	r16
    33fe:	0e 94 19 0a 	call	0x1432	; 0x1432 <Print::printf(PGM_t const*, ...) [clone .constprop.22]>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/usb.cpp:579
      EP_MEM.res_data[0] = 0;
    3402:	10 92 1e 63 	sts	0x631E, r1	; 0x80631e <EP_MEM+0x8>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/usb.cpp:580
      EP_RES.CNT = 1;
    3406:	60 92 46 64 	sts	0x6446, r6	; 0x806446 <EP_TABLE+0x12>
    340a:	70 92 47 64 	sts	0x6447, r7	; 0x806447 <EP_TABLE+0x13>
request_class():
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/usb.cpp:630
        EP_MEM.res_encoding.dwDTERate = 9600UL;
        EP_MEM.res_encoding.bDataBits = 8;
      }
      D1PRINTF(" GLE=");
      D1PRINTHEX(&EP_MEM.res_encoding, sizeof(LineEncoding_t));
      EP_RES.CNT = sizeof(LineEncoding_t);
    340e:	0f 90       	pop	r0
    3410:	0f 90       	pop	r0
    3412:	0f 90       	pop	r0
    3414:	0f 90       	pop	r0
    3416:	66 cd       	rjmp	.-1332   	; 0x2ee4 <main+0x342>
request_standard():
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/usb.cpp:582
      /* It seems not to be used. */
      D1PRINTF("<SI:0>\r\n");
      EP_MEM.res_data[0] = 0;
      EP_RES.CNT = 1;
    }
    else if (bRequest == 0x0B) {  /* SET_INTREFACE */
    3418:	8b 30       	cpi	r24, 0x0B	; 11
    341a:	09 f0       	breq	.+2      	; 0x341e <main+0x87c>
    341c:	c5 ce       	rjmp	.-630    	; 0x31a8 <main+0x606>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/usb.cpp:584
      /* It seems not to be used. */
      D1PRINTF("<GI:%02X>\r\n", EP_MEM.req_data.wValue);
    341e:	80 91 19 63 	lds	r24, 0x6319	; 0x806319 <EP_MEM+0x3>
    3422:	8f 93       	push	r24
    3424:	80 91 18 63 	lds	r24, 0x6318	; 0x806318 <EP_MEM+0x2>
    3428:	8f 93       	push	r24
    342a:	89 ed       	ldi	r24, 0xD9	; 217
    342c:	91 e0       	ldi	r25, 0x01	; 1
    342e:	9f 93       	push	r25
    3430:	5c ce       	rjmp	.-840    	; 0x30ea <main+0x548>
handling_control_transactions():
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/usb.cpp:668
    if (bit_is_clear(bmRequestType, 7)) ep_req_listen();
    bmRequestType &= (3 << 5);
    if (bmRequestType == (0 << 5)) {
      _listen = request_standard();
    }
    else if (bmRequestType == (1 << 5)) {
    3432:	80 32       	cpi	r24, 0x20	; 32
    3434:	09 f0       	breq	.+2      	; 0x3438 <main+0x896>
    3436:	b8 ce       	rjmp	.-656    	; 0x31a8 <main+0x606>
request_class():
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/usb.cpp:596
  }

  /*** CDC-ACM request processing. ***/
  bool request_class (void) {
    bool _listen = true;
    uint8_t bRequest = EP_MEM.req_data.bRequest;
    3438:	80 91 17 63 	lds	r24, 0x6317	; 0x806317 <EP_MEM+0x1>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/usb.cpp:597
    if (bRequest == 0x0A) {       /* SET_IDLE */
    343c:	8a 30       	cpi	r24, 0x0A	; 10
    343e:	61 f4       	brne	.+24     	; 0x3458 <main+0x8b6>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/usb.cpp:600
      /* This is a HID Compliance Class Request. */
      /* It is called but not used. */
      D1PRINTF(" IDL=%02X\r\n", (uint8_t)EP_MEM.req_data.wValue);
    3440:	80 91 18 63 	lds	r24, 0x6318	; 0x806318 <EP_MEM+0x2>
    3444:	90 91 19 63 	lds	r25, 0x6319	; 0x806319 <EP_MEM+0x3>
    3448:	99 27       	eor	r25, r25
    344a:	9f 93       	push	r25
    344c:	8f 93       	push	r24
    344e:	29 e5       	ldi	r18, 0x59	; 89
    3450:	32 e0       	ldi	r19, 0x02	; 2
    3452:	3f 93       	push	r19
    3454:	2f 93       	push	r18
    3456:	4a ce       	rjmp	.-876    	; 0x30ec <main+0x54a>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/usb.cpp:603
      EP_RES.CNT = 0;
    }
    else if (bRequest == 0x20) {  /* SET_LINE_ENCODING */
    3458:	80 32       	cpi	r24, 0x20	; 32
    345a:	e1 f5       	brne	.+120    	; 0x34d4 <main+0x932>
ep_req_pending():
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/usb.cpp:258
    }
  }

  bool is_ep_setup (void) { return bit_is_set(EP_REQ.STATUS, USB_EPSETUP_bp); }
  bool is_not_dap (void) { return bit_is_clear(EP_DPO.STATUS, USB_BUSNAK_bp); }
  void ep_req_pending (void) { loop_until_bit_is_set(EP_REQ.STATUS, USB_BUSNAK_bp); }
    345c:	80 91 3c 64 	lds	r24, 0x643C	; 0x80643c <EP_TABLE+0x8>
    3460:	81 ff       	sbrs	r24, 1
    3462:	fc cf       	rjmp	.-8      	; 0x345c <main+0x8ba>
set_line_encoding():
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/usart.cpp:177
      SYS::LED_Flash();
  }

  void set_line_encoding (LineEncoding_t* _buff) {
    /* The USART will not change unless a different setting is given. */
    if (0 == memcmp(&_set_line_encoding, _buff, sizeof(LineEncoding_t))) return;
    3464:	47 e0       	ldi	r20, 0x07	; 7
    3466:	50 e0       	ldi	r21, 0x00	; 0
    3468:	6e e1       	ldi	r22, 0x1E	; 30
    346a:	73 e6       	ldi	r23, 0x63	; 99
    346c:	86 e8       	ldi	r24, 0x86	; 134
    346e:	90 e6       	ldi	r25, 0x60	; 96
    3470:	0e 94 93 24 	call	0x4926	; 0x4926 <memcmp>
    3474:	89 2b       	or	r24, r25
    3476:	91 f0       	breq	.+36     	; 0x349c <main+0x8fa>
read_drop():
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/usb.cpp:467
    }
    return _s != 0;
  }

  void read_drop (void) {
    if (bit_is_set(EP_CDO.STATUS, USB_BUSNAK_bp)) ep_cdo_listen();
    3478:	80 91 6c 64 	lds	r24, 0x646C	; 0x80646c <EP_TABLE+0x38>
    347c:	81 fd       	sbrc	r24, 1
    347e:	0e 94 fc 04 	call	0x9f8	; 0x9f8 <USB::ep_cdo_listen()>
set_line_encoding():
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/usart.cpp:179
    USB::read_drop();
    USART::setup();
    3482:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <USART::setup()>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/usart.cpp:180
    memcpy(&_set_line_encoding, _buff, sizeof(LineEncoding_t));
    3486:	87 e0       	ldi	r24, 0x07	; 7
    3488:	ee e1       	ldi	r30, 0x1E	; 30
    348a:	f3 e6       	ldi	r31, 0x63	; 99
    348c:	a6 e8       	ldi	r26, 0x86	; 134
    348e:	b0 e6       	ldi	r27, 0x60	; 96
    3490:	01 90       	ld	r0, Z+
    3492:	0d 92       	st	X+, r0
    3494:	8a 95       	dec	r24
    3496:	e1 f7       	brne	.-8      	; 0x3490 <main+0x8ee>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/usart.cpp:181
    change_vcp();
    3498:	0e 94 3d 0a 	call	0x147a	; 0x147a <USART::change_vcp()>
request_class():
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/usb.cpp:612
      /* In any case, this isn't a one-off thing. */
      /* If the same parameter settings persist,  */
      /* it's probably best to do nothing.        */
      ep_req_pending();
      USART::set_line_encoding(&EP_MEM.res_encoding);
      D1PRINTF(" SLE=");
    349c:	83 e5       	ldi	r24, 0x53	; 83
    349e:	92 e0       	ldi	r25, 0x02	; 2
    34a0:	9f 93       	push	r25
    34a2:	8f 93       	push	r24
    34a4:	1f 93       	push	r17
    34a6:	0f 93       	push	r16
    34a8:	0e 94 19 0a 	call	0x1432	; 0x1432 <Print::printf(PGM_t const*, ...) [clone .constprop.22]>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/usb.cpp:613
      D1PRINTHEX(&_set_line_encoding, sizeof(LineEncoding_t));
    34ac:	67 e0       	ldi	r22, 0x07	; 7
    34ae:	70 e0       	ldi	r23, 0x00	; 0
    34b0:	86 e8       	ldi	r24, 0x86	; 134
    34b2:	90 e6       	ldi	r25, 0x60	; 96
    34b4:	0e 94 a7 09 	call	0x134e	; 0x134e <Print::printHex(void const*, unsigned int, char, unsigned int, char const*) [clone .constprop.19]>
    34b8:	0e 94 0d 0a 	call	0x141a	; 0x141a <Print::ln()>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/usb.cpp:614
      bit_set(GPCONF, GPCONF_OPN_bp);
    34bc:	e4 9a       	sbi	0x1c, 4	; 28
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/usb.cpp:615
      _send_count = 0;
    34be:	10 92 31 64 	sts	0x6431, r1	; 0x806431 <_send_count>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/usb.cpp:616
      _recv_count = 0;
    34c2:	10 92 30 64 	sts	0x6430, r1	; 0x806430 <_recv_count>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/usb.cpp:617
      _sof_count = 0;
    34c6:	10 92 2e 64 	sts	0x642E, r1	; 0x80642e <_sof_count>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/usb.cpp:618
      EP_RES.CNT = 0;
    34ca:	10 92 46 64 	sts	0x6446, r1	; 0x806446 <EP_TABLE+0x12>
    34ce:	10 92 47 64 	sts	0x6447, r1	; 0x806447 <EP_TABLE+0x13>
    34d2:	9d cf       	rjmp	.-198    	; 0x340e <main+0x86c>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/usb.cpp:620
    }
    else if (bRequest == 0x21) {  /* GET_LINE_ENCODING */
    34d4:	81 32       	cpi	r24, 0x21	; 33
    34d6:	b9 f5       	brne	.+110    	; 0x3546 <main+0x9a4>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/usb.cpp:621
      memcpy(&EP_MEM.res_encoding, &_set_line_encoding, sizeof(LineEncoding_t));
    34d8:	87 e0       	ldi	r24, 0x07	; 7
    34da:	e6 e8       	ldi	r30, 0x86	; 134
    34dc:	f0 e6       	ldi	r31, 0x60	; 96
    34de:	ae e1       	ldi	r26, 0x1E	; 30
    34e0:	b3 e6       	ldi	r27, 0x63	; 99
    34e2:	01 90       	ld	r0, Z+
    34e4:	0d 92       	st	X+, r0
    34e6:	8a 95       	dec	r24
    34e8:	e1 f7       	brne	.-8      	; 0x34e2 <main+0x940>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/usb.cpp:622
      if (EP_MEM.res_encoding.dwDTERate == 0) {
    34ea:	80 91 1e 63 	lds	r24, 0x631E	; 0x80631e <EP_MEM+0x8>
    34ee:	90 91 1f 63 	lds	r25, 0x631F	; 0x80631f <EP_MEM+0x9>
    34f2:	a0 91 20 63 	lds	r26, 0x6320	; 0x806320 <EP_MEM+0xa>
    34f6:	b0 91 21 63 	lds	r27, 0x6321	; 0x806321 <EP_MEM+0xb>
    34fa:	89 2b       	or	r24, r25
    34fc:	8a 2b       	or	r24, r26
    34fe:	8b 2b       	or	r24, r27
    3500:	59 f4       	brne	.+22     	; 0x3518 <main+0x976>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/usb.cpp:625
        /* Parameters that, if incorrectly accepted,           */
        /* would result in division by zero must be corrected. */
        EP_MEM.res_encoding.dwDTERate = 9600UL;
    3502:	80 92 1e 63 	sts	0x631E, r8	; 0x80631e <EP_MEM+0x8>
    3506:	90 92 1f 63 	sts	0x631F, r9	; 0x80631f <EP_MEM+0x9>
    350a:	a0 92 20 63 	sts	0x6320, r10	; 0x806320 <EP_MEM+0xa>
    350e:	b0 92 21 63 	sts	0x6321, r11	; 0x806321 <EP_MEM+0xb>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/usb.cpp:626
        EP_MEM.res_encoding.bDataBits = 8;
    3512:	88 e0       	ldi	r24, 0x08	; 8
    3514:	80 93 24 63 	sts	0x6324, r24	; 0x806324 <EP_MEM+0xe>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/usb.cpp:628
      }
      D1PRINTF(" GLE=");
    3518:	2d e4       	ldi	r18, 0x4D	; 77
    351a:	32 e0       	ldi	r19, 0x02	; 2
    351c:	3f 93       	push	r19
    351e:	2f 93       	push	r18
    3520:	1f 93       	push	r17
    3522:	0f 93       	push	r16
    3524:	0e 94 19 0a 	call	0x1432	; 0x1432 <Print::printf(PGM_t const*, ...) [clone .constprop.22]>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/usb.cpp:629
      D1PRINTHEX(&EP_MEM.res_encoding, sizeof(LineEncoding_t));
    3528:	67 e0       	ldi	r22, 0x07	; 7
    352a:	70 e0       	ldi	r23, 0x00	; 0
    352c:	8e e1       	ldi	r24, 0x1E	; 30
    352e:	93 e6       	ldi	r25, 0x63	; 99
    3530:	0e 94 a7 09 	call	0x134e	; 0x134e <Print::printHex(void const*, unsigned int, char, unsigned int, char const*) [clone .constprop.19]>
    3534:	0e 94 0d 0a 	call	0x141a	; 0x141a <Print::ln()>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/usb.cpp:630
      EP_RES.CNT = sizeof(LineEncoding_t);
    3538:	87 e0       	ldi	r24, 0x07	; 7
    353a:	90 e0       	ldi	r25, 0x00	; 0
    353c:	80 93 46 64 	sts	0x6446, r24	; 0x806446 <EP_TABLE+0x12>
    3540:	90 93 47 64 	sts	0x6447, r25	; 0x806447 <EP_TABLE+0x13>
    3544:	64 cf       	rjmp	.-312    	; 0x340e <main+0x86c>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/usb.cpp:632
    }
    else if (bRequest == 0x22) {  /* SET_LINE_STATE */
    3546:	82 32       	cpi	r24, 0x22	; 34
    3548:	49 f5       	brne	.+82     	; 0x359c <main+0x9fa>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/usb.cpp:634
      /* This includes the DTR and RTS settings. */
      D1PRINTF(" SLS=%02X\r\n", (uint8_t)EP_MEM.req_data.wValue);
    354a:	80 91 18 63 	lds	r24, 0x6318	; 0x806318 <EP_MEM+0x2>
    354e:	90 91 19 63 	lds	r25, 0x6319	; 0x806319 <EP_MEM+0x3>
    3552:	99 27       	eor	r25, r25
    3554:	9f 93       	push	r25
    3556:	8f 93       	push	r24
    3558:	81 e4       	ldi	r24, 0x41	; 65
    355a:	92 e0       	ldi	r25, 0x02	; 2
    355c:	9f 93       	push	r25
    355e:	8f 93       	push	r24
    3560:	1f 93       	push	r17
    3562:	0f 93       	push	r16
    3564:	0e 94 19 0a 	call	0x1432	; 0x1432 <Print::printf(PGM_t const*, ...) [clone .constprop.22]>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/usb.cpp:635
      USART::set_line_state((uint8_t)EP_MEM.req_data.wValue);
    3568:	80 91 18 63 	lds	r24, 0x6318	; 0x806318 <EP_MEM+0x2>
set_line_state():
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/usart.cpp:193
  void set_line_state (uint8_t _line_state) {

    /* If a physical port exists, it reflects DTR/RTS. */

  #if defined(PIN_VCP_DTR)
    if (bit_is_set(_line_state, 0))
    356c:	0f 90       	pop	r0
    356e:	0f 90       	pop	r0
    3570:	0f 90       	pop	r0
    3572:	0f 90       	pop	r0
    3574:	0f 90       	pop	r0
    3576:	0f 90       	pop	r0
    3578:	98 2f       	mov	r25, r24
    357a:	91 70       	andi	r25, 0x01	; 1
    357c:	80 ff       	sbrs	r24, 0
    357e:	0c c0       	rjmp	.+24     	; 0x3598 <main+0x9f6>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/usart.cpp:194
      digitalWriteMacro(PIN_VCP_DTR, LOW);
    3580:	68 98       	cbi	0x0d, 0	; 13
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/usart.cpp:208
      digitalWriteMacro(PIN_VCP_RTS, HIGH);
  #endif

  #if defined(CONFIG_VCP_DTR_RESET)
    /* If DTR is set, the device will reboot assuming the host has opened the port. */
    if (!_set_line_state.bStateDTR && bit_is_set(_line_state, 0)) {
    3582:	20 91 84 60 	lds	r18, 0x6084	; 0x806084 <__data_end>
    3586:	20 fd       	sbrc	r18, 0
    3588:	04 c0       	rjmp	.+8      	; 0x3592 <main+0x9f0>
    358a:	99 23       	and	r25, r25
    358c:	11 f0       	breq	.+4      	; 0x3592 <main+0x9f0>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/usart.cpp:209
      bit_set(GPCONF, GPCONF_FAL_bp);
    358e:	e7 9a       	sbi	0x1c, 7	; 28
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/usart.cpp:210
      bit_set(GPCONF, GPCONF_RIS_bp);
    3590:	e6 9a       	sbi	0x1c, 6	; 28
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/usart.cpp:214
    }
  #endif

    _set_line_state.bValue = _line_state;
    3592:	80 93 84 60 	sts	0x6084, r24	; 0x806084 <__data_end>
    3596:	73 cd       	rjmp	.-1306   	; 0x307e <main+0x4dc>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/usart.cpp:196

  #if defined(PIN_VCP_DTR)
    if (bit_is_set(_line_state, 0))
      digitalWriteMacro(PIN_VCP_DTR, LOW);
    else
      digitalWriteMacro(PIN_VCP_DTR, HIGH);
    3598:	68 9a       	sbi	0x0d, 0	; 13
    359a:	f3 cf       	rjmp	.-26     	; 0x3582 <main+0x9e0>
request_class():
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/usb.cpp:638
      EP_RES.CNT = 0;
    }
    else if (bRequest == 0x23) {  /* SET_SEND_BREAK */
    359c:	83 32       	cpi	r24, 0x23	; 35
    359e:	09 f0       	breq	.+2      	; 0x35a2 <main+0xa00>
    35a0:	03 ce       	rjmp	.-1018   	; 0x31a8 <main+0x606>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/usb.cpp:641
      /* When the host application closes the port, it may send a BREAK=0. */
      /* Nothing else is used unless programmed by the application. */
      D1PRINTF(" SB=%04X\r\n", EP_MEM.req_data.wValue);
    35a2:	80 91 19 63 	lds	r24, 0x6319	; 0x806319 <EP_MEM+0x3>
    35a6:	8f 93       	push	r24
    35a8:	80 91 18 63 	lds	r24, 0x6318	; 0x806318 <EP_MEM+0x2>
    35ac:	8f 93       	push	r24
    35ae:	26 e3       	ldi	r18, 0x36	; 54
    35b0:	32 e0       	ldi	r19, 0x02	; 2
    35b2:	3f 93       	push	r19
    35b4:	2f 93       	push	r18
    35b6:	1f 93       	push	r17
    35b8:	0f 93       	push	r16
    35ba:	0e 94 19 0a 	call	0x1432	; 0x1432 <Print::printf(PGM_t const*, ...) [clone .constprop.22]>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/usb.cpp:642
      _send_break = EP_MEM.req_data.wValue;
    35be:	80 91 18 63 	lds	r24, 0x6318	; 0x806318 <EP_MEM+0x2>
    35c2:	90 91 19 63 	lds	r25, 0x6319	; 0x806319 <EP_MEM+0x3>
    35c6:	80 93 32 64 	sts	0x6432, r24	; 0x806432 <_send_break>
    35ca:	90 93 33 64 	sts	0x6433, r25	; 0x806433 <_send_break+0x1>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/usb.cpp:643
      if (_send_break) break_on();
    35ce:	0f 90       	pop	r0
    35d0:	0f 90       	pop	r0
    35d2:	0f 90       	pop	r0
    35d4:	0f 90       	pop	r0
    35d6:	0f 90       	pop	r0
    35d8:	0f 90       	pop	r0
    35da:	89 2b       	or	r24, r25
    35dc:	59 f0       	breq	.+22     	; 0x35f4 <main+0xa52>
break_on():
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/usb.cpp:376
    ep_dpo_listen();  /* continue transaction */
  }

  void break_on (void) {
    if (bit_is_set(GPCONF, GPCONF_VCP_bp)
     && bit_is_clear(GPCONF, GPCONF_BRK_bp)) {
    35de:	e1 9b       	sbis	0x1c, 1	; 28
    35e0:	07 c0       	rjmp	.+14     	; 0x35f0 <main+0xa4e>
    35e2:	e3 99       	sbic	0x1c, 3	; 28
    35e4:	05 c0       	rjmp	.+10     	; 0x35f0 <main+0xa4e>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/usb.cpp:378
      /* SET_SEND_BREAK is called when the port is closed successfully. */
      bit_clear(GPCONF, GPCONF_OPN_bp);
    35e6:	e4 98       	cbi	0x1c, 4	; 28
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/usb.cpp:379
      _sof_count = 0;
    35e8:	10 92 2e 64 	sts	0x642E, r1	; 0x80642e <_sof_count>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/usb.cpp:380
      USART::disable_vcp();
    35ec:	0e 94 58 0f 	call	0x1eb0	; 0x1eb0 <USART::disable_vcp()>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/usb.cpp:386
  #ifdef CONFIG_VCP_TXD_ODM
      /* During Break, VCP-TxD is pulled LOW. */
      pinModeMacro(PIN_VCP_TXD, OUTPUT);
  #endif
    }
    bit_set(GPCONF, GPCONF_BRK_bp);
    35f0:	e3 9a       	sbi	0x1c, 3	; 28
    35f2:	45 cd       	rjmp	.-1398   	; 0x307e <main+0x4dc>
request_class():
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/usb.cpp:644
      /* When the host application closes the port, it may send a BREAK=0. */
      /* Nothing else is used unless programmed by the application. */
      D1PRINTF(" SB=%04X\r\n", EP_MEM.req_data.wValue);
      _send_break = EP_MEM.req_data.wValue;
      if (_send_break) break_on();
      else break_off();
    35f4:	0e 94 02 0b 	call	0x1604	; 0x1604 <USB::break_off()>
    35f8:	42 cd       	rjmp	.-1404   	; 0x307e <main+0x4dc>
main():
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/main.cpp:126
    if (USB::is_ep_setup()) USB::handling_control_transactions();

    /* If SW0 was used, work here. */
    if (bit_is_clear(PGCONF, PGCONF_UPDI_bp)) {
      if      (bit_is_set(GPCONF, GPCONF_FAL_bp)) SYS::reset_enter();
      else if (bit_is_set(GPCONF, GPCONF_RIS_bp)) SYS::reset_leave();
    35fa:	e6 9b       	sbis	0x1c, 6	; 28
    35fc:	ab cc       	rjmp	.-1706   	; 0x2f54 <main+0x3b2>
reset_leave():
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/sys.cpp:332
   * This will be executed when SW0 is released.
   * If the VCP is operating, it will return to normal operation,
   * but if the USB is stopped, it will reboot at the end.
   */
  void reset_leave (void) {
    if (_jtag_arch == 5) {
    35fe:	80 91 98 60 	lds	r24, 0x6098	; 0x806098 <_jtag_arch>
    3602:	85 30       	cpi	r24, 0x05	; 5
    3604:	21 f4       	brne	.+8      	; 0x360e <main+0xa6c>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/sys.cpp:333
      _updi_bitmap[10] = 0x00; /* SYSRUN */
    3606:	10 92 24 60 	sts	0x6024, r1	; 0x806024 <SYS::_updi_bitmap+0xa>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/sys.cpp:334
      send_bitmap(_updi_bitmap, sizeof(_updi_bitmap) * 8);
    360a:	0e 94 b4 04 	call	0x968	; 0x968 <SYS::send_bitmap(unsigned char const*, unsigned int) [clone .constprop.10]>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/sys.cpp:336
    }
    openDrainWriteMacro(PIN_PGM_TRST, HIGH);
    360e:	01 98       	cbi	0x00, 1	; 0
delay_millis():
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/modernAVR/0.2.14/cores/modernAVR/api/delay_busywait.h:42
    3610:	ff e7       	ldi	r31, 0x7F	; 127
    3612:	2a e1       	ldi	r18, 0x1A	; 26
    3614:	36 e0       	ldi	r19, 0x06	; 6
    3616:	f1 50       	subi	r31, 0x01	; 1
    3618:	20 40       	sbci	r18, 0x00	; 0
    361a:	30 40       	sbci	r19, 0x00	; 0
    361c:	e1 f7       	brne	.-8      	; 0x3616 <main+0xa74>
    361e:	00 c0       	rjmp	.+0      	; 0x3620 <main+0xa7e>
    3620:	00 00       	nop
reset_leave():
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/sys.cpp:341
  #ifdef CONFIG_VCP_DTR_RESET
    /* A delay of 64ms or more between when the bootloader starts and when RxD opens. */
    delay_millis(100);
  #endif
    D1PRINTF("<RST:OUT>\r\n");
    3622:	84 ea       	ldi	r24, 0xA4	; 164
    3624:	92 e0       	ldi	r25, 0x02	; 2
    3626:	9f 93       	push	r25
    3628:	8f 93       	push	r24
    362a:	1f 93       	push	r17
    362c:	0f 93       	push	r16
    362e:	0e 94 19 0a 	call	0x1432	; 0x1432 <Print::printf(PGM_t const*, ...) [clone .constprop.22]>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/sys.cpp:342
    if (bit_is_set(GPCONF, GPCONF_USB_bp))
    3632:	0f 90       	pop	r0
    3634:	0f 90       	pop	r0
    3636:	0f 90       	pop	r0
    3638:	0f 90       	pop	r0
    363a:	e0 9b       	sbis	0x1c, 0	; 28
    363c:	05 c0       	rjmp	.+10     	; 0x3648 <main+0xaa6>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/sys.cpp:343
      LED_HeartBeat();  /* The USB is ready. */
    363e:	0e 94 8f 08 	call	0x111e	; 0x111e <SYS::LED_HeartBeat()>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/sys.cpp:348
    else if (!USB0_ADDR)
      reboot();         /* USB disconnected, System reboot. */
    else
      LED_Flash();      /* USB is not yet enabled. */
    bit_clear(GPCONF, GPCONF_FAL_bp);
    3642:	e7 98       	cbi	0x1c, 7	; 28
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/sys.cpp:349
    bit_clear(GPCONF, GPCONF_RIS_bp);
    3644:	e6 98       	cbi	0x1c, 6	; 28
    3646:	86 cc       	rjmp	.-1780   	; 0x2f54 <main+0x3b2>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/sys.cpp:344
    delay_millis(100);
  #endif
    D1PRINTF("<RST:OUT>\r\n");
    if (bit_is_set(GPCONF, GPCONF_USB_bp))
      LED_HeartBeat();  /* The USB is ready. */
    else if (!USB0_ADDR)
    3648:	80 91 03 0c 	lds	r24, 0x0C03	; 0x800c03 <__TEXT_REGION_LENGTH__+0x7f0c03>
    364c:	81 11       	cpse	r24, r1
    364e:	03 c0       	rjmp	.+6      	; 0x3656 <main+0xab4>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/sys.cpp:345
      reboot();         /* USB disconnected, System reboot. */
    3650:	0e 94 44 0e 	call	0x1c88	; 0x1c88 <SYS::reboot()>
    3654:	f6 cf       	rjmp	.-20     	; 0x3642 <main+0xaa0>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/sys.cpp:347
    else
      LED_Flash();      /* USB is not yet enabled. */
    3656:	0e 94 7a 08 	call	0x10f4	; 0x10f4 <SYS::LED_Flash()>
    365a:	f3 cf       	rjmp	.-26     	; 0x3642 <main+0xaa0>
read_byte():
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/usb.cpp:444
    else ep_cdi_listen();
  }

  uint8_t read_byte (void) {
    uint8_t _c = 0;
    if (EP_CDO.CNT != _recv_count) {
    365c:	40 91 6e 64 	lds	r20, 0x646E	; 0x80646e <EP_TABLE+0x3a>
    3660:	50 91 6f 64 	lds	r21, 0x646F	; 0x80646f <EP_TABLE+0x3b>
    3664:	28 2f       	mov	r18, r24
    3666:	30 e0       	ldi	r19, 0x00	; 0
main():
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/usb.cpp:443
    if (_send_count < 64) _sof_count = 30;
    else ep_cdi_listen();
  }

  uint8_t read_byte (void) {
    uint8_t _c = 0;
    3668:	f1 2c       	mov	r15, r1
read_byte():
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/usb.cpp:444
    if (EP_CDO.CNT != _recv_count) {
    366a:	42 17       	cp	r20, r18
    366c:	53 07       	cpc	r21, r19
    366e:	39 f0       	breq	.+14     	; 0x367e <main+0xadc>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/usb.cpp:451
      if (_recv_count == 0) {
        D2PRINTF(" VO=%02X:", EP_CDO.CNT);
        D2PRINTHEX(&EP_MEM.cdo_data, EP_CDO.CNT);
      }
  #endif
      _c = EP_MEM.cdo_data[_recv_count++];
    3670:	8f 5f       	subi	r24, 0xFF	; 255
    3672:	80 93 30 64 	sts	0x6430, r24	; 0x806430 <_recv_count>
    3676:	22 59       	subi	r18, 0x92	; 146
    3678:	3c 49       	sbci	r19, 0x9C	; 156
    367a:	f9 01       	movw	r30, r18
    367c:	f0 80       	ld	r15, Z
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/usb.cpp:453
    }
    if (EP_CDO.CNT == _recv_count) ep_cdo_listen();
    367e:	80 91 6e 64 	lds	r24, 0x646E	; 0x80646e <EP_TABLE+0x3a>
    3682:	90 91 6f 64 	lds	r25, 0x646F	; 0x80646f <EP_TABLE+0x3b>
    3686:	20 91 30 64 	lds	r18, 0x6430	; 0x806430 <_recv_count>
    368a:	28 17       	cp	r18, r24
    368c:	19 06       	cpc	r1, r25
    368e:	11 f4       	brne	.+4      	; 0x3694 <main+0xaf2>
    3690:	0e 94 fc 04 	call	0x9f8	; 0x9f8 <USB::ep_cdo_listen()>
vcp_transceiver():
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/usb.cpp:504
  #if defined(CONFIG_VCP_CTS_ENABLE)
     && !digitalReadMacro(PIN_VCP_CTS)
  #endif
     && bit_is_set(USART0_STATUS, USART_DREIF_bp)
     && read_available()) {
      USART0_TXDATAL = read_byte();
    3694:	f0 92 02 08 	sts	0x0802, r15	; 0x800802 <__TEXT_REGION_LENGTH__+0x7f0802>
    3698:	77 cc       	rjmp	.-1810   	; 0x2f88 <main+0x3e6>
read_drop():
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/usb.cpp:467
    }
    return _s != 0;
  }

  void read_drop (void) {
    if (bit_is_set(EP_CDO.STATUS, USB_BUSNAK_bp)) ep_cdo_listen();
    369a:	80 91 6c 64 	lds	r24, 0x646C	; 0x80646c <EP_TABLE+0x38>
    369e:	81 ff       	sbrs	r24, 1
    36a0:	73 cc       	rjmp	.-1818   	; 0x2f88 <main+0x3e6>
    36a2:	70 cc       	rjmp	.-1824   	; 0x2f84 <main+0x3e2>
cci_break_count():
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/usb.cpp:405
    if ((_send_break + 1) > 1) {
      if (_send_break > USB_CCI_INTERVAL) {
        if (bit_is_set(EP_CCI.STATUS, USB_BUSNAK_bp)) ep_cci_listen();
      }
      else {
        _send_break = 0;
    36a4:	10 92 32 64 	sts	0x6432, r1	; 0x806432 <_send_break>
    36a8:	10 92 33 64 	sts	0x6433, r1	; 0x806433 <_send_break+0x1>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/usb.cpp:406
        break_off();
    36ac:	0e 94 02 0b 	call	0x1604	; 0x1604 <USB::break_off()>
    36b0:	95 cc       	rjmp	.-1750   	; 0x2fdc <main+0x43a>
dap_command_check():
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/jtag.cpp:67
     * A maximum of 15 chunks is possible,
     * resulting in a maximum payload length of 900 bytes.
     */
    if (_cmd == 0x80) {             /* DAP_EDBG_VENDOR_AVR_CMD */
      uint8_t _endf = _sub & 0x0F;
      uint8_t _frag = _sub >> 4;
    36b2:	90 e0       	ldi	r25, 0x00	; 0
    36b4:	64 e0       	ldi	r22, 0x04	; 4
    36b6:	95 95       	asr	r25
    36b8:	87 95       	ror	r24
    36ba:	6a 95       	dec	r22
    36bc:	e1 f7       	brne	.-8      	; 0x36b6 <main+0xb14>
    36be:	58 2e       	mov	r5, r24
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/jtag.cpp:68
      uint8_t _size = EP_MEM.dap_data[3];
    36c0:	c0 90 31 63 	lds	r12, 0x6331	; 0x806331 <EP_MEM+0x1b>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/jtag.cpp:77
        D1PRINTF("<EDBG_FAIL>\r\n");
        EP_MEM.dap_data[1] = 0x00;  /* EDBG_RSP_FAIL */
      }
      else {
        /* Detect the first chunk. */
        if (_frag == 1) _packet_chunks = 0;
    36c4:	31 e0       	ldi	r19, 0x01	; 1
    36c6:	83 13       	cpse	r24, r19
    36c8:	02 c0       	rjmp	.+4      	; 0x36ce <main+0xb2c>
    36ca:	10 92 94 60 	sts	0x6094, r1	; 0x806094 <__bss_end>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/jtag.cpp:69
     */
    if (_cmd == 0x80) {             /* DAP_EDBG_VENDOR_AVR_CMD */
      uint8_t _endf = _sub & 0x0F;
      uint8_t _frag = _sub >> 4;
      uint8_t _size = EP_MEM.dap_data[3];
      size_t  _ofst = (_frag - 1) * 60;
    36ce:	01 97       	sbiw	r24, 0x01	; 1
    36d0:	2c e3       	ldi	r18, 0x3C	; 60
    36d2:	28 9f       	mul	r18, r24
    36d4:	70 01       	movw	r14, r0
    36d6:	29 9f       	mul	r18, r25
    36d8:	f0 0c       	add	r15, r0
    36da:	11 24       	eor	r1, r1
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/jtag.cpp:78
        EP_MEM.dap_data[1] = 0x00;  /* EDBG_RSP_FAIL */
      }
      else {
        /* Detect the first chunk. */
        if (_frag == 1) _packet_chunks = 0;
        ++_packet_chunks;
    36dc:	70 90 94 60 	lds	r7, 0x6094	; 0x806094 <__bss_end>
    36e0:	73 94       	inc	r7
    36e2:	70 92 94 60 	sts	0x6094, r7	; 0x806094 <__bss_end>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/jtag.cpp:79
        memcpy(&packet.rawData[_ofst], &EP_MEM.dap_data[4], _size);
    36e6:	d1 2c       	mov	r13, r1
    36e8:	a6 01       	movw	r20, r12
    36ea:	62 e3       	ldi	r22, 0x32	; 50
    36ec:	73 e6       	ldi	r23, 0x63	; 99
    36ee:	c7 01       	movw	r24, r14
    36f0:	82 53       	subi	r24, 0x32	; 50
    36f2:	9f 49       	sbci	r25, 0x9F	; 159
    36f4:	0e 94 a0 24 	call	0x4940	; 0x4940 <memcpy>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/jtag.cpp:80
        EP_MEM.dap_data[1] = 0x01;  /* EDBG_RSP_OK */
    36f8:	81 e0       	ldi	r24, 0x01	; 1
    36fa:	80 93 2f 63 	sts	0x632F, r24	; 0x80632f <EP_MEM+0x19>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/jtag.cpp:82
        D3PRINTHEX(&EP_MEM.dap_data, _size + 4);
        if (_endf == _frag) {       /* end of defragment */
    36fe:	65 14       	cp	r6, r5
    3700:	11 f0       	breq	.+4      	; 0x3706 <main+0xb64>
main():
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/jtag.cpp:51
  /*
   * Command numbers 0x80 and above are vendor extensions, EDBG Payload uses 0x80 and x81.
   * Additionally, 0x82 is reserved for device event notification.
   */
  bool dap_command_check (void) {
    bool _result = false;
    3702:	e1 2c       	mov	r14, r1
    3704:	0c c0       	rjmp	.+24     	; 0x371e <main+0xb7c>
dap_command_check():
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/jtag.cpp:83
        ++_packet_chunks;
        memcpy(&packet.rawData[_ofst], &EP_MEM.dap_data[4], _size);
        EP_MEM.dap_data[1] = 0x01;  /* EDBG_RSP_OK */
        D3PRINTHEX(&EP_MEM.dap_data, _size + 4);
        if (_endf == _frag) {       /* end of defragment */
          _packet_length = _ofst + _size;
    3706:	ec 0c       	add	r14, r12
    3708:	fd 1c       	adc	r15, r13
    370a:	e0 92 9c 60 	sts	0x609C, r14	; 0x80609c <_packet_length>
    370e:	f0 92 9d 60 	sts	0x609D, r15	; 0x80609d <_packet_length+0x1>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/jtag.cpp:86
          D2PRINTF(" SQ=%03X:%03X<", packet.out.sequence, _packet_length);
          D2PRINTHEX(&packet, _packet_length);
          if (_packet_chunks == _endf) {
    3712:	67 10       	cpse	r6, r7
    3714:	9e c0       	rjmp	.+316    	; 0x3852 <main+0xcb0>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/jtag.cpp:89
            /* True if an EDBG Payload is received. */
            D2PRINTF("<EDBG_OK>\r\n");
            _packet_endfrag = 0;
    3716:	10 92 99 60 	sts	0x6099, r1	; 0x806099 <_packet_endfrag>
main():
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/jtag.cpp:90
            _result = true;
    371a:	ee 24       	eor	r14, r14
    371c:	e3 94       	inc	r14
ep_dpi_listen():
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/usb.cpp:279
    loop_until_bit_is_clear(USB0_INTFLAGSB, USB_RMWBUSY_bp);
    USB_EP_STATUS_CLR(USB_EP_RES) = ~USB_TOGGLE_bm;
  }

  void ep_dpi_listen (void) {
    EP_DPI.CNT = 64;
    371e:	80 e4       	ldi	r24, 0x40	; 64
    3720:	90 e0       	ldi	r25, 0x00	; 0
    3722:	80 93 56 64 	sts	0x6456, r24	; 0x806456 <EP_TABLE+0x22>
    3726:	90 93 57 64 	sts	0x6457, r25	; 0x806457 <EP_TABLE+0x23>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/usb.cpp:280
    EP_DPI.MCNT = 0;
    372a:	10 92 5a 64 	sts	0x645A, r1	; 0x80645a <EP_TABLE+0x26>
    372e:	10 92 5b 64 	sts	0x645B, r1	; 0x80645b <EP_TABLE+0x27>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/usb.cpp:281
    loop_until_bit_is_clear(USB0_INTFLAGSB, USB_RMWBUSY_bp);
    3732:	80 91 0b 0c 	lds	r24, 0x0C0B	; 0x800c0b <__TEXT_REGION_LENGTH__+0x7f0c0b>
    3736:	82 fd       	sbrc	r24, 2
    3738:	fc cf       	rjmp	.-8      	; 0x3732 <main+0xb90>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/usb.cpp:282
    USB_EP_STATUS_CLR(USB_EP_DPI) = ~USB_TOGGLE_bm;
    373a:	8e ef       	ldi	r24, 0xFE	; 254
    373c:	80 93 46 0c 	sts	0x0C46, r24	; 0x800c46 <__TEXT_REGION_LENGTH__+0x7f0c46>
ep_dpo_listen():
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/usb.cpp:286
  }

  void ep_dpo_listen (void) {
    EP_DPO.CNT = 0;
    3740:	10 92 5e 64 	sts	0x645E, r1	; 0x80645e <EP_TABLE+0x2a>
    3744:	10 92 5f 64 	sts	0x645F, r1	; 0x80645f <EP_TABLE+0x2b>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/usb.cpp:287
    loop_until_bit_is_clear(USB0_INTFLAGSB, USB_RMWBUSY_bp);
    3748:	80 91 0b 0c 	lds	r24, 0x0C0B	; 0x800c0b <__TEXT_REGION_LENGTH__+0x7f0c0b>
    374c:	82 fd       	sbrc	r24, 2
    374e:	fc cf       	rjmp	.-8      	; 0x3748 <main+0xba6>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/usb.cpp:288
    USB_EP_STATUS_CLR(USB_EP_DPO) = ~USB_TOGGLE_bm;
    3750:	8e ef       	ldi	r24, 0xFE	; 254
    3752:	80 93 48 0c 	sts	0x0C48, r24	; 0x800c48 <__TEXT_REGION_LENGTH__+0x7f0c48>
main():
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/main.cpp:151

    /*** If CMSIS-DAP is not received, return to the top. ***/
    if (USB::is_not_dap()) continue;

    /*** CMSIS-DAP and JTAG3 packet receiver ***/
    if (JTAG::dap_command_check()) JTAG::jtag_scope_branch();
    3756:	ee 20       	and	r14, r14
    3758:	09 f4       	brne	.+2      	; 0x375c <main+0xbba>
    375a:	48 cb       	rjmp	.-2416   	; 0x2dec <main+0x24a>
jtag_scope_branch():
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/jtag.cpp:384

  /* Processing branches depending on the scope specifier. */
  /* Currently, four types of scope are known: */
  void jtag_scope_branch (void) {
    size_t _rspsize = 0;
    uint8_t _scope  = packet.out.scope;
    375c:	f0 90 d2 60 	lds	r15, 0x60D2	; 0x8060d2 <packet+0x4>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/jtag.cpp:385
    D1PRINTF("SCOPE=%02X,C=%02X,S=%02X,L=%02X\r\n",
    3760:	80 91 d6 60 	lds	r24, 0x60D6	; 0x8060d6 <packet+0x8>
    3764:	1f 92       	push	r1
    3766:	8f 93       	push	r24
    3768:	80 91 d5 60 	lds	r24, 0x60D5	; 0x8060d5 <packet+0x7>
    376c:	1f 92       	push	r1
    376e:	8f 93       	push	r24
    3770:	80 91 d3 60 	lds	r24, 0x60D3	; 0x8060d3 <packet+0x5>
    3774:	1f 92       	push	r1
    3776:	8f 93       	push	r24
    3778:	1f 92       	push	r1
    377a:	ff 92       	push	r15
    377c:	83 e4       	ldi	r24, 0x43	; 67
    377e:	96 e0       	ldi	r25, 0x06	; 6
    3780:	9f 93       	push	r25
    3782:	8f 93       	push	r24
    3784:	1f 93       	push	r17
    3786:	0f 93       	push	r16
    3788:	0e 94 19 0a 	call	0x1432	; 0x1432 <Print::printf(PGM_t const*, ...) [clone .constprop.22]>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/jtag.cpp:390
      _scope,
      packet.out.cmd,
      packet.out.section,
      packet.out.index);
    if      (_scope == 0x01) _rspsize = jtag_scope_general();       /* SCOPE_GENERAL */
    378c:	cd bf       	out	0x3d, r28	; 61
    378e:	de bf       	out	0x3e, r29	; 62
    3790:	91 e0       	ldi	r25, 0x01	; 1
    3792:	f9 12       	cpse	r15, r25
    3794:	68 c1       	rjmp	.+720    	; 0x3a66 <main+0xec4>
jtag_scope_general():
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/jtag.cpp:175
  }

  /*** Only a subset of JTAGICE3 commands are implemented. ***/
  size_t jtag_scope_general (void) {
    size_t  _rspsize = 0;
    uint8_t _cmd     = packet.out.cmd;
    3796:	80 91 d3 60 	lds	r24, 0x60D3	; 0x8060d3 <packet+0x5>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/jtag.cpp:176
    uint8_t _section = packet.out.section;
    379a:	60 90 d5 60 	lds	r6, 0x60D5	; 0x8060d5 <packet+0x7>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/jtag.cpp:177
    uint8_t _index   = packet.out.index;
    379e:	70 90 d6 60 	lds	r7, 0x60D6	; 0x8060d6 <packet+0x8>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/jtag.cpp:178
    uint8_t _length  = packet.out.length;
    37a2:	50 90 d7 60 	lds	r5, 0x60D7	; 0x8060d7 <packet+0x9>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/jtag.cpp:179
    if (_cmd == 0x02) {             /* CMD3_GET_PARAMETER */
    37a6:	82 30       	cpi	r24, 0x02	; 2
    37a8:	09 f0       	breq	.+2      	; 0x37ac <main+0xc0a>
    37aa:	28 c1       	rjmp	.+592    	; 0x39fc <main+0xe5a>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/jtag.cpp:180
      D1PRINTF(" GEN_GET_PARAM=%02X:%02X:%02X\r\n", _section, _index, _length);
    37ac:	e5 2c       	mov	r14, r5
    37ae:	f1 2c       	mov	r15, r1
    37b0:	c7 2c       	mov	r12, r7
    37b2:	d1 2c       	mov	r13, r1
    37b4:	1f 92       	push	r1
    37b6:	5f 92       	push	r5
    37b8:	1f 92       	push	r1
    37ba:	7f 92       	push	r7
    37bc:	1f 92       	push	r1
    37be:	6f 92       	push	r6
    37c0:	8b e4       	ldi	r24, 0x4B	; 75
    37c2:	93 e0       	ldi	r25, 0x03	; 3
    37c4:	9f 93       	push	r25
    37c6:	8f 93       	push	r24
    37c8:	1f 93       	push	r17
    37ca:	0f 93       	push	r16
    37cc:	0e 94 19 0a 	call	0x1432	; 0x1432 <Print::printf(PGM_t const*, ...) [clone .constprop.22]>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/jtag.cpp:181
      if (_section == 0) {          /* SET_GET_CTXT_CONFIG */
    37d0:	cd bf       	out	0x3d, r28	; 61
    37d2:	de bf       	out	0x3e, r29	; 62
    37d4:	61 10       	cpse	r6, r1
    37d6:	ab c0       	rjmp	.+342    	; 0x392e <main+0xd8c>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/jtag.cpp:183
        /* _index == 0-5 */
        memcpy_P(&packet.in.data[0], &jtag_version[_index], _length);
    37d8:	b6 01       	movw	r22, r12
    37da:	6a 5b       	subi	r22, 0xBA	; 186
    37dc:	7c 4f       	sbci	r23, 0xFC	; 252
    37de:	a7 01       	movw	r20, r14
    37e0:	85 ed       	ldi	r24, 0xD5	; 213
    37e2:	90 e6       	ldi	r25, 0x60	; 96
    37e4:	8a d5       	rcall	.+2836   	; 0x42fa <memcpy_P>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/jtag.cpp:184
        D1PRINTF(" VESRION=");
    37e6:	8c e3       	ldi	r24, 0x3C	; 60
    37e8:	93 e0       	ldi	r25, 0x03	; 3
    37ea:	9f 93       	push	r25
    37ec:	8f 93       	push	r24
    37ee:	1f 93       	push	r17
    37f0:	0f 93       	push	r16
    37f2:	0e 94 19 0a 	call	0x1432	; 0x1432 <Print::printf(PGM_t const*, ...) [clone .constprop.22]>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/jtag.cpp:185
        D1PRINTHEX(&packet.in.data[0], _length);
    37f6:	b7 01       	movw	r22, r14
    37f8:	85 ed       	ldi	r24, 0xD5	; 213
    37fa:	90 e6       	ldi	r25, 0x60	; 96
    37fc:	0e 94 a7 09 	call	0x134e	; 0x134e <Print::printHex(void const*, unsigned int, char, unsigned int, char const*) [clone .constprop.19]>
    3800:	0e 94 0d 0a 	call	0x141a	; 0x141a <Print::ln()>
    3804:	0f 90       	pop	r0
    3806:	0f 90       	pop	r0
    3808:	0f 90       	pop	r0
    380a:	0f 90       	pop	r0
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/jtag.cpp:200
          /* Called with PowerDebugger HAS_VTARG_ADJ */
          D1PRINTF(" PHYSICAL=%02X:%02X\r\n", _index, _length);
          memcpy_P(&packet.in.data[0], &jtag_physical[_index & 7], _length);
        }
      }
      packet.in.res = 0x184;        /* RSP3_DATA */
    380c:	84 e8       	ldi	r24, 0x84	; 132
    380e:	91 e0       	ldi	r25, 0x01	; 1
    3810:	80 93 d3 60 	sts	0x60D3, r24	; 0x8060d3 <packet+0x5>
    3814:	90 93 d4 60 	sts	0x60D4, r25	; 0x8060d4 <packet+0x6>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/jtag.cpp:201
      _rspsize = _length + 1;
    3818:	3f ef       	ldi	r19, 0xFF	; 255
    381a:	e3 1a       	sub	r14, r19
    381c:	f3 0a       	sbc	r15, r19
complete_jtag_transactions():
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/jtag.cpp:163
    return _result; /* True if an EDBG Payload is received. */
  }

  /*** Prepare for EDBG payload request from device to host ***/
  void complete_jtag_transactions (size_t _length) {
    _packet_length = _length + 6; /* TOKEN + SEQ[2] + EOT + PAD */
    381e:	97 01       	movw	r18, r14
    3820:	2a 5f       	subi	r18, 0xFA	; 250
    3822:	3f 4f       	sbci	r19, 0xFF	; 255
    3824:	20 93 9c 60 	sts	0x609C, r18	; 0x80609c <_packet_length>
    3828:	30 93 9d 60 	sts	0x609D, r19	; 0x80609d <_packet_length+0x1>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/jtag.cpp:164
    _packet_fragment = 0;
    382c:	10 92 9a 60 	sts	0x609A, r1	; 0x80609a <_packet_fragment>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/jtag.cpp:165
    _packet_endfrag = (_length + 65) / 60;  /* 1 to 15 */
    3830:	c7 01       	movw	r24, r14
    3832:	8f 5b       	subi	r24, 0xBF	; 191
    3834:	9f 4f       	sbci	r25, 0xFF	; 255
    3836:	6c e3       	ldi	r22, 0x3C	; 60
    3838:	70 e0       	ldi	r23, 0x00	; 0
    383a:	0e 94 34 24 	call	0x4868	; 0x4868 <__udivmodhi4>
    383e:	60 93 99 60 	sts	0x6099, r22	; 0x806099 <_packet_endfrag>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/jtag.cpp:166
    packet.in.token = 0x0E;                 /* TOKEN */
    3842:	8e e0       	ldi	r24, 0x0E	; 14
    3844:	80 93 cf 60 	sts	0x60CF, r24	; 0x8060cf <packet+0x1>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/jtag.cpp:167
    packet.rawData[_packet_length] = 0;     /* EOT */
    3848:	22 53       	subi	r18, 0x32	; 50
    384a:	3f 49       	sbci	r19, 0x9F	; 159
    384c:	f9 01       	movw	r30, r18
    384e:	10 82       	st	Z, r1
    3850:	cd ca       	rjmp	.-2662   	; 0x2dec <main+0x24a>
dap_command_check():
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/jtag.cpp:94
            _packet_endfrag = 0;
            _result = true;
          }
          else {
            /* A missing chunk is detected, so an error is returned. */
            D1PRINTF("<EDBG_FAIL>\r\n");
    3852:	8f eb       	ldi	r24, 0xBF	; 191
    3854:	92 e0       	ldi	r25, 0x02	; 2
    3856:	da cb       	rjmp	.-2124   	; 0x300c <main+0x46a>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/jtag.cpp:100
            EP_MEM.dap_data[1] = 0x00;  /* EDBG_RSP_FAIL */
          }
        }
      }
    }
    else if (_cmd == 0x81) {        /* DAP_EDBG_VENDOR_AVR_RSP */
    3858:	91 38       	cpi	r25, 0x81	; 129
    385a:	e9 f5       	brne	.+122    	; 0x38d6 <main+0xd34>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/jtag.cpp:101
      EP_MEM.dap_data[2] = 0;       /* Always zero */
    385c:	10 92 30 63 	sts	0x6330, r1	; 0x806330 <EP_MEM+0x1a>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/jtag.cpp:102
      if (_packet_endfrag == 0) {
    3860:	90 91 99 60 	lds	r25, 0x6099	; 0x806099 <_packet_endfrag>
    3864:	91 11       	cpse	r25, r1
    3866:	0d c0       	rjmp	.+26     	; 0x3882 <main+0xce0>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/jtag.cpp:103
        D1PRINTF("<EDBG_EMPTY>\r\n");
    3868:	80 eb       	ldi	r24, 0xB0	; 176
    386a:	92 e0       	ldi	r25, 0x02	; 2
    386c:	9f 93       	push	r25
    386e:	8f 93       	push	r24
    3870:	1f 93       	push	r17
    3872:	0f 93       	push	r16
    3874:	0e 94 19 0a 	call	0x1432	; 0x1432 <Print::printf(PGM_t const*, ...) [clone .constprop.22]>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/jtag.cpp:104
        EP_MEM.dap_data[1] = 0;
    3878:	10 92 2f 63 	sts	0x632F, r1	; 0x80632f <EP_MEM+0x19>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/jtag.cpp:105
        EP_MEM.dap_data[3] = 0;
    387c:	10 92 31 63 	sts	0x6331, r1	; 0x806331 <EP_MEM+0x1b>
    3880:	cd cb       	rjmp	.-2150   	; 0x301c <main+0x47a>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/jtag.cpp:108
      }
      else {
        memcpy(&EP_MEM.dap_data[4], &packet.in.token + (_packet_fragment * 60), 60);
    3882:	80 91 9a 60 	lds	r24, 0x609A	; 0x80609a <_packet_fragment>
    3886:	2c e3       	ldi	r18, 0x3C	; 60
    3888:	82 9f       	mul	r24, r18
    388a:	f0 01       	movw	r30, r0
    388c:	11 24       	eor	r1, r1
    388e:	e1 53       	subi	r30, 0x31	; 49
    3890:	ff 49       	sbci	r31, 0x9F	; 159
    3892:	a2 e3       	ldi	r26, 0x32	; 50
    3894:	b3 e6       	ldi	r27, 0x63	; 99
    3896:	01 90       	ld	r0, Z+
    3898:	0d 92       	st	X+, r0
    389a:	2a 95       	dec	r18
    389c:	e1 f7       	brne	.-8      	; 0x3896 <main+0xcf4>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/jtag.cpp:109
        EP_MEM.dap_data[1] = ((++_packet_fragment) << 4) | _packet_endfrag;
    389e:	8f 5f       	subi	r24, 0xFF	; 255
    38a0:	80 93 9a 60 	sts	0x609A, r24	; 0x80609a <_packet_fragment>
    38a4:	40 e1       	ldi	r20, 0x10	; 16
    38a6:	84 9f       	mul	r24, r20
    38a8:	90 01       	movw	r18, r0
    38aa:	11 24       	eor	r1, r1
    38ac:	29 2b       	or	r18, r25
    38ae:	20 93 2f 63 	sts	0x632F, r18	; 0x80632f <EP_MEM+0x19>
    38b2:	20 91 9c 60 	lds	r18, 0x609C	; 0x80609c <_packet_length>
    38b6:	30 91 9d 60 	lds	r19, 0x609D	; 0x80609d <_packet_length+0x1>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/jtag.cpp:110
        EP_MEM.dap_data[3] = _packet_fragment == _packet_endfrag ? _packet_length : 60;
    38ba:	98 17       	cp	r25, r24
    38bc:	51 f0       	breq	.+20     	; 0x38d2 <main+0xd30>
    38be:	8c e3       	ldi	r24, 0x3C	; 60
    38c0:	80 93 31 63 	sts	0x6331, r24	; 0x806331 <EP_MEM+0x1b>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/jtag.cpp:111
        _packet_length -= 60;
    38c4:	2c 53       	subi	r18, 0x3C	; 60
    38c6:	31 09       	sbc	r19, r1
    38c8:	20 93 9c 60 	sts	0x609C, r18	; 0x80609c <_packet_length>
    38cc:	30 93 9d 60 	sts	0x609D, r19	; 0x80609d <_packet_length+0x1>
    38d0:	18 cf       	rjmp	.-464    	; 0x3702 <main+0xb60>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/jtag.cpp:110
        EP_MEM.dap_data[3] = 0;
      }
      else {
        memcpy(&EP_MEM.dap_data[4], &packet.in.token + (_packet_fragment * 60), 60);
        EP_MEM.dap_data[1] = ((++_packet_fragment) << 4) | _packet_endfrag;
        EP_MEM.dap_data[3] = _packet_fragment == _packet_endfrag ? _packet_length : 60;
    38d2:	82 2f       	mov	r24, r18
    38d4:	f5 cf       	rjmp	.-22     	; 0x38c0 <main+0xd1e>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/jtag.cpp:118
        D3PRINTHEX(&EP_MEM.dap_data, EP_MEM.dap_data[3] + 4);
      }
    }

    /*** DAP Standard ***/
    else if (_cmd == 0x00) {        /* DAP_CMD_INFO */
    38d6:	91 11       	cpse	r25, r1
    38d8:	1c c0       	rjmp	.+56     	; 0x3912 <main+0xd70>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/jtag.cpp:119
      if (_sub == 0xFF              /* DAP_INFO_PACKET_SIZE      */
    38da:	8f 3f       	cpi	r24, 0xFF	; 255
    38dc:	21 f0       	breq	.+8      	; 0x38e6 <main+0xd44>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/jtag.cpp:120
       || _sub == 0xFB              /* UART Receive Buffer Size  */
    38de:	95 e0       	ldi	r25, 0x05	; 5
    38e0:	98 0f       	add	r25, r24
    38e2:	92 30       	cpi	r25, 0x02	; 2
    38e4:	48 f4       	brcc	.+18     	; 0x38f8 <main+0xd56>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/jtag.cpp:122
       || _sub == 0xFC) {           /* UART Transmit Buffer Size */
        EP_MEM.dap_data[1] = 0x02;  /* length=2 */
    38e6:	82 e0       	ldi	r24, 0x02	; 2
    38e8:	80 93 2f 63 	sts	0x632F, r24	; 0x80632f <EP_MEM+0x19>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/jtag.cpp:123
        EP_MEM.dap_data[2] = 0x40;  /* MaxPacketSize = 64 */
    38ec:	80 e4       	ldi	r24, 0x40	; 64
    38ee:	80 93 30 63 	sts	0x6330, r24	; 0x806330 <EP_MEM+0x1a>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/jtag.cpp:124
        EP_MEM.dap_data[3] = 0x00;
    38f2:	10 92 31 63 	sts	0x6331, r1	; 0x806331 <EP_MEM+0x1b>
    38f6:	05 cf       	rjmp	.-502    	; 0x3702 <main+0xb60>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/jtag.cpp:128
        D3PRINTF(" PI=");
        D3PRINTHEX(&EP_MEM.dap_data, 4);
      }
      else if (_sub == 0xF1) {      /* DAP_INFO_Capabilities */
    38f8:	81 3f       	cpi	r24, 0xF1	; 241
    38fa:	09 f0       	breq	.+2      	; 0x38fe <main+0xd5c>
    38fc:	02 cf       	rjmp	.-508    	; 0x3702 <main+0xb60>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/jtag.cpp:129
        EP_MEM.dap_data[1] = 0x02;  /* length=2 */
    38fe:	82 e0       	ldi	r24, 0x02	; 2
    3900:	80 93 2f 63 	sts	0x632F, r24	; 0x80632f <EP_MEM+0x19>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/jtag.cpp:130
        EP_MEM.dap_data[2] = 0x80;  /* 7:UART Communication Port */
    3904:	80 e8       	ldi	r24, 0x80	; 128
    3906:	80 93 30 63 	sts	0x6330, r24	; 0x806330 <EP_MEM+0x1a>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/jtag.cpp:131
        EP_MEM.dap_data[3] = 0x01;  /* 1:USB COM Port */
    390a:	81 e0       	ldi	r24, 0x01	; 1
    390c:	80 93 31 63 	sts	0x6331, r24	; 0x806331 <EP_MEM+0x1b>
    3910:	f8 ce       	rjmp	.-528    	; 0x3702 <main+0xb60>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/jtag.cpp:136
        D3PRINTF(" PI=");
        D3PRINTHEX(&EP_MEM.dap_data, 4);
      }
    }
    else if (_cmd == 0x02) {        /* DAP_CMD_CONNECT */
    3912:	92 30       	cpi	r25, 0x02	; 2
    3914:	09 f4       	brne	.+2      	; 0x3918 <main+0xd76>
    3916:	f5 ce       	rjmp	.-534    	; 0x3702 <main+0xb60>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/jtag.cpp:142
      /* EP_MEM.dap_data[1] == CONN_TYPE */
      /* Here, the response is returned without processing. */
      D3PRINTF(" PI=");
      D3PRINTHEX(&EP_MEM.dap_data, 2);
    }
    else if (_cmd == 0x01           /* DAP_CMD_HOSTSTATUS */
    3918:	91 30       	cpi	r25, 0x01	; 1
    391a:	31 f4       	brne	.+12     	; 0x3928 <main+0xd86>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/jtag.cpp:143
          && _sub == 0x00) {        /* DAP_LED_CONNECT */
    391c:	88 23       	and	r24, r24
    391e:	09 f4       	brne	.+2      	; 0x3922 <main+0xd80>
    3920:	f0 ce       	rjmp	.-544    	; 0x3702 <main+0xb60>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/jtag.cpp:155
      /* Here, the response is returned without processing. */
      D3PRINTF(" PI=");
      D3PRINTHEX(&EP_MEM.dap_data, 2);
    }
    else {
      EP_MEM.dap_data[1] = 0x00;    /* other 0 length result */
    3922:	10 92 2f 63 	sts	0x632F, r1	; 0x80632f <EP_MEM+0x19>
    3926:	ed ce       	rjmp	.-550    	; 0x3702 <main+0xb60>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/jtag.cpp:149
      /* EP_MEM.dap_data[2] == LED_ON/OFF */
      /* Here, the response is returned without processing. */
      D3PRINTF(" PI=");
      D3PRINTHEX(&EP_MEM.dap_data, 3);
    }
    else if (_cmd == 0x03) {        /* DAP_CMD_DISCONNECT */
    3928:	93 30       	cpi	r25, 0x03	; 3
    392a:	d9 f7       	brne	.-10     	; 0x3922 <main+0xd80>
    392c:	ea ce       	rjmp	.-556    	; 0x3702 <main+0xb60>
jtag_scope_general():
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/jtag.cpp:187
        /* _index == 0-5 */
        memcpy_P(&packet.in.data[0], &jtag_version[_index], _length);
        D1PRINTF(" VESRION=");
        D1PRINTHEX(&packet.in.data[0], _length);
      }
      else if (_section == 1) {     /* SET_GET_CTXT_PHYSICAL */
    392e:	f1 e0       	ldi	r31, 0x01	; 1
    3930:	6f 12       	cpse	r6, r31
    3932:	6c cf       	rjmp	.-296    	; 0x380c <main+0xc6a>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/jtag.cpp:188
        if (_index == 0 || _index == 0x20) {  /* PARM3_VTARGET */
    3934:	87 2d       	mov	r24, r7
    3936:	8f 7d       	andi	r24, 0xDF	; 223
    3938:	09 f0       	breq	.+2      	; 0x393c <main+0xd9a>
    393a:	48 c0       	rjmp	.+144    	; 0x39cc <main+0xe2a>
get_vdd():
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/sys.cpp:389
   * A delay of 1250us is required for the voltage to stabilize.
   * The result is 10-bit, so multiply by 10.0 to convert to 1V * 0.0001.
   * The ADC0 peripheral is operational only during voltage measurements.
   */
  uint16_t get_vdd (void) {
    ADC0_INTFLAGS = ~0;
    393c:	8f ef       	ldi	r24, 0xFF	; 255
    393e:	80 93 07 06 	sts	0x0607, r24	; 0x800607 <__TEXT_REGION_LENGTH__+0x7f0607>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/sys.cpp:390
    ADC0_SAMPLE = 0;
    3942:	10 92 0e 06 	sts	0x060E, r1	; 0x80060e <__TEXT_REGION_LENGTH__+0x7f060e>
    3946:	10 92 0f 06 	sts	0x060F, r1	; 0x80060f <__TEXT_REGION_LENGTH__+0x7f060f>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/sys.cpp:391
    ADC0_CTRLA = ADC_ENABLE_bm;
    394a:	60 92 00 06 	sts	0x0600, r6	; 0x800600 <__TEXT_REGION_LENGTH__+0x7f0600>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/sys.cpp:392
    ADC0_CTRLB = ADC_PRESC_DIV4_gc;
    394e:	60 92 01 06 	sts	0x0601, r6	; 0x800601 <__TEXT_REGION_LENGTH__+0x7f0601>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/sys.cpp:393
    ADC0_CTRLC = ADC_REFSEL_1V024_gc;
    3952:	84 e0       	ldi	r24, 0x04	; 4
    3954:	80 93 02 06 	sts	0x0602, r24	; 0x800602 <__TEXT_REGION_LENGTH__+0x7f0602>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/sys.cpp:394
    ADC0_CTRLE = 250; /* (SAMPDUR + 0.5) * fCLK_ADC sample duration */
    3958:	8a ef       	ldi	r24, 0xFA	; 250
    395a:	80 93 04 06 	sts	0x0604, r24	; 0x800604 <__TEXT_REGION_LENGTH__+0x7f0604>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/sys.cpp:395
    ADC0_MUXPOS = ADC_MUXPOS_VDDDIV10_gc; /* ADC channel VDD * 0.1 */
    395e:	84 e4       	ldi	r24, 0x44	; 68
    3960:	80 93 0b 06 	sts	0x060B, r24	; 0x80060b <__TEXT_REGION_LENGTH__+0x7f060b>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/sys.cpp:396
    ADC0_COMMAND = ADC_MODE_SINGLE_10BIT_gc | ADC_START_IMMEDIATE_gc;
    3964:	81 e1       	ldi	r24, 0x11	; 17
    3966:	80 93 0a 06 	sts	0x060A, r24	; 0x80060a <__TEXT_REGION_LENGTH__+0x7f060a>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/sys.cpp:397
    loop_until_bit_is_set(ADC0_INTFLAGS, ADC_SAMPRDY_bp);
    396a:	80 91 07 06 	lds	r24, 0x0607	; 0x800607 <__TEXT_REGION_LENGTH__+0x7f0607>
    396e:	81 ff       	sbrs	r24, 1
    3970:	fc cf       	rjmp	.-8      	; 0x396a <main+0xdc8>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/sys.cpp:398
    uint16_t _adc_reading = ADC0_SAMPLE;
    3972:	20 91 0e 06 	lds	r18, 0x060E	; 0x80060e <__TEXT_REGION_LENGTH__+0x7f060e>
    3976:	30 91 0f 06 	lds	r19, 0x060F	; 0x80060f <__TEXT_REGION_LENGTH__+0x7f060f>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/sys.cpp:399
    _adc_reading += (_adc_reading << 3) + _adc_reading;
    397a:	c9 01       	movw	r24, r18
    397c:	43 e0       	ldi	r20, 0x03	; 3
    397e:	88 0f       	add	r24, r24
    3980:	99 1f       	adc	r25, r25
    3982:	4a 95       	dec	r20
    3984:	e1 f7       	brne	.-8      	; 0x397e <main+0xddc>
    3986:	22 0f       	add	r18, r18
    3988:	33 1f       	adc	r19, r19
    398a:	82 0f       	add	r24, r18
    398c:	93 1f       	adc	r25, r19
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/sys.cpp:400
    ADC0_CTRLA = 0;
    398e:	10 92 00 06 	sts	0x0600, r1	; 0x800600 <__TEXT_REGION_LENGTH__+0x7f0600>
jtag_scope_general():
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/jtag.cpp:190
          /* Called with `-xvtarget` HAS_VTARG_READ */
          _vtarget = SYS::get_vdd();
    3992:	80 93 95 60 	sts	0x6095, r24	; 0x806095 <_vtarget>
    3996:	90 93 96 60 	sts	0x6096, r25	; 0x806096 <_vtarget+0x1>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/jtag.cpp:191
          D1PRINTF(" VTARGET=%d\r\n", _vtarget);
    399a:	9f 93       	push	r25
    399c:	8f 93       	push	r24
    399e:	8e e2       	ldi	r24, 0x2E	; 46
    39a0:	93 e0       	ldi	r25, 0x03	; 3
    39a2:	9f 93       	push	r25
    39a4:	8f 93       	push	r24
    39a6:	1f 93       	push	r17
    39a8:	0f 93       	push	r16
    39aa:	0e 94 19 0a 	call	0x1432	; 0x1432 <Print::printf(PGM_t const*, ...) [clone .constprop.22]>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/jtag.cpp:192
          packet.in.wValue = _vtarget;
    39ae:	80 91 95 60 	lds	r24, 0x6095	; 0x806095 <_vtarget>
    39b2:	90 91 96 60 	lds	r25, 0x6096	; 0x806096 <_vtarget+0x1>
    39b6:	80 93 d5 60 	sts	0x60D5, r24	; 0x8060d5 <packet+0x7>
    39ba:	90 93 d6 60 	sts	0x60D6, r25	; 0x8060d6 <packet+0x8>
    39be:	0f 90       	pop	r0
    39c0:	0f 90       	pop	r0
    39c2:	0f 90       	pop	r0
    39c4:	0f 90       	pop	r0
    39c6:	0f 90       	pop	r0
    39c8:	0f 90       	pop	r0
    39ca:	20 cf       	rjmp	.-448    	; 0x380c <main+0xc6a>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/jtag.cpp:196
        }
        else {                      /* PARM3_ANALOG_XXXX */
          /* Called with PowerDebugger HAS_VTARG_ADJ */
          D1PRINTF(" PHYSICAL=%02X:%02X\r\n", _index, _length);
    39cc:	1f 92       	push	r1
    39ce:	5f 92       	push	r5
    39d0:	1f 92       	push	r1
    39d2:	7f 92       	push	r7
    39d4:	88 e1       	ldi	r24, 0x18	; 24
    39d6:	93 e0       	ldi	r25, 0x03	; 3
    39d8:	9f 93       	push	r25
    39da:	8f 93       	push	r24
    39dc:	1f 93       	push	r17
    39de:	0f 93       	push	r16
    39e0:	0e 94 19 0a 	call	0x1432	; 0x1432 <Print::printf(PGM_t const*, ...) [clone .constprop.22]>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/jtag.cpp:197
          memcpy_P(&packet.in.data[0], &jtag_physical[_index & 7], _length);
    39e4:	67 2d       	mov	r22, r7
    39e6:	67 70       	andi	r22, 0x07	; 7
    39e8:	70 e0       	ldi	r23, 0x00	; 0
    39ea:	60 5f       	subi	r22, 0xF0	; 240
    39ec:	7c 4f       	sbci	r23, 0xFC	; 252
    39ee:	a7 01       	movw	r20, r14
    39f0:	85 ed       	ldi	r24, 0xD5	; 213
    39f2:	90 e6       	ldi	r25, 0x60	; 96
    39f4:	82 d4       	rcall	.+2308   	; 0x42fa <memcpy_P>
    39f6:	cd bf       	out	0x3d, r28	; 61
    39f8:	de bf       	out	0x3e, r29	; 62
    39fa:	08 cf       	rjmp	.-496    	; 0x380c <main+0xc6a>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/jtag.cpp:203
        }
      }
      packet.in.res = 0x184;        /* RSP3_DATA */
      _rspsize = _length + 1;
    }
    else if (_cmd == 0x10) {        /* CMD3_SIGN_ON */
    39fc:	80 31       	cpi	r24, 0x10	; 16
    39fe:	b9 f4       	brne	.+46     	; 0x3a2e <main+0xe8c>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/jtag.cpp:204
      D1PRINTF(" GEN_SIGN_ON\r\n");
    3a00:	81 e0       	ldi	r24, 0x01	; 1
    3a02:	93 e0       	ldi	r25, 0x03	; 3
    3a04:	9f 93       	push	r25
    3a06:	8f 93       	push	r24
    3a08:	1f 93       	push	r17
    3a0a:	0f 93       	push	r16
    3a0c:	0e 94 19 0a 	call	0x1432	; 0x1432 <Print::printf(PGM_t const*, ...) [clone .constprop.22]>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/jtag.cpp:207
      _jtag_hvctrl = 0;
      _jtag_unlock = 0;
      _jtag_arch = 0;
    3a10:	10 92 98 60 	sts	0x6098, r1	; 0x806098 <_jtag_arch>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/jtag.cpp:213
      _tpi_setmode = 0;
      packet.in.res = 0x80;         /* RSP3_OK */
    }
    else if (_cmd == 0x11) {        /* CMD3_SIGN_OFF */
      D1PRINTF(" GEN_SIGN_OFF\r\n");
      packet.in.res = 0x80;         /* RSP3_OK */
    3a14:	80 e8       	ldi	r24, 0x80	; 128
    3a16:	90 e0       	ldi	r25, 0x00	; 0
    3a18:	80 93 d3 60 	sts	0x60D3, r24	; 0x8060d3 <packet+0x5>
    3a1c:	90 93 d4 60 	sts	0x60D4, r25	; 0x8060d4 <packet+0x6>
    3a20:	0f 90       	pop	r0
    3a22:	0f 90       	pop	r0
    3a24:	0f 90       	pop	r0
    3a26:	0f 90       	pop	r0
main():
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/jtag.cpp:383
  } /* jtag_scope_avr_core */

  /* Processing branches depending on the scope specifier. */
  /* Currently, four types of scope are known: */
  void jtag_scope_branch (void) {
    size_t _rspsize = 0;
    3a28:	f1 2c       	mov	r15, r1
    3a2a:	e1 2c       	mov	r14, r1
    3a2c:	f8 ce       	rjmp	.-528    	; 0x381e <main+0xc7c>
jtag_scope_general():
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/jtag.cpp:211
      _jtag_unlock = 0;
      _jtag_arch = 0;
      _tpi_setmode = 0;
      packet.in.res = 0x80;         /* RSP3_OK */
    }
    else if (_cmd == 0x11) {        /* CMD3_SIGN_OFF */
    3a2e:	81 31       	cpi	r24, 0x11	; 17
    3a30:	49 f4       	brne	.+18     	; 0x3a44 <main+0xea2>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/jtag.cpp:212
      D1PRINTF(" GEN_SIGN_OFF\r\n");
    3a32:	81 ef       	ldi	r24, 0xF1	; 241
    3a34:	92 e0       	ldi	r25, 0x02	; 2
    3a36:	9f 93       	push	r25
    3a38:	8f 93       	push	r24
    3a3a:	1f 93       	push	r17
    3a3c:	0f 93       	push	r16
    3a3e:	0e 94 19 0a 	call	0x1432	; 0x1432 <Print::printf(PGM_t const*, ...) [clone .constprop.22]>
    3a42:	e8 cf       	rjmp	.-48     	; 0x3a14 <main+0xe72>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/jtag.cpp:216
      packet.in.res = 0x80;         /* RSP3_OK */
    }
    else {
      D1PRINTF(" GEN=%02X:%02X:%02X\r\n", _section, _index, _length);
    3a44:	1f 92       	push	r1
    3a46:	5f 92       	push	r5
    3a48:	1f 92       	push	r1
    3a4a:	7f 92       	push	r7
    3a4c:	1f 92       	push	r1
    3a4e:	6f 92       	push	r6
    3a50:	8b ed       	ldi	r24, 0xDB	; 219
    3a52:	92 e0       	ldi	r25, 0x02	; 2
    3a54:	9f 93       	push	r25
    3a56:	8f 93       	push	r24
    3a58:	1f 93       	push	r17
    3a5a:	0f 93       	push	r16
    3a5c:	0e 94 19 0a 	call	0x1432	; 0x1432 <Print::printf(PGM_t const*, ...) [clone .constprop.22]>
    3a60:	cd bf       	out	0x3d, r28	; 61
    3a62:	de bf       	out	0x3e, r29	; 62
    3a64:	e1 cf       	rjmp	.-62     	; 0x3a28 <main+0xe86>
jtag_scope_branch():
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/jtag.cpp:396
  #ifdef _Not_yet_implemented_stub_
    else if (_scope == 0x00) _rspsize = jtag_scope_info();          /* SCOPE_INFO */ /* Not used with EDBG/CMSIS-DAP type */
    else if (_scope == 0x11) _rspsize = ISP::jtag_scope_isp();      /* SCOPE_AVR_ISP */
    else if (_scope == 0x13) _rspsize = AVR32::jtag_scope_avr32();  /* SCOPE_AVR32 */
  #endif
    else if (_scope == 0x12) _rspsize = jtag_scope_avr_core();      /* SCOPE_AVR */
    3a66:	92 e1       	ldi	r25, 0x12	; 18
    3a68:	f9 12       	cpse	r15, r25
    3a6a:	a4 c2       	rjmp	.+1352   	; 0x3fb4 <main+0x1412>
jtag_scope_avr_core():
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/jtag.cpp:265
  }

  /* The AVR scope is further branched by the ARCH designator. */
  size_t jtag_scope_avr_core (void) {
    size_t  _rspsize = 0;
    uint8_t _cmd     = packet.out.cmd;
    3a6c:	f0 90 d3 60 	lds	r15, 0x60D3	; 0x8060d3 <packet+0x5>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/jtag.cpp:266
    uint8_t _section = packet.out.section;
    3a70:	d0 90 d5 60 	lds	r13, 0x60D5	; 0x8060d5 <packet+0x7>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/jtag.cpp:267
    uint8_t _index   = packet.out.index;
    3a74:	c0 90 d6 60 	lds	r12, 0x60D6	; 0x8060d6 <packet+0x8>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/jtag.cpp:268
    uint8_t _length  = packet.out.length;
    3a78:	70 90 d7 60 	lds	r7, 0x60D7	; 0x8060d7 <packet+0x9>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/jtag.cpp:269
    if (_cmd == 0x01) {             /* CMD3_SET_PARAMETER */
    3a7c:	e1 e0       	ldi	r30, 0x01	; 1
    3a7e:	fe 12       	cpse	r15, r30
    3a80:	ca c0       	rjmp	.+404    	; 0x3c16 <main+0x1074>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/jtag.cpp:270
      uint16_t _data = packet.out.wValue;
    3a82:	e0 90 d8 60 	lds	r14, 0x60D8	; 0x8060d8 <packet+0xa>
    3a86:	f0 90 d9 60 	lds	r15, 0x60D9	; 0x8060d9 <packet+0xb>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/jtag.cpp:271
      D1PRINTF(" AVR_SET_PARAM=%02X:%02X:%02X:%02X\r\n", _section, _index, _length, _data);
    3a8a:	ff 92       	push	r15
    3a8c:	ef 92       	push	r14
    3a8e:	1f 92       	push	r1
    3a90:	7f 92       	push	r7
    3a92:	1f 92       	push	r1
    3a94:	cf 92       	push	r12
    3a96:	1f 92       	push	r1
    3a98:	df 92       	push	r13
    3a9a:	8d e0       	ldi	r24, 0x0D	; 13
    3a9c:	95 e0       	ldi	r25, 0x05	; 5
    3a9e:	9f 93       	push	r25
    3aa0:	8f 93       	push	r24
    3aa2:	1f 93       	push	r17
    3aa4:	0f 93       	push	r16
    3aa6:	0e 94 19 0a 	call	0x1432	; 0x1432 <Print::printf(PGM_t const*, ...) [clone .constprop.22]>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/jtag.cpp:272
      if (_section == 0) {          /* SET_GET_CTXT_CONFIG */
    3aaa:	cd bf       	out	0x3d, r28	; 61
    3aac:	de bf       	out	0x3e, r29	; 62
    3aae:	d1 10       	cpse	r13, r1
    3ab0:	29 c0       	rjmp	.+82     	; 0x3b04 <main+0xf62>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/jtag.cpp:273
        if (_index == 0) {          /* PARM3_ARCH */
    3ab2:	c1 10       	cpse	r12, r1
    3ab4:	19 c0       	rjmp	.+50     	; 0x3ae8 <main+0xf46>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/jtag.cpp:274
          D1PRINTF(" ARCH=%02X\r\n", _data);
    3ab6:	ff 92       	push	r15
    3ab8:	ef 92       	push	r14
    3aba:	80 e0       	ldi	r24, 0x00	; 0
    3abc:	95 e0       	ldi	r25, 0x05	; 5
    3abe:	9f 93       	push	r25
    3ac0:	8f 93       	push	r24
    3ac2:	1f 93       	push	r17
    3ac4:	0f 93       	push	r16
    3ac6:	0e 94 19 0a 	call	0x1432	; 0x1432 <Print::printf(PGM_t const*, ...) [clone .constprop.22]>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/jtag.cpp:275
          _jtag_arch = _data;       /* 5:PARM3_ARCH_UPDI */
    3aca:	e0 92 98 60 	sts	0x6098, r14	; 0x806098 <_jtag_arch>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/jtag.cpp:341
        }
        else if (_index == 7) {     /* PARM3_OPT_CHIP_ERASE_TO_ENTER */
          /* This is a stub that shows no signs of being used. */
          /* force unlock chip-erase */
          /* This might be called having no `-e` or `-D`, but having `-F`. */
          D1PRINTF(" UNLOCKEN=%02X\r\n", _data);
    3ace:	0f 90       	pop	r0
    3ad0:	0f 90       	pop	r0
    3ad2:	0f 90       	pop	r0
    3ad4:	0f 90       	pop	r0
    3ad6:	0f 90       	pop	r0
    3ad8:	0f 90       	pop	r0
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/jtag.cpp:345
          _jtag_unlock = _data;     /* 1:ENABLE */
        }
      }
      packet.in.res = 0x80;         /* RSP3_OK */
    3ada:	80 e8       	ldi	r24, 0x80	; 128
    3adc:	90 e0       	ldi	r25, 0x00	; 0
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/jtag.cpp:376
    else if (_jtag_arch == 0x01) _rspsize = DWIRE::jtag_scope_tiny();   /* dWire? */
    else if (_jtag_arch == 0x02) _rspsize = MEGA::jtag_scope_mega();    /* MEGA */
    else if (_jtag_arch == 0x03) _rspsize = XMEGA::jtag_scope_xmega();  /* XMEGA */
  #endif
    else if (_jtag_arch == 0x05) _rspsize = UPDI::jtag_scope_updi();    /* UPDI support */
    else packet.in.res = 0xA0;      /* RSP3_FAILED */
    3ade:	80 93 d3 60 	sts	0x60D3, r24	; 0x8060d3 <packet+0x5>
    3ae2:	90 93 d4 60 	sts	0x60D4, r25	; 0x8060d4 <packet+0x6>
    3ae6:	a0 cf       	rjmp	.-192    	; 0x3a28 <main+0xe86>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/jtag.cpp:277
      if (_section == 0) {          /* SET_GET_CTXT_CONFIG */
        if (_index == 0) {          /* PARM3_ARCH */
          D1PRINTF(" ARCH=%02X\r\n", _data);
          _jtag_arch = _data;       /* 5:PARM3_ARCH_UPDI */
        }
        else if (_index == 1) {     /* PARM3_SESS_PURPOSE */
    3ae8:	31 e0       	ldi	r19, 0x01	; 1
    3aea:	c3 12       	cpse	r12, r19
    3aec:	f6 cf       	rjmp	.-20     	; 0x3ada <main+0xf38>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/jtag.cpp:278
          D1PRINTF(" SESS_PURPOSE=%02X\r\n", _data);
    3aee:	ff 92       	push	r15
    3af0:	ef 92       	push	r14
    3af2:	8b ee       	ldi	r24, 0xEB	; 235
    3af4:	94 e0       	ldi	r25, 0x04	; 4
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/jtag.cpp:341
        }
        else if (_index == 7) {     /* PARM3_OPT_CHIP_ERASE_TO_ENTER */
          /* This is a stub that shows no signs of being used. */
          /* force unlock chip-erase */
          /* This might be called having no `-e` or `-D`, but having `-F`. */
          D1PRINTF(" UNLOCKEN=%02X\r\n", _data);
    3af6:	9f 93       	push	r25
    3af8:	8f 93       	push	r24
    3afa:	1f 93       	push	r17
    3afc:	0f 93       	push	r16
    3afe:	0e 94 19 0a 	call	0x1432	; 0x1432 <Print::printf(PGM_t const*, ...) [clone .constprop.22]>
    3b02:	e5 cf       	rjmp	.-54     	; 0x3ace <main+0xf2c>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/jtag.cpp:282
        else if (_index == 1) {     /* PARM3_SESS_PURPOSE */
          D1PRINTF(" SESS_PURPOSE=%02X\r\n", _data);
          _jtag_sess = _data;       /* */
        }
      }
      else if (_section == 1) {     /* SET_GET_CTXT_PHYSICAL */
    3b04:	41 e0       	ldi	r20, 0x01	; 1
    3b06:	d4 12       	cpse	r13, r20
    3b08:	4a c0       	rjmp	.+148    	; 0x3b9e <main+0xffc>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/jtag.cpp:283
        if (_index == 0) {          /* PARM3_CONNECTION */
    3b0a:	c1 10       	cpse	r12, r1
    3b0c:	0d c0       	rjmp	.+26     	; 0x3b28 <main+0xf86>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/jtag.cpp:284
          D1PRINTF(" CONNECTION=%02X\r\n", _data);
    3b0e:	ff 92       	push	r15
    3b10:	ef 92       	push	r14
    3b12:	88 ed       	ldi	r24, 0xD8	; 216
    3b14:	94 e0       	ldi	r25, 0x04	; 4
    3b16:	9f 93       	push	r25
    3b18:	8f 93       	push	r24
    3b1a:	1f 93       	push	r17
    3b1c:	0f 93       	push	r16
    3b1e:	0e 94 19 0a 	call	0x1432	; 0x1432 <Print::printf(PGM_t const*, ...) [clone .constprop.22]>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/jtag.cpp:285
          _jtag_conn = _data;       /* 8:PARM3_CONN_UPDI */
    3b22:	e0 92 97 60 	sts	0x6097, r14	; 0x806097 <_jtag_conn>
    3b26:	d3 cf       	rjmp	.-90     	; 0x3ace <main+0xf2c>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/jtag.cpp:287
        }
        else if (_index == 0x31) {  /* PARM3_CLK_XMEGA_PDI */
    3b28:	81 e3       	ldi	r24, 0x31	; 49
    3b2a:	c8 12       	cpse	r12, r24
    3b2c:	d6 cf       	rjmp	.-84     	; 0x3ada <main+0xf38>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/jtag.cpp:288
          _xclk = _data;
    3b2e:	e0 92 18 60 	sts	0x6018, r14	; 0x806018 <_xclk>
    3b32:	f0 92 19 60 	sts	0x6019, r15	; 0x806019 <_xclk+0x1>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/jtag.cpp:289
          D1PRINTF(" XCLK=%d\r\n", _xclk);
    3b36:	ff 92       	push	r15
    3b38:	ef 92       	push	r14
    3b3a:	8d ec       	ldi	r24, 0xCD	; 205
    3b3c:	94 e0       	ldi	r25, 0x04	; 4
    3b3e:	9f 93       	push	r25
    3b40:	8f 93       	push	r24
    3b42:	1f 93       	push	r17
    3b44:	0f 93       	push	r16
    3b46:	0e 94 19 0a 	call	0x1432	; 0x1432 <Print::printf(PGM_t const*, ...) [clone .constprop.22]>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/jtag.cpp:290
          if (_jtag_arch == 5) {
    3b4a:	0f 90       	pop	r0
    3b4c:	0f 90       	pop	r0
    3b4e:	0f 90       	pop	r0
    3b50:	0f 90       	pop	r0
    3b52:	0f 90       	pop	r0
    3b54:	0f 90       	pop	r0
    3b56:	80 91 98 60 	lds	r24, 0x6098	; 0x806098 <_jtag_arch>
    3b5a:	85 30       	cpi	r24, 0x05	; 5
    3b5c:	09 f0       	breq	.+2      	; 0x3b60 <main+0xfbe>
    3b5e:	bd cf       	rjmp	.-134    	; 0x3ada <main+0xf38>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/jtag.cpp:293
            /* Called with `-B xclk[unit]`. */
            /* XCLK Range Limitation : LSB=kHz */
            if (_xclk > 240) _xclk = 240;
    3b60:	80 91 18 60 	lds	r24, 0x6018	; 0x806018 <_xclk>
    3b64:	90 91 19 60 	lds	r25, 0x6019	; 0x806019 <_xclk+0x1>
    3b68:	81 3f       	cpi	r24, 0xF1	; 241
    3b6a:	91 05       	cpc	r25, r1
    3b6c:	98 f0       	brcs	.+38     	; 0x3b94 <main+0xff2>
    3b6e:	80 ef       	ldi	r24, 0xF0	; 240
    3b70:	90 e0       	ldi	r25, 0x00	; 0
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/jtag.cpp:294
            else if (_xclk < 40) _xclk = 40;
    3b72:	80 93 18 60 	sts	0x6018, r24	; 0x806018 <_xclk>
    3b76:	90 93 19 60 	sts	0x6019, r25	; 0x806019 <_xclk+0x1>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/jtag.cpp:296
  #if defined(DEBUG)
            if (_xclk != _data) D1PRINTF(" FIX_CLK=%d\r\n", _xclk);
    3b7a:	80 91 18 60 	lds	r24, 0x6018	; 0x806018 <_xclk>
    3b7e:	90 91 19 60 	lds	r25, 0x6019	; 0x806019 <_xclk+0x1>
    3b82:	e8 16       	cp	r14, r24
    3b84:	f9 06       	cpc	r15, r25
    3b86:	09 f4       	brne	.+2      	; 0x3b8a <main+0xfe8>
    3b88:	a8 cf       	rjmp	.-176    	; 0x3ada <main+0xf38>
    3b8a:	9f 93       	push	r25
    3b8c:	8f 93       	push	r24
    3b8e:	8f eb       	ldi	r24, 0xBF	; 191
    3b90:	94 e0       	ldi	r25, 0x04	; 4
    3b92:	b1 cf       	rjmp	.-158    	; 0x3af6 <main+0xf54>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/jtag.cpp:294
          D1PRINTF(" XCLK=%d\r\n", _xclk);
          if (_jtag_arch == 5) {
            /* Called with `-B xclk[unit]`. */
            /* XCLK Range Limitation : LSB=kHz */
            if (_xclk > 240) _xclk = 240;
            else if (_xclk < 40) _xclk = 40;
    3b94:	88 97       	sbiw	r24, 0x28	; 40
    3b96:	88 f7       	brcc	.-30     	; 0x3b7a <main+0xfd8>
    3b98:	88 e2       	ldi	r24, 0x28	; 40
    3b9a:	90 e0       	ldi	r25, 0x00	; 0
    3b9c:	ea cf       	rjmp	.-44     	; 0x3b72 <main+0xfd0>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/jtag.cpp:301
            if (_xclk != _data) D1PRINTF(" FIX_CLK=%d\r\n", _xclk);
  #endif
          }
        }
      }
      else if (_section == 2) {     /* SET_GET_CTXT_DEVICE */
    3b9e:	92 e0       	ldi	r25, 0x02	; 2
    3ba0:	d9 12       	cpse	r13, r25
    3ba2:	26 c0       	rjmp	.+76     	; 0x3bf0 <main+0x104e>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/jtag.cpp:302
        if (_index == 0) {          /* PARM3_DEVICEDESC */
    3ba4:	c1 10       	cpse	r12, r1
    3ba6:	99 cf       	rjmp	.-206    	; 0x3ada <main+0xf38>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/jtag.cpp:303
          D1PRINTF(" DEVICEDESC=%X\r\n", _length);
    3ba8:	1f 92       	push	r1
    3baa:	7f 92       	push	r7
    3bac:	8e ea       	ldi	r24, 0xAE	; 174
    3bae:	94 e0       	ldi	r25, 0x04	; 4
    3bb0:	9f 93       	push	r25
    3bb2:	8f 93       	push	r24
    3bb4:	1f 93       	push	r17
    3bb6:	0f 93       	push	r16
    3bb8:	0e 94 19 0a 	call	0x1432	; 0x1432 <Print::printf(PGM_t const*, ...) [clone .constprop.22]>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/jtag.cpp:304
          memcpy(&Device_Descriptor, &packet.out.setData[0], _length & 63);
    3bbc:	47 2d       	mov	r20, r7
    3bbe:	4f 73       	andi	r20, 0x3F	; 63
    3bc0:	50 e0       	ldi	r21, 0x00	; 0
    3bc2:	68 ed       	ldi	r22, 0xD8	; 216
    3bc4:	70 e6       	ldi	r23, 0x60	; 96
    3bc6:	8e e9       	ldi	r24, 0x9E	; 158
    3bc8:	90 e6       	ldi	r25, 0x60	; 96
    3bca:	ba d6       	rcall	.+3444   	; 0x4940 <memcpy>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/jtag.cpp:325
            /* Even with all this, the BOOTROW information is still undefined! */
            /* Re-analysis of newer ICE FW is needed! */
          }
          /* STUB: And other descriptors. */
  #elif defined(DEBUG)
          if (_jtag_arch == 5) {
    3bcc:	0f 90       	pop	r0
    3bce:	0f 90       	pop	r0
    3bd0:	0f 90       	pop	r0
    3bd2:	0f 90       	pop	r0
    3bd4:	0f 90       	pop	r0
    3bd6:	0f 90       	pop	r0
    3bd8:	80 91 98 60 	lds	r24, 0x6098	; 0x806098 <_jtag_arch>
    3bdc:	85 30       	cpi	r24, 0x05	; 5
    3bde:	09 f0       	breq	.+2      	; 0x3be2 <main+0x1040>
    3be0:	7c cf       	rjmp	.-264    	; 0x3ada <main+0xf38>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/jtag.cpp:326
            D1PRINTF(" HVTYPE=%02X\r\n", Device_Descriptor.UPDI.hvupdi_variant);
    3be2:	80 91 cd 60 	lds	r24, 0x60CD	; 0x8060cd <Device_Descriptor+0x2f>
    3be6:	1f 92       	push	r1
    3be8:	8f 93       	push	r24
    3bea:	8f e9       	ldi	r24, 0x9F	; 159
    3bec:	94 e0       	ldi	r25, 0x04	; 4
    3bee:	83 cf       	rjmp	.-250    	; 0x3af6 <main+0xf54>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/jtag.cpp:331
          }
  #endif
        }
      }
      else if (_section == 3) {     /* SET_GET_CTXT_OPTIONS */
    3bf0:	e3 e0       	ldi	r30, 0x03	; 3
    3bf2:	de 12       	cpse	r13, r30
    3bf4:	72 cf       	rjmp	.-284    	; 0x3ada <main+0xf38>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/jtag.cpp:332
        if (_index == 6) {          /* PARM3_OPT_12V_UPDI_ENABLE */
    3bf6:	f6 e0       	ldi	r31, 0x06	; 6
    3bf8:	cf 12       	cpse	r12, r31
    3bfa:	05 c0       	rjmp	.+10     	; 0x3c06 <main+0x1064>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/jtag.cpp:334
          /* Called with `-xhvupdi` hvupdi_support */
          D1PRINTF(" HVCTRLEN=%02X\r\n", _data);
    3bfc:	ff 92       	push	r15
    3bfe:	ef 92       	push	r14
    3c00:	8e e8       	ldi	r24, 0x8E	; 142
    3c02:	94 e0       	ldi	r25, 0x04	; 4
    3c04:	78 cf       	rjmp	.-272    	; 0x3af6 <main+0xf54>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/jtag.cpp:337
          _jtag_hvctrl = _data;     /* 1:ENABLE */
        }
        else if (_index == 7) {     /* PARM3_OPT_CHIP_ERASE_TO_ENTER */
    3c06:	27 e0       	ldi	r18, 0x07	; 7
    3c08:	c2 12       	cpse	r12, r18
    3c0a:	67 cf       	rjmp	.-306    	; 0x3ada <main+0xf38>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/jtag.cpp:341
          /* This is a stub that shows no signs of being used. */
          /* force unlock chip-erase */
          /* This might be called having no `-e` or `-D`, but having `-F`. */
          D1PRINTF(" UNLOCKEN=%02X\r\n", _data);
    3c0c:	ff 92       	push	r15
    3c0e:	ef 92       	push	r14
    3c10:	8d e7       	ldi	r24, 0x7D	; 125
    3c12:	94 e0       	ldi	r25, 0x04	; 4
    3c14:	70 cf       	rjmp	.-288    	; 0x3af6 <main+0xf54>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/jtag.cpp:347
          _jtag_unlock = _data;     /* 1:ENABLE */
        }
      }
      packet.in.res = 0x80;         /* RSP3_OK */
    }
    else if (_cmd == 0x02) {        /* CMD3_GET_PARAMETER */
    3c16:	32 e0       	ldi	r19, 0x02	; 2
    3c18:	f3 12       	cpse	r15, r19
    3c1a:	64 c0       	rjmp	.+200    	; 0x3ce4 <main+0x1142>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/jtag.cpp:348
      D1PRINTF(" AVR_GET_PARAMETER=%02X:%02X:%02X\r\n", _section, _index, _length);
    3c1c:	e7 2c       	mov	r14, r7
    3c1e:	f1 2c       	mov	r15, r1
    3c20:	1f 92       	push	r1
    3c22:	7f 92       	push	r7
    3c24:	1f 92       	push	r1
    3c26:	cf 92       	push	r12
    3c28:	1f 92       	push	r1
    3c2a:	df 92       	push	r13
    3c2c:	89 e5       	ldi	r24, 0x59	; 89
    3c2e:	94 e0       	ldi	r25, 0x04	; 4
    3c30:	9f 93       	push	r25
    3c32:	8f 93       	push	r24
    3c34:	1f 93       	push	r17
    3c36:	0f 93       	push	r16
    3c38:	0e 94 19 0a 	call	0x1432	; 0x1432 <Print::printf(PGM_t const*, ...) [clone .constprop.22]>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/jtag.cpp:349
      if (_section == 0) {          /* SET_GET_CTXT_CONFIG */
    3c3c:	cd bf       	out	0x3d, r28	; 61
    3c3e:	de bf       	out	0x3e, r29	; 62
    3c40:	d1 10       	cpse	r13, r1
    3c42:	22 c0       	rjmp	.+68     	; 0x3c88 <main+0x10e6>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/jtag.cpp:350
        if (_index == 0) {          /* PARM3_ARCH */
    3c44:	c1 10       	cpse	r12, r1
    3c46:	16 c0       	rjmp	.+44     	; 0x3c74 <main+0x10d2>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/jtag.cpp:351
          D1PRINTF(" ARCH=%02X\r\n", _jtag_arch);
    3c48:	80 91 98 60 	lds	r24, 0x6098	; 0x806098 <_jtag_arch>
    3c4c:	1f 92       	push	r1
    3c4e:	8f 93       	push	r24
    3c50:	8c e4       	ldi	r24, 0x4C	; 76
    3c52:	94 e0       	ldi	r25, 0x04	; 4
    3c54:	9f 93       	push	r25
    3c56:	8f 93       	push	r24
    3c58:	1f 93       	push	r17
    3c5a:	0f 93       	push	r16
    3c5c:	0e 94 19 0a 	call	0x1432	; 0x1432 <Print::printf(PGM_t const*, ...) [clone .constprop.22]>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/jtag.cpp:352
          packet.in.data[0] = _jtag_arch;
    3c60:	80 91 98 60 	lds	r24, 0x6098	; 0x806098 <_jtag_arch>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/jtag.cpp:359
      }
      else if (_section == 1) {     /* SET_GET_CTXT_PHYSICAL */
        if (_index == 0) {          /* PARM3_CONNECTION */
          /* This is a stub that is called but not used. */
          D1PRINTF(" CONNECTION=%02X\r\n", _jtag_conn);
          packet.in.data[0] = _jtag_conn;
    3c64:	80 93 d5 60 	sts	0x60D5, r24	; 0x8060d5 <packet+0x7>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/jtag.cpp:364
        }
        else if (_index == 0x31) {  /* PARM3_CLK_XMEGA_PDI */
          /* `-B <num>khz` : "khz" units are required. */
          D1PRINTF(" XCLK=%d\r\n", _xclk);
          packet.in.wValue = _xclk;
    3c68:	0f 90       	pop	r0
    3c6a:	0f 90       	pop	r0
    3c6c:	0f 90       	pop	r0
    3c6e:	0f 90       	pop	r0
    3c70:	0f 90       	pop	r0
    3c72:	0f 90       	pop	r0
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/jtag.cpp:367
        }
      }
      packet.in.res = 0x184;        /* RSP3_DATA */
    3c74:	84 e8       	ldi	r24, 0x84	; 132
    3c76:	91 e0       	ldi	r25, 0x01	; 1
    3c78:	80 93 d3 60 	sts	0x60D3, r24	; 0x8060d3 <packet+0x5>
    3c7c:	90 93 d4 60 	sts	0x60D4, r25	; 0x8060d4 <packet+0x6>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/jtag.cpp:368
      _rspsize = _length + 1;
    3c80:	ff ef       	ldi	r31, 0xFF	; 255
    3c82:	ef 1a       	sub	r14, r31
    3c84:	ff 0a       	sbc	r15, r31
    3c86:	cb cd       	rjmp	.-1130   	; 0x381e <main+0xc7c>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/jtag.cpp:355
        if (_index == 0) {          /* PARM3_ARCH */
          D1PRINTF(" ARCH=%02X\r\n", _jtag_arch);
          packet.in.data[0] = _jtag_arch;
        }
      }
      else if (_section == 1) {     /* SET_GET_CTXT_PHYSICAL */
    3c88:	91 e0       	ldi	r25, 0x01	; 1
    3c8a:	d9 12       	cpse	r13, r25
    3c8c:	f3 cf       	rjmp	.-26     	; 0x3c74 <main+0x10d2>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/jtag.cpp:356
        if (_index == 0) {          /* PARM3_CONNECTION */
    3c8e:	c1 10       	cpse	r12, r1
    3c90:	0f c0       	rjmp	.+30     	; 0x3cb0 <main+0x110e>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/jtag.cpp:358
          /* This is a stub that is called but not used. */
          D1PRINTF(" CONNECTION=%02X\r\n", _jtag_conn);
    3c92:	80 91 97 60 	lds	r24, 0x6097	; 0x806097 <_jtag_conn>
    3c96:	1f 92       	push	r1
    3c98:	8f 93       	push	r24
    3c9a:	89 e3       	ldi	r24, 0x39	; 57
    3c9c:	94 e0       	ldi	r25, 0x04	; 4
    3c9e:	9f 93       	push	r25
    3ca0:	8f 93       	push	r24
    3ca2:	1f 93       	push	r17
    3ca4:	0f 93       	push	r16
    3ca6:	0e 94 19 0a 	call	0x1432	; 0x1432 <Print::printf(PGM_t const*, ...) [clone .constprop.22]>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/jtag.cpp:359
          packet.in.data[0] = _jtag_conn;
    3caa:	80 91 97 60 	lds	r24, 0x6097	; 0x806097 <_jtag_conn>
    3cae:	da cf       	rjmp	.-76     	; 0x3c64 <main+0x10c2>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/jtag.cpp:361
        }
        else if (_index == 0x31) {  /* PARM3_CLK_XMEGA_PDI */
    3cb0:	e1 e3       	ldi	r30, 0x31	; 49
    3cb2:	ce 12       	cpse	r12, r30
    3cb4:	df cf       	rjmp	.-66     	; 0x3c74 <main+0x10d2>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/jtag.cpp:363
          /* `-B <num>khz` : "khz" units are required. */
          D1PRINTF(" XCLK=%d\r\n", _xclk);
    3cb6:	80 91 19 60 	lds	r24, 0x6019	; 0x806019 <_xclk+0x1>
    3cba:	8f 93       	push	r24
    3cbc:	80 91 18 60 	lds	r24, 0x6018	; 0x806018 <_xclk>
    3cc0:	8f 93       	push	r24
    3cc2:	8e e2       	ldi	r24, 0x2E	; 46
    3cc4:	94 e0       	ldi	r25, 0x04	; 4
    3cc6:	9f 93       	push	r25
    3cc8:	8f 93       	push	r24
    3cca:	1f 93       	push	r17
    3ccc:	0f 93       	push	r16
    3cce:	0e 94 19 0a 	call	0x1432	; 0x1432 <Print::printf(PGM_t const*, ...) [clone .constprop.22]>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/jtag.cpp:364
          packet.in.wValue = _xclk;
    3cd2:	80 91 18 60 	lds	r24, 0x6018	; 0x806018 <_xclk>
    3cd6:	90 91 19 60 	lds	r25, 0x6019	; 0x806019 <_xclk+0x1>
    3cda:	80 93 d5 60 	sts	0x60D5, r24	; 0x8060d5 <packet+0x7>
    3cde:	90 93 d6 60 	sts	0x60D6, r25	; 0x8060d6 <packet+0x8>
    3ce2:	c2 cf       	rjmp	.-124    	; 0x3c68 <main+0x10c6>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/jtag.cpp:375
  #ifdef _Not_yet_implemented_stub_
    else if (_jtag_arch == 0x01) _rspsize = DWIRE::jtag_scope_tiny();   /* dWire? */
    else if (_jtag_arch == 0x02) _rspsize = MEGA::jtag_scope_mega();    /* MEGA */
    else if (_jtag_arch == 0x03) _rspsize = XMEGA::jtag_scope_xmega();  /* XMEGA */
  #endif
    else if (_jtag_arch == 0x05) _rspsize = UPDI::jtag_scope_updi();    /* UPDI support */
    3ce4:	80 91 98 60 	lds	r24, 0x6098	; 0x806098 <_jtag_arch>
    3ce8:	85 30       	cpi	r24, 0x05	; 5
    3cea:	09 f0       	breq	.+2      	; 0x3cee <main+0x114c>
    3cec:	60 c1       	rjmp	.+704    	; 0x3fae <main+0x140c>
jtag_scope_updi():
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/updi.cpp:422

  /* ARCH=UPDI scope Provides functionality. */
  size_t jtag_scope_updi (void) {
    size_t _rspsize = 0;
    uint8_t _cmd = packet.out.cmd;
    if (_cmd == 0x10) {             /* CMD3_SIGN_ON */
    3cee:	20 e1       	ldi	r18, 0x10	; 16
    3cf0:	f2 12       	cpse	r15, r18
    3cf2:	51 c0       	rjmp	.+162    	; 0x3d96 <main+0x11f4>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/updi.cpp:423
      D1PRINTF(" UPDI_SIGN_ON=EXT:%02X\r\n", packet.out.bMType);
    3cf4:	1f 92       	push	r1
    3cf6:	df 92       	push	r13
    3cf8:	85 e1       	ldi	r24, 0x15	; 21
    3cfa:	94 e0       	ldi	r25, 0x04	; 4
    3cfc:	9f 93       	push	r25
    3cfe:	8f 93       	push	r24
    3d00:	1f 93       	push	r17
    3d02:	0f 93       	push	r16
    3d04:	0e 94 19 0a 	call	0x1432	; 0x1432 <Print::printf(PGM_t const*, ...) [clone .constprop.22]>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/updi.cpp:424
      USART::setup();
    3d08:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <USART::setup()>
change_updi():
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/usart.cpp:79
    }
  }

  /*** Sets up single-wire asynchronous mode for UPDI operation. ***/
  void change_updi (void) {
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    3d0c:	ef b6       	in	r14, 0x3f	; 63
__iCliRetVal():
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/tools/avr-gcc/7.3.0-avr8-gnu-toolchain/avr/include/util/atomic.h:50
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    3d0e:	f8 94       	cli
change_updi():
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/usart.cpp:80
      D1PRINTF(" UART=UPDI\r\n");
    3d10:	8d e7       	ldi	r24, 0x7D	; 125
    3d12:	93 e0       	ldi	r25, 0x03	; 3
    3d14:	9f 93       	push	r25
    3d16:	8f 93       	push	r24
    3d18:	1f 93       	push	r17
    3d1a:	0f 93       	push	r16
    3d1c:	0e 94 19 0a 	call	0x1432	; 0x1432 <Print::printf(PGM_t const*, ...) [clone .constprop.22]>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/usart.cpp:81
      PORTMUX_USARTROUTEA = PORTMUX_USART_PGM;
    3d20:	f0 92 e2 05 	sts	0x05E2, r15	; 0x8005e2 <__TEXT_REGION_LENGTH__+0x7f05e2>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/usart.cpp:82
      USART0_STATUS = USART_DREIF_bm;
    3d24:	80 e2       	ldi	r24, 0x20	; 32
    3d26:	80 93 04 08 	sts	0x0804, r24	; 0x800804 <__TEXT_REGION_LENGTH__+0x7f0804>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/usart.cpp:83
      USART0_BAUD  = calk_baud_khz(_xclk);
    3d2a:	80 91 18 60 	lds	r24, 0x6018	; 0x806018 <_xclk>
    3d2e:	90 91 19 60 	lds	r25, 0x6019	; 0x806019 <_xclk+0x1>
    3d32:	0e 94 64 05 	call	0xac8	; 0xac8 <USART::calk_baud_khz(unsigned int)>
    3d36:	80 93 08 08 	sts	0x0808, r24	; 0x800808 <__TEXT_REGION_LENGTH__+0x7f0808>
    3d3a:	90 93 09 08 	sts	0x0809, r25	; 0x800809 <__TEXT_REGION_LENGTH__+0x7f0809>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/usart.cpp:84
      USART0_CTRLC = USART_CHSIZE_8BIT_gc | USART_PMODE_EVEN_gc | USART_SBMODE_2BIT_gc;
    3d3e:	8b e2       	ldi	r24, 0x2B	; 43
    3d40:	80 93 07 08 	sts	0x0807, r24	; 0x800807 <__TEXT_REGION_LENGTH__+0x7f0807>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/usart.cpp:87
      /* The RS485_INT:_BV(1) attribute is undocumented but works fine.     */
      /* Without it, an additional delay is required before sending a byte. */
      USART0_CTRLA = USART_LBME_bm | USART_RS485_INT_gc;
    3d44:	8a e0       	ldi	r24, 0x0A	; 10
    3d46:	80 93 05 08 	sts	0x0805, r24	; 0x800805 <__TEXT_REGION_LENGTH__+0x7f0805>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/usart.cpp:88
      USART0_CTRLB = USART_RXEN_bm | USART_TXEN_bm | USART_ODME_bm;
    3d4a:	88 ec       	ldi	r24, 0xC8	; 200
    3d4c:	80 93 06 08 	sts	0x0806, r24	; 0x800806 <__TEXT_REGION_LENGTH__+0x7f0806>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/usart.cpp:89
      D1PRINTF(" BAUD=%04X:%02X\r\n", USART0_BAUD, USART0_CTRLB);
    3d50:	20 91 06 08 	lds	r18, 0x0806	; 0x800806 <__TEXT_REGION_LENGTH__+0x7f0806>
    3d54:	80 91 08 08 	lds	r24, 0x0808	; 0x800808 <__TEXT_REGION_LENGTH__+0x7f0808>
    3d58:	90 91 09 08 	lds	r25, 0x0809	; 0x800809 <__TEXT_REGION_LENGTH__+0x7f0809>
    3d5c:	1f 92       	push	r1
    3d5e:	2f 93       	push	r18
    3d60:	9f 93       	push	r25
    3d62:	8f 93       	push	r24
    3d64:	8b e6       	ldi	r24, 0x6B	; 107
    3d66:	93 e0       	ldi	r25, 0x03	; 3
    3d68:	9f 93       	push	r25
    3d6a:	8f 93       	push	r24
    3d6c:	1f 93       	push	r17
    3d6e:	0f 93       	push	r16
    3d70:	0e 94 19 0a 	call	0x1432	; 0x1432 <Print::printf(PGM_t const*, ...) [clone .constprop.22]>
__iRestore():
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/tools/avr-gcc/7.3.0-avr8-gnu-toolchain/avr/include/util/atomic.h:70
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    3d74:	ef be       	out	0x3f, r14	; 63
jtag_scope_updi():
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/updi.cpp:426
      USART::change_updi();
      _rspsize = Timeout::command(&connect);
    3d76:	80 e3       	ldi	r24, 0x30	; 48
    3d78:	92 e1       	ldi	r25, 0x12	; 18
    3d7a:	0e 94 49 15 	call	0x2a92	; 0x2a92 <Timeout::command(unsigned int (*)(), unsigned int) [clone .constprop.17]>
    3d7e:	7c 01       	movw	r14, r24
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/updi.cpp:428
      /* If it fails here, it is expected to try again, giving it a chance at HV control. */
      packet.in.res = _rspsize ? 0x84 : 0xA0; /* RSP3_DATA : RSP3_FAILED */
    3d80:	cd bf       	out	0x3d, r28	; 61
    3d82:	de bf       	out	0x3e, r29	; 62
main():
    3d84:	84 e8       	ldi	r24, 0x84	; 132
    3d86:	90 e0       	ldi	r25, 0x00	; 0
jtag_scope_updi():
    3d88:	e1 14       	cp	r14, r1
    3d8a:	f1 04       	cpc	r15, r1
    3d8c:	09 f0       	breq	.+2      	; 0x3d90 <main+0x11ee>
    3d8e:	bc c0       	rjmp	.+376    	; 0x3f08 <main+0x1366>
main():
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/updi.cpp:481
    else if (_cmd == 0x23) {        /* CMD3_WRITE_MEMORY */
      D1PRINTF(" UPDI_WRITE=%02X:%06lX:%04X\r\n", packet.out.bMType,
        packet.out.dwAddr, (size_t)packet.out.dwLength);
      _rspsize = Timeout::command(Command_Table.write_memory);
    }
    packet.in.res = _rspsize ? 0x80 : 0xA0;   /* RSP3_OK : RSP3_FAILED */
    3d90:	80 ea       	ldi	r24, 0xA0	; 160
    3d92:	90 e0       	ldi	r25, 0x00	; 0
    3d94:	b9 c0       	rjmp	.+370    	; 0x3f08 <main+0x1366>
jtag_scope_updi():
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/updi.cpp:431
      _rspsize = Timeout::command(&connect);
      /* If it fails here, it is expected to try again, giving it a chance at HV control. */
      packet.in.res = _rspsize ? 0x84 : 0xA0; /* RSP3_DATA : RSP3_FAILED */
      return _rspsize;
    }
    else if (_cmd == 0x11) {        /* CMD3_SIGN_OFF */
    3d96:	91 e1       	ldi	r25, 0x11	; 17
    3d98:	f9 12       	cpse	r15, r25
    3d9a:	1f c0       	rjmp	.+62     	; 0x3dda <main+0x1238>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/updi.cpp:432
      D1PRINTF(" UPDI_SIGN_OFF\r\n");
    3d9c:	84 e0       	ldi	r24, 0x04	; 4
    3d9e:	94 e0       	ldi	r25, 0x04	; 4
    3da0:	9f 93       	push	r25
    3da2:	8f 93       	push	r24
    3da4:	1f 93       	push	r17
    3da6:	0f 93       	push	r16
    3da8:	0e 94 19 0a 	call	0x1432	; 0x1432 <Print::printf(PGM_t const*, ...) [clone .constprop.22]>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/updi.cpp:434
      /* If UPDI control has failed, RSP3_OK is always returned. */
      _rspsize = bit_is_set(PGCONF, PGCONF_UPDI_bp) ? Timeout::command(&disconnect) : 1;
    3dac:	0f 90       	pop	r0
    3dae:	0f 90       	pop	r0
    3db0:	0f 90       	pop	r0
    3db2:	0f 90       	pop	r0
    3db4:	e8 9b       	sbis	0x1d, 0	; 29
    3db6:	0d c0       	rjmp	.+26     	; 0x3dd2 <main+0x1230>
    3db8:	88 e0       	ldi	r24, 0x08	; 8
    3dba:	92 e1       	ldi	r25, 0x12	; 18
    3dbc:	0e 94 49 15 	call	0x2a92	; 0x2a92 <Timeout::command(unsigned int (*)(), unsigned int) [clone .constprop.17]>
    3dc0:	7c 01       	movw	r14, r24
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/updi.cpp:435
      USART::setup();
    3dc2:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <USART::setup()>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/updi.cpp:436
      USART::change_vcp();
    3dc6:	0e 94 3d 0a 	call	0x147a	; 0x147a <USART::change_vcp()>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/updi.cpp:481
    else if (_cmd == 0x23) {        /* CMD3_WRITE_MEMORY */
      D1PRINTF(" UPDI_WRITE=%02X:%06lX:%04X\r\n", packet.out.bMType,
        packet.out.dwAddr, (size_t)packet.out.dwLength);
      _rspsize = Timeout::command(Command_Table.write_memory);
    }
    packet.in.res = _rspsize ? 0x80 : 0xA0;   /* RSP3_OK : RSP3_FAILED */
    3dca:	e1 14       	cp	r14, r1
    3dcc:	f1 04       	cpc	r15, r1
    3dce:	01 f3       	breq	.-64     	; 0x3d90 <main+0x11ee>
    3dd0:	31 c0       	rjmp	.+98     	; 0x3e34 <main+0x1292>
main():
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/updi.cpp:434
      return _rspsize;
    }
    else if (_cmd == 0x11) {        /* CMD3_SIGN_OFF */
      D1PRINTF(" UPDI_SIGN_OFF\r\n");
      /* If UPDI control has failed, RSP3_OK is always returned. */
      _rspsize = bit_is_set(PGCONF, PGCONF_UPDI_bp) ? Timeout::command(&disconnect) : 1;
    3dd2:	ee 24       	eor	r14, r14
    3dd4:	e3 94       	inc	r14
    3dd6:	f1 2c       	mov	r15, r1
    3dd8:	f4 cf       	rjmp	.-24     	; 0x3dc2 <main+0x1220>
jtag_scope_updi():
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/updi.cpp:438
      USART::setup();
      USART::change_vcp();
    }
    else if (_cmd == 0x15) {        /* CMD3_ENTER_PROGMODE */
    3dda:	e5 e1       	ldi	r30, 0x15	; 21
    3ddc:	fe 12       	cpse	r15, r30
    3dde:	18 c0       	rjmp	.+48     	; 0x3e10 <main+0x126e>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/updi.cpp:439
      D1PRINTF(" UPDI_ENTER_PROG\r\n");
    3de0:	81 ef       	ldi	r24, 0xF1	; 241
    3de2:	93 e0       	ldi	r25, 0x03	; 3
    3de4:	9f 93       	push	r25
    3de6:	8f 93       	push	r24
    3de8:	1f 93       	push	r17
    3dea:	0f 93       	push	r16
    3dec:	0e 94 19 0a 	call	0x1432	; 0x1432 <Print::printf(PGM_t const*, ...) [clone .constprop.22]>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/updi.cpp:442
      /* On failure, RSP3_OK is returned if a UPDI connection is available. */
      /* Locked devices are given the opportunity to write to USERROW and erase the chip. */
      _rspsize = Timeout::command(&enter_progmode) || bit_is_set(PGCONF, PGCONF_UPDI_bp);
    3df0:	81 ea       	ldi	r24, 0xA1	; 161
    3df2:	9f e0       	ldi	r25, 0x0F	; 15
    3df4:	0e 94 49 15 	call	0x2a92	; 0x2a92 <Timeout::command(unsigned int (*)(), unsigned int) [clone .constprop.17]>
    3df8:	0f 90       	pop	r0
    3dfa:	0f 90       	pop	r0
    3dfc:	0f 90       	pop	r0
    3dfe:	0f 90       	pop	r0
    3e00:	89 2b       	or	r24, r25
    3e02:	21 f4       	brne	.+8      	; 0x3e0c <main+0x126a>
    3e04:	ed b2       	in	r14, 0x1d	; 29
    3e06:	fe 2d       	mov	r31, r14
    3e08:	f1 70       	andi	r31, 0x01	; 1
    3e0a:	ef 2e       	mov	r14, r31
    3e0c:	f1 2c       	mov	r15, r1
    3e0e:	dd cf       	rjmp	.-70     	; 0x3dca <main+0x1228>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/updi.cpp:444
    }
    else if (_cmd == 0x16) {        /* CMD3_LEAVE_PROGMODE */
    3e10:	26 e1       	ldi	r18, 0x16	; 22
    3e12:	f2 12       	cpse	r15, r18
    3e14:	12 c0       	rjmp	.+36     	; 0x3e3a <main+0x1298>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/updi.cpp:445
      D1PRINTF(" UPDI_LEAVE_PROG\r\n");
    3e16:	8e ed       	ldi	r24, 0xDE	; 222
    3e18:	93 e0       	ldi	r25, 0x03	; 3
    3e1a:	9f 93       	push	r25
    3e1c:	8f 93       	push	r24
    3e1e:	1f 93       	push	r17
    3e20:	0f 93       	push	r16
    3e22:	0e 94 19 0a 	call	0x1432	; 0x1432 <Print::printf(PGM_t const*, ...) [clone .constprop.22]>
    3e26:	0f 90       	pop	r0
    3e28:	0f 90       	pop	r0
    3e2a:	0f 90       	pop	r0
    3e2c:	0f 90       	pop	r0
main():
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/updi.cpp:448
      /* There is nothing to do. */
      /* The actual termination process is delayed until CMD3_SIGN_OFF. */
      _rspsize = 1;
    3e2e:	ee 24       	eor	r14, r14
    3e30:	e3 94       	inc	r14
    3e32:	f1 2c       	mov	r15, r1
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/updi.cpp:481
    else if (_cmd == 0x23) {        /* CMD3_WRITE_MEMORY */
      D1PRINTF(" UPDI_WRITE=%02X:%06lX:%04X\r\n", packet.out.bMType,
        packet.out.dwAddr, (size_t)packet.out.dwLength);
      _rspsize = Timeout::command(Command_Table.write_memory);
    }
    packet.in.res = _rspsize ? 0x80 : 0xA0;   /* RSP3_OK : RSP3_FAILED */
    3e34:	80 e8       	ldi	r24, 0x80	; 128
    3e36:	90 e0       	ldi	r25, 0x00	; 0
    3e38:	67 c0       	rjmp	.+206    	; 0x3f08 <main+0x1366>
jtag_scope_updi():
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/updi.cpp:450
      D1PRINTF(" UPDI_LEAVE_PROG\r\n");
      /* There is nothing to do. */
      /* The actual termination process is delayed until CMD3_SIGN_OFF. */
      _rspsize = 1;
    }
    else if (_cmd == 0x20) {        /* CMD3_ERASE_MEMORY */
    3e3a:	30 e2       	ldi	r19, 0x20	; 32
    3e3c:	f3 12       	cpse	r15, r19
    3e3e:	20 c0       	rjmp	.+64     	; 0x3e80 <main+0x12de>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/updi.cpp:451
      D1PRINTF(" UPDI_ERASE=%02X:%06lX\r\n",
    3e40:	80 91 d9 60 	lds	r24, 0x60D9	; 0x8060d9 <packet+0xb>
    3e44:	8f 93       	push	r24
    3e46:	80 91 d8 60 	lds	r24, 0x60D8	; 0x8060d8 <packet+0xa>
    3e4a:	8f 93       	push	r24
    3e4c:	80 91 d7 60 	lds	r24, 0x60D7	; 0x8060d7 <packet+0x9>
    3e50:	8f 93       	push	r24
    3e52:	80 91 d6 60 	lds	r24, 0x60D6	; 0x8060d6 <packet+0x8>
    3e56:	8f 93       	push	r24
    3e58:	1f 92       	push	r1
    3e5a:	df 92       	push	r13
    3e5c:	85 ec       	ldi	r24, 0xC5	; 197
    3e5e:	93 e0       	ldi	r25, 0x03	; 3
    3e60:	9f 93       	push	r25
    3e62:	8f 93       	push	r24
    3e64:	1f 93       	push	r17
    3e66:	0f 93       	push	r16
    3e68:	0e 94 19 0a 	call	0x1432	; 0x1432 <Print::printf(PGM_t const*, ...) [clone .constprop.22]>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/updi.cpp:453
        packet.out.bEType, packet.out.dwPageAddr);
      _rspsize = Timeout::command(Command_Table.erase_memory);
    3e6c:	80 91 12 63 	lds	r24, 0x6312	; 0x806312 <Command_Table+0x4>
    3e70:	90 91 13 63 	lds	r25, 0x6313	; 0x806313 <Command_Table+0x5>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/updi.cpp:479
      return _rspsize;
    }
    else if (_cmd == 0x23) {        /* CMD3_WRITE_MEMORY */
      D1PRINTF(" UPDI_WRITE=%02X:%06lX:%04X\r\n", packet.out.bMType,
        packet.out.dwAddr, (size_t)packet.out.dwLength);
      _rspsize = Timeout::command(Command_Table.write_memory);
    3e74:	0e 94 49 15 	call	0x2a92	; 0x2a92 <Timeout::command(unsigned int (*)(), unsigned int) [clone .constprop.17]>
    3e78:	7c 01       	movw	r14, r24
    3e7a:	cd bf       	out	0x3d, r28	; 61
    3e7c:	de bf       	out	0x3e, r29	; 62
    3e7e:	a5 cf       	rjmp	.-182    	; 0x3dca <main+0x1228>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/updi.cpp:455
    else if (_cmd == 0x20) {        /* CMD3_ERASE_MEMORY */
      D1PRINTF(" UPDI_ERASE=%02X:%06lX\r\n",
        packet.out.bEType, packet.out.dwPageAddr);
      _rspsize = Timeout::command(Command_Table.erase_memory);
    }
    else if (bit_is_clear(PGCONF, PGCONF_UPDI_bp)) { /* empty */ }
    3e80:	e8 9b       	sbis	0x1d, 0	; 29
    3e82:	92 c0       	rjmp	.+292    	; 0x3fa8 <main+0x1406>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/updi.cpp:456
    else if (_cmd == 0x21) {        /* CMD3_READ_MEMORY */
    3e84:	91 e2       	ldi	r25, 0x21	; 33
    3e86:	f9 12       	cpse	r15, r25
    3e88:	6b c0       	rjmp	.+214    	; 0x3f60 <main+0x13be>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/updi.cpp:457
      D1PRINTF(" UPDI_READ=%02X:%06lX:%04X\r\n", packet.out.bMType,
    3e8a:	80 91 db 60 	lds	r24, 0x60DB	; 0x8060db <packet+0xd>
    3e8e:	8f 93       	push	r24
    3e90:	80 91 da 60 	lds	r24, 0x60DA	; 0x8060da <packet+0xc>
    3e94:	8f 93       	push	r24
    3e96:	80 91 d9 60 	lds	r24, 0x60D9	; 0x8060d9 <packet+0xb>
    3e9a:	8f 93       	push	r24
    3e9c:	80 91 d8 60 	lds	r24, 0x60D8	; 0x8060d8 <packet+0xa>
    3ea0:	8f 93       	push	r24
    3ea2:	80 91 d7 60 	lds	r24, 0x60D7	; 0x8060d7 <packet+0x9>
    3ea6:	8f 93       	push	r24
    3ea8:	80 91 d6 60 	lds	r24, 0x60D6	; 0x8060d6 <packet+0x8>
    3eac:	8f 93       	push	r24
    3eae:	1f 92       	push	r1
    3eb0:	df 92       	push	r13
    3eb2:	88 ea       	ldi	r24, 0xA8	; 168
    3eb4:	93 e0       	ldi	r25, 0x03	; 3
    3eb6:	9f 93       	push	r25
    3eb8:	8f 93       	push	r24
    3eba:	1f 93       	push	r17
    3ebc:	0f 93       	push	r16
    3ebe:	0e 94 19 0a 	call	0x1432	; 0x1432 <Print::printf(PGM_t const*, ...) [clone .constprop.22]>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/updi.cpp:459
        packet.out.dwAddr, (size_t)packet.out.dwLength);
      uint8_t m_type = packet.out.bMType;
    3ec2:	80 91 d5 60 	lds	r24, 0x60D5	; 0x8060d5 <packet+0x7>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/updi.cpp:460
      size_t _wLength = packet.out.dwLength;
    3ec6:	e0 90 da 60 	lds	r14, 0x60DA	; 0x8060da <packet+0xc>
    3eca:	f0 90 db 60 	lds	r15, 0x60DB	; 0x8060db <packet+0xd>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/updi.cpp:461
      if (m_type == 0xD3) {         /* MTYPE_SIB */
    3ece:	cd bf       	out	0x3d, r28	; 61
    3ed0:	de bf       	out	0x3e, r29	; 62
    3ed2:	83 3d       	cpi	r24, 0xD3	; 211
    3ed4:	f1 f4       	brne	.+60     	; 0x3f12 <main+0x1370>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/updi.cpp:463
        /* The SIB request occurs before ENTER_PROGMODE. */
        memcpy(&packet.in.data[(uint8_t)packet.out.dwAddr & 31], &_sib, ((_wLength - 1) & 31) + 1);
    3ed6:	80 91 d6 60 	lds	r24, 0x60D6	; 0x8060d6 <packet+0x8>
    3eda:	8f 71       	andi	r24, 0x1F	; 31
    3edc:	90 e0       	ldi	r25, 0x00	; 0
    3ede:	a7 01       	movw	r20, r14
    3ee0:	41 50       	subi	r20, 0x01	; 1
    3ee2:	51 09       	sbc	r21, r1
    3ee4:	4f 71       	andi	r20, 0x1F	; 31
    3ee6:	55 27       	eor	r21, r21
    3ee8:	4f 5f       	subi	r20, 0xFF	; 255
    3eea:	5f 4f       	sbci	r21, 0xFF	; 255
    3eec:	6e ee       	ldi	r22, 0xEE	; 238
    3eee:	72 e6       	ldi	r23, 0x62	; 98
    3ef0:	8b 52       	subi	r24, 0x2B	; 43
    3ef2:	9f 49       	sbci	r25, 0x9F	; 159
    3ef4:	25 d5       	rcall	.+2634   	; 0x4940 <memcpy>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/updi.cpp:464
        _rspsize = _wLength + 1;
    3ef6:	ff ef       	ldi	r31, 0xFF	; 255
    3ef8:	ef 1a       	sub	r14, r31
    3efa:	ff 0a       	sbc	r15, r31
main():
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/updi.cpp:473
      }
      /* If not in PROGMODE, respond with a dummy. */
      /* A dummy SIG will be returned for locked devices. */
      /* This will prevent AVRDUDE from displaying annoying errors. */
      else _rspsize = read_dummy();
      packet.in.res = _rspsize ? 0x184 : 0xA0;
    3efc:	84 e8       	ldi	r24, 0x84	; 132
    3efe:	91 e0       	ldi	r25, 0x01	; 1
jtag_scope_updi():
    3f00:	e1 14       	cp	r14, r1
    3f02:	f1 04       	cpc	r15, r1
    3f04:	09 f4       	brne	.+2      	; 0x3f08 <main+0x1366>
    3f06:	44 cf       	rjmp	.-376    	; 0x3d90 <main+0x11ee>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/updi.cpp:481
    else if (_cmd == 0x23) {        /* CMD3_WRITE_MEMORY */
      D1PRINTF(" UPDI_WRITE=%02X:%06lX:%04X\r\n", packet.out.bMType,
        packet.out.dwAddr, (size_t)packet.out.dwLength);
      _rspsize = Timeout::command(Command_Table.write_memory);
    }
    packet.in.res = _rspsize ? 0x80 : 0xA0;   /* RSP3_OK : RSP3_FAILED */
    3f08:	80 93 d3 60 	sts	0x60D3, r24	; 0x8060d3 <packet+0x5>
    3f0c:	90 93 d4 60 	sts	0x60D4, r25	; 0x8060d4 <packet+0x6>
    3f10:	86 cc       	rjmp	.-1780   	; 0x381e <main+0xc7c>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/updi.cpp:466
      if (m_type == 0xD3) {         /* MTYPE_SIB */
        /* The SIB request occurs before ENTER_PROGMODE. */
        memcpy(&packet.in.data[(uint8_t)packet.out.dwAddr & 31], &_sib, ((_wLength - 1) & 31) + 1);
        _rspsize = _wLength + 1;
      }
      else if (bit_is_set(PGCONF, PGCONF_PROG_bp)) {
    3f12:	e9 9b       	sbis	0x1d, 1	; 29
    3f14:	08 c0       	rjmp	.+16     	; 0x3f26 <main+0x1384>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/updi.cpp:467
        _rspsize = Timeout::command(Command_Table.read_memory);
    3f16:	80 91 10 63 	lds	r24, 0x6310	; 0x806310 <Command_Table+0x2>
    3f1a:	90 91 11 63 	lds	r25, 0x6311	; 0x806311 <Command_Table+0x3>
    3f1e:	0e 94 49 15 	call	0x2a92	; 0x2a92 <Timeout::command(unsigned int (*)(), unsigned int) [clone .constprop.17]>
    3f22:	7c 01       	movw	r14, r24
    3f24:	eb cf       	rjmp	.-42     	; 0x3efc <main+0x135a>
read_dummy():
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/updi.cpp:319
   * Read dummy memory if necessary.
   */
  size_t read_dummy (void) {
    uint8_t  m_type = packet.out.bMType;
    size_t _wLength = packet.out.dwLength;
    if (m_type == 0xB4 && _sib[0]) {
    3f26:	84 3b       	cpi	r24, 0xB4	; 180
    3f28:	a1 f4       	brne	.+40     	; 0x3f52 <main+0x13b0>
    3f2a:	80 91 ee 62 	lds	r24, 0x62EE	; 0x8062ee <_sib>
    3f2e:	88 23       	and	r24, r24
    3f30:	81 f0       	breq	.+32     	; 0x3f52 <main+0x13b0>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/updi.cpp:322
      /* The SIGNATURE of a locked device cannot be read.            */
      /* But, the SIB can be read, so a Dummy SIGNATURE is returned. */
      packet.in.data[0] = 0x1E;
    3f32:	9e e1       	ldi	r25, 0x1E	; 30
    3f34:	90 93 d5 60 	sts	0x60D5, r25	; 0x8060d5 <packet+0x7>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/updi.cpp:323
      packet.in.data[1] = _sib[0] == ' ' ? 'A' : _sib[0];
    3f38:	80 32       	cpi	r24, 0x20	; 32
    3f3a:	09 f4       	brne	.+2      	; 0x3f3e <main+0x139c>
main():
    3f3c:	81 e4       	ldi	r24, 0x41	; 65
read_dummy():
    3f3e:	80 93 d6 60 	sts	0x60D6, r24	; 0x8060d6 <packet+0x8>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/updi.cpp:324
      packet.in.data[2] = _sib[10];
    3f42:	80 91 f8 62 	lds	r24, 0x62F8	; 0x8062f8 <_sib+0xa>
    3f46:	80 93 d7 60 	sts	0x60D7, r24	; 0x8060d7 <packet+0x9>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/updi.cpp:327
    }
    else memset(&packet.in.data[0], 0xFF, _wLength);
    return _wLength + 1;
    3f4a:	2f ef       	ldi	r18, 0xFF	; 255
    3f4c:	e2 1a       	sub	r14, r18
    3f4e:	f2 0a       	sbc	r15, r18
    3f50:	d5 cf       	rjmp	.-86     	; 0x3efc <main+0x135a>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/updi.cpp:326
      /* But, the SIB can be read, so a Dummy SIGNATURE is returned. */
      packet.in.data[0] = 0x1E;
      packet.in.data[1] = _sib[0] == ' ' ? 'A' : _sib[0];
      packet.in.data[2] = _sib[10];
    }
    else memset(&packet.in.data[0], 0xFF, _wLength);
    3f52:	a7 01       	movw	r20, r14
    3f54:	6f ef       	ldi	r22, 0xFF	; 255
    3f56:	70 e0       	ldi	r23, 0x00	; 0
    3f58:	85 ed       	ldi	r24, 0xD5	; 213
    3f5a:	90 e6       	ldi	r25, 0x60	; 96
    3f5c:	fa d4       	rcall	.+2548   	; 0x4952 <memset>
    3f5e:	f5 cf       	rjmp	.-22     	; 0x3f4a <main+0x13a8>
jtag_scope_updi():
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/updi.cpp:476
      /* This will prevent AVRDUDE from displaying annoying errors. */
      else _rspsize = read_dummy();
      packet.in.res = _rspsize ? 0x184 : 0xA0;
      return _rspsize;
    }
    else if (_cmd == 0x23) {        /* CMD3_WRITE_MEMORY */
    3f60:	33 e2       	ldi	r19, 0x23	; 35
    3f62:	f3 12       	cpse	r15, r19
    3f64:	21 c0       	rjmp	.+66     	; 0x3fa8 <main+0x1406>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/updi.cpp:477
      D1PRINTF(" UPDI_WRITE=%02X:%06lX:%04X\r\n", packet.out.bMType,
    3f66:	80 91 db 60 	lds	r24, 0x60DB	; 0x8060db <packet+0xd>
    3f6a:	8f 93       	push	r24
    3f6c:	80 91 da 60 	lds	r24, 0x60DA	; 0x8060da <packet+0xc>
    3f70:	8f 93       	push	r24
    3f72:	80 91 d9 60 	lds	r24, 0x60D9	; 0x8060d9 <packet+0xb>
    3f76:	8f 93       	push	r24
    3f78:	80 91 d8 60 	lds	r24, 0x60D8	; 0x8060d8 <packet+0xa>
    3f7c:	8f 93       	push	r24
    3f7e:	80 91 d7 60 	lds	r24, 0x60D7	; 0x8060d7 <packet+0x9>
    3f82:	8f 93       	push	r24
    3f84:	80 91 d6 60 	lds	r24, 0x60D6	; 0x8060d6 <packet+0x8>
    3f88:	8f 93       	push	r24
    3f8a:	1f 92       	push	r1
    3f8c:	df 92       	push	r13
    3f8e:	8a e8       	ldi	r24, 0x8A	; 138
    3f90:	93 e0       	ldi	r25, 0x03	; 3
    3f92:	9f 93       	push	r25
    3f94:	8f 93       	push	r24
    3f96:	1f 93       	push	r17
    3f98:	0f 93       	push	r16
    3f9a:	0e 94 19 0a 	call	0x1432	; 0x1432 <Print::printf(PGM_t const*, ...) [clone .constprop.22]>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/updi.cpp:479
        packet.out.dwAddr, (size_t)packet.out.dwLength);
      _rspsize = Timeout::command(Command_Table.write_memory);
    3f9e:	80 91 14 63 	lds	r24, 0x6314	; 0x806314 <Command_Table+0x6>
    3fa2:	90 91 15 63 	lds	r25, 0x6315	; 0x806315 <Command_Table+0x7>
    3fa6:	66 cf       	rjmp	.-308    	; 0x3e74 <main+0x12d2>
main():
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/updi.cpp:420
    return (*Command_Table.prog_init)();
  }

  /* ARCH=UPDI scope Provides functionality. */
  size_t jtag_scope_updi (void) {
    size_t _rspsize = 0;
    3fa8:	f1 2c       	mov	r15, r1
    3faa:	e1 2c       	mov	r14, r1
    3fac:	f1 ce       	rjmp	.-542    	; 0x3d90 <main+0x11ee>
jtag_scope_avr_core():
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/jtag.cpp:376
    else packet.in.res = 0xA0;      /* RSP3_FAILED */
    3fae:	80 ea       	ldi	r24, 0xA0	; 160
    3fb0:	90 e0       	ldi	r25, 0x00	; 0
    3fb2:	95 cd       	rjmp	.-1238   	; 0x3ade <main+0xf3c>
jtag_scope_branch():
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/jtag.cpp:399
    else if (_scope == 0x13) _rspsize = AVR32::jtag_scope_avr32();  /* SCOPE_AVR32 */
  #endif
    else if (_scope == 0x12) _rspsize = jtag_scope_avr_core();      /* SCOPE_AVR */
  #ifdef CONFIG_PGM_TPI_ENABLE
    /* The 14P models have limited TPI support due to insufficient pin count. */
    else if (_scope == 0x14) _rspsize = TPI::jtag_scope_tpi();      /* SCOPE_AVR_TPI */
    3fb4:	94 e1       	ldi	r25, 0x14	; 20
    3fb6:	f9 12       	cpse	r15, r25
    3fb8:	f1 c0       	rjmp	.+482    	; 0x419c <main+0x15fa>
jtag_scope_tpi():
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/tpi.cpp:308
   * It doesn't seem to be implemented in the "mEDBG".
   * which means it will start immediately with XPRG_CMD_ENTER_PROGMODE.
   */
  size_t jtag_scope_tpi (void) {
    size_t _rspsize = 0;  /* Make final adjustments. */
    uint8_t _cmd    = packet.out.cmd;
    3fba:	80 91 d3 60 	lds	r24, 0x60D3	; 0x8060d3 <packet+0x5>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/tpi.cpp:309
    if (_cmd == 0x01) {             /* XPRG_CMD_ENTER_PROGMODE */
    3fbe:	81 30       	cpi	r24, 0x01	; 1
    3fc0:	71 f5       	brne	.+92     	; 0x401e <main+0x147c>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/tpi.cpp:310
      D1PRINTF(" TPI_ENTER_PROGMODE\r\n");
    3fc2:	8e eb       	ldi	r24, 0xBE	; 190
    3fc4:	95 e0       	ldi	r25, 0x05	; 5
    3fc6:	9f 93       	push	r25
    3fc8:	8f 93       	push	r24
    3fca:	1f 93       	push	r17
    3fcc:	0f 93       	push	r16
    3fce:	0e 94 19 0a 	call	0x1432	; 0x1432 <Print::printf(PGM_t const*, ...) [clone .constprop.22]>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/tpi.cpp:311
      USART::setup();
    3fd2:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <USART::setup()>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/tpi.cpp:312
      _rspsize = Timeout::command(&connect);
    3fd6:	84 ea       	ldi	r24, 0xA4	; 164
    3fd8:	90 e1       	ldi	r25, 0x10	; 16
    3fda:	0e 94 49 15 	call	0x2a92	; 0x2a92 <Timeout::command(unsigned int (*)(), unsigned int) [clone .constprop.17]>
    3fde:	7c 01       	movw	r14, r24
    3fe0:	0f 90       	pop	r0
    3fe2:	0f 90       	pop	r0
    3fe4:	0f 90       	pop	r0
    3fe6:	0f 90       	pop	r0
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/tpi.cpp:366
        _tpi_csr_addr = _bValue;    /* XPRG_TPI_NVMCSR_ADDRESS */
      }
  #endif
      _rspsize = 1;
    }
    packet.in.tpi_res = _rspsize ? 0x00 : 0x01; /* XPRG_ERR_OK : XPRG_ERR_FAILED */
    3fe8:	81 e0       	ldi	r24, 0x01	; 1
    3fea:	e1 14       	cp	r14, r1
    3fec:	f1 04       	cpc	r15, r1
    3fee:	09 f0       	breq	.+2      	; 0x3ff2 <main+0x1450>
    3ff0:	80 e0       	ldi	r24, 0x00	; 0
    3ff2:	80 93 d4 60 	sts	0x60D4, r24	; 0x8060d4 <packet+0x6>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/tpi.cpp:367
    D1PRINTF(" <RES:%02X>\r\n", _rspsize);
    3ff6:	ff 92       	push	r15
    3ff8:	ef 92       	push	r14
    3ffa:	8e e3       	ldi	r24, 0x3E	; 62
    3ffc:	95 e0       	ldi	r25, 0x05	; 5
    3ffe:	9f 93       	push	r25
    4000:	8f 93       	push	r24
    4002:	1f 93       	push	r17
    4004:	0f 93       	push	r16
    4006:	0e 94 19 0a 	call	0x1432	; 0x1432 <Print::printf(PGM_t const*, ...) [clone .constprop.22]>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/tpi.cpp:370

    /* Adds padding to XPRG responses to adjust the length of the payload. */
    return ++_rspsize;
    400a:	ff ef       	ldi	r31, 0xFF	; 255
    400c:	ef 1a       	sub	r14, r31
    400e:	ff 0a       	sbc	r15, r31
    4010:	0f 90       	pop	r0
    4012:	0f 90       	pop	r0
    4014:	0f 90       	pop	r0
    4016:	0f 90       	pop	r0
    4018:	0f 90       	pop	r0
    401a:	0f 90       	pop	r0
    401c:	00 cc       	rjmp	.-2048   	; 0x381e <main+0xc7c>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/tpi.cpp:314
    if (_cmd == 0x01) {             /* XPRG_CMD_ENTER_PROGMODE */
      D1PRINTF(" TPI_ENTER_PROGMODE\r\n");
      USART::setup();
      _rspsize = Timeout::command(&connect);
    }
    else if (_cmd == 0x02) {        /* XPRG_CMD_LEAVE_PROGMODE */
    401e:	82 30       	cpi	r24, 0x02	; 2
    4020:	89 f5       	brne	.+98     	; 0x4084 <main+0x14e2>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/tpi.cpp:315
      D1PRINTF(" TPI_LEAVE_PROGMODE\r\n");
    4022:	88 ea       	ldi	r24, 0xA8	; 168
    4024:	95 e0       	ldi	r25, 0x05	; 5
    4026:	9f 93       	push	r25
    4028:	8f 93       	push	r24
    402a:	1f 93       	push	r17
    402c:	0f 93       	push	r16
    402e:	0e 94 19 0a 	call	0x1432	; 0x1432 <Print::printf(PGM_t const*, ...) [clone .constprop.22]>
set_sstcs():
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/tpi.cpp:69
  bool get_sldcs (const uint8_t _addr) {
    return (send(0x80 | _addr) && recv());
  }

  bool set_sstcs (const uint8_t _addr, const uint8_t _data) {
    return (send(0xC0 | _addr) && send(_data));
    4032:	80 ec       	ldi	r24, 0xC0	; 192
    4034:	0e 94 e0 07 	call	0xfc0	; 0xfc0 <TPI::send(unsigned char)>
    4038:	0f 90       	pop	r0
    403a:	0f 90       	pop	r0
    403c:	0f 90       	pop	r0
    403e:	0f 90       	pop	r0
    4040:	88 23       	and	r24, r24
    4042:	19 f0       	breq	.+6      	; 0x404a <main+0x14a8>
    4044:	80 e0       	ldi	r24, 0x00	; 0
    4046:	0e 94 e0 07 	call	0xfc0	; 0xfc0 <TPI::send(unsigned char)>
disconnect():
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/tpi.cpp:288
  }

  size_t disconnect (void) {
    /*** leave RESET (normal programing) ***/
    set_sstcs(0x00, 0x00);
    D1PRINTF(" TPISR<00\r\n");
    404a:	82 e3       	ldi	r24, 0x32	; 50
    404c:	95 e0       	ldi	r25, 0x05	; 5
    404e:	9f 93       	push	r25
    4050:	8f 93       	push	r24
    4052:	1f 93       	push	r17
    4054:	0f 93       	push	r16
    4056:	0e 94 19 0a 	call	0x1432	; 0x1432 <Print::printf(PGM_t const*, ...) [clone .constprop.22]>
delay_micros():
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/modernAVR/0.2.14/cores/modernAVR/api/delay_busywait.h:33
static __inline__ __attribute__((__always_inline__)) void delay_micros (uint32_t _us);
static __inline__ __attribute__((__always_inline__)) void delay_millis (uint32_t _ms);

void delay_micros (uint32_t _us) {
  if (F_CPU >= 1000000L) {
    __builtin_avr_delay_cycles((F_CPU / 1000000L) * _us);
    405a:	e3 ef       	ldi	r30, 0xF3	; 243
    405c:	f1 e0       	ldi	r31, 0x01	; 1
    405e:	31 97       	sbiw	r30, 0x01	; 1
    4060:	f1 f7       	brne	.-4      	; 0x405e <main+0x14bc>
    4062:	00 c0       	rjmp	.+0      	; 0x4064 <main+0x14c2>
    4064:	00 00       	nop
disconnect():
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/tpi.cpp:291
    /* Send the NVM exit command, wait a short while and release RESET. */
    delay_micros(100);
    openDrainWriteMacro(PIN_VCP_TXD, HIGH);
    4066:	02 98       	cbi	0x00, 2	; 0
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/tpi.cpp:292
    openDrainWriteMacro(PIN_PGM_TRST, HIGH);
    4068:	01 98       	cbi	0x00, 1	; 0
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/tpi.cpp:293
    PGCONF = 0;
    406a:	1d ba       	out	0x1d, r1	; 29
jtag_scope_tpi():
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/tpi.cpp:318
    }
    else if (_cmd == 0x02) {        /* XPRG_CMD_LEAVE_PROGMODE */
      D1PRINTF(" TPI_LEAVE_PROGMODE\r\n");
      _rspsize = disconnect();
      _tpi_setmode = 0;
      USART::setup();
    406c:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <USART::setup()>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/tpi.cpp:319
      USART::change_vcp();
    4070:	0e 94 3d 0a 	call	0x147a	; 0x147a <USART::change_vcp()>
    4074:	0f 90       	pop	r0
    4076:	0f 90       	pop	r0
    4078:	0f 90       	pop	r0
    407a:	0f 90       	pop	r0
main():
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/tpi.cpp:316
      USART::setup();
      _rspsize = Timeout::command(&connect);
    }
    else if (_cmd == 0x02) {        /* XPRG_CMD_LEAVE_PROGMODE */
      D1PRINTF(" TPI_LEAVE_PROGMODE\r\n");
      _rspsize = disconnect();
    407c:	ee 24       	eor	r14, r14
    407e:	e3 94       	inc	r14
    4080:	f1 2c       	mov	r15, r1
    4082:	b2 cf       	rjmp	.-156    	; 0x3fe8 <main+0x1446>
jtag_scope_tpi():
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/tpi.cpp:321
      _tpi_setmode = 0;
      USART::setup();
      USART::change_vcp();
    }
    else if (bit_is_clear(PGCONF, PGCONF_UPDI_bp)) { /* empty */ }
    4084:	e8 9b       	sbis	0x1d, 0	; 29
    4086:	7f c0       	rjmp	.+254    	; 0x4186 <main+0x15e4>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/tpi.cpp:322
    else if (_cmd == 0x03) {        /* XPRG_CMD_ERASE */
    4088:	83 30       	cpi	r24, 0x03	; 3
    408a:	09 f5       	brne	.+66     	; 0x40ce <main+0x152c>
bswap32():
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/modernAVR/0.2.14/cores/modernAVR/api/cpp/btools.cpp:49
uint16_t bswap16 (uint16_t _word) {
  return __builtin_bswap16(_word);
}

uint32_t bswap32 (uint32_t _dword) {
  return __builtin_bswap32(_dword);
    408c:	60 91 d5 60 	lds	r22, 0x60D5	; 0x8060d5 <packet+0x7>
    4090:	70 91 d6 60 	lds	r23, 0x60D6	; 0x8060d6 <packet+0x8>
    4094:	80 91 d7 60 	lds	r24, 0x60D7	; 0x8060d7 <packet+0x9>
    4098:	90 91 d8 60 	lds	r25, 0x60D8	; 0x8060d8 <packet+0xa>
    409c:	37 d4       	rcall	.+2158   	; 0x490c <__bswapsi2>
jtag_scope_tpi():
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/tpi.cpp:323
      D1PRINTF(" TPI_ERASE=%02X:%08lX\r\n",
    409e:	9f 93       	push	r25
    40a0:	8f 93       	push	r24
    40a2:	7f 93       	push	r23
    40a4:	6f 93       	push	r22
    40a6:	80 91 d4 60 	lds	r24, 0x60D4	; 0x8060d4 <packet+0x6>
    40aa:	1f 92       	push	r1
    40ac:	8f 93       	push	r24
    40ae:	80 e9       	ldi	r24, 0x90	; 144
    40b0:	95 e0       	ldi	r25, 0x05	; 5
    40b2:	9f 93       	push	r25
    40b4:	8f 93       	push	r24
    40b6:	1f 93       	push	r17
    40b8:	0f 93       	push	r16
    40ba:	0e 94 19 0a 	call	0x1432	; 0x1432 <Print::printf(PGM_t const*, ...) [clone .constprop.22]>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/tpi.cpp:327
        packet.out.tpi.read.bMType,
        bswap32(packet.out.tpi.read.dwAddr)
      );
      _rspsize = Timeout::command(&erase_memory);
    40be:	88 e8       	ldi	r24, 0x88	; 136
    40c0:	94 e1       	ldi	r25, 0x14	; 20
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/tpi.cpp:335
      D1PRINTF(" TPI_WRITE=%02X:%08lX:%04X\r\n",
        packet.out.tpi.write.bMType,
        bswap32(packet.out.tpi.write.dwAddr),
        bswap16(packet.out.tpi.write.wLength)
      );
      _rspsize = Timeout::command(&write_memory);
    40c2:	0e 94 49 15 	call	0x2a92	; 0x2a92 <Timeout::command(unsigned int (*)(), unsigned int) [clone .constprop.17]>
    40c6:	7c 01       	movw	r14, r24
    40c8:	cd bf       	out	0x3d, r28	; 61
    40ca:	de bf       	out	0x3e, r29	; 62
    40cc:	8d cf       	rjmp	.-230    	; 0x3fe8 <main+0x1446>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/tpi.cpp:329
        packet.out.tpi.read.bMType,
        bswap32(packet.out.tpi.read.dwAddr)
      );
      _rspsize = Timeout::command(&erase_memory);
    }
    else if (_cmd == 0x04) {        /* XPRG_CMD_WRITE_MEM */
    40ce:	84 30       	cpi	r24, 0x04	; 4
    40d0:	29 f5       	brne	.+74     	; 0x411c <main+0x157a>
bswap16():
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/modernAVR/0.2.14/cores/modernAVR/api/cpp/btools.cpp:45
//
// Byte convert
//

uint16_t bswap16 (uint16_t _word) {
  return __builtin_bswap16(_word);
    40d2:	20 91 da 60 	lds	r18, 0x60DA	; 0x8060da <packet+0xc>
    40d6:	30 91 db 60 	lds	r19, 0x60DB	; 0x8060db <packet+0xd>
    40da:	32 27       	eor	r19, r18
    40dc:	23 27       	eor	r18, r19
    40de:	32 27       	eor	r19, r18
bswap32():
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/modernAVR/0.2.14/cores/modernAVR/api/cpp/btools.cpp:49
}

uint32_t bswap32 (uint32_t _dword) {
  return __builtin_bswap32(_dword);
    40e0:	60 91 d6 60 	lds	r22, 0x60D6	; 0x8060d6 <packet+0x8>
    40e4:	70 91 d7 60 	lds	r23, 0x60D7	; 0x8060d7 <packet+0x9>
    40e8:	80 91 d8 60 	lds	r24, 0x60D8	; 0x8060d8 <packet+0xa>
    40ec:	90 91 d9 60 	lds	r25, 0x60D9	; 0x8060d9 <packet+0xb>
    40f0:	0d d4       	rcall	.+2074   	; 0x490c <__bswapsi2>
jtag_scope_tpi():
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/tpi.cpp:330
      D1PRINTF(" TPI_WRITE=%02X:%08lX:%04X\r\n",
    40f2:	3f 93       	push	r19
    40f4:	2f 93       	push	r18
    40f6:	9f 93       	push	r25
    40f8:	8f 93       	push	r24
    40fa:	7f 93       	push	r23
    40fc:	6f 93       	push	r22
    40fe:	80 91 d4 60 	lds	r24, 0x60D4	; 0x8060d4 <packet+0x6>
    4102:	1f 92       	push	r1
    4104:	8f 93       	push	r24
    4106:	83 e7       	ldi	r24, 0x73	; 115
    4108:	95 e0       	ldi	r25, 0x05	; 5
    410a:	9f 93       	push	r25
    410c:	8f 93       	push	r24
    410e:	1f 93       	push	r17
    4110:	0f 93       	push	r16
    4112:	0e 94 19 0a 	call	0x1432	; 0x1432 <Print::printf(PGM_t const*, ...) [clone .constprop.22]>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/tpi.cpp:335
        packet.out.tpi.write.bMType,
        bswap32(packet.out.tpi.write.dwAddr),
        bswap16(packet.out.tpi.write.wLength)
      );
      _rspsize = Timeout::command(&write_memory);
    4116:	86 e7       	ldi	r24, 0x76	; 118
    4118:	93 e1       	ldi	r25, 0x13	; 19
    411a:	d3 cf       	rjmp	.-90     	; 0x40c2 <main+0x1520>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/tpi.cpp:337
    }
    else if (_cmd == 0x05) {        /* XPRG_CMD_READ_MEM */
    411c:	85 30       	cpi	r24, 0x05	; 5
    411e:	29 f5       	brne	.+74     	; 0x416a <main+0x15c8>
bswap16():
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/modernAVR/0.2.14/cores/modernAVR/api/cpp/btools.cpp:45
//
// Byte convert
//

uint16_t bswap16 (uint16_t _word) {
  return __builtin_bswap16(_word);
    4120:	20 91 d9 60 	lds	r18, 0x60D9	; 0x8060d9 <packet+0xb>
    4124:	30 91 da 60 	lds	r19, 0x60DA	; 0x8060da <packet+0xc>
    4128:	32 27       	eor	r19, r18
    412a:	23 27       	eor	r18, r19
    412c:	32 27       	eor	r19, r18
bswap32():
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/modernAVR/0.2.14/cores/modernAVR/api/cpp/btools.cpp:49
}

uint32_t bswap32 (uint32_t _dword) {
  return __builtin_bswap32(_dword);
    412e:	60 91 d5 60 	lds	r22, 0x60D5	; 0x8060d5 <packet+0x7>
    4132:	70 91 d6 60 	lds	r23, 0x60D6	; 0x8060d6 <packet+0x8>
    4136:	80 91 d7 60 	lds	r24, 0x60D7	; 0x8060d7 <packet+0x9>
    413a:	90 91 d8 60 	lds	r25, 0x60D8	; 0x8060d8 <packet+0xa>
    413e:	e6 d3       	rcall	.+1996   	; 0x490c <__bswapsi2>
jtag_scope_tpi():
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/tpi.cpp:338
      D1PRINTF(" TPI_READ=%02X:%08lX:%04X\r\n",
    4140:	3f 93       	push	r19
    4142:	2f 93       	push	r18
    4144:	9f 93       	push	r25
    4146:	8f 93       	push	r24
    4148:	7f 93       	push	r23
    414a:	6f 93       	push	r22
    414c:	80 91 d4 60 	lds	r24, 0x60D4	; 0x8060d4 <packet+0x6>
    4150:	1f 92       	push	r1
    4152:	8f 93       	push	r24
    4154:	87 e5       	ldi	r24, 0x57	; 87
    4156:	95 e0       	ldi	r25, 0x05	; 5
    4158:	9f 93       	push	r25
    415a:	8f 93       	push	r24
    415c:	1f 93       	push	r17
    415e:	0f 93       	push	r16
    4160:	0e 94 19 0a 	call	0x1432	; 0x1432 <Print::printf(PGM_t const*, ...) [clone .constprop.22]>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/tpi.cpp:343
        packet.out.tpi.read.bMType,
        bswap32(packet.out.tpi.read.dwAddr),
        bswap16(packet.out.tpi.read.wLength)
      );
      _rspsize = Timeout::command(&read_memory);
    4164:	88 e5       	ldi	r24, 0x58	; 88
    4166:	94 e1       	ldi	r25, 0x14	; 20
    4168:	ac cf       	rjmp	.-168    	; 0x40c2 <main+0x1520>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/tpi.cpp:345
    }
    else if (_cmd == 0x06) {        /* XPRG_CMD_CRC */
    416a:	86 30       	cpi	r24, 0x06	; 6
    416c:	79 f4       	brne	.+30     	; 0x418c <main+0x15ea>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/tpi.cpp:346
      D1PRINTF(" TPI_CRC\r\n");     /* not used (Fail) */
    416e:	8c e4       	ldi	r24, 0x4C	; 76
    4170:	95 e0       	ldi	r25, 0x05	; 5
    4172:	9f 93       	push	r25
    4174:	8f 93       	push	r24
    4176:	1f 93       	push	r17
    4178:	0f 93       	push	r16
    417a:	0e 94 19 0a 	call	0x1432	; 0x1432 <Print::printf(PGM_t const*, ...) [clone .constprop.22]>
    417e:	0f 90       	pop	r0
    4180:	0f 90       	pop	r0
    4182:	0f 90       	pop	r0
    4184:	0f 90       	pop	r0
main():
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/tpi.cpp:307
   * When this scope is used, CMD3_SIGN_ON will not be called,
   * It doesn't seem to be implemented in the "mEDBG".
   * which means it will start immediately with XPRG_CMD_ENTER_PROGMODE.
   */
  size_t jtag_scope_tpi (void) {
    size_t _rspsize = 0;  /* Make final adjustments. */
    4186:	f1 2c       	mov	r15, r1
    4188:	e1 2c       	mov	r14, r1
    418a:	2e cf       	rjmp	.-420    	; 0x3fe8 <main+0x1446>
jtag_scope_tpi():
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/tpi.cpp:348
      _rspsize = Timeout::command(&read_memory);
    }
    else if (_cmd == 0x06) {        /* XPRG_CMD_CRC */
      D1PRINTF(" TPI_CRC\r\n");     /* not used (Fail) */
    }
    else if (_cmd == 0x07) {        /* XPRG_CMD_SET_PARAM */
    418c:	21 e0       	ldi	r18, 0x01	; 1
    418e:	90 e0       	ldi	r25, 0x00	; 0
    4190:	87 30       	cpi	r24, 0x07	; 7
    4192:	09 f0       	breq	.+2      	; 0x4196 <main+0x15f4>
    4194:	20 e0       	ldi	r18, 0x00	; 0
main():
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/tpi.cpp:312
    size_t _rspsize = 0;  /* Make final adjustments. */
    uint8_t _cmd    = packet.out.cmd;
    if (_cmd == 0x01) {             /* XPRG_CMD_ENTER_PROGMODE */
      D1PRINTF(" TPI_ENTER_PROGMODE\r\n");
      USART::setup();
      _rspsize = Timeout::command(&connect);
    4196:	e2 2e       	mov	r14, r18
    4198:	f9 2e       	mov	r15, r25
    419a:	26 cf       	rjmp	.-436    	; 0x3fe8 <main+0x1446>
jtag_scope_branch():
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/jtag.cpp:401
  #endif
    else if (_scope == 0x20) _rspsize = jtag_scope_edbg();          /* SCOPE_EDBG */
    419c:	20 e2       	ldi	r18, 0x20	; 32
    419e:	f2 12       	cpse	r15, r18
    41a0:	43 cc       	rjmp	.-1914   	; 0x3a28 <main+0xe86>
jtag_scope_edbg():
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/jtag.cpp:225

  /*** The EDBG scope provides access to the writer's hardware specifications. ***/
  /* There is no impact on operation if it is not called at all. */
  size_t jtag_scope_edbg (void) {
    size_t  _rspsize = 0;
    uint8_t _cmd     = packet.out.cmd;
    41a2:	90 91 d3 60 	lds	r25, 0x60D3	; 0x8060d3 <packet+0x5>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/jtag.cpp:226
    uint8_t _section = packet.out.section;
    41a6:	c0 90 d5 60 	lds	r12, 0x60D5	; 0x8060d5 <packet+0x7>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/jtag.cpp:227
    uint8_t _index   = packet.out.index;
    41aa:	d0 90 d6 60 	lds	r13, 0x60D6	; 0x8060d6 <packet+0x8>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/jtag.cpp:228
    uint8_t _length  = packet.out.length;
    41ae:	80 91 d7 60 	lds	r24, 0x60D7	; 0x8060d7 <packet+0x9>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/jtag.cpp:229
    if (_cmd == 0x01) {             /* CMD3_SET_PARAMETER */
    41b2:	91 30       	cpi	r25, 0x01	; 1
    41b4:	41 f5       	brne	.+80     	; 0x4206 <main+0x1664>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/jtag.cpp:230
      uint16_t _data = packet.out.wValue;
    41b6:	f0 90 d8 60 	lds	r15, 0x60D8	; 0x8060d8 <packet+0xa>
    41ba:	e0 90 d9 60 	lds	r14, 0x60D9	; 0x8060d9 <packet+0xb>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/jtag.cpp:231
      D1PRINTF(" AVR_SET_PARAM=%02X:%02X:%02X:%02X\r\n", _section, _index, _length, _data);
    41be:	ef 92       	push	r14
    41c0:	ff 92       	push	r15
    41c2:	1f 92       	push	r1
    41c4:	8f 93       	push	r24
    41c6:	1f 92       	push	r1
    41c8:	df 92       	push	r13
    41ca:	1f 92       	push	r1
    41cc:	cf 92       	push	r12
    41ce:	8e e1       	ldi	r24, 0x1E	; 30
    41d0:	96 e0       	ldi	r25, 0x06	; 6
    41d2:	9f 93       	push	r25
    41d4:	8f 93       	push	r24
    41d6:	1f 93       	push	r17
    41d8:	0f 93       	push	r16
    41da:	0e 94 19 0a 	call	0x1432	; 0x1432 <Print::printf(PGM_t const*, ...) [clone .constprop.22]>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/jtag.cpp:232
      if (_section == 0) {          /* SET_GET_CTXT_CONFIG */
    41de:	cd bf       	out	0x3d, r28	; 61
    41e0:	de bf       	out	0x3e, r29	; 62
    41e2:	c1 10       	cpse	r12, r1
    41e4:	7a cc       	rjmp	.-1804   	; 0x3ada <main+0xf38>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/jtag.cpp:233
        if (_index == 0x10) {       /* EDBG_CONTROL_TARGET_POWER */
    41e6:	90 e1       	ldi	r25, 0x10	; 16
    41e8:	d9 12       	cpse	r13, r25
    41ea:	77 cc       	rjmp	.-1810   	; 0x3ada <main+0xf38>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/jtag.cpp:235
          /* Called with `-xvtarget_switch=0,1` HAS_VTARG_SWITCH */
          D1PRINTF(" TARGET_POWER=%02X\r\n", _data);
    41ec:	ef 92       	push	r14
    41ee:	ff 92       	push	r15
    41f0:	89 e0       	ldi	r24, 0x09	; 9
    41f2:	96 e0       	ldi	r25, 0x06	; 6
    41f4:	9f 93       	push	r25
    41f6:	8f 93       	push	r24
    41f8:	1f 93       	push	r17
    41fa:	0f 93       	push	r16
    41fc:	0e 94 19 0a 	call	0x1432	; 0x1432 <Print::printf(PGM_t const*, ...) [clone .constprop.22]>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/jtag.cpp:236
          _jtag_vpow = _data;       /* 0,1 */
    4200:	f0 92 00 60 	sts	0x6000, r15	; 0x806000 <__DATA_REGION_ORIGIN__>
    4204:	64 cc       	rjmp	.-1848   	; 0x3ace <main+0xf2c>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/jtag.cpp:247
  #endif
        }
      }
      packet.in.res = 0x80;         /* RSP3_OK */
    }
    else if (_cmd == 0x02) {        /* CMD3_GET_PARAMETER */
    4206:	92 30       	cpi	r25, 0x02	; 2
    4208:	09 f0       	breq	.+2      	; 0x420c <main+0x166a>
    420a:	0e cc       	rjmp	.-2020   	; 0x3a28 <main+0xe86>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/jtag.cpp:248
      D1PRINTF(" AVR_GET_PARAM=%02X:%02X:%02X\r\n", _section, _index, _length);
    420c:	e8 2e       	mov	r14, r24
    420e:	f1 2c       	mov	r15, r1
    4210:	1f 92       	push	r1
    4212:	8f 93       	push	r24
    4214:	1f 92       	push	r1
    4216:	df 92       	push	r13
    4218:	1f 92       	push	r1
    421a:	cf 92       	push	r12
    421c:	89 ee       	ldi	r24, 0xE9	; 233
    421e:	95 e0       	ldi	r25, 0x05	; 5
    4220:	9f 93       	push	r25
    4222:	8f 93       	push	r24
    4224:	1f 93       	push	r17
    4226:	0f 93       	push	r16
    4228:	0e 94 19 0a 	call	0x1432	; 0x1432 <Print::printf(PGM_t const*, ...) [clone .constprop.22]>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/jtag.cpp:249
      if (_section == 0) {          /* SET_GET_CTXT_CONFIG */
    422c:	cd bf       	out	0x3d, r28	; 61
    422e:	de bf       	out	0x3e, r29	; 62
    4230:	c1 10       	cpse	r12, r1
    4232:	19 c0       	rjmp	.+50     	; 0x4266 <main+0x16c4>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/jtag.cpp:250
        if (_index == 0x10) {       /* EDBG_CONTROL_TARGET_POWER */
    4234:	f0 e1       	ldi	r31, 0x10	; 16
    4236:	df 12       	cpse	r13, r31
    4238:	16 c0       	rjmp	.+44     	; 0x4266 <main+0x16c4>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/jtag.cpp:252
          /* Called with `-xvtarget_switch` HAS_VTARG_SWITCH */
          D1PRINTF(" TARGET_POWER=%02X\r\n", _jtag_vpow);
    423a:	80 91 00 60 	lds	r24, 0x6000	; 0x806000 <__DATA_REGION_ORIGIN__>
    423e:	1f 92       	push	r1
    4240:	8f 93       	push	r24
    4242:	84 ed       	ldi	r24, 0xD4	; 212
    4244:	95 e0       	ldi	r25, 0x05	; 5
    4246:	9f 93       	push	r25
    4248:	8f 93       	push	r24
    424a:	1f 93       	push	r17
    424c:	0f 93       	push	r16
    424e:	0e 94 19 0a 	call	0x1432	; 0x1432 <Print::printf(PGM_t const*, ...) [clone .constprop.22]>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/jtag.cpp:253
          packet.in.data[0] = _jtag_vpow;
    4252:	80 91 00 60 	lds	r24, 0x6000	; 0x806000 <__DATA_REGION_ORIGIN__>
    4256:	80 93 d5 60 	sts	0x60D5, r24	; 0x8060d5 <packet+0x7>
    425a:	0f 90       	pop	r0
    425c:	0f 90       	pop	r0
    425e:	0f 90       	pop	r0
    4260:	0f 90       	pop	r0
    4262:	0f 90       	pop	r0
    4264:	0f 90       	pop	r0
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/jtag.cpp:256
        }
      }
      packet.in.res = 0x184;        /* RSP3_DATA */
    4266:	84 e8       	ldi	r24, 0x84	; 132
    4268:	91 e0       	ldi	r25, 0x01	; 1
    426a:	80 93 d3 60 	sts	0x60D3, r24	; 0x8060d3 <packet+0x5>
    426e:	90 93 d4 60 	sts	0x60D4, r25	; 0x8060d4 <packet+0x6>
/Users/askn/Documents/Zinnia-tools/Products/software/UPDI4AVR-USB/src/jtag.cpp:257
      _rspsize = _length + 1;
    4272:	2f ef       	ldi	r18, 0xFF	; 255
    4274:	e2 1a       	sub	r14, r18
    4276:	f2 0a       	sbc	r15, r18
    4278:	d2 ca       	rjmp	.-2652   	; 0x381e <main+0xc7c>

0000427a <setjmp>:
setjmp():
    427a:	dc 01       	movw	r26, r24
    427c:	2d 92       	st	X+, r2
    427e:	3d 92       	st	X+, r3
    4280:	4d 92       	st	X+, r4
    4282:	5d 92       	st	X+, r5
    4284:	6d 92       	st	X+, r6
    4286:	7d 92       	st	X+, r7
    4288:	8d 92       	st	X+, r8
    428a:	9d 92       	st	X+, r9
    428c:	ad 92       	st	X+, r10
    428e:	bd 92       	st	X+, r11
    4290:	cd 92       	st	X+, r12
    4292:	dd 92       	st	X+, r13
    4294:	ed 92       	st	X+, r14
    4296:	fd 92       	st	X+, r15
    4298:	0d 93       	st	X+, r16
    429a:	1d 93       	st	X+, r17
    429c:	cd 93       	st	X+, r28
    429e:	dd 93       	st	X+, r29
    42a0:	ff 91       	pop	r31
    42a2:	ef 91       	pop	r30
    42a4:	8d b7       	in	r24, 0x3d	; 61
    42a6:	8d 93       	st	X+, r24
    42a8:	8e b7       	in	r24, 0x3e	; 62
    42aa:	8d 93       	st	X+, r24
    42ac:	8f b7       	in	r24, 0x3f	; 63
    42ae:	8d 93       	st	X+, r24
    42b0:	ed 93       	st	X+, r30
    42b2:	fd 93       	st	X+, r31
    42b4:	88 27       	eor	r24, r24
    42b6:	99 27       	eor	r25, r25
    42b8:	09 94       	ijmp

000042ba <longjmp>:
longjmp():
    42ba:	dc 01       	movw	r26, r24
    42bc:	cb 01       	movw	r24, r22
    42be:	81 30       	cpi	r24, 0x01	; 1
    42c0:	91 05       	cpc	r25, r1
    42c2:	81 1d       	adc	r24, r1
    42c4:	2d 90       	ld	r2, X+
    42c6:	3d 90       	ld	r3, X+
    42c8:	4d 90       	ld	r4, X+
    42ca:	5d 90       	ld	r5, X+
    42cc:	6d 90       	ld	r6, X+
    42ce:	7d 90       	ld	r7, X+
    42d0:	8d 90       	ld	r8, X+
    42d2:	9d 90       	ld	r9, X+
    42d4:	ad 90       	ld	r10, X+
    42d6:	bd 90       	ld	r11, X+
    42d8:	cd 90       	ld	r12, X+
    42da:	dd 90       	ld	r13, X+
    42dc:	ed 90       	ld	r14, X+
    42de:	fd 90       	ld	r15, X+
    42e0:	0d 91       	ld	r16, X+
    42e2:	1d 91       	ld	r17, X+
    42e4:	cd 91       	ld	r28, X+
    42e6:	dd 91       	ld	r29, X+
    42e8:	ed 91       	ld	r30, X+
    42ea:	fd 91       	ld	r31, X+
    42ec:	0d 90       	ld	r0, X+
    42ee:	0f be       	out	0x3f, r0	; 63
    42f0:	ed bf       	out	0x3d, r30	; 61
    42f2:	fe bf       	out	0x3e, r31	; 62
    42f4:	ed 91       	ld	r30, X+
    42f6:	fd 91       	ld	r31, X+
    42f8:	09 94       	ijmp

000042fa <memcpy_P>:
memcpy_P():
    42fa:	fb 01       	movw	r30, r22
    42fc:	dc 01       	movw	r26, r24
    42fe:	02 c0       	rjmp	.+4      	; 0x4304 <memcpy_P+0xa>
    4300:	05 90       	lpm	r0, Z+
    4302:	0d 92       	st	X+, r0
    4304:	41 50       	subi	r20, 0x01	; 1
    4306:	50 40       	sbci	r21, 0x00	; 0
    4308:	d8 f7       	brcc	.-10     	; 0x4300 <memcpy_P+0x6>
    430a:	08 95       	ret

0000430c <vfprintf_P>:
vfprintf_P():
    430c:	cf 93       	push	r28
    430e:	df 93       	push	r29
    4310:	ec 01       	movw	r28, r24
    4312:	8b 81       	ldd	r24, Y+3	; 0x03
    4314:	88 60       	ori	r24, 0x08	; 8
    4316:	8b 83       	std	Y+3, r24	; 0x03
    4318:	ce 01       	movw	r24, r28
    431a:	06 d0       	rcall	.+12     	; 0x4328 <vfprintf>
    431c:	2b 81       	ldd	r18, Y+3	; 0x03
    431e:	27 7f       	andi	r18, 0xF7	; 247
    4320:	2b 83       	std	Y+3, r18	; 0x03
    4322:	df 91       	pop	r29
    4324:	cf 91       	pop	r28
    4326:	08 95       	ret

00004328 <vfprintf>:
vfprintf():
    4328:	ab e0       	ldi	r26, 0x0B	; 11
    432a:	b0 e0       	ldi	r27, 0x00	; 0
    432c:	e9 e9       	ldi	r30, 0x99	; 153
    432e:	f1 e2       	ldi	r31, 0x21	; 33
    4330:	6a c2       	rjmp	.+1236   	; 0x4806 <__prologue_saves__>
    4332:	7c 01       	movw	r14, r24
    4334:	3b 01       	movw	r6, r22
    4336:	8a 01       	movw	r16, r20
    4338:	fc 01       	movw	r30, r24
    433a:	16 82       	std	Z+6, r1	; 0x06
    433c:	17 82       	std	Z+7, r1	; 0x07
    433e:	83 81       	ldd	r24, Z+3	; 0x03
    4340:	81 ff       	sbrs	r24, 1
    4342:	ba c1       	rjmp	.+884    	; 0x46b8 <vfprintf+0x390>
    4344:	ce 01       	movw	r24, r28
    4346:	01 96       	adiw	r24, 0x01	; 1
    4348:	5c 01       	movw	r10, r24
    434a:	f7 01       	movw	r30, r14
    434c:	93 81       	ldd	r25, Z+3	; 0x03
    434e:	f3 01       	movw	r30, r6
    4350:	93 fd       	sbrc	r25, 3
    4352:	85 91       	lpm	r24, Z+
    4354:	93 ff       	sbrs	r25, 3
    4356:	81 91       	ld	r24, Z+
    4358:	3f 01       	movw	r6, r30
    435a:	88 23       	and	r24, r24
    435c:	09 f4       	brne	.+2      	; 0x4360 <vfprintf+0x38>
    435e:	49 c1       	rjmp	.+658    	; 0x45f2 <vfprintf+0x2ca>
    4360:	85 32       	cpi	r24, 0x25	; 37
    4362:	39 f4       	brne	.+14     	; 0x4372 <vfprintf+0x4a>
    4364:	93 fd       	sbrc	r25, 3
    4366:	85 91       	lpm	r24, Z+
    4368:	93 ff       	sbrs	r25, 3
    436a:	81 91       	ld	r24, Z+
    436c:	3f 01       	movw	r6, r30
    436e:	85 32       	cpi	r24, 0x25	; 37
    4370:	21 f4       	brne	.+8      	; 0x437a <vfprintf+0x52>
    4372:	b7 01       	movw	r22, r14
    4374:	90 e0       	ldi	r25, 0x00	; 0
    4376:	b9 d1       	rcall	.+882    	; 0x46ea <fputc>
    4378:	e8 cf       	rjmp	.-48     	; 0x434a <vfprintf+0x22>
    437a:	91 2c       	mov	r9, r1
    437c:	21 2c       	mov	r2, r1
    437e:	31 2c       	mov	r3, r1
    4380:	ff e1       	ldi	r31, 0x1F	; 31
    4382:	f3 15       	cp	r31, r3
    4384:	38 f0       	brcs	.+14     	; 0x4394 <vfprintf+0x6c>
    4386:	8b 32       	cpi	r24, 0x2B	; 43
    4388:	11 f1       	breq	.+68     	; 0x43ce <vfprintf+0xa6>
    438a:	90 f4       	brcc	.+36     	; 0x43b0 <vfprintf+0x88>
    438c:	80 32       	cpi	r24, 0x20	; 32
    438e:	09 f1       	breq	.+66     	; 0x43d2 <vfprintf+0xaa>
    4390:	83 32       	cpi	r24, 0x23	; 35
    4392:	29 f1       	breq	.+74     	; 0x43de <vfprintf+0xb6>
    4394:	37 fc       	sbrc	r3, 7
    4396:	3c c0       	rjmp	.+120    	; 0x4410 <vfprintf+0xe8>
    4398:	20 ed       	ldi	r18, 0xD0	; 208
    439a:	28 0f       	add	r18, r24
    439c:	2a 30       	cpi	r18, 0x0A	; 10
    439e:	50 f5       	brcc	.+84     	; 0x43f4 <vfprintf+0xcc>
    43a0:	36 fe       	sbrs	r3, 6
    43a2:	20 c0       	rjmp	.+64     	; 0x43e4 <vfprintf+0xbc>
    43a4:	8a e0       	ldi	r24, 0x0A	; 10
    43a6:	98 9e       	mul	r9, r24
    43a8:	20 0d       	add	r18, r0
    43aa:	11 24       	eor	r1, r1
    43ac:	92 2e       	mov	r9, r18
    43ae:	06 c0       	rjmp	.+12     	; 0x43bc <vfprintf+0x94>
    43b0:	8d 32       	cpi	r24, 0x2D	; 45
    43b2:	91 f0       	breq	.+36     	; 0x43d8 <vfprintf+0xb0>
    43b4:	80 33       	cpi	r24, 0x30	; 48
    43b6:	71 f7       	brne	.-36     	; 0x4394 <vfprintf+0x6c>
    43b8:	68 94       	set
    43ba:	30 f8       	bld	r3, 0
    43bc:	f3 01       	movw	r30, r6
    43be:	93 fd       	sbrc	r25, 3
    43c0:	85 91       	lpm	r24, Z+
    43c2:	93 ff       	sbrs	r25, 3
    43c4:	81 91       	ld	r24, Z+
    43c6:	3f 01       	movw	r6, r30
    43c8:	81 11       	cpse	r24, r1
    43ca:	da cf       	rjmp	.-76     	; 0x4380 <vfprintf+0x58>
    43cc:	21 c0       	rjmp	.+66     	; 0x4410 <vfprintf+0xe8>
    43ce:	68 94       	set
    43d0:	31 f8       	bld	r3, 1
    43d2:	68 94       	set
    43d4:	32 f8       	bld	r3, 2
    43d6:	f2 cf       	rjmp	.-28     	; 0x43bc <vfprintf+0x94>
    43d8:	68 94       	set
    43da:	33 f8       	bld	r3, 3
    43dc:	ef cf       	rjmp	.-34     	; 0x43bc <vfprintf+0x94>
    43de:	68 94       	set
    43e0:	34 f8       	bld	r3, 4
    43e2:	ec cf       	rjmp	.-40     	; 0x43bc <vfprintf+0x94>
    43e4:	ea e0       	ldi	r30, 0x0A	; 10
    43e6:	2e 9e       	mul	r2, r30
    43e8:	20 0d       	add	r18, r0
    43ea:	11 24       	eor	r1, r1
    43ec:	22 2e       	mov	r2, r18
    43ee:	68 94       	set
    43f0:	35 f8       	bld	r3, 5
    43f2:	e4 cf       	rjmp	.-56     	; 0x43bc <vfprintf+0x94>
    43f4:	8e 32       	cpi	r24, 0x2E	; 46
    43f6:	29 f4       	brne	.+10     	; 0x4402 <vfprintf+0xda>
    43f8:	36 fc       	sbrc	r3, 6
    43fa:	fb c0       	rjmp	.+502    	; 0x45f2 <vfprintf+0x2ca>
    43fc:	68 94       	set
    43fe:	36 f8       	bld	r3, 6
    4400:	dd cf       	rjmp	.-70     	; 0x43bc <vfprintf+0x94>
    4402:	8c 36       	cpi	r24, 0x6C	; 108
    4404:	19 f4       	brne	.+6      	; 0x440c <vfprintf+0xe4>
    4406:	68 94       	set
    4408:	37 f8       	bld	r3, 7
    440a:	d8 cf       	rjmp	.-80     	; 0x43bc <vfprintf+0x94>
    440c:	88 36       	cpi	r24, 0x68	; 104
    440e:	b1 f2       	breq	.-84     	; 0x43bc <vfprintf+0x94>
    4410:	98 2f       	mov	r25, r24
    4412:	9f 7d       	andi	r25, 0xDF	; 223
    4414:	95 54       	subi	r25, 0x45	; 69
    4416:	93 30       	cpi	r25, 0x03	; 3
    4418:	d8 f0       	brcs	.+54     	; 0x4450 <vfprintf+0x128>
    441a:	83 36       	cpi	r24, 0x63	; 99
    441c:	91 f1       	breq	.+100    	; 0x4482 <vfprintf+0x15a>
    441e:	83 37       	cpi	r24, 0x73	; 115
    4420:	b1 f1       	breq	.+108    	; 0x448e <vfprintf+0x166>
    4422:	83 35       	cpi	r24, 0x53	; 83
    4424:	09 f0       	breq	.+2      	; 0x4428 <vfprintf+0x100>
    4426:	5e c0       	rjmp	.+188    	; 0x44e4 <vfprintf+0x1bc>
    4428:	28 01       	movw	r4, r16
    442a:	f2 e0       	ldi	r31, 0x02	; 2
    442c:	4f 0e       	add	r4, r31
    442e:	51 1c       	adc	r5, r1
    4430:	f8 01       	movw	r30, r16
    4432:	c0 80       	ld	r12, Z
    4434:	d1 80       	ldd	r13, Z+1	; 0x01
    4436:	69 2d       	mov	r22, r9
    4438:	70 e0       	ldi	r23, 0x00	; 0
    443a:	36 fc       	sbrc	r3, 6
    443c:	02 c0       	rjmp	.+4      	; 0x4442 <vfprintf+0x11a>
    443e:	6f ef       	ldi	r22, 0xFF	; 255
    4440:	7f ef       	ldi	r23, 0xFF	; 255
    4442:	c6 01       	movw	r24, r12
    4444:	3c d1       	rcall	.+632    	; 0x46be <strnlen_P>
    4446:	4c 01       	movw	r8, r24
    4448:	68 94       	set
    444a:	37 f8       	bld	r3, 7
    444c:	82 01       	movw	r16, r4
    444e:	0a c0       	rjmp	.+20     	; 0x4464 <vfprintf+0x13c>
    4450:	0c 5f       	subi	r16, 0xFC	; 252
    4452:	1f 4f       	sbci	r17, 0xFF	; 255
    4454:	ff e3       	ldi	r31, 0x3F	; 63
    4456:	f9 83       	std	Y+1, r31	; 0x01
    4458:	88 24       	eor	r8, r8
    445a:	83 94       	inc	r8
    445c:	91 2c       	mov	r9, r1
    445e:	65 01       	movw	r12, r10
    4460:	e8 94       	clt
    4462:	37 f8       	bld	r3, 7
    4464:	33 fe       	sbrs	r3, 3
    4466:	2a c0       	rjmp	.+84     	; 0x44bc <vfprintf+0x194>
    4468:	52 2c       	mov	r5, r2
    446a:	81 14       	cp	r8, r1
    446c:	91 04       	cpc	r9, r1
    446e:	59 f5       	brne	.+86     	; 0x44c6 <vfprintf+0x19e>
    4470:	55 20       	and	r5, r5
    4472:	09 f4       	brne	.+2      	; 0x4476 <vfprintf+0x14e>
    4474:	6a cf       	rjmp	.-300    	; 0x434a <vfprintf+0x22>
    4476:	b7 01       	movw	r22, r14
    4478:	80 e2       	ldi	r24, 0x20	; 32
    447a:	90 e0       	ldi	r25, 0x00	; 0
    447c:	36 d1       	rcall	.+620    	; 0x46ea <fputc>
    447e:	5a 94       	dec	r5
    4480:	f7 cf       	rjmp	.-18     	; 0x4470 <vfprintf+0x148>
    4482:	f8 01       	movw	r30, r16
    4484:	80 81       	ld	r24, Z
    4486:	89 83       	std	Y+1, r24	; 0x01
    4488:	0e 5f       	subi	r16, 0xFE	; 254
    448a:	1f 4f       	sbci	r17, 0xFF	; 255
    448c:	e5 cf       	rjmp	.-54     	; 0x4458 <vfprintf+0x130>
    448e:	28 01       	movw	r4, r16
    4490:	f2 e0       	ldi	r31, 0x02	; 2
    4492:	4f 0e       	add	r4, r31
    4494:	51 1c       	adc	r5, r1
    4496:	f8 01       	movw	r30, r16
    4498:	c0 80       	ld	r12, Z
    449a:	d1 80       	ldd	r13, Z+1	; 0x01
    449c:	69 2d       	mov	r22, r9
    449e:	70 e0       	ldi	r23, 0x00	; 0
    44a0:	36 fc       	sbrc	r3, 6
    44a2:	02 c0       	rjmp	.+4      	; 0x44a8 <vfprintf+0x180>
    44a4:	6f ef       	ldi	r22, 0xFF	; 255
    44a6:	7f ef       	ldi	r23, 0xFF	; 255
    44a8:	c6 01       	movw	r24, r12
    44aa:	14 d1       	rcall	.+552    	; 0x46d4 <strnlen>
    44ac:	4c 01       	movw	r8, r24
    44ae:	82 01       	movw	r16, r4
    44b0:	d7 cf       	rjmp	.-82     	; 0x4460 <vfprintf+0x138>
    44b2:	b7 01       	movw	r22, r14
    44b4:	80 e2       	ldi	r24, 0x20	; 32
    44b6:	90 e0       	ldi	r25, 0x00	; 0
    44b8:	18 d1       	rcall	.+560    	; 0x46ea <fputc>
    44ba:	2a 94       	dec	r2
    44bc:	28 14       	cp	r2, r8
    44be:	19 04       	cpc	r1, r9
    44c0:	09 f0       	breq	.+2      	; 0x44c4 <vfprintf+0x19c>
    44c2:	b8 f7       	brcc	.-18     	; 0x44b2 <vfprintf+0x18a>
    44c4:	d1 cf       	rjmp	.-94     	; 0x4468 <vfprintf+0x140>
    44c6:	f6 01       	movw	r30, r12
    44c8:	37 fc       	sbrc	r3, 7
    44ca:	85 91       	lpm	r24, Z+
    44cc:	37 fe       	sbrs	r3, 7
    44ce:	81 91       	ld	r24, Z+
    44d0:	6f 01       	movw	r12, r30
    44d2:	b7 01       	movw	r22, r14
    44d4:	90 e0       	ldi	r25, 0x00	; 0
    44d6:	09 d1       	rcall	.+530    	; 0x46ea <fputc>
    44d8:	51 10       	cpse	r5, r1
    44da:	5a 94       	dec	r5
    44dc:	f1 e0       	ldi	r31, 0x01	; 1
    44de:	8f 1a       	sub	r8, r31
    44e0:	91 08       	sbc	r9, r1
    44e2:	c3 cf       	rjmp	.-122    	; 0x446a <vfprintf+0x142>
    44e4:	84 36       	cpi	r24, 0x64	; 100
    44e6:	19 f0       	breq	.+6      	; 0x44ee <vfprintf+0x1c6>
    44e8:	89 36       	cpi	r24, 0x69	; 105
    44ea:	09 f0       	breq	.+2      	; 0x44ee <vfprintf+0x1c6>
    44ec:	73 c0       	rjmp	.+230    	; 0x45d4 <vfprintf+0x2ac>
    44ee:	f8 01       	movw	r30, r16
    44f0:	37 fe       	sbrs	r3, 7
    44f2:	67 c0       	rjmp	.+206    	; 0x45c2 <vfprintf+0x29a>
    44f4:	60 81       	ld	r22, Z
    44f6:	71 81       	ldd	r23, Z+1	; 0x01
    44f8:	82 81       	ldd	r24, Z+2	; 0x02
    44fa:	93 81       	ldd	r25, Z+3	; 0x03
    44fc:	0c 5f       	subi	r16, 0xFC	; 252
    44fe:	1f 4f       	sbci	r17, 0xFF	; 255
    4500:	f3 2d       	mov	r31, r3
    4502:	ff 76       	andi	r31, 0x6F	; 111
    4504:	3f 2e       	mov	r3, r31
    4506:	97 ff       	sbrs	r25, 7
    4508:	09 c0       	rjmp	.+18     	; 0x451c <vfprintf+0x1f4>
    450a:	90 95       	com	r25
    450c:	80 95       	com	r24
    450e:	70 95       	com	r23
    4510:	61 95       	neg	r22
    4512:	7f 4f       	sbci	r23, 0xFF	; 255
    4514:	8f 4f       	sbci	r24, 0xFF	; 255
    4516:	9f 4f       	sbci	r25, 0xFF	; 255
    4518:	68 94       	set
    451a:	37 f8       	bld	r3, 7
    451c:	2a e0       	ldi	r18, 0x0A	; 10
    451e:	30 e0       	ldi	r19, 0x00	; 0
    4520:	a5 01       	movw	r20, r10
    4522:	13 d1       	rcall	.+550    	; 0x474a <__ultoa_invert>
    4524:	c8 2e       	mov	r12, r24
    4526:	ca 18       	sub	r12, r10
    4528:	8c 2c       	mov	r8, r12
    452a:	43 2c       	mov	r4, r3
    452c:	36 fe       	sbrs	r3, 6
    452e:	0c c0       	rjmp	.+24     	; 0x4548 <vfprintf+0x220>
    4530:	e8 94       	clt
    4532:	40 f8       	bld	r4, 0
    4534:	c9 14       	cp	r12, r9
    4536:	40 f4       	brcc	.+16     	; 0x4548 <vfprintf+0x220>
    4538:	34 fe       	sbrs	r3, 4
    453a:	05 c0       	rjmp	.+10     	; 0x4546 <vfprintf+0x21e>
    453c:	32 fc       	sbrc	r3, 2
    453e:	03 c0       	rjmp	.+6      	; 0x4546 <vfprintf+0x21e>
    4540:	f3 2d       	mov	r31, r3
    4542:	fe 7e       	andi	r31, 0xEE	; 238
    4544:	4f 2e       	mov	r4, r31
    4546:	89 2c       	mov	r8, r9
    4548:	44 fe       	sbrs	r4, 4
    454a:	90 c0       	rjmp	.+288    	; 0x466c <vfprintf+0x344>
    454c:	fe 01       	movw	r30, r28
    454e:	ec 0d       	add	r30, r12
    4550:	f1 1d       	adc	r31, r1
    4552:	80 81       	ld	r24, Z
    4554:	80 33       	cpi	r24, 0x30	; 48
    4556:	09 f0       	breq	.+2      	; 0x455a <vfprintf+0x232>
    4558:	82 c0       	rjmp	.+260    	; 0x465e <vfprintf+0x336>
    455a:	24 2d       	mov	r18, r4
    455c:	29 7e       	andi	r18, 0xE9	; 233
    455e:	42 2e       	mov	r4, r18
    4560:	84 2d       	mov	r24, r4
    4562:	88 70       	andi	r24, 0x08	; 8
    4564:	58 2e       	mov	r5, r24
    4566:	43 fc       	sbrc	r4, 3
    4568:	8f c0       	rjmp	.+286    	; 0x4688 <vfprintf+0x360>
    456a:	40 fe       	sbrs	r4, 0
    456c:	89 c0       	rjmp	.+274    	; 0x4680 <vfprintf+0x358>
    456e:	9c 2c       	mov	r9, r12
    4570:	82 14       	cp	r8, r2
    4572:	18 f4       	brcc	.+6      	; 0x457a <vfprintf+0x252>
    4574:	2c 0c       	add	r2, r12
    4576:	92 2c       	mov	r9, r2
    4578:	98 18       	sub	r9, r8
    457a:	44 fe       	sbrs	r4, 4
    457c:	8b c0       	rjmp	.+278    	; 0x4694 <vfprintf+0x36c>
    457e:	b7 01       	movw	r22, r14
    4580:	80 e3       	ldi	r24, 0x30	; 48
    4582:	90 e0       	ldi	r25, 0x00	; 0
    4584:	b2 d0       	rcall	.+356    	; 0x46ea <fputc>
    4586:	42 fe       	sbrs	r4, 2
    4588:	08 c0       	rjmp	.+16     	; 0x459a <vfprintf+0x272>
    458a:	88 e7       	ldi	r24, 0x78	; 120
    458c:	90 e0       	ldi	r25, 0x00	; 0
    458e:	41 fe       	sbrs	r4, 1
    4590:	02 c0       	rjmp	.+4      	; 0x4596 <vfprintf+0x26e>
    4592:	88 e5       	ldi	r24, 0x58	; 88
    4594:	90 e0       	ldi	r25, 0x00	; 0
    4596:	b7 01       	movw	r22, r14
    4598:	a8 d0       	rcall	.+336    	; 0x46ea <fputc>
    459a:	c9 14       	cp	r12, r9
    459c:	08 f4       	brcc	.+2      	; 0x45a0 <vfprintf+0x278>
    459e:	86 c0       	rjmp	.+268    	; 0x46ac <vfprintf+0x384>
    45a0:	ca 94       	dec	r12
    45a2:	d1 2c       	mov	r13, r1
    45a4:	9f ef       	ldi	r25, 0xFF	; 255
    45a6:	c9 1a       	sub	r12, r25
    45a8:	d9 0a       	sbc	r13, r25
    45aa:	ca 0c       	add	r12, r10
    45ac:	db 1c       	adc	r13, r11
    45ae:	f6 01       	movw	r30, r12
    45b0:	82 91       	ld	r24, -Z
    45b2:	6f 01       	movw	r12, r30
    45b4:	b7 01       	movw	r22, r14
    45b6:	90 e0       	ldi	r25, 0x00	; 0
    45b8:	98 d0       	rcall	.+304    	; 0x46ea <fputc>
    45ba:	ac 14       	cp	r10, r12
    45bc:	bd 04       	cpc	r11, r13
    45be:	b9 f7       	brne	.-18     	; 0x45ae <vfprintf+0x286>
    45c0:	57 cf       	rjmp	.-338    	; 0x4470 <vfprintf+0x148>
    45c2:	60 81       	ld	r22, Z
    45c4:	71 81       	ldd	r23, Z+1	; 0x01
    45c6:	07 2e       	mov	r0, r23
    45c8:	00 0c       	add	r0, r0
    45ca:	88 0b       	sbc	r24, r24
    45cc:	99 0b       	sbc	r25, r25
    45ce:	0e 5f       	subi	r16, 0xFE	; 254
    45d0:	1f 4f       	sbci	r17, 0xFF	; 255
    45d2:	96 cf       	rjmp	.-212    	; 0x4500 <vfprintf+0x1d8>
    45d4:	d3 2c       	mov	r13, r3
    45d6:	e8 94       	clt
    45d8:	d4 f8       	bld	r13, 4
    45da:	2a e0       	ldi	r18, 0x0A	; 10
    45dc:	30 e0       	ldi	r19, 0x00	; 0
    45de:	85 37       	cpi	r24, 0x75	; 117
    45e0:	31 f1       	breq	.+76     	; 0x462e <vfprintf+0x306>
    45e2:	23 2d       	mov	r18, r3
    45e4:	29 7f       	andi	r18, 0xF9	; 249
    45e6:	d2 2e       	mov	r13, r18
    45e8:	8f 36       	cpi	r24, 0x6F	; 111
    45ea:	f9 f0       	breq	.+62     	; 0x462a <vfprintf+0x302>
    45ec:	40 f4       	brcc	.+16     	; 0x45fe <vfprintf+0x2d6>
    45ee:	88 35       	cpi	r24, 0x58	; 88
    45f0:	a1 f0       	breq	.+40     	; 0x461a <vfprintf+0x2f2>
    45f2:	f7 01       	movw	r30, r14
    45f4:	86 81       	ldd	r24, Z+6	; 0x06
    45f6:	97 81       	ldd	r25, Z+7	; 0x07
    45f8:	2b 96       	adiw	r28, 0x0b	; 11
    45fa:	e2 e1       	ldi	r30, 0x12	; 18
    45fc:	1d c1       	rjmp	.+570    	; 0x4838 <__epilogue_restores__>
    45fe:	80 37       	cpi	r24, 0x70	; 112
    4600:	49 f0       	breq	.+18     	; 0x4614 <vfprintf+0x2ec>
    4602:	88 37       	cpi	r24, 0x78	; 120
    4604:	b1 f7       	brne	.-20     	; 0x45f2 <vfprintf+0x2ca>
    4606:	d4 fe       	sbrs	r13, 4
    4608:	02 c0       	rjmp	.+4      	; 0x460e <vfprintf+0x2e6>
    460a:	68 94       	set
    460c:	d2 f8       	bld	r13, 2
    460e:	20 e1       	ldi	r18, 0x10	; 16
    4610:	30 e0       	ldi	r19, 0x00	; 0
    4612:	0d c0       	rjmp	.+26     	; 0x462e <vfprintf+0x306>
    4614:	68 94       	set
    4616:	d4 f8       	bld	r13, 4
    4618:	f6 cf       	rjmp	.-20     	; 0x4606 <vfprintf+0x2de>
    461a:	34 fe       	sbrs	r3, 4
    461c:	03 c0       	rjmp	.+6      	; 0x4624 <vfprintf+0x2fc>
    461e:	82 2f       	mov	r24, r18
    4620:	86 60       	ori	r24, 0x06	; 6
    4622:	d8 2e       	mov	r13, r24
    4624:	20 e1       	ldi	r18, 0x10	; 16
    4626:	32 e0       	ldi	r19, 0x02	; 2
    4628:	02 c0       	rjmp	.+4      	; 0x462e <vfprintf+0x306>
    462a:	28 e0       	ldi	r18, 0x08	; 8
    462c:	30 e0       	ldi	r19, 0x00	; 0
    462e:	f8 01       	movw	r30, r16
    4630:	d7 fe       	sbrs	r13, 7
    4632:	0e c0       	rjmp	.+28     	; 0x4650 <vfprintf+0x328>
    4634:	60 81       	ld	r22, Z
    4636:	71 81       	ldd	r23, Z+1	; 0x01
    4638:	82 81       	ldd	r24, Z+2	; 0x02
    463a:	93 81       	ldd	r25, Z+3	; 0x03
    463c:	0c 5f       	subi	r16, 0xFC	; 252
    463e:	1f 4f       	sbci	r17, 0xFF	; 255
    4640:	a5 01       	movw	r20, r10
    4642:	83 d0       	rcall	.+262    	; 0x474a <__ultoa_invert>
    4644:	c8 2e       	mov	r12, r24
    4646:	ca 18       	sub	r12, r10
    4648:	3d 2c       	mov	r3, r13
    464a:	e8 94       	clt
    464c:	37 f8       	bld	r3, 7
    464e:	6c cf       	rjmp	.-296    	; 0x4528 <vfprintf+0x200>
    4650:	60 81       	ld	r22, Z
    4652:	71 81       	ldd	r23, Z+1	; 0x01
    4654:	90 e0       	ldi	r25, 0x00	; 0
    4656:	80 e0       	ldi	r24, 0x00	; 0
    4658:	0e 5f       	subi	r16, 0xFE	; 254
    465a:	1f 4f       	sbci	r17, 0xFF	; 255
    465c:	f1 cf       	rjmp	.-30     	; 0x4640 <vfprintf+0x318>
    465e:	42 fc       	sbrc	r4, 2
    4660:	02 c0       	rjmp	.+4      	; 0x4666 <vfprintf+0x33e>
    4662:	83 94       	inc	r8
    4664:	7d cf       	rjmp	.-262    	; 0x4560 <vfprintf+0x238>
    4666:	83 94       	inc	r8
    4668:	83 94       	inc	r8
    466a:	7a cf       	rjmp	.-268    	; 0x4560 <vfprintf+0x238>
    466c:	84 2d       	mov	r24, r4
    466e:	86 78       	andi	r24, 0x86	; 134
    4670:	09 f4       	brne	.+2      	; 0x4674 <vfprintf+0x34c>
    4672:	76 cf       	rjmp	.-276    	; 0x4560 <vfprintf+0x238>
    4674:	f6 cf       	rjmp	.-20     	; 0x4662 <vfprintf+0x33a>
    4676:	b7 01       	movw	r22, r14
    4678:	80 e2       	ldi	r24, 0x20	; 32
    467a:	90 e0       	ldi	r25, 0x00	; 0
    467c:	36 d0       	rcall	.+108    	; 0x46ea <fputc>
    467e:	83 94       	inc	r8
    4680:	82 14       	cp	r8, r2
    4682:	c8 f3       	brcs	.-14     	; 0x4676 <vfprintf+0x34e>
    4684:	51 2c       	mov	r5, r1
    4686:	79 cf       	rjmp	.-270    	; 0x457a <vfprintf+0x252>
    4688:	52 2c       	mov	r5, r2
    468a:	58 18       	sub	r5, r8
    468c:	82 14       	cp	r8, r2
    468e:	08 f4       	brcc	.+2      	; 0x4692 <vfprintf+0x36a>
    4690:	74 cf       	rjmp	.-280    	; 0x457a <vfprintf+0x252>
    4692:	f8 cf       	rjmp	.-16     	; 0x4684 <vfprintf+0x35c>
    4694:	84 2d       	mov	r24, r4
    4696:	86 78       	andi	r24, 0x86	; 134
    4698:	09 f4       	brne	.+2      	; 0x469c <vfprintf+0x374>
    469a:	7f cf       	rjmp	.-258    	; 0x459a <vfprintf+0x272>
    469c:	8b e2       	ldi	r24, 0x2B	; 43
    469e:	41 fe       	sbrs	r4, 1
    46a0:	80 e2       	ldi	r24, 0x20	; 32
    46a2:	47 fc       	sbrc	r4, 7
    46a4:	8d e2       	ldi	r24, 0x2D	; 45
    46a6:	b7 01       	movw	r22, r14
    46a8:	90 e0       	ldi	r25, 0x00	; 0
    46aa:	76 cf       	rjmp	.-276    	; 0x4598 <vfprintf+0x270>
    46ac:	b7 01       	movw	r22, r14
    46ae:	80 e3       	ldi	r24, 0x30	; 48
    46b0:	90 e0       	ldi	r25, 0x00	; 0
    46b2:	1b d0       	rcall	.+54     	; 0x46ea <fputc>
    46b4:	9a 94       	dec	r9
    46b6:	71 cf       	rjmp	.-286    	; 0x459a <vfprintf+0x272>
    46b8:	8f ef       	ldi	r24, 0xFF	; 255
    46ba:	9f ef       	ldi	r25, 0xFF	; 255
    46bc:	9d cf       	rjmp	.-198    	; 0x45f8 <vfprintf+0x2d0>

000046be <strnlen_P>:
strnlen_P():
    46be:	fc 01       	movw	r30, r24
    46c0:	05 90       	lpm	r0, Z+
    46c2:	61 50       	subi	r22, 0x01	; 1
    46c4:	70 40       	sbci	r23, 0x00	; 0
    46c6:	01 10       	cpse	r0, r1
    46c8:	d8 f7       	brcc	.-10     	; 0x46c0 <strnlen_P+0x2>
    46ca:	80 95       	com	r24
    46cc:	90 95       	com	r25
    46ce:	8e 0f       	add	r24, r30
    46d0:	9f 1f       	adc	r25, r31
    46d2:	08 95       	ret

000046d4 <strnlen>:
strnlen():
    46d4:	fc 01       	movw	r30, r24
    46d6:	61 50       	subi	r22, 0x01	; 1
    46d8:	70 40       	sbci	r23, 0x00	; 0
    46da:	01 90       	ld	r0, Z+
    46dc:	01 10       	cpse	r0, r1
    46de:	d8 f7       	brcc	.-10     	; 0x46d6 <strnlen+0x2>
    46e0:	80 95       	com	r24
    46e2:	90 95       	com	r25
    46e4:	8e 0f       	add	r24, r30
    46e6:	9f 1f       	adc	r25, r31
    46e8:	08 95       	ret

000046ea <fputc>:
fputc():
    46ea:	0f 93       	push	r16
    46ec:	1f 93       	push	r17
    46ee:	cf 93       	push	r28
    46f0:	df 93       	push	r29
    46f2:	18 2f       	mov	r17, r24
    46f4:	09 2f       	mov	r16, r25
    46f6:	eb 01       	movw	r28, r22
    46f8:	8b 81       	ldd	r24, Y+3	; 0x03
    46fa:	81 fd       	sbrc	r24, 1
    46fc:	09 c0       	rjmp	.+18     	; 0x4710 <fputc+0x26>
    46fe:	1f ef       	ldi	r17, 0xFF	; 255
    4700:	0f ef       	ldi	r16, 0xFF	; 255
    4702:	81 2f       	mov	r24, r17
    4704:	90 2f       	mov	r25, r16
    4706:	df 91       	pop	r29
    4708:	cf 91       	pop	r28
    470a:	1f 91       	pop	r17
    470c:	0f 91       	pop	r16
    470e:	08 95       	ret
    4710:	82 ff       	sbrs	r24, 2
    4712:	14 c0       	rjmp	.+40     	; 0x473c <fputc+0x52>
    4714:	2e 81       	ldd	r18, Y+6	; 0x06
    4716:	3f 81       	ldd	r19, Y+7	; 0x07
    4718:	8c 81       	ldd	r24, Y+4	; 0x04
    471a:	9d 81       	ldd	r25, Y+5	; 0x05
    471c:	28 17       	cp	r18, r24
    471e:	39 07       	cpc	r19, r25
    4720:	3c f4       	brge	.+14     	; 0x4730 <fputc+0x46>
    4722:	e8 81       	ld	r30, Y
    4724:	f9 81       	ldd	r31, Y+1	; 0x01
    4726:	cf 01       	movw	r24, r30
    4728:	01 96       	adiw	r24, 0x01	; 1
    472a:	88 83       	st	Y, r24
    472c:	99 83       	std	Y+1, r25	; 0x01
    472e:	10 83       	st	Z, r17
    4730:	8e 81       	ldd	r24, Y+6	; 0x06
    4732:	9f 81       	ldd	r25, Y+7	; 0x07
    4734:	01 96       	adiw	r24, 0x01	; 1
    4736:	8e 83       	std	Y+6, r24	; 0x06
    4738:	9f 83       	std	Y+7, r25	; 0x07
    473a:	e3 cf       	rjmp	.-58     	; 0x4702 <fputc+0x18>
    473c:	e8 85       	ldd	r30, Y+8	; 0x08
    473e:	f9 85       	ldd	r31, Y+9	; 0x09
    4740:	81 2f       	mov	r24, r17
    4742:	09 95       	icall
    4744:	89 2b       	or	r24, r25
    4746:	a1 f3       	breq	.-24     	; 0x4730 <fputc+0x46>
    4748:	da cf       	rjmp	.-76     	; 0x46fe <fputc+0x14>

0000474a <__ultoa_invert>:
__ultoa_invert():
    474a:	fa 01       	movw	r30, r20
    474c:	aa 27       	eor	r26, r26
    474e:	28 30       	cpi	r18, 0x08	; 8
    4750:	51 f1       	breq	.+84     	; 0x47a6 <__ultoa_invert+0x5c>
    4752:	20 31       	cpi	r18, 0x10	; 16
    4754:	81 f1       	breq	.+96     	; 0x47b6 <__ultoa_invert+0x6c>
    4756:	e8 94       	clt
    4758:	6f 93       	push	r22
    475a:	6e 7f       	andi	r22, 0xFE	; 254
    475c:	6e 5f       	subi	r22, 0xFE	; 254
    475e:	7f 4f       	sbci	r23, 0xFF	; 255
    4760:	8f 4f       	sbci	r24, 0xFF	; 255
    4762:	9f 4f       	sbci	r25, 0xFF	; 255
    4764:	af 4f       	sbci	r26, 0xFF	; 255
    4766:	b1 e0       	ldi	r27, 0x01	; 1
    4768:	3e d0       	rcall	.+124    	; 0x47e6 <__ultoa_invert+0x9c>
    476a:	b4 e0       	ldi	r27, 0x04	; 4
    476c:	3c d0       	rcall	.+120    	; 0x47e6 <__ultoa_invert+0x9c>
    476e:	67 0f       	add	r22, r23
    4770:	78 1f       	adc	r23, r24
    4772:	89 1f       	adc	r24, r25
    4774:	9a 1f       	adc	r25, r26
    4776:	a1 1d       	adc	r26, r1
    4778:	68 0f       	add	r22, r24
    477a:	79 1f       	adc	r23, r25
    477c:	8a 1f       	adc	r24, r26
    477e:	91 1d       	adc	r25, r1
    4780:	a1 1d       	adc	r26, r1
    4782:	6a 0f       	add	r22, r26
    4784:	71 1d       	adc	r23, r1
    4786:	81 1d       	adc	r24, r1
    4788:	91 1d       	adc	r25, r1
    478a:	a1 1d       	adc	r26, r1
    478c:	20 d0       	rcall	.+64     	; 0x47ce <__ultoa_invert+0x84>
    478e:	09 f4       	brne	.+2      	; 0x4792 <__ultoa_invert+0x48>
    4790:	68 94       	set
    4792:	3f 91       	pop	r19
    4794:	2a e0       	ldi	r18, 0x0A	; 10
    4796:	26 9f       	mul	r18, r22
    4798:	11 24       	eor	r1, r1
    479a:	30 19       	sub	r19, r0
    479c:	30 5d       	subi	r19, 0xD0	; 208
    479e:	31 93       	st	Z+, r19
    47a0:	de f6       	brtc	.-74     	; 0x4758 <__ultoa_invert+0xe>
    47a2:	cf 01       	movw	r24, r30
    47a4:	08 95       	ret
    47a6:	46 2f       	mov	r20, r22
    47a8:	47 70       	andi	r20, 0x07	; 7
    47aa:	40 5d       	subi	r20, 0xD0	; 208
    47ac:	41 93       	st	Z+, r20
    47ae:	b3 e0       	ldi	r27, 0x03	; 3
    47b0:	0f d0       	rcall	.+30     	; 0x47d0 <__ultoa_invert+0x86>
    47b2:	c9 f7       	brne	.-14     	; 0x47a6 <__ultoa_invert+0x5c>
    47b4:	f6 cf       	rjmp	.-20     	; 0x47a2 <__ultoa_invert+0x58>
    47b6:	46 2f       	mov	r20, r22
    47b8:	4f 70       	andi	r20, 0x0F	; 15
    47ba:	40 5d       	subi	r20, 0xD0	; 208
    47bc:	4a 33       	cpi	r20, 0x3A	; 58
    47be:	18 f0       	brcs	.+6      	; 0x47c6 <__ultoa_invert+0x7c>
    47c0:	49 5d       	subi	r20, 0xD9	; 217
    47c2:	31 fd       	sbrc	r19, 1
    47c4:	40 52       	subi	r20, 0x20	; 32
    47c6:	41 93       	st	Z+, r20
    47c8:	02 d0       	rcall	.+4      	; 0x47ce <__ultoa_invert+0x84>
    47ca:	a9 f7       	brne	.-22     	; 0x47b6 <__ultoa_invert+0x6c>
    47cc:	ea cf       	rjmp	.-44     	; 0x47a2 <__ultoa_invert+0x58>
    47ce:	b4 e0       	ldi	r27, 0x04	; 4
    47d0:	a6 95       	lsr	r26
    47d2:	97 95       	ror	r25
    47d4:	87 95       	ror	r24
    47d6:	77 95       	ror	r23
    47d8:	67 95       	ror	r22
    47da:	ba 95       	dec	r27
    47dc:	c9 f7       	brne	.-14     	; 0x47d0 <__ultoa_invert+0x86>
    47de:	00 97       	sbiw	r24, 0x00	; 0
    47e0:	61 05       	cpc	r22, r1
    47e2:	71 05       	cpc	r23, r1
    47e4:	08 95       	ret
    47e6:	9b 01       	movw	r18, r22
    47e8:	ac 01       	movw	r20, r24
    47ea:	0a 2e       	mov	r0, r26
    47ec:	06 94       	lsr	r0
    47ee:	57 95       	ror	r21
    47f0:	47 95       	ror	r20
    47f2:	37 95       	ror	r19
    47f4:	27 95       	ror	r18
    47f6:	ba 95       	dec	r27
    47f8:	c9 f7       	brne	.-14     	; 0x47ec <__ultoa_invert+0xa2>
    47fa:	62 0f       	add	r22, r18
    47fc:	73 1f       	adc	r23, r19
    47fe:	84 1f       	adc	r24, r20
    4800:	95 1f       	adc	r25, r21
    4802:	a0 1d       	adc	r26, r0
    4804:	08 95       	ret

00004806 <__prologue_saves__>:
__prologue_saves__():
    4806:	2f 92       	push	r2
    4808:	3f 92       	push	r3
    480a:	4f 92       	push	r4
    480c:	5f 92       	push	r5
    480e:	6f 92       	push	r6
    4810:	7f 92       	push	r7
    4812:	8f 92       	push	r8
    4814:	9f 92       	push	r9
    4816:	af 92       	push	r10
    4818:	bf 92       	push	r11
    481a:	cf 92       	push	r12
    481c:	df 92       	push	r13
    481e:	ef 92       	push	r14
    4820:	ff 92       	push	r15
    4822:	0f 93       	push	r16
    4824:	1f 93       	push	r17
    4826:	cf 93       	push	r28
    4828:	df 93       	push	r29
    482a:	cd b7       	in	r28, 0x3d	; 61
    482c:	de b7       	in	r29, 0x3e	; 62
    482e:	ca 1b       	sub	r28, r26
    4830:	db 0b       	sbc	r29, r27
    4832:	cd bf       	out	0x3d, r28	; 61
    4834:	de bf       	out	0x3e, r29	; 62
    4836:	09 94       	ijmp

00004838 <__epilogue_restores__>:
__epilogue_restores__():
    4838:	2a 88       	ldd	r2, Y+18	; 0x12
    483a:	39 88       	ldd	r3, Y+17	; 0x11
    483c:	48 88       	ldd	r4, Y+16	; 0x10
    483e:	5f 84       	ldd	r5, Y+15	; 0x0f
    4840:	6e 84       	ldd	r6, Y+14	; 0x0e
    4842:	7d 84       	ldd	r7, Y+13	; 0x0d
    4844:	8c 84       	ldd	r8, Y+12	; 0x0c
    4846:	9b 84       	ldd	r9, Y+11	; 0x0b
    4848:	aa 84       	ldd	r10, Y+10	; 0x0a
    484a:	b9 84       	ldd	r11, Y+9	; 0x09
    484c:	c8 84       	ldd	r12, Y+8	; 0x08
    484e:	df 80       	ldd	r13, Y+7	; 0x07
    4850:	ee 80       	ldd	r14, Y+6	; 0x06
    4852:	fd 80       	ldd	r15, Y+5	; 0x05
    4854:	0c 81       	ldd	r16, Y+4	; 0x04
    4856:	1b 81       	ldd	r17, Y+3	; 0x03
    4858:	aa 81       	ldd	r26, Y+2	; 0x02
    485a:	b9 81       	ldd	r27, Y+1	; 0x01
    485c:	ce 0f       	add	r28, r30
    485e:	d1 1d       	adc	r29, r1
    4860:	cd bf       	out	0x3d, r28	; 61
    4862:	de bf       	out	0x3e, r29	; 62
    4864:	ed 01       	movw	r28, r26
    4866:	08 95       	ret

00004868 <__udivmodhi4>:
__udivmodhi4():
    4868:	aa 1b       	sub	r26, r26
    486a:	bb 1b       	sub	r27, r27
    486c:	51 e1       	ldi	r21, 0x11	; 17
    486e:	07 c0       	rjmp	.+14     	; 0x487e <__udivmodhi4_ep>

00004870 <__udivmodhi4_loop>:
    4870:	aa 1f       	adc	r26, r26
    4872:	bb 1f       	adc	r27, r27
    4874:	a6 17       	cp	r26, r22
    4876:	b7 07       	cpc	r27, r23
    4878:	10 f0       	brcs	.+4      	; 0x487e <__udivmodhi4_ep>
    487a:	a6 1b       	sub	r26, r22
    487c:	b7 0b       	sbc	r27, r23

0000487e <__udivmodhi4_ep>:
    487e:	88 1f       	adc	r24, r24
    4880:	99 1f       	adc	r25, r25
    4882:	5a 95       	dec	r21
    4884:	a9 f7       	brne	.-22     	; 0x4870 <__udivmodhi4_loop>
    4886:	80 95       	com	r24
    4888:	90 95       	com	r25
    488a:	bc 01       	movw	r22, r24
    488c:	cd 01       	movw	r24, r26
    488e:	08 95       	ret

00004890 <__udivmodsi4>:
__udivmodsi4():
    4890:	a1 e2       	ldi	r26, 0x21	; 33
    4892:	1a 2e       	mov	r1, r26
    4894:	aa 1b       	sub	r26, r26
    4896:	bb 1b       	sub	r27, r27
    4898:	fd 01       	movw	r30, r26
    489a:	0d c0       	rjmp	.+26     	; 0x48b6 <__udivmodsi4_ep>

0000489c <__udivmodsi4_loop>:
    489c:	aa 1f       	adc	r26, r26
    489e:	bb 1f       	adc	r27, r27
    48a0:	ee 1f       	adc	r30, r30
    48a2:	ff 1f       	adc	r31, r31
    48a4:	a2 17       	cp	r26, r18
    48a6:	b3 07       	cpc	r27, r19
    48a8:	e4 07       	cpc	r30, r20
    48aa:	f5 07       	cpc	r31, r21
    48ac:	20 f0       	brcs	.+8      	; 0x48b6 <__udivmodsi4_ep>
    48ae:	a2 1b       	sub	r26, r18
    48b0:	b3 0b       	sbc	r27, r19
    48b2:	e4 0b       	sbc	r30, r20
    48b4:	f5 0b       	sbc	r31, r21

000048b6 <__udivmodsi4_ep>:
    48b6:	66 1f       	adc	r22, r22
    48b8:	77 1f       	adc	r23, r23
    48ba:	88 1f       	adc	r24, r24
    48bc:	99 1f       	adc	r25, r25
    48be:	1a 94       	dec	r1
    48c0:	69 f7       	brne	.-38     	; 0x489c <__udivmodsi4_loop>
    48c2:	60 95       	com	r22
    48c4:	70 95       	com	r23
    48c6:	80 95       	com	r24
    48c8:	90 95       	com	r25
    48ca:	9b 01       	movw	r18, r22
    48cc:	ac 01       	movw	r20, r24
    48ce:	bd 01       	movw	r22, r26
    48d0:	cf 01       	movw	r24, r30
    48d2:	08 95       	ret

000048d4 <__divmodsi4>:
__divmodsi4():
    48d4:	05 2e       	mov	r0, r21
    48d6:	97 fb       	bst	r25, 7
    48d8:	16 f4       	brtc	.+4      	; 0x48de <__divmodsi4+0xa>
    48da:	00 94       	com	r0
    48dc:	0f d0       	rcall	.+30     	; 0x48fc <__negsi2>
    48de:	57 fd       	sbrc	r21, 7
    48e0:	05 d0       	rcall	.+10     	; 0x48ec <__divmodsi4_neg2>
    48e2:	d6 df       	rcall	.-84     	; 0x4890 <__udivmodsi4>
    48e4:	07 fc       	sbrc	r0, 7
    48e6:	02 d0       	rcall	.+4      	; 0x48ec <__divmodsi4_neg2>
    48e8:	46 f4       	brtc	.+16     	; 0x48fa <__divmodsi4_exit>
    48ea:	08 c0       	rjmp	.+16     	; 0x48fc <__negsi2>

000048ec <__divmodsi4_neg2>:
    48ec:	50 95       	com	r21
    48ee:	40 95       	com	r20
    48f0:	30 95       	com	r19
    48f2:	21 95       	neg	r18
    48f4:	3f 4f       	sbci	r19, 0xFF	; 255
    48f6:	4f 4f       	sbci	r20, 0xFF	; 255
    48f8:	5f 4f       	sbci	r21, 0xFF	; 255

000048fa <__divmodsi4_exit>:
    48fa:	08 95       	ret

000048fc <__negsi2>:
__negsi2():
    48fc:	90 95       	com	r25
    48fe:	80 95       	com	r24
    4900:	70 95       	com	r23
    4902:	61 95       	neg	r22
    4904:	7f 4f       	sbci	r23, 0xFF	; 255
    4906:	8f 4f       	sbci	r24, 0xFF	; 255
    4908:	9f 4f       	sbci	r25, 0xFF	; 255
    490a:	08 95       	ret

0000490c <__bswapsi2>:
__bswapsi2():
    490c:	69 27       	eor	r22, r25
    490e:	96 27       	eor	r25, r22
    4910:	69 27       	eor	r22, r25
    4912:	78 27       	eor	r23, r24
    4914:	87 27       	eor	r24, r23
    4916:	78 27       	eor	r23, r24
    4918:	08 95       	ret

0000491a <__tablejump2__>:
__tablejump2__():
    491a:	ee 0f       	add	r30, r30
    491c:	ff 1f       	adc	r31, r31
    491e:	05 90       	lpm	r0, Z+
    4920:	f4 91       	lpm	r31, Z
    4922:	e0 2d       	mov	r30, r0
    4924:	09 94       	ijmp

00004926 <memcmp>:
memcmp():
    4926:	fb 01       	movw	r30, r22
    4928:	dc 01       	movw	r26, r24
    492a:	04 c0       	rjmp	.+8      	; 0x4934 <memcmp+0xe>
    492c:	8d 91       	ld	r24, X+
    492e:	01 90       	ld	r0, Z+
    4930:	80 19       	sub	r24, r0
    4932:	21 f4       	brne	.+8      	; 0x493c <memcmp+0x16>
    4934:	41 50       	subi	r20, 0x01	; 1
    4936:	50 40       	sbci	r21, 0x00	; 0
    4938:	c8 f7       	brcc	.-14     	; 0x492c <memcmp+0x6>
    493a:	88 1b       	sub	r24, r24
    493c:	99 0b       	sbc	r25, r25
    493e:	08 95       	ret

00004940 <memcpy>:
memcpy():
    4940:	fb 01       	movw	r30, r22
    4942:	dc 01       	movw	r26, r24
    4944:	02 c0       	rjmp	.+4      	; 0x494a <memcpy+0xa>
    4946:	01 90       	ld	r0, Z+
    4948:	0d 92       	st	X+, r0
    494a:	41 50       	subi	r20, 0x01	; 1
    494c:	50 40       	sbci	r21, 0x00	; 0
    494e:	d8 f7       	brcc	.-10     	; 0x4946 <memcpy+0x6>
    4950:	08 95       	ret

00004952 <memset>:
memset():
    4952:	dc 01       	movw	r26, r24
    4954:	01 c0       	rjmp	.+2      	; 0x4958 <memset+0x6>
    4956:	6d 93       	st	X+, r22
    4958:	41 50       	subi	r20, 0x01	; 1
    495a:	50 40       	sbci	r21, 0x00	; 0
    495c:	e0 f7       	brcc	.-8      	; 0x4956 <memset+0x4>
    495e:	08 95       	ret

00004960 <_exit>:
exit():
    4960:	f8 94       	cli

00004962 <__stop_program>:
__stop_program():
    4962:	ff cf       	rjmp	.-2      	; 0x4962 <__stop_program>

Disassembly of section .nvmem:

000049e8 <.nvmem>:
	...

Disassembly of section .eeprom:

00810000 <_EEP>:
  810000:	ff ff ff ff ff ff ff ff                             ........

Disassembly of section .fuse:

00820000 <__fuse>:
  820000:	00 00 00 00 00 d1 08 00 00 00 03 00                 ............
