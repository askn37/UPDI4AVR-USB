
/var/folders/mz/_z9vt_y13rdf9tt_4qkvv0k40000gn/T/arduino_build_535437/UPDI4AVR-USB.ino.elf:     file format elf32-avr


Disassembly of section .data:

00806000 <__data_start>:
__data_start():
  806000:	01 55       	subi	r16, 0x51	; 81

00806001 <UPDI::recv_byte(unsigned long)::_set_ptr>:
  806001:	55 08 00 00 00 00                                   U.....

00806007 <UPDI::send_byte(unsigned long, unsigned char)::_set_ptr>:
  806007:	55 48 00 00 00 00                                   UH....

0080600d <UPDI::_set_repeat>:
  80600d:	55 a0 00 55 04                                      U..U.

00806012 <UPDI::_set_ptr24>:
  806012:	55 6a 00 00 00 00                                   Uj....

00806018 <_xclk>:
  806018:	e1 00                                               ..

0080601a <SYS::_updi_bitmap>:
  80601a:	00 00 00 ff ff 7f 55 7e c8 7f 59 fe 55 7e c3 7e     ......U~..Y.U~.~
  80602a:	04 ff 00 30 20 00                                   ...0 .

00806030 <TPI::nvmprog_key>:
  806030:	e0 ff 88 d8 cd 45 ab 89 12                          .....E...

00806039 <UPDI::set_rsd()::_set_rsd>:
  806039:	55 c2 0d                                            U..

0080603c <UPDI::clear_rsd()::_clear_rsd>:
  80603c:	55 c2 05                                            U..

0080603f <UPDI::key_status()::_key_stat>:
  80603f:	55 87                                               U.

00806041 <UPDI::sys_status()::_sys_stat>:
  806041:	55 8b                                               U.

00806043 <UPDI::nvmprog_key>:
  806043:	55 e0 20 67 6f 72 50 4d 56 4e                       U. gorPMVN

0080604d <UPDI::erase_key>:
  80604d:	55 e0 65 73 61 72 45 4d 56 4e                       U.esarEMVN

00806057 <UPDI::urowwrite_key>:
  806057:	55 e0 65 74 26 73 55 4d 56 4e                       U.et&sUMVN

00806061 <UPDI::write_userrow()::_urowstop>:
  806061:	55 c7 20                                            U. 

00806064 <UPDI::write_userrow()::_urowdone>:
  806064:	55 ca 03                                            U..

00806067 <UPDI::connect()::_sib256>:
  806067:	55 e6                                               U.

00806069 <UPDI::connect()::_init>:
  806069:	55 c8 59 55 c3 08 55 c2 05                          U.YU..U..

00806072 <UPDI::sys_reset(bool)::_reset>:
  806072:	55 c8 59 55 c8 00 55 c3 04                          U.YU..U..

0080607b <vtable for HarfUART_Class>:
  80607b:	00 00 00 00 e9 04 0d 0a 00                          .........

Disassembly of section .text:

00000000 <__vectors>:
__vectors():
../../../../crt1/gcrt1.S:61
       0:	67 c4       	rjmp	.+2254   	; 0x8d0 <__ctors_end>
       2:	00 00       	nop
../../../../crt1/gcrt1.S:67
       4:	a2 c4       	rjmp	.+2372   	; 0x94a <__bad_interrupt>
       6:	00 00       	nop
../../../../crt1/gcrt1.S:68
       8:	a0 c4       	rjmp	.+2368   	; 0x94a <__bad_interrupt>
       a:	00 00       	nop
../../../../crt1/gcrt1.S:69
       c:	9e c4       	rjmp	.+2364   	; 0x94a <__bad_interrupt>
       e:	00 00       	nop
../../../../crt1/gcrt1.S:70
      10:	9c c4       	rjmp	.+2360   	; 0x94a <__bad_interrupt>
      12:	00 00       	nop
../../../../crt1/gcrt1.S:71
      14:	9a c4       	rjmp	.+2356   	; 0x94a <__bad_interrupt>
      16:	00 00       	nop
../../../../crt1/gcrt1.S:72
      18:	98 c4       	rjmp	.+2352   	; 0x94a <__bad_interrupt>
      1a:	00 00       	nop
../../../../crt1/gcrt1.S:73
      1c:	96 c4       	rjmp	.+2348   	; 0x94a <__bad_interrupt>
      1e:	00 00       	nop
../../../../crt1/gcrt1.S:74
      20:	94 c4       	rjmp	.+2344   	; 0x94a <__bad_interrupt>
      22:	00 00       	nop
../../../../crt1/gcrt1.S:75
      24:	92 c4       	rjmp	.+2340   	; 0x94a <__bad_interrupt>
      26:	00 00       	nop
../../../../crt1/gcrt1.S:76
      28:	90 c4       	rjmp	.+2336   	; 0x94a <__bad_interrupt>
      2a:	00 00       	nop
../../../../crt1/gcrt1.S:77
      2c:	8e c4       	rjmp	.+2332   	; 0x94a <__bad_interrupt>
      2e:	00 00       	nop
../../../../crt1/gcrt1.S:78
      30:	8c c4       	rjmp	.+2328   	; 0x94a <__bad_interrupt>
      32:	00 00       	nop
../../../../crt1/gcrt1.S:79
      34:	8a c4       	rjmp	.+2324   	; 0x94a <__bad_interrupt>
      36:	00 00       	nop
../../../../crt1/gcrt1.S:80
      38:	88 c4       	rjmp	.+2320   	; 0x94a <__bad_interrupt>
      3a:	00 00       	nop
../../../../crt1/gcrt1.S:81
      3c:	0c 94 04 15 	jmp	0x2a08	; 0x2a08 <__vector_15>
../../../../crt1/gcrt1.S:82
      40:	84 c4       	rjmp	.+2312   	; 0x94a <__bad_interrupt>
      42:	00 00       	nop
../../../../crt1/gcrt1.S:83
      44:	82 c4       	rjmp	.+2308   	; 0x94a <__bad_interrupt>
      46:	00 00       	nop
../../../../crt1/gcrt1.S:84
      48:	80 c4       	rjmp	.+2304   	; 0x94a <__bad_interrupt>
      4a:	00 00       	nop
../../../../crt1/gcrt1.S:85
      4c:	0c 94 6e 14 	jmp	0x28dc	; 0x28dc <__vector_19>
../../../../crt1/gcrt1.S:86
      50:	7c c4       	rjmp	.+2296   	; 0x94a <__bad_interrupt>
      52:	00 00       	nop
../../../../crt1/gcrt1.S:87
      54:	7a c4       	rjmp	.+2292   	; 0x94a <__bad_interrupt>
      56:	00 00       	nop
../../../../crt1/gcrt1.S:88
      58:	78 c4       	rjmp	.+2288   	; 0x94a <__bad_interrupt>
      5a:	00 00       	nop
../../../../crt1/gcrt1.S:89
      5c:	76 c4       	rjmp	.+2284   	; 0x94a <__bad_interrupt>
      5e:	00 00       	nop
../../../../crt1/gcrt1.S:90
      60:	0c 94 80 15 	jmp	0x2b00	; 0x2b00 <__vector_24>
../../../../crt1/gcrt1.S:91
      64:	72 c4       	rjmp	.+2276   	; 0x94a <__bad_interrupt>
      66:	00 00       	nop
../../../../crt1/gcrt1.S:92
      68:	70 c4       	rjmp	.+2272   	; 0x94a <__bad_interrupt>
      6a:	00 00       	nop
../../../../crt1/gcrt1.S:93
      6c:	6e c4       	rjmp	.+2268   	; 0x94a <__bad_interrupt>
      6e:	00 00       	nop
../../../../crt1/gcrt1.S:94
      70:	6c c4       	rjmp	.+2264   	; 0x94a <__bad_interrupt>
      72:	00 00       	nop
../../../../crt1/gcrt1.S:95
      74:	6a c4       	rjmp	.+2260   	; 0x94a <__bad_interrupt>
      76:	00 00       	nop
../../../../crt1/gcrt1.S:96
      78:	68 c4       	rjmp	.+2256   	; 0x94a <__bad_interrupt>
      7a:	00 00       	nop
../../../../crt1/gcrt1.S:97
      7c:	66 c4       	rjmp	.+2252   	; 0x94a <__bad_interrupt>
      7e:	00 00       	nop
../../../../crt1/gcrt1.S:98
      80:	64 c4       	rjmp	.+2248   	; 0x94a <__bad_interrupt>
      82:	00 00       	nop
../../../../crt1/gcrt1.S:99
      84:	62 c4       	rjmp	.+2244   	; 0x94a <__bad_interrupt>
	...

00000088 <__trampolines_end>:
__trampolines_start():
      88:	43 00       	.word	0x0043	; ????
      8a:	44 00       	.word	0x0044	; ????
      8c:	43 00       	.word	0x0043	; ????
      8e:	2d 00       	.word	0x002d	; ????
      90:	41 00       	.word	0x0041	; ????
      92:	43 00       	.word	0x0043	; ????
      94:	4d 00       	.word	0x004d	; ????
      96:	2f 00       	.word	0x002f	; ????
      98:	56 00       	.word	0x0056	; ????
      9a:	43 00       	.word	0x0043	; ????
      9c:	50 00       	.word	0x0050	; ????
	...

000000a0 <USB::mstring>:
      a0:	55 00 50 00 44 00 49 00 34 00 41 00 56 00 52 00     U.P.D.I.4.A.V.R.
      b0:	2d 00 55 00 53 00 42 00 3a 00 41 00 56 00 52 00     -.U.S.B.:.A.V.R.
      c0:	2d 00 44 00 55 00 3a 00 45 00 44 00 42 00 47 00     -.D.U.:.E.D.B.G.
      d0:	2f 00 43 00 4d 00 53 00 49 00 53 00 2d 00 44 00     /.C.M.S.I.S.-.D.
      e0:	41 00 50 00 00 00                                   A.P...

000000e6 <USB::vstring>:
      e6:	4d 00 75 00 6c 00 74 00 69 00 58 00 2e 00 6a 00     M.u.l.t.i.X...j.
      f6:	70 00 20 00 4f 00 53 00 53 00 57 00 2f 00 4f 00     p. .O.S.S.W./.O.
     106:	53 00 48 00 57 00 20 00 50 00 72 00 6f 00 64 00     S.H.W. .P.r.o.d.
     116:	2e 00 00 00                                         ....

0000011a <USB::report_descriptor>:
     11a:	06 00 ff 09 01 a1 01 15 00 26 ff 00 75 08 96 40     .........&..u..@
     12a:	00 09 01 81 02 96 40 00 09 01 91 02 95 04 09 01     ......@.........
     13a:	b1 02 c0                                            ...

0000013d <USB::current_descriptor>:
     13d:	09 02 6b 00 03 01 00 80 32 09 04 00 00 02 03 00     ..k.....2.......
     14d:	00 00 09 21 11 01 00 01 22 23 00 07 05 02 03 40     ...!...."#.....@
     15d:	00 01 07 05 81 03 40 00 01 08 0b 01 02 02 02 01     ......@.........
     16d:	04 09 04 01 00 01 02 02 01 00 05 24 00 10 01 04     ...........$....
     17d:	24 02 06 05 24 06 01 02 05 24 01 03 02 07 05 82     $...$....$......
     18d:	03 10 00 04 09 04 02 00 02 0a 00 00 00 07 05 03     ................
     19d:	02 40 00 00 07 05 83 02 40 00 00                    .@......@..

000001a8 <USB::qualifier_descriptor>:
     1a8:	0a 06 00 02 ef 02 01 40 00 00                       .......@..

000001b2 <USB::get_descriptor(unsigned char*, unsigned int)::__c>:
     1b2:	20 56 49 44 3a 50 49 44 3d 25 30 34 58 3a 25 30      VID:PID=%04X:%0
     1c2:	34 58 0d 0a 00                                      4X...

000001c7 <USB::device_descriptor>:
     1c7:	12 01 00 02 ef 02 01 40 db 04 15 0b 00 01 01 02     .......@........
     1d7:	03 01                                               ..

000001d9 <USB::request_standard()::__c>:
     1d9:	3c 47 49 3a 25 30 32 58 3e 0d 0a 00                 <GI:%02X>...

000001e5 <USB::request_standard()::__c>:
     1e5:	3c 53 49 3a 30 3e 0d 0a 00                          <SI:0>...

000001ee <USB::request_standard()::__c>:
     1ee:	3c 53 43 3a 25 30 32 58 3e 0d 0a 00                 <SC:%02X>...

000001fa <USB::request_standard()::__c>:
     1fa:	3c 47 43 3a 25 30 32 58 3e 0d 0a 00                 <GC:%02X>...

00000206 <USB::request_standard()::__c>:
     206:	20 55 53 42 30 5f 41 44 44 52 3d 25 64 0d 0a 00      USB0_ADDR=%d...

00000216 <USB::request_standard()::__c>:
     216:	20 53 46 3d 25 30 32 58 3a 25 30 32 58 0d 0a 00      SF=%02X:%02X...

00000226 <USB::request_standard()::__c>:
     226:	20 43 46 3d 25 30 32 58 3a 25 30 32 58 0d 0a 00      CF=%02X:%02X...

00000236 <USB::request_class()::__c>:
     236:	20 53 42 3d 25 30 34 58 0d 0a 00                     SB=%04X...

00000241 <USB::request_class()::__c>:
     241:	20 53 4c 53 3d 25 30 32 58 0d 0a 00                  SLS=%02X...

0000024d <USB::request_class()::__c>:
     24d:	20 47 4c 45 3d 00                                    GLE=.

00000253 <USB::request_class()::__c>:
     253:	20 53 4c 45 3d 00                                    SLE=.

00000259 <USB::request_class()::__c>:
     259:	20 49 44 4c 3d 25 30 32 58 0d 0a 00                  IDL=%02X...

00000265 <USB::ep0_stalled()::__c>:
     265:	5b 53 54 41 4c 4c 45 44 5d 0d 0a 00                 [STALLED]...

00000271 <USB::handling_control_transactions()::__c>:
     271:	52 51 3d 25 30 32 58 3a 25 30 34 58 3a 25 30 32     RQ=%02X:%04X:%02
     281:	58 3a 25 30 32 58 3a 25 30 34 58 3a 25 30 34 58     X:%02X:%04X:%04X
     291:	3a 25 30 34 58 0d 0a 00                             :%04X...

00000299 <SYS::reset_enter()::__c>:
     299:	3c 52 53 54 3a 49 4e 3e 0d 0a 00                    <RST:IN>...

000002a4 <SYS::reset_leave()::__c>:
     2a4:	3c 52 53 54 3a 4f 55 54 3e 0d 0a 00                 <RST:OUT>...

000002b0 <JTAG::dap_command_check()::__c>:
     2b0:	3c 45 44 42 47 5f 45 4d 50 54 59 3e 0d 0a 00        <EDBG_EMPTY>...

000002bf <JTAG::dap_command_check()::__c>:
     2bf:	3c 45 44 42 47 5f 46 41 49 4c 3e 0d 0a 00           <EDBG_FAIL>...

000002cd <JTAG::dap_command_check()::__c>:
     2cd:	3c 45 44 42 47 5f 46 41 49 4c 3e 0d 0a 00           <EDBG_FAIL>...

000002db <JTAG::jtag_scope_general()::__c>:
     2db:	20 47 45 4e 3d 25 30 32 58 3a 25 30 32 58 3a 25      GEN=%02X:%02X:%
     2eb:	30 32 58 0d 0a 00                                   02X...

000002f1 <JTAG::jtag_scope_general()::__c>:
     2f1:	20 47 45 4e 5f 53 49 47 4e 5f 4f 46 46 0d 0a 00      GEN_SIGN_OFF...

00000301 <JTAG::jtag_scope_general()::__c>:
     301:	20 47 45 4e 5f 53 49 47 4e 5f 4f 4e 0d 0a 00         GEN_SIGN_ON...

00000310 <JTAG::jtag_physical>:
     310:	90 28 00 18 38 00 00 00                             .(..8...

00000318 <JTAG::jtag_scope_general()::__c>:
     318:	20 50 48 59 53 49 43 41 4c 3d 25 30 32 58 3a 25      PHYSICAL=%02X:%
     328:	30 32 58 0d 0a 00                                   02X...

0000032e <JTAG::jtag_scope_general()::__c>:
     32e:	20 56 54 41 52 47 45 54 3d 25 64 0d 0a 00            VTARGET=%d...

0000033c <JTAG::jtag_scope_general()::__c>:
     33c:	20 56 45 53 52 49 4f 4e 3d 00                        VESRION=.

00000346 <JTAG::jtag_version>:
     346:	00 01 20 2b 00                                      .. +.

0000034b <JTAG::jtag_scope_general()::__c>:
     34b:	20 47 45 4e 5f 47 45 54 5f 50 41 52 41 4d 3d 25      GEN_GET_PARAM=%
     35b:	30 32 58 3a 25 30 32 58 3a 25 30 32 58 0d 0a 00     02X:%02X:%02X...

0000036b <USART::change_updi()::__c>:
     36b:	20 42 41 55 44 3d 25 30 34 58 3a 25 30 32 58 0d      BAUD=%04X:%02X.
     37b:	0a 00                                               ..

0000037d <USART::change_updi()::__c>:
     37d:	20 55 41 52 54 3d 55 50 44 49 0d 0a 00               UART=UPDI...

0000038a <UPDI::jtag_scope_updi()::__c>:
     38a:	20 55 50 44 49 5f 57 52 49 54 45 3d 25 30 32 58      UPDI_WRITE=%02X
     39a:	3a 25 30 36 6c 58 3a 25 30 34 58 0d 0a 00           :%06lX:%04X...

000003a8 <UPDI::jtag_scope_updi()::__c>:
     3a8:	20 55 50 44 49 5f 52 45 41 44 3d 25 30 32 58 3a      UPDI_READ=%02X:
     3b8:	25 30 36 6c 58 3a 25 30 34 58 0d 0a 00              %06lX:%04X...

000003c5 <UPDI::jtag_scope_updi()::__c>:
     3c5:	20 55 50 44 49 5f 45 52 41 53 45 3d 25 30 32 58      UPDI_ERASE=%02X
     3d5:	3a 25 30 36 6c 58 0d 0a 00                          :%06lX...

000003de <UPDI::jtag_scope_updi()::__c>:
     3de:	20 55 50 44 49 5f 4c 45 41 56 45 5f 50 52 4f 47      UPDI_LEAVE_PROG
     3ee:	0d 0a 00                                            ...

000003f1 <UPDI::jtag_scope_updi()::__c>:
     3f1:	20 55 50 44 49 5f 45 4e 54 45 52 5f 50 52 4f 47      UPDI_ENTER_PROG
     401:	0d 0a 00                                            ...

00000404 <UPDI::jtag_scope_updi()::__c>:
     404:	20 55 50 44 49 5f 53 49 47 4e 5f 4f 46 46 0d 0a      UPDI_SIGN_OFF..
	...

00000415 <UPDI::jtag_scope_updi()::__c>:
     415:	20 55 50 44 49 5f 53 49 47 4e 5f 4f 4e 3d 45 58      UPDI_SIGN_ON=EX
     425:	54 3a 25 30 32 58 0d 0a 00                          T:%02X...

0000042e <_ZZN4JTAG19jtag_scope_avr_coreEvE3__c__12_>:
     42e:	20 58 43 4c 4b 3d 25 64 0d 0a 00                     XCLK=%d...

00000439 <_ZZN4JTAG19jtag_scope_avr_coreEvE3__c__11_>:
     439:	20 43 4f 4e 4e 45 43 54 49 4f 4e 3d 25 30 32 58      CONNECTION=%02X
     449:	0d 0a 00                                            ...

0000044c <_ZZN4JTAG19jtag_scope_avr_coreEvE3__c__10_>:
     44c:	20 41 52 43 48 3d 25 30 32 58 0d 0a 00               ARCH=%02X...

00000459 <JTAG::jtag_scope_avr_core()::__c>:
     459:	20 41 56 52 5f 47 45 54 5f 50 41 52 41 4d 45 54      AVR_GET_PARAMET
     469:	45 52 3d 25 30 32 58 3a 25 30 32 58 3a 25 30 32     ER=%02X:%02X:%02
     479:	58 0d 0a 00                                         X...

0000047d <JTAG::jtag_scope_avr_core()::__c>:
     47d:	20 55 4e 4c 4f 43 4b 45 4e 3d 25 30 32 58 0d 0a      UNLOCKEN=%02X..
	...

0000048e <JTAG::jtag_scope_avr_core()::__c>:
     48e:	20 48 56 43 54 52 4c 45 4e 3d 25 30 32 58 0d 0a      HVCTRLEN=%02X..
	...

0000049f <JTAG::jtag_scope_avr_core()::__c>:
     49f:	20 48 56 54 59 50 45 3d 25 30 32 58 0d 0a 00         HVTYPE=%02X...

000004ae <JTAG::jtag_scope_avr_core()::__c>:
     4ae:	20 44 45 56 49 43 45 44 45 53 43 3d 25 58 0d 0a      DEVICEDESC=%X..
	...

000004bf <JTAG::jtag_scope_avr_core()::__c>:
     4bf:	20 46 49 58 5f 43 4c 4b 3d 25 64 0d 0a 00            FIX_CLK=%d...

000004cd <JTAG::jtag_scope_avr_core()::__c>:
     4cd:	20 58 43 4c 4b 3d 25 64 0d 0a 00                     XCLK=%d...

000004d8 <JTAG::jtag_scope_avr_core()::__c>:
     4d8:	20 43 4f 4e 4e 45 43 54 49 4f 4e 3d 25 30 32 58      CONNECTION=%02X
     4e8:	0d 0a 00                                            ...

000004eb <JTAG::jtag_scope_avr_core()::__c>:
     4eb:	20 53 45 53 53 5f 50 55 52 50 4f 53 45 3d 25 30      SESS_PURPOSE=%0
     4fb:	32 58 0d 0a 00                                      2X...

00000500 <JTAG::jtag_scope_avr_core()::__c>:
     500:	20 41 52 43 48 3d 25 30 32 58 0d 0a 00               ARCH=%02X...

0000050d <JTAG::jtag_scope_avr_core()::__c>:
     50d:	20 41 56 52 5f 53 45 54 5f 50 41 52 41 4d 3d 25      AVR_SET_PARAM=%
     51d:	30 32 58 3a 25 30 32 58 3a 25 30 32 58 3a 25 30     02X:%02X:%02X:%0
     52d:	32 58 0d 0a 00                                      2X...

00000532 <USART::change_tpi()::__c>:
     532:	20 42 41 55 44 3d 25 30 34 58 3a 25 30 32 58 0d      BAUD=%04X:%02X.
     542:	0a 00                                               ..

00000544 <USART::change_tpi()::__c>:
     544:	20 55 41 52 54 3d 54 50 49 0d 0a 00                  UART=TPI...

00000550 <TPI::disconnect()::__c>:
     550:	20 54 50 49 53 52 3c 30 30 0d 0a 00                  TPISR<00...

0000055c <TPI::jtag_scope_tpi()::__c>:
     55c:	20 3c 52 45 53 3a 25 30 32 58 3e 0d 0a 00            <RES:%02X>...

0000056a <TPI::jtag_scope_tpi()::__c>:
     56a:	20 54 50 49 5f 43 52 43 0d 0a 00                     TPI_CRC...

00000575 <TPI::jtag_scope_tpi()::__c>:
     575:	20 54 50 49 5f 52 45 41 44 3d 25 30 32 58 3a 25      TPI_READ=%02X:%
     585:	30 38 6c 58 3a 25 30 34 58 0d 0a 00                 08lX:%04X...

00000591 <TPI::jtag_scope_tpi()::__c>:
     591:	20 54 50 49 5f 57 52 49 54 45 3d 25 30 32 58 3a      TPI_WRITE=%02X:
     5a1:	25 30 38 6c 58 3a 25 30 34 58 0d 0a 00              %08lX:%04X...

000005ae <TPI::jtag_scope_tpi()::__c>:
     5ae:	20 54 50 49 5f 45 52 41 53 45 3d 25 30 32 58 3a      TPI_ERASE=%02X:
     5be:	25 30 38 6c 58 0d 0a 00                             %08lX...

000005c6 <TPI::jtag_scope_tpi()::__c>:
     5c6:	20 54 50 49 5f 4c 45 41 56 45 5f 50 52 4f 47 4d      TPI_LEAVE_PROGM
     5d6:	4f 44 45 0d 0a 00                                   ODE...

000005dc <TPI::jtag_scope_tpi()::__c>:
     5dc:	20 54 50 49 5f 45 4e 54 45 52 5f 50 52 4f 47 4d      TPI_ENTER_PROGM
     5ec:	4f 44 45 0d 0a 00                                   ODE...

000005f2 <JTAG::jtag_scope_edbg()::__c>:
     5f2:	20 54 41 52 47 45 54 5f 50 4f 57 45 52 3d 25 30      TARGET_POWER=%0
     602:	32 58 0d 0a 00                                      2X...

00000607 <JTAG::jtag_scope_edbg()::__c>:
     607:	20 41 56 52 5f 47 45 54 5f 50 41 52 41 4d 3d 25      AVR_GET_PARAM=%
     617:	30 32 58 3a 25 30 32 58 3a 25 30 32 58 0d 0a 00     02X:%02X:%02X...

00000627 <JTAG::jtag_scope_edbg()::__c>:
     627:	20 54 41 52 47 45 54 5f 50 4f 57 45 52 3d 25 30      TARGET_POWER=%0
     637:	32 58 0d 0a 00                                      2X...

0000063c <JTAG::jtag_scope_edbg()::__c>:
     63c:	20 41 56 52 5f 53 45 54 5f 50 41 52 41 4d 3d 25      AVR_SET_PARAM=%
     64c:	30 32 58 3a 25 30 32 58 3a 25 30 32 58 3a 25 30     02X:%02X:%02X:%0
     65c:	32 58 0d 0a 00                                      2X...

00000661 <JTAG::jtag_scope_branch()::__c>:
     661:	53 43 4f 50 45 3d 25 30 32 58 2c 43 3d 25 30 32     SCOPE=%02X,C=%02
     671:	58 2c 53 3d 25 30 32 58 2c 4c 3d 25 30 32 58 0d     X,S=%02X,L=%02X.
     681:	0a 00                                               ..

00000683 <main::__c>:
     683:	3c 57 41 49 54 49 4e 47 3e 0d 0a 00                 <WAITING>...

0000068f <main::__c>:
     68f:	5f 5f 41 56 52 5f 41 52 43 48 5f 5f 20 3d 20 00     __AVR_ARCH__ = .

0000069f <main::__c>:
     69f:	69 6f 61 76 72 36 34 64 75 33 32 2e 68 00           ioavr64du32.h.

000006ad <main::__c>:
     6ad:	5f 41 56 52 5f 49 4f 58 58 58 5f 48 5f 20 3d 20     _AVR_IOXXX_H_ = 
	...

000006be <main::__c>:
     6be:	46 5f 43 50 55 20 3d 20 00                          F_CPU = .

000006c7 <main::__c>:
     6c7:	0a 3c 73 74 61 72 74 75 70 3e 00                    .<startup>.

000006d2 <SYS::reboot()::__c>:
     6d2:	3c 52 45 42 4f 4f 54 3e 0d 0a 00                    <REBOOT>...

000006dd <TPI::erase_memory()::__c>:
     6dd:	20 53 45 43 54 49 4f 4e 5f 45 52 41 53 45 3d 25      SECTION_ERASE=%
     6ed:	30 34 58 0d 0a 00                                   04X...

000006f3 <TPI::erase_memory()::__c>:
     6f3:	20 43 48 49 50 5f 45 52 41 53 45 3d 25 30 34 58      CHIP_ERASE=%04X
     703:	0d 0a 00                                            ...

00000706 <TPI::connect()::__c>:
     706:	20 53 49 47 3e 25 30 34 58 3a 25 30 32 58 0d 0a      SIG>%04X:%02X..
	...

00000717 <TPI::connect()::__c>:
     717:	20 53 4b 45 59 0d 0a 00                              SKEY...

0000071f <TPI::connect()::__c>:
     71f:	20 54 50 49 53 52 3e 25 30 32 58 0d 0a 00            TPISR>%02X...

0000072d <TPI::connect()::__c>:
     72d:	20 54 50 49 49 52 3e 25 30 32 58 0d 0a 00            TPIIR>%02X...

0000073b <TPI::connect()::__c>:
     73b:	20 54 50 49 50 43 52 3c 30 35 0d 0a 00               TPIPCR<05...

00000748 <TPI::connect()::__c>:
     748:	3c 48 56 45 4e 3e 0d 0a 00                          <HVEN>...

00000751 <UPDI::set_nvmprog_key(bool)::__c>:
     751:	20 4b 45 59 3d 25 30 32 58 0d 0a 00                  KEY=%02X...

0000075d <UPDI::set_nvmprog_key(bool)::__c>:
     75d:	20 50 52 4f 47 5f 4b 45 59 0d 0a 00                  PROG_KEY...

00000769 <UPDI::set_erase_key()::__c>:
     769:	20 4b 45 59 3d 25 30 32 58 0d 0a 00                  KEY=%02X...

00000775 <UPDI::set_erase_key()::__c>:
     775:	20 45 52 41 53 45 5f 4b 45 59 0d 0a 00               ERASE_KEY...

00000782 <UPDI::chip_erase()::__c>:
     782:	20 50 52 4f 47 53 54 41 52 54 3d 25 30 32 58 0d      PROGSTART=%02X.
     792:	0a 00                                               ..

00000794 <UPDI::chip_erase()::__c>:
     794:	20 3c 53 59 53 3a 25 30 32 58 3e 0d 0a 00            <SYS:%02X>...

000007a2 <UPDI::set_urowwrite_key()::__c>:
     7a2:	20 4b 45 59 3d 25 30 32 58 0d 0a 00                  KEY=%02X...

000007ae <UPDI::set_urowwrite_key()::__c>:
     7ae:	20 55 52 4f 57 5f 4b 45 59 0d 0a 00                  UROW_KEY...

000007ba <UPDI::write_userrow()::__c>:
     7ba:	20 52 45 5f 50 52 4f 47 53 54 41 52 54 3d 25 30      RE_PROGSTART=%0
     7ca:	32 58 0d 0a 00                                      2X...

000007cf <UPDI::write_userrow()::__c>:
     7cf:	20 45 4e 54 45 52 5f 55 52 4f 57 3d 25 30 34 6c      ENTER_UROW=%04l
     7df:	58 3a 25 30 34 58 0d 0a 00                          X:%04X...

000007e8 <UPDI::connect()::__c>:
     7e8:	20 3c 4e 56 4d 3a 25 30 32 58 3e 0d 0a 00            <NVM:%02X>...

000007f6 <UPDI::connect()::__c>:
     7f6:	20 53 49 42 3d 25 73 0d 0a 00                        SIB=%s...

00000800 <UPDI::connect()::__c>:
     800:	3c 53 54 41 54 3a 25 30 32 58 3e 00                 <STAT:%02X>.

0000080c <UPDI::disconnect()::__c>:
     80c:	20 3c 52 53 54 3a 25 64 3e 0d 0a 00                  <RST:%d>...

00000818 <UPDI::enter_progmode()::__c>:
     818:	20 50 52 4f 47 53 54 41 52 54 3d 25 30 32 58 0d      PROGSTART=%02X.
     828:	0a 00                                               ..

0000082a <USART::disable_vcp()::__c>:
     82a:	20 55 41 52 54 3d 4f 46 46 0d 0a 00                  UART=OFF...

00000836 <USART::change_vcp()::__c>:
     836:	20 55 41 52 54 3d 46 41 49 4c 0d 0a 00               UART=FAIL...

00000843 <USART::change_vcp()::__c>:
     843:	20 55 41 52 54 3d 56 43 50 0d 0a 00                  UART=VCP...

0000084f <USART::change_vcp()::__c>:
     84f:	20 42 41 55 44 3d 25 30 38 6c 58 3a 25 30 32 58      BAUD=%08lX:%02X
     85f:	0d 0a 00                                            ...

00000862 <USB::cci_interrupt()::__c>:
     862:	20 43 43 49 3d 00                                    CCI=.

00000868 <USB::ep_init>:
	...
     870:	00 4b 00 00 16 63 00 00 00 7b 00 00 1e 63 00 00     .K...c...{...c..
	...
     888:	00 bb 40 00 2e 63 00 00 00 8b 00 00 2e 63 40 00     ..@..c.......c@.
     898:	00 b9 00 00 1e 63 00 00 00 8b 00 00 6e 63 40 00     .....c......nc@.
     8a8:	02 bb 00 00 ae 63 00 00 00 00                       .....c....

000008b2 <_portmux_usart1c>:
     8b2:	e2 05 18 10 60 04 40 80 77 04                       ....`.@.w.

000008bc <Timeout::command(unsigned int (*)(), unsigned int)::__c>:
     8bc:	0d 0a 21 54 49 4d 45 4f 55 54 3a 25 30 34 6c 58     ..!TIMEOUT:%04lX
     8cc:	3e 00                                               >.

000008ce <__ctors_start>:
__ctors_start():
     8ce:	95 15       	cp	r25, r5

000008d0 <__ctors_end>:
__dtors_end():
../../../../crt1/gcrt1.S:230
     8d0:	11 24       	eor	r1, r1
../../../../crt1/gcrt1.S:231
     8d2:	1f be       	out	0x3f, r1	; 63
../../../../crt1/gcrt1.S:232
     8d4:	cf ef       	ldi	r28, 0xFF	; 255
../../../../crt1/gcrt1.S:234
     8d6:	cd bf       	out	0x3d, r28	; 61
../../../../crt1/gcrt1.S:236
     8d8:	df e7       	ldi	r29, 0x7F	; 127
../../../../crt1/gcrt1.S:237
     8da:	de bf       	out	0x3e, r29	; 62

000008dc <setup_mcu()>:
_CLKCTRL_SETUP():
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/modernAVR/0.2.14/cores/modernAVR/api/CLKCTRL_modernAVR.h:301
#else
#assert This internal CPU clock is not supported
#endif

#if defined(_CLKCTRL_FREQSEL_)
  _PROTECTED_WRITE(CLKCTRL_OSCHFCTRLA, _CLKCTRL_FREQSEL_);
     8dc:	88 ed       	ldi	r24, 0xD8	; 216
     8de:	90 e2       	ldi	r25, 0x20	; 32
     8e0:	84 bf       	out	0x34, r24	; 52
     8e2:	90 93 68 00 	sts	0x0068, r25	; 0x800068 <__TEXT_REGION_LENGTH__+0x7f0068>
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/modernAVR/0.2.14/cores/modernAVR/api/CLKCTRL_modernAVR.h:313
#endif

#if defined(_CLKCTRL_PDIV_)
  _PROTECTED_WRITE(CLKCTRL_MCLKCTRLB, _CLKCTRL_PDIV_ | CLKCTRL_PEN_bm);
#else
  _PROTECTED_WRITE(CLKCTRL_MCLKCTRLB, 0);
     8e6:	90 e0       	ldi	r25, 0x00	; 0
     8e8:	84 bf       	out	0x34, r24	; 52
     8ea:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__TEXT_REGION_LENGTH__+0x7f0061>
initVariant():
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/modernAVR/0.2.14/variants/avr_du32/variant.h:267
extern "C" {
#endif

inline void initVariant (void) {
  _CLKCTRL_SETUP();
  PORTA.PINCONFIG = PORT_ISC_INPUT_DISABLE_gc;
     8ee:	e0 e0       	ldi	r30, 0x00	; 0
     8f0:	f4 e0       	ldi	r31, 0x04	; 4
     8f2:	84 e0       	ldi	r24, 0x04	; 4
     8f4:	83 87       	std	Z+11, r24	; 0x0b
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/modernAVR/0.2.14/variants/avr_du32/variant.h:268
  PORTA.PINCTRLUPD = ~0;
     8f6:	8f ef       	ldi	r24, 0xFF	; 255
     8f8:	84 87       	std	Z+12, r24	; 0x0c
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/modernAVR/0.2.14/variants/avr_du32/variant.h:269
  PORTC.PINCTRLUPD = ~0;
     8fa:	80 93 4c 04 	sts	0x044C, r24	; 0x80044c <__TEXT_REGION_LENGTH__+0x7f044c>
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/modernAVR/0.2.14/variants/avr_du32/variant.h:270
  PORTD.PINCTRLUPD = ~0;
     8fe:	80 93 6c 04 	sts	0x046C, r24	; 0x80046c <__TEXT_REGION_LENGTH__+0x7f046c>
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/modernAVR/0.2.14/variants/avr_du32/variant.h:271
  PORTF.PINCTRLUPD = ~0;
     902:	80 93 ac 04 	sts	0x04AC, r24	; 0x8004ac <__TEXT_REGION_LENGTH__+0x7f04ac>

00000906 <__do_copy_data>:
__do_copy_data():
     906:	10 e6       	ldi	r17, 0x60	; 96
     908:	a0 e0       	ldi	r26, 0x00	; 0
     90a:	b0 e6       	ldi	r27, 0x60	; 96
     90c:	e2 e8       	ldi	r30, 0x82	; 130
     90e:	f9 e4       	ldi	r31, 0x49	; 73
     910:	02 c0       	rjmp	.+4      	; 0x916 <__do_copy_data+0x10>
     912:	05 90       	lpm	r0, Z+
     914:	0d 92       	st	X+, r0
     916:	a4 38       	cpi	r26, 0x84	; 132
     918:	b1 07       	cpc	r27, r17
     91a:	d9 f7       	brne	.-10     	; 0x912 <__do_copy_data+0xc>

0000091c <__do_clear_bss>:
__do_clear_bss():
     91c:	20 e6       	ldi	r18, 0x60	; 96
     91e:	a4 e8       	ldi	r26, 0x84	; 132
     920:	b0 e6       	ldi	r27, 0x60	; 96
     922:	01 c0       	rjmp	.+2      	; 0x926 <.do_clear_bss_start>

00000924 <.do_clear_bss_loop>:
     924:	1d 92       	st	X+, r1

00000926 <.do_clear_bss_start>:
     926:	a4 39       	cpi	r26, 0x94	; 148
     928:	b2 07       	cpc	r27, r18
     92a:	e1 f7       	brne	.-8      	; 0x924 <.do_clear_bss_loop>

0000092c <__do_global_ctors>:
__do_global_ctors():
     92c:	14 e0       	ldi	r17, 0x04	; 4
     92e:	c8 e6       	ldi	r28, 0x68	; 104
     930:	d4 e0       	ldi	r29, 0x04	; 4
     932:	04 c0       	rjmp	.+8      	; 0x93c <__do_global_ctors+0x10>
     934:	21 97       	sbiw	r28, 0x01	; 1
     936:	fe 01       	movw	r30, r28
     938:	0e 94 9c 24 	call	0x4938	; 0x4938 <__tablejump2__>
     93c:	c7 36       	cpi	r28, 0x67	; 103
     93e:	d1 07       	cpc	r29, r17
     940:	c9 f7       	brne	.-14     	; 0x934 <__do_global_ctors+0x8>
../../../../crt1/gcrt1.S:314
     942:	0e 94 a4 15 	call	0x2b48	; 0x2b48 <main>
../../../../crt1/gcrt1.S:315
     946:	0c 94 bf 24 	jmp	0x497e	; 0x497e <_exit>

0000094a <__bad_interrupt>:
__vector_22():
../../../../crt1/gcrt1.S:209
     94a:	5a cb       	rjmp	.-2380   	; 0x0 <__vectors>

0000094c <printf_putchar(char, __file*)>:
printf_putchar():
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/modernAVR/0.2.14/cores/modernAVR/api/cpp/Print_format.cpp:22
/*
 * Format Printable
 */

static int printf_putchar (char _c, FILE *_fp) {
  return ((class Print *)(fdev_get_udata(_fp)))->write((uint8_t) _c);
     94c:	fb 01       	movw	r30, r22
     94e:	a4 85       	ldd	r26, Z+12	; 0x0c
     950:	b5 85       	ldd	r27, Z+13	; 0x0d
     952:	ed 91       	ld	r30, X+
     954:	fc 91       	ld	r31, X
     956:	11 97       	sbiw	r26, 0x01	; 1
     958:	01 90       	ld	r0, Z+
     95a:	f0 81       	ld	r31, Z
     95c:	e0 2d       	mov	r30, r0
     95e:	68 2f       	mov	r22, r24
     960:	cd 01       	movw	r24, r26
     962:	09 94       	ijmp

00000964 <SYS::send_bitmap(unsigned char const*, unsigned int) [clone .constprop.9]>:
send_bitmap():
/Users/askn/Collaborator/UPDI4AVR-USB/src/sys.cpp:218

  /*** Low level TDAT stream manipulation ***/
  /* UPDI commands are sent from TDAT using only TCA0 and bit manipulation, without switching USART. */
  /* 128kbps is the lowest limit that can be achieved with an 8-bit timer at 32MHz or less. */
  void send_bitmap (const uint8_t _bitmap[], const size_t _length) {
    TCA0_SPLIT_HPER  = TCA0_225K;
     964:	88 e5       	ldi	r24, 0x58	; 88
     966:	80 93 27 0a 	sts	0x0A27, r24	; 0x800a27 <__TEXT_REGION_LENGTH__+0x7f0a27>
/Users/askn/Collaborator/UPDI4AVR-USB/src/sys.cpp:219
    TCA0_SPLIT_CTRLA = TCA_SPLIT_ENABLE_bm | TCA_SPLIT_CLKSEL_DIV1_gc;
     96a:	81 e0       	ldi	r24, 0x01	; 1
     96c:	80 93 00 0a 	sts	0x0A00, r24	; 0x800a00 <__TEXT_REGION_LENGTH__+0x7f0a00>
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	80 e0       	ldi	r24, 0x00	; 0
/Users/askn/Collaborator/UPDI4AVR-USB/src/sys.cpp:221
    for (uint8_t i = 0; i < _length; i++) {
      uint8_t _d = (_bitmap[i >> 3]) >> (i & 7);
     974:	fc 01       	movw	r30, r24
     976:	23 e0       	ldi	r18, 0x03	; 3
     978:	f5 95       	asr	r31
     97a:	e7 95       	ror	r30
     97c:	2a 95       	dec	r18
     97e:	e1 f7       	brne	.-8      	; 0x978 <SYS::send_bitmap(unsigned char const*, unsigned int) [clone .constprop.9]+0x14>
     980:	e6 5e       	subi	r30, 0xE6	; 230
     982:	ff 49       	sbci	r31, 0x9F	; 159
     984:	20 81       	ld	r18, Z
     986:	30 e0       	ldi	r19, 0x00	; 0
     988:	48 2f       	mov	r20, r24
     98a:	47 70       	andi	r20, 0x07	; 7
     98c:	02 c0       	rjmp	.+4      	; 0x992 <SYS::send_bitmap(unsigned char const*, unsigned int) [clone .constprop.9]+0x2e>
     98e:	35 95       	asr	r19
     990:	27 95       	ror	r18
     992:	4a 95       	dec	r20
     994:	e2 f7       	brpl	.-8      	; 0x98e <SYS::send_bitmap(unsigned char const*, unsigned int) [clone .constprop.9]+0x2a>
/Users/askn/Collaborator/UPDI4AVR-USB/src/sys.cpp:222
      loop_until_bit_is_set(TCA0_SPLIT_INTFLAGS, TCA_SPLIT_HUNF_bp);
     996:	40 91 0b 0a 	lds	r20, 0x0A0B	; 0x800a0b <__TEXT_REGION_LENGTH__+0x7f0a0b>
     99a:	41 ff       	sbrs	r20, 1
     99c:	fc cf       	rjmp	.-8      	; 0x996 <SYS::send_bitmap(unsigned char const*, unsigned int) [clone .constprop.9]+0x32>
/Users/askn/Collaborator/UPDI4AVR-USB/src/sys.cpp:223
      if (bit_is_set(_d, 0))
     99e:	20 ff       	sbrs	r18, 0
     9a0:	0d c0       	rjmp	.+26     	; 0x9bc <SYS::send_bitmap(unsigned char const*, unsigned int) [clone .constprop.9]+0x58>
/Users/askn/Collaborator/UPDI4AVR-USB/src/sys.cpp:224
        openDrainWriteMacro(PIN_PG_TDAT, HIGH);
     9a2:	00 98       	cbi	0x00, 0	; 0
/Users/askn/Collaborator/UPDI4AVR-USB/src/sys.cpp:227
      else
        openDrainWriteMacro(PIN_PG_TDAT, LOW);
      bit_set(TCA0_SPLIT_INTFLAGS, TCA_SPLIT_HUNF_bp);
     9a4:	20 91 0b 0a 	lds	r18, 0x0A0B	; 0x800a0b <__TEXT_REGION_LENGTH__+0x7f0a0b>
     9a8:	22 60       	ori	r18, 0x02	; 2
     9aa:	20 93 0b 0a 	sts	0x0A0B, r18	; 0x800a0b <__TEXT_REGION_LENGTH__+0x7f0a0b>
     9ae:	01 96       	adiw	r24, 0x01	; 1
/Users/askn/Collaborator/UPDI4AVR-USB/src/sys.cpp:220
  /* UPDI commands are sent from TDAT using only TCA0 and bit manipulation, without switching USART. */
  /* 128kbps is the lowest limit that can be achieved with an 8-bit timer at 32MHz or less. */
  void send_bitmap (const uint8_t _bitmap[], const size_t _length) {
    TCA0_SPLIT_HPER  = TCA0_225K;
    TCA0_SPLIT_CTRLA = TCA_SPLIT_ENABLE_bm | TCA_SPLIT_CLKSEL_DIV1_gc;
    for (uint8_t i = 0; i < _length; i++) {
     9b0:	80 39       	cpi	r24, 0x90	; 144
     9b2:	91 05       	cpc	r25, r1
     9b4:	f9 f6       	brne	.-66     	; 0x974 <SYS::send_bitmap(unsigned char const*, unsigned int) [clone .constprop.9]+0x10>
/Users/askn/Collaborator/UPDI4AVR-USB/src/sys.cpp:229
        openDrainWriteMacro(PIN_PG_TDAT, HIGH);
      else
        openDrainWriteMacro(PIN_PG_TDAT, LOW);
      bit_set(TCA0_SPLIT_INTFLAGS, TCA_SPLIT_HUNF_bp);
    }
    TCA0_SPLIT_CTRLA = 0;
     9b6:	10 92 00 0a 	sts	0x0A00, r1	; 0x800a00 <__TEXT_REGION_LENGTH__+0x7f0a00>
/Users/askn/Collaborator/UPDI4AVR-USB/src/sys.cpp:230
  }
     9ba:	08 95       	ret
/Users/askn/Collaborator/UPDI4AVR-USB/src/sys.cpp:226
      uint8_t _d = (_bitmap[i >> 3]) >> (i & 7);
      loop_until_bit_is_set(TCA0_SPLIT_INTFLAGS, TCA_SPLIT_HUNF_bp);
      if (bit_is_set(_d, 0))
        openDrainWriteMacro(PIN_PG_TDAT, HIGH);
      else
        openDrainWriteMacro(PIN_PG_TDAT, LOW);
     9bc:	00 9a       	sbi	0x00, 0	; 0
     9be:	f2 cf       	rjmp	.-28     	; 0x9a4 <SYS::send_bitmap(unsigned char const*, unsigned int) [clone .constprop.9]+0x40>

000009c0 <btoh>:
btoh():
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/modernAVR/0.2.14/cores/modernAVR/api/cpp/btools.cpp:69
    _p++; _r--;
  }
}

char btoh (uint8_t _x) {
  _x = (_x & 15) + '0';
     9c0:	98 2f       	mov	r25, r24
     9c2:	9f 70       	andi	r25, 0x0F	; 15
     9c4:	80 e3       	ldi	r24, 0x30	; 48
     9c6:	89 0f       	add	r24, r25
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/modernAVR/0.2.14/cores/modernAVR/api/cpp/btools.cpp:70
  if (_x > '9') _x += 7;
     9c8:	8a 33       	cpi	r24, 0x3A	; 58
     9ca:	10 f0       	brcs	.+4      	; 0x9d0 <btoh+0x10>
     9cc:	87 e3       	ldi	r24, 0x37	; 55
     9ce:	89 0f       	add	r24, r25
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/modernAVR/0.2.14/cores/modernAVR/api/cpp/btools.cpp:77
  // static char PROGMEM _hex[] = {
  //   '0','1','2','3','4','5','6','7',
  //   '8','9','A','B','C','D','E','F'
  // };
  // return pgm_read_byte(&_hex[_x & 15]);
}
     9d0:	08 95       	ret

000009d2 <UsartBaseClass::write(unsigned char)>:
write():
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/modernAVR/0.2.14/cores/modernAVR/api/cpp/UsartBaseClass.cpp:18
#if !defined(__AVR_TINY__)

#include "../UsartBaseClass.h"

size_t UsartBaseClass::write (const uint8_t _c) {
  loop_until_bit_is_set(usart->STATUS, USART_DREIF_bp);
     9d2:	dc 01       	movw	r26, r24
     9d4:	12 96       	adiw	r26, 0x02	; 2
     9d6:	ed 91       	ld	r30, X+
     9d8:	fc 91       	ld	r31, X
     9da:	24 81       	ldd	r18, Z+4	; 0x04
     9dc:	25 ff       	sbrs	r18, 5
     9de:	fd cf       	rjmp	.-6      	; 0x9da <UsartBaseClass::write(unsigned char)+0x8>
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/modernAVR/0.2.14/cores/modernAVR/api/cpp/UsartBaseClass.cpp:19
  usart->STATUS = USART_TXCIF_bm;
     9e0:	20 e4       	ldi	r18, 0x40	; 64
     9e2:	24 83       	std	Z+4, r18	; 0x04
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/modernAVR/0.2.14/cores/modernAVR/api/cpp/UsartBaseClass.cpp:20
  usart->TXDATAL = _c;
     9e4:	dc 01       	movw	r26, r24
     9e6:	12 96       	adiw	r26, 0x02	; 2
     9e8:	ed 91       	ld	r30, X+
     9ea:	fc 91       	ld	r31, X
     9ec:	62 83       	std	Z+2, r22	; 0x02
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/modernAVR/0.2.14/cores/modernAVR/api/cpp/UsartBaseClass.cpp:22
  return 1;
}
     9ee:	81 e0       	ldi	r24, 0x01	; 1
     9f0:	90 e0       	ldi	r25, 0x00	; 0
     9f2:	08 95       	ret

000009f4 <USB::ep_cdo_listen()>:
ep_cdo_listen():
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:350
    loop_until_bit_is_clear(USB0_INTFLAGSB, USB_RMWBUSY_bp);
    USB_EP_STATUS_CLR(USB_EP_CDI) = ~USB_TOGGLE_bm;
  }

  void ep_cdo_listen (void) {
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
     9f4:	8f b7       	in	r24, 0x3f	; 63
__iCliRetVal():
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/tools/avr-gcc/7.3.0-avr8-gnu-toolchain/avr/include/util/atomic.h:50
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     9f6:	f8 94       	cli
ep_cdo_listen():
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:351
      _recv_count = 0;
     9f8:	10 92 31 64 	sts	0x6431, r1	; 0x806431 <_recv_count>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:352
      EP_CDO.CNT  = 0;
     9fc:	10 92 70 64 	sts	0x6470, r1	; 0x806470 <EP_TABLE+0x3a>
     a00:	10 92 71 64 	sts	0x6471, r1	; 0x806471 <EP_TABLE+0x3b>
__iRestore():
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/tools/avr-gcc/7.3.0-avr8-gnu-toolchain/avr/include/util/atomic.h:70
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     a04:	8f bf       	out	0x3f, r24	; 63
ep_cdo_listen():
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:354
    }
    loop_until_bit_is_clear(USB0_INTFLAGSB, USB_RMWBUSY_bp);
     a06:	80 91 0b 0c 	lds	r24, 0x0C0B	; 0x800c0b <__TEXT_REGION_LENGTH__+0x7f0c0b>
     a0a:	82 fd       	sbrc	r24, 2
     a0c:	fc cf       	rjmp	.-8      	; 0xa06 <USB::ep_cdo_listen()+0x12>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:355
    USB_EP_STATUS_CLR(USB_EP_CDO) = ~USB_TOGGLE_bm;
     a0e:	8e ef       	ldi	r24, 0xFE	; 254
     a10:	80 93 4c 0c 	sts	0x0C4C, r24	; 0x800c4c <__TEXT_REGION_LENGTH__+0x7f0c4c>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:356
  }
     a14:	08 95       	ret

00000a16 <USB::ep_cdi_listen()>:
ep_cdi_listen():
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:325
  #else
    /* If our math is correct, then if each side of the double */
    /* buffer can complete the transmission of 64 characters   */
    /* in 1 ms, then it can support 640 kbps. */
    if (bit_is_clear(GPCONF, GPCONF_OPN_bp)
     || bit_is_clear(EP_CDI.STATUS, USB_BUSNAK_bp)) {
     a16:	e4 9b       	sbis	0x1c, 4	; 28
     a18:	0b c0       	rjmp	.+22     	; 0xa30 <USB::ep_cdi_listen()+0x1a>
     a1a:	80 91 76 64 	lds	r24, 0x6476	; 0x806476 <EP_TABLE+0x40>
     a1e:	81 ff       	sbrs	r24, 1
     a20:	07 c0       	rjmp	.+14     	; 0xa30 <USB::ep_cdi_listen()+0x1a>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:336
  #endif
    D2PRINTF(" VI=%02X:", _send_count);
    D2PRINTHEX(bit_is_set(GPCONF, GPCONF_DBL_bp)
      ? &EP_MEM.cdi_data[64]
      : &EP_MEM.cdi_data[0], _send_count);
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
     a22:	2f b7       	in	r18, 0x3f	; 63
__iCliRetVal():
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/tools/avr-gcc/7.3.0-avr8-gnu-toolchain/avr/include/util/atomic.h:50
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     a24:	f8 94       	cli
ep_cdi_listen():
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:338
      EP_CDI.DATAPTR = bit_is_set(GPCONF, GPCONF_DBL_bp)
        ? (register16_t)&EP_MEM.cdi_data[64]
     a26:	e2 99       	sbic	0x1c, 2	; 28
     a28:	0a c0       	rjmp	.+20     	; 0xa3e <USB::ep_cdi_listen()+0x28>
     a2a:	8e ea       	ldi	r24, 0xAE	; 174
     a2c:	93 e6       	ldi	r25, 0x63	; 99
     a2e:	09 c0       	rjmp	.+18     	; 0xa42 <USB::ep_cdi_listen()+0x2c>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:328
    /* in 1 ms, then it can support 640 kbps. */
    if (bit_is_clear(GPCONF, GPCONF_OPN_bp)
     || bit_is_clear(EP_CDI.STATUS, USB_BUSNAK_bp)) {
      /* No sending allowed while port is closed.  */
      /* If the buffer overflows, it is discarded. */
      if (_send_count == 64) _send_count = 0;
     a30:	80 91 32 64 	lds	r24, 0x6432	; 0x806432 <_send_count>
     a34:	80 34       	cpi	r24, 0x40	; 64
     a36:	11 f5       	brne	.+68     	; 0xa7c <USB::ep_cdi_listen()+0x66>
     a38:	10 92 32 64 	sts	0x6432, r1	; 0x806432 <_send_count>
     a3c:	08 95       	ret
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:338
    D2PRINTHEX(bit_is_set(GPCONF, GPCONF_DBL_bp)
      ? &EP_MEM.cdi_data[64]
      : &EP_MEM.cdi_data[0], _send_count);
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
      EP_CDI.DATAPTR = bit_is_set(GPCONF, GPCONF_DBL_bp)
        ? (register16_t)&EP_MEM.cdi_data[64]
     a3e:	8e ee       	ldi	r24, 0xEE	; 238
     a40:	93 e6       	ldi	r25, 0x63	; 99
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:337
    D2PRINTF(" VI=%02X:", _send_count);
    D2PRINTHEX(bit_is_set(GPCONF, GPCONF_DBL_bp)
      ? &EP_MEM.cdi_data[64]
      : &EP_MEM.cdi_data[0], _send_count);
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
      EP_CDI.DATAPTR = bit_is_set(GPCONF, GPCONF_DBL_bp)
     a42:	80 93 7a 64 	sts	0x647A, r24	; 0x80647a <EP_TABLE+0x44>
     a46:	90 93 7b 64 	sts	0x647B, r25	; 0x80647b <EP_TABLE+0x45>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:340
        ? (register16_t)&EP_MEM.cdi_data[64]
        : (register16_t)&EP_MEM.cdi_data[0];
      EP_CDI.CNT = _send_count;
     a4a:	80 91 32 64 	lds	r24, 0x6432	; 0x806432 <_send_count>
     a4e:	90 e0       	ldi	r25, 0x00	; 0
     a50:	80 93 78 64 	sts	0x6478, r24	; 0x806478 <EP_TABLE+0x42>
     a54:	90 93 79 64 	sts	0x6479, r25	; 0x806479 <EP_TABLE+0x43>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:341
      EP_CDI.MCNT = 0;
     a58:	10 92 7c 64 	sts	0x647C, r1	; 0x80647c <EP_TABLE+0x46>
     a5c:	10 92 7d 64 	sts	0x647D, r1	; 0x80647d <EP_TABLE+0x47>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:342
      _send_count = 0;
     a60:	10 92 32 64 	sts	0x6432, r1	; 0x806432 <_send_count>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:343
      GPCONF ^= GPCONF_DBL_bm;
     a64:	8c b3       	in	r24, 0x1c	; 28
     a66:	94 e0       	ldi	r25, 0x04	; 4
     a68:	89 27       	eor	r24, r25
     a6a:	8c bb       	out	0x1c, r24	; 28
__iRestore():
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/tools/avr-gcc/7.3.0-avr8-gnu-toolchain/avr/include/util/atomic.h:70
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     a6c:	2f bf       	out	0x3f, r18	; 63
ep_cdi_listen():
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:345
    }
    loop_until_bit_is_clear(USB0_INTFLAGSB, USB_RMWBUSY_bp);
     a6e:	80 91 0b 0c 	lds	r24, 0x0C0B	; 0x800c0b <__TEXT_REGION_LENGTH__+0x7f0c0b>
     a72:	82 fd       	sbrc	r24, 2
     a74:	fc cf       	rjmp	.-8      	; 0xa6e <USB::ep_cdi_listen()+0x58>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:346
    USB_EP_STATUS_CLR(USB_EP_CDI) = ~USB_TOGGLE_bm;
     a76:	8e ef       	ldi	r24, 0xFE	; 254
     a78:	80 93 4e 0c 	sts	0x0C4E, r24	; 0x800c4e <__TEXT_REGION_LENGTH__+0x7f0c4e>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:347
  }
     a7c:	08 95       	ret

00000a7e <USB::ep_cci_listen()>:
ep_cci_listen():
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:292
    loop_until_bit_is_clear(USB0_INTFLAGSB, USB_RMWBUSY_bp);
    USB_EP_STATUS_CLR(USB_EP_DPO) = ~USB_TOGGLE_bm;
  }

  void ep_cci_listen (void) {
    EP_CCI.CNT = 10;
     a7e:	8a e0       	ldi	r24, 0x0A	; 10
     a80:	90 e0       	ldi	r25, 0x00	; 0
     a82:	80 93 68 64 	sts	0x6468, r24	; 0x806468 <EP_TABLE+0x32>
     a86:	90 93 69 64 	sts	0x6469, r25	; 0x806469 <EP_TABLE+0x33>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:293
    EP_CCI.MCNT = 0;
     a8a:	10 92 6c 64 	sts	0x646C, r1	; 0x80646c <EP_TABLE+0x36>
     a8e:	10 92 6d 64 	sts	0x646D, r1	; 0x80646d <EP_TABLE+0x37>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:294
    loop_until_bit_is_clear(USB0_INTFLAGSB, USB_RMWBUSY_bp);
     a92:	80 91 0b 0c 	lds	r24, 0x0C0B	; 0x800c0b <__TEXT_REGION_LENGTH__+0x7f0c0b>
     a96:	82 fd       	sbrc	r24, 2
     a98:	fc cf       	rjmp	.-8      	; 0xa92 <USB::ep_cci_listen()+0x14>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:295
    USB_EP_STATUS_CLR(USB_EP_CCI) = ~USB_TOGGLE_bm;
     a9a:	8e ef       	ldi	r24, 0xFE	; 254
     a9c:	80 93 4a 0c 	sts	0x0C4A, r24	; 0x800c4a <__TEXT_REGION_LENGTH__+0x7f0c4a>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:296
  }
     aa0:	08 95       	ret

00000aa2 <USB::ep_res_listen()>:
ep_res_listen():
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:273
    loop_until_bit_is_clear(USB0_INTFLAGSB, USB_RMWBUSY_bp);
    USB_EP_STATUS_CLR(USB_EP_REQ) = ~USB_TOGGLE_bm;
  }

  void ep_res_listen (void) {
    EP_RES.MCNT = 0;
     aa2:	10 92 4c 64 	sts	0x644C, r1	; 0x80644c <EP_TABLE+0x16>
     aa6:	10 92 4d 64 	sts	0x644D, r1	; 0x80644d <EP_TABLE+0x17>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:274
    loop_until_bit_is_clear(USB0_INTFLAGSB, USB_RMWBUSY_bp);
     aaa:	80 91 0b 0c 	lds	r24, 0x0C0B	; 0x800c0b <__TEXT_REGION_LENGTH__+0x7f0c0b>
     aae:	82 fd       	sbrc	r24, 2
     ab0:	fc cf       	rjmp	.-8      	; 0xaaa <USB::ep_res_listen()+0x8>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:275
    USB_EP_STATUS_CLR(USB_EP_RES) = ~USB_TOGGLE_bm;
     ab2:	8e ef       	ldi	r24, 0xFE	; 254
     ab4:	80 93 42 0c 	sts	0x0C42, r24	; 0x800c42 <__TEXT_REGION_LENGTH__+0x7f0c42>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:276
  }
     ab8:	08 95       	ret

00000aba <USB::ep_req_listen()>:
ep_req_listen():
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:267
  void ep_cci_pending (void) { loop_until_bit_is_set(EP_CCI.STATUS, USB_BUSNAK_bp); }
  void ep_cdo_pending (void) { loop_until_bit_is_set(EP_CDO.STATUS, USB_BUSNAK_bp); }
  void ep_cdi_pending (void) { loop_until_bit_is_set(EP_CDI.STATUS, USB_BUSNAK_bp); }

  void ep_req_listen (void) {
    EP_REQ.CNT = 0;
     aba:	10 92 40 64 	sts	0x6440, r1	; 0x806440 <EP_TABLE+0xa>
     abe:	10 92 41 64 	sts	0x6441, r1	; 0x806441 <EP_TABLE+0xb>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:268
    loop_until_bit_is_clear(USB0_INTFLAGSB, USB_RMWBUSY_bp);
     ac2:	80 91 0b 0c 	lds	r24, 0x0C0B	; 0x800c0b <__TEXT_REGION_LENGTH__+0x7f0c0b>
     ac6:	82 fd       	sbrc	r24, 2
     ac8:	fc cf       	rjmp	.-8      	; 0xac2 <USB::ep_req_listen()+0x8>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:269
    USB_EP_STATUS_CLR(USB_EP_REQ) = ~USB_TOGGLE_bm;
     aca:	8e ef       	ldi	r24, 0xFE	; 254
     acc:	80 93 40 0c 	sts	0x0C40, r24	; 0x800c40 <__TEXT_REGION_LENGTH__+0x7f0c40>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:270
  }
     ad0:	08 95       	ret

00000ad2 <USART::drain(unsigned int)>:
drain():
/Users/askn/Collaborator/UPDI4AVR-USB/src/usart.cpp:41
    return _baud;
  }

  void drain (size_t _delay) {
    do {
      if (bit_is_set(USART0_STATUS, USART_RXCIF_bp)) {
     ad2:	20 91 04 08 	lds	r18, 0x0804	; 0x800804 <__TEXT_REGION_LENGTH__+0x7f0804>
     ad6:	27 ff       	sbrs	r18, 7
     ad8:	04 c0       	rjmp	.+8      	; 0xae2 <USART::drain(unsigned int)+0x10>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usart.cpp:45
        __asm__ __volatile__ (
          "LDS R0, 0x0801\n"  /* drop USART0_RXDATAH */
          "LDS R0, 0x0800\n"  /* drop USART0_RXDATAL */
        );
     ada:	00 90 01 08 	lds	r0, 0x0801	; 0x800801 <__TEXT_REGION_LENGTH__+0x7f0801>
     ade:	00 90 00 08 	lds	r0, 0x0800	; 0x800800 <__TEXT_REGION_LENGTH__+0x7f0800>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usart.cpp:47
      }
    } while (--_delay);
     ae2:	01 97       	sbiw	r24, 0x01	; 1
     ae4:	b1 f7       	brne	.-20     	; 0xad2 <USART::drain(unsigned int)>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usart.cpp:48
  }
     ae6:	08 95       	ret

00000ae8 <USART::calk_baud_khz(unsigned int)>:
calk_baud_khz():
/Users/askn/Collaborator/UPDI4AVR-USB/src/usart.cpp:33
    pinModeMacro(PIN_PG_TRST, INPUT_PULLUP);  /* USART0_ALT3 or USART0_DEFAULT */
  }

  /*** Calculate the baud rate for VCP asynchronous mode. ***/
  uint16_t calk_baud_khz (uint16_t _khz) {
    uint32_t _baud = ((F_CPU / 1000L * 8L) / _khz + 1) / 2;
     ae8:	9c 01       	movw	r18, r24
     aea:	50 e0       	ldi	r21, 0x00	; 0
     aec:	40 e0       	ldi	r20, 0x00	; 0
     aee:	60 e0       	ldi	r22, 0x00	; 0
     af0:	71 e7       	ldi	r23, 0x71	; 113
     af2:	82 e0       	ldi	r24, 0x02	; 2
     af4:	90 e0       	ldi	r25, 0x00	; 0
     af6:	0e 94 79 24 	call	0x48f2	; 0x48f2 <__divmodsi4>
     afa:	da 01       	movw	r26, r20
     afc:	c9 01       	movw	r24, r18
     afe:	01 96       	adiw	r24, 0x01	; 1
     b00:	a1 1d       	adc	r26, r1
     b02:	b1 1d       	adc	r27, r1
     b04:	b5 95       	asr	r27
     b06:	a7 95       	ror	r26
     b08:	97 95       	ror	r25
     b0a:	87 95       	ror	r24
/Users/askn/Collaborator/UPDI4AVR-USB/src/usart.cpp:34
    if (_baud < 64) _baud = 64;
     b0c:	80 34       	cpi	r24, 0x40	; 64
     b0e:	91 05       	cpc	r25, r1
     b10:	a1 05       	cpc	r26, r1
     b12:	b1 05       	cpc	r27, r1
     b14:	54 f0       	brlt	.+20     	; 0xb2a <USART::calk_baud_khz(unsigned int)+0x42>
     b16:	00 97       	sbiw	r24, 0x00	; 0
     b18:	21 e0       	ldi	r18, 0x01	; 1
     b1a:	a2 07       	cpc	r26, r18
     b1c:	b1 05       	cpc	r27, r1
     b1e:	48 f0       	brcs	.+18     	; 0xb32 <USART::calk_baud_khz(unsigned int)+0x4a>
     b20:	8f ef       	ldi	r24, 0xFF	; 255
     b22:	9f ef       	ldi	r25, 0xFF	; 255
     b24:	a0 e0       	ldi	r26, 0x00	; 0
     b26:	b0 e0       	ldi	r27, 0x00	; 0
     b28:	08 95       	ret
     b2a:	80 e4       	ldi	r24, 0x40	; 64
     b2c:	90 e0       	ldi	r25, 0x00	; 0
     b2e:	a0 e0       	ldi	r26, 0x00	; 0
     b30:	b0 e0       	ldi	r27, 0x00	; 0
/Users/askn/Collaborator/UPDI4AVR-USB/src/usart.cpp:37
    else if (_baud > 0xFFFFU) _baud = 0xFFFF;
    return _baud;
  }
     b32:	08 95       	ret

00000b34 <NVM::V1::prog_init()>:
prog_init():
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv1.cpp:30
 * This file is a template for the future.
 */

namespace NVM::V1 {

  size_t prog_init (void) { return 0; }
     b34:	90 e0       	ldi	r25, 0x00	; 0
     b36:	80 e0       	ldi	r24, 0x00	; 0
     b38:	08 95       	ret

00000b3a <UPDI::recv()>:
recv():
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:72
    send(0x00);
    USART0_BAUD = USART::calk_baud_khz(_xclk);
  }

  bool recv (void) {
    loop_until_bit_is_set(USART0_STATUS, USART_RXCIF_bp);
     b3a:	80 91 04 08 	lds	r24, 0x0804	; 0x800804 <__TEXT_REGION_LENGTH__+0x7f0804>
     b3e:	87 ff       	sbrs	r24, 7
     b40:	fc cf       	rjmp	.-8      	; 0xb3a <UPDI::recv()>
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:73
    RXSTAT = USART0_RXDATAH ^ 0x80;
     b42:	80 91 01 08 	lds	r24, 0x0801	; 0x800801 <__TEXT_REGION_LENGTH__+0x7f0801>
     b46:	80 58       	subi	r24, 0x80	; 128
     b48:	8e bb       	out	0x1e, r24	; 30
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:74
    RXDATA = USART0_RXDATAL;
     b4a:	80 91 00 08 	lds	r24, 0x0800	; 0x800800 <__TEXT_REGION_LENGTH__+0x7f0800>
     b4e:	8f bb       	out	0x1f, r24	; 31
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:75
    return RXSTAT == 0 || send_break();
     b50:	8e b3       	in	r24, 0x1e	; 30
     b52:	88 23       	and	r24, r24
     b54:	11 f1       	breq	.+68     	; 0xb9a <UPDI::recv()+0x60>
send_break():
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:57
    0x55, 0x04        /* LD,ST PTR++ DATA1,2 */
  };

  bool send_break (void) {
    D2PRINTF("<BRK>");
    USART0_BAUD = USART0_BAUD + (USART0_BAUD >> 2);
     b56:	20 91 08 08 	lds	r18, 0x0808	; 0x800808 <__TEXT_REGION_LENGTH__+0x7f0808>
     b5a:	30 91 09 08 	lds	r19, 0x0809	; 0x800809 <__TEXT_REGION_LENGTH__+0x7f0809>
     b5e:	80 91 08 08 	lds	r24, 0x0808	; 0x800808 <__TEXT_REGION_LENGTH__+0x7f0808>
     b62:	90 91 09 08 	lds	r25, 0x0809	; 0x800809 <__TEXT_REGION_LENGTH__+0x7f0809>
     b66:	96 95       	lsr	r25
     b68:	87 95       	ror	r24
     b6a:	96 95       	lsr	r25
     b6c:	87 95       	ror	r24
     b6e:	82 0f       	add	r24, r18
     b70:	93 1f       	adc	r25, r19
     b72:	80 93 08 08 	sts	0x0808, r24	; 0x800808 <__TEXT_REGION_LENGTH__+0x7f0808>
     b76:	90 93 09 08 	sts	0x0809, r25	; 0x800809 <__TEXT_REGION_LENGTH__+0x7f0809>
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:58
    send(0x00);
     b7a:	80 e0       	ldi	r24, 0x00	; 0
     b7c:	10 d0       	rcall	.+32     	; 0xb9e <UPDI::send(unsigned char)>
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:59
    USART0_BAUD = USART::calk_baud_khz(_xclk);
     b7e:	80 91 18 60 	lds	r24, 0x6018	; 0x806018 <_xclk>
     b82:	90 91 19 60 	lds	r25, 0x6019	; 0x806019 <_xclk+0x1>
     b86:	b0 df       	rcall	.-160    	; 0xae8 <USART::calk_baud_khz(unsigned int)>
     b88:	80 93 08 08 	sts	0x0808, r24	; 0x800808 <__TEXT_REGION_LENGTH__+0x7f0808>
     b8c:	90 93 09 08 	sts	0x0809, r25	; 0x800809 <__TEXT_REGION_LENGTH__+0x7f0809>
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:60
    USART::drain();
     b90:	90 e0       	ldi	r25, 0x00	; 0
     b92:	80 e0       	ldi	r24, 0x00	; 0
     b94:	9e df       	rcall	.-196    	; 0xad2 <USART::drain(unsigned int)>
     b96:	80 e0       	ldi	r24, 0x00	; 0
     b98:	08 95       	ret
recv():
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:75

  bool recv (void) {
    loop_until_bit_is_set(USART0_STATUS, USART_RXCIF_bp);
    RXSTAT = USART0_RXDATAH ^ 0x80;
    RXDATA = USART0_RXDATAL;
    return RXSTAT == 0 || send_break();
     b9a:	81 e0       	ldi	r24, 0x01	; 1
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:76
  }
     b9c:	08 95       	ret

00000b9e <UPDI::send(unsigned char)>:
send():
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:90

  bool is_ack (void) {
    return recv() && 0x40 == RXDATA;
  }

  bool send (const uint8_t _data) {
     b9e:	cf 93       	push	r28
     ba0:	c8 2f       	mov	r28, r24
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:91
    loop_until_bit_is_set(USART0_STATUS, USART_DREIF_bp);
     ba2:	80 91 04 08 	lds	r24, 0x0804	; 0x800804 <__TEXT_REGION_LENGTH__+0x7f0804>
     ba6:	85 ff       	sbrs	r24, 5
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:92
    USART0_TXDATAL = _data;
     ba8:	fc cf       	rjmp	.-8      	; 0xba2 <UPDI::send(unsigned char)+0x4>
     baa:	c0 93 02 08 	sts	0x0802, r28	; 0x800802 <__TEXT_REGION_LENGTH__+0x7f0802>
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:93
    return recv() && _data == RXDATA;
     bae:	c5 df       	rcall	.-118    	; 0xb3a <UPDI::recv()>
     bb0:	88 23       	and	r24, r24
     bb2:	21 f0       	breq	.+8      	; 0xbbc <UPDI::send(unsigned char)+0x1e>
     bb4:	9f b3       	in	r25, 0x1f	; 31
     bb6:	81 e0       	ldi	r24, 0x01	; 1
     bb8:	9c 13       	cpse	r25, r28
     bba:	80 e0       	ldi	r24, 0x00	; 0
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:94
  }
     bbc:	cf 91       	pop	r28
     bbe:	08 95       	ret

00000bc0 <UPDI::send_bytes(unsigned char const*, unsigned int)>:
send_bytes():
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:96

  bool send_bytes (const uint8_t* _data, size_t _len) {
     bc0:	0f 93       	push	r16
     bc2:	1f 93       	push	r17
     bc4:	cf 93       	push	r28
     bc6:	df 93       	push	r29
     bc8:	eb 01       	movw	r28, r22
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:98
    do {
      if (!send(*_data++)) return false;
     bca:	8c 01       	movw	r16, r24
     bcc:	f8 01       	movw	r30, r16
     bce:	81 91       	ld	r24, Z+
     bd0:	8f 01       	movw	r16, r30
     bd2:	e5 df       	rcall	.-54     	; 0xb9e <UPDI::send(unsigned char)>
     bd4:	88 23       	and	r24, r24
     bd6:	11 f0       	breq	.+4      	; 0xbdc <UPDI::send_bytes(unsigned char const*, unsigned int)+0x1c>
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:99
    } while (--_len);
     bd8:	21 97       	sbiw	r28, 0x01	; 1
     bda:	c1 f7       	brne	.-16     	; 0xbcc <UPDI::send_bytes(unsigned char const*, unsigned int)+0xc>
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:101
    return true;
  }
     bdc:	df 91       	pop	r29
     bde:	cf 91       	pop	r28
     be0:	1f 91       	pop	r17
     be2:	0f 91       	pop	r16
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:214
    return send_bytes(_key_stat, 2) && recv();
  }

  bool sys_status (void) {
    const static uint8_t _sys_stat[] = {0x55, 0x8B};
    return send_bytes(_sys_stat, 2) && recv();
     be4:	08 95       	ret

00000be6 <UPDI::sys_status()>:
sys_status():
     be6:	62 e0       	ldi	r22, 0x02	; 2
     be8:	70 e0       	ldi	r23, 0x00	; 0
     bea:	81 e4       	ldi	r24, 0x41	; 65
     bec:	90 e6       	ldi	r25, 0x60	; 96
     bee:	e8 df       	rcall	.-48     	; 0xbc0 <UPDI::send_bytes(unsigned char const*, unsigned int)>
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:110
  bool recv_byte (uint32_t _dwAddr) {
    static uint8_t _set_ptr[] = {
      0x55, 0x08, 0, 0, 0, 0  /* LDS ADDR3 DATA1 */
    };
    _CAPS32(_set_ptr[2])->dword = _dwAddr;
    return send_bytes(_set_ptr, 5) && recv();
     bf0:	81 11       	cpse	r24, r1
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:215
  }

  bool sys_status (void) {
    const static uint8_t _sys_stat[] = {0x55, 0x8B};
    return send_bytes(_sys_stat, 2) && recv();
  }
     bf2:	a3 cf       	rjmp	.-186    	; 0xb3a <UPDI::recv()>
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:209
    return send_byte(0x1000, _nvmcmd);  /* NVMCTRL_CTRLA */
  }

  bool key_status (void) {
    const static uint8_t _key_stat[] = {0x55, 0x87};
    return send_bytes(_key_stat, 2) && recv();
     bf4:	80 e0       	ldi	r24, 0x00	; 0
     bf6:	08 95       	ret

00000bf8 <UPDI::key_status()>:
key_status():
     bf8:	62 e0       	ldi	r22, 0x02	; 2
     bfa:	70 e0       	ldi	r23, 0x00	; 0
     bfc:	8f e3       	ldi	r24, 0x3F	; 63
     bfe:	90 e6       	ldi	r25, 0x60	; 96
     c00:	df df       	rcall	.-66     	; 0xbc0 <UPDI::send_bytes(unsigned char const*, unsigned int)>
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:110
  bool recv_byte (uint32_t _dwAddr) {
    static uint8_t _set_ptr[] = {
      0x55, 0x08, 0, 0, 0, 0  /* LDS ADDR3 DATA1 */
    };
    _CAPS32(_set_ptr[2])->dword = _dwAddr;
    return send_bytes(_set_ptr, 5) && recv();
     c02:	81 11       	cpse	r24, r1
     c04:	9a cf       	rjmp	.-204    	; 0xb3a <UPDI::recv()>
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:210
  }

  bool key_status (void) {
    const static uint8_t _key_stat[] = {0x55, 0x87};
    return send_bytes(_key_stat, 2) && recv();
  }
     c06:	80 e0       	ldi	r24, 0x00	; 0
     c08:	08 95       	ret

00000c0a <UPDI::recv_byte(unsigned long)>:
recv_byte():
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:109
  /* The acquired data is stored in RXDATA.    */
  bool recv_byte (uint32_t _dwAddr) {
    static uint8_t _set_ptr[] = {
      0x55, 0x08, 0, 0, 0, 0  /* LDS ADDR3 DATA1 */
    };
    _CAPS32(_set_ptr[2])->dword = _dwAddr;
     c0a:	60 93 03 60 	sts	0x6003, r22	; 0x806003 <UPDI::recv_byte(unsigned long)::_set_ptr+0x2>
     c0e:	70 93 04 60 	sts	0x6004, r23	; 0x806004 <UPDI::recv_byte(unsigned long)::_set_ptr+0x3>
     c12:	80 93 05 60 	sts	0x6005, r24	; 0x806005 <UPDI::recv_byte(unsigned long)::_set_ptr+0x4>
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:110
    return send_bytes(_set_ptr, 5) && recv();
     c16:	90 93 06 60 	sts	0x6006, r25	; 0x806006 <UPDI::recv_byte(unsigned long)::_set_ptr+0x5>
     c1a:	65 e0       	ldi	r22, 0x05	; 5
     c1c:	70 e0       	ldi	r23, 0x00	; 0
     c1e:	81 e0       	ldi	r24, 0x01	; 1
     c20:	90 e6       	ldi	r25, 0x60	; 96
     c22:	ce df       	rcall	.-100    	; 0xbc0 <UPDI::send_bytes(unsigned char const*, unsigned int)>
     c24:	81 11       	cpse	r24, r1
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:111
  }
     c26:	89 cf       	rjmp	.-238    	; 0xb3a <UPDI::recv()>
     c28:	80 e0       	ldi	r24, 0x00	; 0
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:87
    } while (--_len);
    return true;
  }

  bool is_ack (void) {
    return recv() && 0x40 == RXDATA;
     c2a:	08 95       	ret

00000c2c <UPDI::is_ack()>:
is_ack():
     c2c:	86 df       	rcall	.-244    	; 0xb3a <UPDI::recv()>
     c2e:	88 23       	and	r24, r24
     c30:	29 f0       	breq	.+10     	; 0xc3c <UPDI::is_ack()+0x10>
     c32:	9f b3       	in	r25, 0x1f	; 31
     c34:	81 e0       	ldi	r24, 0x01	; 1
     c36:	90 34       	cpi	r25, 0x40	; 64
     c38:	09 f0       	breq	.+2      	; 0xc3c <UPDI::is_ack()+0x10>
     c3a:	80 e0       	ldi	r24, 0x00	; 0
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:88
  }
     c3c:	08 95       	ret

00000c3e <UPDI::send_words_block(unsigned long, unsigned int)>:
send_words_block():
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:177
      && send_bytes(_set_repeat, sizeof(_set_repeat))
      && send_bytes(&packet.out.memData[0], _wLength)
      && clear_rsd();
  }

  bool send_words_block (uint32_t _dwAddr, size_t _wLength) {
     c3e:	cf 93       	push	r28
     c40:	df 93       	push	r29
     c42:	ea 01       	movw	r28, r20
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:180
    /* This function works in word units up to 256 words, */
    /* and will round down any fractional words.          */
    _CAPS32(_set_ptr24[2])->dword = _dwAddr;
     c44:	60 93 14 60 	sts	0x6014, r22	; 0x806014 <UPDI::_set_ptr24+0x2>
     c48:	70 93 15 60 	sts	0x6015, r23	; 0x806015 <UPDI::_set_ptr24+0x3>
     c4c:	80 93 16 60 	sts	0x6016, r24	; 0x806016 <UPDI::_set_ptr24+0x4>
     c50:	90 93 17 60 	sts	0x6017, r25	; 0x806017 <UPDI::_set_ptr24+0x5>
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:181
    _set_repeat[2] = (_wLength >> 1) - 1;
     c54:	ca 01       	movw	r24, r20
     c56:	96 95       	lsr	r25
     c58:	87 95       	ror	r24
     c5a:	81 50       	subi	r24, 0x01	; 1
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:182
    _set_repeat[4] = 0x65;  /* ST PTR++ DATA2 */
     c5c:	80 93 0f 60 	sts	0x600F, r24	; 0x80600f <UPDI::_set_repeat+0x2>
     c60:	85 e6       	ldi	r24, 0x65	; 101
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:183
    return send_bytes(_set_ptr24, 5)
     c62:	80 93 11 60 	sts	0x6011, r24	; 0x806011 <UPDI::_set_repeat+0x4>
     c66:	65 e0       	ldi	r22, 0x05	; 5
     c68:	70 e0       	ldi	r23, 0x00	; 0
     c6a:	82 e1       	ldi	r24, 0x12	; 18
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:188
      && is_ack()
      && set_rsd()
      && send_bytes(_set_repeat, sizeof(_set_repeat))
      && send_bytes(&packet.out.memData[0], _wLength & ~1)
      && clear_rsd();
     c6c:	90 e6       	ldi	r25, 0x60	; 96
     c6e:	a8 df       	rcall	.-176    	; 0xbc0 <UPDI::send_bytes(unsigned char const*, unsigned int)>
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:184
    /* and will round down any fractional words.          */
    _CAPS32(_set_ptr24[2])->dword = _dwAddr;
    _set_repeat[2] = (_wLength >> 1) - 1;
    _set_repeat[4] = 0x65;  /* ST PTR++ DATA2 */
    return send_bytes(_set_ptr24, 5)
      && is_ack()
     c70:	88 23       	and	r24, r24
     c72:	f9 f0       	breq	.+62     	; 0xcb2 <UPDI::send_words_block(unsigned long, unsigned int)+0x74>
     c74:	db df       	rcall	.-74     	; 0xc2c <UPDI::is_ack()>
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:135
    return send_bytes(_reset, _leave ? 9 : 6);
  }

  bool set_rsd (void) {
    const static uint8_t _set_rsd[] = {0x55, 0xC2, 0x0D};
    return send_bytes(_set_rsd, 3);
     c76:	88 23       	and	r24, r24
     c78:	e1 f0       	breq	.+56     	; 0xcb2 <UPDI::send_words_block(unsigned long, unsigned int)+0x74>
set_rsd():
     c7a:	63 e0       	ldi	r22, 0x03	; 3
     c7c:	70 e0       	ldi	r23, 0x00	; 0
     c7e:	89 e3       	ldi	r24, 0x39	; 57
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:185
    _CAPS32(_set_ptr24[2])->dword = _dwAddr;
    _set_repeat[2] = (_wLength >> 1) - 1;
    _set_repeat[4] = 0x65;  /* ST PTR++ DATA2 */
    return send_bytes(_set_ptr24, 5)
      && is_ack()
      && set_rsd()
     c80:	90 e6       	ldi	r25, 0x60	; 96
     c82:	9e df       	rcall	.-196    	; 0xbc0 <UPDI::send_bytes(unsigned char const*, unsigned int)>
send_words_block():
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:186
      && send_bytes(_set_repeat, sizeof(_set_repeat))
     c84:	88 23       	and	r24, r24
     c86:	a9 f0       	breq	.+42     	; 0xcb2 <UPDI::send_words_block(unsigned long, unsigned int)+0x74>
     c88:	65 e0       	ldi	r22, 0x05	; 5
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	8d e0       	ldi	r24, 0x0D	; 13
     c8e:	90 e6       	ldi	r25, 0x60	; 96
     c90:	97 df       	rcall	.-210    	; 0xbc0 <UPDI::send_bytes(unsigned char const*, unsigned int)>
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:187
      && send_bytes(&packet.out.memData[0], _wLength & ~1)
     c92:	88 23       	and	r24, r24
     c94:	71 f0       	breq	.+28     	; 0xcb2 <UPDI::send_words_block(unsigned long, unsigned int)+0x74>
     c96:	be 01       	movw	r22, r28
     c98:	6e 7f       	andi	r22, 0xFE	; 254
     c9a:	8f ed       	ldi	r24, 0xDF	; 223
     c9c:	90 e6       	ldi	r25, 0x60	; 96
     c9e:	90 df       	rcall	.-224    	; 0xbc0 <UPDI::send_bytes(unsigned char const*, unsigned int)>
     ca0:	88 23       	and	r24, r24
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:140
    return send_bytes(_set_rsd, 3);
  }

  bool clear_rsd (void) {
    const static uint8_t _clear_rsd[] = {0x55, 0xC2, 0x05};
    return send_bytes(_clear_rsd, 3);
     ca2:	39 f0       	breq	.+14     	; 0xcb2 <UPDI::send_words_block(unsigned long, unsigned int)+0x74>
clear_rsd():
     ca4:	63 e0       	ldi	r22, 0x03	; 3
     ca6:	70 e0       	ldi	r23, 0x00	; 0
     ca8:	8c e3       	ldi	r24, 0x3C	; 60
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:189
      && is_ack()
      && set_rsd()
      && send_bytes(_set_repeat, sizeof(_set_repeat))
      && send_bytes(&packet.out.memData[0], _wLength & ~1)
      && clear_rsd();
  }
     caa:	90 e6       	ldi	r25, 0x60	; 96
send_words_block():
     cac:	df 91       	pop	r29
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:140
    return send_bytes(_set_rsd, 3);
  }

  bool clear_rsd (void) {
    const static uint8_t _clear_rsd[] = {0x55, 0xC2, 0x05};
    return send_bytes(_clear_rsd, 3);
     cae:	cf 91       	pop	r28
clear_rsd():
     cb0:	87 cf       	rjmp	.-242    	; 0xbc0 <UPDI::send_bytes(unsigned char const*, unsigned int)>
send_words_block():
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:189
      && is_ack()
      && set_rsd()
      && send_bytes(_set_repeat, sizeof(_set_repeat))
      && send_bytes(&packet.out.memData[0], _wLength & ~1)
      && clear_rsd();
  }
     cb2:	80 e0       	ldi	r24, 0x00	; 0
     cb4:	df 91       	pop	r29
     cb6:	cf 91       	pop	r28
     cb8:	08 95       	ret

00000cba <UPDI::send_bytes_block(unsigned long, unsigned int)>:
send_bytes_block():
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:165
      && is_ack()
      && send_bytes(_set_repeat, sizeof(_set_repeat))
      && recv_bytes(&packet.in.data[0], _wLength & ~1);
  }

  bool send_bytes_block (uint32_t _dwAddr, size_t _wLength) {
     cba:	cf 93       	push	r28
     cbc:	df 93       	push	r29
     cbe:	ea 01       	movw	r28, r20
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:166
    _CAPS32(_set_ptr24[2])->dword = _dwAddr;
     cc0:	60 93 14 60 	sts	0x6014, r22	; 0x806014 <UPDI::_set_ptr24+0x2>
     cc4:	70 93 15 60 	sts	0x6015, r23	; 0x806015 <UPDI::_set_ptr24+0x3>
     cc8:	80 93 16 60 	sts	0x6016, r24	; 0x806016 <UPDI::_set_ptr24+0x4>
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:167
    _set_repeat[2] = _wLength - 1;
     ccc:	90 93 17 60 	sts	0x6017, r25	; 0x806017 <UPDI::_set_ptr24+0x5>
     cd0:	8f ef       	ldi	r24, 0xFF	; 255
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:168
    _set_repeat[4] = 0x64;  /* ST PTR++ DATA1 */
     cd2:	84 0f       	add	r24, r20
     cd4:	80 93 0f 60 	sts	0x600F, r24	; 0x80600f <UPDI::_set_repeat+0x2>
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:169
    return send_bytes(_set_ptr24, 5)
     cd8:	84 e6       	ldi	r24, 0x64	; 100
     cda:	80 93 11 60 	sts	0x6011, r24	; 0x806011 <UPDI::_set_repeat+0x4>
     cde:	65 e0       	ldi	r22, 0x05	; 5
     ce0:	70 e0       	ldi	r23, 0x00	; 0
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:174
      && is_ack()
      && set_rsd()
      && send_bytes(_set_repeat, sizeof(_set_repeat))
      && send_bytes(&packet.out.memData[0], _wLength)
      && clear_rsd();
     ce2:	82 e1       	ldi	r24, 0x12	; 18
     ce4:	90 e6       	ldi	r25, 0x60	; 96
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:170
  bool send_bytes_block (uint32_t _dwAddr, size_t _wLength) {
    _CAPS32(_set_ptr24[2])->dword = _dwAddr;
    _set_repeat[2] = _wLength - 1;
    _set_repeat[4] = 0x64;  /* ST PTR++ DATA1 */
    return send_bytes(_set_ptr24, 5)
      && is_ack()
     ce6:	6c df       	rcall	.-296    	; 0xbc0 <UPDI::send_bytes(unsigned char const*, unsigned int)>
     ce8:	88 23       	and	r24, r24
     cea:	f1 f0       	breq	.+60     	; 0xd28 <UPDI::send_bytes_block(unsigned long, unsigned int)+0x6e>
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:135
    return send_bytes(_reset, _leave ? 9 : 6);
  }

  bool set_rsd (void) {
    const static uint8_t _set_rsd[] = {0x55, 0xC2, 0x0D};
    return send_bytes(_set_rsd, 3);
     cec:	9f df       	rcall	.-194    	; 0xc2c <UPDI::is_ack()>
     cee:	88 23       	and	r24, r24
     cf0:	d9 f0       	breq	.+54     	; 0xd28 <UPDI::send_bytes_block(unsigned long, unsigned int)+0x6e>
set_rsd():
     cf2:	63 e0       	ldi	r22, 0x03	; 3
     cf4:	70 e0       	ldi	r23, 0x00	; 0
     cf6:	89 e3       	ldi	r24, 0x39	; 57
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:171
    _CAPS32(_set_ptr24[2])->dword = _dwAddr;
    _set_repeat[2] = _wLength - 1;
    _set_repeat[4] = 0x64;  /* ST PTR++ DATA1 */
    return send_bytes(_set_ptr24, 5)
      && is_ack()
      && set_rsd()
     cf8:	90 e6       	ldi	r25, 0x60	; 96
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:172
      && send_bytes(_set_repeat, sizeof(_set_repeat))
     cfa:	62 df       	rcall	.-316    	; 0xbc0 <UPDI::send_bytes(unsigned char const*, unsigned int)>
send_bytes_block():
     cfc:	88 23       	and	r24, r24
     cfe:	a1 f0       	breq	.+40     	; 0xd28 <UPDI::send_bytes_block(unsigned long, unsigned int)+0x6e>
     d00:	65 e0       	ldi	r22, 0x05	; 5
     d02:	70 e0       	ldi	r23, 0x00	; 0
     d04:	8d e0       	ldi	r24, 0x0D	; 13
     d06:	90 e6       	ldi	r25, 0x60	; 96
     d08:	5b df       	rcall	.-330    	; 0xbc0 <UPDI::send_bytes(unsigned char const*, unsigned int)>
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:173
      && send_bytes(&packet.out.memData[0], _wLength)
     d0a:	88 23       	and	r24, r24
     d0c:	69 f0       	breq	.+26     	; 0xd28 <UPDI::send_bytes_block(unsigned long, unsigned int)+0x6e>
     d0e:	be 01       	movw	r22, r28
     d10:	8f ed       	ldi	r24, 0xDF	; 223
     d12:	90 e6       	ldi	r25, 0x60	; 96
     d14:	55 df       	rcall	.-342    	; 0xbc0 <UPDI::send_bytes(unsigned char const*, unsigned int)>
     d16:	88 23       	and	r24, r24
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:140
    return send_bytes(_set_rsd, 3);
  }

  bool clear_rsd (void) {
    const static uint8_t _clear_rsd[] = {0x55, 0xC2, 0x05};
    return send_bytes(_clear_rsd, 3);
     d18:	39 f0       	breq	.+14     	; 0xd28 <UPDI::send_bytes_block(unsigned long, unsigned int)+0x6e>
clear_rsd():
     d1a:	63 e0       	ldi	r22, 0x03	; 3
     d1c:	70 e0       	ldi	r23, 0x00	; 0
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:175
      && is_ack()
      && set_rsd()
      && send_bytes(_set_repeat, sizeof(_set_repeat))
      && send_bytes(&packet.out.memData[0], _wLength)
      && clear_rsd();
  }
     d1e:	8c e3       	ldi	r24, 0x3C	; 60
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:140
    return send_bytes(_set_rsd, 3);
  }

  bool clear_rsd (void) {
    const static uint8_t _clear_rsd[] = {0x55, 0xC2, 0x05};
    return send_bytes(_clear_rsd, 3);
     d20:	90 e6       	ldi	r25, 0x60	; 96
send_bytes_block():
     d22:	df 91       	pop	r29
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:175
      && is_ack()
      && set_rsd()
      && send_bytes(_set_repeat, sizeof(_set_repeat))
      && send_bytes(&packet.out.memData[0], _wLength)
      && clear_rsd();
  }
     d24:	cf 91       	pop	r28
clear_rsd():
     d26:	4c cf       	rjmp	.-360    	; 0xbc0 <UPDI::send_bytes(unsigned char const*, unsigned int)>
send_bytes_block():
     d28:	80 e0       	ldi	r24, 0x00	; 0
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:113
    };
    _CAPS32(_set_ptr[2])->dword = _dwAddr;
    return send_bytes(_set_ptr, 5) && recv();
  }

  bool send_byte (uint32_t _dwAddr, uint8_t _data) {
     d2a:	df 91       	pop	r29
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:117
    static uint8_t _set_ptr[] = {
      0x55, 0x48, 0, 0, 0, 0  /* STS ADDR3 DATA1 */
    };
    _CAPS32(_set_ptr[2])->dword = _dwAddr;
     d2c:	cf 91       	pop	r28
     d2e:	08 95       	ret

00000d30 <UPDI::send_byte(unsigned long, unsigned char)>:
send_byte():
     d30:	cf 93       	push	r28
     d32:	c4 2f       	mov	r28, r20
     d34:	60 93 09 60 	sts	0x6009, r22	; 0x806009 <UPDI::send_byte(unsigned long, unsigned char)::_set_ptr+0x2>
     d38:	70 93 0a 60 	sts	0x600A, r23	; 0x80600a <UPDI::send_byte(unsigned long, unsigned char)::_set_ptr+0x3>
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:118
    return send_bytes(_set_ptr, 5)
     d3c:	80 93 0b 60 	sts	0x600B, r24	; 0x80600b <UPDI::send_byte(unsigned long, unsigned char)::_set_ptr+0x4>
     d40:	90 93 0c 60 	sts	0x600C, r25	; 0x80600c <UPDI::send_byte(unsigned long, unsigned char)::_set_ptr+0x5>
     d44:	65 e0       	ldi	r22, 0x05	; 5
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:121
      && is_ack()
      && send(_data)
      && is_ack();
     d46:	70 e0       	ldi	r23, 0x00	; 0
     d48:	87 e0       	ldi	r24, 0x07	; 7
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:119
    static uint8_t _set_ptr[] = {
      0x55, 0x48, 0, 0, 0, 0  /* STS ADDR3 DATA1 */
    };
    _CAPS32(_set_ptr[2])->dword = _dwAddr;
    return send_bytes(_set_ptr, 5)
      && is_ack()
     d4a:	90 e6       	ldi	r25, 0x60	; 96
     d4c:	39 df       	rcall	.-398    	; 0xbc0 <UPDI::send_bytes(unsigned char const*, unsigned int)>
     d4e:	88 23       	and	r24, r24
     d50:	49 f0       	breq	.+18     	; 0xd64 <UPDI::send_byte(unsigned long, unsigned char)+0x34>
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:120
      && send(_data)
     d52:	6c df       	rcall	.-296    	; 0xc2c <UPDI::is_ack()>
     d54:	88 23       	and	r24, r24
     d56:	31 f0       	breq	.+12     	; 0xd64 <UPDI::send_byte(unsigned long, unsigned char)+0x34>
     d58:	8c 2f       	mov	r24, r28
     d5a:	21 df       	rcall	.-446    	; 0xb9e <UPDI::send(unsigned char)>
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:122
      && is_ack();
  }
     d5c:	88 23       	and	r24, r24
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:121
    };
    _CAPS32(_set_ptr[2])->dword = _dwAddr;
    return send_bytes(_set_ptr, 5)
      && is_ack()
      && send(_data)
      && is_ack();
     d5e:	11 f0       	breq	.+4      	; 0xd64 <UPDI::send_byte(unsigned long, unsigned char)+0x34>
     d60:	cf 91       	pop	r28
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:122
  }
     d62:	64 cf       	rjmp	.-312    	; 0xc2c <UPDI::is_ack()>
     d64:	80 e0       	ldi	r24, 0x00	; 0
     d66:	cf 91       	pop	r28
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:204
    /* This slow process is due to USERROW and BOOTROW. */
    return send_bytes_data(_dwAddr, &packet.out.memData[0], _wLength);
  }

  bool nvm_ctrl (uint8_t _nvmcmd) {
    return send_byte(0x1000, _nvmcmd);  /* NVMCTRL_CTRLA */
     d68:	08 95       	ret

00000d6a <UPDI::nvm_ctrl(unsigned char)>:
nvm_ctrl():
     d6a:	48 2f       	mov	r20, r24
     d6c:	60 e0       	ldi	r22, 0x00	; 0
     d6e:	70 e1       	ldi	r23, 0x10	; 16
     d70:	80 e0       	ldi	r24, 0x00	; 0
     d72:	90 e0       	ldi	r25, 0x00	; 0
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:198
      if (!send_byte(_dwAddr++, *_data++)) return false;
    }
    return true;
  }

  bool send_bytes_block_slow (uint32_t _dwAddr, size_t _wLength) {
     d74:	dd cf       	rjmp	.-70     	; 0xd30 <UPDI::send_byte(unsigned long, unsigned char)>

00000d76 <UPDI::send_bytes_block_slow(unsigned long, unsigned int)>:
send_bytes_block_slow():
     d76:	cf 92       	push	r12
     d78:	df 92       	push	r13
     d7a:	ef 92       	push	r14
     d7c:	ff 92       	push	r15
     d7e:	0f 93       	push	r16
     d80:	1f 93       	push	r17
     d82:	cf 93       	push	r28
     d84:	df 93       	push	r29
     d86:	ce ec       	ldi	r28, 0xCE	; 206
     d88:	d0 e6       	ldi	r29, 0x60	; 96
     d8a:	8a 01       	movw	r16, r20
     d8c:	02 53       	subi	r16, 0x32	; 50
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:192
      && send_bytes(&packet.out.memData[0], _wLength & ~1)
      && clear_rsd();
  }

  bool send_bytes_data (uint32_t _dwAddr, uint8_t* _data, size_t _wLength) {
    for (size_t _i = 0; _i < _wLength; _i++) {
     d8e:	1f 49       	sbci	r17, 0x9F	; 159
send_bytes_data():
     d90:	c0 17       	cp	r28, r16
     d92:	d1 07       	cpc	r29, r17
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:193
      if (!send_byte(_dwAddr++, *_data++)) return false;
     d94:	c1 f0       	breq	.+48     	; 0xdc6 <UPDI::send_bytes_block_slow(unsigned long, unsigned int)+0x50>
     d96:	6b 01       	movw	r12, r22
     d98:	7c 01       	movw	r14, r24
     d9a:	2f ef       	ldi	r18, 0xFF	; 255
     d9c:	c2 1a       	sub	r12, r18
     d9e:	d2 0a       	sbc	r13, r18
     da0:	e2 0a       	sbc	r14, r18
     da2:	f2 0a       	sbc	r15, r18
     da4:	49 89       	ldd	r20, Y+17	; 0x11
     da6:	c4 df       	rcall	.-120    	; 0xd30 <UPDI::send_byte(unsigned long, unsigned char)>
     da8:	21 96       	adiw	r28, 0x01	; 1
     daa:	81 11       	cpse	r24, r1
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:201
  }

  bool send_bytes_block_slow (uint32_t _dwAddr, size_t _wLength) {
    /* This slow process is due to USERROW and BOOTROW. */
    return send_bytes_data(_dwAddr, &packet.out.memData[0], _wLength);
  }
     dac:	09 c0       	rjmp	.+18     	; 0xdc0 <UPDI::send_bytes_block_slow(unsigned long, unsigned int)+0x4a>
send_bytes_block_slow():
     dae:	df 91       	pop	r29
     db0:	cf 91       	pop	r28
     db2:	1f 91       	pop	r17
     db4:	0f 91       	pop	r16
     db6:	ff 90       	pop	r15
     db8:	ef 90       	pop	r14
     dba:	df 90       	pop	r13
     dbc:	cf 90       	pop	r12
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:193
      && clear_rsd();
  }

  bool send_bytes_data (uint32_t _dwAddr, uint8_t* _data, size_t _wLength) {
    for (size_t _i = 0; _i < _wLength; _i++) {
      if (!send_byte(_dwAddr++, *_data++)) return false;
     dbe:	08 95       	ret
     dc0:	c7 01       	movw	r24, r14
     dc2:	b6 01       	movw	r22, r12
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:195
    }
    return true;
     dc4:	e5 cf       	rjmp	.-54     	; 0xd90 <UPDI::send_bytes_block_slow(unsigned long, unsigned int)+0x1a>
     dc6:	81 e0       	ldi	r24, 0x01	; 1
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:78
    RXSTAT = USART0_RXDATAH ^ 0x80;
    RXDATA = USART0_RXDATAL;
    return RXSTAT == 0 || send_break();
  }

  bool recv_bytes (uint8_t* _data, size_t _len) {
     dc8:	f2 cf       	rjmp	.-28     	; 0xdae <UPDI::send_bytes_block_slow(unsigned long, unsigned int)+0x38>

00000dca <UPDI::recv_bytes(unsigned char*, unsigned int)>:
recv_bytes():
     dca:	0f 93       	push	r16
     dcc:	1f 93       	push	r17
     dce:	cf 93       	push	r28
     dd0:	df 93       	push	r29
     dd2:	eb 01       	movw	r28, r22
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:80
    do {
      if (!recv()) return false;
     dd4:	8c 01       	movw	r16, r24
     dd6:	b1 de       	rcall	.-670    	; 0xb3a <UPDI::recv()>
     dd8:	88 23       	and	r24, r24
     dda:	31 f0       	breq	.+12     	; 0xde8 <UPDI::recv_bytes(unsigned char*, unsigned int)+0x1e>
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:81
      *_data++ = RXDATA;
     ddc:	9f b3       	in	r25, 0x1f	; 31
     dde:	f8 01       	movw	r30, r16
     de0:	91 93       	st	Z+, r25
     de2:	8f 01       	movw	r16, r30
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:82
    } while (--_len);
     de4:	21 97       	sbiw	r28, 0x01	; 1
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:84
    return true;
  }
     de6:	b9 f7       	brne	.-18     	; 0xdd6 <UPDI::recv_bytes(unsigned char*, unsigned int)+0xc>
     de8:	df 91       	pop	r29
     dea:	cf 91       	pop	r28
     dec:	1f 91       	pop	r17
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:153
      && is_ack()
      && send_bytes(_set_repeat, sizeof(_set_repeat))
      && recv_bytes(&packet.in.data[0], _wLength);
  }

  bool recv_words_block (uint32_t _dwAddr, size_t _wLength) {
     dee:	0f 91       	pop	r16
     df0:	08 95       	ret

00000df2 <UPDI::recv_words_block(unsigned long, unsigned int)>:
recv_words_block():
     df2:	cf 93       	push	r28
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:156
    /* This function works in word units up to 256 words, */
    /* and will round down any fractional words.          */
    _CAPS32(_set_ptr24[2])->dword = _dwAddr;
     df4:	df 93       	push	r29
     df6:	ea 01       	movw	r28, r20
     df8:	60 93 14 60 	sts	0x6014, r22	; 0x806014 <UPDI::_set_ptr24+0x2>
     dfc:	70 93 15 60 	sts	0x6015, r23	; 0x806015 <UPDI::_set_ptr24+0x3>
     e00:	80 93 16 60 	sts	0x6016, r24	; 0x806016 <UPDI::_set_ptr24+0x4>
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:157
    _set_repeat[2] = (_wLength >> 1) - 1;
     e04:	90 93 17 60 	sts	0x6017, r25	; 0x806017 <UPDI::_set_ptr24+0x5>
     e08:	ca 01       	movw	r24, r20
     e0a:	96 95       	lsr	r25
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:158
    _set_repeat[4] = 0x25;  /* LD PTR++ DATA2 */
     e0c:	87 95       	ror	r24
     e0e:	81 50       	subi	r24, 0x01	; 1
     e10:	80 93 0f 60 	sts	0x600F, r24	; 0x80600f <UPDI::_set_repeat+0x2>
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:159
    return send_bytes(_set_ptr24, 5)
     e14:	85 e2       	ldi	r24, 0x25	; 37
     e16:	80 93 11 60 	sts	0x6011, r24	; 0x806011 <UPDI::_set_repeat+0x4>
     e1a:	65 e0       	ldi	r22, 0x05	; 5
     e1c:	70 e0       	ldi	r23, 0x00	; 0
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:162
      && is_ack()
      && send_bytes(_set_repeat, sizeof(_set_repeat))
      && recv_bytes(&packet.in.data[0], _wLength & ~1);
     e1e:	82 e1       	ldi	r24, 0x12	; 18
     e20:	90 e6       	ldi	r25, 0x60	; 96
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:160
    /* and will round down any fractional words.          */
    _CAPS32(_set_ptr24[2])->dword = _dwAddr;
    _set_repeat[2] = (_wLength >> 1) - 1;
    _set_repeat[4] = 0x25;  /* LD PTR++ DATA2 */
    return send_bytes(_set_ptr24, 5)
      && is_ack()
     e22:	ce de       	rcall	.-612    	; 0xbc0 <UPDI::send_bytes(unsigned char const*, unsigned int)>
     e24:	88 23       	and	r24, r24
     e26:	89 f0       	breq	.+34     	; 0xe4a <UPDI::recv_words_block(unsigned long, unsigned int)+0x58>
     e28:	01 df       	rcall	.-510    	; 0xc2c <UPDI::is_ack()>
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:161
      && send_bytes(_set_repeat, sizeof(_set_repeat))
     e2a:	88 23       	and	r24, r24
     e2c:	71 f0       	breq	.+28     	; 0xe4a <UPDI::recv_words_block(unsigned long, unsigned int)+0x58>
     e2e:	65 e0       	ldi	r22, 0x05	; 5
     e30:	70 e0       	ldi	r23, 0x00	; 0
     e32:	8d e0       	ldi	r24, 0x0D	; 13
     e34:	90 e6       	ldi	r25, 0x60	; 96
     e36:	c4 de       	rcall	.-632    	; 0xbc0 <UPDI::send_bytes(unsigned char const*, unsigned int)>
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:162
      && recv_bytes(&packet.in.data[0], _wLength & ~1);
     e38:	88 23       	and	r24, r24
     e3a:	39 f0       	breq	.+14     	; 0xe4a <UPDI::recv_words_block(unsigned long, unsigned int)+0x58>
     e3c:	be 01       	movw	r22, r28
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:163
  }
     e3e:	6e 7f       	andi	r22, 0xFE	; 254
     e40:	85 ed       	ldi	r24, 0xD5	; 213
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:162
    _set_repeat[2] = (_wLength >> 1) - 1;
    _set_repeat[4] = 0x25;  /* LD PTR++ DATA2 */
    return send_bytes(_set_ptr24, 5)
      && is_ack()
      && send_bytes(_set_repeat, sizeof(_set_repeat))
      && recv_bytes(&packet.in.data[0], _wLength & ~1);
     e42:	90 e6       	ldi	r25, 0x60	; 96
     e44:	df 91       	pop	r29
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:163
  }
     e46:	cf 91       	pop	r28
     e48:	c0 cf       	rjmp	.-128    	; 0xdca <UPDI::recv_bytes(unsigned char*, unsigned int)>
     e4a:	80 e0       	ldi	r24, 0x00	; 0
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:143
  bool clear_rsd (void) {
    const static uint8_t _clear_rsd[] = {0x55, 0xC2, 0x05};
    return send_bytes(_clear_rsd, 3);
  }

  bool recv_bytes_block (uint32_t _dwAddr, size_t _wLength) {
     e4c:	df 91       	pop	r29
     e4e:	cf 91       	pop	r28
     e50:	08 95       	ret

00000e52 <UPDI::recv_bytes_block(unsigned long, unsigned int)>:
recv_bytes_block():
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:144
    _CAPS32(_set_ptr24[2])->dword = _dwAddr;
     e52:	cf 93       	push	r28
     e54:	df 93       	push	r29
     e56:	ea 01       	movw	r28, r20
     e58:	60 93 14 60 	sts	0x6014, r22	; 0x806014 <UPDI::_set_ptr24+0x2>
     e5c:	70 93 15 60 	sts	0x6015, r23	; 0x806015 <UPDI::_set_ptr24+0x3>
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:145
    _set_repeat[2] = _wLength - 1;
     e60:	80 93 16 60 	sts	0x6016, r24	; 0x806016 <UPDI::_set_ptr24+0x4>
     e64:	90 93 17 60 	sts	0x6017, r25	; 0x806017 <UPDI::_set_ptr24+0x5>
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:146
    _set_repeat[4] = 0x24;  /* LD PTR++ DATA1 */
     e68:	8f ef       	ldi	r24, 0xFF	; 255
     e6a:	84 0f       	add	r24, r20
     e6c:	80 93 0f 60 	sts	0x600F, r24	; 0x80600f <UPDI::_set_repeat+0x2>
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:147
    return send_bytes(_set_ptr24, 5)
     e70:	84 e2       	ldi	r24, 0x24	; 36
     e72:	80 93 11 60 	sts	0x6011, r24	; 0x806011 <UPDI::_set_repeat+0x4>
     e76:	65 e0       	ldi	r22, 0x05	; 5
     e78:	70 e0       	ldi	r23, 0x00	; 0
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:150
      && is_ack()
      && send_bytes(_set_repeat, sizeof(_set_repeat))
      && recv_bytes(&packet.in.data[0], _wLength);
     e7a:	82 e1       	ldi	r24, 0x12	; 18
     e7c:	90 e6       	ldi	r25, 0x60	; 96
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:148
  bool recv_bytes_block (uint32_t _dwAddr, size_t _wLength) {
    _CAPS32(_set_ptr24[2])->dword = _dwAddr;
    _set_repeat[2] = _wLength - 1;
    _set_repeat[4] = 0x24;  /* LD PTR++ DATA1 */
    return send_bytes(_set_ptr24, 5)
      && is_ack()
     e7e:	a0 de       	rcall	.-704    	; 0xbc0 <UPDI::send_bytes(unsigned char const*, unsigned int)>
     e80:	88 23       	and	r24, r24
     e82:	81 f0       	breq	.+32     	; 0xea4 <UPDI::recv_bytes_block(unsigned long, unsigned int)+0x52>
     e84:	d3 de       	rcall	.-602    	; 0xc2c <UPDI::is_ack()>
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:149
      && send_bytes(_set_repeat, sizeof(_set_repeat))
     e86:	88 23       	and	r24, r24
     e88:	69 f0       	breq	.+26     	; 0xea4 <UPDI::recv_bytes_block(unsigned long, unsigned int)+0x52>
     e8a:	65 e0       	ldi	r22, 0x05	; 5
     e8c:	70 e0       	ldi	r23, 0x00	; 0
     e8e:	8d e0       	ldi	r24, 0x0D	; 13
     e90:	90 e6       	ldi	r25, 0x60	; 96
     e92:	96 de       	rcall	.-724    	; 0xbc0 <UPDI::send_bytes(unsigned char const*, unsigned int)>
     e94:	88 23       	and	r24, r24
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:150
      && recv_bytes(&packet.in.data[0], _wLength);
     e96:	31 f0       	breq	.+12     	; 0xea4 <UPDI::recv_bytes_block(unsigned long, unsigned int)+0x52>
     e98:	be 01       	movw	r22, r28
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:151
  }
     e9a:	85 ed       	ldi	r24, 0xD5	; 213
     e9c:	90 e6       	ldi	r25, 0x60	; 96
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:150
    _set_repeat[2] = _wLength - 1;
    _set_repeat[4] = 0x24;  /* LD PTR++ DATA1 */
    return send_bytes(_set_ptr24, 5)
      && is_ack()
      && send_bytes(_set_repeat, sizeof(_set_repeat))
      && recv_bytes(&packet.in.data[0], _wLength);
     e9e:	df 91       	pop	r29
     ea0:	cf 91       	pop	r28
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:151
  }
     ea2:	93 cf       	rjmp	.-218    	; 0xdca <UPDI::recv_bytes(unsigned char*, unsigned int)>
     ea4:	80 e0       	ldi	r24, 0x00	; 0
     ea6:	df 91       	pop	r29
     ea8:	cf 91       	pop	r28
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv4.cpp:119

  size_t prog_init (void) {
    return nvm_ctrl_change(0x00);
  }

  size_t read_memory (void) {
     eaa:	08 95       	ret

00000eac <NVM::V4::read_memory()>:
read_memory():
     eac:	cf 93       	push	r28
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv4.cpp:123
    uint8_t   m_type = packet.out.bMType;
    uint32_t _dwAddr = packet.out.dwAddr;
    size_t  _wLength = packet.out.dwLength;
    if (bit_is_set(PGCONF, PGCONF_PROG_bp)) {
     eae:	df 93       	push	r29
     eb0:	e9 99       	sbic	0x1d, 1	; 29
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv4.cpp:136
        _dwAddr = PROD_SIG + ((uint8_t)_dwAddr & 0x7F);
      }
      if (UPDI::recv_bytes_block(_dwAddr, _wLength))
        return _wLength + 1;
    }
    return 0;
     eb2:	05 c0       	rjmp	.+10     	; 0xebe <NVM::V4::read_memory()+0x12>
     eb4:	90 e0       	ldi	r25, 0x00	; 0
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv4.cpp:137
  }
     eb6:	80 e0       	ldi	r24, 0x00	; 0
     eb8:	df 91       	pop	r29
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv4.cpp:120
  size_t prog_init (void) {
    return nvm_ctrl_change(0x00);
  }

  size_t read_memory (void) {
    uint8_t   m_type = packet.out.bMType;
     eba:	cf 91       	pop	r28
     ebc:	08 95       	ret
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv4.cpp:121
    uint32_t _dwAddr = packet.out.dwAddr;
     ebe:	20 91 d5 60 	lds	r18, 0x60D5	; 0x8060d5 <packet+0x7>
     ec2:	60 91 d6 60 	lds	r22, 0x60D6	; 0x8060d6 <packet+0x8>
     ec6:	70 91 d7 60 	lds	r23, 0x60D7	; 0x8060d7 <packet+0x9>
     eca:	80 91 d8 60 	lds	r24, 0x60D8	; 0x8060d8 <packet+0xa>
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv4.cpp:122
    size_t  _wLength = packet.out.dwLength;
     ece:	90 91 d9 60 	lds	r25, 0x60D9	; 0x8060d9 <packet+0xb>
     ed2:	c0 91 da 60 	lds	r28, 0x60DA	; 0x8060da <packet+0xc>
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv4.cpp:124
    if (bit_is_set(PGCONF, PGCONF_PROG_bp)) {
      if (m_type == 0xB0) {
     ed6:	d0 91 db 60 	lds	r29, 0x60DB	; 0x8060db <packet+0xd>
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv4.cpp:126
        /* MTYPE_FLASH_PAGE (PROGMEM) */
        _dwAddr += PROG_START;
     eda:	20 3b       	cpi	r18, 0xB0	; 176
     edc:	49 f4       	brne	.+18     	; 0xef0 <NVM::V4::read_memory()+0x44>
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv4.cpp:127
        return UPDI::recv_words_block(_dwAddr, _wLength) ? _wLength + 1 : 0;
     ede:	80 58       	subi	r24, 0x80	; 128
     ee0:	9f 4f       	sbci	r25, 0xFF	; 255
     ee2:	ae 01       	movw	r20, r28
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv4.cpp:133
      }
      if (m_type == 0xB4) {
        /* MTYPE_SIGN_JTAG */
        _dwAddr = PROD_SIG + ((uint8_t)_dwAddr & 0x7F);
      }
      if (UPDI::recv_bytes_block(_dwAddr, _wLength))
     ee4:	86 df       	rcall	.-244    	; 0xdf2 <UPDI::recv_words_block(unsigned long, unsigned int)>
     ee6:	88 23       	and	r24, r24
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv4.cpp:134
        return _wLength + 1;
     ee8:	29 f3       	breq	.-54     	; 0xeb4 <NVM::V4::read_memory()+0x8>
     eea:	ce 01       	movw	r24, r28
     eec:	01 96       	adiw	r24, 0x01	; 1
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv4.cpp:129
      if (m_type == 0xB0) {
        /* MTYPE_FLASH_PAGE (PROGMEM) */
        _dwAddr += PROG_START;
        return UPDI::recv_words_block(_dwAddr, _wLength) ? _wLength + 1 : 0;
      }
      if (m_type == 0xB4) {
     eee:	e4 cf       	rjmp	.-56     	; 0xeb8 <NVM::V4::read_memory()+0xc>
     ef0:	24 3b       	cpi	r18, 0xB4	; 180
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv4.cpp:131
        /* MTYPE_SIGN_JTAG */
        _dwAddr = PROD_SIG + ((uint8_t)_dwAddr & 0x7F);
     ef2:	41 f4       	brne	.+16     	; 0xf04 <NVM::V4::read_memory()+0x58>
     ef4:	6f 77       	andi	r22, 0x7F	; 127
     ef6:	70 e0       	ldi	r23, 0x00	; 0
     ef8:	60 58       	subi	r22, 0x80	; 128
     efa:	7f 4e       	sbci	r23, 0xEF	; 239
     efc:	07 2e       	mov	r0, r23
     efe:	00 0c       	add	r0, r0
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv4.cpp:133
      }
      if (UPDI::recv_bytes_block(_dwAddr, _wLength))
     f00:	88 0b       	sbc	r24, r24
     f02:	99 0b       	sbc	r25, r25
     f04:	ae 01       	movw	r20, r28
     f06:	a5 df       	rcall	.-182    	; 0xe52 <UPDI::recv_bytes_block(unsigned long, unsigned int)>
     f08:	ee cf       	rjmp	.-36     	; 0xee6 <NVM::V4::read_memory()+0x3a>

00000f0a <NVM::V5::read_memory()>:
_ZN3NVM2V511read_memoryEv():
     f0a:	d0 cf       	rjmp	.-96     	; 0xeac <NVM::V4::read_memory()>

00000f0c <NVM::V2::read_memory()>:
read_memory():
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv2.cpp:116

  size_t prog_init (void) {
    return nvm_ctrl_change(0x00);
  }

  size_t read_memory (void) {
     f0c:	cf 93       	push	r28
     f0e:	df 93       	push	r29
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv2.cpp:120
    uint8_t   m_type = packet.out.bMType;
    uint32_t _dwAddr = packet.out.dwAddr;
    size_t  _wLength = packet.out.dwLength;
    if (bit_is_set(PGCONF, PGCONF_PROG_bp)) {
     f10:	e9 99       	sbic	0x1d, 1	; 29
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv2.cpp:133
        _dwAddr = PROD_SIG + ((uint8_t)_dwAddr & 0x7F);
      }
      if (UPDI::recv_bytes_block(_dwAddr, _wLength))
        return _wLength + 1;
    }
    return 0;
     f12:	05 c0       	rjmp	.+10     	; 0xf1e <NVM::V2::read_memory()+0x12>
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv2.cpp:134
  }
     f14:	90 e0       	ldi	r25, 0x00	; 0
     f16:	80 e0       	ldi	r24, 0x00	; 0
     f18:	df 91       	pop	r29
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv2.cpp:117
  size_t prog_init (void) {
    return nvm_ctrl_change(0x00);
  }

  size_t read_memory (void) {
    uint8_t   m_type = packet.out.bMType;
     f1a:	cf 91       	pop	r28
     f1c:	08 95       	ret
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv2.cpp:118
    uint32_t _dwAddr = packet.out.dwAddr;
     f1e:	20 91 d5 60 	lds	r18, 0x60D5	; 0x8060d5 <packet+0x7>
     f22:	60 91 d6 60 	lds	r22, 0x60D6	; 0x8060d6 <packet+0x8>
     f26:	70 91 d7 60 	lds	r23, 0x60D7	; 0x8060d7 <packet+0x9>
     f2a:	80 91 d8 60 	lds	r24, 0x60D8	; 0x8060d8 <packet+0xa>
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv2.cpp:119
    size_t  _wLength = packet.out.dwLength;
     f2e:	90 91 d9 60 	lds	r25, 0x60D9	; 0x8060d9 <packet+0xb>
     f32:	c0 91 da 60 	lds	r28, 0x60DA	; 0x8060da <packet+0xc>
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv2.cpp:121
    if (bit_is_set(PGCONF, PGCONF_PROG_bp)) {
      if (m_type == 0xB0) {
     f36:	d0 91 db 60 	lds	r29, 0x60DB	; 0x8060db <packet+0xd>
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv2.cpp:123
        /* MTYPE_FLASH_PAGE (PROGMEM) */
        _dwAddr += PROG_START;
     f3a:	20 3b       	cpi	r18, 0xB0	; 176
     f3c:	49 f4       	brne	.+18     	; 0xf50 <NVM::V2::read_memory()+0x44>
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv2.cpp:124
        return UPDI::recv_words_block(_dwAddr, _wLength) ? _wLength + 1 : 0;
     f3e:	80 58       	subi	r24, 0x80	; 128
     f40:	9f 4f       	sbci	r25, 0xFF	; 255
     f42:	ae 01       	movw	r20, r28
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv2.cpp:130
      }
      if (m_type == 0xB4) {
        /* MTYPE_SIGN_JTAG */
        _dwAddr = PROD_SIG + ((uint8_t)_dwAddr & 0x7F);
      }
      if (UPDI::recv_bytes_block(_dwAddr, _wLength))
     f44:	56 df       	rcall	.-340    	; 0xdf2 <UPDI::recv_words_block(unsigned long, unsigned int)>
     f46:	88 23       	and	r24, r24
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv2.cpp:131
        return _wLength + 1;
     f48:	29 f3       	breq	.-54     	; 0xf14 <NVM::V2::read_memory()+0x8>
     f4a:	ce 01       	movw	r24, r28
     f4c:	01 96       	adiw	r24, 0x01	; 1
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv2.cpp:126
      if (m_type == 0xB0) {
        /* MTYPE_FLASH_PAGE (PROGMEM) */
        _dwAddr += PROG_START;
        return UPDI::recv_words_block(_dwAddr, _wLength) ? _wLength + 1 : 0;
      }
      if (m_type == 0xB4) {
     f4e:	e4 cf       	rjmp	.-56     	; 0xf18 <NVM::V2::read_memory()+0xc>
     f50:	24 3b       	cpi	r18, 0xB4	; 180
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv2.cpp:128
        /* MTYPE_SIGN_JTAG */
        _dwAddr = PROD_SIG + ((uint8_t)_dwAddr & 0x7F);
     f52:	39 f4       	brne	.+14     	; 0xf62 <NVM::V2::read_memory()+0x56>
     f54:	6f 77       	andi	r22, 0x7F	; 127
     f56:	70 e0       	ldi	r23, 0x00	; 0
     f58:	7f 5e       	subi	r23, 0xEF	; 239
     f5a:	07 2e       	mov	r0, r23
     f5c:	00 0c       	add	r0, r0
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv2.cpp:130
      }
      if (UPDI::recv_bytes_block(_dwAddr, _wLength))
     f5e:	88 0b       	sbc	r24, r24
     f60:	99 0b       	sbc	r25, r25
     f62:	ae 01       	movw	r20, r28
     f64:	76 df       	rcall	.-276    	; 0xe52 <UPDI::recv_bytes_block(unsigned long, unsigned int)>
     f66:	ef cf       	rjmp	.-34     	; 0xf46 <NVM::V2::read_memory()+0x3a>

00000f68 <NVM::V3::read_memory()>:
_ZN3NVM2V311read_memoryEv():
     f68:	d1 cf       	rjmp	.-94     	; 0xf0c <NVM::V2::read_memory()>

00000f6a <NVM::V0::read_memory()>:
read_memory():
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv0.cpp:114
    UPDI::nvm_ctrl(0x04);         /* NVM_CMD_PBC */
    nvm_wait();
    return UPDI::nvm_ctrl(0x00);
  }

  size_t read_memory (void) {
     f6a:	cf 93       	push	r28
     f6c:	df 93       	push	r29
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv0.cpp:115
    uint8_t  m_type = packet.out.bMType;
     f6e:	80 91 d5 60 	lds	r24, 0x60D5	; 0x8060d5 <packet+0x7>
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv0.cpp:116
    uint16_t _wAddr = packet.out.dwAddr;
     f72:	60 91 d6 60 	lds	r22, 0x60D6	; 0x8060d6 <packet+0x8>
     f76:	30 91 d7 60 	lds	r19, 0x60D7	; 0x8060d7 <packet+0x9>
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv0.cpp:118
    size_t _wLength = packet.out.dwLength;
    if (m_type == 0xB4) {
     f7a:	84 3b       	cpi	r24, 0xB4	; 180
     f7c:	51 f4       	brne	.+20     	; 0xf92 <NVM::V0::read_memory()+0x28>
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv0.cpp:120
      /* MTYPE_SIGN_JTAG */
      _wAddr = PROD_SIG + ((uint8_t)_wAddr & 0x7F);
     f7e:	6f 77       	andi	r22, 0x7F	; 127
     f80:	70 e0       	ldi	r23, 0x00	; 0
     f82:	7f 5e       	subi	r23, 0xEF	; 239
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv0.cpp:127
    else if (m_type == 0xB0) {
      /* MTYPE_FLASH_PAGE (PROGMEM) */
      _wAddr += Device_Descriptor.UPDI.prog_base;
    }
    if (bit_is_set(PGCONF, PGCONF_PROG_bp)
     && UPDI::recv_bytes_block(_wAddr, _wLength))
     f84:	e9 99       	sbic	0x1d, 1	; 29
     f86:	0f c0       	rjmp	.+30     	; 0xfa6 <NVM::V0::read_memory()+0x3c>
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv0.cpp:129
      return _wLength + 1;
    return 0;
     f88:	90 e0       	ldi	r25, 0x00	; 0
     f8a:	80 e0       	ldi	r24, 0x00	; 0
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv0.cpp:130
  }
     f8c:	df 91       	pop	r29
     f8e:	cf 91       	pop	r28
     f90:	08 95       	ret
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv0.cpp:116
    return UPDI::nvm_ctrl(0x00);
  }

  size_t read_memory (void) {
    uint8_t  m_type = packet.out.bMType;
    uint16_t _wAddr = packet.out.dwAddr;
     f92:	73 2f       	mov	r23, r19
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv0.cpp:122
    size_t _wLength = packet.out.dwLength;
    if (m_type == 0xB4) {
      /* MTYPE_SIGN_JTAG */
      _wAddr = PROD_SIG + ((uint8_t)_wAddr & 0x7F);
    }
    else if (m_type == 0xB0) {
     f94:	80 3b       	cpi	r24, 0xB0	; 176
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv0.cpp:124
      /* MTYPE_FLASH_PAGE (PROGMEM) */
      _wAddr += Device_Descriptor.UPDI.prog_base;
     f96:	b1 f7       	brne	.-20     	; 0xf84 <NVM::V0::read_memory()+0x1a>
     f98:	80 91 9e 60 	lds	r24, 0x609E	; 0x80609e <Device_Descriptor>
     f9c:	90 91 9f 60 	lds	r25, 0x609F	; 0x80609f <Device_Descriptor+0x1>
     fa0:	68 0f       	add	r22, r24
     fa2:	79 1f       	adc	r23, r25
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv0.cpp:117
  }

  size_t read_memory (void) {
    uint8_t  m_type = packet.out.bMType;
    uint16_t _wAddr = packet.out.dwAddr;
    size_t _wLength = packet.out.dwLength;
     fa4:	ef cf       	rjmp	.-34     	; 0xf84 <NVM::V0::read_memory()+0x1a>
     fa6:	c0 91 da 60 	lds	r28, 0x60DA	; 0x8060da <packet+0xc>
     faa:	d0 91 db 60 	lds	r29, 0x60DB	; 0x8060db <packet+0xd>
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv0.cpp:127
    else if (m_type == 0xB0) {
      /* MTYPE_FLASH_PAGE (PROGMEM) */
      _wAddr += Device_Descriptor.UPDI.prog_base;
    }
    if (bit_is_set(PGCONF, PGCONF_PROG_bp)
     && UPDI::recv_bytes_block(_wAddr, _wLength))
     fae:	90 e0       	ldi	r25, 0x00	; 0
     fb0:	80 e0       	ldi	r24, 0x00	; 0
     fb2:	ae 01       	movw	r20, r28
     fb4:	4e df       	rcall	.-356    	; 0xe52 <UPDI::recv_bytes_block(unsigned long, unsigned int)>
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv0.cpp:128
      return _wLength + 1;
     fb6:	88 23       	and	r24, r24
     fb8:	39 f3       	breq	.-50     	; 0xf88 <NVM::V0::read_memory()+0x1e>
     fba:	ce 01       	movw	r24, r28
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:50
      loop_until_bit_is_clear(TCLK_IN, TCLK_bp);
    }
  }

  bool recv (void) {
    loop_until_bit_is_set(USART0_STATUS, USART_RXCIF_bp);
     fbc:	01 96       	adiw	r24, 0x01	; 1
     fbe:	e6 cf       	rjmp	.-52     	; 0xf8c <NVM::V0::read_memory()+0x22>

00000fc0 <TPI::recv()>:
recv():
     fc0:	80 91 04 08 	lds	r24, 0x0804	; 0x800804 <__TEXT_REGION_LENGTH__+0x7f0804>
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:51
    RXSTAT = USART0_RXDATAH ^ 0x80;
     fc4:	87 ff       	sbrs	r24, 7
     fc6:	fc cf       	rjmp	.-8      	; 0xfc0 <TPI::recv()>
     fc8:	80 91 01 08 	lds	r24, 0x0801	; 0x800801 <__TEXT_REGION_LENGTH__+0x7f0801>
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:52
    RXDATA = USART0_RXDATAL;
     fcc:	80 58       	subi	r24, 0x80	; 128
     fce:	8e bb       	out	0x1e, r24	; 30
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:53
    return RXSTAT == 0;
     fd0:	80 91 00 08 	lds	r24, 0x0800	; 0x800800 <__TEXT_REGION_LENGTH__+0x7f0800>
     fd4:	8f bb       	out	0x1f, r24	; 31
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:54
  }
     fd6:	9e b3       	in	r25, 0x1e	; 30
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:56

  bool send (const uint8_t _data) {
     fd8:	81 e0       	ldi	r24, 0x01	; 1
     fda:	91 11       	cpse	r25, r1
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:57
    loop_until_bit_is_set(USART0_STATUS, USART_DREIF_bp);
     fdc:	80 e0       	ldi	r24, 0x00	; 0
     fde:	08 95       	ret

00000fe0 <TPI::send(unsigned char)>:
send():
     fe0:	cf 93       	push	r28
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:58
    USART0_TXDATAL = _data;
     fe2:	c8 2f       	mov	r28, r24
     fe4:	80 91 04 08 	lds	r24, 0x0804	; 0x800804 <__TEXT_REGION_LENGTH__+0x7f0804>
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:59
    return (recv() && _data == RXDATA);
     fe8:	85 ff       	sbrs	r24, 5
     fea:	fc cf       	rjmp	.-8      	; 0xfe4 <TPI::send(unsigned char)+0x4>
     fec:	c0 93 02 08 	sts	0x0802, r28	; 0x800802 <__TEXT_REGION_LENGTH__+0x7f0802>
     ff0:	e7 df       	rcall	.-50     	; 0xfc0 <TPI::recv()>
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:60
  }
     ff2:	88 23       	and	r24, r24
     ff4:	21 f0       	breq	.+8      	; 0xffe <TPI::send(unsigned char)+0x1e>
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:99
  bool nvm_wait (void) {
    while (get_sin(0x62) && RXDATA);  /* NVMCSR_REG: IO=0x32 */
    return true;
  }

  bool nvm_ctrl (const uint8_t _nvmcmd) {
     ff6:	9f b3       	in	r25, 0x1f	; 31
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:73
  bool set_sstcs (const uint8_t _addr, const uint8_t _data) {
    return (send(0xC0 | _addr) && send(_data));
  }

  bool set_sout (const uint8_t _addr, const uint8_t _data) {
    return (send(0x90 | _addr) && send(_data));
     ff8:	81 e0       	ldi	r24, 0x01	; 1
     ffa:	9c 13       	cpse	r25, r28
     ffc:	80 e0       	ldi	r24, 0x00	; 0
     ffe:	cf 91       	pop	r28
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:69
  bool get_sldcs (const uint8_t _addr) {
    return (send(0x80 | _addr) && recv());
  }

  bool set_sstcs (const uint8_t _addr, const uint8_t _data) {
    return (send(0xC0 | _addr) && send(_data));
    1000:	08 95       	ret

00001002 <TPI::nvm_ctrl(unsigned char)>:
nvm_ctrl():
    1002:	cf 93       	push	r28
    1004:	c8 2f       	mov	r28, r24
set_sout():
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:101
    return true;
  }

  bool nvm_ctrl (const uint8_t _nvmcmd) {
    return set_sout(0x63, _nvmcmd);   /* NVMCMD_REG: IO=0x33 */
  }
    1006:	83 ef       	ldi	r24, 0xF3	; 243
    1008:	eb df       	rcall	.-42     	; 0xfe0 <TPI::send(unsigned char)>
    100a:	88 23       	and	r24, r24
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:77
  bool set_sout (const uint8_t _addr, const uint8_t _data) {
    return (send(0x90 | _addr) && send(_data));
  }

  bool get_sin (const uint8_t _addr) {
    return (send(0x10 | _addr) && recv());
    100c:	19 f0       	breq	.+6      	; 0x1014 <TPI::nvm_ctrl(unsigned char)+0x12>
    100e:	8c 2f       	mov	r24, r28
nvm_ctrl():
    1010:	cf 91       	pop	r28
set_sout():
    1012:	e6 cf       	rjmp	.-52     	; 0xfe0 <TPI::send(unsigned char)>
nvm_ctrl():
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:65
  }

  /*** TPI control and CSS area command ***/

  bool get_sldcs (const uint8_t _addr) {
    return (send(0x80 | _addr) && recv());
    1014:	80 e0       	ldi	r24, 0x00	; 0
    1016:	cf 91       	pop	r28
    1018:	08 95       	ret

0000101a <TPI::nvm_wait()>:
get_sin():
    101a:	82 e7       	ldi	r24, 0x72	; 114
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:95
  }

  /*** NVM control ****/

  bool nvm_wait (void) {
    while (get_sin(0x62) && RXDATA);  /* NVMCSR_REG: IO=0x32 */
    101c:	e1 df       	rcall	.-62     	; 0xfe0 <TPI::send(unsigned char)>
    101e:	88 23       	and	r24, r24
    1020:	31 f0       	breq	.+12     	; 0x102e <TPI::nvm_wait()+0x14>
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:97
    return true;
  }
    1022:	ce df       	rcall	.-100    	; 0xfc0 <TPI::recv()>
    1024:	88 23       	and	r24, r24
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:88

  bool get_sld (void) {
    return (send(0x24) && recv());
  }

  bool set_sst (const uint8_t _data) {
    1026:	19 f0       	breq	.+6      	; 0x102e <TPI::nvm_wait()+0x14>
nvm_wait():
    1028:	8f b3       	in	r24, 0x1f	; 31
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:89
    return (send(0x64) && send(_data));
    102a:	81 11       	cpse	r24, r1
    102c:	f6 cf       	rjmp	.-20     	; 0x101a <TPI::nvm_wait()>
    102e:	81 e0       	ldi	r24, 0x01	; 1
    1030:	08 95       	ret

00001032 <TPI::set_sst(unsigned char)>:
set_sst():
    1032:	cf 93       	push	r28
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:69
  bool get_sldcs (const uint8_t _addr) {
    return (send(0x80 | _addr) && recv());
  }

  bool set_sstcs (const uint8_t _addr, const uint8_t _data) {
    return (send(0xC0 | _addr) && send(_data));
    1034:	c8 2f       	mov	r28, r24
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:90
    return (send(0x24) && recv());
  }

  bool set_sst (const uint8_t _data) {
    return (send(0x64) && send(_data));
  }
    1036:	84 e6       	ldi	r24, 0x64	; 100
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:69
  bool get_sldcs (const uint8_t _addr) {
    return (send(0x80 | _addr) && recv());
  }

  bool set_sstcs (const uint8_t _addr, const uint8_t _data) {
    return (send(0xC0 | _addr) && send(_data));
    1038:	d3 df       	rcall	.-90     	; 0xfe0 <TPI::send(unsigned char)>
    103a:	88 23       	and	r24, r24
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:90
    return (send(0x24) && recv());
  }

  bool set_sst (const uint8_t _data) {
    return (send(0x64) && send(_data));
  }
    103c:	19 f0       	breq	.+6      	; 0x1044 <TPI::set_sst(unsigned char)+0x12>
    103e:	8c 2f       	mov	r24, r28
    1040:	cf 91       	pop	r28
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:85
  bool set_sstpr (const uint16_t _addr) {
    return (send(0x68) && send(_addr & 0xFF) && send(0x69) && send(_addr >> 8));
  }

  bool get_sld (void) {
    return (send(0x24) && recv());
    1042:	ce cf       	rjmp	.-100    	; 0xfe0 <TPI::send(unsigned char)>
    1044:	80 e0       	ldi	r24, 0x00	; 0
    1046:	cf 91       	pop	r28
    1048:	08 95       	ret

0000104a <TPI::get_sld()>:
get_sld():
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:65
  }

  /*** TPI control and CSS area command ***/

  bool get_sldcs (const uint8_t _addr) {
    return (send(0x80 | _addr) && recv());
    104a:	84 e2       	ldi	r24, 0x24	; 36
    104c:	c9 df       	rcall	.-110    	; 0xfe0 <TPI::send(unsigned char)>
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:86
    return (send(0x68) && send(_addr & 0xFF) && send(0x69) && send(_addr >> 8));
  }

  bool get_sld (void) {
    return (send(0x24) && recv());
  }
    104e:	81 11       	cpse	r24, r1
    1050:	b7 cf       	rjmp	.-146    	; 0xfc0 <TPI::recv()>
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:80

  bool get_sin (const uint8_t _addr) {
    return (send(0x10 | _addr) && recv());
  }

  bool set_sstpr (const uint16_t _addr) {
    1052:	80 e0       	ldi	r24, 0x00	; 0
    1054:	08 95       	ret

00001056 <TPI::set_sstpr(unsigned int)>:
set_sstpr():
    1056:	cf 93       	push	r28
    1058:	df 93       	push	r29
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:81
    return (send(0x68) && send(_addr & 0xFF) && send(0x69) && send(_addr >> 8));
    105a:	d8 2f       	mov	r29, r24
    105c:	c9 2f       	mov	r28, r25
    105e:	88 e6       	ldi	r24, 0x68	; 104
    1060:	bf df       	rcall	.-130    	; 0xfe0 <TPI::send(unsigned char)>
    1062:	88 23       	and	r24, r24
    1064:	61 f0       	breq	.+24     	; 0x107e <TPI::set_sstpr(unsigned int)+0x28>
    1066:	8d 2f       	mov	r24, r29
    1068:	bb df       	rcall	.-138    	; 0xfe0 <TPI::send(unsigned char)>
    106a:	88 23       	and	r24, r24
    106c:	41 f0       	breq	.+16     	; 0x107e <TPI::set_sstpr(unsigned int)+0x28>
    106e:	89 e6       	ldi	r24, 0x69	; 105
    1070:	b7 df       	rcall	.-146    	; 0xfe0 <TPI::send(unsigned char)>
    1072:	88 23       	and	r24, r24
    1074:	21 f0       	breq	.+8      	; 0x107e <TPI::set_sstpr(unsigned int)+0x28>
    1076:	8c 2f       	mov	r24, r28
    1078:	df 91       	pop	r29
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:82
  }
    107a:	cf 91       	pop	r28
    107c:	b1 cf       	rjmp	.-158    	; 0xfe0 <TPI::send(unsigned char)>
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:81
  bool get_sin (const uint8_t _addr) {
    return (send(0x10 | _addr) && recv());
  }

  bool set_sstpr (const uint16_t _addr) {
    return (send(0x68) && send(_addr & 0xFF) && send(0x69) && send(_addr >> 8));
    107e:	80 e0       	ldi	r24, 0x00	; 0
    1080:	df 91       	pop	r29
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:82
  }
    1082:	cf 91       	pop	r28
    1084:	08 95       	ret

00001086 <TPI::idle_clock(unsigned int)>:
idle_clock():
    1086:	30 e0       	ldi	r19, 0x00	; 0
    1088:	20 e0       	ldi	r18, 0x00	; 0
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:43
  const static uint8_t nvmprog_key[] = {
    0xE0, 0xFF, 0x88, 0xD8, 0xCD, 0x45, 0xAB, 0x89, 0x12
  };

  void idle_clock (const size_t clock) {
    for (size_t i = 0; i < clock; i++) {
    108a:	40 91 08 04 	lds	r20, 0x0408	; 0x800408 <__TEXT_REGION_LENGTH__+0x7f0408>
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:44
      loop_until_bit_is_set(TCLK_IN, TCLK_bp);
    108e:	42 ff       	sbrs	r20, 2
    1090:	fc cf       	rjmp	.-8      	; 0x108a <TPI::idle_clock(unsigned int)+0x4>
    1092:	40 91 08 04 	lds	r20, 0x0408	; 0x800408 <__TEXT_REGION_LENGTH__+0x7f0408>
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:45
      loop_until_bit_is_clear(TCLK_IN, TCLK_bp);
    1096:	42 fd       	sbrc	r20, 2
    1098:	fc cf       	rjmp	.-8      	; 0x1092 <TPI::idle_clock(unsigned int)+0xc>
    109a:	2f 5f       	subi	r18, 0xFF	; 255
    109c:	3f 4f       	sbci	r19, 0xFF	; 255
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:43
  const static uint8_t nvmprog_key[] = {
    0xE0, 0xFF, 0x88, 0xD8, 0xCD, 0x45, 0xAB, 0x89, 0x12
  };

  void idle_clock (const size_t clock) {
    for (size_t i = 0; i < clock; i++) {
    109e:	82 17       	cp	r24, r18
    10a0:	93 07       	cpc	r25, r19
    10a2:	99 f7       	brne	.-26     	; 0x108a <TPI::idle_clock(unsigned int)+0x4>
    10a4:	08 95       	ret

000010a6 <SYS::is_boundary_flash_page(unsigned long)>:
is_boundary_flash_page():
    10a6:	cf 92       	push	r12
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:47
      loop_until_bit_is_set(TCLK_IN, TCLK_bp);
      loop_until_bit_is_clear(TCLK_IN, TCLK_bp);
    }
  }
    10a8:	df 92       	push	r13
/Users/askn/Collaborator/UPDI4AVR-USB/src/sys.cpp:299
   * Flash memory boundary check
   *
   * True when a page area address different from the previous time is detected.
   * Indicates the need to erase a page in FLASH/USERROW/BOOTROW of the AVR-Dx series.
   */
  bool is_boundary_flash_page (uint32_t _dwAddr) {
    10aa:	ef 92       	push	r14
    10ac:	ff 92       	push	r15
    10ae:	ab 01       	movw	r20, r22
    10b0:	bc 01       	movw	r22, r24
    10b2:	80 91 cb 60 	lds	r24, 0x60CB	; 0x8060cb <Device_Descriptor+0x2d>
/Users/askn/Collaborator/UPDI4AVR-USB/src/sys.cpp:300
    uint32_t _mask = ~(((uint16_t)Device_Descriptor.UPDI.flash_page_size_msb << 8)
    10b6:	28 2f       	mov	r18, r24
    10b8:	30 e0       	ldi	r19, 0x00	; 0
    10ba:	32 2f       	mov	r19, r18
    10bc:	22 27       	eor	r18, r18
    10be:	80 91 a0 60 	lds	r24, 0x60A0	; 0x8060a0 <Device_Descriptor+0x2>
/Users/askn/Collaborator/UPDI4AVR-USB/src/sys.cpp:301
                                + Device_Descriptor.UPDI.flash_page_size - 1);
    10c2:	82 0f       	add	r24, r18
    10c4:	93 2f       	mov	r25, r19
    10c6:	91 1d       	adc	r25, r1
    10c8:	91 95       	neg	r25
    10ca:	81 95       	neg	r24
/Users/askn/Collaborator/UPDI4AVR-USB/src/sys.cpp:300
   *
   * True when a page area address different from the previous time is detected.
   * Indicates the need to erase a page in FLASH/USERROW/BOOTROW of the AVR-Dx series.
   */
  bool is_boundary_flash_page (uint32_t _dwAddr) {
    uint32_t _mask = ~(((uint16_t)Device_Descriptor.UPDI.flash_page_size_msb << 8)
    10cc:	91 09       	sbc	r25, r1
    10ce:	b0 e0       	ldi	r27, 0x00	; 0
    10d0:	a0 e0       	ldi	r26, 0x00	; 0
    10d2:	84 23       	and	r24, r20
    10d4:	95 23       	and	r25, r21
/Users/askn/Collaborator/UPDI4AVR-USB/src/sys.cpp:302
                                + Device_Descriptor.UPDI.flash_page_size - 1);
    uint32_t _after_page = _dwAddr & _mask;
    10d6:	a6 23       	and	r26, r22
    10d8:	b7 23       	and	r27, r23
    10da:	21 e0       	ldi	r18, 0x01	; 1
    10dc:	c0 90 ea 62 	lds	r12, 0x62EA	; 0x8062ea <_before_page>
/Users/askn/Collaborator/UPDI4AVR-USB/src/sys.cpp:303
    bool _result = _before_page != _after_page;
    10e0:	d0 90 eb 62 	lds	r13, 0x62EB	; 0x8062eb <_before_page+0x1>
    10e4:	e0 90 ec 62 	lds	r14, 0x62EC	; 0x8062ec <_before_page+0x2>
    10e8:	f0 90 ed 62 	lds	r15, 0x62ED	; 0x8062ed <_before_page+0x3>
    10ec:	c8 16       	cp	r12, r24
    10ee:	d9 06       	cpc	r13, r25
    10f0:	ea 06       	cpc	r14, r26
    10f2:	fb 06       	cpc	r15, r27
    10f4:	09 f4       	brne	.+2      	; 0x10f8 <SYS::is_boundary_flash_page(unsigned long)+0x52>
    10f6:	20 e0       	ldi	r18, 0x00	; 0
    10f8:	80 93 ea 62 	sts	0x62EA, r24	; 0x8062ea <_before_page>
/Users/askn/Collaborator/UPDI4AVR-USB/src/sys.cpp:304
    _before_page = _after_page;
    10fc:	90 93 eb 62 	sts	0x62EB, r25	; 0x8062eb <_before_page+0x1>
    1100:	a0 93 ec 62 	sts	0x62EC, r26	; 0x8062ec <_before_page+0x2>
    1104:	b0 93 ed 62 	sts	0x62ED, r27	; 0x8062ed <_before_page+0x3>
    1108:	82 2f       	mov	r24, r18
/Users/askn/Collaborator/UPDI4AVR-USB/src/sys.cpp:306
    return _result;
  }
    110a:	ff 90       	pop	r15
    110c:	ef 90       	pop	r14
    110e:	df 90       	pop	r13
    1110:	cf 90       	pop	r12
    1112:	08 95       	ret

00001114 <SYS::LED_Flash()>:
LED_TCB1():
/Users/askn/Collaborator/UPDI4AVR-USB/src/sys.cpp:180
      _led_mode = 1;
    }
  }

  void LED_TCB1 (uint8_t _mode, uint16_t _ccmp) {
    if (_led_mode != _mode) {
    1114:	80 91 85 60 	lds	r24, 0x6085	; 0x806085 <_led_mode>
    1118:	82 30       	cpi	r24, 0x02	; 2
/Users/askn/Collaborator/UPDI4AVR-USB/src/sys.cpp:181
      TCA0_SPLIT_CTRLA = 0;
    111a:	81 f0       	breq	.+32     	; 0x113c <SYS::LED_Flash()+0x28>
    111c:	10 92 00 0a 	sts	0x0A00, r1	; 0x800a00 <__TEXT_REGION_LENGTH__+0x7f0a00>
/Users/askn/Collaborator/UPDI4AVR-USB/src/sys.cpp:182
      TCB1_CNTL = 0;
    1120:	10 92 1a 0b 	sts	0x0B1A, r1	; 0x800b1a <__TEXT_REGION_LENGTH__+0x7f0b1a>
/Users/askn/Collaborator/UPDI4AVR-USB/src/sys.cpp:183
      TCB1_CCMP = _ccmp;
    1124:	89 ea       	ldi	r24, 0xA9	; 169
    1126:	95 e0       	ldi	r25, 0x05	; 5
    1128:	80 93 1c 0b 	sts	0x0B1C, r24	; 0x800b1c <__TEXT_REGION_LENGTH__+0x7f0b1c>
/Users/askn/Collaborator/UPDI4AVR-USB/src/sys.cpp:184
      TCB1_CTRLA = TCB_RUNSTDBY_bm | TCB_ENABLE_bm | TCB_CLKSEL_EVENT_gc;
    112c:	90 93 1d 0b 	sts	0x0B1D, r25	; 0x800b1d <__TEXT_REGION_LENGTH__+0x7f0b1d>
    1130:	8f e4       	ldi	r24, 0x4F	; 79
/Users/askn/Collaborator/UPDI4AVR-USB/src/sys.cpp:185
      _led_mode = _mode;
    1132:	80 93 10 0b 	sts	0x0B10, r24	; 0x800b10 <__TEXT_REGION_LENGTH__+0x7f0b10>
/Users/askn/Collaborator/UPDI4AVR-USB/src/sys.cpp:198
     * Restarting TCBn in PWM8 mode may cause the duty
     * cycle of TCBn_WO to invert. Solution unknown.
     * This function is affected.
     */
    LED_TCB1(2, TCB1_FLASH);
  }
    1136:	82 e0       	ldi	r24, 0x02	; 2
/Users/askn/Collaborator/UPDI4AVR-USB/src/sys.cpp:170
  * LED operation switching
  */

  /* Heartbeat (waiting) */
  void LED_HeartBeat (void) {
    if (_led_mode != 1) {
    1138:	80 93 85 60 	sts	0x6085, r24	; 0x806085 <_led_mode>
LED_Flash():
    113c:	08 95       	ret

0000113e <SYS::LED_HeartBeat()>:
LED_HeartBeat():
    113e:	80 91 85 60 	lds	r24, 0x6085	; 0x806085 <_led_mode>
/Users/askn/Collaborator/UPDI4AVR-USB/src/sys.cpp:171
      TCA0_SPLIT_CTRLA = TCA_SPLIT_ENABLE_bm | TCA_SPLIT_CLKSEL_DIV1024_gc;
    1142:	81 30       	cpi	r24, 0x01	; 1
/Users/askn/Collaborator/UPDI4AVR-USB/src/sys.cpp:172
      TCB1_CNTL = 0;
    1144:	89 f0       	breq	.+34     	; 0x1168 <SYS::LED_HeartBeat()+0x2a>
    1146:	8f e0       	ldi	r24, 0x0F	; 15
/Users/askn/Collaborator/UPDI4AVR-USB/src/sys.cpp:173
      TCB1_CCMP = TCB1_HBEAT;
    1148:	80 93 00 0a 	sts	0x0A00, r24	; 0x800a00 <__TEXT_REGION_LENGTH__+0x7f0a00>
    114c:	10 92 1a 0b 	sts	0x0B1A, r1	; 0x800b1a <__TEXT_REGION_LENGTH__+0x7f0b1a>
/Users/askn/Collaborator/UPDI4AVR-USB/src/sys.cpp:174
      TCB1_CTRLA = TCB_RUNSTDBY_bm | TCB_ENABLE_bm | TCB_CLKSEL_TCA0_gc;
    1150:	84 ec       	ldi	r24, 0xC4	; 196
    1152:	92 e6       	ldi	r25, 0x62	; 98
/Users/askn/Collaborator/UPDI4AVR-USB/src/sys.cpp:175
      _led_mode = 1;
    1154:	80 93 1c 0b 	sts	0x0B1C, r24	; 0x800b1c <__TEXT_REGION_LENGTH__+0x7f0b1c>
/Users/askn/Collaborator/UPDI4AVR-USB/src/sys.cpp:177
    }
  }
    1158:	90 93 1d 0b 	sts	0x0B1D, r25	; 0x800b1d <__TEXT_REGION_LENGTH__+0x7f0b1d>
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv3.cpp:55
  constexpr auto NVM_STATUS = 0x1006;
  constexpr auto PROD_SIG   = 0x1100;
  constexpr auto PROG_START = 0x800000;

  uint8_t nvm_wait (void) {
    do { UPDI::recv_byte(NVM_STATUS); } while (RXDATA & 3);
    115c:	85 e4       	ldi	r24, 0x45	; 69
    115e:	80 93 10 0b 	sts	0x0B10, r24	; 0x800b10 <__TEXT_REGION_LENGTH__+0x7f0b10>
    1162:	81 e0       	ldi	r24, 0x01	; 1
    1164:	80 93 85 60 	sts	0x6085, r24	; 0x806085 <_led_mode>
    1168:	08 95       	ret

0000116a <NVM::V3::nvm_wait()>:
nvm_wait():
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv3.cpp:56
    return RXDATA;
    116a:	66 e0       	ldi	r22, 0x06	; 6
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv3.cpp:57
  }
    116c:	70 e1       	ldi	r23, 0x10	; 16
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv3.cpp:73
    D2PRINTF(" NVM_V3_FLPERW=%06lX\r\n", _dwAddr);
    return (
      nvm_ctrl_change(0x00)
      && UPDI::send_words_block(_dwAddr, _wLength)
      && nvm_ctrl_change(0x05)  /* NVM_V3_CMD_FLPERW */
      && (nvm_wait() & 0x73) == 0
    116e:	80 e0       	ldi	r24, 0x00	; 0
    1170:	90 e0       	ldi	r25, 0x00	; 0
    1172:	4b dd       	rcall	.-1386   	; 0xc0a <UPDI::recv_byte(unsigned long)>
    1174:	8f b3       	in	r24, 0x1f	; 31
    1176:	83 70       	andi	r24, 0x03	; 3
    1178:	c1 f7       	brne	.-16     	; 0x116a <NVM::V3::nvm_wait()>
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv3.cpp:59
  uint8_t nvm_wait (void) {
    do { UPDI::recv_byte(NVM_STATUS); } while (RXDATA & 3);
    return RXDATA;
  }

  bool nvm_ctrl_change (uint8_t _nvmcmd) {
    117a:	8f b3       	in	r24, 0x1f	; 31
    117c:	08 95       	ret

0000117e <NVM::V3::write_eeprom(unsigned long, unsigned int) [clone .part.3]>:
_ZN3NVM2V317write_words_flashEmj.part.1():
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv3.cpp:60
    nvm_wait();
    117e:	f5 df       	rcall	.-22     	; 0x116a <NVM::V3::nvm_wait()>
    1180:	98 2f       	mov	r25, r24
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv3.cpp:61
    if (UPDI::recv_byte(NVM_CTRL) && RXDATA == _nvmcmd) return true;
    1182:	93 77       	andi	r25, 0x73	; 115
    1184:	81 e0       	ldi	r24, 0x01	; 1
    1186:	09 f0       	breq	.+2      	; 0x118a <NVM::V3::write_eeprom(unsigned long, unsigned int) [clone .part.3]+0xc>
    1188:	80 e0       	ldi	r24, 0x00	; 0
    118a:	08 95       	ret

0000118c <NVM::V3::nvm_ctrl_change(unsigned char)>:
nvm_ctrl_change():
    118c:	cf 93       	push	r28
    118e:	c8 2f       	mov	r28, r24
    1190:	ec df       	rcall	.-40     	; 0x116a <NVM::V3::nvm_wait()>
    1192:	60 e0       	ldi	r22, 0x00	; 0
    1194:	70 e1       	ldi	r23, 0x10	; 16
    1196:	80 e0       	ldi	r24, 0x00	; 0
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv3.cpp:65
    if (!UPDI::nvm_ctrl(0x00)) return false;
    if (0 != _nvmcmd) return UPDI::nvm_ctrl(_nvmcmd);
    return true;
  }
    1198:	90 e0       	ldi	r25, 0x00	; 0
    119a:	37 dd       	rcall	.-1426   	; 0xc0a <UPDI::recv_byte(unsigned long)>
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv3.cpp:62
  }

  bool nvm_ctrl_change (uint8_t _nvmcmd) {
    nvm_wait();
    if (UPDI::recv_byte(NVM_CTRL) && RXDATA == _nvmcmd) return true;
    if (!UPDI::nvm_ctrl(0x00)) return false;
    119c:	88 23       	and	r24, r24
    119e:	31 f0       	breq	.+12     	; 0x11ac <NVM::V3::nvm_ctrl_change(unsigned char)+0x20>
    11a0:	8f b3       	in	r24, 0x1f	; 31
    11a2:	8c 13       	cpse	r24, r28
    11a4:	03 c0       	rjmp	.+6      	; 0x11ac <NVM::V3::nvm_ctrl_change(unsigned char)+0x20>
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv2.cpp:65

  bool nvm_ctrl_change (uint8_t _nvmcmd) {
    nvm_wait();
    if (UPDI::recv_byte(NVM_CTRL) && RXDATA == _nvmcmd) return true;
    if (!UPDI::nvm_ctrl(0x00)) return false;
    if (0 != _nvmcmd) return UPDI::nvm_ctrl(_nvmcmd);
    11a6:	81 e0       	ldi	r24, 0x01	; 1
    11a8:	cf 91       	pop	r28
    11aa:	08 95       	ret
    if (0 != _nvmcmd) return UPDI::nvm_ctrl(_nvmcmd);
    return true;
  }
    11ac:	80 e0       	ldi	r24, 0x00	; 0
    11ae:	dd dd       	rcall	.-1094   	; 0xd6a <UPDI::nvm_ctrl(unsigned char)>
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv4.cpp:116
      && nvm_ctrl_change(0x00)
    );
  }

  size_t prog_init (void) {
    return nvm_ctrl_change(0x00);
    11b0:	88 23       	and	r24, r24
    11b2:	d1 f3       	breq	.-12     	; 0x11a8 <NVM::V3::nvm_ctrl_change(unsigned char)+0x1c>
    11b4:	cc 23       	and	r28, r28
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv4.cpp:117
  }
    11b6:	b9 f3       	breq	.-18     	; 0x11a6 <NVM::V3::nvm_ctrl_change(unsigned char)+0x1a>
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv4.cpp:78
    D2PRINTF(" NVM_V4_FLPER=%06lX\r\n", _dwAddr);
    return (
      nvm_ctrl_change(0x08)   /* NVM_V4_CMD_FLPER */
      && UPDI::send_byte(_dwAddr, 0xFF)
      && (nvm_wait() & 0x73) == 0
      && nvm_ctrl_change(0x00)
    11b8:	8c 2f       	mov	r24, r28
    11ba:	cf 91       	pop	r28
    11bc:	d6 cd       	rjmp	.-1108   	; 0xd6a <UPDI::nvm_ctrl(unsigned char)>

000011be <NVM::V4::prog_init()>:
prog_init():
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv3.cpp:98
      && (nvm_wait() & 0x73) == 0
    );
  }

  size_t prog_init (void) {
    nvm_ctrl_change(0x0F);      /* NVM_V3_CMD_FLPBCLR */
    11be:	80 e0       	ldi	r24, 0x00	; 0
    11c0:	e5 df       	rcall	.-54     	; 0x118c <NVM::V3::nvm_ctrl_change(unsigned char)>
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv3.cpp:99
    nvm_ctrl_change(0x1F);      /* NVM_V3_CMD_EEPBCLR */
    11c2:	90 e0       	ldi	r25, 0x00	; 0
    11c4:	08 95       	ret

000011c6 <NVM::V4::write_eeprom(unsigned long, unsigned int) [clone .part.5]>:
_ZN3NVM2V416erase_flash_pageEm.part.1():
    11c6:	80 e0       	ldi	r24, 0x00	; 0
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv3.cpp:100
    return nvm_ctrl_change(0x00);
    11c8:	e1 cf       	rjmp	.-62     	; 0x118c <NVM::V3::nvm_ctrl_change(unsigned char)>

000011ca <NVM::V3::prog_init()>:
prog_init():
    11ca:	8f e0       	ldi	r24, 0x0F	; 15
    11cc:	df df       	rcall	.-66     	; 0x118c <NVM::V3::nvm_ctrl_change(unsigned char)>
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv3.cpp:101
  }
    11ce:	8f e1       	ldi	r24, 0x1F	; 31
    11d0:	dd df       	rcall	.-70     	; 0x118c <NVM::V3::nvm_ctrl_change(unsigned char)>
    11d2:	80 e0       	ldi	r24, 0x00	; 0
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv3.cpp:77
      && nvm_ctrl_change(0x05)  /* NVM_V3_CMD_FLPERW */
      && (nvm_wait() & 0x73) == 0
    );
  }

  bool write_bytes_flash (uint32_t _dwAddr, size_t _wLength) {
    11d4:	db df       	rcall	.-74     	; 0x118c <NVM::V3::nvm_ctrl_change(unsigned char)>
    11d6:	90 e0       	ldi	r25, 0x00	; 0
    11d8:	08 95       	ret

000011da <NVM::V5::prog_init()>:
_ZN3NVM2V59prog_initEv():
    11da:	f7 cf       	rjmp	.-18     	; 0x11ca <NVM::V3::prog_init()>

000011dc <NVM::V3::write_bytes_flash(unsigned long, unsigned int)>:
write_bytes_flash():
    11dc:	cf 92       	push	r12
    11de:	df 92       	push	r13
    11e0:	ef 92       	push	r14
    11e2:	ff 92       	push	r15
    11e4:	cf 93       	push	r28
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv3.cpp:80
    D2PRINTF(" NVM_V3_FLPERW=%06lX\r\n", _dwAddr);
    return (
      nvm_ctrl_change(0x00)
    11e6:	df 93       	push	r29
    11e8:	6b 01       	movw	r12, r22
    11ea:	7c 01       	movw	r14, r24
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv3.cpp:83
      && UPDI::send_bytes_block(_dwAddr, _wLength)
      && nvm_ctrl_change(0x05)  /* NVM_V3_CMD_FLPERW */
      && (nvm_wait() & 0x73) == 0
    11ec:	ea 01       	movw	r28, r20
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv3.cpp:81

  bool write_bytes_flash (uint32_t _dwAddr, size_t _wLength) {
    D2PRINTF(" NVM_V3_FLPERW=%06lX\r\n", _dwAddr);
    return (
      nvm_ctrl_change(0x00)
      && UPDI::send_bytes_block(_dwAddr, _wLength)
    11ee:	80 e0       	ldi	r24, 0x00	; 0
    11f0:	cd df       	rcall	.-102    	; 0x118c <NVM::V3::nvm_ctrl_change(unsigned char)>
    11f2:	88 23       	and	r24, r24
    11f4:	89 f0       	breq	.+34     	; 0x1218 <NVM::V3::write_bytes_flash(unsigned long, unsigned int)+0x3c>
    11f6:	ae 01       	movw	r20, r28
    11f8:	c7 01       	movw	r24, r14
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv3.cpp:82
      && nvm_ctrl_change(0x05)  /* NVM_V3_CMD_FLPERW */
    11fa:	b6 01       	movw	r22, r12
    11fc:	5e dd       	rcall	.-1348   	; 0xcba <UPDI::send_bytes_block(unsigned long, unsigned int)>
    11fe:	88 23       	and	r24, r24
    1200:	59 f0       	breq	.+22     	; 0x1218 <NVM::V3::write_bytes_flash(unsigned long, unsigned int)+0x3c>
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv3.cpp:85
      && (nvm_wait() & 0x73) == 0
    );
  }
    1202:	85 e0       	ldi	r24, 0x05	; 5
    1204:	c3 df       	rcall	.-122    	; 0x118c <NVM::V3::nvm_ctrl_change(unsigned char)>
    1206:	88 23       	and	r24, r24
    1208:	39 f0       	breq	.+14     	; 0x1218 <NVM::V3::write_bytes_flash(unsigned long, unsigned int)+0x3c>
    120a:	df 91       	pop	r29
    120c:	cf 91       	pop	r28
    120e:	ff 90       	pop	r15
    1210:	ef 90       	pop	r14
    1212:	df 90       	pop	r13
    1214:	cf 90       	pop	r12
    1216:	b3 cf       	rjmp	.-154    	; 0x117e <NVM::V3::write_eeprom(unsigned long, unsigned int) [clone .part.3]>
    1218:	80 e0       	ldi	r24, 0x00	; 0
    121a:	df 91       	pop	r29
    121c:	cf 91       	pop	r28
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv3.cpp:67
    if (!UPDI::nvm_ctrl(0x00)) return false;
    if (0 != _nvmcmd) return UPDI::nvm_ctrl(_nvmcmd);
    return true;
  }

  bool write_words_flash (uint32_t _dwAddr, size_t _wLength) {
    121e:	ff 90       	pop	r15
    1220:	ef 90       	pop	r14
    1222:	df 90       	pop	r13
    1224:	cf 90       	pop	r12
    1226:	08 95       	ret

00001228 <NVM::V3::write_words_flash(unsigned long, unsigned int)>:
write_words_flash():
    1228:	cf 92       	push	r12
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv3.cpp:70
    D2PRINTF(" NVM_V3_FLPERW=%06lX\r\n", _dwAddr);
    return (
      nvm_ctrl_change(0x00)
    122a:	df 92       	push	r13
    122c:	ef 92       	push	r14
    122e:	ff 92       	push	r15
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv3.cpp:73
      && UPDI::send_words_block(_dwAddr, _wLength)
      && nvm_ctrl_change(0x05)  /* NVM_V3_CMD_FLPERW */
      && (nvm_wait() & 0x73) == 0
    1230:	cf 93       	push	r28
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv3.cpp:71

  bool write_words_flash (uint32_t _dwAddr, size_t _wLength) {
    D2PRINTF(" NVM_V3_FLPERW=%06lX\r\n", _dwAddr);
    return (
      nvm_ctrl_change(0x00)
      && UPDI::send_words_block(_dwAddr, _wLength)
    1232:	df 93       	push	r29
    1234:	6b 01       	movw	r12, r22
    1236:	7c 01       	movw	r14, r24
    1238:	ea 01       	movw	r28, r20
    123a:	80 e0       	ldi	r24, 0x00	; 0
    123c:	a7 df       	rcall	.-178    	; 0x118c <NVM::V3::nvm_ctrl_change(unsigned char)>
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv3.cpp:72
      && nvm_ctrl_change(0x05)  /* NVM_V3_CMD_FLPERW */
    123e:	88 23       	and	r24, r24
    1240:	89 f0       	breq	.+34     	; 0x1264 <NVM::V3::write_words_flash(unsigned long, unsigned int)+0x3c>
    1242:	ae 01       	movw	r20, r28
    1244:	c7 01       	movw	r24, r14
    1246:	b6 01       	movw	r22, r12
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv3.cpp:75
      && (nvm_wait() & 0x73) == 0
    );
  }
    1248:	fa dc       	rcall	.-1548   	; 0xc3e <UPDI::send_words_block(unsigned long, unsigned int)>
    124a:	88 23       	and	r24, r24
    124c:	59 f0       	breq	.+22     	; 0x1264 <NVM::V3::write_words_flash(unsigned long, unsigned int)+0x3c>
    124e:	85 e0       	ldi	r24, 0x05	; 5
    1250:	9d df       	rcall	.-198    	; 0x118c <NVM::V3::nvm_ctrl_change(unsigned char)>
    1252:	88 23       	and	r24, r24
    1254:	39 f0       	breq	.+14     	; 0x1264 <NVM::V3::write_words_flash(unsigned long, unsigned int)+0x3c>
    1256:	df 91       	pop	r29
    1258:	cf 91       	pop	r28
    125a:	ff 90       	pop	r15
    125c:	ef 90       	pop	r14
    125e:	df 90       	pop	r13
    1260:	cf 90       	pop	r12
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv4.cpp:72
    if (!UPDI::nvm_ctrl(0x00)) return false;
    if (0 != _nvmcmd) return UPDI::nvm_ctrl(_nvmcmd);
    return true;
  }

  bool erase_flash_page (uint32_t _dwAddr) {
    1262:	8d cf       	rjmp	.-230    	; 0x117e <NVM::V3::write_eeprom(unsigned long, unsigned int) [clone .part.3]>
    1264:	80 e0       	ldi	r24, 0x00	; 0
    1266:	df 91       	pop	r29
    1268:	cf 91       	pop	r28
    126a:	ff 90       	pop	r15
    126c:	ef 90       	pop	r14
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv4.cpp:75
    D2PRINTF(" NVM_V4_FLPER=%06lX\r\n", _dwAddr);
    return (
      nvm_ctrl_change(0x08)   /* NVM_V4_CMD_FLPER */
    126e:	df 90       	pop	r13
    1270:	cf 90       	pop	r12
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv4.cpp:78
      && UPDI::send_byte(_dwAddr, 0xFF)
      && (nvm_wait() & 0x73) == 0
      && nvm_ctrl_change(0x00)
    1272:	08 95       	ret

00001274 <NVM::V4::erase_flash_page(unsigned long)>:
erase_flash_page():
    1274:	cf 92       	push	r12
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv4.cpp:76

  bool erase_flash_page (uint32_t _dwAddr) {
    D2PRINTF(" NVM_V4_FLPER=%06lX\r\n", _dwAddr);
    return (
      nvm_ctrl_change(0x08)   /* NVM_V4_CMD_FLPER */
      && UPDI::send_byte(_dwAddr, 0xFF)
    1276:	df 92       	push	r13
    1278:	ef 92       	push	r14
    127a:	ff 92       	push	r15
    127c:	6b 01       	movw	r12, r22
    127e:	7c 01       	movw	r14, r24
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv4.cpp:77
      && (nvm_wait() & 0x73) == 0
    1280:	88 e0       	ldi	r24, 0x08	; 8
    1282:	84 df       	rcall	.-248    	; 0x118c <NVM::V3::nvm_ctrl_change(unsigned char)>
    1284:	88 23       	and	r24, r24
    1286:	71 f0       	breq	.+28     	; 0x12a4 <NVM::V4::erase_flash_page(unsigned long)+0x30>
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv4.cpp:80
      && nvm_ctrl_change(0x00)
    );
  }
    1288:	4f ef       	ldi	r20, 0xFF	; 255
    128a:	c7 01       	movw	r24, r14
    128c:	b6 01       	movw	r22, r12
    128e:	50 dd       	rcall	.-1376   	; 0xd30 <UPDI::send_byte(unsigned long, unsigned char)>
    1290:	88 23       	and	r24, r24
    1292:	41 f0       	breq	.+16     	; 0x12a4 <NVM::V4::erase_flash_page(unsigned long)+0x30>
    1294:	6a df       	rcall	.-300    	; 0x116a <NVM::V3::nvm_wait()>
    1296:	83 77       	andi	r24, 0x73	; 115
    1298:	29 f4       	brne	.+10     	; 0x12a4 <NVM::V4::erase_flash_page(unsigned long)+0x30>
    129a:	ff 90       	pop	r15
    129c:	ef 90       	pop	r14
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv0.cpp:62
  constexpr auto NVM_STATUS = 0x1002;
  constexpr auto NVM_DATA   = 0x1006;
  constexpr auto PROD_SIG   = 0x1100;

  uint8_t nvm_wait (void) {
    do { UPDI::recv_byte(NVM_STATUS); } while (RXDATA & 3);
    129e:	df 90       	pop	r13
    12a0:	cf 90       	pop	r12
    12a2:	91 cf       	rjmp	.-222    	; 0x11c6 <NVM::V4::write_eeprom(unsigned long, unsigned int) [clone .part.5]>
    12a4:	80 e0       	ldi	r24, 0x00	; 0
    12a6:	ff 90       	pop	r15
    12a8:	ef 90       	pop	r14
    12aa:	df 90       	pop	r13
    12ac:	cf 90       	pop	r12
    12ae:	08 95       	ret

000012b0 <NVM::V0::nvm_wait()>:
nvm_wait():
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv0.cpp:63
    return RXDATA;
    12b0:	62 e0       	ldi	r22, 0x02	; 2
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv0.cpp:64
  }
    12b2:	70 e1       	ldi	r23, 0x10	; 16
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv0.cpp:108
      && (nvm_wait() & 7) == 0
    );
  }

  size_t prog_init (void) {
    nvm_wait();
    12b4:	80 e0       	ldi	r24, 0x00	; 0
    12b6:	90 e0       	ldi	r25, 0x00	; 0
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv0.cpp:109
    UPDI::nvm_ctrl(0x04);         /* NVM_CMD_PBC */
    12b8:	a8 dc       	rcall	.-1712   	; 0xc0a <UPDI::recv_byte(unsigned long)>
    12ba:	8f b3       	in	r24, 0x1f	; 31
    12bc:	83 70       	andi	r24, 0x03	; 3
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv0.cpp:110
    nvm_wait();
    12be:	c1 f7       	brne	.-16     	; 0x12b0 <NVM::V0::nvm_wait()>
    12c0:	8f b3       	in	r24, 0x1f	; 31
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv0.cpp:111
    return UPDI::nvm_ctrl(0x00);
    12c2:	08 95       	ret

000012c4 <NVM::V0::prog_init()>:
prog_init():
    12c4:	f5 df       	rcall	.-22     	; 0x12b0 <NVM::V0::nvm_wait()>
    12c6:	84 e0       	ldi	r24, 0x04	; 4
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv0.cpp:112
  }
    12c8:	50 dd       	rcall	.-1376   	; 0xd6a <UPDI::nvm_ctrl(unsigned char)>
    12ca:	f2 df       	rcall	.-28     	; 0x12b0 <NVM::V0::nvm_wait()>
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv2.cpp:61
  uint8_t nvm_wait (void) {
    do { UPDI::recv_byte(NVM_STATUS); } while (RXDATA & 3);
    return RXDATA;
  }

  bool nvm_ctrl_change (uint8_t _nvmcmd) {
    12cc:	80 e0       	ldi	r24, 0x00	; 0
    12ce:	4d dd       	rcall	.-1382   	; 0xd6a <UPDI::nvm_ctrl(unsigned char)>
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv2.cpp:62
    nvm_wait();
    12d0:	90 e0       	ldi	r25, 0x00	; 0
    12d2:	08 95       	ret

000012d4 <NVM::V2::nvm_ctrl_change(unsigned char)>:
nvm_ctrl_change():
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv2.cpp:63
    if (UPDI::recv_byte(NVM_CTRL) && RXDATA == _nvmcmd) return true;
    12d4:	cf 93       	push	r28
    12d6:	c8 2f       	mov	r28, r24
    12d8:	eb df       	rcall	.-42     	; 0x12b0 <NVM::V0::nvm_wait()>
    12da:	60 e0       	ldi	r22, 0x00	; 0
    12dc:	70 e1       	ldi	r23, 0x10	; 16
    12de:	80 e0       	ldi	r24, 0x00	; 0
    12e0:	90 e0       	ldi	r25, 0x00	; 0
    12e2:	93 dc       	rcall	.-1754   	; 0xc0a <UPDI::recv_byte(unsigned long)>
    12e4:	88 23       	and	r24, r24
    12e6:	31 f0       	breq	.+12     	; 0x12f4 <NVM::V2::nvm_ctrl_change(unsigned char)+0x20>
    12e8:	8f b3       	in	r24, 0x1f	; 31
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv2.cpp:67
    if (!UPDI::nvm_ctrl(0x00)) return false;
    if (0 != _nvmcmd) return UPDI::nvm_ctrl(_nvmcmd);
    return true;
  }
    12ea:	8c 13       	cpse	r24, r28
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv2.cpp:64
  }

  bool nvm_ctrl_change (uint8_t _nvmcmd) {
    nvm_wait();
    if (UPDI::recv_byte(NVM_CTRL) && RXDATA == _nvmcmd) return true;
    if (!UPDI::nvm_ctrl(0x00)) return false;
    12ec:	03 c0       	rjmp	.+6      	; 0x12f4 <NVM::V2::nvm_ctrl_change(unsigned char)+0x20>
    12ee:	81 e0       	ldi	r24, 0x01	; 1
    12f0:	cf 91       	pop	r28
    12f2:	08 95       	ret
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv2.cpp:65
    if (0 != _nvmcmd) return UPDI::nvm_ctrl(_nvmcmd);
    12f4:	80 e0       	ldi	r24, 0x00	; 0
    12f6:	39 dd       	rcall	.-1422   	; 0xd6a <UPDI::nvm_ctrl(unsigned char)>
    12f8:	88 23       	and	r24, r24
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv2.cpp:67
    return true;
  }
    12fa:	d1 f3       	breq	.-12     	; 0x12f0 <NVM::V2::nvm_ctrl_change(unsigned char)+0x1c>
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv2.cpp:65

  bool nvm_ctrl_change (uint8_t _nvmcmd) {
    nvm_wait();
    if (UPDI::recv_byte(NVM_CTRL) && RXDATA == _nvmcmd) return true;
    if (!UPDI::nvm_ctrl(0x00)) return false;
    if (0 != _nvmcmd) return UPDI::nvm_ctrl(_nvmcmd);
    12fc:	cc 23       	and	r28, r28
    12fe:	b9 f3       	breq	.-18     	; 0x12ee <NVM::V2::nvm_ctrl_change(unsigned char)+0x1a>
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv2.cpp:113
      && nvm_ctrl_change(0x00)
    );
  }

  size_t prog_init (void) {
    return nvm_ctrl_change(0x00);
    1300:	8c 2f       	mov	r24, r28
    1302:	cf 91       	pop	r28
    1304:	32 cd       	rjmp	.-1436   	; 0xd6a <UPDI::nvm_ctrl(unsigned char)>

00001306 <NVM::V2::prog_init()>:
prog_init():
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv2.cpp:114
  }
    1306:	80 e0       	ldi	r24, 0x00	; 0
    1308:	e5 df       	rcall	.-54     	; 0x12d4 <NVM::V2::nvm_ctrl_change(unsigned char)>
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv2.cpp:75
    D2PRINTF(" NVM_V2_FLPER=%06lX\r\n", _dwAddr);
    return (
      nvm_ctrl_change(0x08)   /* NVM_V2_CMD_FLPER */
      && UPDI::send_byte(_dwAddr, 0xFF)
      && (nvm_wait() & 0x73) == 0
      && nvm_ctrl_change(0x00)
    130a:	90 e0       	ldi	r25, 0x00	; 0
    130c:	08 95       	ret

0000130e <NVM::V2::write_eeprom(unsigned long, unsigned int) [clone .part.5]>:
_ZN3NVM2V216erase_flash_pageEm.part.1():
    130e:	80 e0       	ldi	r24, 0x00	; 0
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv2.cpp:69
    if (!UPDI::nvm_ctrl(0x00)) return false;
    if (0 != _nvmcmd) return UPDI::nvm_ctrl(_nvmcmd);
    return true;
  }

  bool erase_flash_page (uint32_t _dwAddr) {
    1310:	e1 cf       	rjmp	.-62     	; 0x12d4 <NVM::V2::nvm_ctrl_change(unsigned char)>

00001312 <NVM::V2::erase_flash_page(unsigned long)>:
erase_flash_page():
    1312:	cf 92       	push	r12
    1314:	df 92       	push	r13
    1316:	ef 92       	push	r14
    1318:	ff 92       	push	r15
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv2.cpp:72
    D2PRINTF(" NVM_V2_FLPER=%06lX\r\n", _dwAddr);
    return (
      nvm_ctrl_change(0x08)   /* NVM_V2_CMD_FLPER */
    131a:	6b 01       	movw	r12, r22
    131c:	7c 01       	movw	r14, r24
    131e:	88 e0       	ldi	r24, 0x08	; 8
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv2.cpp:75
      && UPDI::send_byte(_dwAddr, 0xFF)
      && (nvm_wait() & 0x73) == 0
      && nvm_ctrl_change(0x00)
    1320:	d9 df       	rcall	.-78     	; 0x12d4 <NVM::V2::nvm_ctrl_change(unsigned char)>
    1322:	88 23       	and	r24, r24
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv2.cpp:73

  bool erase_flash_page (uint32_t _dwAddr) {
    D2PRINTF(" NVM_V2_FLPER=%06lX\r\n", _dwAddr);
    return (
      nvm_ctrl_change(0x08)   /* NVM_V2_CMD_FLPER */
      && UPDI::send_byte(_dwAddr, 0xFF)
    1324:	71 f0       	breq	.+28     	; 0x1342 <NVM::V2::erase_flash_page(unsigned long)+0x30>
    1326:	4f ef       	ldi	r20, 0xFF	; 255
    1328:	c7 01       	movw	r24, r14
    132a:	b6 01       	movw	r22, r12
    132c:	01 dd       	rcall	.-1534   	; 0xd30 <UPDI::send_byte(unsigned long, unsigned char)>
    132e:	88 23       	and	r24, r24
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv2.cpp:74
      && (nvm_wait() & 0x73) == 0
    1330:	41 f0       	breq	.+16     	; 0x1342 <NVM::V2::erase_flash_page(unsigned long)+0x30>
    1332:	be df       	rcall	.-132    	; 0x12b0 <NVM::V0::nvm_wait()>
    1334:	83 77       	andi	r24, 0x73	; 115
    1336:	29 f4       	brne	.+10     	; 0x1342 <NVM::V2::erase_flash_page(unsigned long)+0x30>
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv2.cpp:77
      && nvm_ctrl_change(0x00)
    );
  }
    1338:	ff 90       	pop	r15
    133a:	ef 90       	pop	r14
    133c:	df 90       	pop	r13
    133e:	cf 90       	pop	r12
    1340:	e6 cf       	rjmp	.-52     	; 0x130e <NVM::V2::write_eeprom(unsigned long, unsigned int) [clone .part.5]>
    1342:	80 e0       	ldi	r24, 0x00	; 0
    1344:	ff 90       	pop	r15
    1346:	ef 90       	pop	r14
    1348:	df 90       	pop	r13
    134a:	cf 90       	pop	r12
    134c:	08 95       	ret

0000134e <NVM::V1::write_memory()>:
_ZN3NVM2V112write_memoryEv():
    134e:	90 e0       	ldi	r25, 0x00	; 0
    1350:	80 e0       	ldi	r24, 0x00	; 0
    1352:	08 95       	ret

00001354 <NVM::V1::read_memory()>:
_ZN3NVM2V111read_memoryEv():
    1354:	90 e0       	ldi	r25, 0x00	; 0
    1356:	80 e0       	ldi	r24, 0x00	; 0
    1358:	08 95       	ret

0000135a <NVM::V1::erase_memory()>:
_ZN3NVM2V112erase_memoryEv():
    135a:	90 e0       	ldi	r25, 0x00	; 0
    135c:	80 e0       	ldi	r24, 0x00	; 0
    135e:	08 95       	ret

00001360 <Print::write(char)>:
write():
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/modernAVR/0.2.14/cores/modernAVR/api/Print.h:58

  virtual size_t write (uint8_t) = 0;

  /* Value and Strings */

  inline size_t write (const char _c) { return write((uint8_t) _c); }
    1360:	dc 01       	movw	r26, r24
    1362:	ed 91       	ld	r30, X+
    1364:	fc 91       	ld	r31, X
    1366:	01 90       	ld	r0, Z+
    1368:	f0 81       	ld	r31, Z
    136a:	e0 2d       	mov	r30, r0
    136c:	09 94       	ijmp

0000136e <Print::printHex(void const*, unsigned int, char, unsigned int, char const*) [clone .constprop.18]>:
printHex():
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/modernAVR/0.2.14/cores/modernAVR/api/cpp/Print_puts.cpp:85
    }
  }
  return *this;
}

Print& Print::printHex (const void* _source, size_t _length, char _separator, size_t _wrap, const char* _split) {
    136e:	cf 92       	push	r12
    1370:	df 92       	push	r13
    1372:	ef 92       	push	r14
    1374:	ff 92       	push	r15
    1376:	0f 93       	push	r16
    1378:	1f 93       	push	r17
    137a:	cf 93       	push	r28
    137c:	df 93       	push	r29
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/modernAVR/0.2.14/cores/modernAVR/api/cpp/Print_puts.cpp:72
uint8_t _read (uint32_t _addr, bool _prog) {
  return _prog ? pgm_read_byte(_addr) : *((uint8_t*)_addr);
}

Print& Print::_print_hex (Print_OPT_HEX_t p) {
  size_t _count = 0;
    137e:	8c 01       	movw	r16, r24
    1380:	d0 e0       	ldi	r29, 0x00	; 0
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/modernAVR/0.2.14/cores/modernAVR/api/cpp/Print_puts.cpp:73
  while (p.length--) {
    1382:	c0 e0       	ldi	r28, 0x00	; 0
_print_hex():
    1384:	7b 01       	movw	r14, r22
    1386:	81 e0       	ldi	r24, 0x01	; 1
    1388:	e8 1a       	sub	r14, r24
    138a:	f1 08       	sbc	r15, r1
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/modernAVR/0.2.14/cores/modernAVR/api/cpp/Print_puts.cpp:68
/*
 * Hex Dump
 */

uint8_t _read (uint32_t _addr, bool _prog) {
  return _prog ? pgm_read_byte(_addr) : *((uint8_t*)_addr);
    138c:	67 2b       	or	r22, r23
    138e:	61 f1       	breq	.+88     	; 0x13e8 <Print::printHex(void const*, unsigned int, char, unsigned int, char const*) [clone .constprop.18]+0x7a>
_read():
    1390:	f8 01       	movw	r30, r16
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/modernAVR/0.2.14/cores/modernAVR/api/cpp/Print_puts.cpp:75

Print& Print::_print_hex (Print_OPT_HEX_t p) {
  size_t _count = 0;
  while (p.length--) {
    uint8_t _c = _read(p.addr++, p.prog);
    write(btoh(__builtin_avr_swap(_c)));
    1392:	d1 90       	ld	r13, Z+
    1394:	8f 01       	movw	r16, r30
_print_hex():
    1396:	8d 2d       	mov	r24, r13
    1398:	82 95       	swap	r24
    139a:	12 db       	rcall	.-2524   	; 0x9c0 <btoh>
    139c:	68 2f       	mov	r22, r24
    139e:	8d e8       	ldi	r24, 0x8D	; 141
    13a0:	90 e6       	ldi	r25, 0x60	; 96
    13a2:	de df       	rcall	.-68     	; 0x1360 <Print::write(char)>
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/modernAVR/0.2.14/cores/modernAVR/api/cpp/Print_puts.cpp:76
    write(btoh(_c));
    13a4:	8d 2d       	mov	r24, r13
    13a6:	0c db       	rcall	.-2536   	; 0x9c0 <btoh>
    13a8:	68 2f       	mov	r22, r24
    13aa:	8d e8       	ldi	r24, 0x8D	; 141
    13ac:	90 e6       	ldi	r25, 0x60	; 96
    13ae:	d8 df       	rcall	.-80     	; 0x1360 <Print::write(char)>
    13b0:	e1 14       	cp	r14, r1
    13b2:	f1 04       	cpc	r15, r1
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/modernAVR/0.2.14/cores/modernAVR/api/cpp/Print_puts.cpp:77
    if (p.length) {
    13b4:	91 f0       	breq	.+36     	; 0x13da <Print::printHex(void const*, unsigned int, char, unsigned int, char const*) [clone .constprop.18]+0x6c>
    13b6:	21 96       	adiw	r28, 0x01	; 1
    13b8:	91 f4       	brne	.+36     	; 0x13de <Print::printHex(void const*, unsigned int, char, unsigned int, char const*) [clone .constprop.18]+0x70>
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/modernAVR/0.2.14/cores/modernAVR/api/cpp/Print_puts.cpp:78
      if (++_count == p.wrap) { puts(p.split); _count -= p.wrap; }
    13ba:	81 e8       	ldi	r24, 0x81	; 129
    13bc:	c8 2e       	mov	r12, r24
    13be:	80 e6       	ldi	r24, 0x60	; 96
    13c0:	d8 2e       	mov	r13, r24
puts():
    13c2:	f6 01       	movw	r30, r12
    13c4:	61 91       	ld	r22, Z+
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/modernAVR/0.2.14/cores/modernAVR/api/cpp/Print_puts.cpp:35

size_t Print::puts (const char _str[]) {
  char _c;
  size_t _n = 0;
  char* _p = (char *) _str;
  while ((_c = *_p++)) {
    13c6:	6f 01       	movw	r12, r30
    13c8:	66 23       	and	r22, r22
    13ca:	39 f0       	breq	.+14     	; 0x13da <Print::printHex(void const*, unsigned int, char, unsigned int, char const*) [clone .constprop.18]+0x6c>
    13cc:	8d e8       	ldi	r24, 0x8D	; 141
    13ce:	90 e6       	ldi	r25, 0x60	; 96
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/modernAVR/0.2.14/cores/modernAVR/api/cpp/Print_puts.cpp:36
    if (write(_c)) _n++;
    13d0:	c7 df       	rcall	.-114    	; 0x1360 <Print::write(char)>
    13d2:	89 2b       	or	r24, r25
    13d4:	b1 f7       	brne	.-20     	; 0x13c2 <Print::printHex(void const*, unsigned int, char, unsigned int, char const*) [clone .constprop.18]+0x54>
printHex():
    13d6:	d0 e0       	ldi	r29, 0x00	; 0
    13d8:	c0 e0       	ldi	r28, 0x00	; 0
    13da:	b7 01       	movw	r22, r14
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/modernAVR/0.2.14/cores/modernAVR/api/cpp/Print_puts.cpp:78
  while (p.length--) {
    uint8_t _c = _read(p.addr++, p.prog);
    write(btoh(__builtin_avr_swap(_c)));
    write(btoh(_c));
    if (p.length) {
      if (++_count == p.wrap) { puts(p.split); _count -= p.wrap; }
    13dc:	d3 cf       	rjmp	.-90     	; 0x1384 <Print::printHex(void const*, unsigned int, char, unsigned int, char const*) [clone .constprop.18]+0x16>
_print_hex():
    13de:	6a e3       	ldi	r22, 0x3A	; 58
    13e0:	8d e8       	ldi	r24, 0x8D	; 141
    13e2:	90 e6       	ldi	r25, 0x60	; 96
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/modernAVR/0.2.14/cores/modernAVR/api/cpp/Print_puts.cpp:79
      else if (p.sep) write(p.sep);
    13e4:	bd df       	rcall	.-134    	; 0x1360 <Print::write(char)>
    13e6:	f9 cf       	rjmp	.-14     	; 0x13da <Print::printHex(void const*, unsigned int, char, unsigned int, char const*) [clone .constprop.18]+0x6c>
printHex():
    13e8:	8d e8       	ldi	r24, 0x8D	; 141
    13ea:	90 e6       	ldi	r25, 0x60	; 96
    13ec:	df 91       	pop	r29
    13ee:	cf 91       	pop	r28
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/modernAVR/0.2.14/cores/modernAVR/api/cpp/Print_puts.cpp:95
  , _wrap
  , _separator
  , false
  };
  return _print_hex(p);
}
    13f0:	1f 91       	pop	r17
    13f2:	0f 91       	pop	r16
    13f4:	ff 90       	pop	r15
    13f6:	ef 90       	pop	r14
    13f8:	df 90       	pop	r13
    13fa:	cf 90       	pop	r12
    13fc:	08 95       	ret

000013fe <Print::puts(PGM_t const*)>:
puts():
    13fe:	ef 92       	push	r14
    1400:	ff 92       	push	r15
    1402:	0f 93       	push	r16
    1404:	1f 93       	push	r17
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/modernAVR/0.2.14/cores/modernAVR/api/cpp/Print_puts.cpp:52
    else break;
  }
  return _n;
}

size_t Print::puts (const PGM_t _str[]) {
    1406:	cf 93       	push	r28
    1408:	df 93       	push	r29
    140a:	8c 01       	movw	r16, r24
    140c:	7b 01       	movw	r14, r22
    140e:	d0 e0       	ldi	r29, 0x00	; 0
    1410:	c0 e0       	ldi	r28, 0x00	; 0
    1412:	f7 01       	movw	r30, r14
    1414:	ec 0f       	add	r30, r28
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/modernAVR/0.2.14/cores/modernAVR/api/cpp/Print_puts.cpp:54
  char _c;
  size_t _n = 0;
    1416:	fd 1f       	adc	r31, r29
    1418:	64 91       	lpm	r22, Z
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/modernAVR/0.2.14/cores/modernAVR/api/cpp/Print_puts.cpp:56
  PGM_P _p = reinterpret_cast<PGM_P>(_str);
  while ((_c = pgm_read_byte(_p++))) {
    141a:	66 23       	and	r22, r22
    141c:	31 f0       	breq	.+12     	; 0x142a <Print::puts(PGM_t const*)+0x2c>
    141e:	c8 01       	movw	r24, r16
    1420:	9f df       	rcall	.-194    	; 0x1360 <Print::write(char)>
    1422:	89 2b       	or	r24, r25
    1424:	11 f0       	breq	.+4      	; 0x142a <Print::puts(PGM_t const*)+0x2c>
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/modernAVR/0.2.14/cores/modernAVR/api/cpp/Print_puts.cpp:57
    if (write(_c)) _n++;
    1426:	21 96       	adiw	r28, 0x01	; 1
    1428:	f4 cf       	rjmp	.-24     	; 0x1412 <Print::puts(PGM_t const*)+0x14>
    142a:	ce 01       	movw	r24, r28
    142c:	df 91       	pop	r29
    142e:	cf 91       	pop	r28
    1430:	1f 91       	pop	r17
    1432:	0f 91       	pop	r16
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/modernAVR/0.2.14/cores/modernAVR/api/cpp/Print_puts.cpp:61
    else break;
  }
  return _n;
}
    1434:	ff 90       	pop	r15
    1436:	ef 90       	pop	r14
    1438:	08 95       	ret

0000143a <Print::ln()>:
ln():
    143a:	cf 93       	push	r28
    143c:	df 93       	push	r29
    143e:	ec 01       	movw	r28, r24
    1440:	6d e0       	ldi	r22, 0x0D	; 13
    1442:	8e df       	rcall	.-228    	; 0x1360 <Print::write(char)>
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/modernAVR/0.2.14/cores/modernAVR/api/Print.h:73
  size_t puts (const char _str[]);
  size_t puts (const PGM_t _str[]);

  /* Support */

  inline Print& ln (void) { write('\r'); write('\n'); return *this; }
    1444:	6a e0       	ldi	r22, 0x0A	; 10
    1446:	ce 01       	movw	r24, r28
    1448:	8b df       	rcall	.-234    	; 0x1360 <Print::write(char)>
    144a:	ce 01       	movw	r24, r28
    144c:	df 91       	pop	r29
    144e:	cf 91       	pop	r28
    1450:	08 95       	ret

00001452 <Print::printf(PGM_t const*, ...) [clone .constprop.21]>:
printf():
    1452:	cf 93       	push	r28
    1454:	df 93       	push	r29
    1456:	cd b7       	in	r28, 0x3d	; 61
    1458:	de b7       	in	r29, 0x3e	; 62
    145a:	2e 97       	sbiw	r28, 0x0e	; 14
    145c:	cd bf       	out	0x3d, r28	; 61
    145e:	de bf       	out	0x3e, r29	; 62
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/modernAVR/0.2.14/cores/modernAVR/api/cpp/Print_format.cpp:35
  va_start(_ap, _format);
  vfprintf(&_fp, _format, _ap);
  return *this;
}

Print& Print::printf (const PGM_t *_format, ...) {
    1460:	86 ea       	ldi	r24, 0xA6	; 166
    1462:	94 e0       	ldi	r25, 0x04	; 4
    1464:	89 87       	std	Y+9, r24	; 0x09
    1466:	9a 87       	std	Y+10, r25	; 0x0a
    1468:	1b 86       	std	Y+11, r1	; 0x0b
    146a:	1c 86       	std	Y+12, r1	; 0x0c
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/modernAVR/0.2.14/cores/modernAVR/api/cpp/Print_format.cpp:38
  FILE _fp;
  va_list _ap;
  fdev_setup_stream(&_fp, printf_putchar, NULL, _FDEV_SETUP_WRITE);
    146c:	82 e0       	ldi	r24, 0x02	; 2
    146e:	8c 83       	std	Y+4, r24	; 0x04
    1470:	8d e8       	ldi	r24, 0x8D	; 141
    1472:	90 e6       	ldi	r25, 0x60	; 96
    1474:	8d 87       	std	Y+13, r24	; 0x0d
    1476:	9e 87       	std	Y+14, r25	; 0x0e
    1478:	ae 01       	movw	r20, r28
    147a:	49 5e       	subi	r20, 0xE9	; 233
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/modernAVR/0.2.14/cores/modernAVR/api/cpp/Print_format.cpp:39
  fdev_set_udata(&_fp, this);
    147c:	5f 4f       	sbci	r21, 0xFF	; 255
    147e:	6d 89       	ldd	r22, Y+21	; 0x15
    1480:	7e 89       	ldd	r23, Y+22	; 0x16
    1482:	ce 01       	movw	r24, r28
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/modernAVR/0.2.14/cores/modernAVR/api/cpp/Print_format.cpp:41
  va_start(_ap, _format);
  vfprintf_P(&_fp, (const char *) _format, _ap);
    1484:	01 96       	adiw	r24, 0x01	; 1
    1486:	0e 94 95 21 	call	0x432a	; 0x432a <vfprintf_P>
    148a:	8d e8       	ldi	r24, 0x8D	; 141
    148c:	90 e6       	ldi	r25, 0x60	; 96
    148e:	2e 96       	adiw	r28, 0x0e	; 14
    1490:	cd bf       	out	0x3d, r28	; 61
    1492:	de bf       	out	0x3e, r29	; 62
    1494:	df 91       	pop	r29
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/modernAVR/0.2.14/cores/modernAVR/api/cpp/Print_format.cpp:43
  return *this;
}
    1496:	cf 91       	pop	r28
    1498:	08 95       	ret

0000149a <USART::change_vcp()>:
change_vcp():
    149a:	bf 92       	push	r11
    149c:	cf 92       	push	r12
    149e:	df 92       	push	r13
    14a0:	ef 92       	push	r14
    14a2:	ff 92       	push	r15
    14a4:	0f 93       	push	r16
/Users/askn/Collaborator/UPDI4AVR-USB/src/usart.cpp:115
    }
  }

  /*** Activates VCP operation. ***/
  /* Detailed parameters are specified in SET_LINE_ENCODING. */
  void change_vcp (void) {
    14a6:	1f 93       	push	r17
    14a8:	cf 93       	push	r28
    14aa:	df 93       	push	r29
    14ac:	00 d0       	rcall	.+0      	; 0x14ae <USART::change_vcp()+0x14>
    14ae:	00 d0       	rcall	.+0      	; 0x14b0 <USART::change_vcp()+0x16>
    14b0:	cd b7       	in	r28, 0x3d	; 61
    14b2:	de b7       	in	r29, 0x3e	; 62
    14b4:	c0 90 86 60 	lds	r12, 0x6086	; 0x806086 <_set_line_encoding>
    14b8:	d0 90 87 60 	lds	r13, 0x6087	; 0x806087 <_set_line_encoding+0x1>
    14bc:	e0 90 88 60 	lds	r14, 0x6088	; 0x806088 <_set_line_encoding+0x2>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usart.cpp:121
  #ifdef CONFIG_VCP_TXD_ODM
    uint8_t _ctrlb = USART_RXEN_bm | USART_TXEN_bm | USART_ODME_bm;
  #else
    uint8_t _ctrlb = USART_RXEN_bm | USART_TXEN_bm;
  #endif
    uint32_t _baud = _set_line_encoding.dwDTERate;
    14c0:	f0 90 89 60 	lds	r15, 0x6089	; 0x806089 <_set_line_encoding+0x3>
    14c4:	c1 14       	cp	r12, r1
    14c6:	d1 04       	cpc	r13, r1
    14c8:	e1 04       	cpc	r14, r1
    14ca:	f1 04       	cpc	r15, r1
    14cc:	d9 f0       	breq	.+54     	; 0x1504 <USART::change_vcp()+0x6a>
    14ce:	60 e0       	ldi	r22, 0x00	; 0
/Users/askn/Collaborator/UPDI4AVR-USB/src/usart.cpp:123
    /* If the BAUD value is small, select double speed mode. */
    if (_baud) _baud = (((F_CPU * 8L) / _baud) + 1) >> 1;
    14d0:	78 e6       	ldi	r23, 0x68	; 104
    14d2:	89 e8       	ldi	r24, 0x89	; 137
    14d4:	99 e0       	ldi	r25, 0x09	; 9
    14d6:	a7 01       	movw	r20, r14
    14d8:	96 01       	movw	r18, r12
    14da:	0e 94 57 24 	call	0x48ae	; 0x48ae <__udivmodsi4>
    14de:	69 01       	movw	r12, r18
    14e0:	7a 01       	movw	r14, r20
    14e2:	8f ef       	ldi	r24, 0xFF	; 255
    14e4:	c8 1a       	sub	r12, r24
    14e6:	d8 0a       	sbc	r13, r24
    14e8:	e8 0a       	sbc	r14, r24
    14ea:	f8 0a       	sbc	r15, r24
    14ec:	f6 94       	lsr	r15
    14ee:	e7 94       	ror	r14
    14f0:	d7 94       	ror	r13
    14f2:	c7 94       	ror	r12
    14f4:	88 ec       	ldi	r24, 0xC8	; 200
    14f6:	b8 2e       	mov	r11, r24
    14f8:	90 e6       	ldi	r25, 0x60	; 96
    14fa:	c9 16       	cp	r12, r25
    14fc:	d1 04       	cpc	r13, r1
/Users/askn/Collaborator/UPDI4AVR-USB/src/usart.cpp:117

  /*** Activates VCP operation. ***/
  /* Detailed parameters are specified in SET_LINE_ENCODING. */
  void change_vcp (void) {
  #ifdef CONFIG_VCP_TXD_ODM
    uint8_t _ctrlb = USART_RXEN_bm | USART_TXEN_bm | USART_ODME_bm;
    14fe:	e1 04       	cpc	r14, r1
    1500:	f1 04       	cpc	r15, r1
/Users/askn/Collaborator/UPDI4AVR-USB/src/usart.cpp:124
    uint8_t _ctrlb = USART_RXEN_bm | USART_TXEN_bm;
  #endif
    uint32_t _baud = _set_line_encoding.dwDTERate;
    /* If the BAUD value is small, select double speed mode. */
    if (_baud) _baud = (((F_CPU * 8L) / _baud) + 1) >> 1;
    if (_baud < 96) {
    1502:	30 f4       	brcc	.+12     	; 0x1510 <USART::change_vcp()+0x76>
    1504:	cc 0c       	add	r12, r12
    1506:	dd 1c       	adc	r13, r13
    1508:	ee 1c       	adc	r14, r14
    150a:	ff 1c       	adc	r15, r15
/Users/askn/Collaborator/UPDI4AVR-USB/src/usart.cpp:125
      _baud <<= 1;
    150c:	2a ec       	ldi	r18, 0xCA	; 202
    150e:	b2 2e       	mov	r11, r18
    1510:	1f 92       	push	r1
    1512:	bf 92       	push	r11
/Users/askn/Collaborator/UPDI4AVR-USB/src/usart.cpp:126
      _ctrlb |= USART_RXMODE_CLK2X_gc;
    1514:	ff 92       	push	r15
    1516:	ef 92       	push	r14
/Users/askn/Collaborator/UPDI4AVR-USB/src/usart.cpp:128
    }
    D1PRINTF(" BAUD=%08lX:%02X\r\n", _baud, _ctrlb);
    1518:	df 92       	push	r13
    151a:	cf 92       	push	r12
    151c:	8f e4       	ldi	r24, 0x4F	; 79
    151e:	98 e0       	ldi	r25, 0x08	; 8
    1520:	9f 93       	push	r25
    1522:	8f 93       	push	r24
    1524:	0d e8       	ldi	r16, 0x8D	; 141
    1526:	10 e6       	ldi	r17, 0x60	; 96
    1528:	1f 93       	push	r17
    152a:	0f 93       	push	r16
    152c:	92 df       	rcall	.-220    	; 0x1452 <Print::printf(PGM_t const*, ...) [clone .constprop.21]>
    152e:	cd bf       	out	0x3d, r28	; 61
    1530:	de bf       	out	0x3e, r29	; 62
    1532:	d7 01       	movw	r26, r14
    1534:	c6 01       	movw	r24, r12
/Users/askn/Collaborator/UPDI4AVR-USB/src/usart.cpp:129
    if (_baud < 0x10000UL && _baud >= 64) {
    1536:	80 54       	subi	r24, 0x40	; 64
    1538:	91 09       	sbc	r25, r1
    153a:	a1 09       	sbc	r26, r1
    153c:	b1 09       	sbc	r27, r1
    153e:	80 3c       	cpi	r24, 0xC0	; 192
    1540:	9f 4f       	sbci	r25, 0xFF	; 255
    1542:	a1 05       	cpc	r26, r1
    1544:	b1 05       	cpc	r27, r1
    1546:	08 f0       	brcs	.+2      	; 0x154a <USART::change_vcp()+0xb0>
    1548:	58 c0       	rjmp	.+176    	; 0x15fa <USART::change_vcp()+0x160>
    154a:	90 91 8c 60 	lds	r25, 0x608C	; 0x80608c <_set_line_encoding+0x6>
    154e:	95 50       	subi	r25, 0x05	; 5
/Users/askn/Collaborator/UPDI4AVR-USB/src/usart.cpp:130
      uint8_t _bits = _set_line_encoding.bDataBits - 5;
    1550:	40 91 2c 60 	lds	r20, 0x602C	; 0x80602c <SYS::_updi_bitmap+0x12>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usart.cpp:131
      uint8_t _ctrlc = (uint8_t[]){
    1554:	50 91 2d 60 	lds	r21, 0x602D	; 0x80602d <SYS::_updi_bitmap+0x13>
    1558:	60 91 2e 60 	lds	r22, 0x602E	; 0x80602e <SYS::_updi_bitmap+0x14>
    155c:	70 91 2f 60 	lds	r23, 0x602F	; 0x80602f <SYS::_updi_bitmap+0x15>
    1560:	49 83       	std	Y+1, r20	; 0x01
    1562:	5a 83       	std	Y+2, r21	; 0x02
    1564:	6b 83       	std	Y+3, r22	; 0x03
    1566:	7c 83       	std	Y+4, r23	; 0x04
    1568:	e0 91 8b 60 	lds	r30, 0x608B	; 0x80608b <_set_line_encoding+0x5>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usart.cpp:133
        USART_PMODE_DISABLED_gc, USART_PMODE_ODD_gc, USART_PMODE_EVEN_gc, USART_PMODE_DISABLED_gc
      }[_set_line_encoding.bParityType & 3]
    156c:	e3 70       	andi	r30, 0x03	; 3
    156e:	ec 0f       	add	r30, r28
    1570:	fd 2f       	mov	r31, r29
    1572:	f1 1d       	adc	r31, r1
    1574:	21 81       	ldd	r18, Z+1	; 0x01
/Users/askn/Collaborator/UPDI4AVR-USB/src/usart.cpp:134
      + _set_line_encoding.bCharFormat ? USART_SBMODE_2BIT_gc : USART_SBMODE_1BIT_gc;
    1576:	80 91 8a 60 	lds	r24, 0x608A	; 0x80608a <_set_line_encoding+0x4>
    157a:	28 0f       	add	r18, r24
    157c:	33 27       	eor	r19, r19
    157e:	33 1f       	adc	r19, r19
    1580:	80 e0       	ldi	r24, 0x00	; 0
    1582:	23 2b       	or	r18, r19
    1584:	09 f0       	breq	.+2      	; 0x1588 <USART::change_vcp()+0xee>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usart.cpp:135
      if (_bits < 4) {
    1586:	88 e0       	ldi	r24, 0x08	; 8
    1588:	94 30       	cpi	r25, 0x04	; 4
/Users/askn/Collaborator/UPDI4AVR-USB/src/usart.cpp:151
      }
      else {
        _ctrlc += USART_CHSIZE_8BIT_gc;
        #endif
      }
      ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    158a:	a8 f5       	brcc	.+106    	; 0x15f6 <USART::change_vcp()+0x15c>
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/tools/avr-gcc/7.3.0-avr8-gnu-toolchain/avr/include/util/atomic.h:50
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    158c:	89 0f       	add	r24, r25
/Users/askn/Collaborator/UPDI4AVR-USB/src/usart.cpp:152
        PORTMUX_USARTROUTEA = PORTMUX_USART_VCP;
    158e:	9f b7       	in	r25, 0x3f	; 63
__iCliRetVal():
    1590:	f8 94       	cli
change_vcp():
    1592:	22 e1       	ldi	r18, 0x12	; 18
/Users/askn/Collaborator/UPDI4AVR-USB/src/usart.cpp:153
        USART0_STATUS = USART_DREIF_bm;
    1594:	20 93 e2 05 	sts	0x05E2, r18	; 0x8005e2 <__TEXT_REGION_LENGTH__+0x7f05e2>
    1598:	20 e2       	ldi	r18, 0x20	; 32
/Users/askn/Collaborator/UPDI4AVR-USB/src/usart.cpp:154
        USART0_BAUD = (uint16_t)_baud;
    159a:	20 93 04 08 	sts	0x0804, r18	; 0x800804 <__TEXT_REGION_LENGTH__+0x7f0804>
    159e:	c0 92 08 08 	sts	0x0808, r12	; 0x800808 <__TEXT_REGION_LENGTH__+0x7f0808>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usart.cpp:155
        USART0_CTRLC = _ctrlc;
    15a2:	d0 92 09 08 	sts	0x0809, r13	; 0x800809 <__TEXT_REGION_LENGTH__+0x7f0809>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usart.cpp:156
        USART0_CTRLA = USART_RXCIF_bm;
    15a6:	80 93 07 08 	sts	0x0807, r24	; 0x800807 <__TEXT_REGION_LENGTH__+0x7f0807>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usart.cpp:157
        USART0_CTRLB = _ctrlb;
    15aa:	80 e8       	ldi	r24, 0x80	; 128
    15ac:	80 93 05 08 	sts	0x0805, r24	; 0x800805 <__TEXT_REGION_LENGTH__+0x7f0805>
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/tools/avr-gcc/7.3.0-avr8-gnu-toolchain/avr/include/util/atomic.h:70
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    15b0:	b0 92 06 08 	sts	0x0806, r11	; 0x800806 <__TEXT_REGION_LENGTH__+0x7f0806>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usart.cpp:160
        bit_set(GPCONF, GPCONF_VCP_bp);
      }
      D1PRINTF(" UART=VCP\r\n");
    15b4:	e1 9a       	sbi	0x1c, 1	; 28
__iRestore():
    15b6:	9f bf       	out	0x3f, r25	; 63
change_vcp():
    15b8:	83 e4       	ldi	r24, 0x43	; 67
    15ba:	98 e0       	ldi	r25, 0x08	; 8
    15bc:	9f 93       	push	r25
    15be:	8f 93       	push	r24
    15c0:	8d e8       	ldi	r24, 0x8D	; 141
    15c2:	90 e6       	ldi	r25, 0x60	; 96
/Users/askn/Collaborator/UPDI4AVR-USB/src/usart.cpp:161
      drain(32768);
    15c4:	9f 93       	push	r25
    15c6:	8f 93       	push	r24
    15c8:	44 df       	rcall	.-376    	; 0x1452 <Print::printf(PGM_t const*, ...) [clone .constprop.21]>
    15ca:	80 e0       	ldi	r24, 0x00	; 0
/Users/askn/Collaborator/UPDI4AVR-USB/src/usart.cpp:165
    }
    else {
      /* If outside the supported range, the USART will remain in the BREAK state. */
      D1PRINTF(" UART=FAIL\r\n");
    15cc:	90 e8       	ldi	r25, 0x80	; 128
    15ce:	81 da       	rcall	.-2814   	; 0xad2 <USART::drain(unsigned int)>
    15d0:	0f 90       	pop	r0
/Users/askn/Collaborator/UPDI4AVR-USB/src/usart.cpp:167
    }
    if (bit_is_set(GPCONF, GPCONF_USB_bp))
    15d2:	0f 90       	pop	r0
/Users/askn/Collaborator/UPDI4AVR-USB/src/usart.cpp:171
      SYS::LED_HeartBeat();
    else
      SYS::LED_Flash();
  }
    15d4:	0f 90       	pop	r0
    15d6:	0f 90       	pop	r0
    15d8:	e0 9b       	sbis	0x1c, 0	; 28
    15da:	17 c0       	rjmp	.+46     	; 0x160a <USART::change_vcp()+0x170>
    15dc:	24 96       	adiw	r28, 0x04	; 4
    15de:	cd bf       	out	0x3d, r28	; 61
    15e0:	de bf       	out	0x3e, r29	; 62
    15e2:	df 91       	pop	r29
    15e4:	cf 91       	pop	r28
    15e6:	1f 91       	pop	r17
    15e8:	0f 91       	pop	r16
    15ea:	ff 90       	pop	r15
/Users/askn/Collaborator/UPDI4AVR-USB/src/usart.cpp:168
    else {
      /* If outside the supported range, the USART will remain in the BREAK state. */
      D1PRINTF(" UART=FAIL\r\n");
    }
    if (bit_is_set(GPCONF, GPCONF_USB_bp))
      SYS::LED_HeartBeat();
    15ec:	ef 90       	pop	r14
/Users/askn/Collaborator/UPDI4AVR-USB/src/usart.cpp:148
        usart_receiver    = &USB::vcp_receiver_9bit;
        usart_transmitter = &USB::vcp_transceiver_9bit;
        #else
      }
      else {
        _ctrlc += USART_CHSIZE_8BIT_gc;
    15ee:	df 90       	pop	r13
    15f0:	cf 90       	pop	r12
/Users/askn/Collaborator/UPDI4AVR-USB/src/usart.cpp:165
      D1PRINTF(" UART=VCP\r\n");
      drain(32768);
    }
    else {
      /* If outside the supported range, the USART will remain in the BREAK state. */
      D1PRINTF(" UART=FAIL\r\n");
    15f2:	bf 90       	pop	r11
    15f4:	a4 cd       	rjmp	.-1208   	; 0x113e <SYS::LED_HeartBeat()>
    15f6:	8d 5f       	subi	r24, 0xFD	; 253
    15f8:	ca cf       	rjmp	.-108    	; 0x158e <USART::change_vcp()+0xf4>
    15fa:	86 e3       	ldi	r24, 0x36	; 54
    15fc:	98 e0       	ldi	r25, 0x08	; 8
    15fe:	9f 93       	push	r25
    1600:	8f 93       	push	r24
    1602:	1f 93       	push	r17
/Users/askn/Collaborator/UPDI4AVR-USB/src/usart.cpp:171
    }
    if (bit_is_set(GPCONF, GPCONF_USB_bp))
      SYS::LED_HeartBeat();
    else
      SYS::LED_Flash();
  }
    1604:	0f 93       	push	r16
    1606:	25 df       	rcall	.-438    	; 0x1452 <Print::printf(PGM_t const*, ...) [clone .constprop.21]>
    1608:	e3 cf       	rjmp	.-58     	; 0x15d0 <USART::change_vcp()+0x136>
    160a:	24 96       	adiw	r28, 0x04	; 4
    160c:	cd bf       	out	0x3d, r28	; 61
    160e:	de bf       	out	0x3e, r29	; 62
    1610:	df 91       	pop	r29
    1612:	cf 91       	pop	r28
    1614:	1f 91       	pop	r17
    1616:	0f 91       	pop	r16
    1618:	ff 90       	pop	r15
    161a:	ef 90       	pop	r14
/Users/askn/Collaborator/UPDI4AVR-USB/src/usart.cpp:170
      D1PRINTF(" UART=FAIL\r\n");
    }
    if (bit_is_set(GPCONF, GPCONF_USB_bp))
      SYS::LED_HeartBeat();
    else
      SYS::LED_Flash();
    161c:	df 90       	pop	r13
    161e:	cf 90       	pop	r12
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:388
    bit_set(GPCONF, GPCONF_BRK_bp);
  }

  void break_off (void) {
    if (bit_is_set(GPCONF, GPCONF_VCP_bp)
     && bit_is_set(GPCONF, GPCONF_BRK_bp)) {
    1620:	bf 90       	pop	r11
    1622:	78 cd       	rjmp	.-1296   	; 0x1114 <SYS::LED_Flash()>

00001624 <USB::break_off()>:
break_off():
    1624:	e1 9b       	sbis	0x1c, 1	; 28
    1626:	04 c0       	rjmp	.+8      	; 0x1630 <USB::break_off()+0xc>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:389
      USART::change_vcp();
    1628:	e3 9b       	sbis	0x1c, 3	; 28
    162a:	02 c0       	rjmp	.+4      	; 0x1630 <USB::break_off()+0xc>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:390
      bit_set(GPCONF, GPCONF_OPN_bp);
    162c:	36 df       	rcall	.-404    	; 0x149a <USART::change_vcp()>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:392
    }
    bit_clear(GPCONF, GPCONF_BRK_bp);
    162e:	e4 9a       	sbi	0x1c, 4	; 28
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:393
  }
    1630:	e3 98       	cbi	0x1c, 3	; 28
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:217
  bool sys_status (void) {
    const static uint8_t _sys_stat[] = {0x55, 0x8B};
    return send_bytes(_sys_stat, 2) && recv();
  }

  bool set_nvmprog_key (bool _reset = true) {
    1632:	08 95       	ret

00001634 <UPDI::set_nvmprog_key(bool)>:
set_nvmprog_key():
    1634:	cf 93       	push	r28
    1636:	df 93       	push	r29
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:218
    D1PRINTF(" PROG_KEY\r\n");
    1638:	d8 2f       	mov	r29, r24
    163a:	8d e5       	ldi	r24, 0x5D	; 93
    163c:	97 e0       	ldi	r25, 0x07	; 7
    163e:	9f 93       	push	r25
    1640:	8f 93       	push	r24
    1642:	8d e8       	ldi	r24, 0x8D	; 141
    1644:	90 e6       	ldi	r25, 0x60	; 96
    1646:	9f 93       	push	r25
    1648:	8f 93       	push	r24
    164a:	03 df       	rcall	.-506    	; 0x1452 <Print::printf(PGM_t const*, ...) [clone .constprop.21]>
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:219
    if (!send_bytes(nvmprog_key, sizeof(nvmprog_key))) return false;
    164c:	6a e0       	ldi	r22, 0x0A	; 10
    164e:	70 e0       	ldi	r23, 0x00	; 0
    1650:	83 e4       	ldi	r24, 0x43	; 67
    1652:	90 e6       	ldi	r25, 0x60	; 96
    1654:	b5 da       	rcall	.-2710   	; 0xbc0 <UPDI::send_bytes(unsigned char const*, unsigned int)>
    1656:	c8 2f       	mov	r28, r24
    1658:	0f 90       	pop	r0
    165a:	0f 90       	pop	r0
    165c:	0f 90       	pop	r0
    165e:	0f 90       	pop	r0
    1660:	88 23       	and	r24, r24
    1662:	f1 f0       	breq	.+60     	; 0x16a0 <UPDI::set_nvmprog_key(bool)+0x6c>
    1664:	c9 da       	rcall	.-2670   	; 0xbf8 <UPDI::key_status()>
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:220
    do { key_status(); } while(bit_is_clear(RXDATA, 4));  /* wait set NVMPROG */
    1666:	fc 9b       	sbis	0x1f, 4	; 31
    1668:	fd cf       	rjmp	.-6      	; 0x1664 <UPDI::set_nvmprog_key(bool)+0x30>
    166a:	8f b3       	in	r24, 0x1f	; 31
    166c:	1f 92       	push	r1
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:221
    D1PRINTF(" KEY=%02X\r\n", RXDATA);
    166e:	8f 93       	push	r24
    1670:	81 e5       	ldi	r24, 0x51	; 81
    1672:	97 e0       	ldi	r25, 0x07	; 7
    1674:	9f 93       	push	r25
    1676:	8f 93       	push	r24
    1678:	8d e8       	ldi	r24, 0x8D	; 141
    167a:	90 e6       	ldi	r25, 0x60	; 96
    167c:	9f 93       	push	r25
    167e:	8f 93       	push	r24
    1680:	e8 de       	rcall	.-560    	; 0x1452 <Print::printf(PGM_t const*, ...) [clone .constprop.21]>
    1682:	0f 90       	pop	r0
    1684:	0f 90       	pop	r0
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:222
    return _reset ? sys_reset(false) : true;
    1686:	0f 90       	pop	r0
    1688:	0f 90       	pop	r0
    168a:	0f 90       	pop	r0
    168c:	0f 90       	pop	r0
    168e:	dd 23       	and	r29, r29
    1690:	39 f0       	breq	.+14     	; 0x16a0 <UPDI::set_nvmprog_key(bool)+0x6c>
sys_reset():
    1692:	66 e0       	ldi	r22, 0x06	; 6
    1694:	70 e0       	ldi	r23, 0x00	; 0
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:130
    const static uint8_t _reset[] = {
      0x55, 0xC8, 0x59, /* SYSRST */
      0x55, 0xC8, 0x00, /* SYSRUN */
      0x55, 0xC3, 0x04  /* UPDIDIS */
    };
    return send_bytes(_reset, _leave ? 9 : 6);
    1696:	82 e7       	ldi	r24, 0x72	; 114
    1698:	90 e6       	ldi	r25, 0x60	; 96
set_nvmprog_key():
    169a:	df 91       	pop	r29
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:223
    D1PRINTF(" PROG_KEY\r\n");
    if (!send_bytes(nvmprog_key, sizeof(nvmprog_key))) return false;
    do { key_status(); } while(bit_is_clear(RXDATA, 4));  /* wait set NVMPROG */
    D1PRINTF(" KEY=%02X\r\n", RXDATA);
    return _reset ? sys_reset(false) : true;
  }
    169c:	cf 91       	pop	r28
sys_reset():
    169e:	90 ca       	rjmp	.-2784   	; 0xbc0 <UPDI::send_bytes(unsigned char const*, unsigned int)>
set_nvmprog_key():
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:130
    const static uint8_t _reset[] = {
      0x55, 0xC8, 0x59, /* SYSRST */
      0x55, 0xC8, 0x00, /* SYSRUN */
      0x55, 0xC3, 0x04  /* UPDIDIS */
    };
    return send_bytes(_reset, _leave ? 9 : 6);
    16a0:	8c 2f       	mov	r24, r28
    16a2:	df 91       	pop	r29
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:223
    D1PRINTF(" PROG_KEY\r\n");
    if (!send_bytes(nvmprog_key, sizeof(nvmprog_key))) return false;
    do { key_status(); } while(bit_is_clear(RXDATA, 4));  /* wait set NVMPROG */
    D1PRINTF(" KEY=%02X\r\n", RXDATA);
    return _reset ? sys_reset(false) : true;
  }
    16a4:	cf 91       	pop	r28
    16a6:	08 95       	ret

000016a8 <UPDI::enter_progmode()>:
enter_progmode():
    16a8:	e9 99       	sbic	0x1d, 1	; 29
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:392
    openDrainWriteMacro(PIN_PG_TRST, HIGH);
    return _result;
  }

  size_t enter_progmode (void) {
    if (bit_is_set(PGCONF, PGCONF_PROG_bp)) return 1;
    16aa:	21 c0       	rjmp	.+66     	; 0x16ee <UPDI::enter_progmode()+0x46>
    16ac:	ef 9a       	sbi	0x1d, 7	; 29
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:393
    bit_set(PGCONF, PGCONF_FAIL_bp);
    16ae:	81 e0       	ldi	r24, 0x01	; 1
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:394
    if (!set_nvmprog_key()) return 0;
    16b0:	c1 df       	rcall	.-126    	; 0x1634 <UPDI::set_nvmprog_key(bool)>
    16b2:	88 23       	and	r24, r24
    16b4:	f9 f0       	breq	.+62     	; 0x16f4 <UPDI::enter_progmode()+0x4c>
    16b6:	97 da       	rcall	.-2770   	; 0xbe6 <UPDI::sys_status()>
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:395
    do { sys_status(); } while(bit_is_clear(RXDATA, 3));  /* wait set PROGSTART */
    16b8:	fb 9b       	sbis	0x1f, 3	; 31
    16ba:	fd cf       	rjmp	.-6      	; 0x16b6 <UPDI::enter_progmode()+0xe>
    16bc:	8f b3       	in	r24, 0x1f	; 31
    16be:	1f 92       	push	r1
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:396
    D1PRINTF(" PROGSTART=%02X\r\n", RXDATA);
    16c0:	8f 93       	push	r24
    16c2:	88 e1       	ldi	r24, 0x18	; 24
    16c4:	98 e0       	ldi	r25, 0x08	; 8
    16c6:	9f 93       	push	r25
    16c8:	8f 93       	push	r24
    16ca:	8d e8       	ldi	r24, 0x8D	; 141
    16cc:	90 e6       	ldi	r25, 0x60	; 96
    16ce:	9f 93       	push	r25
    16d0:	8f 93       	push	r24
    16d2:	bf de       	rcall	.-642    	; 0x1452 <Print::printf(PGM_t const*, ...) [clone .constprop.21]>
    16d4:	ef 98       	cbi	0x1d, 7	; 29
    16d6:	e9 9a       	sbi	0x1d, 1	; 29
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:397
    bit_clear(PGCONF, PGCONF_FAIL_bp);
    16d8:	0f 90       	pop	r0
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:398
    bit_set(PGCONF, PGCONF_PROG_bp);
    16da:	0f 90       	pop	r0
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:399
    return (*Command_Table.prog_init)();
    16dc:	0f 90       	pop	r0
    16de:	0f 90       	pop	r0
    16e0:	0f 90       	pop	r0
    16e2:	0f 90       	pop	r0
    16e4:	e0 91 0e 63 	lds	r30, 0x630E	; 0x80630e <Command_Table>
    16e8:	f0 91 0f 63 	lds	r31, 0x630F	; 0x80630f <Command_Table+0x1>
    16ec:	09 94       	ijmp
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:392
    openDrainWriteMacro(PIN_PG_TRST, HIGH);
    return _result;
  }

  size_t enter_progmode (void) {
    if (bit_is_set(PGCONF, PGCONF_PROG_bp)) return 1;
    16ee:	81 e0       	ldi	r24, 0x01	; 1
    16f0:	90 e0       	ldi	r25, 0x00	; 0
    16f2:	08 95       	ret
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:394
    bit_set(PGCONF, PGCONF_FAIL_bp);
    if (!set_nvmprog_key()) return 0;
    16f4:	90 e0       	ldi	r25, 0x00	; 0
    16f6:	80 e0       	ldi	r24, 0x00	; 0
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:269
  /*
   * Use the UPDI ACC to write to the USERROW of the locked chip.
   * The write start address should match the USERROW address.
   * The write length should match the USERROW field.
   */
  bool write_userrow (void) {
    16f8:	08 95       	ret

000016fa <UPDI::write_userrow()>:
write_userrow():
    16fa:	cf 92       	push	r12
    16fc:	df 92       	push	r13
    16fe:	ef 92       	push	r14
    1700:	ff 92       	push	r15
    1702:	0f 93       	push	r16
    1704:	1f 93       	push	r17
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:278
    uint32_t _dwAddr = packet.out.dwAddr;
    size_t  _wLength = packet.out.dwLength;
    if (bit_is_clear(PGCONF, PGCONF_UPDI_bp)
     || m_type != 0xC5 
     || _wLength != Device_Descriptor.UPDI.user_sig_bytes
     || (uint16_t)_dwAddr != Device_Descriptor.UPDI.user_sig_base) return false;
    1706:	cf 93       	push	r28
    1708:	df 93       	push	r29
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:296
      do { sys_status(); } while(bit_is_clear(RXDATA, 3));  /* wait set PROGSTART */
      D1PRINTF(" RE_PROGSTART=%02X\r\n", RXDATA);
      return true;
    }
    else return sys_reset(false);
  }
    170a:	e8 99       	sbic	0x1d, 0	; 29
    170c:	0b c0       	rjmp	.+22     	; 0x1724 <UPDI::write_userrow()+0x2a>
    170e:	10 e0       	ldi	r17, 0x00	; 0
    1710:	81 2f       	mov	r24, r17
    1712:	df 91       	pop	r29
    1714:	cf 91       	pop	r28
    1716:	1f 91       	pop	r17
    1718:	0f 91       	pop	r16
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:276
    const static uint8_t _urowstop[] = { 0x55, 0xC7, 0x20 };
    uint8_t   m_type = packet.out.bMType;
    uint32_t _dwAddr = packet.out.dwAddr;
    size_t  _wLength = packet.out.dwLength;
    if (bit_is_clear(PGCONF, PGCONF_UPDI_bp)
     || m_type != 0xC5 
    171a:	ff 90       	pop	r15
    171c:	ef 90       	pop	r14
    171e:	df 90       	pop	r13
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:277
     || _wLength != Device_Descriptor.UPDI.user_sig_bytes
    1720:	cf 90       	pop	r12
    1722:	08 95       	ret
    1724:	80 91 d5 60 	lds	r24, 0x60D5	; 0x8060d5 <packet+0x7>
    1728:	85 3c       	cpi	r24, 0xC5	; 197
    172a:	89 f7       	brne	.-30     	; 0x170e <UPDI::write_userrow()+0x14>
    172c:	c0 91 b6 60 	lds	r28, 0x60B6	; 0x8060b6 <Device_Descriptor+0x18>
    1730:	d0 91 b7 60 	lds	r29, 0x60B7	; 0x8060b7 <Device_Descriptor+0x19>
    1734:	80 91 da 60 	lds	r24, 0x60DA	; 0x8060da <packet+0xc>
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:273
   */
  bool write_userrow (void) {
    const static uint8_t _urowdone[] = { 0x55, 0xCA, 0x03 };
    const static uint8_t _urowstop[] = { 0x55, 0xC7, 0x20 };
    uint8_t   m_type = packet.out.bMType;
    uint32_t _dwAddr = packet.out.dwAddr;
    1738:	90 91 db 60 	lds	r25, 0x60DB	; 0x8060db <packet+0xd>
    173c:	c8 17       	cp	r28, r24
    173e:	d9 07       	cpc	r29, r25
    1740:	31 f7       	brne	.-52     	; 0x170e <UPDI::write_userrow()+0x14>
    1742:	c0 90 d6 60 	lds	r12, 0x60D6	; 0x8060d6 <packet+0x8>
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:278
    size_t  _wLength = packet.out.dwLength;
    if (bit_is_clear(PGCONF, PGCONF_UPDI_bp)
     || m_type != 0xC5 
     || _wLength != Device_Descriptor.UPDI.user_sig_bytes
     || (uint16_t)_dwAddr != Device_Descriptor.UPDI.user_sig_base) return false;
    1746:	d0 90 d7 60 	lds	r13, 0x60D7	; 0x8060d7 <packet+0x9>
    174a:	e0 90 d8 60 	lds	r14, 0x60D8	; 0x8060d8 <packet+0xa>
    174e:	f0 90 d9 60 	lds	r15, 0x60D9	; 0x8060d9 <packet+0xb>
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:279
    bit_set(PGCONF, PGCONF_FAIL_bp);
    1752:	80 91 c0 60 	lds	r24, 0x60C0	; 0x8060c0 <Device_Descriptor+0x22>
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:280
    USART::drain();
    1756:	90 91 c1 60 	lds	r25, 0x60C1	; 0x8060c1 <Device_Descriptor+0x23>
    175a:	8c 15       	cp	r24, r12
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:281
    D1PRINTF(" ENTER_UROW=%04lX:%04X\r\n", _dwAddr, _wLength);
    175c:	9d 05       	cpc	r25, r13
    175e:	b9 f6       	brne	.-82     	; 0x170e <UPDI::write_userrow()+0x14>
    1760:	ef 9a       	sbi	0x1d, 7	; 29
    1762:	90 e0       	ldi	r25, 0x00	; 0
    1764:	80 e0       	ldi	r24, 0x00	; 0
    1766:	b5 d9       	rcall	.-3222   	; 0xad2 <USART::drain(unsigned int)>
    1768:	df 93       	push	r29
    176a:	cf 93       	push	r28
    176c:	ff 92       	push	r15
    176e:	ef 92       	push	r14
    1770:	df 92       	push	r13
    1772:	cf 92       	push	r12
    1774:	8f ec       	ldi	r24, 0xCF	; 207
    1776:	97 e0       	ldi	r25, 0x07	; 7
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:235
    D1PRINTF(" KEY=%02X\r\n", RXDATA);
    return sys_reset(false);
  }

  bool set_urowwrite_key (void) {
    D1PRINTF(" UROW_KEY\r\n");
    1778:	9f 93       	push	r25
    177a:	8f 93       	push	r24
    177c:	0d e8       	ldi	r16, 0x8D	; 141
    177e:	10 e6       	ldi	r17, 0x60	; 96
    1780:	1f 93       	push	r17
    1782:	0f 93       	push	r16
    1784:	66 de       	rcall	.-820    	; 0x1452 <Print::printf(PGM_t const*, ...) [clone .constprop.21]>
set_urowwrite_key():
    1786:	8e ea       	ldi	r24, 0xAE	; 174
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:236
    if (!send_bytes(urowwrite_key, sizeof(urowwrite_key))) return false;
    1788:	97 e0       	ldi	r25, 0x07	; 7
    178a:	9f 93       	push	r25
    178c:	8f 93       	push	r24
    178e:	1f 93       	push	r17
    1790:	0f 93       	push	r16
    1792:	5f de       	rcall	.-834    	; 0x1452 <Print::printf(PGM_t const*, ...) [clone .constprop.21]>
    1794:	6a e0       	ldi	r22, 0x0A	; 10
    1796:	70 e0       	ldi	r23, 0x00	; 0
    1798:	87 e5       	ldi	r24, 0x57	; 87
    179a:	90 e6       	ldi	r25, 0x60	; 96
    179c:	11 da       	rcall	.-3038   	; 0xbc0 <UPDI::send_bytes(unsigned char const*, unsigned int)>
    179e:	2d b7       	in	r18, 0x3d	; 61
    17a0:	3e b7       	in	r19, 0x3e	; 62
    17a2:	22 5f       	subi	r18, 0xF2	; 242
    17a4:	3f 4f       	sbci	r19, 0xFF	; 255
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:237
    do { key_status(); } while(bit_is_clear(RXDATA, 5));  /* wait set UROWWRITE */
    17a6:	2d bf       	out	0x3d, r18	; 61
    17a8:	3e bf       	out	0x3e, r19	; 62
    17aa:	88 23       	and	r24, r24
    17ac:	09 f4       	brne	.+2      	; 0x17b0 <UPDI::write_userrow()+0xb6>
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:238
    D1PRINTF(" KEY=%02X\r\n", RXDATA);
    17ae:	af cf       	rjmp	.-162    	; 0x170e <UPDI::write_userrow()+0x14>
    17b0:	23 da       	rcall	.-3002   	; 0xbf8 <UPDI::key_status()>
    17b2:	fd 9b       	sbis	0x1f, 5	; 31
    17b4:	fd cf       	rjmp	.-6      	; 0x17b0 <UPDI::write_userrow()+0xb6>
    17b6:	8f b3       	in	r24, 0x1f	; 31
    17b8:	1f 92       	push	r1
    17ba:	8f 93       	push	r24
    17bc:	82 ea       	ldi	r24, 0xA2	; 162
    17be:	97 e0       	ldi	r25, 0x07	; 7
    17c0:	9f 93       	push	r25
    17c2:	8f 93       	push	r24
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:130
    const static uint8_t _reset[] = {
      0x55, 0xC8, 0x59, /* SYSRST */
      0x55, 0xC8, 0x00, /* SYSRUN */
      0x55, 0xC3, 0x04  /* UPDIDIS */
    };
    return send_bytes(_reset, _leave ? 9 : 6);
    17c4:	8d e8       	ldi	r24, 0x8D	; 141
    17c6:	90 e6       	ldi	r25, 0x60	; 96
    17c8:	9f 93       	push	r25
    17ca:	8f 93       	push	r24
    17cc:	42 de       	rcall	.-892    	; 0x1452 <Print::printf(PGM_t const*, ...) [clone .constprop.21]>
sys_reset():
    17ce:	66 e0       	ldi	r22, 0x06	; 6
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:282
     || _wLength != Device_Descriptor.UPDI.user_sig_bytes
     || (uint16_t)_dwAddr != Device_Descriptor.UPDI.user_sig_base) return false;
    bit_set(PGCONF, PGCONF_FAIL_bp);
    USART::drain();
    D1PRINTF(" ENTER_UROW=%04lX:%04X\r\n", _dwAddr, _wLength);
    if (!set_urowwrite_key()) return false;
    17d0:	70 e0       	ldi	r23, 0x00	; 0
    17d2:	82 e7       	ldi	r24, 0x72	; 114
    17d4:	90 e6       	ldi	r25, 0x60	; 96
    17d6:	f4 d9       	rcall	.-3096   	; 0xbc0 <UPDI::send_bytes(unsigned char const*, unsigned int)>
    17d8:	18 2f       	mov	r17, r24
write_userrow():
    17da:	0f 90       	pop	r0
    17dc:	0f 90       	pop	r0
    17de:	0f 90       	pop	r0
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:283
    do { sys_status(); } while(bit_is_clear(RXDATA, 2));    /* wait set UROWPROG */
    17e0:	0f 90       	pop	r0
    17e2:	0f 90       	pop	r0
    17e4:	0f 90       	pop	r0
    17e6:	88 23       	and	r24, r24
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:284
    send_bytes_block(_dwAddr, _wLength);
    17e8:	09 f4       	brne	.+2      	; 0x17ec <UPDI::write_userrow()+0xf2>
    17ea:	91 cf       	rjmp	.-222    	; 0x170e <UPDI::write_userrow()+0x14>
    17ec:	fc d9       	rcall	.-3080   	; 0xbe6 <UPDI::sys_status()>
    17ee:	fa 9b       	sbis	0x1f, 2	; 31
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:285
    send_bytes(_urowdone, 3);
    17f0:	fd cf       	rjmp	.-6      	; 0x17ec <UPDI::write_userrow()+0xf2>
    17f2:	ae 01       	movw	r20, r28
    17f4:	c7 01       	movw	r24, r14
    17f6:	b6 01       	movw	r22, r12
    17f8:	60 da       	rcall	.-2880   	; 0xcba <UPDI::send_bytes_block(unsigned long, unsigned int)>
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:286
    do { sys_status(); } while(bit_is_set(RXDATA, 2));      /* wait clear UROWPROG */
    17fa:	63 e0       	ldi	r22, 0x03	; 3
    17fc:	70 e0       	ldi	r23, 0x00	; 0
    17fe:	84 e6       	ldi	r24, 0x64	; 100
    1800:	90 e6       	ldi	r25, 0x60	; 96
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:287
    send_bytes(_urowstop, 3);
    1802:	de d9       	rcall	.-3140   	; 0xbc0 <UPDI::send_bytes(unsigned char const*, unsigned int)>
    1804:	f0 d9       	rcall	.-3104   	; 0xbe6 <UPDI::sys_status()>
    1806:	fa 99       	sbic	0x1f, 2	; 31
    1808:	fd cf       	rjmp	.-6      	; 0x1804 <UPDI::write_userrow()+0x10a>
    180a:	63 e0       	ldi	r22, 0x03	; 3
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:288
    bit_clear(PGCONF, PGCONF_FAIL_bp);
    180c:	70 e0       	ldi	r23, 0x00	; 0
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:289
    if (bit_is_set(PGCONF, PGCONF_PROG_bp)) {
    180e:	81 e6       	ldi	r24, 0x61	; 97
    1810:	90 e6       	ldi	r25, 0x60	; 96
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:290
      set_nvmprog_key();
    1812:	d6 d9       	rcall	.-3156   	; 0xbc0 <UPDI::send_bytes(unsigned char const*, unsigned int)>
    1814:	ef 98       	cbi	0x1d, 7	; 29
    1816:	e9 9b       	sbis	0x1d, 1	; 29
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:291
      do { sys_status(); } while(bit_is_clear(RXDATA, 3));  /* wait set PROGSTART */
    1818:	18 c0       	rjmp	.+48     	; 0x184a <UPDI::write_userrow()+0x150>
    181a:	81 e0       	ldi	r24, 0x01	; 1
    181c:	0b df       	rcall	.-490    	; 0x1634 <UPDI::set_nvmprog_key(bool)>
    181e:	e3 d9       	rcall	.-3130   	; 0xbe6 <UPDI::sys_status()>
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:292
      D1PRINTF(" RE_PROGSTART=%02X\r\n", RXDATA);
    1820:	fb 9b       	sbis	0x1f, 3	; 31
    1822:	fd cf       	rjmp	.-6      	; 0x181e <UPDI::write_userrow()+0x124>
    1824:	8f b3       	in	r24, 0x1f	; 31
    1826:	1f 92       	push	r1
    1828:	8f 93       	push	r24
    182a:	8a eb       	ldi	r24, 0xBA	; 186
    182c:	97 e0       	ldi	r25, 0x07	; 7
    182e:	9f 93       	push	r25
    1830:	8f 93       	push	r24
    1832:	8d e8       	ldi	r24, 0x8D	; 141
    1834:	90 e6       	ldi	r25, 0x60	; 96
    1836:	9f 93       	push	r25
    1838:	8f 93       	push	r24
    183a:	0b de       	rcall	.-1002   	; 0x1452 <Print::printf(PGM_t const*, ...) [clone .constprop.21]>
    183c:	0f 90       	pop	r0
    183e:	0f 90       	pop	r0
    1840:	0f 90       	pop	r0
    1842:	0f 90       	pop	r0
    1844:	0f 90       	pop	r0
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:130
    const static uint8_t _reset[] = {
      0x55, 0xC8, 0x59, /* SYSRST */
      0x55, 0xC8, 0x00, /* SYSRUN */
      0x55, 0xC3, 0x04  /* UPDIDIS */
    };
    return send_bytes(_reset, _leave ? 9 : 6);
    1846:	0f 90       	pop	r0
    1848:	63 cf       	rjmp	.-314    	; 0x1710 <UPDI::write_userrow()+0x16>
sys_reset():
    184a:	66 e0       	ldi	r22, 0x06	; 6
    184c:	70 e0       	ldi	r23, 0x00	; 0
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:296
      do { sys_status(); } while(bit_is_clear(RXDATA, 3));  /* wait set PROGSTART */
      D1PRINTF(" RE_PROGSTART=%02X\r\n", RXDATA);
      return true;
    }
    else return sys_reset(false);
  }
    184e:	82 e7       	ldi	r24, 0x72	; 114
    1850:	90 e6       	ldi	r25, 0x60	; 96
write_userrow():
    1852:	df 91       	pop	r29
    1854:	cf 91       	pop	r28
    1856:	1f 91       	pop	r17
    1858:	0f 91       	pop	r16
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:130
    const static uint8_t _reset[] = {
      0x55, 0xC8, 0x59, /* SYSRST */
      0x55, 0xC8, 0x00, /* SYSRUN */
      0x55, 0xC3, 0x04  /* UPDIDIS */
    };
    return send_bytes(_reset, _leave ? 9 : 6);
    185a:	ff 90       	pop	r15
    185c:	ef 90       	pop	r14
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv5.cpp:136
    }
    /* Page erase will not be used if received. */
    return 1;
  }

  size_t write_memory (void) {
    185e:	df 90       	pop	r13
    1860:	cf 90       	pop	r12
sys_reset():
    1862:	ae c9       	rjmp	.-3236   	; 0xbc0 <UPDI::send_bytes(unsigned char const*, unsigned int)>

00001864 <NVM::V5::write_memory()>:
write_memory():
    1864:	cf 92       	push	r12
    1866:	df 92       	push	r13
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv5.cpp:140
    uint8_t   m_type = packet.out.bMType;
    uint32_t _dwAddr = packet.out.dwAddr;
    size_t  _wLength = packet.out.dwLength;
    if (bit_is_clear(PGCONF, PGCONF_PROG_bp)) return UPDI::write_userrow();
    1868:	ef 92       	push	r14
    186a:	ff 92       	push	r15
    186c:	cf 93       	push	r28
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv5.cpp:160
      _dwAddr += PROG_START;
      return write_words_flash(_dwAddr, _wLength);
    }
    else {
      /* MTYPE_SRAM */
      return UPDI::send_bytes_block(_dwAddr, _wLength);
    186e:	df 93       	push	r29
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv5.cpp:162
    }
  }
    1870:	e9 99       	sbic	0x1d, 1	; 29
    1872:	09 c0       	rjmp	.+18     	; 0x1886 <NVM::V5::write_memory()+0x22>
    1874:	42 df       	rcall	.-380    	; 0x16fa <UPDI::write_userrow()>
    1876:	90 e0       	ldi	r25, 0x00	; 0
    1878:	df 91       	pop	r29
    187a:	cf 91       	pop	r28
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv5.cpp:137
    /* Page erase will not be used if received. */
    return 1;
  }

  size_t write_memory (void) {
    uint8_t   m_type = packet.out.bMType;
    187c:	ff 90       	pop	r15
    187e:	ef 90       	pop	r14
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv5.cpp:138
    uint32_t _dwAddr = packet.out.dwAddr;
    1880:	df 90       	pop	r13
    1882:	cf 90       	pop	r12
    1884:	08 95       	ret
    1886:	80 91 d5 60 	lds	r24, 0x60D5	; 0x8060d5 <packet+0x7>
    188a:	c0 90 d6 60 	lds	r12, 0x60D6	; 0x8060d6 <packet+0x8>
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv5.cpp:139
    size_t  _wLength = packet.out.dwLength;
    188e:	d0 90 d7 60 	lds	r13, 0x60D7	; 0x8060d7 <packet+0x9>
    1892:	e0 90 d8 60 	lds	r14, 0x60D8	; 0x8060d8 <packet+0xa>
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv5.cpp:141
    if (bit_is_clear(PGCONF, PGCONF_PROG_bp)) return UPDI::write_userrow();
    if (m_type == 0x22 || m_type == 0xB2 || m_type == 0xB3 || m_type == 0xC4) {
    1896:	f0 90 d9 60 	lds	r15, 0x60D9	; 0x8060d9 <packet+0xb>
    189a:	c0 91 da 60 	lds	r28, 0x60DA	; 0x8060da <packet+0xc>
    189e:	d0 91 db 60 	lds	r29, 0x60DB	; 0x8060db <packet+0xd>
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv5.cpp:93
  }

  bool write_eeprom (uint32_t _dwAddr, size_t _wLength) {
    D2PRINTF(" NVM_V5_EEPERW=%06lX\r\n", _dwAddr);
    return (
      nvm_ctrl_change(0x00)
    18a2:	82 32       	cpi	r24, 0x22	; 34
    18a4:	31 f0       	breq	.+12     	; 0x18b2 <NVM::V5::write_memory()+0x4e>
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv5.cpp:96
      && UPDI::send_bytes_block(_dwAddr, _wLength)
      && nvm_ctrl_change(0x15)  /* NVM_V5_CMD_EEPERW */
      && (nvm_wait() & 0x73) == 0
    18a6:	9e e4       	ldi	r25, 0x4E	; 78
    18a8:	98 0f       	add	r25, r24
    18aa:	92 30       	cpi	r25, 0x02	; 2
    18ac:	10 f0       	brcs	.+4      	; 0x18b2 <NVM::V5::write_memory()+0x4e>
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv5.cpp:94

  bool write_eeprom (uint32_t _dwAddr, size_t _wLength) {
    D2PRINTF(" NVM_V5_EEPERW=%06lX\r\n", _dwAddr);
    return (
      nvm_ctrl_change(0x00)
      && UPDI::send_bytes_block(_dwAddr, _wLength)
    18ae:	84 3c       	cpi	r24, 0xC4	; 196
    18b0:	91 f4       	brne	.+36     	; 0x18d6 <NVM::V5::write_memory()+0x72>
write_eeprom():
    18b2:	80 e0       	ldi	r24, 0x00	; 0
    18b4:	6b dc       	rcall	.-1834   	; 0x118c <NVM::V3::nvm_ctrl_change(unsigned char)>
    18b6:	81 11       	cpse	r24, r1
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv5.cpp:95
      && nvm_ctrl_change(0x15)  /* NVM_V5_CMD_EEPERW */
    18b8:	02 c0       	rjmp	.+4      	; 0x18be <NVM::V5::write_memory()+0x5a>
write_memory():
    18ba:	80 e0       	ldi	r24, 0x00	; 0
    18bc:	dc cf       	rjmp	.-72     	; 0x1876 <NVM::V5::write_memory()+0x12>
write_eeprom():
    18be:	ae 01       	movw	r20, r28
    18c0:	c7 01       	movw	r24, r14
    18c2:	b6 01       	movw	r22, r12
    18c4:	fa d9       	rcall	.-3084   	; 0xcba <UPDI::send_bytes_block(unsigned long, unsigned int)>
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv5.cpp:148
      /* MTYPE_LOCK_BITS */
      /* MTYPE_EEPROM */
      /* MTYPE_EEPROM_XMEGA */
      return write_eeprom(_dwAddr, _wLength);
    }
    else if (m_type == 0xC0 || m_type == 0xC5) {
    18c6:	88 23       	and	r24, r24
    18c8:	c1 f3       	breq	.-16     	; 0x18ba <NVM::V5::write_memory()+0x56>
    18ca:	85 e1       	ldi	r24, 0x15	; 21
    18cc:	5f dc       	rcall	.-1858   	; 0x118c <NVM::V3::nvm_ctrl_change(unsigned char)>
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv5.cpp:151
      /* MTYPE_FLASH (alias) */
      /* MTYPE_USERSIG (USERROW, BOOTROW) */
      return write_bytes_flash(_dwAddr, _wLength);
    18ce:	88 23       	and	r24, r24
    18d0:	a1 f3       	breq	.-24     	; 0x18ba <NVM::V5::write_memory()+0x56>
    18d2:	55 dc       	rcall	.-1878   	; 0x117e <NVM::V3::write_eeprom(unsigned long, unsigned int) [clone .part.3]>
    18d4:	d0 cf       	rjmp	.-96     	; 0x1876 <NVM::V5::write_memory()+0x12>
write_memory():
    18d6:	80 3c       	cpi	r24, 0xC0	; 192
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv5.cpp:153
    }
    else if (m_type == 0xB0) {
    18d8:	11 f0       	breq	.+4      	; 0x18de <NVM::V5::write_memory()+0x7a>
    18da:	85 3c       	cpi	r24, 0xC5	; 197
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv5.cpp:155
      /* MTYPE_FLASH_PAGE (PROGMEM) */
      _dwAddr += PROG_START;
    18dc:	29 f4       	brne	.+10     	; 0x18e8 <NVM::V5::write_memory()+0x84>
    18de:	ae 01       	movw	r20, r28
    18e0:	c7 01       	movw	r24, r14
    18e2:	b6 01       	movw	r22, r12
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv5.cpp:156
      return write_words_flash(_dwAddr, _wLength);
    18e4:	7b dc       	rcall	.-1802   	; 0x11dc <NVM::V3::write_bytes_flash(unsigned long, unsigned int)>
    18e6:	c7 cf       	rjmp	.-114    	; 0x1876 <NVM::V5::write_memory()+0x12>
    18e8:	80 3b       	cpi	r24, 0xB0	; 176
    18ea:	39 f4       	brne	.+14     	; 0x18fa <NVM::V5::write_memory()+0x96>
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv5.cpp:160
    }
    else {
      /* MTYPE_SRAM */
      return UPDI::send_bytes_block(_dwAddr, _wLength);
    18ec:	c7 01       	movw	r24, r14
    18ee:	b6 01       	movw	r22, r12
    18f0:	80 58       	subi	r24, 0x80	; 128
    18f2:	9f 4f       	sbci	r25, 0xFF	; 255
    18f4:	ae 01       	movw	r20, r28
    18f6:	98 dc       	rcall	.-1744   	; 0x1228 <NVM::V3::write_words_flash(unsigned long, unsigned int)>
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv4.cpp:158
    /* Page erase will not be used if received. */
    /* Instead, page erase is determined by the is_boundary_flash_page function. */
    return 1;
  }

  size_t write_memory (void) {
    18f8:	be cf       	rjmp	.-132    	; 0x1876 <NVM::V5::write_memory()+0x12>
    18fa:	ae 01       	movw	r20, r28
    18fc:	c7 01       	movw	r24, r14
    18fe:	b6 01       	movw	r22, r12
    1900:	dc d9       	rcall	.-3144   	; 0xcba <UPDI::send_bytes_block(unsigned long, unsigned int)>
    1902:	b9 cf       	rjmp	.-142    	; 0x1876 <NVM::V5::write_memory()+0x12>

00001904 <NVM::V4::write_memory()>:
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv4.cpp:162
    uint8_t   m_type = packet.out.bMType;
    uint32_t _dwAddr = packet.out.dwAddr;
    size_t  _wLength = packet.out.dwLength;
    if (bit_is_clear(PGCONF, PGCONF_PROG_bp)) return UPDI::write_userrow();
    1904:	cf 92       	push	r12
    1906:	df 92       	push	r13
    1908:	ef 92       	push	r14
    190a:	ff 92       	push	r15
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv4.cpp:182
      _dwAddr += PROG_START;
      return write_words_flash(_dwAddr, _wLength);
    }
    else {
      /* MTYPE_SRAM */
      return UPDI::send_bytes_block(_dwAddr, _wLength);
    190c:	cf 93       	push	r28
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv4.cpp:184
    }
  }
    190e:	df 93       	push	r29
    1910:	e9 99       	sbic	0x1d, 1	; 29
    1912:	09 c0       	rjmp	.+18     	; 0x1926 <NVM::V4::write_memory()+0x22>
    1914:	f2 de       	rcall	.-540    	; 0x16fa <UPDI::write_userrow()>
    1916:	90 e0       	ldi	r25, 0x00	; 0
    1918:	df 91       	pop	r29
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv4.cpp:159
    /* Instead, page erase is determined by the is_boundary_flash_page function. */
    return 1;
  }

  size_t write_memory (void) {
    uint8_t   m_type = packet.out.bMType;
    191a:	cf 91       	pop	r28
    191c:	ff 90       	pop	r15
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv4.cpp:160
    uint32_t _dwAddr = packet.out.dwAddr;
    191e:	ef 90       	pop	r14
    1920:	df 90       	pop	r13
    1922:	cf 90       	pop	r12
    1924:	08 95       	ret
    1926:	80 91 d5 60 	lds	r24, 0x60D5	; 0x8060d5 <packet+0x7>
    192a:	c0 90 d6 60 	lds	r12, 0x60D6	; 0x8060d6 <packet+0x8>
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv4.cpp:161
    size_t  _wLength = packet.out.dwLength;
    192e:	d0 90 d7 60 	lds	r13, 0x60D7	; 0x8060d7 <packet+0x9>
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv4.cpp:163
    if (bit_is_clear(PGCONF, PGCONF_PROG_bp)) return UPDI::write_userrow();
    if (m_type == 0x22 || m_type == 0xB2 || m_type == 0xB3 || m_type == 0xC4) {
    1932:	e0 90 d8 60 	lds	r14, 0x60D8	; 0x8060d8 <packet+0xa>
    1936:	f0 90 d9 60 	lds	r15, 0x60D9	; 0x8060d9 <packet+0xb>
    193a:	c0 91 da 60 	lds	r28, 0x60DA	; 0x8060da <packet+0xc>
    193e:	d0 91 db 60 	lds	r29, 0x60DB	; 0x8060db <packet+0xd>
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv4.cpp:108
  }

  bool write_eeprom (uint32_t _dwAddr, size_t _wLength) {
    D2PRINTF(" NVM_V4_EEERWR=%06lX\r\n", _dwAddr);
    return (
      nvm_ctrl_change(0x13)   /* NVM_V4_CMD_EEERWR */
    1942:	82 32       	cpi	r24, 0x22	; 34
    1944:	31 f0       	breq	.+12     	; 0x1952 <NVM::V4::write_memory()+0x4e>
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv4.cpp:111
      && UPDI::send_bytes_block_slow(_dwAddr, _wLength)
      && (nvm_wait() & 0x73) == 0
      && nvm_ctrl_change(0x00)
    1946:	9e e4       	ldi	r25, 0x4E	; 78
    1948:	98 0f       	add	r25, r24
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv4.cpp:90
    D2PRINTF(" NVM_V4_FLWR=%06lX\r\n", _dwAddr);
    return (
      nvm_ctrl_change(0x02)   /* NVM_V4_CMD_FLWR */
      && UPDI::send_words_block(_dwAddr, _wLength)
      && (nvm_wait() & 0x73) == 0
      && nvm_ctrl_change(0x00)
    194a:	92 30       	cpi	r25, 0x02	; 2
    194c:	10 f0       	brcs	.+4      	; 0x1952 <NVM::V4::write_memory()+0x4e>
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv4.cpp:109

  bool write_eeprom (uint32_t _dwAddr, size_t _wLength) {
    D2PRINTF(" NVM_V4_EEERWR=%06lX\r\n", _dwAddr);
    return (
      nvm_ctrl_change(0x13)   /* NVM_V4_CMD_EEERWR */
      && UPDI::send_bytes_block_slow(_dwAddr, _wLength)
    194e:	84 3c       	cpi	r24, 0xC4	; 196
    1950:	89 f4       	brne	.+34     	; 0x1974 <NVM::V4::write_memory()+0x70>
write_eeprom():
    1952:	83 e1       	ldi	r24, 0x13	; 19
    1954:	1b dc       	rcall	.-1994   	; 0x118c <NVM::V3::nvm_ctrl_change(unsigned char)>
    1956:	81 11       	cpse	r24, r1
    1958:	02 c0       	rjmp	.+4      	; 0x195e <NVM::V4::write_memory()+0x5a>
write_memory():
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv4.cpp:110
      && (nvm_wait() & 0x73) == 0
    195a:	80 e0       	ldi	r24, 0x00	; 0
    195c:	dc cf       	rjmp	.-72     	; 0x1916 <NVM::V4::write_memory()+0x12>
write_eeprom():
    195e:	ae 01       	movw	r20, r28
    1960:	c7 01       	movw	r24, r14
    1962:	b6 01       	movw	r22, r12
    1964:	08 da       	rcall	.-3056   	; 0xd76 <UPDI::send_bytes_block_slow(unsigned long, unsigned int)>
    1966:	88 23       	and	r24, r24
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv4.cpp:170
      /* MTYPE_LOCK_BITS */
      /* MTYPE_EEPROM */
      /* MTYPE_EEPROM_XMEGA */
      return write_eeprom(_dwAddr, _wLength);
    }
    else if (m_type == 0xC0 || m_type == 0xC5) {
    1968:	c1 f3       	breq	.-16     	; 0x195a <NVM::V4::write_memory()+0x56>
    196a:	ff db       	rcall	.-2050   	; 0x116a <NVM::V3::nvm_wait()>
    196c:	83 77       	andi	r24, 0x73	; 115
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv4.cpp:95
      && nvm_ctrl_change(0x00)
    );
  }

  bool write_bytes_flash (uint32_t _dwAddr, size_t _wLength) {
    if (SYS::is_boundary_flash_page(_dwAddr)) erase_flash_page(_dwAddr);
    196e:	a9 f7       	brne	.-22     	; 0x195a <NVM::V4::write_memory()+0x56>
    1970:	2a dc       	rcall	.-1964   	; 0x11c6 <NVM::V4::write_eeprom(unsigned long, unsigned int) [clone .part.5]>
    1972:	d1 cf       	rjmp	.-94     	; 0x1916 <NVM::V4::write_memory()+0x12>
write_memory():
    1974:	80 3c       	cpi	r24, 0xC0	; 192
    1976:	11 f0       	breq	.+4      	; 0x197c <NVM::V4::write_memory()+0x78>
    1978:	85 3c       	cpi	r24, 0xC5	; 197
    197a:	b9 f4       	brne	.+46     	; 0x19aa <NVM::V4::write_memory()+0xa6>
write_bytes_flash():
    197c:	c7 01       	movw	r24, r14
    197e:	b6 01       	movw	r22, r12
    1980:	92 db       	rcall	.-2268   	; 0x10a6 <SYS::is_boundary_flash_page(unsigned long)>
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv4.cpp:98
    D2PRINTF(" NVM_V4_FLWR=%06lX\r\n", _dwAddr);
    return (
      nvm_ctrl_change(0x02)   /* NVM_V4_CMD_FLWR */
    1982:	88 23       	and	r24, r24
    1984:	19 f0       	breq	.+6      	; 0x198c <NVM::V4::write_memory()+0x88>
    1986:	c7 01       	movw	r24, r14
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv4.cpp:101
      && UPDI::send_bytes_block_slow(_dwAddr, _wLength)
      && (nvm_wait() & 0x73) == 0
      && nvm_ctrl_change(0x00)
    1988:	b6 01       	movw	r22, r12
    198a:	74 dc       	rcall	.-1816   	; 0x1274 <NVM::V4::erase_flash_page(unsigned long)>
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv4.cpp:99
  bool write_bytes_flash (uint32_t _dwAddr, size_t _wLength) {
    if (SYS::is_boundary_flash_page(_dwAddr)) erase_flash_page(_dwAddr);
    D2PRINTF(" NVM_V4_FLWR=%06lX\r\n", _dwAddr);
    return (
      nvm_ctrl_change(0x02)   /* NVM_V4_CMD_FLWR */
      && UPDI::send_bytes_block_slow(_dwAddr, _wLength)
    198c:	82 e0       	ldi	r24, 0x02	; 2
    198e:	fe db       	rcall	.-2052   	; 0x118c <NVM::V3::nvm_ctrl_change(unsigned char)>
    1990:	88 23       	and	r24, r24
    1992:	19 f3       	breq	.-58     	; 0x195a <NVM::V4::write_memory()+0x56>
    1994:	ae 01       	movw	r20, r28
    1996:	c7 01       	movw	r24, r14
    1998:	b6 01       	movw	r22, r12
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv4.cpp:100
      && (nvm_wait() & 0x73) == 0
    199a:	ed d9       	rcall	.-3110   	; 0xd76 <UPDI::send_bytes_block_slow(unsigned long, unsigned int)>
    199c:	88 23       	and	r24, r24
    199e:	e9 f2       	breq	.-70     	; 0x195a <NVM::V4::write_memory()+0x56>
    19a0:	e4 db       	rcall	.-2104   	; 0x116a <NVM::V3::nvm_wait()>
    19a2:	83 77       	andi	r24, 0x73	; 115
    19a4:	d1 f6       	brne	.-76     	; 0x195a <NVM::V4::write_memory()+0x56>
    19a6:	0f dc       	rcall	.-2018   	; 0x11c6 <NVM::V4::write_eeprom(unsigned long, unsigned int) [clone .part.5]>
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv4.cpp:175
    else if (m_type == 0xC0 || m_type == 0xC5) {
      /* MTYPE_FLASH (alias) */
      /* MTYPE_USERSIG (USERROW, BOOTROW) */
      return write_bytes_flash(_dwAddr, _wLength);
    }
    else if (m_type == 0xB0) {
    19a8:	b6 cf       	rjmp	.-148    	; 0x1916 <NVM::V4::write_memory()+0x12>
write_memory():
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv4.cpp:177
      /* MTYPE_FLASH_PAGE (PROGMEM) */
      _dwAddr += PROG_START;
    19aa:	80 3b       	cpi	r24, 0xB0	; 176
    19ac:	f9 f4       	brne	.+62     	; 0x19ec <NVM::V4::write_memory()+0xe8>
    19ae:	80 e8       	ldi	r24, 0x80	; 128
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv4.cpp:84
    );
  }

  bool write_words_flash (uint32_t _dwAddr, size_t _wLength) {
    if (bit_is_clear(PGCONF, PGCONF_ERSE_bp)
      && SYS::is_boundary_flash_page(_dwAddr)) erase_flash_page(_dwAddr);
    19b0:	e8 0e       	add	r14, r24
    19b2:	f1 1c       	adc	r15, r1
write_words_flash():
    19b4:	ea 99       	sbic	0x1d, 2	; 29
    19b6:	08 c0       	rjmp	.+16     	; 0x19c8 <NVM::V4::write_memory()+0xc4>
    19b8:	c7 01       	movw	r24, r14
    19ba:	b6 01       	movw	r22, r12
    19bc:	74 db       	rcall	.-2328   	; 0x10a6 <SYS::is_boundary_flash_page(unsigned long)>
    19be:	88 23       	and	r24, r24
    19c0:	19 f0       	breq	.+6      	; 0x19c8 <NVM::V4::write_memory()+0xc4>
    19c2:	c7 01       	movw	r24, r14
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv4.cpp:87
    D2PRINTF(" NVM_V4_FLWR=%06lX\r\n", _dwAddr);
    return (
      nvm_ctrl_change(0x02)   /* NVM_V4_CMD_FLWR */
    19c4:	b6 01       	movw	r22, r12
    19c6:	56 dc       	rcall	.-1876   	; 0x1274 <NVM::V4::erase_flash_page(unsigned long)>
    19c8:	82 e0       	ldi	r24, 0x02	; 2
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv4.cpp:90
      && UPDI::send_words_block(_dwAddr, _wLength)
      && (nvm_wait() & 0x73) == 0
      && nvm_ctrl_change(0x00)
    19ca:	e0 db       	rcall	.-2112   	; 0x118c <NVM::V3::nvm_ctrl_change(unsigned char)>
    19cc:	88 23       	and	r24, r24
    19ce:	09 f4       	brne	.+2      	; 0x19d2 <NVM::V4::write_memory()+0xce>
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv4.cpp:88
    if (bit_is_clear(PGCONF, PGCONF_ERSE_bp)
      && SYS::is_boundary_flash_page(_dwAddr)) erase_flash_page(_dwAddr);
    D2PRINTF(" NVM_V4_FLWR=%06lX\r\n", _dwAddr);
    return (
      nvm_ctrl_change(0x02)   /* NVM_V4_CMD_FLWR */
      && UPDI::send_words_block(_dwAddr, _wLength)
    19d0:	c4 cf       	rjmp	.-120    	; 0x195a <NVM::V4::write_memory()+0x56>
    19d2:	ae 01       	movw	r20, r28
    19d4:	c7 01       	movw	r24, r14
    19d6:	b6 01       	movw	r22, r12
    19d8:	32 d9       	rcall	.-3484   	; 0xc3e <UPDI::send_words_block(unsigned long, unsigned int)>
    19da:	88 23       	and	r24, r24
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv4.cpp:89
      && (nvm_wait() & 0x73) == 0
    19dc:	09 f4       	brne	.+2      	; 0x19e0 <NVM::V4::write_memory()+0xdc>
    19de:	bd cf       	rjmp	.-134    	; 0x195a <NVM::V4::write_memory()+0x56>
    19e0:	c4 db       	rcall	.-2168   	; 0x116a <NVM::V3::nvm_wait()>
    19e2:	83 77       	andi	r24, 0x73	; 115
    19e4:	09 f0       	breq	.+2      	; 0x19e8 <NVM::V4::write_memory()+0xe4>
    19e6:	b9 cf       	rjmp	.-142    	; 0x195a <NVM::V4::write_memory()+0x56>
    19e8:	ee db       	rcall	.-2084   	; 0x11c6 <NVM::V4::write_eeprom(unsigned long, unsigned int) [clone .part.5]>
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv4.cpp:182
      _dwAddr += PROG_START;
      return write_words_flash(_dwAddr, _wLength);
    }
    else {
      /* MTYPE_SRAM */
      return UPDI::send_bytes_block(_dwAddr, _wLength);
    19ea:	95 cf       	rjmp	.-214    	; 0x1916 <NVM::V4::write_memory()+0x12>
write_memory():
    19ec:	ae 01       	movw	r20, r28
    19ee:	c7 01       	movw	r24, r14
    19f0:	b6 01       	movw	r22, r12
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv3.cpp:133
    }
    /* Page erase will not be used if received. */
    return 1;
  }

  size_t write_memory (void) {
    19f2:	63 d9       	rcall	.-3386   	; 0xcba <UPDI::send_bytes_block(unsigned long, unsigned int)>
    19f4:	90 cf       	rjmp	.-224    	; 0x1916 <NVM::V4::write_memory()+0x12>

000019f6 <NVM::V3::write_memory()>:
    19f6:	cf 92       	push	r12
    19f8:	df 92       	push	r13
    19fa:	ef 92       	push	r14
    19fc:	ff 92       	push	r15
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv3.cpp:137
    uint8_t   m_type = packet.out.bMType;
    uint32_t _dwAddr = packet.out.dwAddr;
    size_t  _wLength = packet.out.dwLength;
    if (bit_is_clear(PGCONF, PGCONF_PROG_bp)) return UPDI::write_userrow();
    19fe:	cf 93       	push	r28
    1a00:	df 93       	push	r29
    1a02:	e9 99       	sbic	0x1d, 1	; 29
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv3.cpp:157
      _dwAddr += PROG_START;
      return write_words_flash(_dwAddr, _wLength);
    }
    else {
      /* MTYPE_SRAM */
      return UPDI::send_bytes_block(_dwAddr, _wLength);
    1a04:	09 c0       	rjmp	.+18     	; 0x1a18 <NVM::V3::write_memory()+0x22>
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv3.cpp:159
    }
  }
    1a06:	79 de       	rcall	.-782    	; 0x16fa <UPDI::write_userrow()>
    1a08:	90 e0       	ldi	r25, 0x00	; 0
    1a0a:	df 91       	pop	r29
    1a0c:	cf 91       	pop	r28
    1a0e:	ff 90       	pop	r15
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv3.cpp:134
    /* Page erase will not be used if received. */
    return 1;
  }

  size_t write_memory (void) {
    uint8_t   m_type = packet.out.bMType;
    1a10:	ef 90       	pop	r14
    1a12:	df 90       	pop	r13
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv3.cpp:135
    uint32_t _dwAddr = packet.out.dwAddr;
    1a14:	cf 90       	pop	r12
    1a16:	08 95       	ret
    1a18:	80 91 d5 60 	lds	r24, 0x60D5	; 0x8060d5 <packet+0x7>
    1a1c:	c0 90 d6 60 	lds	r12, 0x60D6	; 0x8060d6 <packet+0x8>
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv3.cpp:136
    size_t  _wLength = packet.out.dwLength;
    1a20:	d0 90 d7 60 	lds	r13, 0x60D7	; 0x8060d7 <packet+0x9>
    1a24:	e0 90 d8 60 	lds	r14, 0x60D8	; 0x8060d8 <packet+0xa>
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv3.cpp:138
    if (bit_is_clear(PGCONF, PGCONF_PROG_bp)) return UPDI::write_userrow();
    if (m_type == 0x22 || m_type == 0xB2 || m_type == 0xB3 || m_type == 0xC4) {
    1a28:	f0 90 d9 60 	lds	r15, 0x60D9	; 0x8060d9 <packet+0xb>
    1a2c:	c0 91 da 60 	lds	r28, 0x60DA	; 0x8060da <packet+0xc>
    1a30:	d0 91 db 60 	lds	r29, 0x60DB	; 0x8060db <packet+0xd>
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv3.cpp:90
  }

  bool write_eeprom (uint32_t _dwAddr, size_t _wLength) {
    D2PRINTF(" NVM_V3_EEPERW=%06lX\r\n", _dwAddr);
    return (
      nvm_ctrl_change(0x10)
    1a34:	82 32       	cpi	r24, 0x22	; 34
    1a36:	31 f0       	breq	.+12     	; 0x1a44 <NVM::V3::write_memory()+0x4e>
    1a38:	9e e4       	ldi	r25, 0x4E	; 78
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv3.cpp:93
      && UPDI::send_bytes_block(_dwAddr, _wLength)
      && nvm_ctrl_change(0x15)  /* NVM_V3_CMD_EEPERW */
      && (nvm_wait() & 0x73) == 0
    1a3a:	98 0f       	add	r25, r24
    1a3c:	92 30       	cpi	r25, 0x02	; 2
    1a3e:	10 f0       	brcs	.+4      	; 0x1a44 <NVM::V3::write_memory()+0x4e>
    1a40:	84 3c       	cpi	r24, 0xC4	; 196
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv3.cpp:91

  bool write_eeprom (uint32_t _dwAddr, size_t _wLength) {
    D2PRINTF(" NVM_V3_EEPERW=%06lX\r\n", _dwAddr);
    return (
      nvm_ctrl_change(0x10)
      && UPDI::send_bytes_block(_dwAddr, _wLength)
    1a42:	91 f4       	brne	.+36     	; 0x1a68 <NVM::V3::write_memory()+0x72>
write_eeprom():
    1a44:	80 e1       	ldi	r24, 0x10	; 16
    1a46:	a2 db       	rcall	.-2236   	; 0x118c <NVM::V3::nvm_ctrl_change(unsigned char)>
    1a48:	81 11       	cpse	r24, r1
    1a4a:	02 c0       	rjmp	.+4      	; 0x1a50 <NVM::V3::write_memory()+0x5a>
write_memory():
    1a4c:	80 e0       	ldi	r24, 0x00	; 0
    1a4e:	dc cf       	rjmp	.-72     	; 0x1a08 <NVM::V3::write_memory()+0x12>
write_eeprom():
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv3.cpp:92
      && nvm_ctrl_change(0x15)  /* NVM_V3_CMD_EEPERW */
    1a50:	ae 01       	movw	r20, r28
    1a52:	c7 01       	movw	r24, r14
    1a54:	b6 01       	movw	r22, r12
    1a56:	31 d9       	rcall	.-3486   	; 0xcba <UPDI::send_bytes_block(unsigned long, unsigned int)>
    1a58:	88 23       	and	r24, r24
    1a5a:	c1 f3       	breq	.-16     	; 0x1a4c <NVM::V3::write_memory()+0x56>
    1a5c:	85 e1       	ldi	r24, 0x15	; 21
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv3.cpp:145
      /* MTYPE_LOCK_BITS */
      /* MTYPE_EEPROM */
      /* MTYPE_EEPROM_XMEGA */
      return write_eeprom(_dwAddr, _wLength);
    }
    else if (m_type == 0xC0 || m_type == 0xC5) {
    1a5e:	96 db       	rcall	.-2260   	; 0x118c <NVM::V3::nvm_ctrl_change(unsigned char)>
    1a60:	88 23       	and	r24, r24
    1a62:	a1 f3       	breq	.-24     	; 0x1a4c <NVM::V3::write_memory()+0x56>
    1a64:	8c db       	rcall	.-2280   	; 0x117e <NVM::V3::write_eeprom(unsigned long, unsigned int) [clone .part.3]>
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv3.cpp:148
      /* MTYPE_FLASH (alias) */
      /* MTYPE_USERSIG (USERROW) */
      return write_bytes_flash(_dwAddr, _wLength);
    1a66:	d0 cf       	rjmp	.-96     	; 0x1a08 <NVM::V3::write_memory()+0x12>
write_memory():
    1a68:	80 3c       	cpi	r24, 0xC0	; 192
    1a6a:	11 f0       	breq	.+4      	; 0x1a70 <NVM::V3::write_memory()+0x7a>
    1a6c:	85 3c       	cpi	r24, 0xC5	; 197
    1a6e:	29 f4       	brne	.+10     	; 0x1a7a <NVM::V3::write_memory()+0x84>
    1a70:	ae 01       	movw	r20, r28
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv3.cpp:150
    }
    else if (m_type == 0xB0) {
    1a72:	c7 01       	movw	r24, r14
    1a74:	b6 01       	movw	r22, r12
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv3.cpp:152
      /* MTYPE_FLASH_PAGE (PROGMEM) */
      _dwAddr += PROG_START;
    1a76:	b2 db       	rcall	.-2204   	; 0x11dc <NVM::V3::write_bytes_flash(unsigned long, unsigned int)>
    1a78:	c7 cf       	rjmp	.-114    	; 0x1a08 <NVM::V3::write_memory()+0x12>
    1a7a:	80 3b       	cpi	r24, 0xB0	; 176
    1a7c:	39 f4       	brne	.+14     	; 0x1a8c <NVM::V3::write_memory()+0x96>
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv3.cpp:153
      return write_words_flash(_dwAddr, _wLength);
    1a7e:	c7 01       	movw	r24, r14
    1a80:	b6 01       	movw	r22, r12
    1a82:	80 58       	subi	r24, 0x80	; 128
    1a84:	9f 4f       	sbci	r25, 0xFF	; 255
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv3.cpp:157
    }
    else {
      /* MTYPE_SRAM */
      return UPDI::send_bytes_block(_dwAddr, _wLength);
    1a86:	ae 01       	movw	r20, r28
    1a88:	cf db       	rcall	.-2146   	; 0x1228 <NVM::V3::write_words_flash(unsigned long, unsigned int)>
    1a8a:	be cf       	rjmp	.-132    	; 0x1a08 <NVM::V3::write_memory()+0x12>
    1a8c:	ae 01       	movw	r20, r28
    1a8e:	c7 01       	movw	r24, r14
    1a90:	b6 01       	movw	r22, r12
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv2.cpp:155
    /* Page erase will not be used if received. */
    /* Instead, page erase is determined by the is_boundary_flash_page function. */
    return 1;
  }

  size_t write_memory (void) {
    1a92:	13 d9       	rcall	.-3546   	; 0xcba <UPDI::send_bytes_block(unsigned long, unsigned int)>
    1a94:	b9 cf       	rjmp	.-142    	; 0x1a08 <NVM::V3::write_memory()+0x12>

00001a96 <NVM::V2::write_memory()>:
    1a96:	cf 92       	push	r12
    1a98:	df 92       	push	r13
    1a9a:	ef 92       	push	r14
    1a9c:	ff 92       	push	r15
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv2.cpp:159
    uint8_t   m_type = packet.out.bMType;
    uint32_t _dwAddr = packet.out.dwAddr;
    size_t  _wLength = packet.out.dwLength;
    if (bit_is_clear(PGCONF, PGCONF_PROG_bp)) return UPDI::write_userrow();
    1a9e:	cf 93       	push	r28
    1aa0:	df 93       	push	r29
    1aa2:	e9 99       	sbic	0x1d, 1	; 29
    1aa4:	09 c0       	rjmp	.+18     	; 0x1ab8 <NVM::V2::write_memory()+0x22>
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv2.cpp:179
      _dwAddr += PROG_START;
      return write_words_flash(_dwAddr, _wLength);
    }
    else {
      /* MTYPE_SRAM */
      return UPDI::send_bytes_block(_dwAddr, _wLength);
    1aa6:	29 de       	rcall	.-942    	; 0x16fa <UPDI::write_userrow()>
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv2.cpp:181
    }
  }
    1aa8:	90 e0       	ldi	r25, 0x00	; 0
    1aaa:	df 91       	pop	r29
    1aac:	cf 91       	pop	r28
    1aae:	ff 90       	pop	r15
    1ab0:	ef 90       	pop	r14
    1ab2:	df 90       	pop	r13
    1ab4:	cf 90       	pop	r12
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv2.cpp:156
    /* Instead, page erase is determined by the is_boundary_flash_page function. */
    return 1;
  }

  size_t write_memory (void) {
    uint8_t   m_type = packet.out.bMType;
    1ab6:	08 95       	ret
    1ab8:	80 91 d5 60 	lds	r24, 0x60D5	; 0x8060d5 <packet+0x7>
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv2.cpp:157
    uint32_t _dwAddr = packet.out.dwAddr;
    1abc:	c0 90 d6 60 	lds	r12, 0x60D6	; 0x8060d6 <packet+0x8>
    1ac0:	d0 90 d7 60 	lds	r13, 0x60D7	; 0x8060d7 <packet+0x9>
    1ac4:	e0 90 d8 60 	lds	r14, 0x60D8	; 0x8060d8 <packet+0xa>
    1ac8:	f0 90 d9 60 	lds	r15, 0x60D9	; 0x8060d9 <packet+0xb>
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv2.cpp:158
    size_t  _wLength = packet.out.dwLength;
    1acc:	c0 91 da 60 	lds	r28, 0x60DA	; 0x8060da <packet+0xc>
    1ad0:	d0 91 db 60 	lds	r29, 0x60DB	; 0x8060db <packet+0xd>
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv2.cpp:160
    if (bit_is_clear(PGCONF, PGCONF_PROG_bp)) return UPDI::write_userrow();
    if (m_type == 0x22 || m_type == 0xB2 || m_type == 0xB3 || m_type == 0xC4) {
    1ad4:	82 32       	cpi	r24, 0x22	; 34
    1ad6:	31 f0       	breq	.+12     	; 0x1ae4 <NVM::V2::write_memory()+0x4e>
    1ad8:	9e e4       	ldi	r25, 0x4E	; 78
    1ada:	98 0f       	add	r25, r24
    1adc:	92 30       	cpi	r25, 0x02	; 2
    1ade:	10 f0       	brcs	.+4      	; 0x1ae4 <NVM::V2::write_memory()+0x4e>
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv2.cpp:105
  }

  bool write_eeprom (uint32_t _dwAddr, size_t _wLength) {
    D2PRINTF(" NVM_V2_EEERWR=%06lX\r\n", _dwAddr);
    return (
      nvm_ctrl_change(0x13)   /* NVM_V2_CMD_EEERWR */
    1ae0:	84 3c       	cpi	r24, 0xC4	; 196
    1ae2:	89 f4       	brne	.+34     	; 0x1b06 <NVM::V2::write_memory()+0x70>
write_eeprom():
    1ae4:	83 e1       	ldi	r24, 0x13	; 19
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv2.cpp:108
      && UPDI::send_bytes_block_slow(_dwAddr, _wLength)
      && (nvm_wait() & 0x73) == 0
      && nvm_ctrl_change(0x00)
    1ae6:	f6 db       	rcall	.-2068   	; 0x12d4 <NVM::V2::nvm_ctrl_change(unsigned char)>
    1ae8:	81 11       	cpse	r24, r1
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv2.cpp:87
    D2PRINTF(" NVM_V2_FLWR=%06lX\r\n", _dwAddr);
    return (
      nvm_ctrl_change(0x02)   /* NVM_V2_CMD_FLWR */
      && UPDI::send_words_block(_dwAddr, _wLength)
      && (nvm_wait() & 0x73) == 0
      && nvm_ctrl_change(0x00)
    1aea:	02 c0       	rjmp	.+4      	; 0x1af0 <NVM::V2::write_memory()+0x5a>
write_memory():
    1aec:	80 e0       	ldi	r24, 0x00	; 0
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv2.cpp:106

  bool write_eeprom (uint32_t _dwAddr, size_t _wLength) {
    D2PRINTF(" NVM_V2_EEERWR=%06lX\r\n", _dwAddr);
    return (
      nvm_ctrl_change(0x13)   /* NVM_V2_CMD_EEERWR */
      && UPDI::send_bytes_block_slow(_dwAddr, _wLength)
    1aee:	dc cf       	rjmp	.-72     	; 0x1aa8 <NVM::V2::write_memory()+0x12>
write_eeprom():
    1af0:	ae 01       	movw	r20, r28
    1af2:	c7 01       	movw	r24, r14
    1af4:	b6 01       	movw	r22, r12
    1af6:	3f d9       	rcall	.-3458   	; 0xd76 <UPDI::send_bytes_block_slow(unsigned long, unsigned int)>
    1af8:	88 23       	and	r24, r24
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv2.cpp:107
      && (nvm_wait() & 0x73) == 0
    1afa:	c1 f3       	breq	.-16     	; 0x1aec <NVM::V2::write_memory()+0x56>
    1afc:	d9 db       	rcall	.-2126   	; 0x12b0 <NVM::V0::nvm_wait()>
    1afe:	83 77       	andi	r24, 0x73	; 115
    1b00:	a9 f7       	brne	.-22     	; 0x1aec <NVM::V2::write_memory()+0x56>
    1b02:	05 dc       	rcall	.-2038   	; 0x130e <NVM::V2::write_eeprom(unsigned long, unsigned int) [clone .part.5]>
    1b04:	d1 cf       	rjmp	.-94     	; 0x1aa8 <NVM::V2::write_memory()+0x12>
write_memory():
    1b06:	80 3c       	cpi	r24, 0xC0	; 192
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv2.cpp:167
      /* MTYPE_LOCK_BITS */
      /* MTYPE_EEPROM */
      /* MTYPE_EEPROM_XMEGA */
      return write_eeprom(_dwAddr, _wLength);
    }
    else if (m_type == 0xC0 || m_type == 0xC5) {
    1b08:	11 f0       	breq	.+4      	; 0x1b0e <NVM::V2::write_memory()+0x78>
    1b0a:	85 3c       	cpi	r24, 0xC5	; 197
    1b0c:	b9 f4       	brne	.+46     	; 0x1b3c <NVM::V2::write_memory()+0xa6>
write_bytes_flash():
    1b0e:	c7 01       	movw	r24, r14
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv2.cpp:92
      && nvm_ctrl_change(0x00)
    );
  }

  bool write_bytes_flash (uint32_t _dwAddr, size_t _wLength) {
    if (SYS::is_boundary_flash_page(_dwAddr)) erase_flash_page(_dwAddr);
    1b10:	b6 01       	movw	r22, r12
    1b12:	c9 da       	rcall	.-2670   	; 0x10a6 <SYS::is_boundary_flash_page(unsigned long)>
    1b14:	88 23       	and	r24, r24
    1b16:	19 f0       	breq	.+6      	; 0x1b1e <NVM::V2::write_memory()+0x88>
    1b18:	c7 01       	movw	r24, r14
    1b1a:	b6 01       	movw	r22, r12
    1b1c:	fa db       	rcall	.-2060   	; 0x1312 <NVM::V2::erase_flash_page(unsigned long)>
    1b1e:	82 e0       	ldi	r24, 0x02	; 2
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv2.cpp:95
    D2PRINTF(" NVM_V2_FLWR=%06lX\r\n", _dwAddr);
    return (
      nvm_ctrl_change(0x02)   /* NVM_V2_CMD_FLWR */
    1b20:	d9 db       	rcall	.-2126   	; 0x12d4 <NVM::V2::nvm_ctrl_change(unsigned char)>
    1b22:	88 23       	and	r24, r24
    1b24:	19 f3       	breq	.-58     	; 0x1aec <NVM::V2::write_memory()+0x56>
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv2.cpp:98
      && UPDI::send_bytes_block_slow(_dwAddr, _wLength)
      && (nvm_wait() & 0x73) == 0
      && nvm_ctrl_change(0x00)
    1b26:	ae 01       	movw	r20, r28
    1b28:	c7 01       	movw	r24, r14
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv2.cpp:96
  bool write_bytes_flash (uint32_t _dwAddr, size_t _wLength) {
    if (SYS::is_boundary_flash_page(_dwAddr)) erase_flash_page(_dwAddr);
    D2PRINTF(" NVM_V2_FLWR=%06lX\r\n", _dwAddr);
    return (
      nvm_ctrl_change(0x02)   /* NVM_V2_CMD_FLWR */
      && UPDI::send_bytes_block_slow(_dwAddr, _wLength)
    1b2a:	b6 01       	movw	r22, r12
    1b2c:	24 d9       	rcall	.-3512   	; 0xd76 <UPDI::send_bytes_block_slow(unsigned long, unsigned int)>
    1b2e:	88 23       	and	r24, r24
    1b30:	e9 f2       	breq	.-70     	; 0x1aec <NVM::V2::write_memory()+0x56>
    1b32:	be db       	rcall	.-2180   	; 0x12b0 <NVM::V0::nvm_wait()>
    1b34:	83 77       	andi	r24, 0x73	; 115
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv2.cpp:97
      && (nvm_wait() & 0x73) == 0
    1b36:	d1 f6       	brne	.-76     	; 0x1aec <NVM::V2::write_memory()+0x56>
    1b38:	ea db       	rcall	.-2092   	; 0x130e <NVM::V2::write_eeprom(unsigned long, unsigned int) [clone .part.5]>
    1b3a:	b6 cf       	rjmp	.-148    	; 0x1aa8 <NVM::V2::write_memory()+0x12>
write_memory():
    1b3c:	80 3b       	cpi	r24, 0xB0	; 176
    1b3e:	f9 f4       	brne	.+62     	; 0x1b7e <NVM::V2::write_memory()+0xe8>
    1b40:	80 e8       	ldi	r24, 0x80	; 128
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv2.cpp:172
    else if (m_type == 0xC0 || m_type == 0xC5) {
      /* MTYPE_FLASH (alias) */
      /* MTYPE_USERSIG (USERROW) */
      return write_bytes_flash(_dwAddr, _wLength);
    }
    else if (m_type == 0xB0) {
    1b42:	e8 0e       	add	r14, r24
    1b44:	f1 1c       	adc	r15, r1
write_words_flash():
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv2.cpp:174
      /* MTYPE_FLASH_PAGE (PROGMEM) */
      _dwAddr += PROG_START;
    1b46:	ea 99       	sbic	0x1d, 2	; 29
    1b48:	08 c0       	rjmp	.+16     	; 0x1b5a <NVM::V2::write_memory()+0xc4>
    1b4a:	c7 01       	movw	r24, r14
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv2.cpp:81
    );
  }

  bool write_words_flash (uint32_t _dwAddr, size_t _wLength) {
    if (bit_is_clear(PGCONF, PGCONF_ERSE_bp)
      && SYS::is_boundary_flash_page(_dwAddr)) erase_flash_page(_dwAddr);
    1b4c:	b6 01       	movw	r22, r12
    1b4e:	ab da       	rcall	.-2730   	; 0x10a6 <SYS::is_boundary_flash_page(unsigned long)>
    1b50:	88 23       	and	r24, r24
    1b52:	19 f0       	breq	.+6      	; 0x1b5a <NVM::V2::write_memory()+0xc4>
    1b54:	c7 01       	movw	r24, r14
    1b56:	b6 01       	movw	r22, r12
    1b58:	dc db       	rcall	.-2120   	; 0x1312 <NVM::V2::erase_flash_page(unsigned long)>
    1b5a:	82 e0       	ldi	r24, 0x02	; 2
    1b5c:	bb db       	rcall	.-2186   	; 0x12d4 <NVM::V2::nvm_ctrl_change(unsigned char)>
    1b5e:	88 23       	and	r24, r24
    1b60:	09 f4       	brne	.+2      	; 0x1b64 <NVM::V2::write_memory()+0xce>
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv2.cpp:84
    D2PRINTF(" NVM_V2_FLWR=%06lX\r\n", _dwAddr);
    return (
      nvm_ctrl_change(0x02)   /* NVM_V2_CMD_FLWR */
    1b62:	c4 cf       	rjmp	.-120    	; 0x1aec <NVM::V2::write_memory()+0x56>
    1b64:	ae 01       	movw	r20, r28
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv2.cpp:87
      && UPDI::send_words_block(_dwAddr, _wLength)
      && (nvm_wait() & 0x73) == 0
      && nvm_ctrl_change(0x00)
    1b66:	c7 01       	movw	r24, r14
    1b68:	b6 01       	movw	r22, r12
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv2.cpp:85
    if (bit_is_clear(PGCONF, PGCONF_ERSE_bp)
      && SYS::is_boundary_flash_page(_dwAddr)) erase_flash_page(_dwAddr);
    D2PRINTF(" NVM_V2_FLWR=%06lX\r\n", _dwAddr);
    return (
      nvm_ctrl_change(0x02)   /* NVM_V2_CMD_FLWR */
      && UPDI::send_words_block(_dwAddr, _wLength)
    1b6a:	69 d8       	rcall	.-3886   	; 0xc3e <UPDI::send_words_block(unsigned long, unsigned int)>
    1b6c:	88 23       	and	r24, r24
    1b6e:	09 f4       	brne	.+2      	; 0x1b72 <NVM::V2::write_memory()+0xdc>
    1b70:	bd cf       	rjmp	.-134    	; 0x1aec <NVM::V2::write_memory()+0x56>
    1b72:	9e db       	rcall	.-2244   	; 0x12b0 <NVM::V0::nvm_wait()>
    1b74:	83 77       	andi	r24, 0x73	; 115
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv2.cpp:86
      && (nvm_wait() & 0x73) == 0
    1b76:	09 f0       	breq	.+2      	; 0x1b7a <NVM::V2::write_memory()+0xe4>
    1b78:	b9 cf       	rjmp	.-142    	; 0x1aec <NVM::V2::write_memory()+0x56>
    1b7a:	c9 db       	rcall	.-2158   	; 0x130e <NVM::V2::write_eeprom(unsigned long, unsigned int) [clone .part.5]>
    1b7c:	95 cf       	rjmp	.-214    	; 0x1aa8 <NVM::V2::write_memory()+0x12>
write_memory():
    1b7e:	ae 01       	movw	r20, r28
    1b80:	c7 01       	movw	r24, r14
    1b82:	b6 01       	movw	r22, r12
    1b84:	9a d8       	rcall	.-3788   	; 0xcba <UPDI::send_bytes_block(unsigned long, unsigned int)>
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv2.cpp:179
      _dwAddr += PROG_START;
      return write_words_flash(_dwAddr, _wLength);
    }
    else {
      /* MTYPE_SRAM */
      return UPDI::send_bytes_block(_dwAddr, _wLength);
    1b86:	90 cf       	rjmp	.-224    	; 0x1aa8 <NVM::V2::write_memory()+0x12>

00001b88 <NVM::V0::write_memory()>:
    1b88:	4f 92       	push	r4
    1b8a:	5f 92       	push	r5
    1b8c:	6f 92       	push	r6
    1b8e:	7f 92       	push	r7
    1b90:	af 92       	push	r10
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv0.cpp:142
    }
    /* Page erase will not be used if received. */
    return 1;
  }

  size_t write_memory (void) {
    1b92:	bf 92       	push	r11
    1b94:	cf 92       	push	r12
    1b96:	df 92       	push	r13
    1b98:	ef 92       	push	r14
    1b9a:	ff 92       	push	r15
    1b9c:	0f 93       	push	r16
    1b9e:	1f 93       	push	r17
    1ba0:	cf 93       	push	r28
    1ba2:	df 93       	push	r29
    1ba4:	00 d0       	rcall	.+0      	; 0x1ba6 <NVM::V0::write_memory()+0x1e>
    1ba6:	00 d0       	rcall	.+0      	; 0x1ba8 <NVM::V0::write_memory()+0x20>
    1ba8:	cd b7       	in	r28, 0x3d	; 61
    1baa:	de b7       	in	r29, 0x3e	; 62
    1bac:	e9 99       	sbic	0x1d, 1	; 29
    1bae:	14 c0       	rjmp	.+40     	; 0x1bd8 <NVM::V0::write_memory()+0x50>
    1bb0:	a4 dd       	rcall	.-1208   	; 0x16fa <UPDI::write_userrow()>
    1bb2:	90 e0       	ldi	r25, 0x00	; 0
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv0.cpp:146
    uint8_t  m_type = packet.out.bMType;
    uint16_t _wAddr = packet.out.dwAddr;
    size_t _wLength = packet.out.dwLength;
    if (bit_is_clear(PGCONF, PGCONF_PROG_bp)) return UPDI::write_userrow();
    1bb4:	24 96       	adiw	r28, 0x04	; 4
    1bb6:	cd bf       	out	0x3d, r28	; 61
    1bb8:	de bf       	out	0x3e, r29	; 62
    1bba:	df 91       	pop	r29
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv0.cpp:166
      _wAddr += Device_Descriptor.UPDI.prog_base;
      return write_flash(_wAddr, _wLength);
    }
    else {
      /* MTYPE_SRAM */
      return UPDI::send_bytes_block(_wAddr, _wLength);
    1bbc:	cf 91       	pop	r28
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv0.cpp:168
    }
  }
    1bbe:	1f 91       	pop	r17
    1bc0:	0f 91       	pop	r16
    1bc2:	ff 90       	pop	r15
    1bc4:	ef 90       	pop	r14
    1bc6:	df 90       	pop	r13
    1bc8:	cf 90       	pop	r12
    1bca:	bf 90       	pop	r11
    1bcc:	af 90       	pop	r10
    1bce:	7f 90       	pop	r7
    1bd0:	6f 90       	pop	r6
    1bd2:	5f 90       	pop	r5
    1bd4:	4f 90       	pop	r4
    1bd6:	08 95       	ret
    1bd8:	80 91 d5 60 	lds	r24, 0x60D5	; 0x8060d5 <packet+0x7>
    1bdc:	c0 90 d6 60 	lds	r12, 0x60D6	; 0x8060d6 <packet+0x8>
    1be0:	d0 90 d7 60 	lds	r13, 0x60D7	; 0x8060d7 <packet+0x9>
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv0.cpp:143
    /* Page erase will not be used if received. */
    return 1;
  }

  size_t write_memory (void) {
    uint8_t  m_type = packet.out.bMType;
    1be4:	e0 90 d8 60 	lds	r14, 0x60D8	; 0x8060d8 <packet+0xa>
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv0.cpp:144
    uint16_t _wAddr = packet.out.dwAddr;
    1be8:	f0 90 d9 60 	lds	r15, 0x60D9	; 0x8060d9 <packet+0xb>
    1bec:	96 01       	movw	r18, r12
    1bee:	00 91 da 60 	lds	r16, 0x60DA	; 0x8060da <packet+0xc>
    1bf2:	10 91 db 60 	lds	r17, 0x60DB	; 0x8060db <packet+0xd>
    1bf6:	9e e4       	ldi	r25, 0x4E	; 78
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv0.cpp:145
    size_t _wLength = packet.out.dwLength;
    1bf8:	98 0f       	add	r25, r24
    1bfa:	92 30       	cpi	r25, 0x02	; 2
    1bfc:	08 f0       	brcs	.+2      	; 0x1c00 <NVM::V0::write_memory()+0x78>
    1bfe:	44 c0       	rjmp	.+136    	; 0x1c88 <NVM::V0::write_memory()+0x100>
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv0.cpp:147
    if (bit_is_clear(PGCONF, PGCONF_PROG_bp)) return UPDI::write_userrow();
    if (m_type == 0xB2 || m_type == 0xB3) {
    1c00:	8e ec       	ldi	r24, 0xCE	; 206
    1c02:	e8 2e       	mov	r14, r24
    1c04:	80 e6       	ldi	r24, 0x60	; 96
    1c06:	f8 2e       	mov	r15, r24
write_fuse():
    1c08:	c9 01       	movw	r24, r18
    1c0a:	8e 5c       	subi	r24, 0xCE	; 206
    1c0c:	90 46       	sbci	r25, 0x60	; 96
    1c0e:	6c 01       	movw	r12, r24
    1c10:	c7 01       	movw	r24, r14
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv0.cpp:73
      uint16_t data;  /* NVMCTRL_REG_DATA */
      uint16_t addr;  /* NVMCTRL_REG_ADDR */
    } fuses;
    for (size_t _i = 0; _i < _wLength; _i++) {
      fuses.data = packet.out.memData[_i];
      fuses.addr = _wAddr + _i;
    1c12:	8e 5c       	subi	r24, 0xCE	; 206
    1c14:	90 46       	sbci	r25, 0x60	; 96
    1c16:	80 17       	cp	r24, r16
    1c18:	91 07       	cpc	r25, r17
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv0.cpp:71
  bool write_fuse (uint16_t _wAddr, size_t _wLength) {
    struct fuse_packet_t {
      uint16_t data;  /* NVMCTRL_REG_DATA */
      uint16_t addr;  /* NVMCTRL_REG_ADDR */
    } fuses;
    for (size_t _i = 0; _i < _wLength; _i++) {
    1c1a:	a0 f5       	brcc	.+104    	; 0x1c84 <NVM::V0::write_memory()+0xfc>
    1c1c:	f7 01       	movw	r30, r14
    1c1e:	81 89       	ldd	r24, Z+17	; 0x11
    1c20:	90 e0       	ldi	r25, 0x00	; 0
    1c22:	89 83       	std	Y+1, r24	; 0x01
    1c24:	9a 83       	std	Y+2, r25	; 0x02
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv0.cpp:72
      fuses.data = packet.out.memData[_i];
    1c26:	c6 01       	movw	r24, r12
    1c28:	8e 0d       	add	r24, r14
    1c2a:	9f 1d       	adc	r25, r15
    1c2c:	8b 83       	std	Y+3, r24	; 0x03
    1c2e:	9c 83       	std	Y+4, r25	; 0x04
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv0.cpp:73
      fuses.addr = _wAddr + _i;
    1c30:	3f db       	rcall	.-2434   	; 0x12b0 <NVM::V0::nvm_wait()>
    1c32:	ce 01       	movw	r24, r28
    1c34:	01 96       	adiw	r24, 0x01	; 1
    1c36:	5c 01       	movw	r10, r24
    1c38:	66 e0       	ldi	r22, 0x06	; 6
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv0.cpp:75
      D2PRINTF(" NVM_V0_WFU=%04X<%02X\r\n", fuses.addr, fuses.data);
      nvm_wait();
    1c3a:	70 e1       	ldi	r23, 0x10	; 16
    1c3c:	80 e0       	ldi	r24, 0x00	; 0
    1c3e:	90 e0       	ldi	r25, 0x00	; 0
send_bytes_data():
    1c40:	f5 01       	movw	r30, r10
    1c42:	41 91       	ld	r20, Z+
    1c44:	5f 01       	movw	r10, r30
    1c46:	2b 01       	movw	r4, r22
    1c48:	3c 01       	movw	r6, r24
    1c4a:	ff ef       	ldi	r31, 0xFF	; 255
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:193
      && clear_rsd();
  }

  bool send_bytes_data (uint32_t _dwAddr, uint8_t* _data, size_t _wLength) {
    for (size_t _i = 0; _i < _wLength; _i++) {
      if (!send_byte(_dwAddr++, *_data++)) return false;
    1c4c:	4f 1a       	sub	r4, r31
    1c4e:	5f 0a       	sbc	r5, r31
    1c50:	6f 0a       	sbc	r6, r31
    1c52:	7f 0a       	sbc	r7, r31
    1c54:	6d d8       	rcall	.-3878   	; 0xd30 <UPDI::send_byte(unsigned long, unsigned char)>
    1c56:	81 11       	cpse	r24, r1
    1c58:	02 c0       	rjmp	.+4      	; 0x1c5e <NVM::V0::write_memory()+0xd6>
write_memory():
    1c5a:	80 e0       	ldi	r24, 0x00	; 0
    1c5c:	aa cf       	rjmp	.-172    	; 0x1bb2 <NVM::V0::write_memory()+0x2a>
    1c5e:	c3 01       	movw	r24, r6
    1c60:	b2 01       	movw	r22, r4
send_bytes_data():
    1c62:	6a 30       	cpi	r22, 0x0A	; 10
    1c64:	20 e1       	ldi	r18, 0x10	; 16
    1c66:	72 07       	cpc	r23, r18
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv0.cpp:78
      if (!(UPDI::send_bytes_data(NVM_DATA, (uint8_t*)&fuses, 4)
        && UPDI::nvm_ctrl(0x07)   /* NVM_CMD_WFU */
        && (nvm_wait() & 7) == 0)) return false;
    1c68:	81 05       	cpc	r24, r1
    1c6a:	91 05       	cpc	r25, r1
    1c6c:	49 f7       	brne	.-46     	; 0x1c40 <NVM::V0::write_memory()+0xb8>
write_fuse():
    1c6e:	87 e0       	ldi	r24, 0x07	; 7
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:192
      && send_bytes(&packet.out.memData[0], _wLength & ~1)
      && clear_rsd();
  }

  bool send_bytes_data (uint32_t _dwAddr, uint8_t* _data, size_t _wLength) {
    for (size_t _i = 0; _i < _wLength; _i++) {
    1c70:	7c d8       	rcall	.-3848   	; 0xd6a <UPDI::nvm_ctrl(unsigned char)>
    1c72:	88 23       	and	r24, r24
    1c74:	91 f3       	breq	.-28     	; 0x1c5a <NVM::V0::write_memory()+0xd2>
    1c76:	1c db       	rcall	.-2504   	; 0x12b0 <NVM::V0::nvm_wait()>
    1c78:	9f ef       	ldi	r25, 0xFF	; 255
    1c7a:	e9 1a       	sub	r14, r25
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv0.cpp:77
      fuses.data = packet.out.memData[_i];
      fuses.addr = _wAddr + _i;
      D2PRINTF(" NVM_V0_WFU=%04X<%02X\r\n", fuses.addr, fuses.data);
      nvm_wait();
      if (!(UPDI::send_bytes_data(NVM_DATA, (uint8_t*)&fuses, 4)
        && UPDI::nvm_ctrl(0x07)   /* NVM_CMD_WFU */
    1c7c:	f9 0a       	sbc	r15, r25
    1c7e:	87 70       	andi	r24, 0x07	; 7
    1c80:	39 f2       	breq	.-114    	; 0x1c10 <NVM::V0::write_memory()+0x88>
    1c82:	eb cf       	rjmp	.-42     	; 0x1c5a <NVM::V0::write_memory()+0xd2>
write_memory():
    1c84:	81 e0       	ldi	r24, 0x01	; 1
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv0.cpp:78
        && (nvm_wait() & 7) == 0)) return false;
    1c86:	95 cf       	rjmp	.-214    	; 0x1bb2 <NVM::V0::write_memory()+0x2a>
    1c88:	82 32       	cpi	r24, 0x22	; 34
    1c8a:	21 f0       	breq	.+8      	; 0x1c94 <NVM::V0::write_memory()+0x10c>
    1c8c:	9c e3       	ldi	r25, 0x3C	; 60
    1c8e:	98 0f       	add	r25, r24
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv0.cpp:76
    for (size_t _i = 0; _i < _wLength; _i++) {
      fuses.data = packet.out.memData[_i];
      fuses.addr = _wAddr + _i;
      D2PRINTF(" NVM_V0_WFU=%04X<%02X\r\n", fuses.addr, fuses.data);
      nvm_wait();
      if (!(UPDI::send_bytes_data(NVM_DATA, (uint8_t*)&fuses, 4)
    1c90:	92 30       	cpi	r25, 0x02	; 2
    1c92:	58 f4       	brcc	.+22     	; 0x1caa <NVM::V0::write_memory()+0x122>
write_eeprom():
    1c94:	0d db       	rcall	.-2534   	; 0x12b0 <NVM::V0::nvm_wait()>
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv0.cpp:80
        && UPDI::nvm_ctrl(0x07)   /* NVM_CMD_WFU */
        && (nvm_wait() & 7) == 0)) return false;
    }
    return true;
    1c96:	c7 01       	movw	r24, r14
    1c98:	b6 01       	movw	r22, r12
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv0.cpp:152
    if (m_type == 0xB2 || m_type == 0xB3) {
      /* MTYPE_FUSE_BITS */
      /* MTYPE_LOCK_BITS */
      return write_fuse(_wAddr, _wLength);
    }
    else if (m_type == 0x22 || m_type == 0xC4 || m_type == 0xC5) {
    1c9a:	88 27       	eor	r24, r24
    1c9c:	99 27       	eor	r25, r25
    1c9e:	a8 01       	movw	r20, r16
write_flash():
    1ca0:	0c d8       	rcall	.-4072   	; 0xcba <UPDI::send_bytes_block(unsigned long, unsigned int)>
    1ca2:	81 11       	cpse	r24, r1
    1ca4:	1b c0       	rjmp	.+54     	; 0x1cdc <NVM::V0::write_memory()+0x154>
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv0.cpp:99
    );
  }

  bool write_eeprom (uint16_t _wAddr, size_t _wLength) {
    D2PRINTF(" NVM_V0_ERWP=%04X\r\n", _wAddr);
    nvm_wait();
    1ca6:	90 e0       	ldi	r25, 0x00	; 0
    1ca8:	21 c0       	rjmp	.+66     	; 0x1cec <NVM::V0::write_memory()+0x164>
write_memory():
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv0.cpp:101
    return (
      UPDI::send_bytes_block(_wAddr, _wLength)
    1caa:	80 3b       	cpi	r24, 0xB0	; 176
    1cac:	11 f0       	breq	.+4      	; 0x1cb2 <NVM::V0::write_memory()+0x12a>
    1cae:	80 3c       	cpi	r24, 0xC0	; 192
    1cb0:	f9 f4       	brne	.+62     	; 0x1cf0 <NVM::V0::write_memory()+0x168>
    1cb2:	60 91 9e 60 	lds	r22, 0x609E	; 0x80609e <Device_Descriptor>
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv0.cpp:91
      nvm_wait();
      UPDI::nvm_ctrl(0x04);       /* NVM_CMD_PBC */
    }
    nvm_wait();
    return (
      UPDI::send_bytes_block(_wAddr, _wLength)
    1cb6:	70 91 9f 60 	lds	r23, 0x609F	; 0x80609f <Device_Descriptor+0x1>
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv0.cpp:93
      && UPDI::nvm_ctrl(0x03)     /* NVM_CMD_ERWP */
      && (nvm_wait() & 7) == 0
    1cba:	c6 0e       	add	r12, r22
    1cbc:	d7 1e       	adc	r13, r23
write_flash():
    1cbe:	f1 2c       	mov	r15, r1
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv0.cpp:158
      /* MTYPE_EEPROM */
      /* MTYPE_EEPROM_XMEGA */
      /* MTYPE_USERSIG (USERROW) */
      return write_eeprom(_wAddr, _wLength);
    }
    else if (m_type == 0xB0 || m_type == 0xC0) {
    1cc0:	e1 2c       	mov	r14, r1
    1cc2:	c7 01       	movw	r24, r14
    1cc4:	b6 01       	movw	r22, r12
    1cc6:	ef d9       	rcall	.-3106   	; 0x10a6 <SYS::is_boundary_flash_page(unsigned long)>
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv0.cpp:161
      /* MTYPE_FLASH_PAGE (PROGMEM) */
      /* MTYPE_FLASH (alias) */
      _wAddr += Device_Descriptor.UPDI.prog_base;
    1cc8:	88 23       	and	r24, r24
    1cca:	19 f0       	breq	.+6      	; 0x1cd2 <NVM::V0::write_memory()+0x14a>
    1ccc:	f1 da       	rcall	.-2590   	; 0x12b0 <NVM::V0::nvm_wait()>
    1cce:	84 e0       	ldi	r24, 0x04	; 4
    1cd0:	4c d8       	rcall	.-3944   	; 0xd6a <UPDI::nvm_ctrl(unsigned char)>
    1cd2:	ee da       	rcall	.-2596   	; 0x12b0 <NVM::V0::nvm_wait()>
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv0.cpp:85
    return true;
  }

  bool write_flash (uint16_t _wAddr, size_t _wLength) {
    D2PRINTF(" NVM_V0_ERWP=%04X\r\n", _wAddr);
    if (SYS::is_boundary_flash_page(_wAddr)) {
    1cd4:	a8 01       	movw	r20, r16
    1cd6:	c7 01       	movw	r24, r14
    1cd8:	b6 01       	movw	r22, r12
    1cda:	e2 cf       	rjmp	.-60     	; 0x1ca0 <NVM::V0::write_memory()+0x118>
    1cdc:	83 e0       	ldi	r24, 0x03	; 3
    1cde:	45 d8       	rcall	.-3958   	; 0xd6a <UPDI::nvm_ctrl(unsigned char)>
    1ce0:	88 23       	and	r24, r24
    1ce2:	09 f3       	breq	.-62     	; 0x1ca6 <NVM::V0::write_memory()+0x11e>
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv0.cpp:86
      nvm_wait();
    1ce4:	e5 da       	rcall	.-2614   	; 0x12b0 <NVM::V0::nvm_wait()>
    1ce6:	87 70       	andi	r24, 0x07	; 7
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv0.cpp:87
      UPDI::nvm_ctrl(0x04);       /* NVM_CMD_PBC */
    1ce8:	91 e0       	ldi	r25, 0x01	; 1
    1cea:	e9 f6       	brne	.-70     	; 0x1ca6 <NVM::V0::write_memory()+0x11e>
write_memory():
    1cec:	89 2f       	mov	r24, r25
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv0.cpp:89
    }
    nvm_wait();
    1cee:	61 cf       	rjmp	.-318    	; 0x1bb2 <NVM::V0::write_memory()+0x2a>
    1cf0:	c7 01       	movw	r24, r14
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv0.cpp:91
    return (
      UPDI::send_bytes_block(_wAddr, _wLength)
    1cf2:	b6 01       	movw	r22, r12
    1cf4:	88 27       	eor	r24, r24
    1cf6:	99 27       	eor	r25, r25
    1cf8:	a8 01       	movw	r20, r16
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv0.cpp:92
      && UPDI::nvm_ctrl(0x03)     /* NVM_CMD_ERWP */
    1cfa:	0e 94 5d 06 	call	0xcba	; 0xcba <UPDI::send_bytes_block(unsigned long, unsigned int)>
    1cfe:	59 cf       	rjmp	.-334    	; 0x1bb2 <NVM::V0::write_memory()+0x2a>

00001d00 <SYS::reboot()>:
reboot():
    1d00:	82 ed       	ldi	r24, 0xD2	; 210
    1d02:	96 e0       	ldi	r25, 0x06	; 6
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv0.cpp:93
      && (nvm_wait() & 7) == 0
    1d04:	9f 93       	push	r25
    1d06:	8f 93       	push	r24
    1d08:	8d e8       	ldi	r24, 0x8D	; 141
    1d0a:	90 e6       	ldi	r25, 0x60	; 96
    1d0c:	9f 93       	push	r25
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv0.cpp:162
    }
    else if (m_type == 0xB0 || m_type == 0xC0) {
      /* MTYPE_FLASH_PAGE (PROGMEM) */
      /* MTYPE_FLASH (alias) */
      _wAddr += Device_Descriptor.UPDI.prog_base;
      return write_flash(_wAddr, _wLength);
    1d0e:	8f 93       	push	r24
    1d10:	a0 db       	rcall	.-2240   	; 0x1452 <Print::printf(PGM_t const*, ...) [clone .constprop.21]>
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv0.cpp:166
    }
    else {
      /* MTYPE_SRAM */
      return UPDI::send_bytes_block(_wAddr, _wLength);
    1d12:	e0 91 8f 60 	lds	r30, 0x608F	; 0x80608f <Serial1C+0x2>
    1d16:	f0 91 90 60 	lds	r31, 0x6090	; 0x806090 <Serial1C+0x3>
    1d1a:	0f 90       	pop	r0
    1d1c:	0f 90       	pop	r0
    1d1e:	0f 90       	pop	r0
    1d20:	0f 90       	pop	r0
_ZN14UsartBaseClass5flushEv.isra.0():
/Users/askn/Collaborator/UPDI4AVR-USB/src/sys.cpp:287
   *
   * Always run it after the USB has stopped.
   */
  void reboot (void) {
  #if defined(DEBUG)
    D0PRINTF("<REBOOT>\r\n");
    1d22:	84 81       	ldd	r24, Z+4	; 0x04
    1d24:	86 ff       	sbrs	r24, 6
    1d26:	fd cf       	rjmp	.-6      	; 0x1d22 <SYS::reboot()+0x22>
reboot():
    1d28:	88 ed       	ldi	r24, 0xD8	; 216
    1d2a:	91 e0       	ldi	r25, 0x01	; 1
    1d2c:	84 bf       	out	0x34, r24	; 52
    1d2e:	90 93 41 00 	sts	0x0041, r25	; 0x800041 <__TEXT_REGION_LENGTH__+0x7f0041>
    1d32:	08 95       	ret

00001d34 <Print::_print_integer(unsigned long, unsigned char, signed char, signed char) [clone .constprop.14]>:
_print_integer():
    1d34:	3f 92       	push	r3
    1d36:	4f 92       	push	r4
    1d38:	5f 92       	push	r5
    1d3a:	6f 92       	push	r6
    1d3c:	7f 92       	push	r7
    1d3e:	8f 92       	push	r8
    1d40:	9f 92       	push	r9
    1d42:	af 92       	push	r10
    1d44:	bf 92       	push	r11
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/modernAVR/0.2.14/cores/modernAVR/api/UsartBaseClass.h:32
  using Print::write; // pull in write(str) and write(buf, size) from Print

  int read (void);

  void flush (void) {
    loop_until_bit_is_set(usart->STATUS, USART_TXCIF_bp);
    1d46:	cf 92       	push	r12
    1d48:	df 92       	push	r13
    1d4a:	ef 92       	push	r14
/Users/askn/Collaborator/UPDI4AVR-USB/src/sys.cpp:290
    Serial.flush();
  #endif
    _PROTECTED_WRITE(RSTCTRL_SWRR, 1);
    1d4c:	ff 92       	push	r15
    1d4e:	0f 93       	push	r16
    1d50:	1f 93       	push	r17
    1d52:	cf 93       	push	r28
    1d54:	df 93       	push	r29
/Users/askn/Collaborator/UPDI4AVR-USB/src/sys.cpp:291
  }
    1d56:	cd b7       	in	r28, 0x3d	; 61
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/modernAVR/0.2.14/cores/modernAVR/api/cpp/Print_integer.cpp:15
 */
// MIT License : https://askn37.github.io/LICENSE.html

#include "../Print.h"

Print& Print::_print_integer (uint32_t _number, uint8_t _base, int8_t _direction, int8_t _offset) {
    1d58:	de b7       	in	r29, 0x3e	; 62
    1d5a:	2b 01       	movw	r4, r22
    1d5c:	3c 01       	movw	r6, r24
    1d5e:	92 2e       	mov	r9, r18
    1d60:	ad b6       	in	r10, 0x3d	; 61
    1d62:	be b6       	in	r11, 0x3e	; 62
    1d64:	32 2e       	mov	r3, r18
    1d66:	82 2f       	mov	r24, r18
    1d68:	22 0f       	add	r18, r18
    1d6a:	99 0b       	sbc	r25, r25
    1d6c:	01 96       	adiw	r24, 0x01	; 1
    1d6e:	2d b7       	in	r18, 0x3d	; 61
    1d70:	3e b7       	in	r19, 0x3e	; 62
    1d72:	28 1b       	sub	r18, r24
    1d74:	39 0b       	sbc	r19, r25
    1d76:	2d bf       	out	0x3d, r18	; 61
    1d78:	3e bf       	out	0x3e, r19	; 62
    1d7a:	0d b7       	in	r16, 0x3d	; 61
    1d7c:	1e b7       	in	r17, 0x3e	; 62
    1d7e:	0f 5f       	subi	r16, 0xFF	; 255
    1d80:	1f 4f       	sbci	r17, 0xFF	; 255
    1d82:	81 2c       	mov	r8, r1
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/modernAVR/0.2.14/cores/modernAVR/api/cpp/Print_integer.cpp:66
    _len = _size;
    _direction = - _direction;
    for (;_len < _direction; _len++) write(' ');
  }
  return *this;
}
    1d84:	47 ff       	sbrs	r20, 7
    1d86:	16 c0       	rjmp	.+44     	; 0x1db4 <Print::_print_integer(unsigned long, unsigned char, signed char, signed char) [clone .constprop.14]+0x80>
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/modernAVR/0.2.14/cores/modernAVR/api/cpp/Print_integer.cpp:16
// MIT License : https://askn37.github.io/LICENSE.html

#include "../Print.h"

Print& Print::_print_integer (uint32_t _number, uint8_t _base, int8_t _direction, int8_t _offset) {
  uint8_t _buff[(uint8_t)_offset + 1];
    1d88:	4f 73       	andi	r20, 0x3F	; 63
    1d8a:	81 e0       	ldi	r24, 0x01	; 1
    1d8c:	90 e0       	ldi	r25, 0x00	; 0
    1d8e:	a0 e0       	ldi	r26, 0x00	; 0
    1d90:	b0 e0       	ldi	r27, 0x00	; 0
    1d92:	09 2c       	mov	r0, r9
    1d94:	04 c0       	rjmp	.+8      	; 0x1d9e <Print::_print_integer(unsigned long, unsigned char, signed char, signed char) [clone .constprop.14]+0x6a>
    1d96:	88 0f       	add	r24, r24
    1d98:	99 1f       	adc	r25, r25
    1d9a:	aa 1f       	adc	r26, r26
    1d9c:	bb 1f       	adc	r27, r27
    1d9e:	0a 94       	dec	r0
    1da0:	d2 f7       	brpl	.-12     	; 0x1d96 <Print::_print_integer(unsigned long, unsigned char, signed char, signed char) [clone .constprop.14]+0x62>
    1da2:	01 97       	sbiw	r24, 0x01	; 1
    1da4:	a1 09       	sbc	r26, r1
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/modernAVR/0.2.14/cores/modernAVR/api/cpp/Print_integer.cpp:18
  int8_t _size = _offset;
  uint8_t _sign = 0;
    1da6:	b1 09       	sbc	r27, r1
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/modernAVR/0.2.14/cores/modernAVR/api/cpp/Print_integer.cpp:21
  uint8_t _len = 0;

  if (_base & ZFILL) {
    1da8:	48 22       	and	r4, r24
    1daa:	59 22       	and	r5, r25
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/modernAVR/0.2.14/cores/modernAVR/api/cpp/Print_integer.cpp:23
    _sign = ZFILL;
    _base &= ~(ZFILL | _INT_);
    1dac:	6a 22       	and	r6, r26
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/modernAVR/0.2.14/cores/modernAVR/api/cpp/Print_integer.cpp:25
    if (_direction < 0) _direction = 0;
    _number &= (1L << _offset) - 1;
    1dae:	7b 22       	and	r7, r27
    1db0:	50 e8       	ldi	r21, 0x80	; 128
    1db2:	85 2e       	mov	r8, r21
    1db4:	84 2f       	mov	r24, r20
    1db6:	90 e0       	ldi	r25, 0x00	; 0
    1db8:	8f 73       	andi	r24, 0x3F	; 63
    1dba:	82 30       	cpi	r24, 0x02	; 2
    1dbc:	91 05       	cpc	r25, r1
    1dbe:	34 f4       	brge	.+12     	; 0x1dcc <Print::_print_integer(unsigned long, unsigned char, signed char, signed char) [clone .constprop.14]+0x98>
    1dc0:	01 97       	sbiw	r24, 0x01	; 1
    1dc2:	11 f4       	brne	.+4      	; 0x1dc8 <Print::_print_integer(unsigned long, unsigned char, signed char, signed char) [clone .constprop.14]+0x94>
    1dc4:	32 e0       	ldi	r19, 0x02	; 2
    1dc6:	83 2e       	mov	r8, r19
    1dc8:	40 74       	andi	r20, 0x40	; 64
    1dca:	46 5f       	subi	r20, 0xF6	; 246
    1dcc:	46 ff       	sbrs	r20, 6
    1dce:	0c c0       	rjmp	.+24     	; 0x1de8 <Print::_print_integer(unsigned long, unsigned char, signed char, signed char) [clone .constprop.14]+0xb4>
    1dd0:	77 fe       	sbrs	r7, 7
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/modernAVR/0.2.14/cores/modernAVR/api/cpp/Print_integer.cpp:22
  int8_t _size = _offset;
  uint8_t _sign = 0;
  uint8_t _len = 0;

  if (_base & ZFILL) {
    _sign = ZFILL;
    1dd2:	0a c0       	rjmp	.+20     	; 0x1de8 <Print::_print_integer(unsigned long, unsigned char, signed char, signed char) [clone .constprop.14]+0xb4>
    1dd4:	68 94       	set
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/modernAVR/0.2.14/cores/modernAVR/api/cpp/Print_integer.cpp:28
    _base &= ~(ZFILL | _INT_);
    if (_direction < 0) _direction = 0;
    _number &= (1L << _offset) - 1;
  }

  if ((_base & ~(ZFILL | _INT_)) <= SIGN) {
    1dd6:	80 f8       	bld	r8, 0
    1dd8:	70 94       	com	r7
    1dda:	60 94       	com	r6
    1ddc:	50 94       	com	r5
    1dde:	40 94       	com	r4
    1de0:	41 1c       	adc	r4, r1
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/modernAVR/0.2.14/cores/modernAVR/api/cpp/Print_integer.cpp:29
    if ((_base & ~(ZFILL | _INT_)) == SIGN) _sign = 2;
    1de2:	51 1c       	adc	r5, r1
    1de4:	61 1c       	adc	r6, r1
    1de6:	71 1c       	adc	r7, r1
    1de8:	4f 73       	andi	r20, 0x3F	; 63
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/modernAVR/0.2.14/cores/modernAVR/api/cpp/Print_integer.cpp:30
    _base = 10 + (_base & _INT_);
    1dea:	c4 2e       	mov	r12, r20
    1dec:	d1 2c       	mov	r13, r1
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/modernAVR/0.2.14/cores/modernAVR/api/cpp/Print_integer.cpp:33
  }

  if (_base & _INT_) {
    1dee:	f1 2c       	mov	r15, r1
    1df0:	e1 2c       	mov	r14, r1
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/modernAVR/0.2.14/cores/modernAVR/api/cpp/Print_integer.cpp:34
    if (0 > (int32_t) _number) {
    1df2:	c3 01       	movw	r24, r6
    1df4:	b2 01       	movw	r22, r4
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/modernAVR/0.2.14/cores/modernAVR/api/cpp/Print_integer.cpp:35
      _sign |= 1;
    1df6:	a7 01       	movw	r20, r14
    1df8:	96 01       	movw	r18, r12
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/modernAVR/0.2.14/cores/modernAVR/api/cpp/Print_integer.cpp:36
      _number = - _number;
    1dfa:	0e 94 57 24 	call	0x48ae	; 0x48ae <__udivmodsi4>
    1dfe:	29 01       	movw	r4, r18
    1e00:	3a 01       	movw	r6, r20
    1e02:	86 2f       	mov	r24, r22
    1e04:	0e 94 e0 04 	call	0x9c0	; 0x9c0 <btoh>
    1e08:	99 2d       	mov	r25, r9
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/modernAVR/0.2.14/cores/modernAVR/api/cpp/Print_integer.cpp:39
    }
  }
  _base &= ~(ZFILL | _INT_);
    1e0a:	9a 94       	dec	r9
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/modernAVR/0.2.14/cores/modernAVR/api/cpp/Print_integer.cpp:42

  do {
    uint8_t _d = _number % _base;
    1e0c:	f8 01       	movw	r30, r16
    1e0e:	e9 0d       	add	r30, r9
    1e10:	f1 1d       	adc	r31, r1
    1e12:	97 fc       	sbrc	r9, 7
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/modernAVR/0.2.14/cores/modernAVR/api/cpp/Print_integer.cpp:43
    _number /= _base;
    1e14:	fa 95       	dec	r31
    1e16:	80 83       	st	Z, r24
    1e18:	41 14       	cp	r4, r1
    1e1a:	51 04       	cpc	r5, r1
    1e1c:	61 04       	cpc	r6, r1
    1e1e:	71 04       	cpc	r7, r1
    1e20:	41 f7       	brne	.-48     	; 0x1df2 <Print::_print_integer(unsigned long, unsigned char, signed char, signed char) [clone .constprop.14]+0xbe>
    1e22:	32 e0       	ldi	r19, 0x02	; 2
    1e24:	83 12       	cpse	r8, r19
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/modernAVR/0.2.14/cores/modernAVR/api/cpp/Print_integer.cpp:44
    _buff[--_offset] = btoh(_d);
    1e26:	36 c0       	rjmp	.+108    	; 0x1e94 <Print::_print_integer(unsigned long, unsigned char, signed char, signed char) [clone .constprop.14]+0x160>
    1e28:	2e ef       	ldi	r18, 0xFE	; 254
    1e2a:	92 2e       	mov	r9, r18
    1e2c:	99 0e       	add	r9, r25
    1e2e:	f8 01       	movw	r30, r16
    1e30:	e9 0d       	add	r30, r9
    1e32:	f1 1d       	adc	r31, r1
    1e34:	97 fc       	sbrc	r9, 7
    1e36:	fa 95       	dec	r31
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/modernAVR/0.2.14/cores/modernAVR/api/cpp/Print_integer.cpp:45
  } while (_number);
    1e38:	8b e2       	ldi	r24, 0x2B	; 43
    1e3a:	80 83       	st	Z, r24
    1e3c:	09 0d       	add	r16, r9
    1e3e:	11 1d       	adc	r17, r1
    1e40:	97 fc       	sbrc	r9, 7
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/modernAVR/0.2.14/cores/modernAVR/api/cpp/Print_integer.cpp:48

  /* before sign */
  if (_sign == 2) { _buff[--_offset] = '+'; }
    1e42:	1a 95       	dec	r17
    1e44:	39 18       	sub	r3, r9
    1e46:	78 01       	movw	r14, r16
    1e48:	e3 0c       	add	r14, r3
    1e4a:	f1 1c       	adc	r15, r1
    1e4c:	37 fc       	sbrc	r3, 7
    1e4e:	fa 94       	dec	r15
write():
    1e50:	e0 16       	cp	r14, r16
    1e52:	f1 06       	cpc	r15, r17
    1e54:	49 f0       	breq	.+18     	; 0x1e68 <Print::_print_integer(unsigned long, unsigned char, signed char, signed char) [clone .constprop.14]+0x134>
    1e56:	f8 01       	movw	r30, r16
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/modernAVR/0.2.14/cores/modernAVR/api/cpp/Print_integer.cpp:49
  else if (_sign && !(_sign & ZFILL)) { _buff[--_offset] = '-'; }
    1e58:	61 91       	ld	r22, Z+
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/modernAVR/0.2.14/cores/modernAVR/api/cpp/Print_integer.cpp:57
  _len = _size;

  /* before padding */
  for (;_len < _direction; _len++) write(_sign == ZFILL ? '0' : ' ');

  _len += write((const char*)&_buff[_offset], _size);
    1e5a:	8f 01       	movw	r16, r30
    1e5c:	8d e8       	ldi	r24, 0x8D	; 141
    1e5e:	90 e6       	ldi	r25, 0x60	; 96
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/modernAVR/0.2.14/cores/modernAVR/api/cpp/Print_integer.cpp:51

  /* before sign */
  if (_sign == 2) { _buff[--_offset] = '+'; }
  else if (_sign && !(_sign & ZFILL)) { _buff[--_offset] = '-'; }

  _size -= _offset;
    1e60:	0e 94 e9 04 	call	0x9d2	; 0x9d2 <UsartBaseClass::write(unsigned char)>
    1e64:	89 2b       	or	r24, r25
    1e66:	a1 f7       	brne	.-24     	; 0x1e50 <Print::_print_integer(unsigned long, unsigned char, signed char, signed char) [clone .constprop.14]+0x11c>
_print_integer():
    1e68:	8d e8       	ldi	r24, 0x8D	; 141
    1e6a:	90 e6       	ldi	r25, 0x60	; 96
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/modernAVR/0.2.14/cores/modernAVR/api/cpp/Print_puts.cpp:24
 */

size_t Print::write (const void* _buffer, size_t _length) {
  size_t _n = 0;
  uint8_t *_p = (uint8_t*)_buffer;
  while (_length--) {
    1e6c:	ad be       	out	0x3d, r10	; 61
    1e6e:	be be       	out	0x3e, r11	; 62
    1e70:	df 91       	pop	r29
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/modernAVR/0.2.14/cores/modernAVR/api/cpp/Print_puts.cpp:25
    if ( write(*(_p++)) ) _n++;
    1e72:	cf 91       	pop	r28
    1e74:	1f 91       	pop	r17
    1e76:	0f 91       	pop	r16
    1e78:	ff 90       	pop	r15
    1e7a:	ef 90       	pop	r14
    1e7c:	df 90       	pop	r13
    1e7e:	cf 90       	pop	r12
    1e80:	bf 90       	pop	r11
    1e82:	af 90       	pop	r10
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/modernAVR/0.2.14/cores/modernAVR/api/cpp/Print_integer.cpp:66
    _len = _size;
    _direction = - _direction;
    for (;_len < _direction; _len++) write(' ');
  }
  return *this;
}
    1e84:	9f 90       	pop	r9
    1e86:	8f 90       	pop	r8
    1e88:	7f 90       	pop	r7
    1e8a:	6f 90       	pop	r6
    1e8c:	5f 90       	pop	r5
    1e8e:	4f 90       	pop	r4
    1e90:	3f 90       	pop	r3
    1e92:	08 95       	ret
    1e94:	18 14       	cp	r1, r8
    1e96:	94 f6       	brge	.-92     	; 0x1e3c <Print::_print_integer(unsigned long, unsigned char, signed char, signed char) [clone .constprop.14]+0x108>
    1e98:	8e ef       	ldi	r24, 0xFE	; 254
    1e9a:	98 2e       	mov	r9, r24
    1e9c:	99 0e       	add	r9, r25
    1e9e:	f8 01       	movw	r30, r16
    1ea0:	e9 0d       	add	r30, r9
    1ea2:	f1 1d       	adc	r31, r1
    1ea4:	97 fc       	sbrc	r9, 7
    1ea6:	fa 95       	dec	r31
    1ea8:	8d e2       	ldi	r24, 0x2D	; 45
    1eaa:	c7 cf       	rjmp	.-114    	; 0x1e3a <Print::_print_integer(unsigned long, unsigned char, signed char, signed char) [clone .constprop.14]+0x106>

00001eac <USB::setup_device(bool) [clone .part.2]>:
_ZN3USB12setup_deviceEb.part.2():
    1eac:	cf 93       	push	r28
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/modernAVR/0.2.14/cores/modernAVR/api/cpp/Print_integer.cpp:49
    _buff[--_offset] = btoh(_d);
  } while (_number);

  /* before sign */
  if (_sign == 2) { _buff[--_offset] = '+'; }
  else if (_sign && !(_sign & ZFILL)) { _buff[--_offset] = '-'; }
    1eae:	df 93       	push	r29
    1eb0:	c0 e0       	ldi	r28, 0x00	; 0
    1eb2:	dc e0       	ldi	r29, 0x0C	; 12
    1eb4:	18 82       	st	Y, r1
    1eb6:	10 92 04 0c 	sts	0x0C04, r1	; 0x800c04 <__TEXT_REGION_LENGTH__+0x7f0c04>
    1eba:	8e e3       	ldi	r24, 0x3E	; 62
    1ebc:	94 e6       	ldi	r25, 0x64	; 100
    1ebe:	80 93 06 0c 	sts	0x0C06, r24	; 0x800c06 <__TEXT_REGION_LENGTH__+0x7f0c06>
    1ec2:	90 93 07 0c 	sts	0x0C07, r25	; 0x800c07 <__TEXT_REGION_LENGTH__+0x7f0c07>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:234
    EP_MEM.cci_header.wIndex        = 1;    /* Interface#1 */
    EP_MEM.cci_header.wLength       = 2;
    EP_MEM.cci_wValue               = _state;
  }

  void setup_device (bool _force) {
    1ec6:	81 e0       	ldi	r24, 0x01	; 1
    1ec8:	80 93 01 0c 	sts	0x0C01, r24	; 0x800c01 <__TEXT_REGION_LENGTH__+0x7f0c01>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:238
    if (_led_mode != 3) SYS::LED_Flash();
    USB0_ADDR = 0;
    if (USB0_CTRLA || _force) {
      USB0_CTRLA = 0;
    1ecc:	1c ba       	out	0x1c, r1	; 28
    1ece:	1d ba       	out	0x1d, r1	; 29
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:239
      USB0_FIFOWP = 0;
    1ed0:	1e ba       	out	0x1e, r1	; 30
    1ed2:	10 92 33 64 	sts	0x6433, r1	; 0x806433 <_send_break>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:240
      USB0_EPPTR = (uint16_t)&EP_TABLE.EP;
    1ed6:	10 92 34 64 	sts	0x6434, r1	; 0x806434 <_send_break+0x1>
    1eda:	10 92 32 64 	sts	0x6432, r1	; 0x806432 <_send_count>
    1ede:	10 92 31 64 	sts	0x6431, r1	; 0x806431 <_recv_count>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:241
      USB0_CTRLB = USB_ATTACH_bm;
    1ee2:	10 92 30 64 	sts	0x6430, r1	; 0x806430 <_set_config>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:242
      GPCONF = 0;
    1ee6:	10 92 2f 64 	sts	0x642F, r1	; 0x80642f <_sof_count>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:244
      PGCONF = 0;
      RXSTAT = 0;
    1eea:	4a e4       	ldi	r20, 0x4A	; 74
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:245
      _send_break = 0;
    1eec:	50 e0       	ldi	r21, 0x00	; 0
    1eee:	68 e6       	ldi	r22, 0x68	; 104
    1ef0:	78 e0       	ldi	r23, 0x08	; 8
    1ef2:	86 e3       	ldi	r24, 0x36	; 54
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:246
      _send_count = 0;
    1ef4:	94 e6       	ldi	r25, 0x64	; 100
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:247
      _recv_count = 0;
    1ef6:	0e 94 8c 21 	call	0x4318	; 0x4318 <memcpy_P>
set_cci_data():
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:248
      _set_config = 0;
    1efa:	10 92 2e 64 	sts	0x642E, r1	; 0x80642e <_set_serial_state>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:249
      _sof_count = 0;
    1efe:	e6 e1       	ldi	r30, 0x16	; 22
    1f00:	f3 e6       	ldi	r31, 0x63	; 99
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:250
      memcpy_P(&EP_TABLE, &ep_init, sizeof(EP_TABLE_t));
    1f02:	81 ea       	ldi	r24, 0xA1	; 161
    1f04:	80 87       	std	Z+8, r24	; 0x08
    1f06:	80 e2       	ldi	r24, 0x20	; 32
    1f08:	81 87       	std	Z+9, r24	; 0x09
    1f0a:	12 86       	std	Z+10, r1	; 0x0a
    1f0c:	13 86       	std	Z+11, r1	; 0x0b
    1f0e:	81 e0       	ldi	r24, 0x01	; 1
    1f10:	90 e0       	ldi	r25, 0x00	; 0
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:225
    if (_size) memcpy_P(_buffer, _pgmem, _size);
    return _size;
  }

  void set_cci_data (uint16_t _state) {
    _set_serial_state = _state;
    1f12:	84 87       	std	Z+12, r24	; 0x0c
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:226
    EP_MEM.cci_header.bmRequestType = 0xA1; /* REQTYPE_DIRECTION | REQTYPE_CLASS | RECIPIENT_INTERFACE */
    1f14:	95 87       	std	Z+13, r25	; 0x0d
    1f16:	82 e0       	ldi	r24, 0x02	; 2
    1f18:	90 e0       	ldi	r25, 0x00	; 0
    1f1a:	86 87       	std	Z+14, r24	; 0x0e
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:227
    EP_MEM.cci_header.bRequest      = 0x20; /* CDC_REQ_SerialState */
    1f1c:	97 87       	std	Z+15, r25	; 0x0f
    1f1e:	10 8a       	std	Z+16, r1	; 0x10
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:228
    EP_MEM.cci_header.wValue        = 0;
    1f20:	11 8a       	std	Z+17, r1	; 0x11
_ZN3USB12setup_deviceEb.part.2():
    1f22:	83 e8       	ldi	r24, 0x83	; 131
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:229
    EP_MEM.cci_header.wIndex        = 1;    /* Interface#1 */
    1f24:	88 83       	st	Y, r24
    1f26:	df 91       	pop	r29
    1f28:	cf 91       	pop	r28
    1f2a:	08 95       	ret

00001f2c <USART::disable_vcp()>:
disable_vcp():
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:230
    EP_MEM.cci_header.wLength       = 2;
    1f2c:	8a e2       	ldi	r24, 0x2A	; 42
    1f2e:	98 e0       	ldi	r25, 0x08	; 8
    1f30:	9f 93       	push	r25
    1f32:	8f 93       	push	r24
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:231
    EP_MEM.cci_wValue               = _state;
    1f34:	8d e8       	ldi	r24, 0x8D	; 141
    1f36:	90 e6       	ldi	r25, 0x60	; 96
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:252
      _recv_count = 0;
      _set_config = 0;
      _sof_count = 0;
      memcpy_P(&EP_TABLE, &ep_init, sizeof(EP_TABLE_t));
      set_cci_data(0x00);
      USB0_CTRLA = USB_ENABLE_bm | (USB_ENDPOINTS_MAX - 1);
    1f38:	9f 93       	push	r25
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:254
    }
  }
    1f3a:	8f 93       	push	r24
    1f3c:	8a da       	rcall	.-2796   	; 0x1452 <Print::printf(PGM_t const*, ...) [clone .constprop.21]>
delay_micros():
    1f3e:	8a e1       	ldi	r24, 0x1A	; 26
/Users/askn/Collaborator/UPDI4AVR-USB/src/usart.cpp:52
    } while (--_delay);
  }

  /*** Stop the VCP and release the ports in use. ***/
  void disable_vcp (void) {
    D1PRINTF(" UART=OFF\r\n");
    1f40:	8a 95       	dec	r24
    1f42:	f1 f7       	brne	.-4      	; 0x1f40 <USART::disable_vcp()+0x14>
    1f44:	00 c0       	rjmp	.+0      	; 0x1f46 <USART::disable_vcp()+0x1a>
disable_vcp():
    1f46:	8f b7       	in	r24, 0x3f	; 63
__iCliRetVal():
    1f48:	f8 94       	cli
disable_vcp():
    1f4a:	10 92 06 08 	sts	0x0806, r1	; 0x800806 <__TEXT_REGION_LENGTH__+0x7f0806>
    1f4e:	10 92 05 08 	sts	0x0805, r1	; 0x800805 <__TEXT_REGION_LENGTH__+0x7f0805>
    1f52:	1e ba       	out	0x1e, r1	; 30
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/modernAVR/0.2.14/cores/modernAVR/api/delay_busywait.h:33
static __inline__ __attribute__((__always_inline__)) void delay_micros (uint32_t _us);
static __inline__ __attribute__((__always_inline__)) void delay_millis (uint32_t _ms);

void delay_micros (uint32_t _us) {
  if (F_CPU >= 1000000L) {
    __builtin_avr_delay_cycles((F_CPU / 1000000L) * _us);
    1f54:	1f ba       	out	0x1f, r1	; 31
    1f56:	1d ba       	out	0x1d, r1	; 29
    1f58:	92 e1       	ldi	r25, 0x12	; 18
    1f5a:	90 93 e2 05 	sts	0x05E2, r25	; 0x8005e2 <__TEXT_REGION_LENGTH__+0x7f05e2>
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/tools/avr-gcc/7.3.0-avr8-gnu-toolchain/avr/include/util/atomic.h:50
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1f5e:	e1 98       	cbi	0x1c, 1	; 28
__iRestore():
/Users/askn/Collaborator/UPDI4AVR-USB/src/usart.cpp:58
    /* Allow time to move USART0_TXDATA */
    delay_micros(4);
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
      /* Simply clearing the CTRLB does not disable the USART completely.                    */
      /* This errata is not documented for the AVR-DU, but is the same as for tinyAVR-0 etc. */
      USART0_CTRLB = 0;
    1f60:	8f bf       	out	0x3f, r24	; 63
disable_vcp():
    1f62:	00 98       	cbi	0x00, 0	; 0
/Users/askn/Collaborator/UPDI4AVR-USB/src/usart.cpp:59
      USART0_CTRLA = 0;
    1f64:	88 e0       	ldi	r24, 0x08	; 8
/Users/askn/Collaborator/UPDI4AVR-USB/src/usart.cpp:60
      RXSTAT = 0;
    1f66:	80 93 10 04 	sts	0x0410, r24	; 0x800410 <__TEXT_REGION_LENGTH__+0x7f0410>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usart.cpp:62
      RXDATA = 0;
      PGCONF = 0;
    1f6a:	02 98       	cbi	0x00, 2	; 0
/Users/askn/Collaborator/UPDI4AVR-USB/src/usart.cpp:63
      PORTMUX_USARTROUTEA = PORTMUX_USART_VCP;
    1f6c:	80 93 12 04 	sts	0x0412, r24	; 0x800412 <__TEXT_REGION_LENGTH__+0x7f0412>
    1f70:	02 98       	cbi	0x00, 2	; 0
/Users/askn/Collaborator/UPDI4AVR-USB/src/usart.cpp:64
      bit_clear(GPCONF, GPCONF_VCP_bp);
    1f72:	0f 90       	pop	r0
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/tools/avr-gcc/7.3.0-avr8-gnu-toolchain/avr/include/util/atomic.h:70
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1f74:	0f 90       	pop	r0
/Users/askn/Collaborator/UPDI4AVR-USB/src/usart.cpp:66
    }
    pinModeMacro(PIN_PG_TDAT, INPUT_PULLUP);  /* open-drain */
    1f76:	0f 90       	pop	r0
    1f78:	0f 90       	pop	r0
    1f7a:	08 95       	ret

00001f7c <USART::setup()>:
LED_TCB1():
    1f7c:	80 91 85 60 	lds	r24, 0x6085	; 0x806085 <_led_mode>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usart.cpp:70
    /* TXD changes to INPUT when USART is disabled. */
    /* Force OUTPUT to maintain BREAK state.        */
  #ifdef CONFIG_VCP_TXD_ODM
    pinModeMacro(PIN_VCP_TXD, INPUT_PULLUP);  /* open-drain */
    1f80:	84 30       	cpi	r24, 0x04	; 4
/Users/askn/Collaborator/UPDI4AVR-USB/src/usart.cpp:71
    openDrainWriteMacro(PIN_VCP_TXD, HIGH);
    1f82:	81 f0       	breq	.+32     	; 0x1fa4 <USART::setup()+0x28>
    1f84:	10 92 00 0a 	sts	0x0A00, r1	; 0x800a00 <__TEXT_REGION_LENGTH__+0x7f0a00>
    1f88:	10 92 1a 0b 	sts	0x0B1A, r1	; 0x800b1a <__TEXT_REGION_LENGTH__+0x7f0b1a>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usart.cpp:75
  #else
    pinModeMacro(PIN_VCP_TXD, OUTPUT);        /* push-pull : There are problems when using TPI. */
  #endif
  }
    1f8c:	82 e2       	ldi	r24, 0x22	; 34
/Users/askn/Collaborator/UPDI4AVR-USB/src/sys.cpp:180
      _led_mode = 1;
    }
  }

  void LED_TCB1 (uint8_t _mode, uint16_t _ccmp) {
    if (_led_mode != _mode) {
    1f8e:	91 e1       	ldi	r25, 0x11	; 17
    1f90:	80 93 1c 0b 	sts	0x0B1C, r24	; 0x800b1c <__TEXT_REGION_LENGTH__+0x7f0b1c>
/Users/askn/Collaborator/UPDI4AVR-USB/src/sys.cpp:181
      TCA0_SPLIT_CTRLA = 0;
    1f94:	90 93 1d 0b 	sts	0x0B1D, r25	; 0x800b1d <__TEXT_REGION_LENGTH__+0x7f0b1d>
/Users/askn/Collaborator/UPDI4AVR-USB/src/sys.cpp:182
      TCB1_CNTL = 0;
    1f98:	8f e4       	ldi	r24, 0x4F	; 79
    1f9a:	80 93 10 0b 	sts	0x0B10, r24	; 0x800b10 <__TEXT_REGION_LENGTH__+0x7f0b10>
/Users/askn/Collaborator/UPDI4AVR-USB/src/sys.cpp:183
      TCB1_CCMP = _ccmp;
    1f9e:	84 e0       	ldi	r24, 0x04	; 4
    1fa0:	80 93 85 60 	sts	0x6085, r24	; 0x806085 <_led_mode>
setup():
    1fa4:	c3 df       	rcall	.-122    	; 0x1f2c <USART::disable_vcp()>
/Users/askn/Collaborator/UPDI4AVR-USB/src/sys.cpp:184
      TCB1_CTRLA = TCB_RUNSTDBY_bm | TCB_ENABLE_bm | TCB_CLKSEL_EVENT_gc;
    1fa6:	03 98       	cbi	0x00, 3	; 0
    1fa8:	88 e0       	ldi	r24, 0x08	; 8
    1faa:	80 93 13 04 	sts	0x0413, r24	; 0x800413 <__TEXT_REGION_LENGTH__+0x7f0413>
/Users/askn/Collaborator/UPDI4AVR-USB/src/sys.cpp:185
      _led_mode = _mode;
    1fae:	01 98       	cbi	0x00, 1	; 0
    1fb0:	80 93 11 04 	sts	0x0411, r24	; 0x800411 <__TEXT_REGION_LENGTH__+0x7f0411>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usart.cpp:26

namespace USART {

  void setup (void) {
    SYS::LED_Fast();
    disable_vcp();
    1fb4:	08 95       	ret

00001fb6 <UPDI::chip_erase()>:
chip_erase():
/Users/askn/Collaborator/UPDI4AVR-USB/src/usart.cpp:27
    pinModeMacro(PIN_VCP_RXD, INPUT_PULLUP);  /* USART0_DEFAULT or USART0_ALT2 */
    1fb6:	ef 9a       	sbi	0x1d, 7	; 29
    1fb8:	ea 9a       	sbi	0x1d, 2	; 29
    1fba:	90 e0       	ldi	r25, 0x00	; 0
/Users/askn/Collaborator/UPDI4AVR-USB/src/usart.cpp:28
    pinModeMacro(PIN_PG_TRST, INPUT_PULLUP);  /* USART0_ALT3 or USART0_DEFAULT */
    1fbc:	80 e0       	ldi	r24, 0x00	; 0
    1fbe:	0e 94 69 05 	call	0xad2	; 0xad2 <USART::drain(unsigned int)>
set_erase_key():
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:244
    return sys_reset(false);
  }

  bool chip_erase (void) {
    bit_set(PGCONF, PGCONF_FAIL_bp);
    bit_set(PGCONF, PGCONF_ERSE_bp);
    1fc2:	e9 99       	sbic	0x1d, 1	; 29
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:245
    USART::drain();
    1fc4:	02 c0       	rjmp	.+4      	; 0x1fca <UPDI::chip_erase()+0x14>
    1fc6:	80 e0       	ldi	r24, 0x00	; 0
    1fc8:	35 db       	rcall	.-2454   	; 0x1634 <UPDI::set_nvmprog_key(bool)>
    1fca:	85 e7       	ldi	r24, 0x75	; 117
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:226
    D1PRINTF(" KEY=%02X\r\n", RXDATA);
    return _reset ? sys_reset(false) : true;
  }

  bool set_erase_key (void) {
    if (bit_is_clear(PGCONF, PGCONF_PROG_bp)) set_nvmprog_key(false);
    1fcc:	97 e0       	ldi	r25, 0x07	; 7
    1fce:	9f 93       	push	r25
    1fd0:	8f 93       	push	r24
    1fd2:	8d e8       	ldi	r24, 0x8D	; 141
    1fd4:	90 e6       	ldi	r25, 0x60	; 96
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:227
    D1PRINTF(" ERASE_KEY\r\n");
    1fd6:	9f 93       	push	r25
    1fd8:	8f 93       	push	r24
    1fda:	3b da       	rcall	.-2954   	; 0x1452 <Print::printf(PGM_t const*, ...) [clone .constprop.21]>
    1fdc:	6a e0       	ldi	r22, 0x0A	; 10
    1fde:	70 e0       	ldi	r23, 0x00	; 0
    1fe0:	8d e4       	ldi	r24, 0x4D	; 77
    1fe2:	90 e6       	ldi	r25, 0x60	; 96
    1fe4:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <UPDI::send_bytes(unsigned char const*, unsigned int)>
    1fe8:	0f 90       	pop	r0
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:228
    if (!send_bytes(erase_key, sizeof(erase_key))) return false;
    1fea:	0f 90       	pop	r0
    1fec:	0f 90       	pop	r0
    1fee:	0f 90       	pop	r0
    1ff0:	81 11       	cpse	r24, r1
    1ff2:	02 c0       	rjmp	.+4      	; 0x1ff8 <UPDI::chip_erase()+0x42>
chip_erase():
    1ff4:	20 e0       	ldi	r18, 0x00	; 0
    1ff6:	73 c0       	rjmp	.+230    	; 0x20de <__DATA_REGION_LENGTH__+0xde>
set_erase_key():
    1ff8:	0e 94 fc 05 	call	0xbf8	; 0xbf8 <UPDI::key_status()>
    1ffc:	fb 9b       	sbis	0x1f, 3	; 31
    1ffe:	fc cf       	rjmp	.-8      	; 0x1ff8 <UPDI::chip_erase()+0x42>
    2000:	8f b3       	in	r24, 0x1f	; 31
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:261
      do { sys_status(); } while(bit_is_clear(RXDATA, 3));  /* wait set PROGSTART */
    }
    D1PRINTF(" PROGSTART=%02X\r\n", RXDATA);
    bit_set(PGCONF, PGCONF_PROG_bp);
    bit_clear(PGCONF, PGCONF_FAIL_bp);
    return (*Command_Table.prog_init)();
    2002:	1f 92       	push	r1
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:229

  bool set_erase_key (void) {
    if (bit_is_clear(PGCONF, PGCONF_PROG_bp)) set_nvmprog_key(false);
    D1PRINTF(" ERASE_KEY\r\n");
    if (!send_bytes(erase_key, sizeof(erase_key))) return false;
    do { key_status(); } while(bit_is_clear(RXDATA, 3));  /* wait set CHIPERASE */
    2004:	8f 93       	push	r24
    2006:	89 e6       	ldi	r24, 0x69	; 105
    2008:	97 e0       	ldi	r25, 0x07	; 7
    200a:	9f 93       	push	r25
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:230
    D1PRINTF(" KEY=%02X\r\n", RXDATA);
    200c:	8f 93       	push	r24
    200e:	8d e8       	ldi	r24, 0x8D	; 141
    2010:	90 e6       	ldi	r25, 0x60	; 96
    2012:	9f 93       	push	r25
    2014:	8f 93       	push	r24
    2016:	1d da       	rcall	.-3014   	; 0x1452 <Print::printf(PGM_t const*, ...) [clone .constprop.21]>
sys_reset():
    2018:	66 e0       	ldi	r22, 0x06	; 6
    201a:	70 e0       	ldi	r23, 0x00	; 0
    201c:	82 e7       	ldi	r24, 0x72	; 114
    201e:	90 e6       	ldi	r25, 0x60	; 96
    2020:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <UPDI::send_bytes(unsigned char const*, unsigned int)>
chip_erase():
    2024:	0f 90       	pop	r0
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:130
    const static uint8_t _reset[] = {
      0x55, 0xC8, 0x59, /* SYSRST */
      0x55, 0xC8, 0x00, /* SYSRUN */
      0x55, 0xC3, 0x04  /* UPDIDIS */
    };
    return send_bytes(_reset, _leave ? 9 : 6);
    2026:	0f 90       	pop	r0
    2028:	0f 90       	pop	r0
    202a:	0f 90       	pop	r0
    202c:	0f 90       	pop	r0
    202e:	0f 90       	pop	r0
    2030:	88 23       	and	r24, r24
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:246

  bool chip_erase (void) {
    bit_set(PGCONF, PGCONF_FAIL_bp);
    bit_set(PGCONF, PGCONF_ERSE_bp);
    USART::drain();
    if (!set_erase_key()) return false;
    2032:	01 f3       	breq	.-64     	; 0x1ff4 <UPDI::chip_erase()+0x3e>
delay_millis():
    2034:	2f ef       	ldi	r18, 0xFF	; 255
    2036:	84 e3       	ldi	r24, 0x34	; 52
    2038:	9c e0       	ldi	r25, 0x0C	; 12
    203a:	21 50       	subi	r18, 0x01	; 1
    203c:	80 40       	sbci	r24, 0x00	; 0
    203e:	90 40       	sbci	r25, 0x00	; 0
    2040:	e1 f7       	brne	.-8      	; 0x203a <__DATA_REGION_LENGTH__+0x3a>
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/modernAVR/0.2.14/cores/modernAVR/api/delay_busywait.h:42
  }
}

void delay_millis (uint32_t _ms) {
  if (F_CPU >= 1000000L) {
    __builtin_avr_delay_cycles((F_CPU / 1000L) * _ms);
    2042:	00 c0       	rjmp	.+0      	; 0x2044 <__DATA_REGION_LENGTH__+0x44>
    2044:	00 00       	nop
chip_erase():
    2046:	90 e0       	ldi	r25, 0x00	; 0
    2048:	80 e0       	ldi	r24, 0x00	; 0
    204a:	0e 94 69 05 	call	0xad2	; 0xad2 <USART::drain(unsigned int)>
    204e:	0e 94 f3 05 	call	0xbe6	; 0xbe6 <UPDI::sys_status()>
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:248
    delay_millis(200);
    USART::drain();
    2052:	fd 99       	sbic	0x1f, 5	; 31
    2054:	fc cf       	rjmp	.-8      	; 0x204e <__DATA_REGION_LENGTH__+0x4e>
    2056:	0e 94 f3 05 	call	0xbe6	; 0xbe6 <UPDI::sys_status()>
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:249
    do { sys_status(); } while(bit_is_set(RXDATA, 5));    /* wait clear RSTSYS */
    205a:	f8 99       	sbic	0x1f, 0	; 31
    205c:	fc cf       	rjmp	.-8      	; 0x2056 <__DATA_REGION_LENGTH__+0x56>
    205e:	8f b3       	in	r24, 0x1f	; 31
    2060:	1f 92       	push	r1
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:250
    do { sys_status(); } while(bit_is_set(RXDATA, 0));    /* wait clear LOCKSTATUS */
    2062:	8f 93       	push	r24
    2064:	84 e9       	ldi	r24, 0x94	; 148
    2066:	97 e0       	ldi	r25, 0x07	; 7
    2068:	9f 93       	push	r25
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:251
    D1PRINTF(" <SYS:%02X>\r\n", RXDATA);
    206a:	8f 93       	push	r24
    206c:	8d e8       	ldi	r24, 0x8D	; 141
    206e:	90 e6       	ldi	r25, 0x60	; 96
    2070:	9f 93       	push	r25
    2072:	8f 93       	push	r24
    2074:	ee d9       	rcall	.-3108   	; 0x1452 <Print::printf(PGM_t const*, ...) [clone .constprop.21]>
    2076:	0f 90       	pop	r0
    2078:	0f 90       	pop	r0
    207a:	0f 90       	pop	r0
    207c:	0f 90       	pop	r0
    207e:	0f 90       	pop	r0
    2080:	0f 90       	pop	r0
    2082:	0e 94 fc 05 	call	0xbf8	; 0xbf8 <UPDI::key_status()>
    2086:	fb 99       	sbic	0x1f, 3	; 31
    2088:	fc cf       	rjmp	.-8      	; 0x2082 <__DATA_REGION_LENGTH__+0x82>
    208a:	0e 94 f3 05 	call	0xbe6	; 0xbe6 <UPDI::sys_status()>
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:252
    do { key_status(); } while(bit_is_set(RXDATA, 3));    /* wait clear CHIPERASE */
    208e:	fb 99       	sbic	0x1f, 3	; 31
    2090:	09 c0       	rjmp	.+18     	; 0x20a4 <__DATA_REGION_LENGTH__+0xa4>
    2092:	81 e0       	ldi	r24, 0x01	; 1
    2094:	cf da       	rcall	.-2658   	; 0x1634 <UPDI::set_nvmprog_key(bool)>
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:253
    sys_status();
    2096:	88 23       	and	r24, r24
    2098:	09 f4       	brne	.+2      	; 0x209c <__DATA_REGION_LENGTH__+0x9c>
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:254
    if (bit_is_clear(RXDATA, 3)) {
    209a:	ac cf       	rjmp	.-168    	; 0x1ff4 <UPDI::chip_erase()+0x3e>
    209c:	0e 94 f3 05 	call	0xbe6	; 0xbe6 <UPDI::sys_status()>
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:255
      if (!set_nvmprog_key()) return false;
    20a0:	fb 9b       	sbis	0x1f, 3	; 31
    20a2:	fc cf       	rjmp	.-8      	; 0x209c <__DATA_REGION_LENGTH__+0x9c>
    20a4:	8f b3       	in	r24, 0x1f	; 31
    20a6:	1f 92       	push	r1
    20a8:	8f 93       	push	r24
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:256
      do { sys_status(); } while(bit_is_clear(RXDATA, 3));  /* wait set PROGSTART */
    20aa:	82 e8       	ldi	r24, 0x82	; 130
    20ac:	97 e0       	ldi	r25, 0x07	; 7
    20ae:	9f 93       	push	r25
    20b0:	8f 93       	push	r24
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:258
    }
    D1PRINTF(" PROGSTART=%02X\r\n", RXDATA);
    20b2:	8d e8       	ldi	r24, 0x8D	; 141
    20b4:	90 e6       	ldi	r25, 0x60	; 96
    20b6:	9f 93       	push	r25
    20b8:	8f 93       	push	r24
    20ba:	cb d9       	rcall	.-3178   	; 0x1452 <Print::printf(PGM_t const*, ...) [clone .constprop.21]>
    20bc:	e9 9a       	sbi	0x1d, 1	; 29
    20be:	ef 98       	cbi	0x1d, 7	; 29
    20c0:	e0 91 0e 63 	lds	r30, 0x630E	; 0x80630e <Command_Table>
    20c4:	f0 91 0f 63 	lds	r31, 0x630F	; 0x80630f <Command_Table+0x1>
    20c8:	09 95       	icall
    20ca:	21 e0       	ldi	r18, 0x01	; 1
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:259
    bit_set(PGCONF, PGCONF_PROG_bp);
    20cc:	0f 90       	pop	r0
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:260
    bit_clear(PGCONF, PGCONF_FAIL_bp);
    20ce:	0f 90       	pop	r0
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:261
    return (*Command_Table.prog_init)();
    20d0:	0f 90       	pop	r0
    20d2:	0f 90       	pop	r0
    20d4:	0f 90       	pop	r0
    20d6:	0f 90       	pop	r0
    20d8:	89 2b       	or	r24, r25
    20da:	09 f4       	brne	.+2      	; 0x20de <__DATA_REGION_LENGTH__+0xde>
    20dc:	8b cf       	rjmp	.-234    	; 0x1ff4 <UPDI::chip_erase()+0x3e>
    20de:	82 2f       	mov	r24, r18
    20e0:	08 95       	ret

000020e2 <NVM::V4::erase_memory()>:
erase_memory():
    20e2:	80 91 d5 60 	lds	r24, 0x60D5	; 0x8060d5 <packet+0x7>
    20e6:	81 11       	cpse	r24, r1
    20e8:	03 c0       	rjmp	.+6      	; 0x20f0 <NVM::V4::erase_memory()+0xe>
    20ea:	65 df       	rcall	.-310    	; 0x1fb6 <UPDI::chip_erase()>
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:262
  }
    20ec:	90 e0       	ldi	r25, 0x00	; 0
    20ee:	08 95       	ret
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv4.cpp:140
    }
    return 0;
  }

  size_t erase_memory (void) {
    uint8_t e_type = packet.out.bEType;
    20f0:	87 30       	cpi	r24, 0x07	; 7
    20f2:	51 f4       	brne	.+20     	; 0x2108 <NVM::V4::erase_memory()+0x26>
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv4.cpp:141
    if (e_type == 0x00) {
    20f4:	60 91 d6 60 	lds	r22, 0x60D6	; 0x8060d6 <packet+0x8>
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv4.cpp:143
      /* XMEGA_ERASE_CHIP */
      return UPDI::chip_erase();
    20f8:	70 91 d7 60 	lds	r23, 0x60D7	; 0x8060d7 <packet+0x9>
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv4.cpp:150
    else {
      /* NOTE: AVRDUDE<=7.3 may pass the wrong M_TYPE. */
      /* For safety, only USERROW and BOOTROW are allowed to erase pages. */
      if (e_type == 0x07) {
        /* XMEGA_ERASE_USERSIG */
        return erase_flash_page(packet.out.dwAddr);
    20fc:	80 91 d8 60 	lds	r24, 0x60D8	; 0x8060d8 <packet+0xa>
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv4.cpp:148
      return UPDI::chip_erase();
    }
    else {
      /* NOTE: AVRDUDE<=7.3 may pass the wrong M_TYPE. */
      /* For safety, only USERROW and BOOTROW are allowed to erase pages. */
      if (e_type == 0x07) {
    2100:	90 91 d9 60 	lds	r25, 0x60D9	; 0x8060d9 <packet+0xb>
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv4.cpp:150
        /* XMEGA_ERASE_USERSIG */
        return erase_flash_page(packet.out.dwAddr);
    2104:	b7 d8       	rcall	.-3730   	; 0x1274 <NVM::V4::erase_flash_page(unsigned long)>
    2106:	f2 cf       	rjmp	.-28     	; 0x20ec <NVM::V4::erase_memory()+0xa>
    2108:	81 e0       	ldi	r24, 0x01	; 1
    210a:	90 e0       	ldi	r25, 0x00	; 0
    210c:	08 95       	ret

0000210e <NVM::V2::erase_memory()>:
    210e:	80 91 d5 60 	lds	r24, 0x60D5	; 0x8060d5 <packet+0x7>
    2112:	81 11       	cpse	r24, r1
    2114:	03 c0       	rjmp	.+6      	; 0x211c <NVM::V2::erase_memory()+0xe>
    2116:	4f df       	rcall	.-354    	; 0x1fb6 <UPDI::chip_erase()>
    2118:	90 e0       	ldi	r25, 0x00	; 0
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv4.cpp:155
      }
    }
    /* Page erase will not be used if received. */
    /* Instead, page erase is determined by the is_boundary_flash_page function. */
    return 1;
    211a:	08 95       	ret
    211c:	87 30       	cpi	r24, 0x07	; 7
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv4.cpp:156
  }
    211e:	51 f4       	brne	.+20     	; 0x2134 <NVM::V2::erase_memory()+0x26>
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv2.cpp:137
    }
    return 0;
  }

  size_t erase_memory (void) {
    uint8_t e_type = packet.out.bEType;
    2120:	60 91 d6 60 	lds	r22, 0x60D6	; 0x8060d6 <packet+0x8>
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv2.cpp:138
    if (e_type == 0x00) {
    2124:	70 91 d7 60 	lds	r23, 0x60D7	; 0x8060d7 <packet+0x9>
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv2.cpp:140
      /* XMEGA_ERASE_CHIP */
      return UPDI::chip_erase();
    2128:	80 91 d8 60 	lds	r24, 0x60D8	; 0x8060d8 <packet+0xa>
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv2.cpp:147
    else {
      /* NOTE: AVRDUDE<=7.3 may pass the wrong M_TYPE. */
      /* For safety, only USERROW and BOOTROW are allowed to erase pages. */
      if (e_type == 0x07) {
        /* XMEGA_ERASE_USERSIG */
        return erase_flash_page(packet.out.dwAddr);
    212c:	90 91 d9 60 	lds	r25, 0x60D9	; 0x8060d9 <packet+0xb>
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv2.cpp:145
      return UPDI::chip_erase();
    }
    else {
      /* NOTE: AVRDUDE<=7.3 may pass the wrong M_TYPE. */
      /* For safety, only USERROW and BOOTROW are allowed to erase pages. */
      if (e_type == 0x07) {
    2130:	f0 d8       	rcall	.-3616   	; 0x1312 <NVM::V2::erase_flash_page(unsigned long)>
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv2.cpp:147
        /* XMEGA_ERASE_USERSIG */
        return erase_flash_page(packet.out.dwAddr);
    2132:	f2 cf       	rjmp	.-28     	; 0x2118 <NVM::V2::erase_memory()+0xa>
    2134:	81 e0       	ldi	r24, 0x01	; 1
    2136:	90 e0       	ldi	r25, 0x00	; 0
    2138:	08 95       	ret

0000213a <NVM::V0::erase_memory()>:
    213a:	80 91 d5 60 	lds	r24, 0x60D5	; 0x8060d5 <packet+0x7>
    213e:	81 11       	cpse	r24, r1
    2140:	03 c0       	rjmp	.+6      	; 0x2148 <NVM::V0::erase_memory()+0xe>
    2142:	39 df       	rcall	.-398    	; 0x1fb6 <UPDI::chip_erase()>
    2144:	90 e0       	ldi	r25, 0x00	; 0
    2146:	08 95       	ret
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv2.cpp:152
      }
    }
    /* Page erase will not be used if received. */
    /* Instead, page erase is determined by the is_boundary_flash_page function. */
    return 1;
    2148:	81 e0       	ldi	r24, 0x01	; 1
    214a:	90 e0       	ldi	r25, 0x00	; 0
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv2.cpp:153
  }
    214c:	08 95       	ret

0000214e <NVM::V5::erase_memory()>:
_ZN3NVM2V512erase_memoryEv():
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv0.cpp:134
    return 0;
  }

  size_t erase_memory (void) {
    uint8_t e_type = packet.out.bEType;
    if (e_type == 0x00) {
    214e:	f5 cf       	rjmp	.-22     	; 0x213a <NVM::V0::erase_memory()>

00002150 <NVM::V3::erase_memory()>:
_ZN3NVM2V312erase_memoryEv():
    2150:	f4 cf       	rjmp	.-24     	; 0x213a <NVM::V0::erase_memory()>

00002152 <TPI::connect()>:
connect():
    2152:	af 92       	push	r10
    2154:	bf 92       	push	r11
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv0.cpp:136
      /* XMEGA_ERASE_CHIP */
      return UPDI::chip_erase();
    2156:	cf 92       	push	r12
    2158:	df 92       	push	r13
    215a:	ef 92       	push	r14
    215c:	ff 92       	push	r15
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv0.cpp:139
    }
    /* Page erase will not be used if received. */
    return 1;
    215e:	0f 93       	push	r16
    2160:	1f 93       	push	r17
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv0.cpp:140
  }
    2162:	cf 93       	push	r28
    2164:	df 93       	push	r29
    2166:	00 d0       	rcall	.+0      	; 0x2168 <TPI::connect()+0x16>
    2168:	cd b7       	in	r28, 0x3d	; 61
    216a:	de b7       	in	r29, 0x3e	; 62
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:211
    return nvm_ctrl(0x00);
  }

  /*** Application ****/

  size_t connect (void) {
    216c:	80 e8       	ldi	r24, 0x80	; 128
    216e:	8d bb       	out	0x1d, r24	; 29
    2170:	80 91 9c 60 	lds	r24, 0x609C	; 0x80609c <_packet_length>
    2174:	90 91 9d 60 	lds	r25, 0x609D	; 0x80609d <_packet_length+0x1>
    2178:	07 97       	sbiw	r24, 0x07	; 7
    217a:	88 f0       	brcs	.+34     	; 0x219e <TPI::connect()+0x4c>
    217c:	80 91 d4 60 	lds	r24, 0x60D4	; 0x8060d4 <packet+0x6>
    2180:	88 23       	and	r24, r24
    2182:	69 f0       	breq	.+26     	; 0x219e <TPI::connect()+0x4c>
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:212
    PGCONF = PGCONF_FAIL_bm;
    2184:	88 e4       	ldi	r24, 0x48	; 72
    2186:	97 e0       	ldi	r25, 0x07	; 7
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:214

    if (_packet_length > 6 && packet.out.tpi.bType) {
    2188:	9f 93       	push	r25
    218a:	8f 93       	push	r24
    218c:	8d e8       	ldi	r24, 0x8D	; 141
    218e:	90 e6       	ldi	r25, 0x60	; 96
    2190:	9f 93       	push	r25
    2192:	8f 93       	push	r24
    2194:	5e d9       	rcall	.-3396   	; 0x1452 <Print::printf(PGM_t const*, ...) [clone .constprop.21]>
    2196:	0f 90       	pop	r0
    2198:	0f 90       	pop	r0
    219a:	0f 90       	pop	r0
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:216
      /* External Reset : Activation High-Voltage mode */
      D1PRINTF("<HVEN>\r\n");
    219c:	0f 90       	pop	r0
    219e:	02 9a       	sbi	0x00, 2	; 0
    21a0:	01 9a       	sbi	0x00, 1	; 0
delay_millis():
    21a2:	2f ef       	ldi	r18, 0xFF	; 255
    21a4:	84 e3       	ldi	r24, 0x34	; 52
    21a6:	9c e0       	ldi	r25, 0x0C	; 12
    21a8:	21 50       	subi	r18, 0x01	; 1
    21aa:	80 40       	sbci	r24, 0x00	; 0
    21ac:	90 40       	sbci	r25, 0x00	; 0
    21ae:	e1 f7       	brne	.-8      	; 0x21a8 <TPI::connect()+0x56>
    21b0:	00 c0       	rjmp	.+0      	; 0x21b2 <TPI::connect()+0x60>
    21b2:	00 00       	nop
set_sstcs():
    21b4:	82 ec       	ldi	r24, 0xC2	; 194
    21b6:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <TPI::send(unsigned char)>
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:224

    /*** Enter RESET (normal programing) ***/
    /* Do not drive TCLK and take TRST LOW.           */
    /* TRST remains LOW until program mode is exited. */
    openDrainWriteMacro(PIN_VCP_TXD, LOW);
    openDrainWriteMacro(PIN_PG_TRST, LOW);
    21ba:	81 11       	cpse	r24, r1
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/modernAVR/0.2.14/cores/modernAVR/api/delay_busywait.h:42
    21bc:	03 c0       	rjmp	.+6      	; 0x21c4 <TPI::connect()+0x72>
connect():
    21be:	90 e0       	ldi	r25, 0x00	; 0
    21c0:	80 e0       	ldi	r24, 0x00	; 0
    21c2:	af c0       	rjmp	.+350    	; 0x2322 <TPI::connect()+0x1d0>
set_sstcs():
    21c4:	85 e0       	ldi	r24, 0x05	; 5
    21c6:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <TPI::send(unsigned char)>
    21ca:	88 23       	and	r24, r24
    21cc:	c1 f3       	breq	.-16     	; 0x21be <TPI::connect()+0x6c>
connect():
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:69
  bool get_sldcs (const uint8_t _addr) {
    return (send(0x80 | _addr) && recv());
  }

  bool set_sstcs (const uint8_t _addr, const uint8_t _data) {
    return (send(0xC0 | _addr) && send(_data));
    21ce:	8b e3       	ldi	r24, 0x3B	; 59
    21d0:	97 e0       	ldi	r25, 0x07	; 7
    21d2:	9f 93       	push	r25
    21d4:	8f 93       	push	r24
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:248

    while (!(get_sldcs(0x00) && RXDATA == 0x02)) {  /* get TPISR */
      D1PRINTF(" SKEY\r\n");
      for (uint8_t i = 0; i < (uint8_t)sizeof(nvmprog_key); i++) {
        if (!send(nvmprog_key[i])) {
          return 0;
    21d6:	8d e8       	ldi	r24, 0x8D	; 141
    21d8:	90 e6       	ldi	r25, 0x60	; 96
    21da:	9f 93       	push	r25
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:69
  bool get_sldcs (const uint8_t _addr) {
    return (send(0x80 | _addr) && recv());
  }

  bool set_sstcs (const uint8_t _addr, const uint8_t _data) {
    return (send(0xC0 | _addr) && send(_data));
    21dc:	8f 93       	push	r24
    21de:	39 d9       	rcall	.-3470   	; 0x1452 <Print::printf(PGM_t const*, ...) [clone .constprop.21]>
    21e0:	0f 90       	pop	r0
    21e2:	0f 90       	pop	r0
    21e4:	0f 90       	pop	r0
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:234
    /* During the wait, TCLK will emit a sufficient number of pulses. */
    delay_millis(200);

    /*** Set TPIPCR Guard Time : 4 clock ****/
    if (!set_sstcs(0x02, 0x05)) return 0;
    D1PRINTF(" TPIPCR<05\r\n");
    21e6:	0f 90       	pop	r0
get_sldcs():
    21e8:	8f e8       	ldi	r24, 0x8F	; 143
    21ea:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <TPI::send(unsigned char)>
    21ee:	88 23       	and	r24, r24
    21f0:	d9 f3       	breq	.-10     	; 0x21e8 <TPI::connect()+0x96>
    21f2:	0e 94 e0 07 	call	0xfc0	; 0xfc0 <TPI::recv()>
    21f6:	88 23       	and	r24, r24
    21f8:	b9 f3       	breq	.-18     	; 0x21e8 <TPI::connect()+0x96>
connect():
    21fa:	8f b3       	in	r24, 0x1f	; 31
    21fc:	80 38       	cpi	r24, 0x80	; 128
    21fe:	a1 f7       	brne	.-24     	; 0x21e8 <TPI::connect()+0x96>
    2200:	8f b3       	in	r24, 0x1f	; 31
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:65
  }

  /*** TPI control and CSS area command ***/

  bool get_sldcs (const uint8_t _addr) {
    return (send(0x80 | _addr) && recv());
    2202:	1f 92       	push	r1
    2204:	8f 93       	push	r24
    2206:	8d e2       	ldi	r24, 0x2D	; 45
    2208:	97 e0       	ldi	r25, 0x07	; 7
    220a:	9f 93       	push	r25
    220c:	8f 93       	push	r24
    220e:	8d e8       	ldi	r24, 0x8D	; 141
    2210:	90 e6       	ldi	r25, 0x60	; 96
    2212:	9f 93       	push	r25
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:237
    /*** Set TPIPCR Guard Time : 4 clock ****/
    if (!set_sstcs(0x02, 0x05)) return 0;
    D1PRINTF(" TPIPCR<05\r\n");

    /*** Check TPIIR code : Fixed 0x80 ***/
    while (!(get_sldcs(0x0F) && (RXDATA == 0x80)));
    2214:	8f 93       	push	r24
    2216:	1d d9       	rcall	.-3526   	; 0x1452 <Print::printf(PGM_t const*, ...) [clone .constprop.21]>
    2218:	e8 9a       	sbi	0x1d, 0	; 29
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:238
    D1PRINTF(" TPIIR>%02X\r\n", RXDATA);
    221a:	0f 90       	pop	r0
    221c:	0f 90       	pop	r0
    221e:	0f 90       	pop	r0
    2220:	0f 90       	pop	r0
    2222:	0f 90       	pop	r0
    2224:	0f 90       	pop	r0
    2226:	87 e1       	ldi	r24, 0x17	; 23
    2228:	e8 2e       	mov	r14, r24
    222a:	87 e0       	ldi	r24, 0x07	; 7
    222c:	f8 2e       	mov	r15, r24
    222e:	9d e8       	ldi	r25, 0x8D	; 141
    2230:	c9 2e       	mov	r12, r25
    2232:	90 e6       	ldi	r25, 0x60	; 96
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:240

    bit_set(PGCONF, PGCONF_UPDI_bp);
    2234:	d9 2e       	mov	r13, r25
    2236:	29 e3       	ldi	r18, 0x39	; 57
    2238:	a2 2e       	mov	r10, r18
    223a:	20 e6       	ldi	r18, 0x60	; 96
    223c:	b2 2e       	mov	r11, r18
get_sldcs():
    223e:	80 e8       	ldi	r24, 0x80	; 128
    2240:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <TPI::send(unsigned char)>
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:245

    /*** Activate NVMPROG mode ***/

    while (!(get_sldcs(0x00) && RXDATA == 0x02)) {  /* get TPISR */
      D1PRINTF(" SKEY\r\n");
    2244:	88 23       	and	r24, r24
    2246:	e1 f1       	breq	.+120    	; 0x22c0 <TPI::connect()+0x16e>
    2248:	0e 94 e0 07 	call	0xfc0	; 0xfc0 <TPI::recv()>
    224c:	88 23       	and	r24, r24
    224e:	c1 f1       	breq	.+112    	; 0x22c0 <TPI::connect()+0x16e>
connect():
    2250:	8f b3       	in	r24, 0x1f	; 31
    2252:	82 30       	cpi	r24, 0x02	; 2
    2254:	a9 f5       	brne	.+106    	; 0x22c0 <TPI::connect()+0x16e>
    2256:	8f b3       	in	r24, 0x1f	; 31
    2258:	1f 92       	push	r1
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:65
  }

  /*** TPI control and CSS area command ***/

  bool get_sldcs (const uint8_t _addr) {
    return (send(0x80 | _addr) && recv());
    225a:	8f 93       	push	r24
    225c:	8f e1       	ldi	r24, 0x1F	; 31
    225e:	97 e0       	ldi	r25, 0x07	; 7
    2260:	9f 93       	push	r25
    2262:	8f 93       	push	r24
    2264:	8d e8       	ldi	r24, 0x8D	; 141
    2266:	90 e6       	ldi	r25, 0x60	; 96
    2268:	9f 93       	push	r25
    226a:	8f 93       	push	r24
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:244

    bit_set(PGCONF, PGCONF_UPDI_bp);

    /*** Activate NVMPROG mode ***/

    while (!(get_sldcs(0x00) && RXDATA == 0x02)) {  /* get TPISR */
    226c:	f2 d8       	rcall	.-3612   	; 0x1452 <Print::printf(PGM_t const*, ...) [clone .constprop.21]>
    226e:	19 82       	std	Y+1, r1	; 0x01
    2270:	1a 82       	std	Y+2, r1	; 0x02
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:253
          return 0;
        }
        idle_clock(4);
      }
    };
    D1PRINTF(" TPISR>%02X\r\n", RXDATA);
    2272:	81 ec       	ldi	r24, 0xC1	; 193
    2274:	9f e3       	ldi	r25, 0x3F	; 63
    2276:	0e 94 2b 08 	call	0x1056	; 0x1056 <TPI::set_sstpr(unsigned int)>
    227a:	0f 90       	pop	r0
    227c:	0f 90       	pop	r0
    227e:	0f 90       	pop	r0
    2280:	0f 90       	pop	r0
    2282:	0f 90       	pop	r0
    2284:	0f 90       	pop	r0
    2286:	88 23       	and	r24, r24
    2288:	09 f4       	brne	.+2      	; 0x228c <TPI::connect()+0x13a>
    228a:	58 c0       	rjmp	.+176    	; 0x233c <TPI::connect()+0x1ea>
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:267
     * Other is written in 1 word chunks.
     *
     * The original PICKit4 probably does the same thing,
     * since the JTAG3 protocol does not include these notifications.
     */
    uint16_t _signature = 0;
    228c:	0e 94 25 08 	call	0x104a	; 0x104a <TPI::get_sld()>
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:268
    if (set_sstpr(0x3FC1) && get_sld()) {
    2290:	88 23       	and	r24, r24
    2292:	09 f4       	brne	.+2      	; 0x2296 <TPI::connect()+0x144>
    2294:	53 c0       	rjmp	.+166    	; 0x233c <TPI::connect()+0x1ea>
    2296:	8f b3       	in	r24, 0x1f	; 31
    2298:	8a 83       	std	Y+2, r24	; 0x02
    229a:	0e 94 25 08 	call	0x104a	; 0x104a <TPI::get_sld()>
    229e:	88 23       	and	r24, r24
    22a0:	11 f0       	breq	.+4      	; 0x22a6 <TPI::connect()+0x154>
    22a2:	8f b3       	in	r24, 0x1f	; 31
    22a4:	89 83       	std	Y+1, r24	; 0x01
    22a6:	29 81       	ldd	r18, Y+1	; 0x01
    22a8:	3a 81       	ldd	r19, Y+2	; 0x02
    22aa:	88 e0       	ldi	r24, 0x08	; 8
    22ac:	2e 30       	cpi	r18, 0x0E	; 14
    22ae:	f2 e9       	ldi	r31, 0x92	; 146
    22b0:	3f 07       	cpc	r19, r31
    22b2:	11 f1       	breq	.+68     	; 0x22f8 <TPI::connect()+0x1a6>
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:269
      _CAPS16(_signature)->bytes[1] = RXDATA;
    22b4:	2f 30       	cpi	r18, 0x0F	; 15
    22b6:	81 e9       	ldi	r24, 0x91	; 145
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:270
      if (get_sld()) _CAPS16(_signature)->bytes[0] = RXDATA;
    22b8:	38 07       	cpc	r19, r24
    22ba:	e9 f0       	breq	.+58     	; 0x22f6 <TPI::connect()+0x1a4>
    22bc:	82 e0       	ldi	r24, 0x02	; 2
    22be:	1c c0       	rjmp	.+56     	; 0x22f8 <TPI::connect()+0x1a6>
    22c0:	ff 92       	push	r15
    22c2:	ef 92       	push	r14
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:272
    }
    _tpi_chunks = _signature == 0x920E ? 8  /* ATtiny40 */
    22c4:	df 92       	push	r13
    22c6:	cf 92       	push	r12
    22c8:	c4 d8       	rcall	.-3704   	; 0x1452 <Print::printf(PGM_t const*, ...) [clone .constprop.21]>
    22ca:	00 e3       	ldi	r16, 0x30	; 48
    22cc:	10 e6       	ldi	r17, 0x60	; 96
    22ce:	0f 90       	pop	r0
    22d0:	0f 90       	pop	r0
    22d2:	0f 90       	pop	r0
    22d4:	0f 90       	pop	r0
    22d6:	f8 01       	movw	r30, r16
    22d8:	81 91       	ld	r24, Z+
    22da:	8f 01       	movw	r16, r30
    22dc:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <TPI::send(unsigned char)>
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:245
    bit_set(PGCONF, PGCONF_UPDI_bp);

    /*** Activate NVMPROG mode ***/

    while (!(get_sldcs(0x00) && RXDATA == 0x02)) {  /* get TPISR */
      D1PRINTF(" SKEY\r\n");
    22e0:	88 23       	and	r24, r24
    22e2:	09 f4       	brne	.+2      	; 0x22e6 <TPI::connect()+0x194>
    22e4:	6c cf       	rjmp	.-296    	; 0x21be <TPI::connect()+0x6c>
    22e6:	84 e0       	ldi	r24, 0x04	; 4
    22e8:	90 e0       	ldi	r25, 0x00	; 0
    22ea:	0e 94 43 08 	call	0x1086	; 0x1086 <TPI::idle_clock(unsigned int)>
    22ee:	a0 16       	cp	r10, r16
    22f0:	b1 06       	cpc	r11, r17
    22f2:	89 f7       	brne	.-30     	; 0x22d6 <TPI::connect()+0x184>
    22f4:	a4 cf       	rjmp	.-184    	; 0x223e <TPI::connect()+0xec>
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:247
      for (uint8_t i = 0; i < (uint8_t)sizeof(nvmprog_key); i++) {
        if (!send(nvmprog_key[i])) {
    22f6:	84 e0       	ldi	r24, 0x04	; 4
    22f8:	80 93 9b 60 	sts	0x609B, r24	; 0x80609b <_tpi_chunks>
    22fc:	1f 92       	push	r1
    22fe:	8f 93       	push	r24
    2300:	3f 93       	push	r19
    2302:	2f 93       	push	r18
    2304:	86 e0       	ldi	r24, 0x06	; 6
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:250
          return 0;
        }
        idle_clock(4);
    2306:	97 e0       	ldi	r25, 0x07	; 7
    2308:	9f 93       	push	r25
    230a:	8f 93       	push	r24
    230c:	8d e8       	ldi	r24, 0x8D	; 141
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:246

    /*** Activate NVMPROG mode ***/

    while (!(get_sldcs(0x00) && RXDATA == 0x02)) {  /* get TPISR */
      D1PRINTF(" SKEY\r\n");
      for (uint8_t i = 0; i < (uint8_t)sizeof(nvmprog_key); i++) {
    230e:	90 e6       	ldi	r25, 0x60	; 96
    2310:	9f 93       	push	r25
    2312:	8f 93       	push	r24
    2314:	9e d8       	rcall	.-3780   	; 0x1452 <Print::printf(PGM_t const*, ...) [clone .constprop.21]>
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:272
    uint16_t _signature = 0;
    if (set_sstpr(0x3FC1) && get_sld()) {
      _CAPS16(_signature)->bytes[1] = RXDATA;
      if (get_sld()) _CAPS16(_signature)->bytes[0] = RXDATA;
    }
    _tpi_chunks = _signature == 0x920E ? 8  /* ATtiny40 */
    2316:	e8 9a       	sbi	0x1d, 0	; 29
    2318:	ef 98       	cbi	0x1d, 7	; 29
    231a:	cd bf       	out	0x3d, r28	; 61
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:275
                : _signature == 0x910F ? 4  /* ATtiny20 */
                : 2;                        /* Othres   */
    D1PRINTF(" SIG>%04X:%02X\r\n", _signature, _tpi_chunks);
    231c:	de bf       	out	0x3e, r29	; 62
    231e:	81 e0       	ldi	r24, 0x01	; 1
    2320:	90 e0       	ldi	r25, 0x00	; 0
    2322:	0f 90       	pop	r0
    2324:	0f 90       	pop	r0
    2326:	df 91       	pop	r29
    2328:	cf 91       	pop	r28
    232a:	1f 91       	pop	r17
    232c:	0f 91       	pop	r16
    232e:	ff 90       	pop	r15
    2330:	ef 90       	pop	r14
    2332:	df 90       	pop	r13
    2334:	cf 90       	pop	r12
    2336:	bf 90       	pop	r11
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:277

    bit_set(PGCONF, PGCONF_UPDI_bp);
    2338:	af 90       	pop	r10
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:278
    bit_clear(PGCONF, PGCONF_FAIL_bp);
    233a:	08 95       	ret
    233c:	29 81       	ldd	r18, Y+1	; 0x01
    233e:	3a 81       	ldd	r19, Y+2	; 0x02
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:279
    return 1;
    2340:	bd cf       	rjmp	.-134    	; 0x22bc <TPI::connect()+0x16a>

00002342 <UPDI::disconnect()>:
disconnect():
    2342:	cf 93       	push	r28
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:280
  }
    2344:	df 93       	push	r29
    2346:	90 e0       	ldi	r25, 0x00	; 0
    2348:	80 e0       	ldi	r24, 0x00	; 0
    234a:	0e 94 69 05 	call	0xad2	; 0xad2 <USART::drain(unsigned int)>
sys_reset():
    234e:	69 e0       	ldi	r22, 0x09	; 9
    2350:	70 e0       	ldi	r23, 0x00	; 0
    2352:	82 e7       	ldi	r24, 0x72	; 114
    2354:	90 e6       	ldi	r25, 0x60	; 96
    2356:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <UPDI::send_bytes(unsigned char const*, unsigned int)>
disconnect():
    235a:	1d ba       	out	0x1d, r1	; 29
    235c:	c8 2f       	mov	r28, r24
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:272
    uint16_t _signature = 0;
    if (set_sstpr(0x3FC1) && get_sld()) {
      _CAPS16(_signature)->bytes[1] = RXDATA;
      if (get_sld()) _CAPS16(_signature)->bytes[0] = RXDATA;
    }
    _tpi_chunks = _signature == 0x920E ? 8  /* ATtiny40 */
    235e:	d0 e0       	ldi	r29, 0x00	; 0
    2360:	1f 92       	push	r1
    2362:	8f 93       	push	r24
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:380
      }
    }
    return 0;
  }

  size_t disconnect (void) {
    2364:	8c e0       	ldi	r24, 0x0C	; 12
    2366:	98 e0       	ldi	r25, 0x08	; 8
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:381
    USART::drain();
    2368:	9f 93       	push	r25
    236a:	8f 93       	push	r24
    236c:	8d e8       	ldi	r24, 0x8D	; 141
    236e:	90 e6       	ldi	r25, 0x60	; 96
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:130
    const static uint8_t _reset[] = {
      0x55, 0xC8, 0x59, /* SYSRST */
      0x55, 0xC8, 0x00, /* SYSRUN */
      0x55, 0xC3, 0x04  /* UPDIDIS */
    };
    return send_bytes(_reset, _leave ? 9 : 6);
    2370:	9f 93       	push	r25
    2372:	8f 93       	push	r24
    2374:	6e d8       	rcall	.-3876   	; 0x1452 <Print::printf(PGM_t const*, ...) [clone .constprop.21]>
    2376:	01 9a       	sbi	0x00, 1	; 0
    2378:	00 00       	nop
    237a:	01 98       	cbi	0x00, 1	; 0
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:383
  }

  size_t disconnect (void) {
    USART::drain();
    bool _result = sys_reset(true);
    PGCONF = 0;
    237c:	0f 90       	pop	r0
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:384
    D1PRINTF(" <RST:%d>\r\n", _result);
    237e:	0f 90       	pop	r0
    2380:	0f 90       	pop	r0
    2382:	0f 90       	pop	r0
    2384:	0f 90       	pop	r0
    2386:	0f 90       	pop	r0
    2388:	ce 01       	movw	r24, r28
    238a:	df 91       	pop	r29
    238c:	cf 91       	pop	r28
    238e:	08 95       	ret

00002390 <UPDI::connect()>:
connect():
    2390:	cf 93       	push	r28
    2392:	df 93       	push	r29
    2394:	10 92 ee 62 	sts	0x62EE, r1	; 0x8062ee <_sib>
    2398:	8f ef       	ldi	r24, 0xFF	; 255
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:385
    openDrainWriteMacro(PIN_PG_TRST, LOW);
    239a:	9f ef       	ldi	r25, 0xFF	; 255
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:386
    nop();
    239c:	dc 01       	movw	r26, r24
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:387
    openDrainWriteMacro(PIN_PG_TRST, HIGH);
    239e:	80 93 ea 62 	sts	0x62EA, r24	; 0x8062ea <_before_page>
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:388
    return _result;
    23a2:	90 93 eb 62 	sts	0x62EB, r25	; 0x8062eb <_before_page+0x1>
    23a6:	a0 93 ec 62 	sts	0x62EC, r26	; 0x8062ec <_before_page+0x2>
    23aa:	b0 93 ed 62 	sts	0x62ED, r27	; 0x8062ed <_before_page+0x3>
setup():
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:389
  }
    23ae:	8a e9       	ldi	r24, 0x9A	; 154
    23b0:	95 e0       	ldi	r25, 0x05	; 5
    23b2:	80 93 0e 63 	sts	0x630E, r24	; 0x80630e <Command_Table>
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:321
   * For UPDI communication, first set the following:
   * - Keep forced reset for wakeup
   * - Ignore communication collisions
   * - Make guard time short enough
   */
  size_t connect (void) {
    23b6:	90 93 0f 63 	sts	0x630F, r25	; 0x80630f <Command_Table+0x1>
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:330
      0x55, 0xC2, 0x05, /* GTVAL[4] */
    };
    const static uint8_t _sib256[] = {
      0x55, 0xE6        /* SIB[256] */
    };
    _sib[0] = 0;
    23ba:	8a ea       	ldi	r24, 0xAA	; 170
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:331
    _before_page = -1L;
    23bc:	99 e0       	ldi	r25, 0x09	; 9
    23be:	80 93 10 63 	sts	0x6310, r24	; 0x806310 <Command_Table+0x2>
    23c2:	90 93 11 63 	sts	0x6311, r25	; 0x806311 <Command_Table+0x3>
    23c6:	8d ea       	ldi	r24, 0xAD	; 173
    23c8:	99 e0       	ldi	r25, 0x09	; 9
    23ca:	80 93 12 63 	sts	0x6312, r24	; 0x806312 <Command_Table+0x4>
    23ce:	90 93 13 63 	sts	0x6313, r25	; 0x806313 <Command_Table+0x5>
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv1.cpp:68
    // else if (m_type == 0xD3)   /* MTYPE_SIB */ /* This is in its own memory space. */
    return 0;
  }

  bool setup (void) {
    Command_Table.prog_init    = &prog_init;
    23d2:	87 ea       	ldi	r24, 0xA7	; 167
    23d4:	99 e0       	ldi	r25, 0x09	; 9
    23d6:	80 93 14 63 	sts	0x6314, r24	; 0x806314 <Command_Table+0x6>
    23da:	90 93 15 63 	sts	0x6315, r25	; 0x806315 <Command_Table+0x7>
connect():
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv1.cpp:69
    Command_Table.read_memory  = &read_memory;
    23de:	01 9a       	sbi	0x00, 1	; 0
    23e0:	00 00       	nop
    23e2:	ef 9b       	sbis	0x1d, 7	; 29
    23e4:	0b c0       	rjmp	.+22     	; 0x23fc <UPDI::connect()+0x6c>
    23e6:	0e 98       	cbi	0x01, 6	; 1
delay_millis():
    23e8:	2f ef       	ldi	r18, 0xFF	; 255
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv1.cpp:70
    Command_Table.erase_memory = &erase_memory;
    23ea:	34 e3       	ldi	r19, 0x34	; 52
    23ec:	8c e0       	ldi	r24, 0x0C	; 12
    23ee:	21 50       	subi	r18, 0x01	; 1
    23f0:	30 40       	sbci	r19, 0x00	; 0
    23f2:	80 40       	sbci	r24, 0x00	; 0
    23f4:	e1 f7       	brne	.-8      	; 0x23ee <UPDI::connect()+0x5e>
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv1.cpp:71
    Command_Table.write_memory = &write_memory;
    23f6:	00 c0       	rjmp	.+0      	; 0x23f8 <UPDI::connect()+0x68>
    23f8:	00 00       	nop
connect():
    23fa:	0e 9a       	sbi	0x01, 6	; 1
    23fc:	01 98       	cbi	0x00, 1	; 0
    23fe:	80 e8       	ldi	r24, 0x80	; 128
    2400:	8d bb       	out	0x1d, r24	; 29
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:333
    NVM::V1::setup();   /* default is dummy callback */
    openDrainWriteMacro(PIN_PG_TRST, LOW);
    2402:	90 e0       	ldi	r25, 0x00	; 0
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:334
    nop();
    2404:	80 e0       	ldi	r24, 0x00	; 0
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:336

    if (bit_is_set(PGCONF, PGCONF_FAIL_bp)) {
    2406:	0e 94 69 05 	call	0xad2	; 0xad2 <USART::drain(unsigned int)>
long_break():
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:340
      /* External Reset */
  #ifdef PIN_HV_POWER
      /* If the previous connect attempt failed, power off the device if possible. */
      digitalWriteMacro(PIN_HV_POWER, LOW);
    240a:	80 91 18 60 	lds	r24, 0x6018	; 0x806018 <_xclk>
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/modernAVR/0.2.14/cores/modernAVR/api/delay_busywait.h:42
    240e:	90 91 19 60 	lds	r25, 0x6019	; 0x806019 <_xclk+0x1>
    2412:	96 95       	lsr	r25
    2414:	87 95       	ror	r24
    2416:	96 95       	lsr	r25
    2418:	87 95       	ror	r24
    241a:	0e 94 74 05 	call	0xae8	; 0xae8 <USART::calk_baud_khz(unsigned int)>
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:342
      delay_millis(200);
      digitalWriteMacro(PIN_HV_POWER, HIGH);
    241e:	80 93 08 08 	sts	0x0808, r24	; 0x800808 <__TEXT_REGION_LENGTH__+0x7f0808>
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:350
      /* High-Voltage control */
  #endif
    }

    openDrainWriteMacro(PIN_PG_TRST, HIGH);
    PGCONF = PGCONF_FAIL_bm;
    2422:	90 93 09 08 	sts	0x0809, r25	; 0x800809 <__TEXT_REGION_LENGTH__+0x7f0809>
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:351
    USART::drain();
    2426:	80 e0       	ldi	r24, 0x00	; 0
    2428:	0e 94 cf 05 	call	0xb9e	; 0xb9e <UPDI::send(unsigned char)>
    242c:	80 91 18 60 	lds	r24, 0x6018	; 0x806018 <_xclk>
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:66
    return false;
  }

  void long_break (void) {
    D2PRINTF("<BREAK>");
    USART0_BAUD = USART::calk_baud_khz(_xclk >> 2);
    2430:	90 91 19 60 	lds	r25, 0x6019	; 0x806019 <_xclk+0x1>
    2434:	0e 94 74 05 	call	0xae8	; 0xae8 <USART::calk_baud_khz(unsigned int)>
    2438:	80 93 08 08 	sts	0x0808, r24	; 0x800808 <__TEXT_REGION_LENGTH__+0x7f0808>
    243c:	90 93 09 08 	sts	0x0809, r25	; 0x800809 <__TEXT_REGION_LENGTH__+0x7f0809>
connect():
    2440:	69 e0       	ldi	r22, 0x09	; 9
    2442:	70 e0       	ldi	r23, 0x00	; 0
    2444:	89 e6       	ldi	r24, 0x69	; 105
    2446:	90 e6       	ldi	r25, 0x60	; 96
    2448:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <UPDI::send_bytes(unsigned char const*, unsigned int)>
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:67
    send(0x00);
    244c:	81 11       	cpse	r24, r1
    244e:	05 c0       	rjmp	.+10     	; 0x245a <UPDI::connect()+0xca>
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:68
    USART0_BAUD = USART::calk_baud_khz(_xclk);
    2450:	90 e0       	ldi	r25, 0x00	; 0
    2452:	80 e0       	ldi	r24, 0x00	; 0
    2454:	df 91       	pop	r29
    2456:	cf 91       	pop	r28
    2458:	08 95       	ret
    245a:	0e 94 f3 05 	call	0xbe6	; 0xbe6 <UPDI::sys_status()>
    245e:	fc 99       	sbic	0x1f, 4	; 31
    2460:	fc cf       	rjmp	.-8      	; 0x245a <UPDI::connect()+0xca>
    2462:	8f b3       	in	r24, 0x1f	; 31
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:353

    openDrainWriteMacro(PIN_PG_TRST, HIGH);
    PGCONF = PGCONF_FAIL_bm;
    USART::drain();
    long_break();
    if (send_bytes(_init, sizeof(_init))) {
    2464:	1f 92       	push	r1
    2466:	8f 93       	push	r24
    2468:	80 e0       	ldi	r24, 0x00	; 0
    246a:	98 e0       	ldi	r25, 0x08	; 8
    246c:	9f 93       	push	r25
    246e:	8f 93       	push	r24
    2470:	cd e8       	ldi	r28, 0x8D	; 141
    2472:	d0 e6       	ldi	r29, 0x60	; 96
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:377
          memcpy(&packet.in.data[0], _sib[0] == ' ' ? &_sib[4] : &_sib[0], 4);
          return 5;
        }
      }
    }
    return 0;
    2474:	df 93       	push	r29
    2476:	cf 93       	push	r28
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:378
  }
    2478:	0e 94 29 0a 	call	0x1452	; 0x1452 <Print::printf(PGM_t const*, ...) [clone .constprop.21]>
    247c:	62 e0       	ldi	r22, 0x02	; 2
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:354
    openDrainWriteMacro(PIN_PG_TRST, HIGH);
    PGCONF = PGCONF_FAIL_bm;
    USART::drain();
    long_break();
    if (send_bytes(_init, sizeof(_init))) {
      do { sys_status(); } while(bit_is_set(RXDATA, 4));  /* wait clear INSLEEP */
    247e:	70 e0       	ldi	r23, 0x00	; 0
    2480:	87 e6       	ldi	r24, 0x67	; 103
    2482:	90 e6       	ldi	r25, 0x60	; 96
    2484:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <UPDI::send_bytes(unsigned char const*, unsigned int)>
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:355
      D1PRINTF("<STAT:%02X>", RXDATA);
    2488:	0f 90       	pop	r0
    248a:	0f 90       	pop	r0
    248c:	0f 90       	pop	r0
    248e:	0f 90       	pop	r0
    2490:	0f 90       	pop	r0
    2492:	0f 90       	pop	r0
    2494:	88 23       	and	r24, r24
    2496:	e1 f2       	breq	.-72     	; 0x2450 <UPDI::connect()+0xc0>
    2498:	60 e2       	ldi	r22, 0x20	; 32
    249a:	70 e0       	ldi	r23, 0x00	; 0
    249c:	8e ee       	ldi	r24, 0xEE	; 238
    249e:	92 e6       	ldi	r25, 0x62	; 98
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:356
      if (send_bytes(_sib256, sizeof(_sib256))
    24a0:	0e 94 e5 06 	call	0xdca	; 0xdca <UPDI::recv_bytes(unsigned char*, unsigned int)>
    24a4:	88 23       	and	r24, r24
    24a6:	a1 f2       	breq	.-88     	; 0x2450 <UPDI::connect()+0xc0>
    24a8:	8e ee       	ldi	r24, 0xEE	; 238
    24aa:	92 e6       	ldi	r25, 0x62	; 98
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:357
       && recv_bytes(_sib, 32)) {
    24ac:	9f 93       	push	r25
    24ae:	8f 93       	push	r24
    24b0:	86 ef       	ldi	r24, 0xF6	; 246
    24b2:	97 e0       	ldi	r25, 0x07	; 7
    24b4:	9f 93       	push	r25
    24b6:	8f 93       	push	r24
    24b8:	df 93       	push	r29
    24ba:	cf 93       	push	r28
    24bc:	0e 94 29 0a 	call	0x1452	; 0x1452 <Print::printf(PGM_t const*, ...) [clone .constprop.21]>
    24c0:	80 91 f8 62 	lds	r24, 0x62F8	; 0x8062f8 <_sib+0xa>
    24c4:	1f 92       	push	r1
    24c6:	8f 93       	push	r24
    24c8:	88 ee       	ldi	r24, 0xE8	; 232
    24ca:	97 e0       	ldi	r25, 0x07	; 7
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:359
        size_t _result = 0;
        D1PRINTF(" SIB=%s\r\n", _sib);
    24cc:	9f 93       	push	r25
    24ce:	8f 93       	push	r24
    24d0:	df 93       	push	r29
    24d2:	cf 93       	push	r28
    24d4:	0e 94 29 0a 	call	0x1452	; 0x1452 <Print::printf(PGM_t const*, ...) [clone .constprop.21]>
    24d8:	80 91 f8 62 	lds	r24, 0x62F8	; 0x8062f8 <_sib+0xa>
    24dc:	2d b7       	in	r18, 0x3d	; 61
    24de:	3e b7       	in	r19, 0x3e	; 62
    24e0:	24 5f       	subi	r18, 0xF4	; 244
    24e2:	3f 4f       	sbci	r19, 0xFF	; 255
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:360
        D1PRINTF(" <NVM:%02X>\r\n", _sib[10]);
    24e4:	2d bf       	out	0x3d, r18	; 61
    24e6:	3e bf       	out	0x3e, r19	; 62
    24e8:	85 33       	cpi	r24, 0x35	; 53
    24ea:	61 f5       	brne	.+88     	; 0x2544 <UPDI::connect()+0x1b4>
setup():
    24ec:	8d ee       	ldi	r24, 0xED	; 237
    24ee:	98 e0       	ldi	r25, 0x08	; 8
    24f0:	80 93 0e 63 	sts	0x630E, r24	; 0x80630e <Command_Table>
    24f4:	90 93 0f 63 	sts	0x630F, r25	; 0x80630f <Command_Table+0x1>
    24f8:	85 e8       	ldi	r24, 0x85	; 133
    24fa:	97 e0       	ldi	r25, 0x07	; 7
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:362
        /* Depending on the SIB, different low-level methods are executed. */
        if      (_sib[10] == '5') _result = NVM::V5::setup();
    24fc:	80 93 10 63 	sts	0x6310, r24	; 0x806310 <Command_Table+0x2>
    2500:	90 93 11 63 	sts	0x6311, r25	; 0x806311 <Command_Table+0x3>
    2504:	87 ea       	ldi	r24, 0xA7	; 167
    2506:	90 e1       	ldi	r25, 0x10	; 16
    2508:	80 93 12 63 	sts	0x6312, r24	; 0x806312 <Command_Table+0x4>
    250c:	90 93 13 63 	sts	0x6313, r25	; 0x806313 <Command_Table+0x5>
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv5.cpp:165
    }
  }

  bool setup (void) {
    Command_Table.prog_init    = &prog_init;
    2510:	82 e3       	ldi	r24, 0x32	; 50
    2512:	9c e0       	ldi	r25, 0x0C	; 12
    2514:	80 93 14 63 	sts	0x6314, r24	; 0x806314 <Command_Table+0x6>
    2518:	90 93 15 63 	sts	0x6315, r25	; 0x806315 <Command_Table+0x7>
connect():
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv5.cpp:166
    Command_Table.read_memory  = &read_memory;
    251c:	ef 98       	cbi	0x1d, 7	; 29
    251e:	e8 9a       	sbi	0x1d, 0	; 29
    2520:	80 91 ee 62 	lds	r24, 0x62EE	; 0x8062ee <_sib>
    2524:	ee ee       	ldi	r30, 0xEE	; 238
    2526:	f2 e6       	ldi	r31, 0x62	; 98
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv5.cpp:167
    Command_Table.erase_memory = &erase_memory;
    2528:	80 32       	cpi	r24, 0x20	; 32
    252a:	11 f4       	brne	.+4      	; 0x2530 <UPDI::connect()+0x1a0>
    252c:	e2 ef       	ldi	r30, 0xF2	; 242
    252e:	f2 e6       	ldi	r31, 0x62	; 98
    2530:	84 e0       	ldi	r24, 0x04	; 4
    2532:	a5 ed       	ldi	r26, 0xD5	; 213
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv5.cpp:168
    Command_Table.write_memory = &write_memory;
    2534:	b0 e6       	ldi	r27, 0x60	; 96
    2536:	01 90       	ld	r0, Z+
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv0.cpp:174

  bool setup (void) {
    Command_Table.prog_init    = &prog_init;
    Command_Table.read_memory  = &read_memory;
    Command_Table.erase_memory = &erase_memory;
    Command_Table.write_memory = &write_memory;
    2538:	0d 92       	st	X+, r0
    253a:	8a 95       	dec	r24
    253c:	e1 f7       	brne	.-8      	; 0x2536 <UPDI::connect()+0x1a6>
    253e:	85 e0       	ldi	r24, 0x05	; 5
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:370
        else if (_sib[10] == '2') _result = NVM::V2::setup();
        else if (_sib[10] == '0') _result = NVM::V0::setup();
        if (_result) {
          /* If the SIB is obtained, the first 4-characters are returned.       */
          /* If the 1st character is blank, the next 4-characters are returned. */
          bit_clear(PGCONF, PGCONF_FAIL_bp);
    2540:	90 e0       	ldi	r25, 0x00	; 0
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:371
          bit_set(PGCONF, PGCONF_UPDI_bp);
    2542:	88 cf       	rjmp	.-240    	; 0x2454 <UPDI::connect()+0xc4>
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:372
          memcpy(&packet.in.data[0], _sib[0] == ' ' ? &_sib[4] : &_sib[0], 4);
    2544:	84 33       	cpi	r24, 0x34	; 52
    2546:	a9 f4       	brne	.+42     	; 0x2572 <UPDI::connect()+0x1e2>
setup():
    2548:	8f ed       	ldi	r24, 0xDF	; 223
    254a:	98 e0       	ldi	r25, 0x08	; 8
    254c:	80 93 0e 63 	sts	0x630E, r24	; 0x80630e <Command_Table>
    2550:	90 93 0f 63 	sts	0x630F, r25	; 0x80630f <Command_Table+0x1>
    2554:	86 e5       	ldi	r24, 0x56	; 86
    2556:	97 e0       	ldi	r25, 0x07	; 7
    2558:	80 93 10 63 	sts	0x6310, r24	; 0x806310 <Command_Table+0x2>
    255c:	90 93 11 63 	sts	0x6311, r25	; 0x806311 <Command_Table+0x3>
    2560:	81 e7       	ldi	r24, 0x71	; 113
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:373
          return 5;
    2562:	90 e1       	ldi	r25, 0x10	; 16
    2564:	80 93 12 63 	sts	0x6312, r24	; 0x806312 <Command_Table+0x4>
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:363
        size_t _result = 0;
        D1PRINTF(" SIB=%s\r\n", _sib);
        D1PRINTF(" <NVM:%02X>\r\n", _sib[10]);
        /* Depending on the SIB, different low-level methods are executed. */
        if      (_sib[10] == '5') _result = NVM::V5::setup();
        else if (_sib[10] == '4') _result = NVM::V4::setup();
    2568:	90 93 13 63 	sts	0x6313, r25	; 0x806313 <Command_Table+0x5>
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv4.cpp:187
      return UPDI::send_bytes_block(_dwAddr, _wLength);
    }
  }

  bool setup (void) {
    Command_Table.prog_init    = &prog_init;
    256c:	82 e8       	ldi	r24, 0x82	; 130
    256e:	9c e0       	ldi	r25, 0x0C	; 12
    2570:	d1 cf       	rjmp	.-94     	; 0x2514 <UPDI::connect()+0x184>
connect():
    2572:	83 33       	cpi	r24, 0x33	; 51
    2574:	a9 f4       	brne	.+42     	; 0x25a0 <UPDI::connect()+0x210>
setup():
    2576:	85 ee       	ldi	r24, 0xE5	; 229
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv4.cpp:188
    Command_Table.read_memory  = &read_memory;
    2578:	98 e0       	ldi	r25, 0x08	; 8
    257a:	80 93 0e 63 	sts	0x630E, r24	; 0x80630e <Command_Table>
    257e:	90 93 0f 63 	sts	0x630F, r25	; 0x80630f <Command_Table+0x1>
    2582:	84 eb       	ldi	r24, 0xB4	; 180
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv4.cpp:189
    Command_Table.erase_memory = &erase_memory;
    2584:	97 e0       	ldi	r25, 0x07	; 7
    2586:	80 93 10 63 	sts	0x6310, r24	; 0x806310 <Command_Table+0x2>
    258a:	90 93 11 63 	sts	0x6311, r25	; 0x806311 <Command_Table+0x3>
    258e:	88 ea       	ldi	r24, 0xA8	; 168
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv4.cpp:190
    Command_Table.write_memory = &write_memory;
    2590:	90 e1       	ldi	r25, 0x10	; 16
    2592:	80 93 12 63 	sts	0x6312, r24	; 0x806312 <Command_Table+0x4>
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:364
        else if (_sib[10] == '3') _result = NVM::V3::setup();
    2596:	90 93 13 63 	sts	0x6313, r25	; 0x806313 <Command_Table+0x5>
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv3.cpp:162
    }
  }

  bool setup (void) {
    Command_Table.prog_init    = &prog_init;
    259a:	8b ef       	ldi	r24, 0xFB	; 251
    259c:	9c e0       	ldi	r25, 0x0C	; 12
    259e:	ba cf       	rjmp	.-140    	; 0x2514 <UPDI::connect()+0x184>
connect():
    25a0:	82 33       	cpi	r24, 0x32	; 50
    25a2:	a9 f4       	brne	.+42     	; 0x25ce <UPDI::connect()+0x23e>
setup():
    25a4:	83 e8       	ldi	r24, 0x83	; 131
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv3.cpp:163
    Command_Table.read_memory  = &read_memory;
    25a6:	99 e0       	ldi	r25, 0x09	; 9
    25a8:	80 93 0e 63 	sts	0x630E, r24	; 0x80630e <Command_Table>
    25ac:	90 93 0f 63 	sts	0x630F, r25	; 0x80630f <Command_Table+0x1>
    25b0:	86 e8       	ldi	r24, 0x86	; 134
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv3.cpp:164
    Command_Table.erase_memory = &erase_memory;
    25b2:	97 e0       	ldi	r25, 0x07	; 7
    25b4:	80 93 10 63 	sts	0x6310, r24	; 0x806310 <Command_Table+0x2>
    25b8:	90 93 11 63 	sts	0x6311, r25	; 0x806311 <Command_Table+0x3>
    25bc:	87 e8       	ldi	r24, 0x87	; 135
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv3.cpp:165
    Command_Table.write_memory = &write_memory;
    25be:	90 e1       	ldi	r25, 0x10	; 16
    25c0:	80 93 12 63 	sts	0x6312, r24	; 0x806312 <Command_Table+0x4>
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:365
        else if (_sib[10] == '2') _result = NVM::V2::setup();
    25c4:	90 93 13 63 	sts	0x6313, r25	; 0x806313 <Command_Table+0x5>
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv2.cpp:184
      return UPDI::send_bytes_block(_dwAddr, _wLength);
    }
  }

  bool setup (void) {
    Command_Table.prog_init    = &prog_init;
    25c8:	8b e4       	ldi	r24, 0x4B	; 75
    25ca:	9d e0       	ldi	r25, 0x0D	; 13
    25cc:	a3 cf       	rjmp	.-186    	; 0x2514 <UPDI::connect()+0x184>
connect():
    25ce:	80 33       	cpi	r24, 0x30	; 48
    25d0:	09 f0       	breq	.+2      	; 0x25d4 <UPDI::connect()+0x244>
    25d2:	3e cf       	rjmp	.-388    	; 0x2450 <UPDI::connect()+0xc0>
setup():
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv2.cpp:185
    Command_Table.read_memory  = &read_memory;
    25d4:	82 e6       	ldi	r24, 0x62	; 98
    25d6:	99 e0       	ldi	r25, 0x09	; 9
    25d8:	80 93 0e 63 	sts	0x630E, r24	; 0x80630e <Command_Table>
    25dc:	90 93 0f 63 	sts	0x630F, r25	; 0x80630f <Command_Table+0x1>
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv2.cpp:186
    Command_Table.erase_memory = &erase_memory;
    25e0:	85 eb       	ldi	r24, 0xB5	; 181
    25e2:	97 e0       	ldi	r25, 0x07	; 7
    25e4:	80 93 10 63 	sts	0x6310, r24	; 0x806310 <Command_Table+0x2>
    25e8:	90 93 11 63 	sts	0x6311, r25	; 0x806311 <Command_Table+0x3>
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv2.cpp:187
    Command_Table.write_memory = &write_memory;
    25ec:	8d e9       	ldi	r24, 0x9D	; 157
    25ee:	90 e1       	ldi	r25, 0x10	; 16
    25f0:	80 93 12 63 	sts	0x6312, r24	; 0x806312 <Command_Table+0x4>
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:366
        else if (_sib[10] == '0') _result = NVM::V0::setup();
    25f4:	90 93 13 63 	sts	0x6313, r25	; 0x806313 <Command_Table+0x5>
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv0.cpp:171
      return UPDI::send_bytes_block(_wAddr, _wLength);
    }
  }

  bool setup (void) {
    Command_Table.prog_init    = &prog_init;
    25f8:	84 ec       	ldi	r24, 0xC4	; 196
    25fa:	9d e0       	ldi	r25, 0x0D	; 13
    25fc:	8b cf       	rjmp	.-234    	; 0x2514 <UPDI::connect()+0x184>

000025fe <TPI::write_memory()>:
write_memory():
    25fe:	6f 92       	push	r6
    2600:	7f 92       	push	r7
    2602:	8f 92       	push	r8
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv0.cpp:172
    Command_Table.read_memory  = &read_memory;
    2604:	9f 92       	push	r9
    2606:	af 92       	push	r10
    2608:	bf 92       	push	r11
    260a:	cf 92       	push	r12
    260c:	df 92       	push	r13
    260e:	ef 92       	push	r14
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv0.cpp:173
    Command_Table.erase_memory = &erase_memory;
    2610:	ff 92       	push	r15
    2612:	0f 93       	push	r16
    2614:	1f 93       	push	r17
    2616:	cf 93       	push	r28
    2618:	df 93       	push	r29
    261a:	20 91 d4 60 	lds	r18, 0x60D4	; 0x8060d4 <packet+0x6>
bswap16():
/Users/askn/Collaborator/UPDI4AVR-USB/src/nvmv0.cpp:174
    Command_Table.write_memory = &write_memory;
    261e:	c0 90 d8 60 	lds	r12, 0x60D8	; 0x8060d8 <packet+0xa>
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:152
      ++_cnt;
    }
    return _wLength + 1;
  }

  size_t write_memory (void) {
    2622:	d0 90 d9 60 	lds	r13, 0x60D9	; 0x8060d9 <packet+0xb>
    2626:	dc 24       	eor	r13, r12
    2628:	cd 24       	eor	r12, r13
    262a:	dc 24       	eor	r13, r12
    262c:	00 91 da 60 	lds	r16, 0x60DA	; 0x8060da <packet+0xc>
    2630:	10 91 db 60 	lds	r17, 0x60DB	; 0x8060db <packet+0xd>
    2634:	10 27       	eor	r17, r16
    2636:	01 27       	eor	r16, r17
    2638:	10 27       	eor	r17, r16
write_memory():
    263a:	60 90 9b 60 	lds	r6, 0x609B	; 0x80609b <_tpi_chunks>
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:153
    uint8_t   m_type = packet.out.tpi.read.bMType;
    263e:	86 2c       	mov	r8, r6
    2640:	91 2c       	mov	r9, r1
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/modernAVR/0.2.14/cores/modernAVR/api/cpp/btools.cpp:45
//
// Byte convert
//

uint16_t bswap16 (uint16_t _word) {
  return __builtin_bswap16(_word);
    2642:	c4 01       	movw	r24, r8
    2644:	01 97       	sbiw	r24, 0x01	; 1
    2646:	cc ed       	ldi	r28, 0xDC	; 220
    2648:	d0 e6       	ldi	r29, 0x60	; 96
    264a:	3f ef       	ldi	r19, 0xFF	; 255
    264c:	ac 01       	movw	r20, r24
    264e:	4c 21       	and	r20, r12
    2650:	5d 21       	and	r21, r13
    2652:	45 2b       	or	r20, r21
    2654:	71 f4       	brne	.+28     	; 0x2672 <TPI::write_memory()+0x74>
    2656:	3f ef       	ldi	r19, 0xFF	; 255
    2658:	7c 01       	movw	r14, r24
    265a:	e0 22       	and	r14, r16
    265c:	f1 22       	and	r15, r17
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:161
    uint8_t *_p = &packet.out.tpi.write.memData[0];
    bool _result = true;

    /* To accommodate older host programs, */
    /* the address must be aligned to the top of the page. */
    while (_dwAddr & (_tpi_chunks - 1)) {
    265e:	e1 14       	cp	r14, r1
    2660:	f1 04       	cpc	r15, r1
    2662:	71 f0       	breq	.+28     	; 0x2680 <TPI::write_memory()+0x82>
    2664:	f8 01       	movw	r30, r16
    2666:	ec 0d       	add	r30, r12
    2668:	fd 1d       	adc	r31, r13
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:156

  size_t write_memory (void) {
    uint8_t   m_type = packet.out.tpi.read.bMType;
    uint16_t _dwAddr = bswap16(_CAPS32(packet.out.tpi.write.dwAddr)->words[1]);
    size_t  _wLength = bswap16(packet.out.tpi.write.wLength);
    uint8_t *_p = &packet.out.tpi.write.memData[0];
    266a:	30 83       	st	Z, r19
    266c:	0f 5f       	subi	r16, 0xFF	; 255
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:164
    /* To accommodate older host programs, */
    /* the address must be aligned to the top of the page. */
    while (_dwAddr & (_tpi_chunks - 1)) {
      _dwAddr--;
      _wLength++;
      *--_p = 0xFF;   /* NAND masked dummy bytes */
    266e:	1f 4f       	sbci	r17, 0xFF	; 255
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:161
    uint8_t *_p = &packet.out.tpi.write.memData[0];
    bool _result = true;

    /* To accommodate older host programs, */
    /* the address must be aligned to the top of the page. */
    while (_dwAddr & (_tpi_chunks - 1)) {
    2670:	f3 cf       	rjmp	.-26     	; 0x2658 <TPI::write_memory()+0x5a>
    2672:	41 e0       	ldi	r20, 0x01	; 1
    2674:	c4 1a       	sub	r12, r20
    2676:	d1 08       	sbc	r13, r1
    2678:	0f 5f       	subi	r16, 0xFF	; 255
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:167
      _dwAddr--;
      _wLength++;
      *--_p = 0xFF;   /* NAND masked dummy bytes */
    }
    while (_wLength & (_tpi_chunks - 1)) {
      *((uint8_t*)(_dwAddr + _wLength++)) = 0xFF;
    267a:	1f 4f       	sbci	r17, 0xFF	; 255
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:166
    while (_dwAddr & (_tpi_chunks - 1)) {
      _dwAddr--;
      _wLength++;
      *--_p = 0xFF;   /* NAND masked dummy bytes */
    }
    while (_wLength & (_tpi_chunks - 1)) {
    267c:	3a 93       	st	-Y, r19
    267e:	e6 cf       	rjmp	.-52     	; 0x264c <TPI::write_memory()+0x4e>
    2680:	21 30       	cpi	r18, 0x01	; 1
    2682:	49 f5       	brne	.+82     	; 0x26d6 <TPI::write_memory()+0xd8>
    2684:	0e 94 0d 08 	call	0x101a	; 0x101a <TPI::nvm_wait()>
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:167
      *((uint8_t*)(_dwAddr + _wLength++)) = 0xFF;
    2688:	78 2e       	mov	r7, r24
    268a:	88 23       	and	r24, r24
    268c:	21 f0       	breq	.+8      	; 0x2696 <TPI::write_memory()+0x98>
    268e:	c6 01       	movw	r24, r12
    2690:	0e 94 2b 08 	call	0x1056	; 0x1056 <TPI::set_sstpr(unsigned int)>
    2694:	78 2e       	mov	r7, r24
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:162
    bool _result = true;

    /* To accommodate older host programs, */
    /* the address must be aligned to the top of the page. */
    while (_dwAddr & (_tpi_chunks - 1)) {
      _dwAddr--;
    2696:	b1 2c       	mov	r11, r1
    2698:	a1 2c       	mov	r10, r1
    269a:	a0 16       	cp	r10, r16
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:163
      _wLength++;
    269c:	b1 06       	cpc	r11, r17
    269e:	08 f0       	brcs	.+2      	; 0x26a2 <TPI::write_memory()+0xa4>
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:164
      *--_p = 0xFF;   /* NAND masked dummy bytes */
    26a0:	8a c0       	rjmp	.+276    	; 0x27b6 <TPI::write_memory()+0x1b8>
    26a2:	8d e1       	ldi	r24, 0x1D	; 29
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:174
    D2PRINTF(" FIXED_WRITE=%08X:%04X\r\n", _dwAddr, _wLength);

    /* For the flash code area, the page erase can be */
    /* omitted if the chip has already been erased.   */
    /* 0x01: XPRG_MEM_TYPE_APPL */
    if (m_type != 0x01) {
    26a4:	0e 94 01 08 	call	0x1002	; 0x1002 <TPI::nvm_ctrl(unsigned char)>
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:185
        && set_sst(0xFF)
        && nvm_wait()
        && nvm_ctrl(0x00);
      if (!_result) return 0;
    }
    _result &= nvm_wait() && set_sstpr(_dwAddr);
    26a8:	88 23       	and	r24, r24
    26aa:	31 f0       	breq	.+12     	; 0x26b8 <TPI::write_memory()+0xba>
    26ac:	88 81       	ld	r24, Y
    26ae:	0e 94 19 08 	call	0x1032	; 0x1032 <TPI::set_sst(unsigned char)>
    26b2:	81 11       	cpse	r24, r1
    26b4:	3d c0       	rjmp	.+122    	; 0x2730 <TPI::write_memory()+0x132>
    26b6:	21 96       	adiw	r28, 0x01	; 1
    26b8:	78 22       	and	r7, r24
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:156

  size_t write_memory (void) {
    uint8_t   m_type = packet.out.tpi.read.bMType;
    uint16_t _dwAddr = bswap16(_CAPS32(packet.out.tpi.write.dwAddr)->words[1]);
    size_t  _wLength = bswap16(packet.out.tpi.write.wLength);
    uint8_t *_p = &packet.out.tpi.write.memData[0];
    26ba:	94 e0       	ldi	r25, 0x04	; 4
    26bc:	69 12       	cpse	r6, r25
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:187
        && nvm_ctrl(0x00);
      if (!_result) return 0;
    }
    _result &= nvm_wait() && set_sstpr(_dwAddr);
    /* WRITE_PAGE */
    for (size_t _i = 0; _i < _wLength; _i += _tpi_chunks) {
    26be:	51 c0       	rjmp	.+162    	; 0x2762 <TPI::write_memory()+0x164>
    26c0:	8c e0       	ldi	r24, 0x0C	; 12
    26c2:	90 e0       	ldi	r25, 0x00	; 0
    26c4:	0e 94 43 08 	call	0x1086	; 0x1086 <TPI::idle_clock(unsigned int)>
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:189
      D2PRINTF(" CODE_WRITE=%08X:%04X\r\n", _dwAddr, _tpi_chunks);
      _result &= nvm_ctrl(0x1D)
    26c8:	88 81       	ld	r24, Y
    26ca:	0e 94 19 08 	call	0x1032	; 0x1032 <TPI::set_sst(unsigned char)>
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:191
              && set_sst(*_p++)
              && set_sst(*_p++);
    26ce:	81 11       	cpse	r24, r1
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:190
    _result &= nvm_wait() && set_sstpr(_dwAddr);
    /* WRITE_PAGE */
    for (size_t _i = 0; _i < _wLength; _i += _tpi_chunks) {
      D2PRINTF(" CODE_WRITE=%08X:%04X\r\n", _dwAddr, _tpi_chunks);
      _result &= nvm_ctrl(0x1D)
              && set_sst(*_p++)
    26d0:	38 c0       	rjmp	.+112    	; 0x2742 <TPI::write_memory()+0x144>
    26d2:	21 96       	adiw	r28, 0x01	; 1
    26d4:	3e c0       	rjmp	.+124    	; 0x2752 <TPI::write_memory()+0x154>
    26d6:	0e 94 0d 08 	call	0x101a	; 0x101a <TPI::nvm_wait()>
    26da:	88 23       	and	r24, r24
    26dc:	c9 f0       	breq	.+50     	; 0x2710 <TPI::write_memory()+0x112>
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:192
              && set_sst(*_p++);
      if (_tpi_chunks == 4) {
    26de:	c6 01       	movw	r24, r12
    26e0:	81 60       	ori	r24, 0x01	; 1
    26e2:	0e 94 2b 08 	call	0x1056	; 0x1056 <TPI::set_sstpr(unsigned int)>
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:193
        idle_clock(12);
    26e6:	88 23       	and	r24, r24
    26e8:	99 f0       	breq	.+38     	; 0x2710 <TPI::write_memory()+0x112>
    26ea:	84 e1       	ldi	r24, 0x14	; 20
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:194
        _result &= set_sst(*_p++) && set_sst(*_p++);
    26ec:	0e 94 01 08 	call	0x1002	; 0x1002 <TPI::nvm_ctrl(unsigned char)>
    26f0:	88 23       	and	r24, r24
    26f2:	71 f0       	breq	.+28     	; 0x2710 <TPI::write_memory()+0x112>
    26f4:	8f ef       	ldi	r24, 0xFF	; 255
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:200
      }
      if (_tpi_chunks == 8) {
        idle_clock(12);
        _result &= set_sst(*_p++) && set_sst(*_p++);
        idle_clock(12);
        _result &= set_sst(*_p++) && set_sst(*_p++);
    26f6:	0e 94 19 08 	call	0x1032	; 0x1032 <TPI::set_sst(unsigned char)>
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:177
    /* omitted if the chip has already been erased.   */
    /* 0x01: XPRG_MEM_TYPE_APPL */
    if (m_type != 0x01) {
      /* SECTION_ERASE */
      D2PRINTF(" SECTION_ERASE=%04X>%04X\r\n", _dwAddr | 1, _CAPS16(_before_page)->word);
      _result &= nvm_wait()
    26fa:	88 23       	and	r24, r24
    26fc:	49 f0       	breq	.+18     	; 0x2710 <TPI::write_memory()+0x112>
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:182
        && set_sstpr(_dwAddr | 1)
        && nvm_ctrl(0x14)
        && set_sst(0xFF)
        && nvm_wait()
        && nvm_ctrl(0x00);
    26fe:	0e 94 0d 08 	call	0x101a	; 0x101a <TPI::nvm_wait()>
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:178
    /* 0x01: XPRG_MEM_TYPE_APPL */
    if (m_type != 0x01) {
      /* SECTION_ERASE */
      D2PRINTF(" SECTION_ERASE=%04X>%04X\r\n", _dwAddr | 1, _CAPS16(_before_page)->word);
      _result &= nvm_wait()
        && set_sstpr(_dwAddr | 1)
    2702:	88 23       	and	r24, r24
    2704:	29 f0       	breq	.+10     	; 0x2710 <TPI::write_memory()+0x112>
    2706:	80 e0       	ldi	r24, 0x00	; 0
    2708:	0e 94 01 08 	call	0x1002	; 0x1002 <TPI::nvm_ctrl(unsigned char)>
    270c:	81 11       	cpse	r24, r1
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:179
        && nvm_ctrl(0x14)
    270e:	ba cf       	rjmp	.-140    	; 0x2684 <TPI::write_memory()+0x86>
    2710:	c7 01       	movw	r24, r14
    2712:	df 91       	pop	r29
    2714:	cf 91       	pop	r28
    2716:	1f 91       	pop	r17
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:180
        && set_sst(0xFF)
    2718:	0f 91       	pop	r16
    271a:	ff 90       	pop	r15
    271c:	ef 90       	pop	r14
    271e:	df 90       	pop	r13
    2720:	cf 90       	pop	r12
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:181
        && nvm_wait()
    2722:	bf 90       	pop	r11
    2724:	af 90       	pop	r10
    2726:	9f 90       	pop	r9
    2728:	8f 90       	pop	r8
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:182
        && nvm_ctrl(0x00);
    272a:	7f 90       	pop	r7
    272c:	6f 90       	pop	r6
    272e:	08 95       	ret
    2730:	6e 01       	movw	r12, r28
    2732:	82 e0       	ldi	r24, 0x02	; 2
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:207
      _result &= nvm_wait();
      if (!_result) return 0;
      _dwAddr += _tpi_chunks;
    }
    return nvm_ctrl(0x00);
  }
    2734:	c8 0e       	add	r12, r24
    2736:	d1 1c       	adc	r13, r1
    2738:	89 81       	ldd	r24, Y+1	; 0x01
    273a:	0e 94 19 08 	call	0x1032	; 0x1032 <TPI::set_sst(unsigned char)>
    273e:	e6 01       	movw	r28, r12
    2740:	bb cf       	rjmp	.-138    	; 0x26b8 <TPI::write_memory()+0xba>
    2742:	6e 01       	movw	r12, r28
    2744:	e2 e0       	ldi	r30, 0x02	; 2
    2746:	ce 0e       	add	r12, r30
    2748:	d1 1c       	adc	r13, r1
    274a:	89 81       	ldd	r24, Y+1	; 0x01
    274c:	0e 94 19 08 	call	0x1032	; 0x1032 <TPI::set_sst(unsigned char)>
    2750:	e6 01       	movw	r28, r12
    2752:	78 22       	and	r7, r24
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:191
    /* WRITE_PAGE */
    for (size_t _i = 0; _i < _wLength; _i += _tpi_chunks) {
      D2PRINTF(" CODE_WRITE=%08X:%04X\r\n", _dwAddr, _tpi_chunks);
      _result &= nvm_ctrl(0x1D)
              && set_sst(*_p++)
              && set_sst(*_p++);
    2754:	0e 94 0d 08 	call	0x101a	; 0x101a <TPI::nvm_wait()>
    2758:	78 22       	and	r7, r24
    275a:	d1 f2       	breq	.-76     	; 0x2710 <TPI::write_memory()+0x112>
    275c:	a8 0c       	add	r10, r8
    275e:	b9 1c       	adc	r11, r9
    2760:	9c cf       	rjmp	.-200    	; 0x269a <TPI::write_memory()+0x9c>
    2762:	f8 e0       	ldi	r31, 0x08	; 8
    2764:	6f 12       	cpse	r6, r31
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:194
      if (_tpi_chunks == 4) {
        idle_clock(12);
        _result &= set_sst(*_p++) && set_sst(*_p++);
    2766:	f6 cf       	rjmp	.-20     	; 0x2754 <TPI::write_memory()+0x156>
    2768:	8c e0       	ldi	r24, 0x0C	; 12
    276a:	90 e0       	ldi	r25, 0x00	; 0
    276c:	0e 94 43 08 	call	0x1086	; 0x1086 <TPI::idle_clock(unsigned int)>
    2770:	88 81       	ld	r24, Y
    2772:	0e 94 19 08 	call	0x1032	; 0x1032 <TPI::set_sst(unsigned char)>
    2776:	6e 01       	movw	r12, r28
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:202
        idle_clock(12);
        _result &= set_sst(*_p++) && set_sst(*_p++);
        idle_clock(12);
        _result &= set_sst(*_p++) && set_sst(*_p++);
      }
      _result &= nvm_wait();
    2778:	81 11       	cpse	r24, r1
    277a:	16 c0       	rjmp	.+44     	; 0x27a8 <TPI::write_memory()+0x1aa>
    277c:	4f ef       	ldi	r20, 0xFF	; 255
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:203
      if (!_result) return 0;
    277e:	c4 1a       	sub	r12, r20
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:187
        && nvm_ctrl(0x00);
      if (!_result) return 0;
    }
    _result &= nvm_wait() && set_sstpr(_dwAddr);
    /* WRITE_PAGE */
    for (size_t _i = 0; _i < _wLength; _i += _tpi_chunks) {
    2780:	d4 0a       	sbc	r13, r20
    2782:	78 22       	and	r7, r24
    2784:	8c e0       	ldi	r24, 0x0C	; 12
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:196
              && set_sst(*_p++);
      if (_tpi_chunks == 4) {
        idle_clock(12);
        _result &= set_sst(*_p++) && set_sst(*_p++);
      }
      if (_tpi_chunks == 8) {
    2786:	90 e0       	ldi	r25, 0x00	; 0
    2788:	0e 94 43 08 	call	0x1086	; 0x1086 <TPI::idle_clock(unsigned int)>
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:197
        idle_clock(12);
    278c:	f6 01       	movw	r30, r12
    278e:	80 81       	ld	r24, Z
    2790:	0e 94 19 08 	call	0x1032	; 0x1032 <TPI::set_sst(unsigned char)>
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:198
        _result &= set_sst(*_p++) && set_sst(*_p++);
    2794:	e6 01       	movw	r28, r12
    2796:	88 23       	and	r24, r24
    2798:	09 f4       	brne	.+2      	; 0x279c <TPI::write_memory()+0x19e>
    279a:	9b cf       	rjmp	.-202    	; 0x26d2 <TPI::write_memory()+0xd4>
    279c:	22 96       	adiw	r28, 0x02	; 2
    279e:	f6 01       	movw	r30, r12
    27a0:	81 81       	ldd	r24, Z+1	; 0x01
    27a2:	0e 94 19 08 	call	0x1032	; 0x1032 <TPI::set_sst(unsigned char)>
    27a6:	d5 cf       	rjmp	.-86     	; 0x2752 <TPI::write_memory()+0x154>
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:199
        idle_clock(12);
    27a8:	82 e0       	ldi	r24, 0x02	; 2
    27aa:	c8 0e       	add	r12, r24
    27ac:	d1 1c       	adc	r13, r1
    27ae:	89 81       	ldd	r24, Y+1	; 0x01
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:200
        _result &= set_sst(*_p++) && set_sst(*_p++);
    27b0:	0e 94 19 08 	call	0x1032	; 0x1032 <TPI::set_sst(unsigned char)>
    27b4:	e6 cf       	rjmp	.-52     	; 0x2782 <TPI::write_memory()+0x184>
    27b6:	80 e0       	ldi	r24, 0x00	; 0
    27b8:	0e 94 01 08 	call	0x1002	; 0x1002 <TPI::nvm_ctrl(unsigned char)>
    27bc:	e8 2e       	mov	r14, r24
    27be:	f1 2c       	mov	r15, r1
    27c0:	a7 cf       	rjmp	.-178    	; 0x2710 <TPI::write_memory()+0x112>

000027c2 <TPI::read_memory()>:
read_memory():
    27c2:	0f 93       	push	r16
    27c4:	1f 93       	push	r17
    27c6:	cf 93       	push	r28
    27c8:	df 93       	push	r29
bswap16():
    27ca:	80 91 d7 60 	lds	r24, 0x60D7	; 0x8060d7 <packet+0x9>
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:198
        idle_clock(12);
        _result &= set_sst(*_p++) && set_sst(*_p++);
      }
      if (_tpi_chunks == 8) {
        idle_clock(12);
        _result &= set_sst(*_p++) && set_sst(*_p++);
    27ce:	90 91 d8 60 	lds	r25, 0x60D8	; 0x8060d8 <packet+0xa>
    27d2:	c0 91 d9 60 	lds	r28, 0x60D9	; 0x8060d9 <packet+0xb>
    27d6:	d0 91 da 60 	lds	r29, 0x60DA	; 0x8060da <packet+0xc>
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:206
      }
      _result &= nvm_wait();
      if (!_result) return 0;
      _dwAddr += _tpi_chunks;
    }
    return nvm_ctrl(0x00);
    27da:	dc 27       	eor	r29, r28
    27dc:	cd 27       	eor	r28, r29
    27de:	dc 27       	eor	r29, r28
read_memory():
    27e0:	98 27       	eor	r25, r24
    27e2:	89 27       	eor	r24, r25
    27e4:	98 27       	eor	r25, r24
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:136
        }
    }
    return 0;
  }

  size_t read_memory (void) {
    27e6:	0e 94 2b 08 	call	0x1056	; 0x1056 <TPI::set_sstpr(unsigned int)>
    27ea:	0e ec       	ldi	r16, 0xCE	; 206
    27ec:	10 e6       	ldi	r17, 0x60	; 96
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/modernAVR/0.2.14/cores/modernAVR/api/cpp/btools.cpp:45
    27ee:	c8 01       	movw	r24, r16
    27f0:	8e 5c       	subi	r24, 0xCE	; 206
    27f2:	90 46       	sbci	r25, 0x60	; 96
    27f4:	8c 17       	cp	r24, r28
    27f6:	9d 07       	cpc	r25, r29
    27f8:	50 f4       	brcc	.+20     	; 0x280e <TPI::read_memory()+0x4c>
    27fa:	0e 94 25 08 	call	0x104a	; 0x104a <TPI::get_sld()>
    27fe:	0f 5f       	subi	r16, 0xFF	; 255
    2800:	1f 4f       	sbci	r17, 0xFF	; 255
    2802:	88 23       	and	r24, r24
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:143
    uint16_t _dwAddr = bswap16(_CAPS32(packet.out.tpi.read.dwAddr)->words[1]);
    size_t  _wLength = bswap16(packet.out.tpi.read.wLength);
    uint8_t *_q = &packet.in.data[0];
    size_t _cnt = 0;
    D2PRINTF(" READ=%08X:%04X\r\n", _dwAddr, _wLength);
    set_sstpr(_dwAddr);
    2804:	59 f0       	breq	.+22     	; 0x281c <TPI::read_memory()+0x5a>
    2806:	8f b3       	in	r24, 0x1f	; 31
    2808:	f8 01       	movw	r30, r16
    280a:	86 83       	std	Z+6, r24	; 0x06
    280c:	f0 cf       	rjmp	.-32     	; 0x27ee <TPI::read_memory()+0x2c>
    280e:	ce 01       	movw	r24, r28
    2810:	01 96       	adiw	r24, 0x01	; 1
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:144
    while (_cnt < _wLength) {
    2812:	df 91       	pop	r29
    2814:	cf 91       	pop	r28
    2816:	1f 91       	pop	r17
    2818:	0f 91       	pop	r16
    281a:	08 95       	ret
    281c:	90 e0       	ldi	r25, 0x00	; 0
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:145
      if (!get_sld()) return 0;
    281e:	80 e0       	ldi	r24, 0x00	; 0
    2820:	f8 cf       	rjmp	.-16     	; 0x2812 <TPI::read_memory()+0x50>

00002822 <TPI::erase_memory()>:
erase_memory():
    2822:	cf 93       	push	r28
    2824:	df 93       	push	r29
bswap16():
    2826:	c0 91 d7 60 	lds	r28, 0x60D7	; 0x8060d7 <packet+0x9>
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:146
      *_q++ = RXDATA;
    282a:	d0 91 d8 60 	lds	r29, 0x60D8	; 0x8060d8 <packet+0xa>
    282e:	dc 27       	eor	r29, r28
    2830:	cd 27       	eor	r28, r29
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:149
      ++_cnt;
    }
    return _wLength + 1;
    2832:	dc 27       	eor	r29, r28
erase_memory():
    2834:	80 91 d4 60 	lds	r24, 0x60D4	; 0x8060d4 <packet+0x6>
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:150
  }
    2838:	81 30       	cpi	r24, 0x01	; 1
    283a:	99 f5       	brne	.+102    	; 0x28a2 <TPI::erase_memory()+0x80>
    283c:	df 93       	push	r29
    283e:	cf 93       	push	r28
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:145
    uint8_t *_q = &packet.in.data[0];
    size_t _cnt = 0;
    D2PRINTF(" READ=%08X:%04X\r\n", _dwAddr, _wLength);
    set_sstpr(_dwAddr);
    while (_cnt < _wLength) {
      if (!get_sld()) return 0;
    2840:	83 ef       	ldi	r24, 0xF3	; 243
    2842:	96 e0       	ldi	r25, 0x06	; 6
    2844:	9f 93       	push	r25
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:103

  bool nvm_ctrl (const uint8_t _nvmcmd) {
    return set_sout(0x63, _nvmcmd);   /* NVMCMD_REG: IO=0x33 */
  }

  size_t erase_memory (void) {
    2846:	8f 93       	push	r24
    2848:	8d e8       	ldi	r24, 0x8D	; 141
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/modernAVR/0.2.14/cores/modernAVR/api/cpp/btools.cpp:45
    284a:	90 e6       	ldi	r25, 0x60	; 96
    284c:	9f 93       	push	r25
    284e:	8f 93       	push	r24
    2850:	0e 94 29 0a 	call	0x1452	; 0x1452 <Print::printf(PGM_t const*, ...) [clone .constprop.21]>
    2854:	0e 94 0d 08 	call	0x101a	; 0x101a <TPI::nvm_wait()>
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:106
    uint8_t   m_type = packet.out.tpi.read.bMType;
    uint16_t _dwAddr = bswap16(_CAPS32(packet.out.tpi.read.dwAddr)->words[1]);
    if (m_type == 0x01) {
    2858:	0f 90       	pop	r0
    285a:	0f 90       	pop	r0
    285c:	0f 90       	pop	r0
    285e:	0f 90       	pop	r0
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:108
      /* XPRG_ERASE_CHIP */
      D1PRINTF(" CHIP_ERASE=%04X\r\n", _dwAddr);
    2860:	0f 90       	pop	r0
    2862:	0f 90       	pop	r0
    2864:	81 11       	cpse	r24, r1
    2866:	05 c0       	rjmp	.+10     	; 0x2872 <TPI::erase_memory()+0x50>
    2868:	90 e0       	ldi	r25, 0x00	; 0
    286a:	80 e0       	ldi	r24, 0x00	; 0
    286c:	df 91       	pop	r29
    286e:	cf 91       	pop	r28
    2870:	08 95       	ret
    2872:	ce 01       	movw	r24, r28
    2874:	0e 94 2b 08 	call	0x1056	; 0x1056 <TPI::set_sstpr(unsigned int)>
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:109
      if (nvm_wait()
    2878:	88 23       	and	r24, r24
    287a:	b1 f3       	breq	.-20     	; 0x2868 <TPI::erase_memory()+0x46>
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:114
        && set_sstpr(_dwAddr)
        && nvm_ctrl(0x10)
        && set_sst(0xFF)
        && nvm_wait()
        && nvm_ctrl(0x00)) {
    287c:	80 e1       	ldi	r24, 0x10	; 16
    287e:	0e 94 01 08 	call	0x1002	; 0x1002 <TPI::nvm_ctrl(unsigned char)>
    2882:	88 23       	and	r24, r24
    2884:	89 f3       	breq	.-30     	; 0x2868 <TPI::erase_memory()+0x46>
    2886:	8f ef       	ldi	r24, 0xFF	; 255
    2888:	0e 94 19 08 	call	0x1032	; 0x1032 <TPI::set_sst(unsigned char)>
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:133
        && nvm_wait()
        && nvm_ctrl(0x00)) {
          return 1;
        }
    }
    return 0;
    288c:	88 23       	and	r24, r24
    288e:	61 f3       	breq	.-40     	; 0x2868 <TPI::erase_memory()+0x46>
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:134
  }
    2890:	0e 94 0d 08 	call	0x101a	; 0x101a <TPI::nvm_wait()>
    2894:	88 23       	and	r24, r24
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:110
    uint16_t _dwAddr = bswap16(_CAPS32(packet.out.tpi.read.dwAddr)->words[1]);
    if (m_type == 0x01) {
      /* XPRG_ERASE_CHIP */
      D1PRINTF(" CHIP_ERASE=%04X\r\n", _dwAddr);
      if (nvm_wait()
        && set_sstpr(_dwAddr)
    2896:	41 f3       	breq	.-48     	; 0x2868 <TPI::erase_memory()+0x46>
    2898:	80 e0       	ldi	r24, 0x00	; 0
    289a:	0e 94 01 08 	call	0x1002	; 0x1002 <TPI::nvm_ctrl(unsigned char)>
    289e:	90 e0       	ldi	r25, 0x00	; 0
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:111
        && nvm_ctrl(0x10)
    28a0:	e5 cf       	rjmp	.-54     	; 0x286c <TPI::erase_memory()+0x4a>
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:126
      /* Currently not called on AVRDUDE<=7.3. */
      /* It may be called from terminal mode.  */
      D1PRINTF(" SECTION_ERASE=%04X\r\n", _dwAddr);
      if (nvm_wait()
        && set_sstpr(_dwAddr)
        && nvm_ctrl(0x14)
    28a2:	df 93       	push	r29
    28a4:	cf 93       	push	r28
    28a6:	8d ed       	ldi	r24, 0xDD	; 221
    28a8:	96 e0       	ldi	r25, 0x06	; 6
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:127
        && set_sst(0xFF)
    28aa:	9f 93       	push	r25
    28ac:	8f 93       	push	r24
    28ae:	8d e8       	ldi	r24, 0x8D	; 141
    28b0:	90 e6       	ldi	r25, 0x60	; 96
    28b2:	9f 93       	push	r25
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:128
        && nvm_wait()
    28b4:	8f 93       	push	r24
    28b6:	0e 94 29 0a 	call	0x1452	; 0x1452 <Print::printf(PGM_t const*, ...) [clone .constprop.21]>
    28ba:	0e 94 0d 08 	call	0x101a	; 0x101a <TPI::nvm_wait()>
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:129
        && nvm_ctrl(0x00)) {
    28be:	0f 90       	pop	r0
    28c0:	0f 90       	pop	r0
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:133
          return 1;
        }
    }
    return 0;
    28c2:	0f 90       	pop	r0
    28c4:	0f 90       	pop	r0
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:123
    else {
      /* 0x02: XPRG_ERASE_APP */
      /* 0x09: XPRG_ERASE_CONFIG */
      /* Currently not called on AVRDUDE<=7.3. */
      /* It may be called from terminal mode.  */
      D1PRINTF(" SECTION_ERASE=%04X\r\n", _dwAddr);
    28c6:	0f 90       	pop	r0
    28c8:	0f 90       	pop	r0
    28ca:	88 23       	and	r24, r24
    28cc:	69 f2       	breq	.-102    	; 0x2868 <TPI::erase_memory()+0x46>
    28ce:	ce 01       	movw	r24, r28
    28d0:	0e 94 2b 08 	call	0x1056	; 0x1056 <TPI::set_sstpr(unsigned int)>
    28d4:	88 23       	and	r24, r24
    28d6:	41 f2       	breq	.-112    	; 0x2868 <TPI::erase_memory()+0x46>
    28d8:	84 e1       	ldi	r24, 0x14	; 20
    28da:	d1 cf       	rjmp	.-94     	; 0x287e <TPI::erase_memory()+0x5c>

000028dc <__vector_19>:
__vector_19():
    28dc:	1f 92       	push	r1
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:124
      if (nvm_wait()
    28de:	0f 92       	push	r0
    28e0:	0f b6       	in	r0, 0x3f	; 63
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:129
        && set_sstpr(_dwAddr)
        && nvm_ctrl(0x14)
        && set_sst(0xFF)
        && nvm_wait()
        && nvm_ctrl(0x00)) {
    28e2:	0f 92       	push	r0
    28e4:	11 24       	eor	r1, r1
    28e6:	2f 93       	push	r18
    28e8:	3f 93       	push	r19
    28ea:	4f 93       	push	r20
    28ec:	5f 93       	push	r21
    28ee:	6f 93       	push	r22
    28f0:	7f 93       	push	r23
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:125
      /* 0x09: XPRG_ERASE_CONFIG */
      /* Currently not called on AVRDUDE<=7.3. */
      /* It may be called from terminal mode.  */
      D1PRINTF(" SECTION_ERASE=%04X\r\n", _dwAddr);
      if (nvm_wait()
        && set_sstpr(_dwAddr)
    28f2:	8f 93       	push	r24
    28f4:	9f 93       	push	r25
    28f6:	af 93       	push	r26
    28f8:	bf 93       	push	r27
    28fa:	cf 93       	push	r28
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:126
        && nvm_ctrl(0x14)
    28fc:	ef 93       	push	r30
    28fe:	ff 93       	push	r31
vcp_receiver():
/Users/askn/Collaborator/UPDI4AVR-USB/src/usart.cpp:222
  }

};

/*** CMSIS-DAP VCOM,VCP transceiver ***/
ISR(USART0_RXC_vect) {
    2900:	c0 91 01 08 	lds	r28, 0x0801	; 0x800801 <__TEXT_REGION_LENGTH__+0x7f0801>
    2904:	20 91 00 08 	lds	r18, 0x0800	; 0x800800 <__TEXT_REGION_LENGTH__+0x7f0800>
    2908:	8c 2f       	mov	r24, r28
    290a:	86 74       	andi	r24, 0x46	; 70
    290c:	b1 f4       	brne	.+44     	; 0x293a <__vector_19+0x5e>
write_byte():
    290e:	e2 99       	sbic	0x1c, 2	; 28
    2910:	75 c0       	rjmp	.+234    	; 0x29fc <__vector_19+0x120>
__vector_19():
    2912:	8e ea       	ldi	r24, 0xAE	; 174
    2914:	93 e6       	ldi	r25, 0x63	; 99
write_byte():
    2916:	e0 91 32 64 	lds	r30, 0x6432	; 0x806432 <_send_count>
    291a:	31 e0       	ldi	r19, 0x01	; 1
    291c:	3e 0f       	add	r19, r30
    291e:	30 93 32 64 	sts	0x6432, r19	; 0x806432 <_send_count>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:470
  void read_drop (void) {
    if (bit_is_set(EP_CDO.STATUS, USB_BUSNAK_bp)) ep_cdo_listen();
  }

  void vcp_receiver (void) {
    uint8_t _d = USART0_RXDATAH;
    2922:	e8 0f       	add	r30, r24
    2924:	f9 2f       	mov	r31, r25
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:471
    uint8_t _c = USART0_RXDATAL;
    2926:	f1 1d       	adc	r31, r1
    2928:	20 83       	st	Z, r18
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:472
    if (!(_d & (USART_BUFOVF_bm | USART_FERR_bm | USART_PERR_bm))) {
    292a:	80 91 32 64 	lds	r24, 0x6432	; 0x806432 <_send_count>
    292e:	80 34       	cpi	r24, 0x40	; 64
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:434
  }

  void write_byte (const uint8_t _c) {
    /* The double buffer consists of two blocks. */
    uint8_t* _buf = bit_is_set(GPCONF, GPCONF_DBL_bp)
      ? &EP_MEM.cdi_data[64]
    2930:	08 f0       	brcs	.+2      	; 0x2934 <__vector_19+0x58>
    2932:	67 c0       	rjmp	.+206    	; 0x2a02 <__vector_19+0x126>
    2934:	8e e1       	ldi	r24, 0x1E	; 30
    2936:	80 93 2f 64 	sts	0x642F, r24	; 0x80642f <_sof_count>
vcp_receiver():
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:436
      : &EP_MEM.cdi_data[0];
    _buf[_send_count++] = _c;
    293a:	8e b3       	in	r24, 0x1e	; 30
    293c:	c8 2b       	or	r28, r24
    293e:	ce bb       	out	0x1e, r28	; 30
    2940:	80 91 66 64 	lds	r24, 0x6466	; 0x806466 <EP_TABLE+0x30>
    2944:	81 ff       	sbrs	r24, 1
    2946:	48 c0       	rjmp	.+144    	; 0x29d8 <__vector_19+0xfc>
cci_interrupt():
    2948:	8e b1       	in	r24, 0x0e	; 14
    294a:	80 95       	com	r24
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:437
    if (_send_count < 64) _sof_count = 30;
    294c:	8b 70       	andi	r24, 0x0B	; 11
    294e:	f2 99       	sbic	0x1e, 2	; 30
    2950:	80 61       	ori	r24, 0x10	; 16
    2952:	f1 99       	sbic	0x1e, 1	; 30
    2954:	80 62       	ori	r24, 0x20	; 32
    2956:	f6 99       	sbic	0x1e, 6	; 30
    2958:	80 64       	ori	r24, 0x40	; 64
    295a:	1e ba       	out	0x1e, r1	; 30
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:475
    uint8_t _d = USART0_RXDATAH;
    uint8_t _c = USART0_RXDATAL;
    if (!(_d & (USART_BUFOVF_bm | USART_FERR_bm | USART_PERR_bm))) {
      write_byte(_c);
    }
    RXSTAT |= _d;
    295c:	e4 9b       	sbis	0x1c, 4	; 28
    295e:	3c c0       	rjmp	.+120    	; 0x29d8 <__vector_19+0xfc>
    2960:	90 91 2e 64 	lds	r25, 0x642E	; 0x80642e <_set_serial_state>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:477
  #if defined(CONFIG_VCP_INTERRUPT_SUPPRT)
    if (bit_is_set(EP_CCI.STATUS, USB_BUSNAK_bp)) cci_interrupt();
    2964:	89 17       	cp	r24, r25
    2966:	c1 f1       	breq	.+112    	; 0x29d8 <__vector_19+0xfc>
set_cci_data():
    2968:	80 93 2e 64 	sts	0x642E, r24	; 0x80642e <_set_serial_state>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:416
  void cci_interrupt (void) {
  #if defined(CONFIG_VCP_INTERRUPT_SUPPRT)
    SerialState_t _value = {};
    #if defined(CONFIG_VCP_RS232C_ENABLE)
    uint8_t _c = VPORTD_IN;
    _value.bValue = (_c ^ 0x0B) & 0x0B;
    296c:	91 ea       	ldi	r25, 0xA1	; 161
    296e:	90 93 1e 63 	sts	0x631E, r25	; 0x80631e <EP_MEM+0x8>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:418
    #endif
    if (bit_is_set(RXSTAT, USART_FERR_bp))   _value.bFraming = true;
    2972:	90 e2       	ldi	r25, 0x20	; 32
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:419
    if (bit_is_set(RXSTAT, USART_PERR_bp))   _value.bParity  = true;
    2974:	90 93 1f 63 	sts	0x631F, r25	; 0x80631f <EP_MEM+0x9>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:420
    if (bit_is_set(RXSTAT, USART_BUFOVF_bp)) _value.bOverRun = true;
    2978:	10 92 20 63 	sts	0x6320, r1	; 0x806320 <EP_MEM+0xa>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:421
    RXSTAT = 0;
    297c:	10 92 21 63 	sts	0x6321, r1	; 0x806321 <EP_MEM+0xb>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:422
    if (bit_is_set(GPCONF, GPCONF_OPN_bp) && _set_serial_state != _value.bValue) {
    2980:	21 e0       	ldi	r18, 0x01	; 1
    2982:	30 e0       	ldi	r19, 0x00	; 0
    2984:	20 93 22 63 	sts	0x6322, r18	; 0x806322 <EP_MEM+0xc>
    2988:	30 93 23 63 	sts	0x6323, r19	; 0x806323 <EP_MEM+0xd>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:225
    if (_size) memcpy_P(_buffer, _pgmem, _size);
    return _size;
  }

  void set_cci_data (uint16_t _state) {
    _set_serial_state = _state;
    298c:	22 e0       	ldi	r18, 0x02	; 2
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:226
    EP_MEM.cci_header.bmRequestType = 0xA1; /* REQTYPE_DIRECTION | REQTYPE_CLASS | RECIPIENT_INTERFACE */
    298e:	30 e0       	ldi	r19, 0x00	; 0
    2990:	20 93 24 63 	sts	0x6324, r18	; 0x806324 <EP_MEM+0xe>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:227
    EP_MEM.cci_header.bRequest      = 0x20; /* CDC_REQ_SerialState */
    2994:	30 93 25 63 	sts	0x6325, r19	; 0x806325 <EP_MEM+0xf>
cci_interrupt():
    2998:	90 e0       	ldi	r25, 0x00	; 0
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:228
    EP_MEM.cci_header.wValue        = 0;
    299a:	80 93 26 63 	sts	0x6326, r24	; 0x806326 <EP_MEM+0x10>
    299e:	90 93 27 63 	sts	0x6327, r25	; 0x806327 <EP_MEM+0x11>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:229
    EP_MEM.cci_header.wIndex        = 1;    /* Interface#1 */
    29a2:	82 e6       	ldi	r24, 0x62	; 98
    29a4:	98 e0       	ldi	r25, 0x08	; 8
    29a6:	9f 93       	push	r25
    29a8:	8f 93       	push	r24
    29aa:	8d e8       	ldi	r24, 0x8D	; 141
    29ac:	90 e6       	ldi	r25, 0x60	; 96
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:230
    EP_MEM.cci_header.wLength       = 2;
    29ae:	9f 93       	push	r25
    29b0:	8f 93       	push	r24
    29b2:	0e 94 29 0a 	call	0x1452	; 0x1452 <Print::printf(PGM_t const*, ...) [clone .constprop.21]>
    29b6:	6a e0       	ldi	r22, 0x0A	; 10
    29b8:	70 e0       	ldi	r23, 0x00	; 0
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:423
    if (bit_is_set(RXSTAT, USART_FERR_bp))   _value.bFraming = true;
    if (bit_is_set(RXSTAT, USART_PERR_bp))   _value.bParity  = true;
    if (bit_is_set(RXSTAT, USART_BUFOVF_bp)) _value.bOverRun = true;
    RXSTAT = 0;
    if (bit_is_set(GPCONF, GPCONF_OPN_bp) && _set_serial_state != _value.bValue) {
      set_cci_data(_value.bValue);
    29ba:	8e e1       	ldi	r24, 0x1E	; 30
    29bc:	93 e6       	ldi	r25, 0x63	; 99
    29be:	0e 94 b7 09 	call	0x136e	; 0x136e <Print::printHex(void const*, unsigned int, char, unsigned int, char const*) [clone .constprop.18]>
    29c2:	0e 94 1d 0a 	call	0x143a	; 0x143a <Print::ln()>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:424
      D1PRINTF(" CCI=");
    29c6:	80 91 66 64 	lds	r24, 0x6466	; 0x806466 <EP_TABLE+0x30>
    29ca:	0f 90       	pop	r0
    29cc:	0f 90       	pop	r0
    29ce:	0f 90       	pop	r0
    29d0:	0f 90       	pop	r0
    29d2:	81 fd       	sbrc	r24, 1
    29d4:	0e 94 3f 05 	call	0xa7e	; 0xa7e <USB::ep_cci_listen()>
__vector_19():
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:425
      D1PRINTHEX(&EP_MEM.cci_data, 10);
    29d8:	ff 91       	pop	r31
    29da:	ef 91       	pop	r30
    29dc:	cf 91       	pop	r28
    29de:	bf 91       	pop	r27
    29e0:	af 91       	pop	r26
    29e2:	9f 91       	pop	r25
    29e4:	8f 91       	pop	r24
    29e6:	7f 91       	pop	r23
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:426
      if (bit_is_set(EP_CCI.STATUS, USB_BUSNAK_bp)) ep_cci_listen();
    29e8:	6f 91       	pop	r22
    29ea:	5f 91       	pop	r21
    29ec:	4f 91       	pop	r20
    29ee:	3f 91       	pop	r19
    29f0:	2f 91       	pop	r18
    29f2:	0f 90       	pop	r0
    29f4:	0f be       	out	0x3f, r0	; 63
    29f6:	0f 90       	pop	r0
    29f8:	1f 90       	pop	r1
/Users/askn/Collaborator/UPDI4AVR-USB/src/usart.cpp:228
#if defined(CONFIG_VCP_9BIT_SUPPORT)
  usart_receiver();
#else
  USB::vcp_receiver();
#endif
}
    29fa:	18 95       	reti
    29fc:	8e ee       	ldi	r24, 0xEE	; 238
    29fe:	93 e6       	ldi	r25, 0x63	; 99
    2a00:	8a cf       	rjmp	.-236    	; 0x2916 <__vector_19+0x3a>
write_byte():
    2a02:	0e 94 0b 05 	call	0xa16	; 0xa16 <USB::ep_cdi_listen()>
    2a06:	99 cf       	rjmp	.-206    	; 0x293a <__vector_19+0x5e>

00002a08 <__vector_15>:
__vector_15():
    2a08:	11 24       	eor	r1, r1
    2a0a:	8d b7       	in	r24, 0x3d	; 61
    2a0c:	9e b7       	in	r25, 0x3e	; 62
    2a0e:	b0 e0       	ldi	r27, 0x00	; 0
    2a10:	a0 e0       	ldi	r26, 0x00	; 0
    2a12:	80 93 08 10 	sts	0x1008, r24	; 0x801008 <__TEXT_REGION_LENGTH__+0x7f1008>
    2a16:	90 93 09 10 	sts	0x1009, r25	; 0x801009 <__TEXT_REGION_LENGTH__+0x7f1009>
    2a1a:	a0 93 0a 10 	sts	0x100A, r26	; 0x80100a <__TEXT_REGION_LENGTH__+0x7f100a>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:434
  }

  void write_byte (const uint8_t _c) {
    /* The double buffer consists of two blocks. */
    uint8_t* _buf = bit_is_set(GPCONF, GPCONF_DBL_bp)
      ? &EP_MEM.cdi_data[64]
    2a1e:	b0 93 0b 10 	sts	0x100B, r27	; 0x80100b <__TEXT_REGION_LENGTH__+0x7f100b>
    2a22:	10 92 00 0b 	sts	0x0B00, r1	; 0x800b00 <__TEXT_REGION_LENGTH__+0x7f0b00>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:438
      : &EP_MEM.cdi_data[0];
    _buf[_send_count++] = _c;
    if (_send_count < 64) _sof_count = 30;
    else ep_cdi_listen();
    2a26:	81 e0       	ldi	r24, 0x01	; 1
    2a28:	80 93 06 0b 	sts	0x0B06, r24	; 0x800b06 <__TEXT_REGION_LENGTH__+0x7f0b06>
/Users/askn/Collaborator/UPDI4AVR-USB/src/timeout.cpp:103
    This interrupt is a global escape due to timeout.
    There is no return to the source of the interrupt.
  ***/
  __asm__ __volatile__ ("EOR R1,R1");
#if defined(DEBUG)
  NVMCTRL_DATA = SP;
    2a2c:	62 e0       	ldi	r22, 0x02	; 2
    2a2e:	70 e0       	ldi	r23, 0x00	; 0
    2a30:	80 e8       	ldi	r24, 0x80	; 128
    2a32:	94 e6       	ldi	r25, 0x64	; 100
    2a34:	0e 94 6c 21 	call	0x42d8	; 0x42d8 <longjmp>

00002a38 <Timeout::stop()>:
_ZN7Timeout4stopEv():
    2a38:	8f b7       	in	r24, 0x3f	; 63
__iCliRetVal():
    2a3a:	f8 94       	cli
_ZN7Timeout4stopEv():
    2a3c:	10 92 00 0b 	sts	0x0B00, r1	; 0x800b00 <__TEXT_REGION_LENGTH__+0x7f0b00>
    2a40:	91 e0       	ldi	r25, 0x01	; 1
    2a42:	90 93 06 0b 	sts	0x0B06, r25	; 0x800b06 <__TEXT_REGION_LENGTH__+0x7f0b06>
__iRestore():
/Users/askn/Collaborator/UPDI4AVR-USB/src/timeout.cpp:105
#endif
  TCB0_CTRLA = 0;
    2a46:	8f bf       	out	0x3f, r24	; 63
_ZN7Timeout4stopEv():
/Users/askn/Collaborator/UPDI4AVR-USB/src/timeout.cpp:106
  TCB0_INTFLAGS = TCB_CAPT_bm;
    2a48:	18 95       	reti

00002a4a <Timeout::command(unsigned int (*)(), unsigned int) [clone .constprop.16]>:
command():
    2a4a:	0f 93       	push	r16
    2a4c:	1f 93       	push	r17
/Users/askn/Collaborator/UPDI4AVR-USB/src/timeout.cpp:107
  longjmp(TIMEOUT_CONTEXT, 2);
    2a4e:	cf 93       	push	r28
    2a50:	df 93       	push	r29
    2a52:	00 d0       	rcall	.+0      	; 0x2a54 <Timeout::command(unsigned int (*)(), unsigned int) [clone .constprop.16]+0xa>
    2a54:	00 d0       	rcall	.+0      	; 0x2a56 <Timeout::command(unsigned int (*)(), unsigned int) [clone .constprop.16]+0xc>
    2a56:	cd b7       	in	r28, 0x3d	; 61
    2a58:	de b7       	in	r29, 0x3e	; 62
/Users/askn/Collaborator/UPDI4AVR-USB/src/timeout.cpp:53
   * Exit from the timeout block.
   * The last RETI is required.
   */
  __attribute__((used, naked, noinline))
  void stop (void) {
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    2a5a:	8b 83       	std	Y+3, r24	; 0x03
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/tools/avr-gcc/7.3.0-avr8-gnu-toolchain/avr/include/util/atomic.h:50
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    2a5c:	9c 83       	std	Y+4, r25	; 0x04
/Users/askn/Collaborator/UPDI4AVR-USB/src/timeout.cpp:54
      TCB0_CTRLA = 0;
    2a5e:	19 82       	std	Y+1, r1	; 0x01
    2a60:	1a 82       	std	Y+2, r1	; 0x02
/Users/askn/Collaborator/UPDI4AVR-USB/src/timeout.cpp:55
      TCB0_INTFLAGS = TCB_CAPT_bm;
    2a62:	80 e8       	ldi	r24, 0x80	; 128
    2a64:	94 e6       	ldi	r25, 0x64	; 100
    2a66:	0e 94 4c 21 	call	0x4298	; 0x4298 <setjmp>
/Users/askn/Collaborator/UPDI4AVR-USB/src/timeout.cpp:57
    }
    reti();
    2a6a:	89 2b       	or	r24, r25
/Users/askn/Collaborator/UPDI4AVR-USB/src/timeout.cpp:74
  /*
   * Timeout block.
   * Does not work with interrupts disabled.
   * RETI must be called after the interrupt is suspended.
   */
  size_t command (size_t (*func_p)(void), uint16_t _ms) {
    2a6c:	29 f5       	brne	.+74     	; 0x2ab8 <Timeout::command(unsigned int (*)(), unsigned int) [clone .constprop.16]+0x6e>
start():
    2a6e:	9f b7       	in	r25, 0x3f	; 63
__iCliRetVal():
    2a70:	f8 94       	cli
start():
    2a72:	10 92 0a 0b 	sts	0x0B0A, r1	; 0x800b0a <__TEXT_REGION_LENGTH__+0x7f0b0a>
    2a76:	10 92 0b 0b 	sts	0x0B0B, r1	; 0x800b0b <__TEXT_REGION_LENGTH__+0x7f0b0b>
    2a7a:	20 e2       	ldi	r18, 0x20	; 32
    2a7c:	33 e0       	ldi	r19, 0x03	; 3
    2a7e:	20 93 0c 0b 	sts	0x0B0C, r18	; 0x800b0c <__TEXT_REGION_LENGTH__+0x7f0b0c>
/Users/askn/Collaborator/UPDI4AVR-USB/src/timeout.cpp:75
    volatile size_t _result = 0;
    2a82:	30 93 0d 0b 	sts	0x0B0D, r19	; 0x800b0d <__TEXT_REGION_LENGTH__+0x7f0b0d>
/Users/askn/Collaborator/UPDI4AVR-USB/src/timeout.cpp:76
    if (setjmp(TIMEOUT_CONTEXT) == 0) {
    2a86:	81 e0       	ldi	r24, 0x01	; 1
    2a88:	80 93 05 0b 	sts	0x0B05, r24	; 0x800b05 <__TEXT_REGION_LENGTH__+0x7f0b05>
    2a8c:	80 93 06 0b 	sts	0x0B06, r24	; 0x800b06 <__TEXT_REGION_LENGTH__+0x7f0b06>
/Users/askn/Collaborator/UPDI4AVR-USB/src/timeout.cpp:38
  /*
   * Timeout after the specified time.
   * To be precise, in 1/1024 sec units.
   */
  void start (uint16_t _ms) {
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    2a90:	8f e0       	ldi	r24, 0x0F	; 15
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/tools/avr-gcc/7.3.0-avr8-gnu-toolchain/avr/include/util/atomic.h:50
    2a92:	80 93 00 0b 	sts	0x0B00, r24	; 0x800b00 <__TEXT_REGION_LENGTH__+0x7f0b00>
__iRestore():
/Users/askn/Collaborator/UPDI4AVR-USB/src/timeout.cpp:39
      TCB0_CNT = 0;
    2a96:	9f bf       	out	0x3f, r25	; 63
command():
    2a98:	eb 81       	ldd	r30, Y+3	; 0x03
    2a9a:	fc 81       	ldd	r31, Y+4	; 0x04
/Users/askn/Collaborator/UPDI4AVR-USB/src/timeout.cpp:40
      TCB0_CCMP = _ms;
    2a9c:	09 95       	icall
    2a9e:	89 83       	std	Y+1, r24	; 0x01
    2aa0:	9a 83       	std	Y+2, r25	; 0x02
    2aa2:	ca df       	rcall	.-108    	; 0x2a38 <Timeout::stop()>
    2aa4:	89 81       	ldd	r24, Y+1	; 0x01
    2aa6:	9a 81       	ldd	r25, Y+2	; 0x02
/Users/askn/Collaborator/UPDI4AVR-USB/src/timeout.cpp:41
      TCB0_INTCTRL = TCB_CAPT_bm;
    2aa8:	24 96       	adiw	r28, 0x04	; 4
    2aaa:	cd bf       	out	0x3d, r28	; 61
    2aac:	de bf       	out	0x3e, r29	; 62
/Users/askn/Collaborator/UPDI4AVR-USB/src/timeout.cpp:42
      TCB0_INTFLAGS = TCB_CAPT_bm;
    2aae:	df 91       	pop	r29
    2ab0:	cf 91       	pop	r28
/Users/askn/Collaborator/UPDI4AVR-USB/src/timeout.cpp:43
      TCB0_CTRLA = TCB_ENABLE_bm | TCB_CLKSEL_EVENT_gc; /* for EVSYS_USERTCB0COUNT */
    2ab2:	1f 91       	pop	r17
    2ab4:	0f 91       	pop	r16
    2ab6:	08 95       	ret
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/tools/avr-gcc/7.3.0-avr8-gnu-toolchain/avr/include/util/atomic.h:70
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    2ab8:	08 e0       	ldi	r16, 0x08	; 8
/Users/askn/Collaborator/UPDI4AVR-USB/src/timeout.cpp:78
   */
  size_t command (size_t (*func_p)(void), uint16_t _ms) {
    volatile size_t _result = 0;
    if (setjmp(TIMEOUT_CONTEXT) == 0) {
      Timeout::start(_ms);
      _result = (*func_p)();
    2aba:	10 e1       	ldi	r17, 0x10	; 16
    2abc:	f8 01       	movw	r30, r16
    2abe:	80 81       	ld	r24, Z
    2ac0:	91 81       	ldd	r25, Z+1	; 0x01
    2ac2:	a2 81       	ldd	r26, Z+2	; 0x02
/Users/askn/Collaborator/UPDI4AVR-USB/src/timeout.cpp:86
      /* Stack dump. */
      /* An unused register is borrowed to store the SP. */
      D1PRINTF("\r\n!TIMEOUT:%04lX>", NVMCTRL_DATA);
      D1PRINTHEX((const void*)(NVMCTRL_DATA - 2), 16);
    }
    Timeout::stop();
    2ac4:	b3 81       	ldd	r27, Z+3	; 0x03
    2ac6:	bf 93       	push	r27
/Users/askn/Collaborator/UPDI4AVR-USB/src/timeout.cpp:87
    return _result;
    2ac8:	af 93       	push	r26
    2aca:	9f 93       	push	r25
/Users/askn/Collaborator/UPDI4AVR-USB/src/timeout.cpp:88
  }
    2acc:	8f 93       	push	r24
    2ace:	8c eb       	ldi	r24, 0xBC	; 188
    2ad0:	98 e0       	ldi	r25, 0x08	; 8
    2ad2:	9f 93       	push	r25
    2ad4:	8f 93       	push	r24
    2ad6:	8d e8       	ldi	r24, 0x8D	; 141
    2ad8:	90 e6       	ldi	r25, 0x60	; 96
    2ada:	9f 93       	push	r25
/Users/askn/Collaborator/UPDI4AVR-USB/src/timeout.cpp:83
      _result = (*func_p)();
    }
    else {
      /* Stack dump. */
      /* An unused register is borrowed to store the SP. */
      D1PRINTF("\r\n!TIMEOUT:%04lX>", NVMCTRL_DATA);
    2adc:	8f 93       	push	r24
    2ade:	0e 94 29 0a 	call	0x1452	; 0x1452 <Print::printf(PGM_t const*, ...) [clone .constprop.21]>
    2ae2:	cd bf       	out	0x3d, r28	; 61
    2ae4:	de bf       	out	0x3e, r29	; 62
    2ae6:	f8 01       	movw	r30, r16
    2ae8:	80 81       	ld	r24, Z
    2aea:	91 81       	ldd	r25, Z+1	; 0x01
    2aec:	a2 81       	ldd	r26, Z+2	; 0x02
    2aee:	b3 81       	ldd	r27, Z+3	; 0x03
    2af0:	02 97       	sbiw	r24, 0x02	; 2
    2af2:	60 e1       	ldi	r22, 0x10	; 16
    2af4:	70 e0       	ldi	r23, 0x00	; 0
    2af6:	0e 94 b7 09 	call	0x136e	; 0x136e <Print::printHex(void const*, unsigned int, char, unsigned int, char const*) [clone .constprop.18]>
    2afa:	0e 94 1d 0a 	call	0x143a	; 0x143a <Print::ln()>
    2afe:	d1 cf       	rjmp	.-94     	; 0x2aa2 <Timeout::command(unsigned int (*)(), unsigned int) [clone .constprop.16]+0x58>

00002b00 <__vector_24>:
__vector_24():
    2b00:	1f 92       	push	r1
    2b02:	0f 92       	push	r0
    2b04:	0f b6       	in	r0, 0x3f	; 63
    2b06:	0f 92       	push	r0
    2b08:	11 24       	eor	r1, r1
/Users/askn/Collaborator/UPDI4AVR-USB/src/timeout.cpp:84
      D1PRINTHEX((const void*)(NVMCTRL_DATA - 2), 16);
    2b0a:	8f 93       	push	r24
    2b0c:	8f ef       	ldi	r24, 0xFF	; 255
    2b0e:	87 bb       	out	0x17, r24	; 23
    2b10:	e8 99       	sbic	0x1d, 0	; 29
    2b12:	03 c0       	rjmp	.+6      	; 0x2b1a <__vector_24+0x1a>
    2b14:	b6 9b       	sbis	0x16, 6	; 22
    2b16:	07 c0       	rjmp	.+14     	; 0x2b26 <__vector_24+0x26>
    2b18:	e6 9a       	sbi	0x1c, 6	; 28
    2b1a:	8f 91       	pop	r24
    2b1c:	0f 90       	pop	r0
    2b1e:	0f be       	out	0x3f, r0	; 63
    2b20:	0f 90       	pop	r0
    2b22:	1f 90       	pop	r1
/Users/askn/Collaborator/UPDI4AVR-USB/src/sys.cpp:335
  }

};

#if defined(PIN_SYS_SW0)
ISR(portIntrruptVector(PIN_SYS_SW0)) {
    2b24:	18 95       	reti
    2b26:	e7 9a       	sbi	0x1c, 7	; 28
    2b28:	f8 cf       	rjmp	.-16     	; 0x2b1a <__vector_24+0x1a>

00002b2a <_GLOBAL__sub_I_Serial0A>:
_ZN14UsartBaseClassC2EP12USART_struct():
    2b2a:	ed e8       	ldi	r30, 0x8D	; 141
    2b2c:	f0 e6       	ldi	r31, 0x60	; 96
    2b2e:	80 e2       	ldi	r24, 0x20	; 32
/Users/askn/Collaborator/UPDI4AVR-USB/src/sys.cpp:336
  vportRegister(PIN_SYS_SW0).INTFLAGS = ~0;
    2b30:	98 e0       	ldi	r25, 0x08	; 8
    2b32:	82 83       	std	Z+2, r24	; 0x02
/Users/askn/Collaborator/UPDI4AVR-USB/src/sys.cpp:338
  /* If the level is not maintained for a sufficient period of time it will not function properly. */
  if (bit_is_clear(PGCONF, PGCONF_UPDI_bp)) {
    2b34:	93 83       	std	Z+3, r25	; 0x03
_ZN14HarfUART_ClassC2EP12USART_structPK14UART_portmux_t():
    2b36:	8f e7       	ldi	r24, 0x7F	; 127
/Users/askn/Collaborator/UPDI4AVR-USB/src/sys.cpp:339
    if (digitalReadMacro(PIN_SYS_SW0))
    2b38:	90 e6       	ldi	r25, 0x60	; 96
    2b3a:	80 83       	st	Z, r24
/Users/askn/Collaborator/UPDI4AVR-USB/src/sys.cpp:340
      bit_set(GPCONF, GPCONF_RIS_bp);
    2b3c:	91 83       	std	Z+1, r25	; 0x01
/Users/askn/Collaborator/UPDI4AVR-USB/src/sys.cpp:344
    else
      bit_set(GPCONF, GPCONF_FAL_bp);
  }
}
    2b3e:	82 eb       	ldi	r24, 0xB2	; 178
    2b40:	98 e0       	ldi	r25, 0x08	; 8
    2b42:	85 83       	std	Z+5, r24	; 0x05
    2b44:	96 83       	std	Z+6, r25	; 0x06
_GLOBAL__sub_I_Serial0A():
    2b46:	08 95       	ret

00002b48 <main>:
main():
    2b48:	cf 93       	push	r28
/Users/askn/Collaborator/UPDI4AVR-USB/src/sys.cpp:342
  /* If the level is not maintained for a sufficient period of time it will not function properly. */
  if (bit_is_clear(PGCONF, PGCONF_UPDI_bp)) {
    if (digitalReadMacro(PIN_SYS_SW0))
      bit_set(GPCONF, GPCONF_RIS_bp);
    else
      bit_set(GPCONF, GPCONF_FAL_bp);
    2b4a:	df 93       	push	r29
    2b4c:	cd b7       	in	r28, 0x3d	; 61
/Users/askn/Collaborator/UPDI4AVR-USB/src/main.cpp:83
} /* NAMELESS */;

__attribute__((used, naked, section(".init3")))
void setup_mcu (void) { initVariant(); }

int main (void) {
    2b4e:	de b7       	in	r29, 0x3e	; 62
    2b50:	25 97       	sbiw	r28, 0x05	; 5
    2b52:	cd bf       	out	0x3d, r28	; 61
    2b54:	de bf       	out	0x3e, r29	; 62
initiate():
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/modernAVR/0.2.14/cores/modernAVR/api/cpp/HarfUART.cpp:26
  uint8_t _baud2x = 0;
  if (_baudrate <= 63) {
    _baud2x = 1;
    _usart_ctrl_b = USART_RXEN_bm | USART_TXEN_bm | USART_RXMODE_CLK2X_gc;
  }
  const UART_portmux_t* _mux = portmux;
    2b56:	80 91 92 60 	lds	r24, 0x6092	; 0x806092 <Serial1C+0x5>
    2b5a:	90 91 93 60 	lds	r25, 0x6093	; 0x806093 <Serial1C+0x6>
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/modernAVR/0.2.14/cores/modernAVR/api/cpp/HarfUART.cpp:27
  register8_t *_portmux = (register8_t*)pgm_read_ptr(&_mux->portmux_reg);
    2b5e:	fc 01       	movw	r30, r24
    2b60:	a5 91       	lpm	r26, Z+
    2b62:	b4 91       	lpm	r27, Z
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/modernAVR/0.2.14/cores/modernAVR/api/cpp/HarfUART.cpp:28
  *_portmux = (*_portmux & pgm_read_byte(&_mux->portmux_mask))
    2b64:	2c 91       	ld	r18, X
    2b66:	fc 01       	movw	r30, r24
    2b68:	32 96       	adiw	r30, 0x02	; 2
    2b6a:	34 91       	lpm	r19, Z
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/modernAVR/0.2.14/cores/modernAVR/api/cpp/HarfUART.cpp:29
                         | pgm_read_byte(&_mux->portmux_set);
    2b6c:	31 96       	adiw	r30, 0x01	; 1
    2b6e:	e4 91       	lpm	r30, Z
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/modernAVR/0.2.14/cores/modernAVR/api/cpp/HarfUART.cpp:28
    _baud2x = 1;
    _usart_ctrl_b = USART_RXEN_bm | USART_TXEN_bm | USART_RXMODE_CLK2X_gc;
  }
  const UART_portmux_t* _mux = portmux;
  register8_t *_portmux = (register8_t*)pgm_read_ptr(&_mux->portmux_reg);
  *_portmux = (*_portmux & pgm_read_byte(&_mux->portmux_mask))
    2b70:	23 23       	and	r18, r19
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/modernAVR/0.2.14/cores/modernAVR/api/cpp/HarfUART.cpp:29
                         | pgm_read_byte(&_mux->portmux_set);
    2b72:	2e 2b       	or	r18, r30
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/modernAVR/0.2.14/cores/modernAVR/api/cpp/HarfUART.cpp:28
    _baud2x = 1;
    _usart_ctrl_b = USART_RXEN_bm | USART_TXEN_bm | USART_RXMODE_CLK2X_gc;
  }
  const UART_portmux_t* _mux = portmux;
  register8_t *_portmux = (register8_t*)pgm_read_ptr(&_mux->portmux_reg);
  *_portmux = (*_portmux & pgm_read_byte(&_mux->portmux_mask))
    2b74:	2c 93       	st	X, r18
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/modernAVR/0.2.14/cores/modernAVR/api/cpp/HarfUART.cpp:30
                         | pgm_read_byte(&_mux->portmux_set);
  PORT_t *_port = pgm_read_ptr(&_mux->port_reg);
    2b76:	fc 01       	movw	r30, r24
    2b78:	34 96       	adiw	r30, 0x04	; 4
    2b7a:	a5 91       	lpm	r26, Z+
    2b7c:	b4 91       	lpm	r27, Z
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/modernAVR/0.2.14/cores/modernAVR/api/cpp/HarfUART.cpp:31
  _port->DIRSET = pgm_read_byte(&_mux->tx_pin);
    2b7e:	fc 01       	movw	r30, r24
    2b80:	36 96       	adiw	r30, 0x06	; 6
    2b82:	e4 91       	lpm	r30, Z
    2b84:	11 96       	adiw	r26, 0x01	; 1
    2b86:	ec 93       	st	X, r30
    2b88:	11 97       	sbiw	r26, 0x01	; 1
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/modernAVR/0.2.14/cores/modernAVR/api/cpp/HarfUART.cpp:32
  _port->DIRCLR = pgm_read_byte(&_mux->rx_pin);
    2b8a:	fc 01       	movw	r30, r24
    2b8c:	37 96       	adiw	r30, 0x07	; 7
    2b8e:	e4 91       	lpm	r30, Z
    2b90:	12 96       	adiw	r26, 0x02	; 2
    2b92:	ec 93       	st	X, r30
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/modernAVR/0.2.14/cores/modernAVR/api/cpp/HarfUART.cpp:33
  (*(register8_t*)pgm_read_ptr(&_mux->rx_pin_ctrl)) = PORT_PULLUPEN_bm
    2b94:	fc 01       	movw	r30, r24
    2b96:	38 96       	adiw	r30, 0x08	; 8
    2b98:	a5 91       	lpm	r26, Z+
    2b9a:	b4 91       	lpm	r27, Z
    2b9c:	18 e0       	ldi	r17, 0x08	; 8
    2b9e:	1c 93       	st	X, r17
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/modernAVR/0.2.14/cores/modernAVR/api/cpp/HarfUART.cpp:35
                                                    | PORT_ISC_INTDISABLE_gc;
  USART_t* _usart = usart;
    2ba0:	e0 91 8f 60 	lds	r30, 0x608F	; 0x80608f <Serial1C+0x2>
    2ba4:	f0 91 90 60 	lds	r31, 0x6090	; 0x806090 <Serial1C+0x3>
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/modernAVR/0.2.14/cores/modernAVR/api/cpp/HarfUART.cpp:36
  _usart->BAUD = (_baudrate << _baud2x);
    2ba8:	80 ea       	ldi	r24, 0xA0	; 160
    2baa:	90 e0       	ldi	r25, 0x00	; 0
    2bac:	80 87       	std	Z+8, r24	; 0x08
    2bae:	91 87       	std	Z+9, r25	; 0x09
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/modernAVR/0.2.14/cores/modernAVR/api/cpp/HarfUART.cpp:37
  _usart->CTRLA = 0;
    2bb0:	15 82       	std	Z+5, r1	; 0x05
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/modernAVR/0.2.14/cores/modernAVR/api/cpp/HarfUART.cpp:38
  _usart->CTRLC = USART_CHSIZE_8BIT_gc
    2bb2:	03 e0       	ldi	r16, 0x03	; 3
    2bb4:	07 83       	std	Z+7, r16	; 0x07
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/modernAVR/0.2.14/cores/modernAVR/api/cpp/HarfUART.cpp:42
                | USART_PMODE_DISABLED_gc
                | USART_CMODE_ASYNCHRONOUS_gc
                | USART_SBMODE_1BIT_gc;
  _usart->CTRLB = _usart_ctrl_b;
    2bb6:	80 ec       	ldi	r24, 0xC0	; 192
    2bb8:	86 83       	std	Z+6, r24	; 0x06
println():
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/modernAVR/0.2.14/cores/modernAVR/api/Print.h:85
  inline Print& print (const PGM_t _str[]) { puts(_str); return *this; }

  inline Print& println (void) { return ln(); }
  inline Print& println (char _c) { write((uint8_t) _c); return ln(); }
  inline Print& println (const char _str[]) { puts(_str); return ln(); }
  inline Print& println (const PGM_t _str[]) { puts(_str); return ln(); }
    2bba:	67 ec       	ldi	r22, 0xC7	; 199
    2bbc:	76 e0       	ldi	r23, 0x06	; 6
    2bbe:	8d e8       	ldi	r24, 0x8D	; 141
    2bc0:	90 e6       	ldi	r25, 0x60	; 96
    2bc2:	0e 94 ff 09 	call	0x13fe	; 0x13fe <Print::puts(PGM_t const*)>
    2bc6:	8d e8       	ldi	r24, 0x8D	; 141
    2bc8:	90 e6       	ldi	r25, 0x60	; 96
    2bca:	0e 94 1d 0a 	call	0x143a	; 0x143a <Print::ln()>
_ZN5Print5printEPK5PGM_t():
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/modernAVR/0.2.14/cores/modernAVR/api/Print.h:80
  /* Print */

  inline Print& print (void) { return *this; }
  inline Print& print (const char _c) { write((uint8_t) _c); return *this; }
  inline Print& print (const char _str[]) { puts(_str); return *this; }
  inline Print& print (const PGM_t _str[]) { puts(_str); return *this; }
    2bce:	6e eb       	ldi	r22, 0xBE	; 190
    2bd0:	76 e0       	ldi	r23, 0x06	; 6
    2bd2:	8d e8       	ldi	r24, 0x8D	; 141
    2bd4:	90 e6       	ldi	r25, 0x60	; 96
    2bd6:	0e 94 ff 09 	call	0x13fe	; 0x13fe <Print::puts(PGM_t const*)>
print():
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/modernAVR/0.2.14/cores/modernAVR/api/cpp/Print_integer.cpp:88
  if (_base == DEC) _base = SPACE;
  return _print_integer ((uint32_t)((int32_t)_n), _base | _INT_, _dir, 16);
}
Print& Print::print (int32_t _n, uint8_t _base, int8_t _dir) {
  if (_base == DEC) _base = SPACE;
  return _print_integer ((uint32_t)_n, _base | _INT_, _dir, 32);
    2bda:	20 e2       	ldi	r18, 0x20	; 32
    2bdc:	40 e4       	ldi	r20, 0x40	; 64
    2bde:	60 e0       	ldi	r22, 0x00	; 0
    2be0:	7d e2       	ldi	r23, 0x2D	; 45
    2be2:	81 e3       	ldi	r24, 0x31	; 49
    2be4:	91 e0       	ldi	r25, 0x01	; 1
    2be6:	a6 d8       	rcall	.-3764   	; 0x1d34 <Print::_print_integer(unsigned long, unsigned char, signed char, signed char) [clone .constprop.14]>
println():
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/modernAVR/0.2.14/cores/modernAVR/api/Print.h:116
  inline Print& println (uint16_t _n, uint8_t _base = DEC, int8_t _dir = 0) { print((uint16_t) _n, _base, _dir); return ln(); }
  inline Print& println (uint32_t _n, uint8_t _base = DEC, int8_t _dir = 0) { print((uint32_t) _n, _base, _dir); return ln(); }

  inline Print& println ( int8_t _n, uint8_t _base, int8_t _dir = 0) { print((int8_t) _n, _base, _dir); return ln(); }
  inline Print& println (int16_t _n, uint8_t _base = DEC, int8_t _dir = 0) { print((int16_t) _n, _base, _dir); return ln(); }
  inline Print& println (int32_t _n, uint8_t _base = DEC, int8_t _dir = 0) { print((int32_t) _n, _base, _dir); return ln(); }
    2be8:	8d e8       	ldi	r24, 0x8D	; 141
    2bea:	90 e6       	ldi	r25, 0x60	; 96
    2bec:	0e 94 1d 0a 	call	0x143a	; 0x143a <Print::ln()>
_ZN5Print5printEPK5PGM_t():
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/modernAVR/0.2.14/cores/modernAVR/api/Print.h:80
  /* Print */

  inline Print& print (void) { return *this; }
  inline Print& print (const char _c) { write((uint8_t) _c); return *this; }
  inline Print& print (const char _str[]) { puts(_str); return *this; }
  inline Print& print (const PGM_t _str[]) { puts(_str); return *this; }
    2bf0:	6d ea       	ldi	r22, 0xAD	; 173
    2bf2:	76 e0       	ldi	r23, 0x06	; 6
    2bf4:	8d e8       	ldi	r24, 0x8D	; 141
    2bf6:	90 e6       	ldi	r25, 0x60	; 96
    2bf8:	0e 94 ff 09 	call	0x13fe	; 0x13fe <Print::puts(PGM_t const*)>
println():
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/modernAVR/0.2.14/cores/modernAVR/api/Print.h:85

  inline Print& println (void) { return ln(); }
  inline Print& println (char _c) { write((uint8_t) _c); return ln(); }
  inline Print& println (const char _str[]) { puts(_str); return ln(); }
  inline Print& println (const PGM_t _str[]) { puts(_str); return ln(); }
    2bfc:	6f e9       	ldi	r22, 0x9F	; 159
    2bfe:	76 e0       	ldi	r23, 0x06	; 6
    2c00:	8d e8       	ldi	r24, 0x8D	; 141
    2c02:	90 e6       	ldi	r25, 0x60	; 96
    2c04:	0e 94 ff 09 	call	0x13fe	; 0x13fe <Print::puts(PGM_t const*)>
    2c08:	8d e8       	ldi	r24, 0x8D	; 141
    2c0a:	90 e6       	ldi	r25, 0x60	; 96
    2c0c:	0e 94 1d 0a 	call	0x143a	; 0x143a <Print::ln()>
_ZN5Print5printEPK5PGM_t():
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/modernAVR/0.2.14/cores/modernAVR/api/Print.h:80
  /* Print */

  inline Print& print (void) { return *this; }
  inline Print& print (const char _c) { write((uint8_t) _c); return *this; }
  inline Print& print (const char _str[]) { puts(_str); return *this; }
  inline Print& print (const PGM_t _str[]) { puts(_str); return *this; }
    2c10:	6f e8       	ldi	r22, 0x8F	; 143
    2c12:	76 e0       	ldi	r23, 0x06	; 6
    2c14:	8d e8       	ldi	r24, 0x8D	; 141
    2c16:	90 e6       	ldi	r25, 0x60	; 96
    2c18:	0e 94 ff 09 	call	0x13fe	; 0x13fe <Print::puts(PGM_t const*)>
print():
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/modernAVR/0.2.14/cores/modernAVR/api/cpp/Print_integer.cpp:84
  if (_base == DEC) _base = SPACE;
  return _print_integer ((uint32_t)((int32_t)_n), _base | _INT_, _dir, 8);
}
Print& Print::print (int16_t _n, uint8_t _base, int8_t _dir) {
  if (_base == DEC) _base = SPACE;
  return _print_integer ((uint32_t)((int32_t)_n), _base | _INT_, _dir, 16);
    2c1c:	20 e1       	ldi	r18, 0x10	; 16
    2c1e:	40 e4       	ldi	r20, 0x40	; 64
    2c20:	66 e6       	ldi	r22, 0x66	; 102
    2c22:	70 e0       	ldi	r23, 0x00	; 0
    2c24:	80 e0       	ldi	r24, 0x00	; 0
    2c26:	90 e0       	ldi	r25, 0x00	; 0
    2c28:	85 d8       	rcall	.-3830   	; 0x1d34 <Print::_print_integer(unsigned long, unsigned char, signed char, signed char) [clone .constprop.14]>
println():
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/modernAVR/0.2.14/cores/modernAVR/api/Print.h:115
  inline Print& println ( uint8_t _n, uint8_t _base, int8_t _dir = 0) { print((uint8_t) _n, _base, _dir); return ln(); }
  inline Print& println (uint16_t _n, uint8_t _base = DEC, int8_t _dir = 0) { print((uint16_t) _n, _base, _dir); return ln(); }
  inline Print& println (uint32_t _n, uint8_t _base = DEC, int8_t _dir = 0) { print((uint32_t) _n, _base, _dir); return ln(); }

  inline Print& println ( int8_t _n, uint8_t _base, int8_t _dir = 0) { print((int8_t) _n, _base, _dir); return ln(); }
  inline Print& println (int16_t _n, uint8_t _base = DEC, int8_t _dir = 0) { print((int16_t) _n, _base, _dir); return ln(); }
    2c2a:	8d e8       	ldi	r24, 0x8D	; 141
    2c2c:	90 e6       	ldi	r25, 0x60	; 96
    2c2e:	0e 94 1d 0a 	call	0x143a	; 0x143a <Print::ln()>
setup():
/Users/askn/Collaborator/UPDI4AVR-USB/src/sys.cpp:48
    /*
     * GPIO - VCP
     */

  #if defined(PIN_VCP_DTR)
    pinModeMacro(PIN_VCP_DTR, OUTPUT);
    2c32:	64 9a       	sbi	0x0c, 4	; 12
    2c34:	10 92 74 04 	sts	0x0474, r1	; 0x800474 <__TEXT_REGION_LENGTH__+0x7f0474>
/Users/askn/Collaborator/UPDI4AVR-USB/src/sys.cpp:51
  #endif
  #if defined(PIN_VCP_RTS)
    pinModeMacro(PIN_VCP_RTS, OUTPUT);
    2c38:	65 9a       	sbi	0x0c, 5	; 12
    2c3a:	10 92 75 04 	sts	0x0475, r1	; 0x800475 <__TEXT_REGION_LENGTH__+0x7f0475>
/Users/askn/Collaborator/UPDI4AVR-USB/src/sys.cpp:57
  #endif
  #if defined(PIN_VCP_CTS) && defined(CONFIG_VCP_CTS_ENABLE)
    pinControlRegister(PIN_VCP_CTS) = PORT_PULLUPEN_bm;
  #endif
  #if defined(PIN_VCP_DCD)
    pinControlRegister(PIN_VCP_DCD) = PORT_PULLUPEN_bm;
    2c3e:	10 93 70 04 	sts	0x0470, r17	; 0x800470 <__TEXT_REGION_LENGTH__+0x7f0470>
/Users/askn/Collaborator/UPDI4AVR-USB/src/sys.cpp:60
  #endif
  #if defined(PIN_VCP_DSR)
    pinControlRegister(PIN_VCP_DSR) = PORT_PULLUPEN_bm;
    2c42:	10 93 71 04 	sts	0x0471, r17	; 0x800471 <__TEXT_REGION_LENGTH__+0x7f0471>
/Users/askn/Collaborator/UPDI4AVR-USB/src/sys.cpp:63
  #endif
  #if defined(PIN_VCP_RI)
    pinControlRegister(PIN_VCP_RI) = PORT_PULLUPEN_bm;
    2c46:	10 93 73 04 	sts	0x0473, r17	; 0x800473 <__TEXT_REGION_LENGTH__+0x7f0473>
/Users/askn/Collaborator/UPDI4AVR-USB/src/sys.cpp:90
    pinControlRegister(PIN_HV_SWITCH) = PORT_INVEN_bm;
    pinModeMacro(PIN_HV_SWITCH, OUTPUT);
  #endif
  #if defined(PIN_HV_POWER)
    /* Device power control: output positive logic */
    pinModeMacro(PIN_HV_POWER, OUTPUT);
    2c4a:	06 9a       	sbi	0x00, 6	; 0
    2c4c:	10 92 16 04 	sts	0x0416, r1	; 0x800416 <__TEXT_REGION_LENGTH__+0x7f0416>
/Users/askn/Collaborator/UPDI4AVR-USB/src/sys.cpp:91
    digitalWriteMacro(PIN_HV_POWER, HIGH);
    2c50:	0e 9a       	sbi	0x01, 6	; 1
/Users/askn/Collaborator/UPDI4AVR-USB/src/sys.cpp:99
    /*
     * GPIO - USB
     */

  #if defined(PIN_USB_VDETECT)
    pinControlRegister(PIN_USB_VDETECT) = PORT_PULLUPEN_bm;
    2c52:	10 93 b4 04 	sts	0x04B4, r17	; 0x8004b4 <__TEXT_REGION_LENGTH__+0x7f04b4>
/Users/askn/Collaborator/UPDI4AVR-USB/src/sys.cpp:108
     * GPIO - SYS
     */

  #if defined(PIN_SYS_SW0)
    /* SW0 detection: Input negative logic. */
    pinControlRegister(PIN_SYS_SW0) = PORT_PULLUPEN_bm | PORT_ISC_BOTHEDGES_gc;
    2c56:	99 e0       	ldi	r25, 0x09	; 9
    2c58:	90 93 b6 04 	sts	0x04B6, r25	; 0x8004b6 <__TEXT_REGION_LENGTH__+0x7f04b6>
/Users/askn/Collaborator/UPDI4AVR-USB/src/sys.cpp:124
    CCL_TRUTH0    = CCL_TRUTH_1_bm | CCL_TRUTH_2_bm;
    CCL_LUT0CTRLB = CCL_INSEL0_TCA0_gc | CCL_INSEL1_TCB1_gc;
    CCL_LUT0CTRLA = CCL_ENABLE_bm | CCL_OUTEN_bm; /* PIN_PC3 */
  #elif (CONFIG_HAL_TYPE == HAL_CNANO)
    /* PORTMUX LUT0OUT -> EVSYSOUTF -> PIN_PF2 Invert */
    pinControlRegister(PIN_PF2) = PORT_INVEN_bm;
    2c5c:	80 e8       	ldi	r24, 0x80	; 128
    2c5e:	80 93 b2 04 	sts	0x04B2, r24	; 0x8004b2 <__TEXT_REGION_LENGTH__+0x7f04b2>
/Users/askn/Collaborator/UPDI4AVR-USB/src/sys.cpp:125
    EVSYS_CHANNEL0 = EVSYS_CHANNEL_CCL_LUT0_gc;
    2c62:	80 e1       	ldi	r24, 0x10	; 16
    2c64:	80 93 10 02 	sts	0x0210, r24	; 0x800210 <__TEXT_REGION_LENGTH__+0x7f0210>
/Users/askn/Collaborator/UPDI4AVR-USB/src/sys.cpp:126
    EVSYS_USEREVSYSEVOUTF = EVSYS_USER_CHANNEL0_gc;
    2c68:	81 e0       	ldi	r24, 0x01	; 1
    2c6a:	80 93 2b 02 	sts	0x022B, r24	; 0x80022b <__TEXT_REGION_LENGTH__+0x7f022b>
/Users/askn/Collaborator/UPDI4AVR-USB/src/sys.cpp:128
    /* TRUTH0: 000 001 010 011 is ON */
    CCL_TRUTH0    = CCL_TRUTH_1_bm | CCL_TRUTH_2_bm;
    2c6e:	26 e0       	ldi	r18, 0x06	; 6
    2c70:	20 93 cb 01 	sts	0x01CB, r18	; 0x8001cb <__TEXT_REGION_LENGTH__+0x7f01cb>
/Users/askn/Collaborator/UPDI4AVR-USB/src/sys.cpp:129
    CCL_LUT0CTRLB = CCL_INSEL0_TCA0_gc | CCL_INSEL1_TCB1_gc;
    2c74:	29 ea       	ldi	r18, 0xA9	; 169
    2c76:	20 93 c9 01 	sts	0x01C9, r18	; 0x8001c9 <__TEXT_REGION_LENGTH__+0x7f01c9>
/Users/askn/Collaborator/UPDI4AVR-USB/src/sys.cpp:130
    CCL_LUT0CTRLA = CCL_ENABLE_bm;
    2c7a:	80 93 c8 01 	sts	0x01C8, r24	; 0x8001c8 <__TEXT_REGION_LENGTH__+0x7f01c8>
/Users/askn/Collaborator/UPDI4AVR-USB/src/sys.cpp:142
    CCL_LUT1CTRLA = CCL_ENABLE_bm | CCL_OUTEN_bm; /* PIN_PA6 */
  #endif

    /*** CCL enable ***/
    /* One of the CCL's is the LED output control. */
    CCL_CTRLA = CCL_RUNSTDBY_bm | CCL_ENABLE_bm;
    2c7e:	21 e4       	ldi	r18, 0x41	; 65
    2c80:	20 93 c0 01 	sts	0x01C0, r18	; 0x8001c0 <__TEXT_REGION_LENGTH__+0x7f01c0>
/Users/askn/Collaborator/UPDI4AVR-USB/src/sys.cpp:149
    /*** TCA0 ***/
    /* TCA0 is split into two 8-bit timers. */
    /* The lower timer controls the blinking rate of the LED. */
    /* The top timer is used as a period timer */
    /* and as the output for the charge pump.  */
    TCA0_SPLIT_CTRLD = TCA_SPLIT_SPLITM_bm;
    2c84:	80 93 03 0a 	sts	0x0A03, r24	; 0x800a03 <__TEXT_REGION_LENGTH__+0x7f0a03>
/Users/askn/Collaborator/UPDI4AVR-USB/src/sys.cpp:150
    TCA0_SPLIT_LPER  = TCA0_STEP - 2;
    2c88:	23 ec       	ldi	r18, 0xC3	; 195
    2c8a:	20 93 26 0a 	sts	0x0A26, r18	; 0x800a26 <__TEXT_REGION_LENGTH__+0x7f0a26>
/Users/askn/Collaborator/UPDI4AVR-USB/src/sys.cpp:151
    TCA0_SPLIT_LCMP0 = TCA0_STEP / 2;
    2c8e:	22 e6       	ldi	r18, 0x62	; 98
    2c90:	20 93 28 0a 	sts	0x0A28, r18	; 0x800a28 <__TEXT_REGION_LENGTH__+0x7f0a28>
/Users/askn/Collaborator/UPDI4AVR-USB/src/sys.cpp:158
    /*** TCB0 ***/
    /* The TCB0 timer is configured in the <timeout.cpp> module. */

    /*** TCB1 ***/
    /* TCB1 is used to control the LED blinking rate. */
    TCB1_CTRLB = TCB_ASYNC_bm | TCB_CNTMODE_PWM8_gc;
    2c94:	27 e4       	ldi	r18, 0x47	; 71
    2c96:	20 93 11 0b 	sts	0x0B11, r18	; 0x800b11 <__TEXT_REGION_LENGTH__+0x7f0b11>
/Users/askn/Collaborator/UPDI4AVR-USB/src/sys.cpp:159
    TCB1_CCMP  = TCB1_FLASH;
    2c9a:	29 ea       	ldi	r18, 0xA9	; 169
    2c9c:	35 e0       	ldi	r19, 0x05	; 5
    2c9e:	20 93 1c 0b 	sts	0x0B1C, r18	; 0x800b1c <__TEXT_REGION_LENGTH__+0x7f0b1c>
    2ca2:	30 93 1d 0b 	sts	0x0B1D, r19	; 0x800b1d <__TEXT_REGION_LENGTH__+0x7f0b1d>
/Users/askn/Collaborator/UPDI4AVR-USB/src/sys.cpp:160
    TCB1_CTRLA = TCB_RUNSTDBY_bm | TCB_ENABLE_bm | TCB_CLKSEL_EVENT_gc;
    2ca6:	2f e4       	ldi	r18, 0x4F	; 79
    2ca8:	20 93 10 0b 	sts	0x0B10, r18	; 0x800b10 <__TEXT_REGION_LENGTH__+0x7f0b10>
/Users/askn/Collaborator/UPDI4AVR-USB/src/timeout.cpp:25
#include "prototype.h"

namespace Timeout {

  void setup (void) {
    RTC_PITEVGENCTRLA = RTC_EVGEN0SEL_DIV32_gc | RTC_EVGEN1SEL_DIV128_gc;
    2cac:	24 e6       	ldi	r18, 0x64	; 100
    2cae:	20 93 56 01 	sts	0x0156, r18	; 0x800156 <__TEXT_REGION_LENGTH__+0x7f0156>
/Users/askn/Collaborator/UPDI4AVR-USB/src/timeout.cpp:26
    EVSYS_CHANNEL1 = EVSYS_CHANNEL_RTC_EVGEN0_gc; /* 1kHz periodic. */
    2cb2:	10 93 11 02 	sts	0x0211, r17	; 0x800211 <__TEXT_REGION_LENGTH__+0x7f0211>
/Users/askn/Collaborator/UPDI4AVR-USB/src/timeout.cpp:27
    EVSYS_CHANNEL2 = EVSYS_CHANNEL_RTC_EVGEN1_gc; /* 32Hz periodic. */
    2cb6:	90 93 12 02 	sts	0x0212, r25	; 0x800212 <__TEXT_REGION_LENGTH__+0x7f0212>
/Users/askn/Collaborator/UPDI4AVR-USB/src/timeout.cpp:28
    EVSYS_USERTCB0COUNT = EVSYS_USER_CHANNEL1_gc; /* TCB0_CLK = 1kHz */
    2cba:	92 e0       	ldi	r25, 0x02	; 2
    2cbc:	90 93 31 02 	sts	0x0231, r25	; 0x800231 <__TEXT_REGION_LENGTH__+0x7f0231>
/Users/askn/Collaborator/UPDI4AVR-USB/src/timeout.cpp:29
    EVSYS_USERTCB1COUNT = EVSYS_USER_CHANNEL2_gc; /* TCB1_CLK = 32Hz */
    2cc0:	00 93 33 02 	sts	0x0233, r16	; 0x800233 <__TEXT_REGION_LENGTH__+0x7f0233>
/Users/askn/Collaborator/UPDI4AVR-USB/src/timeout.cpp:30
    RTC_PITCTRLA = RTC_PITEN_bm;
    2cc4:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <__TEXT_REGION_LENGTH__+0x7f0150>
main():
/Users/askn/Collaborator/UPDI4AVR-USB/src/main.cpp:94
  Serial.print(F("__AVR_ARCH__ = ")).println(__AVR_ARCH__, DEC);
#endif

  SYS::setup();
  Timeout::setup();
  USART::setup();
    2cc8:	59 d9       	rcall	.-3406   	; 0x1f7c <USART::setup()>
/Users/askn/Collaborator/UPDI4AVR-USB/src/main.cpp:96

  loop_until_bit_is_clear(WDT_STATUS, WDT_SYNCBUSY_bp);
    2cca:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <__TEXT_REGION_LENGTH__+0x7f0101>
    2cce:	80 fd       	sbrc	r24, 0
    2cd0:	fc cf       	rjmp	.-8      	; 0x2cca <main+0x182>
/Users/askn/Collaborator/UPDI4AVR-USB/src/main.cpp:97
  _PROTECTED_WRITE(WDT_CTRLA, WDT_PERIOD_1KCLK_gc);
    2cd2:	88 ed       	ldi	r24, 0xD8	; 216
    2cd4:	98 e0       	ldi	r25, 0x08	; 8
    2cd6:	84 bf       	out	0x34, r24	; 52
    2cd8:	90 93 00 01 	sts	0x0100, r25	; 0x800100 <__TEXT_REGION_LENGTH__+0x7f0100>
/Users/askn/Collaborator/UPDI4AVR-USB/src/main.cpp:99

  VPORTA_INTFLAGS = ~0;
    2cdc:	8f ef       	ldi	r24, 0xFF	; 255
    2cde:	83 b9       	out	0x03, r24	; 3
/Users/askn/Collaborator/UPDI4AVR-USB/src/main.cpp:100
  VPORTC_INTFLAGS = ~0;
    2ce0:	8b b9       	out	0x0b, r24	; 11
/Users/askn/Collaborator/UPDI4AVR-USB/src/main.cpp:101
  VPORTD_INTFLAGS = ~0;
    2ce2:	8f b9       	out	0x0f, r24	; 15
/Users/askn/Collaborator/UPDI4AVR-USB/src/main.cpp:102
  VPORTF_INTFLAGS = ~0;
    2ce4:	87 bb       	out	0x17, r24	; 23
/Users/askn/Collaborator/UPDI4AVR-USB/src/main.cpp:103
  interrupts();
    2ce6:	78 94       	sei
/Users/askn/Collaborator/UPDI4AVR-USB/src/main.cpp:109

  #if !defined(PIN_USB_VDETECT)
  delay_millis(250);
  USB::setup_device(true);
  #else
  SYS::LED_Flash();
    2ce8:	0e 94 8a 08 	call	0x1114	; 0x1114 <SYS::LED_Flash()>
/Users/askn/Collaborator/UPDI4AVR-USB/src/main.cpp:113
  #endif

  /* From here on, it's an endless loop. */
  D1PRINTF("<WAITING>\r\n");
    2cec:	83 e8       	ldi	r24, 0x83	; 131
    2cee:	96 e0       	ldi	r25, 0x06	; 6
    2cf0:	9f 93       	push	r25
    2cf2:	8f 93       	push	r24
    2cf4:	8d e8       	ldi	r24, 0x8D	; 141
    2cf6:	90 e6       	ldi	r25, 0x60	; 96
    2cf8:	9f 93       	push	r25
    2cfa:	8f 93       	push	r24
    2cfc:	0e 94 29 0a 	call	0x1452	; 0x1452 <Print::printf(PGM_t const*, ...) [clone .constprop.21]>
    2d00:	0f 90       	pop	r0
    2d02:	0f 90       	pop	r0
    2d04:	0f 90       	pop	r0
    2d06:	0f 90       	pop	r0
handling_control_transactions():
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:640
  }

  void handling_control_transactions (void) {
    bool _listen = false;
    uint8_t bmRequestType = EP_MEM.req_data.bmRequestType;
    D1PRINTF("RQ=%02X:%04X:%02X:%02X:%04X:%04X:%04X\r\n",
    2d08:	0d e8       	ldi	r16, 0x8D	; 141
    2d0a:	10 e6       	ldi	r17, 0x60	; 96
    2d0c:	1e 01       	movw	r2, r28
    2d0e:	25 e0       	ldi	r18, 0x05	; 5
    2d10:	22 0e       	add	r2, r18
    2d12:	31 1c       	adc	r3, r1
request_class():
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:612
      EP_RES.CNT = 0;
    }
    else if (bRequest == 0x21) {  /* GET_LINE_ENCODING */
      memcpy(&EP_MEM.res_encoding, &_set_line_encoding, sizeof(LineEncoding_t));
      if (EP_MEM.res_encoding.dwDTERate == 0) {
        EP_MEM.res_encoding.dwDTERate = 9600UL;
    2d14:	30 e8       	ldi	r19, 0x80	; 128
    2d16:	83 2e       	mov	r8, r19
    2d18:	35 e2       	ldi	r19, 0x25	; 37
    2d1a:	93 2e       	mov	r9, r19
    2d1c:	a1 2c       	mov	r10, r1
    2d1e:	b1 2c       	mov	r11, r1
request_standard():
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:577
    }
    else if (bRequest == 0x0A) {  /* GET_INTREFACE */
      /* It seems not to be used. */
      D1PRINTF("<SI:0>\r\n");
      EP_MEM.res_data[0] = 0;
      EP_RES.CNT = 1;
    2d20:	66 24       	eor	r6, r6
    2d22:	63 94       	inc	r6
    2d24:	71 2c       	mov	r7, r1
main():
/Users/askn/Collaborator/UPDI4AVR-USB/src/main.cpp:115
  while (true) {
    wdt_reset();
    2d26:	a8 95       	wdr
handling_bus_events():
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:667
    }
    USB0_INTFLAGSB |= USB_EPSETUP_bp;
  }

  void handling_bus_events (void) {
    uint8_t busstate = USB0_INTFLAGSA;
    2d28:	f0 90 0a 0c 	lds	r15, 0x0C0A	; 0x800c0a <__TEXT_REGION_LENGTH__+0x7f0c0a>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:668
    USB0_INTFLAGSA = busstate;
    2d2c:	f0 92 0a 0c 	sts	0x0C0A, r15	; 0x800c0a <__TEXT_REGION_LENGTH__+0x7f0c0a>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:671
  #if defined(PIN_USB_VDETECT)
    /* This section is still experimental. */
    if (digitalReadMacro(PIN_USB_VDETECT)) {
    2d30:	b4 9b       	sbis	0x16, 4	; 22
    2d32:	10 c0       	rjmp	.+32     	; 0x2d54 <main+0x20c>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:672
      if (!USB0_CTRLA) {
    2d34:	80 91 00 0c 	lds	r24, 0x0C00	; 0x800c00 <__TEXT_REGION_LENGTH__+0x7f0c00>
    2d38:	81 11       	cpse	r24, r1
    2d3a:	11 c0       	rjmp	.+34     	; 0x2d5e <main+0x216>
setup_device():
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:235
    EP_MEM.cci_header.wLength       = 2;
    EP_MEM.cci_wValue               = _state;
  }

  void setup_device (bool _force) {
    if (_led_mode != 3) SYS::LED_Flash();
    2d3c:	80 91 85 60 	lds	r24, 0x6085	; 0x806085 <_led_mode>
    2d40:	83 30       	cpi	r24, 0x03	; 3
    2d42:	11 f0       	breq	.+4      	; 0x2d48 <main+0x200>
    2d44:	0e 94 8a 08 	call	0x1114	; 0x1114 <SYS::LED_Flash()>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:236
    USB0_ADDR = 0;
    2d48:	10 92 03 0c 	sts	0x0C03, r1	; 0x800c03 <__TEXT_REGION_LENGTH__+0x7f0c03>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:237
    if (USB0_CTRLA || _force) {
    2d4c:	80 91 00 0c 	lds	r24, 0x0C00	; 0x800c00 <__TEXT_REGION_LENGTH__+0x7f0c00>
    2d50:	ad d8       	rcall	.-3750   	; 0x1eac <USB::setup_device(bool) [clone .part.2]>
    2d52:	31 c0       	rjmp	.+98     	; 0x2db6 <main+0x26e>
handling_bus_events():
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:677
      if (!USB0_CTRLA) {
        setup_device(true);
        return;
      }
    }
    else if (USB0_CTRLA) {
    2d54:	80 91 00 0c 	lds	r24, 0x0C00	; 0x800c00 <__TEXT_REGION_LENGTH__+0x7f0c00>
    2d58:	81 11       	cpse	r24, r1
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:679
      /* System reboot */
      SYS::reboot();
    2d5a:	0e 94 80 0e 	call	0x1d00	; 0x1d00 <SYS::reboot()>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:693
    }
    if (bit_is_set(busstate, USB_RESUME_bp)) {
      D1PRINTF("<RESUME:%04X>\r\n", USB0_ADDR);
    }
  #endif
    if (bit_is_set(busstate, USB_SOF_bp)) {
    2d5e:	f7 fe       	sbrs	r15, 7
    2d60:	14 c0       	rjmp	.+40     	; 0x2d8a <main+0x242>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:695
      /* If there is deferred data for a block transfer, it is sent here. */
      if (_sof_count > 0 && 0 == (--_sof_count)) {
    2d62:	80 91 2f 64 	lds	r24, 0x642F	; 0x80642f <_sof_count>
    2d66:	88 23       	and	r24, r24
    2d68:	81 f0       	breq	.+32     	; 0x2d8a <main+0x242>
    2d6a:	80 91 2f 64 	lds	r24, 0x642F	; 0x80642f <_sof_count>
    2d6e:	81 50       	subi	r24, 0x01	; 1
    2d70:	80 93 2f 64 	sts	0x642F, r24	; 0x80642f <_sof_count>
    2d74:	81 11       	cpse	r24, r1
    2d76:	09 c0       	rjmp	.+18     	; 0x2d8a <main+0x242>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:696
        if (bit_is_set(EP_CDI.STATUS, USB_BUSNAK_bp) && _send_count > 0) {
    2d78:	80 91 76 64 	lds	r24, 0x6476	; 0x806476 <EP_TABLE+0x40>
    2d7c:	81 ff       	sbrs	r24, 1
    2d7e:	05 c0       	rjmp	.+10     	; 0x2d8a <main+0x242>
    2d80:	80 91 32 64 	lds	r24, 0x6432	; 0x806432 <_send_count>
    2d84:	81 11       	cpse	r24, r1
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:697
          ep_cdi_listen();
    2d86:	0e 94 0b 05 	call	0xa16	; 0xa16 <USB::ep_cdi_listen()>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:702
        }
      }
    }
    if (bit_is_set(busstate, USB_SUSPEND_bp)
     || bit_is_set(busstate, USB_RESUME_bp)) {
    2d8a:	8f 2d       	mov	r24, r15
    2d8c:	80 76       	andi	r24, 0x60	; 96
    2d8e:	29 f0       	breq	.+10     	; 0x2d9a <main+0x252>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:705
      /* This implementation does not transition to power saving mode. */
      /* This is only passed when the USB cable is unplugged. */
      if (bit_is_set(GPCONF, GPCONF_USB_bp)) {
    2d90:	e0 99       	sbic	0x1c, 0	; 28
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:707
        /* System reboot */
        SYS::reboot();
    2d92:	0e 94 80 0e 	call	0x1d00	; 0x1d00 <SYS::reboot()>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:709
      }
      bit_set(busstate, USB_RESET_bp);
    2d96:	68 94       	set
    2d98:	f4 f8       	bld	r15, 4
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:711
    }
    if (bit_is_set(busstate, USB_RESET_bp)) {
    2d9a:	f4 fe       	sbrs	r15, 4
    2d9c:	0c c0       	rjmp	.+24     	; 0x2db6 <main+0x26e>
setup_device():
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:235
    EP_MEM.cci_header.wLength       = 2;
    EP_MEM.cci_wValue               = _state;
  }

  void setup_device (bool _force) {
    if (_led_mode != 3) SYS::LED_Flash();
    2d9e:	80 91 85 60 	lds	r24, 0x6085	; 0x806085 <_led_mode>
    2da2:	83 30       	cpi	r24, 0x03	; 3
    2da4:	11 f0       	breq	.+4      	; 0x2daa <main+0x262>
    2da6:	0e 94 8a 08 	call	0x1114	; 0x1114 <SYS::LED_Flash()>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:236
    USB0_ADDR = 0;
    2daa:	10 92 03 0c 	sts	0x0C03, r1	; 0x800c03 <__TEXT_REGION_LENGTH__+0x7f0c03>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:237
    if (USB0_CTRLA || _force) {
    2dae:	80 91 00 0c 	lds	r24, 0x0C00	; 0x800c00 <__TEXT_REGION_LENGTH__+0x7f0c00>
    2db2:	81 11       	cpse	r24, r1
    2db4:	cd cf       	rjmp	.-102    	; 0x2d50 <main+0x208>
is_ep_setup():
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:256
      set_cci_data(0x00);
      USB0_CTRLA = USB_ENABLE_bm | (USB_ENDPOINTS_MAX - 1);
    }
  }

  bool is_ep_setup (void) { return bit_is_set(EP_REQ.STATUS, USB_EPSETUP_bp); }
    2db6:	80 91 3e 64 	lds	r24, 0x643E	; 0x80643e <EP_TABLE+0x8>
main():
/Users/askn/Collaborator/UPDI4AVR-USB/src/main.cpp:119

    /*** USB control handling ***/
    USB::handling_bus_events();
    if (USB::is_ep_setup()) USB::handling_control_transactions();
    2dba:	84 ff       	sbrs	r24, 4
    2dbc:	4c c0       	rjmp	.+152    	; 0x2e56 <main+0x30e>
handling_control_transactions():
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:639
    return _listen;
  }

  void handling_control_transactions (void) {
    bool _listen = false;
    uint8_t bmRequestType = EP_MEM.req_data.bmRequestType;
    2dbe:	f0 90 16 63 	lds	r15, 0x6316	; 0x806316 <EP_MEM>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:640
    D1PRINTF("RQ=%02X:%04X:%02X:%02X:%04X:%04X:%04X\r\n",
    2dc2:	80 91 40 64 	lds	r24, 0x6440	; 0x806440 <EP_TABLE+0xa>
    2dc6:	90 91 41 64 	lds	r25, 0x6441	; 0x806441 <EP_TABLE+0xb>
    2dca:	20 91 3e 64 	lds	r18, 0x643E	; 0x80643e <EP_TABLE+0x8>
    2dce:	30 91 1d 63 	lds	r19, 0x631D	; 0x80631d <EP_MEM+0x7>
    2dd2:	3f 93       	push	r19
    2dd4:	30 91 1c 63 	lds	r19, 0x631C	; 0x80631c <EP_MEM+0x6>
    2dd8:	3f 93       	push	r19
    2dda:	30 91 1b 63 	lds	r19, 0x631B	; 0x80631b <EP_MEM+0x5>
    2dde:	3f 93       	push	r19
    2de0:	30 91 1a 63 	lds	r19, 0x631A	; 0x80631a <EP_MEM+0x4>
    2de4:	3f 93       	push	r19
    2de6:	30 91 19 63 	lds	r19, 0x6319	; 0x806319 <EP_MEM+0x3>
    2dea:	3f 93       	push	r19
    2dec:	30 91 18 63 	lds	r19, 0x6318	; 0x806318 <EP_MEM+0x2>
    2df0:	3f 93       	push	r19
    2df2:	30 91 17 63 	lds	r19, 0x6317	; 0x806317 <EP_MEM+0x1>
    2df6:	1f 92       	push	r1
    2df8:	3f 93       	push	r19
    2dfa:	1f 92       	push	r1
    2dfc:	ff 92       	push	r15
    2dfe:	9f 93       	push	r25
    2e00:	8f 93       	push	r24
    2e02:	1f 92       	push	r1
    2e04:	2f 93       	push	r18
    2e06:	81 e7       	ldi	r24, 0x71	; 113
    2e08:	92 e0       	ldi	r25, 0x02	; 2
    2e0a:	9f 93       	push	r25
    2e0c:	8f 93       	push	r24
    2e0e:	1f 93       	push	r17
    2e10:	0f 93       	push	r16
    2e12:	0e 94 29 0a 	call	0x1452	; 0x1452 <Print::printf(PGM_t const*, ...) [clone .constprop.21]>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:643
      EP_REQ.STATUS, EP_REQ.CNT, EP_MEM.req_data.bmRequestType, EP_MEM.req_data.bRequest,
      EP_MEM.req_data.wValue, EP_MEM.req_data.wIndex, EP_MEM.req_data.wLength);
    if (bit_is_clear(bmRequestType, 7)) ep_req_listen();
    2e16:	cd bf       	out	0x3d, r28	; 61
    2e18:	de bf       	out	0x3e, r29	; 62
    2e1a:	f7 fe       	sbrs	r15, 7
    2e1c:	0e 94 5d 05 	call	0xaba	; 0xaba <USB::ep_req_listen()>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:644
    bmRequestType &= (3 << 5);
    2e20:	8f 2d       	mov	r24, r15
    2e22:	80 76       	andi	r24, 0x60	; 96
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:645
    if (bmRequestType == (0 << 5)) {
    2e24:	09 f0       	breq	.+2      	; 0x2e28 <main+0x2e0>
    2e26:	aa c2       	rjmp	.+1364   	; 0x337c <main+0x834>
request_standard():
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:525
  #endif
  }

  bool request_standard (void) {
    bool _listen = true;
    uint8_t bRequest = EP_MEM.req_data.bRequest;
    2e28:	80 91 17 63 	lds	r24, 0x6317	; 0x806317 <EP_MEM+0x1>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:526
    if (bRequest == 0x00) {       /* GET_STATUS */
    2e2c:	81 11       	cpse	r24, r1
    2e2e:	9b c0       	rjmp	.+310    	; 0x2f66 <main+0x41e>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:527
      EP_MEM.res_data[0] = 0;
    2e30:	10 92 1e 63 	sts	0x631E, r1	; 0x80631e <EP_MEM+0x8>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:528
      EP_MEM.res_data[1] = 0;
    2e34:	10 92 1f 63 	sts	0x631F, r1	; 0x80631f <EP_MEM+0x9>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:529
      EP_RES.CNT = 2;
    2e38:	82 e0       	ldi	r24, 0x02	; 2
    2e3a:	90 e0       	ldi	r25, 0x00	; 0
    2e3c:	80 93 48 64 	sts	0x6448, r24	; 0x806448 <EP_TABLE+0x12>
    2e40:	90 93 49 64 	sts	0x6449, r25	; 0x806449 <EP_TABLE+0x13>
handling_control_transactions():
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:657
    else if (bmRequestType == (2 << 5)) {
      _listen = request_vendor();
    }
  #endif
    if (_listen) {
      ep_res_listen();
    2e44:	0e 94 51 05 	call	0xaa2	; 0xaa2 <USB::ep_res_listen()>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:658
      ep_req_listen();
    2e48:	0e 94 5d 05 	call	0xaba	; 0xaba <USB::ep_req_listen()>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:663
    }
    else {
      ep0_stalled();
    }
    USB0_INTFLAGSB |= USB_EPSETUP_bp;
    2e4c:	80 91 0b 0c 	lds	r24, 0x0C0B	; 0x800c0b <__TEXT_REGION_LENGTH__+0x7f0c0b>
    2e50:	84 60       	ori	r24, 0x04	; 4
    2e52:	80 93 0b 0c 	sts	0x0C0B, r24	; 0x800c0b <__TEXT_REGION_LENGTH__+0x7f0c0b>
main():
/Users/askn/Collaborator/UPDI4AVR-USB/src/main.cpp:121

    if      (bit_is_set(GPCONF, GPCONF_FAL_bp)) SYS::reset_enter();
    2e56:	e7 9b       	sbis	0x1c, 7	; 28
    2e58:	7d c3       	rjmp	.+1786   	; 0x3554 <main+0xa0c>
reset_enter():
/Users/askn/Collaborator/UPDI4AVR-USB/src/sys.cpp:237
  /*
   * Executed when SW0 is detected as being pressed.
   * May be called multiple times due to chattering.
   */
  void reset_enter (void) {
    if (bit_is_set(PGCONF, PGCONF_UPDI_bp)) return;
    2e5a:	e8 99       	sbic	0x1d, 0	; 29
    2e5c:	2b c0       	rjmp	.+86     	; 0x2eb4 <main+0x36c>
LED_TCB1():
/Users/askn/Collaborator/UPDI4AVR-USB/src/sys.cpp:180
      _led_mode = 1;
    }
  }

  void LED_TCB1 (uint8_t _mode, uint16_t _ccmp) {
    if (_led_mode != _mode) {
    2e5e:	80 91 85 60 	lds	r24, 0x6085	; 0x806085 <_led_mode>
    2e62:	83 30       	cpi	r24, 0x03	; 3
    2e64:	81 f0       	breq	.+32     	; 0x2e86 <main+0x33e>
/Users/askn/Collaborator/UPDI4AVR-USB/src/sys.cpp:181
      TCA0_SPLIT_CTRLA = 0;
    2e66:	10 92 00 0a 	sts	0x0A00, r1	; 0x800a00 <__TEXT_REGION_LENGTH__+0x7f0a00>
/Users/askn/Collaborator/UPDI4AVR-USB/src/sys.cpp:182
      TCB1_CNTL = 0;
    2e6a:	10 92 1a 0b 	sts	0x0B1A, r1	; 0x800b1a <__TEXT_REGION_LENGTH__+0x7f0b1a>
/Users/askn/Collaborator/UPDI4AVR-USB/src/sys.cpp:183
      TCB1_CCMP = _ccmp;
    2e6e:	89 ea       	ldi	r24, 0xA9	; 169
    2e70:	95 e5       	ldi	r25, 0x55	; 85
    2e72:	80 93 1c 0b 	sts	0x0B1C, r24	; 0x800b1c <__TEXT_REGION_LENGTH__+0x7f0b1c>
    2e76:	90 93 1d 0b 	sts	0x0B1D, r25	; 0x800b1d <__TEXT_REGION_LENGTH__+0x7f0b1d>
/Users/askn/Collaborator/UPDI4AVR-USB/src/sys.cpp:184
      TCB1_CTRLA = TCB_RUNSTDBY_bm | TCB_ENABLE_bm | TCB_CLKSEL_EVENT_gc;
    2e7a:	8f e4       	ldi	r24, 0x4F	; 79
    2e7c:	80 93 10 0b 	sts	0x0B10, r24	; 0x800b10 <__TEXT_REGION_LENGTH__+0x7f0b10>
/Users/askn/Collaborator/UPDI4AVR-USB/src/sys.cpp:185
      _led_mode = _mode;
    2e80:	83 e0       	ldi	r24, 0x03	; 3
    2e82:	80 93 85 60 	sts	0x6085, r24	; 0x806085 <_led_mode>
reset_enter():
/Users/askn/Collaborator/UPDI4AVR-USB/src/sys.cpp:239
   * May be called multiple times due to chattering.
   */
  void reset_enter (void) {
    if (bit_is_set(PGCONF, PGCONF_UPDI_bp)) return;
    LED_Blink();
    if (_jtag_arch == 5) {
    2e86:	80 91 98 60 	lds	r24, 0x6098	; 0x806098 <_jtag_arch>
    2e8a:	85 30       	cpi	r24, 0x05	; 5
    2e8c:	29 f4       	brne	.+10     	; 0x2e98 <main+0x350>
/Users/askn/Collaborator/UPDI4AVR-USB/src/sys.cpp:245
      /* 
       * Puts a tinyAVR-0 which does not have a reset pad into reset state.
       * This applies to all chips which have an enabled UPDI pad.
       * Does not affect TPI/PDI types.
       */
      _updi_bitmap[10] = 0x59; /* SYSRST */
    2e8e:	89 e5       	ldi	r24, 0x59	; 89
    2e90:	80 93 24 60 	sts	0x6024, r24	; 0x806024 <SYS::_updi_bitmap+0xa>
/Users/askn/Collaborator/UPDI4AVR-USB/src/sys.cpp:246
      send_bitmap(_updi_bitmap, sizeof(_updi_bitmap) * 8);
    2e94:	0e 94 b2 04 	call	0x964	; 0x964 <SYS::send_bitmap(unsigned char const*, unsigned int) [clone .constprop.9]>
/Users/askn/Collaborator/UPDI4AVR-USB/src/sys.cpp:248
    }
    openDrainWriteMacro(PIN_PG_TRST, LOW);
    2e98:	01 9a       	sbi	0x00, 1	; 0
/Users/askn/Collaborator/UPDI4AVR-USB/src/sys.cpp:249
    D1PRINTF("<RST:IN>\r\n");
    2e9a:	89 e9       	ldi	r24, 0x99	; 153
    2e9c:	92 e0       	ldi	r25, 0x02	; 2
    2e9e:	9f 93       	push	r25
    2ea0:	8f 93       	push	r24
    2ea2:	1f 93       	push	r17
    2ea4:	0f 93       	push	r16
    2ea6:	0e 94 29 0a 	call	0x1452	; 0x1452 <Print::printf(PGM_t const*, ...) [clone .constprop.21]>
/Users/askn/Collaborator/UPDI4AVR-USB/src/sys.cpp:250
    bit_clear(GPCONF, GPCONF_FAL_bp);
    2eaa:	e7 98       	cbi	0x1c, 7	; 28
    2eac:	0f 90       	pop	r0
    2eae:	0f 90       	pop	r0
    2eb0:	0f 90       	pop	r0
    2eb2:	0f 90       	pop	r0
main():
/Users/askn/Collaborator/UPDI4AVR-USB/src/main.cpp:124
    else if (bit_is_set(GPCONF, GPCONF_RIS_bp)) SYS::reset_leave();

    if (bit_is_clear(GPCONF, GPCONF_USB_bp)) continue;
    2eb4:	e0 9b       	sbis	0x1c, 0	; 28
    2eb6:	37 cf       	rjmp	.-402    	; 0x2d26 <main+0x1de>
/Users/askn/Collaborator/UPDI4AVR-USB/src/main.cpp:130

    /*** CMSIS-DAP VCP transceiver ***/
  #if defined(CONFIG_VCP_9BIT_SUPPORT)
    if (bit_is_set(GPCONF, GPCONF_VCP_bp)) usart_transmitter();
  #else
    if (bit_is_set(GPCONF, GPCONF_VCP_bp)) USB::vcp_transceiver();
    2eb8:	e1 9b       	sbis	0x1c, 1	; 28
    2eba:	9e c3       	rjmp	.+1852   	; 0x35f8 <main+0xab0>
vcp_transceiver():
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:502
    if (bit_is_clear(GPCONF, GPCONF_BRK_bp)
  #if defined(CONFIG_VCP_CTS_ENABLE)
     && !digitalReadMacro(PIN_VCP_CTS)
  #endif
     && bit_is_set(USART0_STATUS, USART_DREIF_bp)
     && read_available()) {
    2ebc:	e3 99       	sbic	0x1c, 3	; 28
    2ebe:	14 c0       	rjmp	.+40     	; 0x2ee8 <main+0x3a0>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:501
  void vcp_transceiver (void) {
    if (bit_is_clear(GPCONF, GPCONF_BRK_bp)
  #if defined(CONFIG_VCP_CTS_ENABLE)
     && !digitalReadMacro(PIN_VCP_CTS)
  #endif
     && bit_is_set(USART0_STATUS, USART_DREIF_bp)
    2ec0:	80 91 04 08 	lds	r24, 0x0804	; 0x800804 <__TEXT_REGION_LENGTH__+0x7f0804>
    2ec4:	85 ff       	sbrs	r24, 5
    2ec6:	10 c0       	rjmp	.+32     	; 0x2ee8 <main+0x3a0>
read_available():
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:458
    return _c;
  }

  bool read_available (void) {
    uint8_t _s = 0;
    if (bit_is_set(EP_CDO.STATUS, USB_BUSNAK_bp) && bit_is_set(GPCONF, GPCONF_VCP_bp)) {
    2ec8:	80 91 6e 64 	lds	r24, 0x646E	; 0x80646e <EP_TABLE+0x38>
    2ecc:	81 ff       	sbrs	r24, 1
    2ece:	0c c0       	rjmp	.+24     	; 0x2ee8 <main+0x3a0>
    2ed0:	e1 9b       	sbis	0x1c, 1	; 28
    2ed2:	0a c0       	rjmp	.+20     	; 0x2ee8 <main+0x3a0>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:459
      _s = EP_CDO.CNT - _recv_count;
    2ed4:	20 91 70 64 	lds	r18, 0x6470	; 0x806470 <EP_TABLE+0x3a>
    2ed8:	30 91 71 64 	lds	r19, 0x6471	; 0x806471 <EP_TABLE+0x3b>
    2edc:	80 91 31 64 	lds	r24, 0x6431	; 0x806431 <_recv_count>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:460
      if (_s == 0) ep_cdo_listen();
    2ee0:	82 13       	cpse	r24, r18
    2ee2:	6b c3       	rjmp	.+1750   	; 0x35ba <main+0xa72>
    2ee4:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <USB::ep_cdo_listen()>
main():
/Users/askn/Collaborator/UPDI4AVR-USB/src/main.cpp:135
  #endif
    else USB::read_drop();

    /*** If the break value is between 1 and 65534, it will count down. ***/
    if (bit_is_set(GPCONF, GPCONF_BRK_bp)) USB::cci_break_count();
    2ee8:	e3 9b       	sbis	0x1c, 3	; 28
    2eea:	18 c0       	rjmp	.+48     	; 0x2f1c <main+0x3d4>
cci_break_count():
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:397
    bit_clear(GPCONF, GPCONF_BRK_bp);
  }

  void cci_break_count (void) {
    /* If the break value is between 1 and 65534, it will count down. */
    if ((_send_break + 1) > 1) {
    2eec:	80 91 33 64 	lds	r24, 0x6433	; 0x806433 <_send_break>
    2ef0:	90 91 34 64 	lds	r25, 0x6434	; 0x806434 <_send_break+0x1>
    2ef4:	9c 01       	movw	r18, r24
    2ef6:	2f 5f       	subi	r18, 0xFF	; 255
    2ef8:	3f 4f       	sbci	r19, 0xFF	; 255
    2efa:	22 30       	cpi	r18, 0x02	; 2
    2efc:	31 05       	cpc	r19, r1
    2efe:	70 f0       	brcs	.+28     	; 0x2f1c <main+0x3d4>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:398
      if (_send_break > USB_CCI_INTERVAL) {
    2f00:	85 30       	cpi	r24, 0x05	; 5
    2f02:	91 05       	cpc	r25, r1
    2f04:	08 f4       	brcc	.+2      	; 0x2f08 <main+0x3c0>
    2f06:	7d c3       	rjmp	.+1786   	; 0x3602 <main+0xaba>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:399
        _send_break -= USB_CCI_INTERVAL;
    2f08:	04 97       	sbiw	r24, 0x04	; 4
    2f0a:	80 93 33 64 	sts	0x6433, r24	; 0x806433 <_send_break>
    2f0e:	90 93 34 64 	sts	0x6434, r25	; 0x806434 <_send_break+0x1>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:400
        if (bit_is_set(EP_CCI.STATUS, USB_BUSNAK_bp))
    2f12:	80 91 66 64 	lds	r24, 0x6466	; 0x806466 <EP_TABLE+0x30>
    2f16:	81 fd       	sbrc	r24, 1
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:401
          ep_cci_listen();
    2f18:	0e 94 3f 05 	call	0xa7e	; 0xa7e <USB::ep_cci_listen()>
is_not_dap():
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:257
      USB0_CTRLA = USB_ENABLE_bm | (USB_ENDPOINTS_MAX - 1);
    }
  }

  bool is_ep_setup (void) { return bit_is_set(EP_REQ.STATUS, USB_EPSETUP_bp); }
  bool is_not_dap (void) { return bit_is_clear(EP_DPO.STATUS, USB_BUSNAK_bp); }
    2f1c:	80 91 5e 64 	lds	r24, 0x645E	; 0x80645e <EP_TABLE+0x28>
main():
/Users/askn/Collaborator/UPDI4AVR-USB/src/main.cpp:138

    /*** If CMSIS-DAP is not received, return to the top. ***/
    if (USB::is_not_dap()) continue;
    2f20:	81 ff       	sbrs	r24, 1
    2f22:	fe ce       	rjmp	.-516    	; 0x2d20 <main+0x1d8>
dap_command_check():
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:52
   * Command numbers 0x80 and above are vendor extensions, EDBG Payload uses 0x80 and x81.
   * Additionally, 0x82 is reserved for device event notification.
   */
  bool dap_command_check (void) {
    bool _result = false;
    uint8_t _cmd = EP_MEM.dap_data[0];
    2f24:	90 91 2e 63 	lds	r25, 0x632E	; 0x80632e <EP_MEM+0x18>
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:53
    uint8_t _sub = EP_MEM.dap_data[1];
    2f28:	80 91 2f 63 	lds	r24, 0x632F	; 0x80632f <EP_MEM+0x19>
ep_dpi_pending():
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:260
  void ep_req_pending (void) { loop_until_bit_is_set(EP_REQ.STATUS, USB_BUSNAK_bp); }
  void ep_res_pending (void) { loop_until_bit_is_set(EP_RES.STATUS, USB_BUSNAK_bp); }
  void ep_dpi_pending (void) { loop_until_bit_is_set(EP_DPI.STATUS, USB_BUSNAK_bp); }
    2f2c:	20 91 56 64 	lds	r18, 0x6456	; 0x806456 <EP_TABLE+0x20>
    2f30:	21 ff       	sbrs	r18, 1
    2f32:	fc cf       	rjmp	.-8      	; 0x2f2c <main+0x3e4>
dap_command_check():
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:65
     * and the data is sent and received with a fixed length of 64 bytes,
     * determined by the value specified in the HID Report.
     * A maximum of 15 chunks is possible,
     * resulting in a maximum payload length of 900 bytes.
     */
    if (_cmd == 0x80) {             /* DAP_EDBG_VENDOR_AVR_CMD */
    2f34:	90 38       	cpi	r25, 0x80	; 128
    2f36:	09 f0       	breq	.+2      	; 0x2f3a <main+0x3f2>
    2f38:	3e c4       	rjmp	.+2172   	; 0x37b6 <main+0xc6e>
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:66
      uint8_t _endf = _sub & 0x0F;
    2f3a:	f8 2f       	mov	r31, r24
    2f3c:	ff 70       	andi	r31, 0x0F	; 15
    2f3e:	6f 2e       	mov	r6, r31
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:70
      uint8_t _frag = _sub >> 4;
      uint8_t _size = EP_MEM.dap_data[3];
      size_t  _ofst = (_frag - 1) * 60;
      if (_endf >= 10) {
    2f40:	29 e0       	ldi	r18, 0x09	; 9
    2f42:	2f 17       	cp	r18, r31
    2f44:	08 f0       	brcs	.+2      	; 0x2f48 <main+0x400>
    2f46:	64 c3       	rjmp	.+1736   	; 0x3610 <main+0xac8>
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:72
        /* Only a maximum of 540 bytes : 9 fragment records is accepted. */
        D1PRINTF("<EDBG_FAIL>\r\n");
    2f48:	8d ec       	ldi	r24, 0xCD	; 205
    2f4a:	92 e0       	ldi	r25, 0x02	; 2
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:94
            _packet_endfrag = 0;
            _result = true;
          }
          else {
            /* A missing chunk is detected, so an error is returned. */
            D1PRINTF("<EDBG_FAIL>\r\n");
    2f4c:	9f 93       	push	r25
    2f4e:	8f 93       	push	r24
    2f50:	1f 93       	push	r17
    2f52:	0f 93       	push	r16
    2f54:	0e 94 29 0a 	call	0x1452	; 0x1452 <Print::printf(PGM_t const*, ...) [clone .constprop.21]>
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:95
            EP_MEM.dap_data[1] = 0x00;  /* EDBG_RSP_FAIL */
    2f58:	10 92 2f 63 	sts	0x632F, r1	; 0x80632f <EP_MEM+0x19>
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:105
    else if (_cmd == 0x81) {        /* DAP_EDBG_VENDOR_AVR_RSP */
      EP_MEM.dap_data[2] = 0;       /* Always zero */
      if (_packet_endfrag == 0) {
        D1PRINTF("<EDBG_EMPTY>\r\n");
        EP_MEM.dap_data[1] = 0;
        EP_MEM.dap_data[3] = 0;
    2f5c:	0f 90       	pop	r0
    2f5e:	0f 90       	pop	r0
    2f60:	0f 90       	pop	r0
    2f62:	0f 90       	pop	r0
    2f64:	7d c3       	rjmp	.+1786   	; 0x3660 <main+0xb18>
request_standard():
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:531
    if (bRequest == 0x00) {       /* GET_STATUS */
      EP_MEM.res_data[0] = 0;
      EP_MEM.res_data[1] = 0;
      EP_RES.CNT = 2;
    }
    else if (bRequest == 0x01) {  /* CLEAR_FEATURE */
    2f66:	81 30       	cpi	r24, 0x01	; 1
    2f68:	89 f5       	brne	.+98     	; 0x2fcc <main+0x484>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:532
      D1PRINTF(" CF=%02X:%02X\r\n", EP_MEM.req_data.wValue, EP_MEM.req_data.wIndex);
    2f6a:	80 91 1b 63 	lds	r24, 0x631B	; 0x80631b <EP_MEM+0x5>
    2f6e:	8f 93       	push	r24
    2f70:	80 91 1a 63 	lds	r24, 0x631A	; 0x80631a <EP_MEM+0x4>
    2f74:	8f 93       	push	r24
    2f76:	80 91 19 63 	lds	r24, 0x6319	; 0x806319 <EP_MEM+0x3>
    2f7a:	8f 93       	push	r24
    2f7c:	80 91 18 63 	lds	r24, 0x6318	; 0x806318 <EP_MEM+0x2>
    2f80:	8f 93       	push	r24
    2f82:	86 e2       	ldi	r24, 0x26	; 38
    2f84:	92 e0       	ldi	r25, 0x02	; 2
    2f86:	9f 93       	push	r25
    2f88:	8f 93       	push	r24
    2f8a:	1f 93       	push	r17
    2f8c:	0f 93       	push	r16
    2f8e:	0e 94 29 0a 	call	0x1452	; 0x1452 <Print::printf(PGM_t const*, ...) [clone .constprop.21]>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:533
      if (0 == (uint8_t)EP_MEM.req_data.wValue) {
    2f92:	cd bf       	out	0x3d, r28	; 61
    2f94:	de bf       	out	0x3e, r29	; 62
    2f96:	80 91 18 63 	lds	r24, 0x6318	; 0x806318 <EP_MEM+0x2>
    2f9a:	81 11       	cpse	r24, r1
    2f9c:	12 c0       	rjmp	.+36     	; 0x2fc2 <main+0x47a>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:535
        /* Assumes that an Endpoint number is passed. */
        uint8_t _EP = EP_MEM.req_data.wIndex;
    2f9e:	e0 91 1a 63 	lds	r30, 0x631A	; 0x80631a <EP_MEM+0x4>
    2fa2:	f0 91 1b 63 	lds	r31, 0x631B	; 0x80631b <EP_MEM+0x5>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:536
        loop_until_bit_is_clear(USB0_INTFLAGSB, USB_RMWBUSY_bp);
    2fa6:	80 91 0b 0c 	lds	r24, 0x0C0B	; 0x800c0b <__TEXT_REGION_LENGTH__+0x7f0c0b>
    2faa:	82 fd       	sbrc	r24, 2
    2fac:	fc cf       	rjmp	.-8      	; 0x2fa6 <main+0x45e>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:537
        USB_EP_STATUS_CLR(_EP) = USB_STALLED_bm | USB_TOGGLE_bm;
    2fae:	f5 95       	asr	r31
    2fb0:	e7 95       	ror	r30
    2fb2:	f5 95       	asr	r31
    2fb4:	e7 95       	ror	r30
    2fb6:	ef 73       	andi	r30, 0x3F	; 63
    2fb8:	ff 27       	eor	r31, r31
    2fba:	e0 5c       	subi	r30, 0xC0	; 192
    2fbc:	f3 4f       	sbci	r31, 0xF3	; 243
    2fbe:	89 e0       	ldi	r24, 0x09	; 9
    2fc0:	80 83       	st	Z, r24
request_class():
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:629
    else if (bRequest == 0x23) {  /* SET_SEND_BREAK */
      D1PRINTF(" SB=%04X\r\n", EP_MEM.req_data.wValue);
      _send_break = EP_MEM.req_data.wValue;
      if (_send_break) break_on();
      else break_off();
      EP_RES.CNT = 0;
    2fc2:	10 92 48 64 	sts	0x6448, r1	; 0x806448 <EP_TABLE+0x12>
    2fc6:	10 92 49 64 	sts	0x6449, r1	; 0x806449 <EP_TABLE+0x13>
    2fca:	3c cf       	rjmp	.-392    	; 0x2e44 <main+0x2fc>
request_standard():
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:541
        loop_until_bit_is_clear(USB0_INTFLAGSB, USB_RMWBUSY_bp);
        USB_EP_STATUS_CLR(_EP) = USB_STALLED_bm | USB_TOGGLE_bm;
      }
      EP_RES.CNT = 0;
    }
    else if (bRequest == 0x04) {  /* SET_FEATURE */
    2fcc:	84 30       	cpi	r24, 0x04	; 4
    2fce:	d9 f4       	brne	.+54     	; 0x3006 <main+0x4be>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:543
      /* If used, it will be ignored. */
      D1PRINTF(" SF=%02X:%02X\r\n", EP_MEM.req_data.wValue, EP_MEM.req_data.wIndex);
    2fd0:	80 91 1b 63 	lds	r24, 0x631B	; 0x80631b <EP_MEM+0x5>
    2fd4:	8f 93       	push	r24
    2fd6:	80 91 1a 63 	lds	r24, 0x631A	; 0x80631a <EP_MEM+0x4>
    2fda:	8f 93       	push	r24
    2fdc:	80 91 19 63 	lds	r24, 0x6319	; 0x806319 <EP_MEM+0x3>
    2fe0:	8f 93       	push	r24
    2fe2:	80 91 18 63 	lds	r24, 0x6318	; 0x806318 <EP_MEM+0x2>
    2fe6:	8f 93       	push	r24
    2fe8:	86 e1       	ldi	r24, 0x16	; 22
    2fea:	92 e0       	ldi	r25, 0x02	; 2
    2fec:	9f 93       	push	r25
    2fee:	8f 93       	push	r24
    2ff0:	1f 93       	push	r17
    2ff2:	0f 93       	push	r16
    2ff4:	0e 94 29 0a 	call	0x1452	; 0x1452 <Print::printf(PGM_t const*, ...) [clone .constprop.21]>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:544
      EP_RES.CNT = 0;
    2ff8:	10 92 48 64 	sts	0x6448, r1	; 0x806448 <EP_TABLE+0x12>
    2ffc:	10 92 49 64 	sts	0x6449, r1	; 0x806449 <EP_TABLE+0x13>
    3000:	cd bf       	out	0x3d, r28	; 61
    3002:	de bf       	out	0x3e, r29	; 62
    3004:	1f cf       	rjmp	.-450    	; 0x2e44 <main+0x2fc>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:546
    }
    else if (bRequest == 0x05) {  /* SET_ADDRESS */
    3006:	85 30       	cpi	r24, 0x05	; 5
    3008:	e1 f4       	brne	.+56     	; 0x3042 <main+0x4fa>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:547
      uint8_t _addr = EP_MEM.req_data.wValue & 0x7F;
    300a:	80 91 18 63 	lds	r24, 0x6318	; 0x806318 <EP_MEM+0x2>
    300e:	f8 2e       	mov	r15, r24
    3010:	e8 94       	clt
    3012:	f7 f8       	bld	r15, 7
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:548
      ep_res_listen();
    3014:	0e 94 51 05 	call	0xaa2	; 0xaa2 <USB::ep_res_listen()>
ep_res_pending():
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:259
  }

  bool is_ep_setup (void) { return bit_is_set(EP_REQ.STATUS, USB_EPSETUP_bp); }
  bool is_not_dap (void) { return bit_is_clear(EP_DPO.STATUS, USB_BUSNAK_bp); }
  void ep_req_pending (void) { loop_until_bit_is_set(EP_REQ.STATUS, USB_BUSNAK_bp); }
  void ep_res_pending (void) { loop_until_bit_is_set(EP_RES.STATUS, USB_BUSNAK_bp); }
    3018:	80 91 46 64 	lds	r24, 0x6446	; 0x806446 <EP_TABLE+0x10>
    301c:	81 ff       	sbrs	r24, 1
    301e:	fc cf       	rjmp	.-8      	; 0x3018 <main+0x4d0>
request_standard():
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:550
    }
    else if (bRequest == 0x05) {  /* SET_ADDRESS */
      uint8_t _addr = EP_MEM.req_data.wValue & 0x7F;
      ep_res_listen();
      ep_res_pending();
      USB0_ADDR = _addr;
    3020:	f0 92 03 0c 	sts	0x0C03, r15	; 0x800c03 <__TEXT_REGION_LENGTH__+0x7f0c03>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:551
      D1PRINTF(" USB0_ADDR=%d\r\n", _addr);
    3024:	1f 92       	push	r1
    3026:	ff 92       	push	r15
    3028:	86 e0       	ldi	r24, 0x06	; 6
    302a:	92 e0       	ldi	r25, 0x02	; 2
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:570
    else if (bRequest == 0x09) {  /* SET_CONFIGURATION */
      /* Once the USB connection is fully initiated, it will go through here. */
      _set_config = (uint8_t)EP_MEM.req_data.wValue;
      bit_set(GPCONF, GPCONF_USB_bp);
      SYS::LED_HeartBeat();
      D1PRINTF("<SC:%02X>\r\n", _set_config);
    302c:	9f 93       	push	r25
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:581
      EP_MEM.res_data[0] = 0;
      EP_RES.CNT = 1;
    }
    else if (bRequest == 0x0B) {  /* SET_INTREFACE */
      /* It seems not to be used. */
      D1PRINTF("<GI:%02X>\r\n", EP_MEM.req_data.wValue);
    302e:	8f 93       	push	r24
    3030:	1f 93       	push	r17
    3032:	0f 93       	push	r16
    3034:	0e 94 29 0a 	call	0x1452	; 0x1452 <Print::printf(PGM_t const*, ...) [clone .constprop.21]>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:582
      EP_RES.CNT = 0;
    3038:	10 92 48 64 	sts	0x6448, r1	; 0x806448 <EP_TABLE+0x12>
    303c:	10 92 49 64 	sts	0x6449, r1	; 0x806449 <EP_TABLE+0x13>
    3040:	64 c1       	rjmp	.+712    	; 0x330a <main+0x7c2>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:554
      ep_res_pending();
      USB0_ADDR = _addr;
      D1PRINTF(" USB0_ADDR=%d\r\n", _addr);
      EP_RES.CNT = 0;
    }
    else if (bRequest == 0x06) {  /* GET_DESCRIPTOR */
    3042:	86 30       	cpi	r24, 0x06	; 6
    3044:	09 f0       	breq	.+2      	; 0x3048 <main+0x500>
    3046:	4d c1       	rjmp	.+666    	; 0x32e2 <main+0x79a>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:555
      size_t _length = EP_MEM.req_data.wLength;
    3048:	40 90 1c 63 	lds	r4, 0x631C	; 0x80631c <EP_MEM+0x6>
    304c:	f0 91 1d 63 	lds	r31, 0x631D	; 0x80631d <EP_MEM+0x7>
    3050:	fd 83       	std	Y+5, r31	; 0x05
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:556
      size_t _size = get_descriptor((uint8_t*)&EP_MEM.res_data, EP_MEM.req_data.wValue);
    3052:	80 91 18 63 	lds	r24, 0x6318	; 0x806318 <EP_MEM+0x2>
    3056:	90 91 19 63 	lds	r25, 0x6319	; 0x806319 <EP_MEM+0x3>
get_descriptor():
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:154

  size_t get_descriptor (uint8_t* _buffer, uint16_t _index) {
    uint8_t* _pgmem = 0;
    size_t   _size = 0;
    uint8_t  _type = _index >> 8;
    if (_type == 0x01) {          /* DEVICE */
    305a:	91 30       	cpi	r25, 0x01	; 1
    305c:	09 f0       	breq	.+2      	; 0x3060 <main+0x518>
    305e:	61 c0       	rjmp	.+194    	; 0x3122 <main+0x5da>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:157
      _pgmem = (uint8_t*)&device_descriptor;
      _size = sizeof(device_descriptor);
      memcpy_P(_buffer, _pgmem, _size);
    3060:	42 e1       	ldi	r20, 0x12	; 18
    3062:	50 e0       	ldi	r21, 0x00	; 0
    3064:	67 ec       	ldi	r22, 0xC7	; 199
    3066:	71 e0       	ldi	r23, 0x01	; 1
    3068:	8e e1       	ldi	r24, 0x1E	; 30
    306a:	93 e6       	ldi	r25, 0x63	; 99
    306c:	0e 94 8c 21 	call	0x4318	; 0x4318 <memcpy_P>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:158
      uint32_t _vidpid = *((uint32_t*)EEPROM_START);
    3070:	80 91 00 14 	lds	r24, 0x1400	; 0x801400 <__TEXT_REGION_LENGTH__+0x7f1400>
    3074:	90 91 01 14 	lds	r25, 0x1401	; 0x801401 <__TEXT_REGION_LENGTH__+0x7f1401>
    3078:	a0 91 02 14 	lds	r26, 0x1402	; 0x801402 <__TEXT_REGION_LENGTH__+0x7f1402>
    307c:	b0 91 03 14 	lds	r27, 0x1403	; 0x801403 <__TEXT_REGION_LENGTH__+0x7f1403>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:159
      if (_vidpid + 1) _CAPS32(_buffer[8])->dword = _vidpid;
    3080:	8f 3f       	cpi	r24, 0xFF	; 255
    3082:	2f ef       	ldi	r18, 0xFF	; 255
    3084:	92 07       	cpc	r25, r18
    3086:	a2 07       	cpc	r26, r18
    3088:	b2 07       	cpc	r27, r18
    308a:	41 f0       	breq	.+16     	; 0x309c <main+0x554>
    308c:	80 93 26 63 	sts	0x6326, r24	; 0x806326 <EP_MEM+0x10>
    3090:	90 93 27 63 	sts	0x6327, r25	; 0x806327 <EP_MEM+0x11>
    3094:	a0 93 28 63 	sts	0x6328, r26	; 0x806328 <EP_MEM+0x12>
    3098:	b0 93 29 63 	sts	0x6329, r27	; 0x806329 <EP_MEM+0x13>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:160
      D1PRINTF(" VID:PID=%04X:%04X\r\n", _CAPS16(_buffer[8])->word, _CAPS16(_buffer[10])->word);
    309c:	80 91 29 63 	lds	r24, 0x6329	; 0x806329 <EP_MEM+0x13>
    30a0:	8f 93       	push	r24
    30a2:	80 91 28 63 	lds	r24, 0x6328	; 0x806328 <EP_MEM+0x12>
    30a6:	8f 93       	push	r24
    30a8:	80 91 27 63 	lds	r24, 0x6327	; 0x806327 <EP_MEM+0x11>
    30ac:	8f 93       	push	r24
    30ae:	80 91 26 63 	lds	r24, 0x6326	; 0x806326 <EP_MEM+0x10>
    30b2:	8f 93       	push	r24
    30b4:	82 eb       	ldi	r24, 0xB2	; 178
    30b6:	91 e0       	ldi	r25, 0x01	; 1
    30b8:	9f 93       	push	r25
    30ba:	8f 93       	push	r24
    30bc:	1f 93       	push	r17
    30be:	0f 93       	push	r16
    30c0:	0e 94 29 0a 	call	0x1452	; 0x1452 <Print::printf(PGM_t const*, ...) [clone .constprop.21]>
    30c4:	cd bf       	out	0x3d, r28	; 61
    30c6:	de bf       	out	0x3e, r29	; 62
main():
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:161
      return _size;
    30c8:	82 e1       	ldi	r24, 0x12	; 18
    30ca:	e8 2e       	mov	r14, r24
    30cc:	f1 2c       	mov	r15, r1
    30ce:	84 2d       	mov	r24, r4
    30d0:	9d 81       	ldd	r25, Y+5	; 0x05
    30d2:	e8 16       	cp	r14, r24
    30d4:	f9 06       	cpc	r15, r25
    30d6:	08 f4       	brcc	.+2      	; 0x30da <main+0x592>
    30d8:	c7 01       	movw	r24, r14
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:185
      _size = 4;
      *_buffer++ = 4;
      *_buffer++ = 3;
      *_buffer++ = 0x09;
      *_buffer++ = 0x04;
      return _size;
    30da:	97 01       	movw	r18, r14
    30dc:	7c 01       	movw	r14, r24
request_standard():
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:557
      EP_RES.CNT = 0;
    }
    else if (bRequest == 0x06) {  /* GET_DESCRIPTOR */
      size_t _length = EP_MEM.req_data.wLength;
      size_t _size = get_descriptor((uint8_t*)&EP_MEM.res_data, EP_MEM.req_data.wValue);
      EP_RES.CNT = (_size > _length) ? _length : _size;
    30de:	e0 92 48 64 	sts	0x6448, r14	; 0x806448 <EP_TABLE+0x12>
    30e2:	f0 92 49 64 	sts	0x6449, r15	; 0x806449 <EP_TABLE+0x13>
handling_control_transactions():
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:656
  #ifdef _Not_being_used_STUB_
    else if (bmRequestType == (2 << 5)) {
      _listen = request_vendor();
    }
  #endif
    if (_listen) {
    30e6:	23 2b       	or	r18, r19
    30e8:	09 f0       	breq	.+2      	; 0x30ec <main+0x5a4>
    30ea:	ac ce       	rjmp	.-680    	; 0x2e44 <main+0x2fc>
ep0_stalled():
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:359
    loop_until_bit_is_clear(USB0_INTFLAGSB, USB_RMWBUSY_bp);
    USB_EP_STATUS_CLR(USB_EP_CDO) = ~USB_TOGGLE_bm;
  }

  void ep0_stalled (void) {
    D1PRINTF("[STALLED]\r\n");
    30ec:	85 e6       	ldi	r24, 0x65	; 101
    30ee:	92 e0       	ldi	r25, 0x02	; 2
    30f0:	9f 93       	push	r25
    30f2:	8f 93       	push	r24
    30f4:	1f 93       	push	r17
    30f6:	0f 93       	push	r16
    30f8:	0e 94 29 0a 	call	0x1452	; 0x1452 <Print::printf(PGM_t const*, ...) [clone .constprop.21]>
    30fc:	0f 90       	pop	r0
    30fe:	0f 90       	pop	r0
    3100:	0f 90       	pop	r0
    3102:	0f 90       	pop	r0
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:360
    loop_until_bit_is_clear(USB0_INTFLAGSB, USB_RMWBUSY_bp);
    3104:	80 91 0b 0c 	lds	r24, 0x0C0B	; 0x800c0b <__TEXT_REGION_LENGTH__+0x7f0c0b>
    3108:	82 fd       	sbrc	r24, 2
    310a:	fc cf       	rjmp	.-8      	; 0x3104 <main+0x5bc>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:361
    USB_EP_STATUS_SET(USB_EP_RES) = USB_STALLED_bm;
    310c:	88 e0       	ldi	r24, 0x08	; 8
    310e:	80 93 43 0c 	sts	0x0C43, r24	; 0x800c43 <__TEXT_REGION_LENGTH__+0x7f0c43>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:362
    loop_until_bit_is_clear(USB0_INTFLAGSB, USB_RMWBUSY_bp);
    3112:	80 91 0b 0c 	lds	r24, 0x0C0B	; 0x800c0b <__TEXT_REGION_LENGTH__+0x7f0c0b>
    3116:	82 fd       	sbrc	r24, 2
    3118:	fc cf       	rjmp	.-8      	; 0x3112 <main+0x5ca>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:363
    USB_EP_STATUS_SET(USB_EP_REQ) = USB_STALLED_bm;
    311a:	88 e0       	ldi	r24, 0x08	; 8
    311c:	80 93 41 0c 	sts	0x0C41, r24	; 0x800c41 <__TEXT_REGION_LENGTH__+0x7f0c41>
    3120:	95 ce       	rjmp	.-726    	; 0x2e4c <main+0x304>
get_descriptor():
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:163
      uint32_t _vidpid = *((uint32_t*)EEPROM_START);
      if (_vidpid + 1) _CAPS32(_buffer[8])->dword = _vidpid;
      D1PRINTF(" VID:PID=%04X:%04X\r\n", _CAPS16(_buffer[8])->word, _CAPS16(_buffer[10])->word);
      return _size;
    }
    else if (_type == 0x02) {     /* CONFIGURATION */
    3122:	92 30       	cpi	r25, 0x02	; 2
    3124:	09 f4       	brne	.+2      	; 0x3128 <main+0x5e0>
    3126:	c0 c0       	rjmp	.+384    	; 0x32a8 <main+0x760>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:167
      _pgmem = (uint8_t*)&current_descriptor;
      _size = sizeof(current_descriptor);
    }
    else if (_type == 0x06) {     /* QUALIFIER */
    3128:	96 30       	cpi	r25, 0x06	; 6
    312a:	09 f4       	brne	.+2      	; 0x312e <main+0x5e6>
    312c:	c8 c0       	rjmp	.+400    	; 0x32be <main+0x776>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:171
      _pgmem = (uint8_t*)&qualifier_descriptor;
      _size = sizeof(qualifier_descriptor);
    }
    else if (_type == 0x21) {     /* HID */
    312e:	91 32       	cpi	r25, 0x21	; 33
    3130:	09 f4       	brne	.+2      	; 0x3134 <main+0x5ec>
    3132:	cb c0       	rjmp	.+406    	; 0x32ca <main+0x782>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:175
      _pgmem = (uint8_t*)&current_descriptor + 18;
      _size = 9;
    }
    else if (_type == 0x22) {     /* REPORT */
    3134:	92 32       	cpi	r25, 0x22	; 34
    3136:	09 f4       	brne	.+2      	; 0x313a <main+0x5f2>
    3138:	ce c0       	rjmp	.+412    	; 0x32d6 <main+0x78e>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:179
      _pgmem = (uint8_t*)&report_descriptor;
      _size = sizeof(report_descriptor);
    }
    else if (_index == 0x0300) {  /* LANGUAGE */
    313a:	81 15       	cp	r24, r1
    313c:	e3 e0       	ldi	r30, 0x03	; 3
    313e:	9e 07       	cpc	r25, r30
    3140:	79 f4       	brne	.+30     	; 0x3160 <main+0x618>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:181
      _size = 4;
      *_buffer++ = 4;
    3142:	84 e0       	ldi	r24, 0x04	; 4
    3144:	80 93 1e 63 	sts	0x631E, r24	; 0x80631e <EP_MEM+0x8>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:182
      *_buffer++ = 3;
    3148:	93 e0       	ldi	r25, 0x03	; 3
    314a:	90 93 1f 63 	sts	0x631F, r25	; 0x80631f <EP_MEM+0x9>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:183
      *_buffer++ = 0x09;
    314e:	99 e0       	ldi	r25, 0x09	; 9
    3150:	90 93 20 63 	sts	0x6320, r25	; 0x806320 <EP_MEM+0xa>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:184
      *_buffer++ = 0x04;
    3154:	80 93 21 63 	sts	0x6321, r24	; 0x806321 <EP_MEM+0xb>
main():
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:185
      return _size;
    3158:	b4 e0       	ldi	r27, 0x04	; 4
    315a:	eb 2e       	mov	r14, r27
    315c:	f1 2c       	mov	r15, r1
    315e:	b7 cf       	rjmp	.-146    	; 0x30ce <main+0x586>
get_descriptor():
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:188
    }
    else {
      switch (_index) {
    3160:	82 30       	cpi	r24, 0x02	; 2
    3162:	f3 e0       	ldi	r31, 0x03	; 3
    3164:	9f 07       	cpc	r25, r31
    3166:	31 f1       	breq	.+76     	; 0x31b4 <main+0x66c>
    3168:	48 f4       	brcc	.+18     	; 0x317c <main+0x634>
    316a:	81 30       	cpi	r24, 0x01	; 1
    316c:	93 40       	sbci	r25, 0x03	; 3
    316e:	09 f4       	brne	.+2      	; 0x3172 <main+0x62a>
    3170:	95 c0       	rjmp	.+298    	; 0x329c <main+0x754>
main():
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:152
    { /* FRAMENUM */ }
  };

  size_t get_descriptor (uint8_t* _buffer, uint16_t _index) {
    uint8_t* _pgmem = 0;
    size_t   _size = 0;
    3172:	f1 2c       	mov	r15, r1
    3174:	e1 2c       	mov	r14, r1
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:151
    },
    { /* FRAMENUM */ }
  };

  size_t get_descriptor (uint8_t* _buffer, uint16_t _index) {
    uint8_t* _pgmem = 0;
    3176:	70 e0       	ldi	r23, 0x00	; 0
    3178:	60 e0       	ldi	r22, 0x00	; 0
    317a:	0b c0       	rjmp	.+22     	; 0x3192 <main+0x64a>
get_descriptor():
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:188
      *_buffer++ = 0x09;
      *_buffer++ = 0x04;
      return _size;
    }
    else {
      switch (_index) {
    317c:	83 30       	cpi	r24, 0x03	; 3
    317e:	98 07       	cpc	r25, r24
    3180:	f9 f0       	breq	.+62     	; 0x31c0 <main+0x678>
main():
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:191
        case 0x0301: _pgmem = (uint8_t*)&vstring; _size = sizeof(vstring); break;
        case 0x0302: _pgmem = (uint8_t*)&mstring; _size = sizeof(mstring); break;
        case 0x0304: _pgmem = (uint8_t*)&istring; _size = sizeof(istring); break;
    3182:	f8 e1       	ldi	r31, 0x18	; 24
    3184:	ef 2e       	mov	r14, r31
    3186:	f1 2c       	mov	r15, r1
    3188:	68 e8       	ldi	r22, 0x88	; 136
    318a:	70 e0       	ldi	r23, 0x00	; 0
get_descriptor():
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:188
      *_buffer++ = 0x09;
      *_buffer++ = 0x04;
      return _size;
    }
    else {
      switch (_index) {
    318c:	84 30       	cpi	r24, 0x04	; 4
    318e:	93 40       	sbci	r25, 0x03	; 3
    3190:	81 f7       	brne	.-32     	; 0x3172 <main+0x62a>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:215
            *_buffer++ = btoh(_c     ); *_buffer++ = 0;
          }
          return 22;
        }
      }
      *_buffer++ = (uint8_t)_size;
    3192:	e0 92 1e 63 	sts	0x631E, r14	; 0x80631e <EP_MEM+0x8>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:216
      *_buffer++ = 3;
    3196:	83 e0       	ldi	r24, 0x03	; 3
    3198:	80 93 1f 63 	sts	0x631F, r24	; 0x80631f <EP_MEM+0x9>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:217
      if (_size) memcpy_P(_buffer, _pgmem, _size - 2);
    319c:	a7 01       	movw	r20, r14
    319e:	42 50       	subi	r20, 0x02	; 2
    31a0:	51 09       	sbc	r21, r1
    31a2:	80 e2       	ldi	r24, 0x20	; 32
    31a4:	93 e6       	ldi	r25, 0x63	; 99
    31a6:	e1 14       	cp	r14, r1
    31a8:	f1 04       	cpc	r15, r1
    31aa:	09 f0       	breq	.+2      	; 0x31ae <main+0x666>
    31ac:	85 c0       	rjmp	.+266    	; 0x32b8 <main+0x770>
    31ae:	30 e0       	ldi	r19, 0x00	; 0
    31b0:	20 e0       	ldi	r18, 0x00	; 0
    31b2:	95 cf       	rjmp	.-214    	; 0x30de <main+0x596>
main():
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:190
      return _size;
    }
    else {
      switch (_index) {
        case 0x0301: _pgmem = (uint8_t*)&vstring; _size = sizeof(vstring); break;
        case 0x0302: _pgmem = (uint8_t*)&mstring; _size = sizeof(mstring); break;
    31b4:	a6 e4       	ldi	r26, 0x46	; 70
    31b6:	ea 2e       	mov	r14, r26
    31b8:	f1 2c       	mov	r15, r1
    31ba:	60 ea       	ldi	r22, 0xA0	; 160
    31bc:	70 e0       	ldi	r23, 0x00	; 0
    31be:	e9 cf       	rjmp	.-46     	; 0x3192 <main+0x64a>
get_descriptor():
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:201
           *
           * If the 4 bytes from offset 4 of the EEPROM are anything other
           * than 0xFFFF:FFFF, use them, otherwise generate a 32-bit random
           * serial number using CRC32 from the factory information.
           */
          uint32_t _sn = ((User_EEP_t*)EEPROM_START)->dwSerialNumber;
    31c0:	40 91 04 14 	lds	r20, 0x1404	; 0x801404 <__TEXT_REGION_LENGTH__+0x7f1404>
    31c4:	50 91 05 14 	lds	r21, 0x1405	; 0x801405 <__TEXT_REGION_LENGTH__+0x7f1405>
    31c8:	60 91 06 14 	lds	r22, 0x1406	; 0x801406 <__TEXT_REGION_LENGTH__+0x7f1406>
    31cc:	70 91 07 14 	lds	r23, 0x1407	; 0x801407 <__TEXT_REGION_LENGTH__+0x7f1407>
    31d0:	49 83       	std	Y+1, r20	; 0x01
    31d2:	5a 83       	std	Y+2, r21	; 0x02
    31d4:	6b 83       	std	Y+3, r22	; 0x03
    31d6:	7c 83       	std	Y+4, r23	; 0x04
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:202
          if (!(_sn + 1)) _sn = crc32((uint8_t*)SIGNATURES_START, 32);
    31d8:	4f 3f       	cpi	r20, 0xFF	; 255
    31da:	ff ef       	ldi	r31, 0xFF	; 255
    31dc:	5f 07       	cpc	r21, r31
    31de:	6f 07       	cpc	r22, r31
    31e0:	7f 07       	cpc	r23, r31
    31e2:	51 f5       	brne	.+84     	; 0x3238 <main+0x6f0>
main():
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/modernAVR/0.2.14/cores/modernAVR/api/cpp/btools.cpp:210
  return _crc;
}

uint32_t crc32 (void* _data, size_t _len) {
  uint32_t _crc = ~0;
  uint8_t* _p = (uint8_t*)_data;
    31e4:	e0 e8       	ldi	r30, 0x80	; 128
    31e6:	f0 e1       	ldi	r31, 0x10	; 16
crc32():
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/modernAVR/0.2.14/cores/modernAVR/api/cpp/btools.cpp:211
  while (_len--) _crc = _crc32_update(_crc, *_p++);
    31e8:	cf 01       	movw	r24, r30
    31ea:	01 96       	adiw	r24, 0x01	; 1
_crc32_update():
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/modernAVR/0.2.14/cores/modernAVR/api/cpp/btools.cpp:201
}

/* x32 + x26 + x23 + x22 + x16 + x12 + x11 + x10 + x8 + x7 + x5 + x4 + x2 + x + 1 */
/* (0xEDB88320 rev) init -1 */
uint32_t _crc32_update (uint32_t _crc, uint8_t _data) {
  _crc ^= _data;
    31ec:	20 81       	ld	r18, Z
    31ee:	42 27       	eor	r20, r18
    31f0:	28 e0       	ldi	r18, 0x08	; 8
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/modernAVR/0.2.14/cores/modernAVR/api/cpp/btools.cpp:203
  for (uint8_t j = 0; j < 8; j++) {
    _crc = (_crc >> 1) ^ (0xEDB88320UL & -(_crc & 1));
    31f2:	6a 01       	movw	r12, r20
    31f4:	7b 01       	movw	r14, r22
    31f6:	f6 94       	lsr	r15
    31f8:	e7 94       	ror	r14
    31fa:	d7 94       	ror	r13
    31fc:	c7 94       	ror	r12
    31fe:	41 70       	andi	r20, 0x01	; 1
    3200:	55 27       	eor	r21, r21
    3202:	66 27       	eor	r22, r22
    3204:	77 27       	eor	r23, r23
    3206:	70 95       	com	r23
    3208:	60 95       	com	r22
    320a:	50 95       	com	r21
    320c:	41 95       	neg	r20
    320e:	5f 4f       	sbci	r21, 0xFF	; 255
    3210:	6f 4f       	sbci	r22, 0xFF	; 255
    3212:	7f 4f       	sbci	r23, 0xFF	; 255
    3214:	40 72       	andi	r20, 0x20	; 32
    3216:	53 78       	andi	r21, 0x83	; 131
    3218:	68 7b       	andi	r22, 0xB8	; 184
    321a:	7d 7e       	andi	r23, 0xED	; 237
    321c:	4c 25       	eor	r20, r12
    321e:	5d 25       	eor	r21, r13
    3220:	6e 25       	eor	r22, r14
    3222:	7f 25       	eor	r23, r15
    3224:	21 50       	subi	r18, 0x01	; 1
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/modernAVR/0.2.14/cores/modernAVR/api/cpp/btools.cpp:202

/* x32 + x26 + x23 + x22 + x16 + x12 + x11 + x10 + x8 + x7 + x5 + x4 + x2 + x + 1 */
/* (0xEDB88320 rev) init -1 */
uint32_t _crc32_update (uint32_t _crc, uint8_t _data) {
  _crc ^= _data;
  for (uint8_t j = 0; j < 8; j++) {
    3226:	29 f7       	brne	.-54     	; 0x31f2 <main+0x6aa>
    3228:	fc 01       	movw	r30, r24
crc32():
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/modernAVR/0.2.14/cores/modernAVR/api/cpp/btools.cpp:211
}

uint32_t crc32 (void* _data, size_t _len) {
  uint32_t _crc = ~0;
  uint8_t* _p = (uint8_t*)_data;
  while (_len--) _crc = _crc32_update(_crc, *_p++);
    322a:	80 3a       	cpi	r24, 0xA0	; 160
    322c:	90 41       	sbci	r25, 0x10	; 16
    322e:	e1 f6       	brne	.-72     	; 0x31e8 <main+0x6a0>
get_descriptor():
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:202
    3230:	49 83       	std	Y+1, r20	; 0x01
    3232:	5a 83       	std	Y+2, r21	; 0x02
    3234:	6b 83       	std	Y+3, r22	; 0x03
    3236:	7c 83       	std	Y+4, r23	; 0x04
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:204
          uint8_t* _p = (uint8_t*)&_sn;
          *_buffer++ = 22;  *_buffer++ = 3;
    3238:	86 e1       	ldi	r24, 0x16	; 22
    323a:	80 93 1e 63 	sts	0x631E, r24	; 0x80631e <EP_MEM+0x8>
    323e:	83 e0       	ldi	r24, 0x03	; 3
    3240:	80 93 1f 63 	sts	0x631F, r24	; 0x80631f <EP_MEM+0x9>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:205
          *_buffer++ = 'M'; *_buffer++ = 0;
    3244:	8d e4       	ldi	r24, 0x4D	; 77
    3246:	80 93 20 63 	sts	0x6320, r24	; 0x806320 <EP_MEM+0xa>
    324a:	10 92 21 63 	sts	0x6321, r1	; 0x806321 <EP_MEM+0xb>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:206
          *_buffer++ = 'X'; *_buffer++ = 0;
    324e:	88 e5       	ldi	r24, 0x58	; 88
    3250:	80 93 22 63 	sts	0x6322, r24	; 0x806322 <EP_MEM+0xc>
    3254:	10 92 23 63 	sts	0x6323, r1	; 0x806323 <EP_MEM+0xd>
    3258:	34 e2       	ldi	r19, 0x24	; 36
    325a:	e3 2e       	mov	r14, r19
    325c:	33 e6       	ldi	r19, 0x63	; 99
    325e:	f3 2e       	mov	r15, r19
    3260:	ce 01       	movw	r24, r28
    3262:	01 96       	adiw	r24, 0x01	; 1
    3264:	6c 01       	movw	r12, r24
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:208
          for (uint8_t _i = 0; _i < 4; _i++) {
            uint8_t _c = *_p++;
    3266:	f6 01       	movw	r30, r12
    3268:	51 90       	ld	r5, Z+
    326a:	6f 01       	movw	r12, r30
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:209
            *_buffer++ = btoh(_c >> 4); *_buffer++ = 0;
    326c:	85 2d       	mov	r24, r5
    326e:	82 95       	swap	r24
    3270:	8f 70       	andi	r24, 0x0F	; 15
    3272:	0e 94 e0 04 	call	0x9c0	; 0x9c0 <btoh>
    3276:	f7 01       	movw	r30, r14
    3278:	80 83       	st	Z, r24
    327a:	11 82       	std	Z+1, r1	; 0x01
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:210
            *_buffer++ = btoh(_c     ); *_buffer++ = 0;
    327c:	85 2d       	mov	r24, r5
    327e:	0e 94 e0 04 	call	0x9c0	; 0x9c0 <btoh>
    3282:	f7 01       	movw	r30, r14
    3284:	82 83       	std	Z+2, r24	; 0x02
    3286:	13 82       	std	Z+3, r1	; 0x03
    3288:	f4 e0       	ldi	r31, 0x04	; 4
    328a:	ef 0e       	add	r14, r31
    328c:	f1 1c       	adc	r15, r1
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:207
          if (!(_sn + 1)) _sn = crc32((uint8_t*)SIGNATURES_START, 32);
          uint8_t* _p = (uint8_t*)&_sn;
          *_buffer++ = 22;  *_buffer++ = 3;
          *_buffer++ = 'M'; *_buffer++ = 0;
          *_buffer++ = 'X'; *_buffer++ = 0;
          for (uint8_t _i = 0; _i < 4; _i++) {
    328e:	2c 14       	cp	r2, r12
    3290:	3d 04       	cpc	r3, r13
    3292:	49 f7       	brne	.-46     	; 0x3266 <main+0x71e>
main():
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:212
            uint8_t _c = *_p++;
            *_buffer++ = btoh(_c >> 4); *_buffer++ = 0;
            *_buffer++ = btoh(_c     ); *_buffer++ = 0;
          }
          return 22;
    3294:	26 e1       	ldi	r18, 0x16	; 22
    3296:	e2 2e       	mov	r14, r18
    3298:	f1 2c       	mov	r15, r1
    329a:	19 cf       	rjmp	.-462    	; 0x30ce <main+0x586>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:189
      *_buffer++ = 0x04;
      return _size;
    }
    else {
      switch (_index) {
        case 0x0301: _pgmem = (uint8_t*)&vstring; _size = sizeof(vstring); break;
    329c:	94 e3       	ldi	r25, 0x34	; 52
    329e:	e9 2e       	mov	r14, r25
    32a0:	f1 2c       	mov	r15, r1
    32a2:	66 ee       	ldi	r22, 0xE6	; 230
    32a4:	70 e0       	ldi	r23, 0x00	; 0
    32a6:	75 cf       	rjmp	.-278    	; 0x3192 <main+0x64a>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:165
      D1PRINTF(" VID:PID=%04X:%04X\r\n", _CAPS16(_buffer[8])->word, _CAPS16(_buffer[10])->word);
      return _size;
    }
    else if (_type == 0x02) {     /* CONFIGURATION */
      _pgmem = (uint8_t*)&current_descriptor;
      _size = sizeof(current_descriptor);
    32a8:	8b e6       	ldi	r24, 0x6B	; 107
    32aa:	e8 2e       	mov	r14, r24
    32ac:	f1 2c       	mov	r15, r1
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:164
      if (_vidpid + 1) _CAPS32(_buffer[8])->dword = _vidpid;
      D1PRINTF(" VID:PID=%04X:%04X\r\n", _CAPS16(_buffer[8])->word, _CAPS16(_buffer[10])->word);
      return _size;
    }
    else if (_type == 0x02) {     /* CONFIGURATION */
      _pgmem = (uint8_t*)&current_descriptor;
    32ae:	6d e3       	ldi	r22, 0x3D	; 61
    32b0:	71 e0       	ldi	r23, 0x01	; 1
get_descriptor():
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:220
      *_buffer++ = (uint8_t)_size;
      *_buffer++ = 3;
      if (_size) memcpy_P(_buffer, _pgmem, _size - 2);
      return _size;
    }
    if (_size) memcpy_P(_buffer, _pgmem, _size);
    32b2:	a7 01       	movw	r20, r14
    32b4:	8e e1       	ldi	r24, 0x1E	; 30
    32b6:	93 e6       	ldi	r25, 0x63	; 99
    32b8:	0e 94 8c 21 	call	0x4318	; 0x4318 <memcpy_P>
    32bc:	08 cf       	rjmp	.-496    	; 0x30ce <main+0x586>
main():
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:169
      _pgmem = (uint8_t*)&current_descriptor;
      _size = sizeof(current_descriptor);
    }
    else if (_type == 0x06) {     /* QUALIFIER */
      _pgmem = (uint8_t*)&qualifier_descriptor;
      _size = sizeof(qualifier_descriptor);
    32be:	ba e0       	ldi	r27, 0x0A	; 10
    32c0:	eb 2e       	mov	r14, r27
    32c2:	f1 2c       	mov	r15, r1
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:168
    else if (_type == 0x02) {     /* CONFIGURATION */
      _pgmem = (uint8_t*)&current_descriptor;
      _size = sizeof(current_descriptor);
    }
    else if (_type == 0x06) {     /* QUALIFIER */
      _pgmem = (uint8_t*)&qualifier_descriptor;
    32c4:	68 ea       	ldi	r22, 0xA8	; 168
    32c6:	71 e0       	ldi	r23, 0x01	; 1
    32c8:	f4 cf       	rjmp	.-24     	; 0x32b2 <main+0x76a>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:173
      _size = sizeof(qualifier_descriptor);
    }
    else if (_type == 0x21) {     /* HID */
      _pgmem = (uint8_t*)&current_descriptor + 18;
      _size = 9;
    32ca:	a9 e0       	ldi	r26, 0x09	; 9
    32cc:	ea 2e       	mov	r14, r26
    32ce:	f1 2c       	mov	r15, r1
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:172
    else if (_type == 0x06) {     /* QUALIFIER */
      _pgmem = (uint8_t*)&qualifier_descriptor;
      _size = sizeof(qualifier_descriptor);
    }
    else if (_type == 0x21) {     /* HID */
      _pgmem = (uint8_t*)&current_descriptor + 18;
    32d0:	6f e4       	ldi	r22, 0x4F	; 79
    32d2:	71 e0       	ldi	r23, 0x01	; 1
    32d4:	ee cf       	rjmp	.-36     	; 0x32b2 <main+0x76a>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:177
      _size = 9;
    }
    else if (_type == 0x22) {     /* REPORT */
      _pgmem = (uint8_t*)&report_descriptor;
      _size = sizeof(report_descriptor);
    32d6:	f3 e2       	ldi	r31, 0x23	; 35
    32d8:	ef 2e       	mov	r14, r31
    32da:	f1 2c       	mov	r15, r1
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:176
    else if (_type == 0x21) {     /* HID */
      _pgmem = (uint8_t*)&current_descriptor + 18;
      _size = 9;
    }
    else if (_type == 0x22) {     /* REPORT */
      _pgmem = (uint8_t*)&report_descriptor;
    32dc:	6a e1       	ldi	r22, 0x1A	; 26
    32de:	71 e0       	ldi	r23, 0x01	; 1
    32e0:	e8 cf       	rjmp	.-48     	; 0x32b2 <main+0x76a>
request_standard():
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:560
      size_t _length = EP_MEM.req_data.wLength;
      size_t _size = get_descriptor((uint8_t*)&EP_MEM.res_data, EP_MEM.req_data.wValue);
      EP_RES.CNT = (_size > _length) ? _length : _size;
      _listen = !!_size;
    }
    else if (bRequest == 0x08) {  /* GET_CONFIGURATION */
    32e2:	88 30       	cpi	r24, 0x08	; 8
    32e4:	c9 f4       	brne	.+50     	; 0x3318 <main+0x7d0>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:561
      EP_MEM.res_data[0] = _set_config;
    32e6:	80 91 30 64 	lds	r24, 0x6430	; 0x806430 <_set_config>
    32ea:	80 93 1e 63 	sts	0x631E, r24	; 0x80631e <EP_MEM+0x8>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:562
      D1PRINTF("<GC:%02X>\r\n", _set_config);
    32ee:	1f 92       	push	r1
    32f0:	8f 93       	push	r24
    32f2:	8a ef       	ldi	r24, 0xFA	; 250
    32f4:	91 e0       	ldi	r25, 0x01	; 1
    32f6:	9f 93       	push	r25
    32f8:	8f 93       	push	r24
    32fa:	1f 93       	push	r17
    32fc:	0f 93       	push	r16
    32fe:	0e 94 29 0a 	call	0x1452	; 0x1452 <Print::printf(PGM_t const*, ...) [clone .constprop.21]>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:563
      EP_RES.CNT = 1;
    3302:	60 92 48 64 	sts	0x6448, r6	; 0x806448 <EP_TABLE+0x12>
    3306:	70 92 49 64 	sts	0x6449, r7	; 0x806449 <EP_TABLE+0x13>
    330a:	0f 90       	pop	r0
    330c:	0f 90       	pop	r0
    330e:	0f 90       	pop	r0
    3310:	0f 90       	pop	r0
    3312:	0f 90       	pop	r0
    3314:	0f 90       	pop	r0
    3316:	96 cd       	rjmp	.-1236   	; 0x2e44 <main+0x2fc>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:565
    }
    else if (bRequest == 0x09) {  /* SET_CONFIGURATION */
    3318:	89 30       	cpi	r24, 0x09	; 9
    331a:	71 f4       	brne	.+28     	; 0x3338 <main+0x7f0>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:567
      /* Once the USB connection is fully initiated, it will go through here. */
      _set_config = (uint8_t)EP_MEM.req_data.wValue;
    331c:	80 91 18 63 	lds	r24, 0x6318	; 0x806318 <EP_MEM+0x2>
    3320:	80 93 30 64 	sts	0x6430, r24	; 0x806430 <_set_config>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:568
      bit_set(GPCONF, GPCONF_USB_bp);
    3324:	e0 9a       	sbi	0x1c, 0	; 28
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:569
      SYS::LED_HeartBeat();
    3326:	0e 94 9f 08 	call	0x113e	; 0x113e <SYS::LED_HeartBeat()>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:570
      D1PRINTF("<SC:%02X>\r\n", _set_config);
    332a:	80 91 30 64 	lds	r24, 0x6430	; 0x806430 <_set_config>
    332e:	1f 92       	push	r1
    3330:	8f 93       	push	r24
    3332:	8e ee       	ldi	r24, 0xEE	; 238
    3334:	91 e0       	ldi	r25, 0x01	; 1
    3336:	7a ce       	rjmp	.-780    	; 0x302c <main+0x4e4>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:573
      EP_RES.CNT = 0;
    }
    else if (bRequest == 0x0A) {  /* GET_INTREFACE */
    3338:	8a 30       	cpi	r24, 0x0A	; 10
    333a:	99 f4       	brne	.+38     	; 0x3362 <main+0x81a>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:575
      /* It seems not to be used. */
      D1PRINTF("<SI:0>\r\n");
    333c:	25 ee       	ldi	r18, 0xE5	; 229
    333e:	31 e0       	ldi	r19, 0x01	; 1
    3340:	3f 93       	push	r19
    3342:	2f 93       	push	r18
    3344:	1f 93       	push	r17
    3346:	0f 93       	push	r16
    3348:	0e 94 29 0a 	call	0x1452	; 0x1452 <Print::printf(PGM_t const*, ...) [clone .constprop.21]>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:576
      EP_MEM.res_data[0] = 0;
    334c:	10 92 1e 63 	sts	0x631E, r1	; 0x80631e <EP_MEM+0x8>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:577
      EP_RES.CNT = 1;
    3350:	60 92 48 64 	sts	0x6448, r6	; 0x806448 <EP_TABLE+0x12>
    3354:	70 92 49 64 	sts	0x6449, r7	; 0x806449 <EP_TABLE+0x13>
request_class():
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:617
        EP_MEM.res_encoding.dwDTERate = 9600UL;
        EP_MEM.res_encoding.bDataBits = 8;
      }
      D1PRINTF(" GLE=");
      D1PRINTHEX(&EP_MEM.res_encoding, sizeof(LineEncoding_t));
      EP_RES.CNT = sizeof(LineEncoding_t);
    3358:	0f 90       	pop	r0
    335a:	0f 90       	pop	r0
    335c:	0f 90       	pop	r0
    335e:	0f 90       	pop	r0
    3360:	71 cd       	rjmp	.-1310   	; 0x2e44 <main+0x2fc>
request_standard():
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:579
      /* It seems not to be used. */
      D1PRINTF("<SI:0>\r\n");
      EP_MEM.res_data[0] = 0;
      EP_RES.CNT = 1;
    }
    else if (bRequest == 0x0B) {  /* SET_INTREFACE */
    3362:	8b 30       	cpi	r24, 0x0B	; 11
    3364:	09 f0       	breq	.+2      	; 0x3368 <main+0x820>
    3366:	c2 ce       	rjmp	.-636    	; 0x30ec <main+0x5a4>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:581
      /* It seems not to be used. */
      D1PRINTF("<GI:%02X>\r\n", EP_MEM.req_data.wValue);
    3368:	80 91 19 63 	lds	r24, 0x6319	; 0x806319 <EP_MEM+0x3>
    336c:	8f 93       	push	r24
    336e:	80 91 18 63 	lds	r24, 0x6318	; 0x806318 <EP_MEM+0x2>
    3372:	8f 93       	push	r24
    3374:	89 ed       	ldi	r24, 0xD9	; 217
    3376:	91 e0       	ldi	r25, 0x01	; 1
    3378:	9f 93       	push	r25
    337a:	59 ce       	rjmp	.-846    	; 0x302e <main+0x4e6>
handling_control_transactions():
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:648
    if (bit_is_clear(bmRequestType, 7)) ep_req_listen();
    bmRequestType &= (3 << 5);
    if (bmRequestType == (0 << 5)) {
      _listen = request_standard();
    }
    else if (bmRequestType == (1 << 5)) {
    337c:	80 32       	cpi	r24, 0x20	; 32
    337e:	09 f0       	breq	.+2      	; 0x3382 <main+0x83a>
    3380:	b5 ce       	rjmp	.-662    	; 0x30ec <main+0x5a4>
request_class():
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:592
    return _listen;
  }

  bool request_class (void) {
    bool _listen = true;
    uint8_t bRequest = EP_MEM.req_data.bRequest;
    3382:	80 91 17 63 	lds	r24, 0x6317	; 0x806317 <EP_MEM+0x1>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:593
    if (bRequest == 0x0A) {       /* SET_IDLE */
    3386:	8a 30       	cpi	r24, 0x0A	; 10
    3388:	61 f4       	brne	.+24     	; 0x33a2 <main+0x85a>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:594
      D1PRINTF(" IDL=%02X\r\n", (uint8_t)EP_MEM.req_data.wValue);
    338a:	80 91 18 63 	lds	r24, 0x6318	; 0x806318 <EP_MEM+0x2>
    338e:	90 91 19 63 	lds	r25, 0x6319	; 0x806319 <EP_MEM+0x3>
    3392:	99 27       	eor	r25, r25
    3394:	9f 93       	push	r25
    3396:	8f 93       	push	r24
    3398:	29 e5       	ldi	r18, 0x59	; 89
    339a:	32 e0       	ldi	r19, 0x02	; 2
    339c:	3f 93       	push	r19
    339e:	2f 93       	push	r18
    33a0:	47 ce       	rjmp	.-882    	; 0x3030 <main+0x4e8>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:597
      EP_RES.CNT = 0;
    }
    else if (bRequest == 0x20) {  /* SET_LINE_ENCODING */
    33a2:	80 32       	cpi	r24, 0x20	; 32
    33a4:	e1 f5       	brne	.+120    	; 0x341e <main+0x8d6>
ep_req_pending():
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:258
    }
  }

  bool is_ep_setup (void) { return bit_is_set(EP_REQ.STATUS, USB_EPSETUP_bp); }
  bool is_not_dap (void) { return bit_is_clear(EP_DPO.STATUS, USB_BUSNAK_bp); }
  void ep_req_pending (void) { loop_until_bit_is_set(EP_REQ.STATUS, USB_BUSNAK_bp); }
    33a6:	80 91 3e 64 	lds	r24, 0x643E	; 0x80643e <EP_TABLE+0x8>
    33aa:	81 ff       	sbrs	r24, 1
    33ac:	fc cf       	rjmp	.-8      	; 0x33a6 <main+0x85e>
set_line_encoding():
/Users/askn/Collaborator/UPDI4AVR-USB/src/usart.cpp:175
      SYS::LED_Flash();
  }

  void set_line_encoding (LineEncoding_t* _buff) {
    /* The USART will not change unless a different setting is given. */
    if (0 == memcmp(&_set_line_encoding, _buff, sizeof(LineEncoding_t))) return;
    33ae:	47 e0       	ldi	r20, 0x07	; 7
    33b0:	50 e0       	ldi	r21, 0x00	; 0
    33b2:	6e e1       	ldi	r22, 0x1E	; 30
    33b4:	73 e6       	ldi	r23, 0x63	; 99
    33b6:	86 e8       	ldi	r24, 0x86	; 134
    33b8:	90 e6       	ldi	r25, 0x60	; 96
    33ba:	0e 94 a2 24 	call	0x4944	; 0x4944 <memcmp>
    33be:	89 2b       	or	r24, r25
    33c0:	91 f0       	breq	.+36     	; 0x33e6 <main+0x89e>
read_drop():
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:466
    }
    return _s != 0;
  }

  void read_drop (void) {
    if (bit_is_set(EP_CDO.STATUS, USB_BUSNAK_bp)) ep_cdo_listen();
    33c2:	80 91 6e 64 	lds	r24, 0x646E	; 0x80646e <EP_TABLE+0x38>
    33c6:	81 fd       	sbrc	r24, 1
    33c8:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <USB::ep_cdo_listen()>
set_line_encoding():
/Users/askn/Collaborator/UPDI4AVR-USB/src/usart.cpp:177
    USB::read_drop();
    USART::setup();
    33cc:	0e 94 be 0f 	call	0x1f7c	; 0x1f7c <USART::setup()>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usart.cpp:178
    memcpy(&_set_line_encoding, _buff, sizeof(LineEncoding_t));
    33d0:	87 e0       	ldi	r24, 0x07	; 7
    33d2:	ee e1       	ldi	r30, 0x1E	; 30
    33d4:	f3 e6       	ldi	r31, 0x63	; 99
    33d6:	a6 e8       	ldi	r26, 0x86	; 134
    33d8:	b0 e6       	ldi	r27, 0x60	; 96
    33da:	01 90       	ld	r0, Z+
    33dc:	0d 92       	st	X+, r0
    33de:	8a 95       	dec	r24
    33e0:	e1 f7       	brne	.-8      	; 0x33da <main+0x892>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usart.cpp:179
    change_vcp();
    33e2:	0e 94 4d 0a 	call	0x149a	; 0x149a <USART::change_vcp()>
request_class():
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:600
      EP_RES.CNT = 0;
    }
    else if (bRequest == 0x20) {  /* SET_LINE_ENCODING */
      ep_req_pending();
      USART::set_line_encoding(&EP_MEM.res_encoding);
      D1PRINTF(" SLE=");
    33e6:	83 e5       	ldi	r24, 0x53	; 83
    33e8:	92 e0       	ldi	r25, 0x02	; 2
    33ea:	9f 93       	push	r25
    33ec:	8f 93       	push	r24
    33ee:	1f 93       	push	r17
    33f0:	0f 93       	push	r16
    33f2:	0e 94 29 0a 	call	0x1452	; 0x1452 <Print::printf(PGM_t const*, ...) [clone .constprop.21]>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:601
      D1PRINTHEX(&_set_line_encoding, sizeof(LineEncoding_t));
    33f6:	67 e0       	ldi	r22, 0x07	; 7
    33f8:	70 e0       	ldi	r23, 0x00	; 0
    33fa:	86 e8       	ldi	r24, 0x86	; 134
    33fc:	90 e6       	ldi	r25, 0x60	; 96
    33fe:	0e 94 b7 09 	call	0x136e	; 0x136e <Print::printHex(void const*, unsigned int, char, unsigned int, char const*) [clone .constprop.18]>
    3402:	0e 94 1d 0a 	call	0x143a	; 0x143a <Print::ln()>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:603
      /* SET_LINE_ENCODING is called whenever a port is opened. */
      bit_set(GPCONF, GPCONF_OPN_bp);
    3406:	e4 9a       	sbi	0x1c, 4	; 28
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:604
      _send_count = 0;
    3408:	10 92 32 64 	sts	0x6432, r1	; 0x806432 <_send_count>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:605
      _recv_count = 0;
    340c:	10 92 31 64 	sts	0x6431, r1	; 0x806431 <_recv_count>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:606
      _sof_count = 0;
    3410:	10 92 2f 64 	sts	0x642F, r1	; 0x80642f <_sof_count>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:607
      EP_RES.CNT = 0;
    3414:	10 92 48 64 	sts	0x6448, r1	; 0x806448 <EP_TABLE+0x12>
    3418:	10 92 49 64 	sts	0x6449, r1	; 0x806449 <EP_TABLE+0x13>
    341c:	9d cf       	rjmp	.-198    	; 0x3358 <main+0x810>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:609
    }
    else if (bRequest == 0x21) {  /* GET_LINE_ENCODING */
    341e:	81 32       	cpi	r24, 0x21	; 33
    3420:	b9 f5       	brne	.+110    	; 0x3490 <main+0x948>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:610
      memcpy(&EP_MEM.res_encoding, &_set_line_encoding, sizeof(LineEncoding_t));
    3422:	87 e0       	ldi	r24, 0x07	; 7
    3424:	e6 e8       	ldi	r30, 0x86	; 134
    3426:	f0 e6       	ldi	r31, 0x60	; 96
    3428:	ae e1       	ldi	r26, 0x1E	; 30
    342a:	b3 e6       	ldi	r27, 0x63	; 99
    342c:	01 90       	ld	r0, Z+
    342e:	0d 92       	st	X+, r0
    3430:	8a 95       	dec	r24
    3432:	e1 f7       	brne	.-8      	; 0x342c <main+0x8e4>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:611
      if (EP_MEM.res_encoding.dwDTERate == 0) {
    3434:	80 91 1e 63 	lds	r24, 0x631E	; 0x80631e <EP_MEM+0x8>
    3438:	90 91 1f 63 	lds	r25, 0x631F	; 0x80631f <EP_MEM+0x9>
    343c:	a0 91 20 63 	lds	r26, 0x6320	; 0x806320 <EP_MEM+0xa>
    3440:	b0 91 21 63 	lds	r27, 0x6321	; 0x806321 <EP_MEM+0xb>
    3444:	89 2b       	or	r24, r25
    3446:	8a 2b       	or	r24, r26
    3448:	8b 2b       	or	r24, r27
    344a:	59 f4       	brne	.+22     	; 0x3462 <main+0x91a>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:612
        EP_MEM.res_encoding.dwDTERate = 9600UL;
    344c:	80 92 1e 63 	sts	0x631E, r8	; 0x80631e <EP_MEM+0x8>
    3450:	90 92 1f 63 	sts	0x631F, r9	; 0x80631f <EP_MEM+0x9>
    3454:	a0 92 20 63 	sts	0x6320, r10	; 0x806320 <EP_MEM+0xa>
    3458:	b0 92 21 63 	sts	0x6321, r11	; 0x806321 <EP_MEM+0xb>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:613
        EP_MEM.res_encoding.bDataBits = 8;
    345c:	88 e0       	ldi	r24, 0x08	; 8
    345e:	80 93 24 63 	sts	0x6324, r24	; 0x806324 <EP_MEM+0xe>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:615
      }
      D1PRINTF(" GLE=");
    3462:	2d e4       	ldi	r18, 0x4D	; 77
    3464:	32 e0       	ldi	r19, 0x02	; 2
    3466:	3f 93       	push	r19
    3468:	2f 93       	push	r18
    346a:	1f 93       	push	r17
    346c:	0f 93       	push	r16
    346e:	0e 94 29 0a 	call	0x1452	; 0x1452 <Print::printf(PGM_t const*, ...) [clone .constprop.21]>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:616
      D1PRINTHEX(&EP_MEM.res_encoding, sizeof(LineEncoding_t));
    3472:	67 e0       	ldi	r22, 0x07	; 7
    3474:	70 e0       	ldi	r23, 0x00	; 0
    3476:	8e e1       	ldi	r24, 0x1E	; 30
    3478:	93 e6       	ldi	r25, 0x63	; 99
    347a:	0e 94 b7 09 	call	0x136e	; 0x136e <Print::printHex(void const*, unsigned int, char, unsigned int, char const*) [clone .constprop.18]>
    347e:	0e 94 1d 0a 	call	0x143a	; 0x143a <Print::ln()>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:617
      EP_RES.CNT = sizeof(LineEncoding_t);
    3482:	87 e0       	ldi	r24, 0x07	; 7
    3484:	90 e0       	ldi	r25, 0x00	; 0
    3486:	80 93 48 64 	sts	0x6448, r24	; 0x806448 <EP_TABLE+0x12>
    348a:	90 93 49 64 	sts	0x6449, r25	; 0x806449 <EP_TABLE+0x13>
    348e:	64 cf       	rjmp	.-312    	; 0x3358 <main+0x810>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:619
    }
    else if (bRequest == 0x22) {  /* SET_LINE_STATE */
    3490:	82 32       	cpi	r24, 0x22	; 34
    3492:	71 f5       	brne	.+92     	; 0x34f0 <main+0x9a8>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:620
      D1PRINTF(" SLS=%02X\r\n", (uint8_t)EP_MEM.req_data.wValue);
    3494:	80 91 18 63 	lds	r24, 0x6318	; 0x806318 <EP_MEM+0x2>
    3498:	90 91 19 63 	lds	r25, 0x6319	; 0x806319 <EP_MEM+0x3>
    349c:	99 27       	eor	r25, r25
    349e:	9f 93       	push	r25
    34a0:	8f 93       	push	r24
    34a2:	81 e4       	ldi	r24, 0x41	; 65
    34a4:	92 e0       	ldi	r25, 0x02	; 2
    34a6:	9f 93       	push	r25
    34a8:	8f 93       	push	r24
    34aa:	1f 93       	push	r17
    34ac:	0f 93       	push	r16
    34ae:	0e 94 29 0a 	call	0x1452	; 0x1452 <Print::printf(PGM_t const*, ...) [clone .constprop.21]>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:621
      USART::set_line_state((uint8_t)EP_MEM.req_data.wValue);
    34b2:	80 91 18 63 	lds	r24, 0x6318	; 0x806318 <EP_MEM+0x2>
set_line_state():
/Users/askn/Collaborator/UPDI4AVR-USB/src/usart.cpp:191
  void set_line_state (uint8_t _line_state) {

    /* If a physical port exists, it reflects DTR/RTS. */

  #if defined(PIN_VCP_DTR)
    if (bit_is_set(_line_state, 0))
    34b6:	0f 90       	pop	r0
    34b8:	0f 90       	pop	r0
    34ba:	0f 90       	pop	r0
    34bc:	0f 90       	pop	r0
    34be:	0f 90       	pop	r0
    34c0:	0f 90       	pop	r0
    34c2:	98 2f       	mov	r25, r24
    34c4:	91 70       	andi	r25, 0x01	; 1
    34c6:	80 ff       	sbrs	r24, 0
    34c8:	0f c0       	rjmp	.+30     	; 0x34e8 <main+0x9a0>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usart.cpp:192
      digitalWriteMacro(PIN_VCP_DTR, LOW);
    34ca:	6c 98       	cbi	0x0d, 4	; 13
/Users/askn/Collaborator/UPDI4AVR-USB/src/usart.cpp:198
    else
      digitalWriteMacro(PIN_VCP_DTR, HIGH);
  #endif

  #if defined(PIN_VCP_RTS)
    if (bit_is_set(_line_state, 1))
    34cc:	81 ff       	sbrs	r24, 1
    34ce:	0e c0       	rjmp	.+28     	; 0x34ec <main+0x9a4>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usart.cpp:199
      digitalWriteMacro(PIN_VCP_RTS, LOW);
    34d0:	6d 98       	cbi	0x0d, 5	; 13
/Users/askn/Collaborator/UPDI4AVR-USB/src/usart.cpp:206
      digitalWriteMacro(PIN_VCP_RTS, HIGH);
  #endif

  #if defined(CONFIG_VCP_DTR_RESET)
    /* If DTR is set, the device will reboot assuming the host has opened the port. */
    if (!_set_line_state.bStateDTR && bit_is_set(_line_state, 0)) {
    34d2:	20 91 84 60 	lds	r18, 0x6084	; 0x806084 <__data_end>
    34d6:	20 fd       	sbrc	r18, 0
    34d8:	04 c0       	rjmp	.+8      	; 0x34e2 <main+0x99a>
    34da:	99 23       	and	r25, r25
    34dc:	11 f0       	breq	.+4      	; 0x34e2 <main+0x99a>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usart.cpp:207
      bit_set(GPCONF, GPCONF_FAL_bp);
    34de:	e7 9a       	sbi	0x1c, 7	; 28
/Users/askn/Collaborator/UPDI4AVR-USB/src/usart.cpp:208
      bit_set(GPCONF, GPCONF_RIS_bp);
    34e0:	e6 9a       	sbi	0x1c, 6	; 28
/Users/askn/Collaborator/UPDI4AVR-USB/src/usart.cpp:212
    }
  #endif

    _set_line_state.bValue = _line_state;
    34e2:	80 93 84 60 	sts	0x6084, r24	; 0x806084 <__data_end>
    34e6:	6d cd       	rjmp	.-1318   	; 0x2fc2 <main+0x47a>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usart.cpp:194

  #if defined(PIN_VCP_DTR)
    if (bit_is_set(_line_state, 0))
      digitalWriteMacro(PIN_VCP_DTR, LOW);
    else
      digitalWriteMacro(PIN_VCP_DTR, HIGH);
    34e8:	6c 9a       	sbi	0x0d, 4	; 13
    34ea:	f0 cf       	rjmp	.-32     	; 0x34cc <main+0x984>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usart.cpp:201

  #if defined(PIN_VCP_RTS)
    if (bit_is_set(_line_state, 1))
      digitalWriteMacro(PIN_VCP_RTS, LOW);
    else
      digitalWriteMacro(PIN_VCP_RTS, HIGH);
    34ec:	6d 9a       	sbi	0x0d, 5	; 13
    34ee:	f1 cf       	rjmp	.-30     	; 0x34d2 <main+0x98a>
request_class():
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:624
      EP_RES.CNT = 0;
    }
    else if (bRequest == 0x23) {  /* SET_SEND_BREAK */
    34f0:	83 32       	cpi	r24, 0x23	; 35
    34f2:	09 f0       	breq	.+2      	; 0x34f6 <main+0x9ae>
    34f4:	fb cd       	rjmp	.-1034   	; 0x30ec <main+0x5a4>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:625
      D1PRINTF(" SB=%04X\r\n", EP_MEM.req_data.wValue);
    34f6:	80 91 19 63 	lds	r24, 0x6319	; 0x806319 <EP_MEM+0x3>
    34fa:	8f 93       	push	r24
    34fc:	80 91 18 63 	lds	r24, 0x6318	; 0x806318 <EP_MEM+0x2>
    3500:	8f 93       	push	r24
    3502:	26 e3       	ldi	r18, 0x36	; 54
    3504:	32 e0       	ldi	r19, 0x02	; 2
    3506:	3f 93       	push	r19
    3508:	2f 93       	push	r18
    350a:	1f 93       	push	r17
    350c:	0f 93       	push	r16
    350e:	0e 94 29 0a 	call	0x1452	; 0x1452 <Print::printf(PGM_t const*, ...) [clone .constprop.21]>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:626
      _send_break = EP_MEM.req_data.wValue;
    3512:	80 91 18 63 	lds	r24, 0x6318	; 0x806318 <EP_MEM+0x2>
    3516:	90 91 19 63 	lds	r25, 0x6319	; 0x806319 <EP_MEM+0x3>
    351a:	80 93 33 64 	sts	0x6433, r24	; 0x806433 <_send_break>
    351e:	90 93 34 64 	sts	0x6434, r25	; 0x806434 <_send_break+0x1>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:627
      if (_send_break) break_on();
    3522:	0f 90       	pop	r0
    3524:	0f 90       	pop	r0
    3526:	0f 90       	pop	r0
    3528:	0f 90       	pop	r0
    352a:	0f 90       	pop	r0
    352c:	0f 90       	pop	r0
    352e:	89 2b       	or	r24, r25
    3530:	71 f0       	breq	.+28     	; 0x354e <main+0xa06>
break_on():
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:373
    ep_dpo_listen();  /* continue transaction */
  }

  void break_on (void) {
    if (bit_is_set(GPCONF, GPCONF_VCP_bp)
     && bit_is_clear(GPCONF, GPCONF_BRK_bp)) {
    3532:	e1 9b       	sbis	0x1c, 1	; 28
    3534:	0a c0       	rjmp	.+20     	; 0x354a <main+0xa02>
    3536:	e3 99       	sbic	0x1c, 3	; 28
    3538:	08 c0       	rjmp	.+16     	; 0x354a <main+0xa02>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:375
      /* SET_SEND_BREAK is called when the port is closed successfully. */
      bit_clear(GPCONF, GPCONF_OPN_bp);
    353a:	e4 98       	cbi	0x1c, 4	; 28
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:376
      _sof_count = 0;
    353c:	10 92 2f 64 	sts	0x642F, r1	; 0x80642f <_sof_count>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:377
      USART::disable_vcp();
    3540:	0e 94 96 0f 	call	0x1f2c	; 0x1f2c <USART::disable_vcp()>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:380
  #ifdef CONFIG_VCP_TXD_ODM
      /* During Break, VCP-TxD is pulled LOW. */
      pinModeMacro(PIN_VCP_TXD, OUTPUT);
    3544:	02 9a       	sbi	0x00, 2	; 0
    3546:	10 92 12 04 	sts	0x0412, r1	; 0x800412 <__TEXT_REGION_LENGTH__+0x7f0412>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:383
  #endif
    }
    bit_set(GPCONF, GPCONF_BRK_bp);
    354a:	e3 9a       	sbi	0x1c, 3	; 28
    354c:	3a cd       	rjmp	.-1420   	; 0x2fc2 <main+0x47a>
request_class():
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:628
    }
    else if (bRequest == 0x23) {  /* SET_SEND_BREAK */
      D1PRINTF(" SB=%04X\r\n", EP_MEM.req_data.wValue);
      _send_break = EP_MEM.req_data.wValue;
      if (_send_break) break_on();
      else break_off();
    354e:	0e 94 12 0b 	call	0x1624	; 0x1624 <USB::break_off()>
    3552:	37 cd       	rjmp	.-1426   	; 0x2fc2 <main+0x47a>
main():
/Users/askn/Collaborator/UPDI4AVR-USB/src/main.cpp:122
    /*** USB control handling ***/
    USB::handling_bus_events();
    if (USB::is_ep_setup()) USB::handling_control_transactions();

    if      (bit_is_set(GPCONF, GPCONF_FAL_bp)) SYS::reset_enter();
    else if (bit_is_set(GPCONF, GPCONF_RIS_bp)) SYS::reset_leave();
    3554:	e6 9b       	sbis	0x1c, 6	; 28
    3556:	ae cc       	rjmp	.-1700   	; 0x2eb4 <main+0x36c>
reset_leave():
/Users/askn/Collaborator/UPDI4AVR-USB/src/sys.cpp:259
   * This will be executed when SW0 is released.
   * If the VCP is operating, it will return to normal operation,
   * but if the USB is stopped, it will reboot at the end.
   */
  void reset_leave (void) {
    if (bit_is_set(PGCONF, PGCONF_UPDI_bp)) return;
    3558:	e8 99       	sbic	0x1d, 0	; 29
    355a:	ac cc       	rjmp	.-1704   	; 0x2eb4 <main+0x36c>
/Users/askn/Collaborator/UPDI4AVR-USB/src/sys.cpp:260
    if (_jtag_arch == 5) {
    355c:	80 91 98 60 	lds	r24, 0x6098	; 0x806098 <_jtag_arch>
    3560:	85 30       	cpi	r24, 0x05	; 5
    3562:	21 f4       	brne	.+8      	; 0x356c <main+0xa24>
/Users/askn/Collaborator/UPDI4AVR-USB/src/sys.cpp:261
      _updi_bitmap[10] = 0x00; /* SYSRUN */
    3564:	10 92 24 60 	sts	0x6024, r1	; 0x806024 <SYS::_updi_bitmap+0xa>
/Users/askn/Collaborator/UPDI4AVR-USB/src/sys.cpp:262
      send_bitmap(_updi_bitmap, sizeof(_updi_bitmap) * 8);
    3568:	0e 94 b2 04 	call	0x964	; 0x964 <SYS::send_bitmap(unsigned char const*, unsigned int) [clone .constprop.9]>
/Users/askn/Collaborator/UPDI4AVR-USB/src/sys.cpp:264
    }
    openDrainWriteMacro(PIN_PG_TRST, HIGH);
    356c:	01 98       	cbi	0x00, 1	; 0
delay_millis():
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/modernAVR/0.2.14/cores/modernAVR/api/delay_busywait.h:42
    356e:	ff e7       	ldi	r31, 0x7F	; 127
    3570:	2a e1       	ldi	r18, 0x1A	; 26
    3572:	36 e0       	ldi	r19, 0x06	; 6
    3574:	f1 50       	subi	r31, 0x01	; 1
    3576:	20 40       	sbci	r18, 0x00	; 0
    3578:	30 40       	sbci	r19, 0x00	; 0
    357a:	e1 f7       	brne	.-8      	; 0x3574 <main+0xa2c>
    357c:	00 c0       	rjmp	.+0      	; 0x357e <main+0xa36>
    357e:	00 00       	nop
reset_leave():
/Users/askn/Collaborator/UPDI4AVR-USB/src/sys.cpp:269
  #ifdef CONFIG_VCP_DTR_RESET
    /* A delay of 64ms or more between when the bootloader starts and when RxD opens. */
    delay_millis(100);
  #endif
    D1PRINTF("<RST:OUT>\r\n");
    3580:	84 ea       	ldi	r24, 0xA4	; 164
    3582:	92 e0       	ldi	r25, 0x02	; 2
    3584:	9f 93       	push	r25
    3586:	8f 93       	push	r24
    3588:	1f 93       	push	r17
    358a:	0f 93       	push	r16
    358c:	0e 94 29 0a 	call	0x1452	; 0x1452 <Print::printf(PGM_t const*, ...) [clone .constprop.21]>
/Users/askn/Collaborator/UPDI4AVR-USB/src/sys.cpp:270
    if (bit_is_set(GPCONF, GPCONF_USB_bp))
    3590:	0f 90       	pop	r0
    3592:	0f 90       	pop	r0
    3594:	0f 90       	pop	r0
    3596:	0f 90       	pop	r0
    3598:	e0 9b       	sbis	0x1c, 0	; 28
    359a:	05 c0       	rjmp	.+10     	; 0x35a6 <main+0xa5e>
/Users/askn/Collaborator/UPDI4AVR-USB/src/sys.cpp:271
      LED_HeartBeat();
    359c:	0e 94 9f 08 	call	0x113e	; 0x113e <SYS::LED_HeartBeat()>
/Users/askn/Collaborator/UPDI4AVR-USB/src/sys.cpp:276
    else if (!USB0_ADDR)
      reboot();
    else
      LED_Flash();
    bit_clear(GPCONF, GPCONF_FAL_bp);
    35a0:	e7 98       	cbi	0x1c, 7	; 28
/Users/askn/Collaborator/UPDI4AVR-USB/src/sys.cpp:277
    bit_clear(GPCONF, GPCONF_RIS_bp);
    35a2:	e6 98       	cbi	0x1c, 6	; 28
    35a4:	87 cc       	rjmp	.-1778   	; 0x2eb4 <main+0x36c>
/Users/askn/Collaborator/UPDI4AVR-USB/src/sys.cpp:272
    delay_millis(100);
  #endif
    D1PRINTF("<RST:OUT>\r\n");
    if (bit_is_set(GPCONF, GPCONF_USB_bp))
      LED_HeartBeat();
    else if (!USB0_ADDR)
    35a6:	80 91 03 0c 	lds	r24, 0x0C03	; 0x800c03 <__TEXT_REGION_LENGTH__+0x7f0c03>
    35aa:	81 11       	cpse	r24, r1
    35ac:	03 c0       	rjmp	.+6      	; 0x35b4 <main+0xa6c>
/Users/askn/Collaborator/UPDI4AVR-USB/src/sys.cpp:273
      reboot();
    35ae:	0e 94 80 0e 	call	0x1d00	; 0x1d00 <SYS::reboot()>
    35b2:	f6 cf       	rjmp	.-20     	; 0x35a0 <main+0xa58>
/Users/askn/Collaborator/UPDI4AVR-USB/src/sys.cpp:275
    else
      LED_Flash();
    35b4:	0e 94 8a 08 	call	0x1114	; 0x1114 <SYS::LED_Flash()>
    35b8:	f3 cf       	rjmp	.-26     	; 0x35a0 <main+0xa58>
read_byte():
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:443
    else ep_cdi_listen();
  }

  uint8_t read_byte (void) {
    uint8_t _c = 0;
    if (EP_CDO.CNT != _recv_count) {
    35ba:	40 91 70 64 	lds	r20, 0x6470	; 0x806470 <EP_TABLE+0x3a>
    35be:	50 91 71 64 	lds	r21, 0x6471	; 0x806471 <EP_TABLE+0x3b>
    35c2:	28 2f       	mov	r18, r24
    35c4:	30 e0       	ldi	r19, 0x00	; 0
main():
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:442
    if (_send_count < 64) _sof_count = 30;
    else ep_cdi_listen();
  }

  uint8_t read_byte (void) {
    uint8_t _c = 0;
    35c6:	f1 2c       	mov	r15, r1
read_byte():
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:443
    if (EP_CDO.CNT != _recv_count) {
    35c8:	42 17       	cp	r20, r18
    35ca:	53 07       	cpc	r21, r19
    35cc:	39 f0       	breq	.+14     	; 0x35dc <main+0xa94>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:450
      if (_recv_count == 0) {
        D2PRINTF(" VO=%02X:", EP_CDO.CNT);
        D2PRINTHEX(&EP_MEM.cdo_data, EP_CDO.CNT);
      }
  #endif
      _c = EP_MEM.cdo_data[_recv_count++];
    35ce:	8f 5f       	subi	r24, 0xFF	; 255
    35d0:	80 93 31 64 	sts	0x6431, r24	; 0x806431 <_recv_count>
    35d4:	22 59       	subi	r18, 0x92	; 146
    35d6:	3c 49       	sbci	r19, 0x9C	; 156
    35d8:	f9 01       	movw	r30, r18
    35da:	f0 80       	ld	r15, Z
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:452
    }
    if (EP_CDO.CNT == _recv_count) ep_cdo_listen();
    35dc:	80 91 70 64 	lds	r24, 0x6470	; 0x806470 <EP_TABLE+0x3a>
    35e0:	90 91 71 64 	lds	r25, 0x6471	; 0x806471 <EP_TABLE+0x3b>
    35e4:	20 91 31 64 	lds	r18, 0x6431	; 0x806431 <_recv_count>
    35e8:	28 17       	cp	r18, r24
    35ea:	19 06       	cpc	r1, r25
    35ec:	11 f4       	brne	.+4      	; 0x35f2 <main+0xaaa>
    35ee:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <USB::ep_cdo_listen()>
vcp_transceiver():
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:503
  #if defined(CONFIG_VCP_CTS_ENABLE)
     && !digitalReadMacro(PIN_VCP_CTS)
  #endif
     && bit_is_set(USART0_STATUS, USART_DREIF_bp)
     && read_available()) {
      USART0_TXDATAL = read_byte();
    35f2:	f0 92 02 08 	sts	0x0802, r15	; 0x800802 <__TEXT_REGION_LENGTH__+0x7f0802>
    35f6:	78 cc       	rjmp	.-1808   	; 0x2ee8 <main+0x3a0>
read_drop():
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:466
    }
    return _s != 0;
  }

  void read_drop (void) {
    if (bit_is_set(EP_CDO.STATUS, USB_BUSNAK_bp)) ep_cdo_listen();
    35f8:	80 91 6e 64 	lds	r24, 0x646E	; 0x80646e <EP_TABLE+0x38>
    35fc:	81 ff       	sbrs	r24, 1
    35fe:	74 cc       	rjmp	.-1816   	; 0x2ee8 <main+0x3a0>
    3600:	71 cc       	rjmp	.-1822   	; 0x2ee4 <main+0x39c>
cci_break_count():
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:404
        _send_break -= USB_CCI_INTERVAL;
        if (bit_is_set(EP_CCI.STATUS, USB_BUSNAK_bp))
          ep_cci_listen();
      }
      else {
        _send_break = 0;
    3602:	10 92 33 64 	sts	0x6433, r1	; 0x806433 <_send_break>
    3606:	10 92 34 64 	sts	0x6434, r1	; 0x806434 <_send_break+0x1>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:405
        break_off();
    360a:	0e 94 12 0b 	call	0x1624	; 0x1624 <USB::break_off()>
    360e:	86 cc       	rjmp	.-1780   	; 0x2f1c <main+0x3d4>
dap_command_check():
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:67
     * A maximum of 15 chunks is possible,
     * resulting in a maximum payload length of 900 bytes.
     */
    if (_cmd == 0x80) {             /* DAP_EDBG_VENDOR_AVR_CMD */
      uint8_t _endf = _sub & 0x0F;
      uint8_t _frag = _sub >> 4;
    3610:	90 e0       	ldi	r25, 0x00	; 0
    3612:	e4 e0       	ldi	r30, 0x04	; 4
    3614:	95 95       	asr	r25
    3616:	87 95       	ror	r24
    3618:	ea 95       	dec	r30
    361a:	e1 f7       	brne	.-8      	; 0x3614 <main+0xacc>
    361c:	58 2e       	mov	r5, r24
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:68
      uint8_t _size = EP_MEM.dap_data[3];
    361e:	c0 90 31 63 	lds	r12, 0x6331	; 0x806331 <EP_MEM+0x1b>
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:77
        D1PRINTF("<EDBG_FAIL>\r\n");
        EP_MEM.dap_data[1] = 0x00;  /* EDBG_RSP_FAIL */
      }
      else {
        /* Detect the first chunk. */
        if (_frag == 1) _packet_chunks = 0;
    3622:	31 e0       	ldi	r19, 0x01	; 1
    3624:	83 13       	cpse	r24, r19
    3626:	02 c0       	rjmp	.+4      	; 0x362c <main+0xae4>
    3628:	10 92 94 60 	sts	0x6094, r1	; 0x806094 <__bss_end>
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:69
     */
    if (_cmd == 0x80) {             /* DAP_EDBG_VENDOR_AVR_CMD */
      uint8_t _endf = _sub & 0x0F;
      uint8_t _frag = _sub >> 4;
      uint8_t _size = EP_MEM.dap_data[3];
      size_t  _ofst = (_frag - 1) * 60;
    362c:	01 97       	sbiw	r24, 0x01	; 1
    362e:	2c e3       	ldi	r18, 0x3C	; 60
    3630:	28 9f       	mul	r18, r24
    3632:	70 01       	movw	r14, r0
    3634:	29 9f       	mul	r18, r25
    3636:	f0 0c       	add	r15, r0
    3638:	11 24       	eor	r1, r1
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:78
        EP_MEM.dap_data[1] = 0x00;  /* EDBG_RSP_FAIL */
      }
      else {
        /* Detect the first chunk. */
        if (_frag == 1) _packet_chunks = 0;
        ++_packet_chunks;
    363a:	70 90 94 60 	lds	r7, 0x6094	; 0x806094 <__bss_end>
    363e:	73 94       	inc	r7
    3640:	70 92 94 60 	sts	0x6094, r7	; 0x806094 <__bss_end>
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:79
        memcpy(&packet.rawData[_ofst], &EP_MEM.dap_data[4], _size);
    3644:	d1 2c       	mov	r13, r1
    3646:	a6 01       	movw	r20, r12
    3648:	62 e3       	ldi	r22, 0x32	; 50
    364a:	73 e6       	ldi	r23, 0x63	; 99
    364c:	c7 01       	movw	r24, r14
    364e:	82 53       	subi	r24, 0x32	; 50
    3650:	9f 49       	sbci	r25, 0x9F	; 159
    3652:	0e 94 af 24 	call	0x495e	; 0x495e <memcpy>
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:80
        EP_MEM.dap_data[1] = 0x01;  /* EDBG_RSP_OK */
    3656:	81 e0       	ldi	r24, 0x01	; 1
    3658:	80 93 2f 63 	sts	0x632F, r24	; 0x80632f <EP_MEM+0x19>
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:82
        D3PRINTHEX(&EP_MEM.dap_data, _size + 4);
        if (_endf == _frag) {       /* end of defragment */
    365c:	65 14       	cp	r6, r5
    365e:	11 f0       	breq	.+4      	; 0x3664 <main+0xb1c>
main():
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:51
  /*
   * Command numbers 0x80 and above are vendor extensions, EDBG Payload uses 0x80 and x81.
   * Additionally, 0x82 is reserved for device event notification.
   */
  bool dap_command_check (void) {
    bool _result = false;
    3660:	e1 2c       	mov	r14, r1
    3662:	0c c0       	rjmp	.+24     	; 0x367c <main+0xb34>
dap_command_check():
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:83
        ++_packet_chunks;
        memcpy(&packet.rawData[_ofst], &EP_MEM.dap_data[4], _size);
        EP_MEM.dap_data[1] = 0x01;  /* EDBG_RSP_OK */
        D3PRINTHEX(&EP_MEM.dap_data, _size + 4);
        if (_endf == _frag) {       /* end of defragment */
          _packet_length = _ofst + _size;
    3664:	ec 0c       	add	r14, r12
    3666:	fd 1c       	adc	r15, r13
    3668:	e0 92 9c 60 	sts	0x609C, r14	; 0x80609c <_packet_length>
    366c:	f0 92 9d 60 	sts	0x609D, r15	; 0x80609d <_packet_length+0x1>
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:86
          D2PRINTF(" SQ=%03X:%03X<", packet.out.sequence, _packet_length);
          D2PRINTHEX(&packet, _packet_length);
          if (_packet_chunks == _endf) {
    3670:	67 10       	cpse	r6, r7
    3672:	9e c0       	rjmp	.+316    	; 0x37b0 <main+0xc68>
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:89
            /* True if an EDBG Payload is received. */
            D2PRINTF("<EDBG_OK>\r\n");
            _packet_endfrag = 0;
    3674:	10 92 99 60 	sts	0x6099, r1	; 0x806099 <_packet_endfrag>
main():
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:90
            _result = true;
    3678:	ee 24       	eor	r14, r14
    367a:	e3 94       	inc	r14
ep_dpi_listen():
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:279
    loop_until_bit_is_clear(USB0_INTFLAGSB, USB_RMWBUSY_bp);
    USB_EP_STATUS_CLR(USB_EP_RES) = ~USB_TOGGLE_bm;
  }

  void ep_dpi_listen (void) {
    EP_DPI.CNT = 64;
    367c:	80 e4       	ldi	r24, 0x40	; 64
    367e:	90 e0       	ldi	r25, 0x00	; 0
    3680:	80 93 58 64 	sts	0x6458, r24	; 0x806458 <EP_TABLE+0x22>
    3684:	90 93 59 64 	sts	0x6459, r25	; 0x806459 <EP_TABLE+0x23>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:280
    EP_DPI.MCNT = 0;
    3688:	10 92 5c 64 	sts	0x645C, r1	; 0x80645c <EP_TABLE+0x26>
    368c:	10 92 5d 64 	sts	0x645D, r1	; 0x80645d <EP_TABLE+0x27>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:281
    loop_until_bit_is_clear(USB0_INTFLAGSB, USB_RMWBUSY_bp);
    3690:	80 91 0b 0c 	lds	r24, 0x0C0B	; 0x800c0b <__TEXT_REGION_LENGTH__+0x7f0c0b>
    3694:	82 fd       	sbrc	r24, 2
    3696:	fc cf       	rjmp	.-8      	; 0x3690 <main+0xb48>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:282
    USB_EP_STATUS_CLR(USB_EP_DPI) = ~USB_TOGGLE_bm;
    3698:	8e ef       	ldi	r24, 0xFE	; 254
    369a:	80 93 46 0c 	sts	0x0C46, r24	; 0x800c46 <__TEXT_REGION_LENGTH__+0x7f0c46>
ep_dpo_listen():
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:286
  }

  void ep_dpo_listen (void) {
    EP_DPO.CNT = 0;
    369e:	10 92 60 64 	sts	0x6460, r1	; 0x806460 <EP_TABLE+0x2a>
    36a2:	10 92 61 64 	sts	0x6461, r1	; 0x806461 <EP_TABLE+0x2b>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:287
    loop_until_bit_is_clear(USB0_INTFLAGSB, USB_RMWBUSY_bp);
    36a6:	80 91 0b 0c 	lds	r24, 0x0C0B	; 0x800c0b <__TEXT_REGION_LENGTH__+0x7f0c0b>
    36aa:	82 fd       	sbrc	r24, 2
    36ac:	fc cf       	rjmp	.-8      	; 0x36a6 <main+0xb5e>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usb.cpp:288
    USB_EP_STATUS_CLR(USB_EP_DPO) = ~USB_TOGGLE_bm;
    36ae:	8e ef       	ldi	r24, 0xFE	; 254
    36b0:	80 93 48 0c 	sts	0x0C48, r24	; 0x800c48 <__TEXT_REGION_LENGTH__+0x7f0c48>
main():
/Users/askn/Collaborator/UPDI4AVR-USB/src/main.cpp:141

    /*** If CMSIS-DAP is not received, return to the top. ***/
    if (USB::is_not_dap()) continue;

    /*** CMSIS-DAP and JTAG3 packet receiver ***/
    if (JTAG::dap_command_check()) JTAG::jtag_scope_branch();
    36b4:	ee 20       	and	r14, r14
    36b6:	09 f4       	brne	.+2      	; 0x36ba <main+0xb72>
    36b8:	33 cb       	rjmp	.-2458   	; 0x2d20 <main+0x1d8>
jtag_scope_branch():
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:376

  /* Processing branches depending on the scope specifier. */
  /* Currently, four types of scope are known: */
  void jtag_scope_branch (void) {
    size_t _rspsize = 0;
    uint8_t _scope  = packet.out.scope;
    36ba:	f0 90 d2 60 	lds	r15, 0x60D2	; 0x8060d2 <packet+0x4>
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:377
    D1PRINTF("SCOPE=%02X,C=%02X,S=%02X,L=%02X\r\n",
    36be:	80 91 d6 60 	lds	r24, 0x60D6	; 0x8060d6 <packet+0x8>
    36c2:	1f 92       	push	r1
    36c4:	8f 93       	push	r24
    36c6:	80 91 d5 60 	lds	r24, 0x60D5	; 0x8060d5 <packet+0x7>
    36ca:	1f 92       	push	r1
    36cc:	8f 93       	push	r24
    36ce:	80 91 d3 60 	lds	r24, 0x60D3	; 0x8060d3 <packet+0x5>
    36d2:	1f 92       	push	r1
    36d4:	8f 93       	push	r24
    36d6:	1f 92       	push	r1
    36d8:	ff 92       	push	r15
    36da:	81 e6       	ldi	r24, 0x61	; 97
    36dc:	96 e0       	ldi	r25, 0x06	; 6
    36de:	9f 93       	push	r25
    36e0:	8f 93       	push	r24
    36e2:	1f 93       	push	r17
    36e4:	0f 93       	push	r16
    36e6:	0e 94 29 0a 	call	0x1452	; 0x1452 <Print::printf(PGM_t const*, ...) [clone .constprop.21]>
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:382
      _scope,
      packet.out.cmd,
      packet.out.section,
      packet.out.index);
    if      (_scope == 0x01) _rspsize = jtag_scope_general();       /* SCOPE_GENERAL */
    36ea:	cd bf       	out	0x3d, r28	; 61
    36ec:	de bf       	out	0x3e, r29	; 62
    36ee:	91 e0       	ldi	r25, 0x01	; 1
    36f0:	f9 12       	cpse	r15, r25
    36f2:	68 c1       	rjmp	.+720    	; 0x39c4 <main+0xe7c>
jtag_scope_general():
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:175
  }

  /*** Only a subset of JTAGICE3 commands are implemented. ***/
  size_t jtag_scope_general (void) {
    size_t  _rspsize = 0;
    uint8_t _cmd     = packet.out.cmd;
    36f4:	80 91 d3 60 	lds	r24, 0x60D3	; 0x8060d3 <packet+0x5>
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:176
    uint8_t _section = packet.out.section;
    36f8:	60 90 d5 60 	lds	r6, 0x60D5	; 0x8060d5 <packet+0x7>
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:177
    uint8_t _index   = packet.out.index;
    36fc:	70 90 d6 60 	lds	r7, 0x60D6	; 0x8060d6 <packet+0x8>
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:178
    uint8_t _length  = packet.out.length;
    3700:	50 90 d7 60 	lds	r5, 0x60D7	; 0x8060d7 <packet+0x9>
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:179
    if (_cmd == 0x02) {             /* CMD3_GET_PARAMETER */
    3704:	82 30       	cpi	r24, 0x02	; 2
    3706:	09 f0       	breq	.+2      	; 0x370a <main+0xbc2>
    3708:	28 c1       	rjmp	.+592    	; 0x395a <main+0xe12>
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:180
      D1PRINTF(" GEN_GET_PARAM=%02X:%02X:%02X\r\n", _section, _index, _length);
    370a:	e5 2c       	mov	r14, r5
    370c:	f1 2c       	mov	r15, r1
    370e:	c7 2c       	mov	r12, r7
    3710:	d1 2c       	mov	r13, r1
    3712:	1f 92       	push	r1
    3714:	5f 92       	push	r5
    3716:	1f 92       	push	r1
    3718:	7f 92       	push	r7
    371a:	1f 92       	push	r1
    371c:	6f 92       	push	r6
    371e:	8b e4       	ldi	r24, 0x4B	; 75
    3720:	93 e0       	ldi	r25, 0x03	; 3
    3722:	9f 93       	push	r25
    3724:	8f 93       	push	r24
    3726:	1f 93       	push	r17
    3728:	0f 93       	push	r16
    372a:	0e 94 29 0a 	call	0x1452	; 0x1452 <Print::printf(PGM_t const*, ...) [clone .constprop.21]>
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:181
      if (_section == 0) {          /* SET_GET_CTXT_CONFIG */
    372e:	cd bf       	out	0x3d, r28	; 61
    3730:	de bf       	out	0x3e, r29	; 62
    3732:	61 10       	cpse	r6, r1
    3734:	ab c0       	rjmp	.+342    	; 0x388c <main+0xd44>
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:183
        /* _index == 0-5 */
        memcpy_P(&packet.in.data[0], &jtag_version[_index], _length);
    3736:	b6 01       	movw	r22, r12
    3738:	6a 5b       	subi	r22, 0xBA	; 186
    373a:	7c 4f       	sbci	r23, 0xFC	; 252
    373c:	a7 01       	movw	r20, r14
    373e:	85 ed       	ldi	r24, 0xD5	; 213
    3740:	90 e6       	ldi	r25, 0x60	; 96
    3742:	ea d5       	rcall	.+3028   	; 0x4318 <memcpy_P>
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:184
        D1PRINTF(" VESRION=");
    3744:	8c e3       	ldi	r24, 0x3C	; 60
    3746:	93 e0       	ldi	r25, 0x03	; 3
    3748:	9f 93       	push	r25
    374a:	8f 93       	push	r24
    374c:	1f 93       	push	r17
    374e:	0f 93       	push	r16
    3750:	0e 94 29 0a 	call	0x1452	; 0x1452 <Print::printf(PGM_t const*, ...) [clone .constprop.21]>
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:185
        D1PRINTHEX(&packet.in.data[0], _length);
    3754:	b7 01       	movw	r22, r14
    3756:	85 ed       	ldi	r24, 0xD5	; 213
    3758:	90 e6       	ldi	r25, 0x60	; 96
    375a:	0e 94 b7 09 	call	0x136e	; 0x136e <Print::printHex(void const*, unsigned int, char, unsigned int, char const*) [clone .constprop.18]>
    375e:	0e 94 1d 0a 	call	0x143a	; 0x143a <Print::ln()>
    3762:	0f 90       	pop	r0
    3764:	0f 90       	pop	r0
    3766:	0f 90       	pop	r0
    3768:	0f 90       	pop	r0
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:198
        else {                      /* PARM3_ANALOG_XXXX */
          D1PRINTF(" PHYSICAL=%02X:%02X\r\n", _index, _length);
          memcpy_P(&packet.in.data[0], &jtag_physical[_index & 7], _length);
        }
      }
      packet.in.res = 0x184;        /* RSP3_DATA */
    376a:	84 e8       	ldi	r24, 0x84	; 132
    376c:	91 e0       	ldi	r25, 0x01	; 1
    376e:	80 93 d3 60 	sts	0x60D3, r24	; 0x8060d3 <packet+0x5>
    3772:	90 93 d4 60 	sts	0x60D4, r25	; 0x8060d4 <packet+0x6>
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:199
      _rspsize = _length + 1;
    3776:	3f ef       	ldi	r19, 0xFF	; 255
    3778:	e3 1a       	sub	r14, r19
    377a:	f3 0a       	sbc	r15, r19
complete_jtag_transactions():
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:163
    return _result; /* True if an EDBG Payload is received. */
  }

  /*** Prepare for EDBG payload request from device to host ***/
  void complete_jtag_transactions (size_t _length) {
    _packet_length = _length + 6; /* TOKEN + SEQ[2] + EOT + PAD */
    377c:	97 01       	movw	r18, r14
    377e:	2a 5f       	subi	r18, 0xFA	; 250
    3780:	3f 4f       	sbci	r19, 0xFF	; 255
    3782:	20 93 9c 60 	sts	0x609C, r18	; 0x80609c <_packet_length>
    3786:	30 93 9d 60 	sts	0x609D, r19	; 0x80609d <_packet_length+0x1>
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:164
    _packet_fragment = 0;
    378a:	10 92 9a 60 	sts	0x609A, r1	; 0x80609a <_packet_fragment>
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:165
    _packet_endfrag = (_length + 65) / 60;  /* 1 to 15 */
    378e:	c7 01       	movw	r24, r14
    3790:	8f 5b       	subi	r24, 0xBF	; 191
    3792:	9f 4f       	sbci	r25, 0xFF	; 255
    3794:	6c e3       	ldi	r22, 0x3C	; 60
    3796:	70 e0       	ldi	r23, 0x00	; 0
    3798:	0e 94 43 24 	call	0x4886	; 0x4886 <__udivmodhi4>
    379c:	60 93 99 60 	sts	0x6099, r22	; 0x806099 <_packet_endfrag>
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:166
    packet.in.token = 0x0E;                 /* TOKEN */
    37a0:	8e e0       	ldi	r24, 0x0E	; 14
    37a2:	80 93 cf 60 	sts	0x60CF, r24	; 0x8060cf <packet+0x1>
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:167
    packet.rawData[_packet_length] = 0;     /* EOT */
    37a6:	22 53       	subi	r18, 0x32	; 50
    37a8:	3f 49       	sbci	r19, 0x9F	; 159
    37aa:	f9 01       	movw	r30, r18
    37ac:	10 82       	st	Z, r1
    37ae:	b8 ca       	rjmp	.-2704   	; 0x2d20 <main+0x1d8>
dap_command_check():
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:94
            _packet_endfrag = 0;
            _result = true;
          }
          else {
            /* A missing chunk is detected, so an error is returned. */
            D1PRINTF("<EDBG_FAIL>\r\n");
    37b0:	8f eb       	ldi	r24, 0xBF	; 191
    37b2:	92 e0       	ldi	r25, 0x02	; 2
    37b4:	cb cb       	rjmp	.-2154   	; 0x2f4c <main+0x404>
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:100
            EP_MEM.dap_data[1] = 0x00;  /* EDBG_RSP_FAIL */
          }
        }
      }
    }
    else if (_cmd == 0x81) {        /* DAP_EDBG_VENDOR_AVR_RSP */
    37b6:	91 38       	cpi	r25, 0x81	; 129
    37b8:	e9 f5       	brne	.+122    	; 0x3834 <main+0xcec>
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:101
      EP_MEM.dap_data[2] = 0;       /* Always zero */
    37ba:	10 92 30 63 	sts	0x6330, r1	; 0x806330 <EP_MEM+0x1a>
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:102
      if (_packet_endfrag == 0) {
    37be:	90 91 99 60 	lds	r25, 0x6099	; 0x806099 <_packet_endfrag>
    37c2:	91 11       	cpse	r25, r1
    37c4:	0d c0       	rjmp	.+26     	; 0x37e0 <main+0xc98>
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:103
        D1PRINTF("<EDBG_EMPTY>\r\n");
    37c6:	80 eb       	ldi	r24, 0xB0	; 176
    37c8:	92 e0       	ldi	r25, 0x02	; 2
    37ca:	9f 93       	push	r25
    37cc:	8f 93       	push	r24
    37ce:	1f 93       	push	r17
    37d0:	0f 93       	push	r16
    37d2:	0e 94 29 0a 	call	0x1452	; 0x1452 <Print::printf(PGM_t const*, ...) [clone .constprop.21]>
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:104
        EP_MEM.dap_data[1] = 0;
    37d6:	10 92 2f 63 	sts	0x632F, r1	; 0x80632f <EP_MEM+0x19>
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:105
        EP_MEM.dap_data[3] = 0;
    37da:	10 92 31 63 	sts	0x6331, r1	; 0x806331 <EP_MEM+0x1b>
    37de:	be cb       	rjmp	.-2180   	; 0x2f5c <main+0x414>
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:108
      }
      else {
        memcpy(&EP_MEM.dap_data[4], &packet.in.token + (_packet_fragment * 60), 60);
    37e0:	80 91 9a 60 	lds	r24, 0x609A	; 0x80609a <_packet_fragment>
    37e4:	2c e3       	ldi	r18, 0x3C	; 60
    37e6:	82 9f       	mul	r24, r18
    37e8:	f0 01       	movw	r30, r0
    37ea:	11 24       	eor	r1, r1
    37ec:	e1 53       	subi	r30, 0x31	; 49
    37ee:	ff 49       	sbci	r31, 0x9F	; 159
    37f0:	a2 e3       	ldi	r26, 0x32	; 50
    37f2:	b3 e6       	ldi	r27, 0x63	; 99
    37f4:	01 90       	ld	r0, Z+
    37f6:	0d 92       	st	X+, r0
    37f8:	2a 95       	dec	r18
    37fa:	e1 f7       	brne	.-8      	; 0x37f4 <main+0xcac>
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:109
        EP_MEM.dap_data[1] = ((++_packet_fragment) << 4) | _packet_endfrag;
    37fc:	8f 5f       	subi	r24, 0xFF	; 255
    37fe:	80 93 9a 60 	sts	0x609A, r24	; 0x80609a <_packet_fragment>
    3802:	40 e1       	ldi	r20, 0x10	; 16
    3804:	84 9f       	mul	r24, r20
    3806:	90 01       	movw	r18, r0
    3808:	11 24       	eor	r1, r1
    380a:	29 2b       	or	r18, r25
    380c:	20 93 2f 63 	sts	0x632F, r18	; 0x80632f <EP_MEM+0x19>
    3810:	20 91 9c 60 	lds	r18, 0x609C	; 0x80609c <_packet_length>
    3814:	30 91 9d 60 	lds	r19, 0x609D	; 0x80609d <_packet_length+0x1>
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:110
        EP_MEM.dap_data[3] = _packet_fragment == _packet_endfrag ? _packet_length : 60;
    3818:	98 17       	cp	r25, r24
    381a:	51 f0       	breq	.+20     	; 0x3830 <main+0xce8>
    381c:	8c e3       	ldi	r24, 0x3C	; 60
    381e:	80 93 31 63 	sts	0x6331, r24	; 0x806331 <EP_MEM+0x1b>
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:111
        _packet_length -= 60;
    3822:	2c 53       	subi	r18, 0x3C	; 60
    3824:	31 09       	sbc	r19, r1
    3826:	20 93 9c 60 	sts	0x609C, r18	; 0x80609c <_packet_length>
    382a:	30 93 9d 60 	sts	0x609D, r19	; 0x80609d <_packet_length+0x1>
    382e:	18 cf       	rjmp	.-464    	; 0x3660 <main+0xb18>
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:110
        EP_MEM.dap_data[3] = 0;
      }
      else {
        memcpy(&EP_MEM.dap_data[4], &packet.in.token + (_packet_fragment * 60), 60);
        EP_MEM.dap_data[1] = ((++_packet_fragment) << 4) | _packet_endfrag;
        EP_MEM.dap_data[3] = _packet_fragment == _packet_endfrag ? _packet_length : 60;
    3830:	82 2f       	mov	r24, r18
    3832:	f5 cf       	rjmp	.-22     	; 0x381e <main+0xcd6>
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:118
        D3PRINTHEX(&EP_MEM.dap_data, EP_MEM.dap_data[3] + 4);
      }
    }

    /*** DAP Standard ***/
    else if (_cmd == 0x00) {        /* DAP_CMD_INFO */
    3834:	91 11       	cpse	r25, r1
    3836:	1c c0       	rjmp	.+56     	; 0x3870 <main+0xd28>
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:119
      if (_sub == 0xFF              /* DAP_INFO_PACKET_SIZE      */
    3838:	8f 3f       	cpi	r24, 0xFF	; 255
    383a:	21 f0       	breq	.+8      	; 0x3844 <main+0xcfc>
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:120
       || _sub == 0xFB              /* UART Receive Buffer Size  */
    383c:	95 e0       	ldi	r25, 0x05	; 5
    383e:	98 0f       	add	r25, r24
    3840:	92 30       	cpi	r25, 0x02	; 2
    3842:	48 f4       	brcc	.+18     	; 0x3856 <main+0xd0e>
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:122
       || _sub == 0xFC) {           /* UART Transmit Buffer Size */
        EP_MEM.dap_data[1] = 0x02;  /* length=2 */
    3844:	82 e0       	ldi	r24, 0x02	; 2
    3846:	80 93 2f 63 	sts	0x632F, r24	; 0x80632f <EP_MEM+0x19>
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:123
        EP_MEM.dap_data[2] = 0x40;  /* MaxPacketSize = 64 */
    384a:	80 e4       	ldi	r24, 0x40	; 64
    384c:	80 93 30 63 	sts	0x6330, r24	; 0x806330 <EP_MEM+0x1a>
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:124
        EP_MEM.dap_data[3] = 0x00;
    3850:	10 92 31 63 	sts	0x6331, r1	; 0x806331 <EP_MEM+0x1b>
    3854:	05 cf       	rjmp	.-502    	; 0x3660 <main+0xb18>
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:128
        D3PRINTF(" PI=");
        D3PRINTHEX(&EP_MEM.dap_data, 4);
      }
      else if (_sub == 0xF1) {      /* DAP_INFO_Capabilities */
    3856:	81 3f       	cpi	r24, 0xF1	; 241
    3858:	09 f0       	breq	.+2      	; 0x385c <main+0xd14>
    385a:	02 cf       	rjmp	.-508    	; 0x3660 <main+0xb18>
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:129
        EP_MEM.dap_data[1] = 0x02;  /* length=2 */
    385c:	82 e0       	ldi	r24, 0x02	; 2
    385e:	80 93 2f 63 	sts	0x632F, r24	; 0x80632f <EP_MEM+0x19>
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:130
        EP_MEM.dap_data[2] = 0x80;  /* 7:UART Communication Port */
    3862:	80 e8       	ldi	r24, 0x80	; 128
    3864:	80 93 30 63 	sts	0x6330, r24	; 0x806330 <EP_MEM+0x1a>
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:131
        EP_MEM.dap_data[3] = 0x01;  /* 1:USB COM Port */
    3868:	81 e0       	ldi	r24, 0x01	; 1
    386a:	80 93 31 63 	sts	0x6331, r24	; 0x806331 <EP_MEM+0x1b>
    386e:	f8 ce       	rjmp	.-528    	; 0x3660 <main+0xb18>
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:136
        D3PRINTF(" PI=");
        D3PRINTHEX(&EP_MEM.dap_data, 4);
      }
    }
    else if (_cmd == 0x02) {        /* DAP_CMD_CONNECT */
    3870:	92 30       	cpi	r25, 0x02	; 2
    3872:	09 f4       	brne	.+2      	; 0x3876 <main+0xd2e>
    3874:	f5 ce       	rjmp	.-534    	; 0x3660 <main+0xb18>
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:142
      /* EP_MEM.dap_data[1] == CONN_TYPE */
      /* Here, the response is returned without processing. */
      D3PRINTF(" PI=");
      D3PRINTHEX(&EP_MEM.dap_data, 2);
    }
    else if (_cmd == 0x01           /* DAP_CMD_HOSTSTATUS */
    3876:	91 30       	cpi	r25, 0x01	; 1
    3878:	31 f4       	brne	.+12     	; 0x3886 <main+0xd3e>
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:143
          && _sub == 0x00) {        /* DAP_LED_CONNECT */
    387a:	88 23       	and	r24, r24
    387c:	09 f4       	brne	.+2      	; 0x3880 <main+0xd38>
    387e:	f0 ce       	rjmp	.-544    	; 0x3660 <main+0xb18>
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:155
      /* Here, the response is returned without processing. */
      D3PRINTF(" PI=");
      D3PRINTHEX(&EP_MEM.dap_data, 2);
    }
    else {
      EP_MEM.dap_data[1] = 0x00;    /* other 0 length result */
    3880:	10 92 2f 63 	sts	0x632F, r1	; 0x80632f <EP_MEM+0x19>
    3884:	ed ce       	rjmp	.-550    	; 0x3660 <main+0xb18>
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:149
      /* EP_MEM.dap_data[2] == LED_ON/OFF */
      /* Here, the response is returned without processing. */
      D3PRINTF(" PI=");
      D3PRINTHEX(&EP_MEM.dap_data, 3);
    }
    else if (_cmd == 0x03) {        /* DAP_CMD_DISCONNECT */
    3886:	93 30       	cpi	r25, 0x03	; 3
    3888:	d9 f7       	brne	.-10     	; 0x3880 <main+0xd38>
    388a:	ea ce       	rjmp	.-556    	; 0x3660 <main+0xb18>
jtag_scope_general():
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:187
        /* _index == 0-5 */
        memcpy_P(&packet.in.data[0], &jtag_version[_index], _length);
        D1PRINTF(" VESRION=");
        D1PRINTHEX(&packet.in.data[0], _length);
      }
      else if (_section == 1) {     /* SET_GET_CTXT_PHYSICAL */
    388c:	f1 e0       	ldi	r31, 0x01	; 1
    388e:	6f 12       	cpse	r6, r31
    3890:	6c cf       	rjmp	.-296    	; 0x376a <main+0xc22>
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:188
        if (_index == 0 || _index == 0x20) {  /* PARM3_VTARGET */
    3892:	87 2d       	mov	r24, r7
    3894:	8f 7d       	andi	r24, 0xDF	; 223
    3896:	09 f0       	breq	.+2      	; 0x389a <main+0xd52>
    3898:	48 c0       	rjmp	.+144    	; 0x392a <main+0xde2>
get_vdd():
/Users/askn/Collaborator/UPDI4AVR-USB/src/sys.cpp:317
   * A delay of 1250us is required for the voltage to stabilize.
   * The result is 10-bit, so multiply by 10.0 to convert to 1V * 0.0001.
   * The ADC0 peripheral is operational only during voltage measurements.
   */
  uint16_t get_vdd (void) {
    ADC0_INTFLAGS = ~0;
    389a:	8f ef       	ldi	r24, 0xFF	; 255
    389c:	80 93 07 06 	sts	0x0607, r24	; 0x800607 <__TEXT_REGION_LENGTH__+0x7f0607>
/Users/askn/Collaborator/UPDI4AVR-USB/src/sys.cpp:318
    ADC0_SAMPLE = 0;
    38a0:	10 92 0e 06 	sts	0x060E, r1	; 0x80060e <__TEXT_REGION_LENGTH__+0x7f060e>
    38a4:	10 92 0f 06 	sts	0x060F, r1	; 0x80060f <__TEXT_REGION_LENGTH__+0x7f060f>
/Users/askn/Collaborator/UPDI4AVR-USB/src/sys.cpp:319
    ADC0_CTRLA = ADC_ENABLE_bm;
    38a8:	60 92 00 06 	sts	0x0600, r6	; 0x800600 <__TEXT_REGION_LENGTH__+0x7f0600>
/Users/askn/Collaborator/UPDI4AVR-USB/src/sys.cpp:320
    ADC0_CTRLB = ADC_PRESC_DIV4_gc;
    38ac:	60 92 01 06 	sts	0x0601, r6	; 0x800601 <__TEXT_REGION_LENGTH__+0x7f0601>
/Users/askn/Collaborator/UPDI4AVR-USB/src/sys.cpp:321
    ADC0_CTRLC = ADC_REFSEL_1V024_gc;
    38b0:	84 e0       	ldi	r24, 0x04	; 4
    38b2:	80 93 02 06 	sts	0x0602, r24	; 0x800602 <__TEXT_REGION_LENGTH__+0x7f0602>
/Users/askn/Collaborator/UPDI4AVR-USB/src/sys.cpp:322
    ADC0_CTRLE = 250; /* (SAMPDUR + 0.5) * fCLK_ADC sample duration */
    38b6:	8a ef       	ldi	r24, 0xFA	; 250
    38b8:	80 93 04 06 	sts	0x0604, r24	; 0x800604 <__TEXT_REGION_LENGTH__+0x7f0604>
/Users/askn/Collaborator/UPDI4AVR-USB/src/sys.cpp:323
    ADC0_MUXPOS = ADC_MUXPOS_VDDDIV10_gc; /* ADC channel VDD * 0.1 */
    38bc:	84 e4       	ldi	r24, 0x44	; 68
    38be:	80 93 0b 06 	sts	0x060B, r24	; 0x80060b <__TEXT_REGION_LENGTH__+0x7f060b>
/Users/askn/Collaborator/UPDI4AVR-USB/src/sys.cpp:324
    ADC0_COMMAND = ADC_MODE_SINGLE_10BIT_gc | ADC_START_IMMEDIATE_gc;
    38c2:	81 e1       	ldi	r24, 0x11	; 17
    38c4:	80 93 0a 06 	sts	0x060A, r24	; 0x80060a <__TEXT_REGION_LENGTH__+0x7f060a>
/Users/askn/Collaborator/UPDI4AVR-USB/src/sys.cpp:325
    loop_until_bit_is_set(ADC0_INTFLAGS, ADC_SAMPRDY_bp);
    38c8:	80 91 07 06 	lds	r24, 0x0607	; 0x800607 <__TEXT_REGION_LENGTH__+0x7f0607>
    38cc:	81 ff       	sbrs	r24, 1
    38ce:	fc cf       	rjmp	.-8      	; 0x38c8 <main+0xd80>
/Users/askn/Collaborator/UPDI4AVR-USB/src/sys.cpp:326
    uint16_t _adc_reading = ADC0_SAMPLE;
    38d0:	20 91 0e 06 	lds	r18, 0x060E	; 0x80060e <__TEXT_REGION_LENGTH__+0x7f060e>
    38d4:	30 91 0f 06 	lds	r19, 0x060F	; 0x80060f <__TEXT_REGION_LENGTH__+0x7f060f>
/Users/askn/Collaborator/UPDI4AVR-USB/src/sys.cpp:327
    _adc_reading += (_adc_reading << 3) + _adc_reading;
    38d8:	c9 01       	movw	r24, r18
    38da:	63 e0       	ldi	r22, 0x03	; 3
    38dc:	88 0f       	add	r24, r24
    38de:	99 1f       	adc	r25, r25
    38e0:	6a 95       	dec	r22
    38e2:	e1 f7       	brne	.-8      	; 0x38dc <main+0xd94>
    38e4:	22 0f       	add	r18, r18
    38e6:	33 1f       	adc	r19, r19
    38e8:	82 0f       	add	r24, r18
    38ea:	93 1f       	adc	r25, r19
/Users/askn/Collaborator/UPDI4AVR-USB/src/sys.cpp:328
    ADC0_CTRLA = 0;
    38ec:	10 92 00 06 	sts	0x0600, r1	; 0x800600 <__TEXT_REGION_LENGTH__+0x7f0600>
jtag_scope_general():
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:189
          _vtarget = SYS::get_vdd();
    38f0:	80 93 95 60 	sts	0x6095, r24	; 0x806095 <_vtarget>
    38f4:	90 93 96 60 	sts	0x6096, r25	; 0x806096 <_vtarget+0x1>
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:190
          D1PRINTF(" VTARGET=%d\r\n", _vtarget);
    38f8:	9f 93       	push	r25
    38fa:	8f 93       	push	r24
    38fc:	8e e2       	ldi	r24, 0x2E	; 46
    38fe:	93 e0       	ldi	r25, 0x03	; 3
    3900:	9f 93       	push	r25
    3902:	8f 93       	push	r24
    3904:	1f 93       	push	r17
    3906:	0f 93       	push	r16
    3908:	0e 94 29 0a 	call	0x1452	; 0x1452 <Print::printf(PGM_t const*, ...) [clone .constprop.21]>
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:191
          packet.in.wValue = _vtarget;
    390c:	80 91 95 60 	lds	r24, 0x6095	; 0x806095 <_vtarget>
    3910:	90 91 96 60 	lds	r25, 0x6096	; 0x806096 <_vtarget+0x1>
    3914:	80 93 d5 60 	sts	0x60D5, r24	; 0x8060d5 <packet+0x7>
    3918:	90 93 d6 60 	sts	0x60D6, r25	; 0x8060d6 <packet+0x8>
    391c:	0f 90       	pop	r0
    391e:	0f 90       	pop	r0
    3920:	0f 90       	pop	r0
    3922:	0f 90       	pop	r0
    3924:	0f 90       	pop	r0
    3926:	0f 90       	pop	r0
    3928:	20 cf       	rjmp	.-448    	; 0x376a <main+0xc22>
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:194
        }
        else {                      /* PARM3_ANALOG_XXXX */
          D1PRINTF(" PHYSICAL=%02X:%02X\r\n", _index, _length);
    392a:	1f 92       	push	r1
    392c:	5f 92       	push	r5
    392e:	1f 92       	push	r1
    3930:	7f 92       	push	r7
    3932:	88 e1       	ldi	r24, 0x18	; 24
    3934:	93 e0       	ldi	r25, 0x03	; 3
    3936:	9f 93       	push	r25
    3938:	8f 93       	push	r24
    393a:	1f 93       	push	r17
    393c:	0f 93       	push	r16
    393e:	0e 94 29 0a 	call	0x1452	; 0x1452 <Print::printf(PGM_t const*, ...) [clone .constprop.21]>
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:195
          memcpy_P(&packet.in.data[0], &jtag_physical[_index & 7], _length);
    3942:	67 2d       	mov	r22, r7
    3944:	67 70       	andi	r22, 0x07	; 7
    3946:	70 e0       	ldi	r23, 0x00	; 0
    3948:	60 5f       	subi	r22, 0xF0	; 240
    394a:	7c 4f       	sbci	r23, 0xFC	; 252
    394c:	a7 01       	movw	r20, r14
    394e:	85 ed       	ldi	r24, 0xD5	; 213
    3950:	90 e6       	ldi	r25, 0x60	; 96
    3952:	e2 d4       	rcall	.+2500   	; 0x4318 <memcpy_P>
    3954:	cd bf       	out	0x3d, r28	; 61
    3956:	de bf       	out	0x3e, r29	; 62
    3958:	08 cf       	rjmp	.-496    	; 0x376a <main+0xc22>
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:201
        }
      }
      packet.in.res = 0x184;        /* RSP3_DATA */
      _rspsize = _length + 1;
    }
    else if (_cmd == 0x10) {        /* CMD3_SIGN_ON */
    395a:	80 31       	cpi	r24, 0x10	; 16
    395c:	b9 f4       	brne	.+46     	; 0x398c <main+0xe44>
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:202
      D1PRINTF(" GEN_SIGN_ON\r\n");
    395e:	81 e0       	ldi	r24, 0x01	; 1
    3960:	93 e0       	ldi	r25, 0x03	; 3
    3962:	9f 93       	push	r25
    3964:	8f 93       	push	r24
    3966:	1f 93       	push	r17
    3968:	0f 93       	push	r16
    396a:	0e 94 29 0a 	call	0x1452	; 0x1452 <Print::printf(PGM_t const*, ...) [clone .constprop.21]>
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:205
      _jtag_hvctrl = 0;
      _jtag_unlock = 0;
      _jtag_arch = 0;
    396e:	10 92 98 60 	sts	0x6098, r1	; 0x806098 <_jtag_arch>
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:211
      _tpi_setmode = 0;
      packet.in.res = 0x80;         /* RSP3_OK */
    }
    else if (_cmd == 0x11) {        /* CMD3_SIGN_OFF */
      D1PRINTF(" GEN_SIGN_OFF\r\n");
      packet.in.res = 0x80;         /* RSP3_OK */
    3972:	80 e8       	ldi	r24, 0x80	; 128
    3974:	90 e0       	ldi	r25, 0x00	; 0
    3976:	80 93 d3 60 	sts	0x60D3, r24	; 0x8060d3 <packet+0x5>
    397a:	90 93 d4 60 	sts	0x60D4, r25	; 0x8060d4 <packet+0x6>
    397e:	0f 90       	pop	r0
    3980:	0f 90       	pop	r0
    3982:	0f 90       	pop	r0
    3984:	0f 90       	pop	r0
main():
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:375
  } /* jtag_scope_avr_core */

  /* Processing branches depending on the scope specifier. */
  /* Currently, four types of scope are known: */
  void jtag_scope_branch (void) {
    size_t _rspsize = 0;
    3986:	f1 2c       	mov	r15, r1
    3988:	e1 2c       	mov	r14, r1
    398a:	f8 ce       	rjmp	.-528    	; 0x377c <main+0xc34>
jtag_scope_general():
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:209
      _jtag_unlock = 0;
      _jtag_arch = 0;
      _tpi_setmode = 0;
      packet.in.res = 0x80;         /* RSP3_OK */
    }
    else if (_cmd == 0x11) {        /* CMD3_SIGN_OFF */
    398c:	81 31       	cpi	r24, 0x11	; 17
    398e:	49 f4       	brne	.+18     	; 0x39a2 <main+0xe5a>
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:210
      D1PRINTF(" GEN_SIGN_OFF\r\n");
    3990:	81 ef       	ldi	r24, 0xF1	; 241
    3992:	92 e0       	ldi	r25, 0x02	; 2
    3994:	9f 93       	push	r25
    3996:	8f 93       	push	r24
    3998:	1f 93       	push	r17
    399a:	0f 93       	push	r16
    399c:	0e 94 29 0a 	call	0x1452	; 0x1452 <Print::printf(PGM_t const*, ...) [clone .constprop.21]>
    39a0:	e8 cf       	rjmp	.-48     	; 0x3972 <main+0xe2a>
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:214
      packet.in.res = 0x80;         /* RSP3_OK */
    }
    else {
      D1PRINTF(" GEN=%02X:%02X:%02X\r\n", _section, _index, _length);
    39a2:	1f 92       	push	r1
    39a4:	5f 92       	push	r5
    39a6:	1f 92       	push	r1
    39a8:	7f 92       	push	r7
    39aa:	1f 92       	push	r1
    39ac:	6f 92       	push	r6
    39ae:	8b ed       	ldi	r24, 0xDB	; 219
    39b0:	92 e0       	ldi	r25, 0x02	; 2
    39b2:	9f 93       	push	r25
    39b4:	8f 93       	push	r24
    39b6:	1f 93       	push	r17
    39b8:	0f 93       	push	r16
    39ba:	0e 94 29 0a 	call	0x1452	; 0x1452 <Print::printf(PGM_t const*, ...) [clone .constprop.21]>
    39be:	cd bf       	out	0x3d, r28	; 61
    39c0:	de bf       	out	0x3e, r29	; 62
    39c2:	e1 cf       	rjmp	.-62     	; 0x3986 <main+0xe3e>
jtag_scope_branch():
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:388
  #ifdef _Not_yet_implemented_stub_
    else if (_scope == 0x00) _rspsize = jtag_scope_info();          /* SCOPE_INFO */ /* Not used with HID */
    else if (_scope == 0x11) _rspsize = ISP::jtag_scope_isp();      /* SCOPE_AVR_ISP */
    else if (_scope == 0x13) _rspsize = AVR32::jtag_scope_avr32();  /* SCOPE_AVR32 */
  #endif
    else if (_scope == 0x12) _rspsize = jtag_scope_avr_core();      /* SCOPE_AVR */
    39c4:	92 e1       	ldi	r25, 0x12	; 18
    39c6:	f9 12       	cpse	r15, r25
    39c8:	a4 c2       	rjmp	.+1352   	; 0x3f12 <main+0x13ca>
jtag_scope_avr_core():
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:262
  }

  /* The AVR scope is further branched by the ARCH designator. */
  size_t jtag_scope_avr_core (void) {
    size_t  _rspsize = 0;
    uint8_t _cmd     = packet.out.cmd;
    39ca:	f0 90 d3 60 	lds	r15, 0x60D3	; 0x8060d3 <packet+0x5>
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:263
    uint8_t _section = packet.out.section;
    39ce:	d0 90 d5 60 	lds	r13, 0x60D5	; 0x8060d5 <packet+0x7>
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:264
    uint8_t _index   = packet.out.index;
    39d2:	c0 90 d6 60 	lds	r12, 0x60D6	; 0x8060d6 <packet+0x8>
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:265
    uint8_t _length  = packet.out.length;
    39d6:	70 90 d7 60 	lds	r7, 0x60D7	; 0x8060d7 <packet+0x9>
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:266
    if (_cmd == 0x01) {             /* CMD3_SET_PARAMETER */
    39da:	e1 e0       	ldi	r30, 0x01	; 1
    39dc:	fe 12       	cpse	r15, r30
    39de:	ca c0       	rjmp	.+404    	; 0x3b74 <main+0x102c>
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:267
      uint16_t _data = packet.out.wValue;
    39e0:	e0 90 d8 60 	lds	r14, 0x60D8	; 0x8060d8 <packet+0xa>
    39e4:	f0 90 d9 60 	lds	r15, 0x60D9	; 0x8060d9 <packet+0xb>
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:268
      D1PRINTF(" AVR_SET_PARAM=%02X:%02X:%02X:%02X\r\n", _section, _index, _length, _data);
    39e8:	ff 92       	push	r15
    39ea:	ef 92       	push	r14
    39ec:	1f 92       	push	r1
    39ee:	7f 92       	push	r7
    39f0:	1f 92       	push	r1
    39f2:	cf 92       	push	r12
    39f4:	1f 92       	push	r1
    39f6:	df 92       	push	r13
    39f8:	8d e0       	ldi	r24, 0x0D	; 13
    39fa:	95 e0       	ldi	r25, 0x05	; 5
    39fc:	9f 93       	push	r25
    39fe:	8f 93       	push	r24
    3a00:	1f 93       	push	r17
    3a02:	0f 93       	push	r16
    3a04:	0e 94 29 0a 	call	0x1452	; 0x1452 <Print::printf(PGM_t const*, ...) [clone .constprop.21]>
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:269
      if (_section == 0) {          /* SET_GET_CTXT_CONFIG */
    3a08:	cd bf       	out	0x3d, r28	; 61
    3a0a:	de bf       	out	0x3e, r29	; 62
    3a0c:	d1 10       	cpse	r13, r1
    3a0e:	29 c0       	rjmp	.+82     	; 0x3a62 <main+0xf1a>
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:270
        if (_index == 0) {          /* PARM3_ARCH */
    3a10:	c1 10       	cpse	r12, r1
    3a12:	19 c0       	rjmp	.+50     	; 0x3a46 <main+0xefe>
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:271
          D1PRINTF(" ARCH=%02X\r\n", _data);
    3a14:	ff 92       	push	r15
    3a16:	ef 92       	push	r14
    3a18:	80 e0       	ldi	r24, 0x00	; 0
    3a1a:	95 e0       	ldi	r25, 0x05	; 5
    3a1c:	9f 93       	push	r25
    3a1e:	8f 93       	push	r24
    3a20:	1f 93       	push	r17
    3a22:	0f 93       	push	r16
    3a24:	0e 94 29 0a 	call	0x1452	; 0x1452 <Print::printf(PGM_t const*, ...) [clone .constprop.21]>
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:272
          _jtag_arch = _data;       /* 5:PARM3_ARCH_UPDI */
    3a28:	e0 92 98 60 	sts	0x6098, r14	; 0x806098 <_jtag_arch>
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:335
          _jtag_hvctrl = _data;     /* 1:ENABLE */
        }
        else if (_index == 7) {     /* PARM3_OPT_CHIP_ERASE_TO_ENTER */
          /* force unlock chip-erase */
          /* This might be called having no `-e` or `-D`, but having `-F`. */
          D1PRINTF(" UNLOCKEN=%02X\r\n", _data);
    3a2c:	0f 90       	pop	r0
    3a2e:	0f 90       	pop	r0
    3a30:	0f 90       	pop	r0
    3a32:	0f 90       	pop	r0
    3a34:	0f 90       	pop	r0
    3a36:	0f 90       	pop	r0
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:339
          _jtag_unlock = _data;     /* 1:ENABLE */
        }
      }
      packet.in.res = 0x80;         /* RSP3_OK */
    3a38:	80 e8       	ldi	r24, 0x80	; 128
    3a3a:	90 e0       	ldi	r25, 0x00	; 0
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:368
    else if (_jtag_arch == 0x01) _rspsize = DWIRE:jtag_scope_tiny();    /* dWire? */
    else if (_jtag_arch == 0x02) _rspsize = MEGA::jtag_scope_mega();    /* MEGA */
    else if (_jtag_arch == 0x03) _rspsize = XMEGA::jtag_scope_xmega();  /* XMEGA */
  #endif
    else if (_jtag_arch == 0x05) _rspsize = UPDI::jtag_scope_updi();    /* UPDI support */
    else packet.in.res = 0xA0;      /* RSP3_FAILED */
    3a3c:	80 93 d3 60 	sts	0x60D3, r24	; 0x8060d3 <packet+0x5>
    3a40:	90 93 d4 60 	sts	0x60D4, r25	; 0x8060d4 <packet+0x6>
    3a44:	a0 cf       	rjmp	.-192    	; 0x3986 <main+0xe3e>
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:274
      if (_section == 0) {          /* SET_GET_CTXT_CONFIG */
        if (_index == 0) {          /* PARM3_ARCH */
          D1PRINTF(" ARCH=%02X\r\n", _data);
          _jtag_arch = _data;       /* 5:PARM3_ARCH_UPDI */
        }
        else if (_index == 1) {     /* PARM3_SESS_PURPOSE */
    3a46:	31 e0       	ldi	r19, 0x01	; 1
    3a48:	c3 12       	cpse	r12, r19
    3a4a:	f6 cf       	rjmp	.-20     	; 0x3a38 <main+0xef0>
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:275
          D1PRINTF(" SESS_PURPOSE=%02X\r\n", _data);
    3a4c:	ff 92       	push	r15
    3a4e:	ef 92       	push	r14
    3a50:	8b ee       	ldi	r24, 0xEB	; 235
    3a52:	94 e0       	ldi	r25, 0x04	; 4
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:335
          _jtag_hvctrl = _data;     /* 1:ENABLE */
        }
        else if (_index == 7) {     /* PARM3_OPT_CHIP_ERASE_TO_ENTER */
          /* force unlock chip-erase */
          /* This might be called having no `-e` or `-D`, but having `-F`. */
          D1PRINTF(" UNLOCKEN=%02X\r\n", _data);
    3a54:	9f 93       	push	r25
    3a56:	8f 93       	push	r24
    3a58:	1f 93       	push	r17
    3a5a:	0f 93       	push	r16
    3a5c:	0e 94 29 0a 	call	0x1452	; 0x1452 <Print::printf(PGM_t const*, ...) [clone .constprop.21]>
    3a60:	e5 cf       	rjmp	.-54     	; 0x3a2c <main+0xee4>
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:279
        else if (_index == 1) {     /* PARM3_SESS_PURPOSE */
          D1PRINTF(" SESS_PURPOSE=%02X\r\n", _data);
          _jtag_sess = _data;       /* */
        }
      }
      else if (_section == 1) {     /* SET_GET_CTXT_PHYSICAL */
    3a62:	41 e0       	ldi	r20, 0x01	; 1
    3a64:	d4 12       	cpse	r13, r20
    3a66:	4a c0       	rjmp	.+148    	; 0x3afc <main+0xfb4>
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:280
        if (_index == 0) {          /* PARM3_CONNECTION */
    3a68:	c1 10       	cpse	r12, r1
    3a6a:	0d c0       	rjmp	.+26     	; 0x3a86 <main+0xf3e>
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:281
          D1PRINTF(" CONNECTION=%02X\r\n", _data);
    3a6c:	ff 92       	push	r15
    3a6e:	ef 92       	push	r14
    3a70:	88 ed       	ldi	r24, 0xD8	; 216
    3a72:	94 e0       	ldi	r25, 0x04	; 4
    3a74:	9f 93       	push	r25
    3a76:	8f 93       	push	r24
    3a78:	1f 93       	push	r17
    3a7a:	0f 93       	push	r16
    3a7c:	0e 94 29 0a 	call	0x1452	; 0x1452 <Print::printf(PGM_t const*, ...) [clone .constprop.21]>
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:282
          _jtag_conn = _data;       /* 8:PARM3_CONN_UPDI */
    3a80:	e0 92 97 60 	sts	0x6097, r14	; 0x806097 <_jtag_conn>
    3a84:	d3 cf       	rjmp	.-90     	; 0x3a2c <main+0xee4>
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:284
        }
        else if (_index == 0x31) {  /* PARM3_CLK_XMEGA_PDI */
    3a86:	81 e3       	ldi	r24, 0x31	; 49
    3a88:	c8 12       	cpse	r12, r24
    3a8a:	d6 cf       	rjmp	.-84     	; 0x3a38 <main+0xef0>
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:285
          _xclk = _data;
    3a8c:	e0 92 18 60 	sts	0x6018, r14	; 0x806018 <_xclk>
    3a90:	f0 92 19 60 	sts	0x6019, r15	; 0x806019 <_xclk+0x1>
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:286
          D1PRINTF(" XCLK=%d\r\n", _xclk);
    3a94:	ff 92       	push	r15
    3a96:	ef 92       	push	r14
    3a98:	8d ec       	ldi	r24, 0xCD	; 205
    3a9a:	94 e0       	ldi	r25, 0x04	; 4
    3a9c:	9f 93       	push	r25
    3a9e:	8f 93       	push	r24
    3aa0:	1f 93       	push	r17
    3aa2:	0f 93       	push	r16
    3aa4:	0e 94 29 0a 	call	0x1452	; 0x1452 <Print::printf(PGM_t const*, ...) [clone .constprop.21]>
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:287
          if (_jtag_arch == 5) {
    3aa8:	0f 90       	pop	r0
    3aaa:	0f 90       	pop	r0
    3aac:	0f 90       	pop	r0
    3aae:	0f 90       	pop	r0
    3ab0:	0f 90       	pop	r0
    3ab2:	0f 90       	pop	r0
    3ab4:	80 91 98 60 	lds	r24, 0x6098	; 0x806098 <_jtag_arch>
    3ab8:	85 30       	cpi	r24, 0x05	; 5
    3aba:	09 f0       	breq	.+2      	; 0x3abe <main+0xf76>
    3abc:	bd cf       	rjmp	.-134    	; 0x3a38 <main+0xef0>
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:290
            /* Called with `-B xclk[unit]`. */
            /* XCLK Range Limitation : LSB=kHz */
            if (_xclk > 240) _xclk = 240;
    3abe:	80 91 18 60 	lds	r24, 0x6018	; 0x806018 <_xclk>
    3ac2:	90 91 19 60 	lds	r25, 0x6019	; 0x806019 <_xclk+0x1>
    3ac6:	81 3f       	cpi	r24, 0xF1	; 241
    3ac8:	91 05       	cpc	r25, r1
    3aca:	98 f0       	brcs	.+38     	; 0x3af2 <main+0xfaa>
    3acc:	80 ef       	ldi	r24, 0xF0	; 240
    3ace:	90 e0       	ldi	r25, 0x00	; 0
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:291
            else if (_xclk < 40) _xclk = 40;
    3ad0:	80 93 18 60 	sts	0x6018, r24	; 0x806018 <_xclk>
    3ad4:	90 93 19 60 	sts	0x6019, r25	; 0x806019 <_xclk+0x1>
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:293
  #if defined(DEBUG)
            if (_xclk != _data) D1PRINTF(" FIX_CLK=%d\r\n", _xclk);
    3ad8:	80 91 18 60 	lds	r24, 0x6018	; 0x806018 <_xclk>
    3adc:	90 91 19 60 	lds	r25, 0x6019	; 0x806019 <_xclk+0x1>
    3ae0:	e8 16       	cp	r14, r24
    3ae2:	f9 06       	cpc	r15, r25
    3ae4:	09 f4       	brne	.+2      	; 0x3ae8 <main+0xfa0>
    3ae6:	a8 cf       	rjmp	.-176    	; 0x3a38 <main+0xef0>
    3ae8:	9f 93       	push	r25
    3aea:	8f 93       	push	r24
    3aec:	8f eb       	ldi	r24, 0xBF	; 191
    3aee:	94 e0       	ldi	r25, 0x04	; 4
    3af0:	b1 cf       	rjmp	.-158    	; 0x3a54 <main+0xf0c>
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:291
          D1PRINTF(" XCLK=%d\r\n", _xclk);
          if (_jtag_arch == 5) {
            /* Called with `-B xclk[unit]`. */
            /* XCLK Range Limitation : LSB=kHz */
            if (_xclk > 240) _xclk = 240;
            else if (_xclk < 40) _xclk = 40;
    3af2:	88 97       	sbiw	r24, 0x28	; 40
    3af4:	88 f7       	brcc	.-30     	; 0x3ad8 <main+0xf90>
    3af6:	88 e2       	ldi	r24, 0x28	; 40
    3af8:	90 e0       	ldi	r25, 0x00	; 0
    3afa:	ea cf       	rjmp	.-44     	; 0x3ad0 <main+0xf88>
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:298
            if (_xclk != _data) D1PRINTF(" FIX_CLK=%d\r\n", _xclk);
  #endif
          }
        }
      }
      else if (_section == 2) {     /* SET_GET_CTXT_DEVICE */
    3afc:	92 e0       	ldi	r25, 0x02	; 2
    3afe:	d9 12       	cpse	r13, r25
    3b00:	26 c0       	rjmp	.+76     	; 0x3b4e <main+0x1006>
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:299
        if (_index == 0) {          /* PARM3_DEVICEDESC */
    3b02:	c1 10       	cpse	r12, r1
    3b04:	99 cf       	rjmp	.-206    	; 0x3a38 <main+0xef0>
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:300
          D1PRINTF(" DEVICEDESC=%X\r\n", _length);
    3b06:	1f 92       	push	r1
    3b08:	7f 92       	push	r7
    3b0a:	8e ea       	ldi	r24, 0xAE	; 174
    3b0c:	94 e0       	ldi	r25, 0x04	; 4
    3b0e:	9f 93       	push	r25
    3b10:	8f 93       	push	r24
    3b12:	1f 93       	push	r17
    3b14:	0f 93       	push	r16
    3b16:	0e 94 29 0a 	call	0x1452	; 0x1452 <Print::printf(PGM_t const*, ...) [clone .constprop.21]>
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:301
          memcpy(&Device_Descriptor, &packet.out.setData[0], _length & 63);
    3b1a:	47 2d       	mov	r20, r7
    3b1c:	4f 73       	andi	r20, 0x3F	; 63
    3b1e:	50 e0       	ldi	r21, 0x00	; 0
    3b20:	68 ed       	ldi	r22, 0xD8	; 216
    3b22:	70 e6       	ldi	r23, 0x60	; 96
    3b24:	8e e9       	ldi	r24, 0x9E	; 158
    3b26:	90 e6       	ldi	r25, 0x60	; 96
    3b28:	1a d7       	rcall	.+3636   	; 0x495e <memcpy>
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:320
            D2PRINTF("     address_mode=%02X\r\n", Device_Descriptor.UPDI.address_mode);
            D2PRINTF("   hvupdi_variant=%02X\r\n", Device_Descriptor.UPDI.hvupdi_variant);
          }
          /* STUB: And other descriptors. */
  #elif defined(DEBUG)
          if (_jtag_arch == 5) {
    3b2a:	0f 90       	pop	r0
    3b2c:	0f 90       	pop	r0
    3b2e:	0f 90       	pop	r0
    3b30:	0f 90       	pop	r0
    3b32:	0f 90       	pop	r0
    3b34:	0f 90       	pop	r0
    3b36:	80 91 98 60 	lds	r24, 0x6098	; 0x806098 <_jtag_arch>
    3b3a:	85 30       	cpi	r24, 0x05	; 5
    3b3c:	09 f0       	breq	.+2      	; 0x3b40 <main+0xff8>
    3b3e:	7c cf       	rjmp	.-264    	; 0x3a38 <main+0xef0>
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:321
            D1PRINTF(" HVTYPE=%02X\r\n", Device_Descriptor.UPDI.hvupdi_variant);
    3b40:	80 91 cd 60 	lds	r24, 0x60CD	; 0x8060cd <Device_Descriptor+0x2f>
    3b44:	1f 92       	push	r1
    3b46:	8f 93       	push	r24
    3b48:	8f e9       	ldi	r24, 0x9F	; 159
    3b4a:	94 e0       	ldi	r25, 0x04	; 4
    3b4c:	83 cf       	rjmp	.-250    	; 0x3a54 <main+0xf0c>
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:326
          }
  #endif
        }
      }
      else if (_section == 3) {     /* SET_GET_CTXT_OPTIONS */
    3b4e:	e3 e0       	ldi	r30, 0x03	; 3
    3b50:	de 12       	cpse	r13, r30
    3b52:	72 cf       	rjmp	.-284    	; 0x3a38 <main+0xef0>
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:327
        if (_index == 6) {          /* PARM3_OPT_12V_UPDI_ENABLE */
    3b54:	f6 e0       	ldi	r31, 0x06	; 6
    3b56:	cf 12       	cpse	r12, r31
    3b58:	05 c0       	rjmp	.+10     	; 0x3b64 <main+0x101c>
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:329
          /* Called with `-xhvupdi` */
          D1PRINTF(" HVCTRLEN=%02X\r\n", _data);
    3b5a:	ff 92       	push	r15
    3b5c:	ef 92       	push	r14
    3b5e:	8e e8       	ldi	r24, 0x8E	; 142
    3b60:	94 e0       	ldi	r25, 0x04	; 4
    3b62:	78 cf       	rjmp	.-272    	; 0x3a54 <main+0xf0c>
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:332
          _jtag_hvctrl = _data;     /* 1:ENABLE */
        }
        else if (_index == 7) {     /* PARM3_OPT_CHIP_ERASE_TO_ENTER */
    3b64:	27 e0       	ldi	r18, 0x07	; 7
    3b66:	c2 12       	cpse	r12, r18
    3b68:	67 cf       	rjmp	.-306    	; 0x3a38 <main+0xef0>
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:335
          /* force unlock chip-erase */
          /* This might be called having no `-e` or `-D`, but having `-F`. */
          D1PRINTF(" UNLOCKEN=%02X\r\n", _data);
    3b6a:	ff 92       	push	r15
    3b6c:	ef 92       	push	r14
    3b6e:	8d e7       	ldi	r24, 0x7D	; 125
    3b70:	94 e0       	ldi	r25, 0x04	; 4
    3b72:	70 cf       	rjmp	.-288    	; 0x3a54 <main+0xf0c>
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:341
          _jtag_unlock = _data;     /* 1:ENABLE */
        }
      }
      packet.in.res = 0x80;         /* RSP3_OK */
    }
    else if (_cmd == 0x02) {        /* CMD3_GET_PARAMETER */
    3b74:	32 e0       	ldi	r19, 0x02	; 2
    3b76:	f3 12       	cpse	r15, r19
    3b78:	64 c0       	rjmp	.+200    	; 0x3c42 <main+0x10fa>
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:342
      D1PRINTF(" AVR_GET_PARAMETER=%02X:%02X:%02X\r\n", _section, _index, _length);
    3b7a:	e7 2c       	mov	r14, r7
    3b7c:	f1 2c       	mov	r15, r1
    3b7e:	1f 92       	push	r1
    3b80:	7f 92       	push	r7
    3b82:	1f 92       	push	r1
    3b84:	cf 92       	push	r12
    3b86:	1f 92       	push	r1
    3b88:	df 92       	push	r13
    3b8a:	89 e5       	ldi	r24, 0x59	; 89
    3b8c:	94 e0       	ldi	r25, 0x04	; 4
    3b8e:	9f 93       	push	r25
    3b90:	8f 93       	push	r24
    3b92:	1f 93       	push	r17
    3b94:	0f 93       	push	r16
    3b96:	0e 94 29 0a 	call	0x1452	; 0x1452 <Print::printf(PGM_t const*, ...) [clone .constprop.21]>
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:343
      if (_section == 0) {          /* SET_GET_CTXT_CONFIG */
    3b9a:	cd bf       	out	0x3d, r28	; 61
    3b9c:	de bf       	out	0x3e, r29	; 62
    3b9e:	d1 10       	cpse	r13, r1
    3ba0:	22 c0       	rjmp	.+68     	; 0x3be6 <main+0x109e>
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:344
        if (_index == 0) {          /* PARM3_ARCH */
    3ba2:	c1 10       	cpse	r12, r1
    3ba4:	16 c0       	rjmp	.+44     	; 0x3bd2 <main+0x108a>
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:345
          D1PRINTF(" ARCH=%02X\r\n", _jtag_arch);
    3ba6:	80 91 98 60 	lds	r24, 0x6098	; 0x806098 <_jtag_arch>
    3baa:	1f 92       	push	r1
    3bac:	8f 93       	push	r24
    3bae:	8c e4       	ldi	r24, 0x4C	; 76
    3bb0:	94 e0       	ldi	r25, 0x04	; 4
    3bb2:	9f 93       	push	r25
    3bb4:	8f 93       	push	r24
    3bb6:	1f 93       	push	r17
    3bb8:	0f 93       	push	r16
    3bba:	0e 94 29 0a 	call	0x1452	; 0x1452 <Print::printf(PGM_t const*, ...) [clone .constprop.21]>
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:346
          packet.in.data[0] = _jtag_arch;
    3bbe:	80 91 98 60 	lds	r24, 0x6098	; 0x806098 <_jtag_arch>
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:352
        }
      }
      else if (_section == 1) {     /* SET_GET_CTXT_PHYSICAL */
        if (_index == 0) {          /* PARM3_CONNECTION */
          D1PRINTF(" CONNECTION=%02X\r\n", _jtag_conn);
          packet.in.data[0] = _jtag_conn;
    3bc2:	80 93 d5 60 	sts	0x60D5, r24	; 0x8060d5 <packet+0x7>
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:356
        }
        else if (_index == 0x31) {  /* PARM3_CLK_XMEGA_PDI */
          D1PRINTF(" XCLK=%d\r\n", _xclk);
          packet.in.wValue = _xclk;
    3bc6:	0f 90       	pop	r0
    3bc8:	0f 90       	pop	r0
    3bca:	0f 90       	pop	r0
    3bcc:	0f 90       	pop	r0
    3bce:	0f 90       	pop	r0
    3bd0:	0f 90       	pop	r0
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:359
        }
      }
      packet.in.res = 0x184;        /* RSP3_DATA */
    3bd2:	84 e8       	ldi	r24, 0x84	; 132
    3bd4:	91 e0       	ldi	r25, 0x01	; 1
    3bd6:	80 93 d3 60 	sts	0x60D3, r24	; 0x8060d3 <packet+0x5>
    3bda:	90 93 d4 60 	sts	0x60D4, r25	; 0x8060d4 <packet+0x6>
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:360
      _rspsize = _length + 1;
    3bde:	ff ef       	ldi	r31, 0xFF	; 255
    3be0:	ef 1a       	sub	r14, r31
    3be2:	ff 0a       	sbc	r15, r31
    3be4:	cb cd       	rjmp	.-1130   	; 0x377c <main+0xc34>
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:349
        if (_index == 0) {          /* PARM3_ARCH */
          D1PRINTF(" ARCH=%02X\r\n", _jtag_arch);
          packet.in.data[0] = _jtag_arch;
        }
      }
      else if (_section == 1) {     /* SET_GET_CTXT_PHYSICAL */
    3be6:	91 e0       	ldi	r25, 0x01	; 1
    3be8:	d9 12       	cpse	r13, r25
    3bea:	f3 cf       	rjmp	.-26     	; 0x3bd2 <main+0x108a>
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:350
        if (_index == 0) {          /* PARM3_CONNECTION */
    3bec:	c1 10       	cpse	r12, r1
    3bee:	0f c0       	rjmp	.+30     	; 0x3c0e <main+0x10c6>
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:351
          D1PRINTF(" CONNECTION=%02X\r\n", _jtag_conn);
    3bf0:	80 91 97 60 	lds	r24, 0x6097	; 0x806097 <_jtag_conn>
    3bf4:	1f 92       	push	r1
    3bf6:	8f 93       	push	r24
    3bf8:	89 e3       	ldi	r24, 0x39	; 57
    3bfa:	94 e0       	ldi	r25, 0x04	; 4
    3bfc:	9f 93       	push	r25
    3bfe:	8f 93       	push	r24
    3c00:	1f 93       	push	r17
    3c02:	0f 93       	push	r16
    3c04:	0e 94 29 0a 	call	0x1452	; 0x1452 <Print::printf(PGM_t const*, ...) [clone .constprop.21]>
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:352
          packet.in.data[0] = _jtag_conn;
    3c08:	80 91 97 60 	lds	r24, 0x6097	; 0x806097 <_jtag_conn>
    3c0c:	da cf       	rjmp	.-76     	; 0x3bc2 <main+0x107a>
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:354
        }
        else if (_index == 0x31) {  /* PARM3_CLK_XMEGA_PDI */
    3c0e:	e1 e3       	ldi	r30, 0x31	; 49
    3c10:	ce 12       	cpse	r12, r30
    3c12:	df cf       	rjmp	.-66     	; 0x3bd2 <main+0x108a>
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:355
          D1PRINTF(" XCLK=%d\r\n", _xclk);
    3c14:	80 91 19 60 	lds	r24, 0x6019	; 0x806019 <_xclk+0x1>
    3c18:	8f 93       	push	r24
    3c1a:	80 91 18 60 	lds	r24, 0x6018	; 0x806018 <_xclk>
    3c1e:	8f 93       	push	r24
    3c20:	8e e2       	ldi	r24, 0x2E	; 46
    3c22:	94 e0       	ldi	r25, 0x04	; 4
    3c24:	9f 93       	push	r25
    3c26:	8f 93       	push	r24
    3c28:	1f 93       	push	r17
    3c2a:	0f 93       	push	r16
    3c2c:	0e 94 29 0a 	call	0x1452	; 0x1452 <Print::printf(PGM_t const*, ...) [clone .constprop.21]>
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:356
          packet.in.wValue = _xclk;
    3c30:	80 91 18 60 	lds	r24, 0x6018	; 0x806018 <_xclk>
    3c34:	90 91 19 60 	lds	r25, 0x6019	; 0x806019 <_xclk+0x1>
    3c38:	80 93 d5 60 	sts	0x60D5, r24	; 0x8060d5 <packet+0x7>
    3c3c:	90 93 d6 60 	sts	0x60D6, r25	; 0x8060d6 <packet+0x8>
    3c40:	c2 cf       	rjmp	.-124    	; 0x3bc6 <main+0x107e>
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:367
  #ifdef _Not_yet_implemented_stub_
    else if (_jtag_arch == 0x01) _rspsize = DWIRE:jtag_scope_tiny();    /* dWire? */
    else if (_jtag_arch == 0x02) _rspsize = MEGA::jtag_scope_mega();    /* MEGA */
    else if (_jtag_arch == 0x03) _rspsize = XMEGA::jtag_scope_xmega();  /* XMEGA */
  #endif
    else if (_jtag_arch == 0x05) _rspsize = UPDI::jtag_scope_updi();    /* UPDI support */
    3c42:	80 91 98 60 	lds	r24, 0x6098	; 0x806098 <_jtag_arch>
    3c46:	85 30       	cpi	r24, 0x05	; 5
    3c48:	09 f0       	breq	.+2      	; 0x3c4c <main+0x1104>
    3c4a:	60 c1       	rjmp	.+704    	; 0x3f0c <main+0x13c4>
jtag_scope_updi():
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:406

  /* ARCH=UPDI scope Provides functionality. */
  size_t jtag_scope_updi (void) {
    size_t _rspsize = 0;
    uint8_t _cmd = packet.out.cmd;
    if (_cmd == 0x10) {             /* CMD3_SIGN_ON */
    3c4c:	20 e1       	ldi	r18, 0x10	; 16
    3c4e:	f2 12       	cpse	r15, r18
    3c50:	51 c0       	rjmp	.+162    	; 0x3cf4 <main+0x11ac>
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:407
      D1PRINTF(" UPDI_SIGN_ON=EXT:%02X\r\n", packet.out.bMType);
    3c52:	1f 92       	push	r1
    3c54:	df 92       	push	r13
    3c56:	85 e1       	ldi	r24, 0x15	; 21
    3c58:	94 e0       	ldi	r25, 0x04	; 4
    3c5a:	9f 93       	push	r25
    3c5c:	8f 93       	push	r24
    3c5e:	1f 93       	push	r17
    3c60:	0f 93       	push	r16
    3c62:	0e 94 29 0a 	call	0x1452	; 0x1452 <Print::printf(PGM_t const*, ...) [clone .constprop.21]>
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:408
      USART::setup();
    3c66:	0e 94 be 0f 	call	0x1f7c	; 0x1f7c <USART::setup()>
change_updi():
/Users/askn/Collaborator/UPDI4AVR-USB/src/usart.cpp:79
  #endif
  }

  /*** Sets up single-wire asynchronous mode for UPDI operation. ***/
  void change_updi (void) {
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    3c6a:	ef b6       	in	r14, 0x3f	; 63
__iCliRetVal():
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/tools/avr-gcc/7.3.0-avr8-gnu-toolchain/avr/include/util/atomic.h:50
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    3c6c:	f8 94       	cli
change_updi():
/Users/askn/Collaborator/UPDI4AVR-USB/src/usart.cpp:80
      D1PRINTF(" UART=UPDI\r\n");
    3c6e:	8d e7       	ldi	r24, 0x7D	; 125
    3c70:	93 e0       	ldi	r25, 0x03	; 3
    3c72:	9f 93       	push	r25
    3c74:	8f 93       	push	r24
    3c76:	1f 93       	push	r17
    3c78:	0f 93       	push	r16
    3c7a:	0e 94 29 0a 	call	0x1452	; 0x1452 <Print::printf(PGM_t const*, ...) [clone .constprop.21]>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usart.cpp:81
      PORTMUX_USARTROUTEA = PORTMUX_USART_UPDI;
    3c7e:	f0 92 e2 05 	sts	0x05E2, r15	; 0x8005e2 <__TEXT_REGION_LENGTH__+0x7f05e2>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usart.cpp:82
      USART0_STATUS = USART_DREIF_bm;
    3c82:	80 e2       	ldi	r24, 0x20	; 32
    3c84:	80 93 04 08 	sts	0x0804, r24	; 0x800804 <__TEXT_REGION_LENGTH__+0x7f0804>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usart.cpp:83
      USART0_BAUD  = calk_baud_khz(_xclk);
    3c88:	80 91 18 60 	lds	r24, 0x6018	; 0x806018 <_xclk>
    3c8c:	90 91 19 60 	lds	r25, 0x6019	; 0x806019 <_xclk+0x1>
    3c90:	0e 94 74 05 	call	0xae8	; 0xae8 <USART::calk_baud_khz(unsigned int)>
    3c94:	80 93 08 08 	sts	0x0808, r24	; 0x800808 <__TEXT_REGION_LENGTH__+0x7f0808>
    3c98:	90 93 09 08 	sts	0x0809, r25	; 0x800809 <__TEXT_REGION_LENGTH__+0x7f0809>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usart.cpp:84
      USART0_CTRLC = USART_CHSIZE_8BIT_gc | USART_PMODE_EVEN_gc | USART_SBMODE_2BIT_gc;
    3c9c:	8b e2       	ldi	r24, 0x2B	; 43
    3c9e:	80 93 07 08 	sts	0x0807, r24	; 0x800807 <__TEXT_REGION_LENGTH__+0x7f0807>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usart.cpp:87
      /* The RS485_INT:_BV(1) attribute is undocumented but works fine.     */
      /* Without it, an additional delay is required before sending a byte. */
      USART0_CTRLA = USART_LBME_bm | USART_RS485_INT_gc;
    3ca2:	8a e0       	ldi	r24, 0x0A	; 10
    3ca4:	80 93 05 08 	sts	0x0805, r24	; 0x800805 <__TEXT_REGION_LENGTH__+0x7f0805>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usart.cpp:88
      USART0_CTRLB = USART_RXEN_bm | USART_TXEN_bm | USART_ODME_bm;
    3ca8:	88 ec       	ldi	r24, 0xC8	; 200
    3caa:	80 93 06 08 	sts	0x0806, r24	; 0x800806 <__TEXT_REGION_LENGTH__+0x7f0806>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usart.cpp:89
      D1PRINTF(" BAUD=%04X:%02X\r\n", USART0_BAUD, USART0_CTRLB);
    3cae:	20 91 06 08 	lds	r18, 0x0806	; 0x800806 <__TEXT_REGION_LENGTH__+0x7f0806>
    3cb2:	80 91 08 08 	lds	r24, 0x0808	; 0x800808 <__TEXT_REGION_LENGTH__+0x7f0808>
    3cb6:	90 91 09 08 	lds	r25, 0x0809	; 0x800809 <__TEXT_REGION_LENGTH__+0x7f0809>
    3cba:	1f 92       	push	r1
    3cbc:	2f 93       	push	r18
    3cbe:	9f 93       	push	r25
    3cc0:	8f 93       	push	r24
    3cc2:	8b e6       	ldi	r24, 0x6B	; 107
    3cc4:	93 e0       	ldi	r25, 0x03	; 3
    3cc6:	9f 93       	push	r25
    3cc8:	8f 93       	push	r24
    3cca:	1f 93       	push	r17
    3ccc:	0f 93       	push	r16
    3cce:	0e 94 29 0a 	call	0x1452	; 0x1452 <Print::printf(PGM_t const*, ...) [clone .constprop.21]>
__iRestore():
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/tools/avr-gcc/7.3.0-avr8-gnu-toolchain/avr/include/util/atomic.h:70
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    3cd2:	ef be       	out	0x3f, r14	; 63
jtag_scope_updi():
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:410
      USART::change_updi();
      _rspsize = Timeout::command(&connect);
    3cd4:	88 ec       	ldi	r24, 0xC8	; 200
    3cd6:	91 e1       	ldi	r25, 0x11	; 17
    3cd8:	0e 94 25 15 	call	0x2a4a	; 0x2a4a <Timeout::command(unsigned int (*)(), unsigned int) [clone .constprop.16]>
    3cdc:	7c 01       	movw	r14, r24
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:412
      /* If it fails here, it is expected to try again, giving it a chance at HV control. */
      packet.in.res = _rspsize ? 0x84 : 0xA0; /* RSP3_DATA : RSP3_FAILED */
    3cde:	cd bf       	out	0x3d, r28	; 61
    3ce0:	de bf       	out	0x3e, r29	; 62
main():
    3ce2:	84 e8       	ldi	r24, 0x84	; 132
    3ce4:	90 e0       	ldi	r25, 0x00	; 0
jtag_scope_updi():
    3ce6:	e1 14       	cp	r14, r1
    3ce8:	f1 04       	cpc	r15, r1
    3cea:	09 f0       	breq	.+2      	; 0x3cee <main+0x11a6>
    3cec:	bc c0       	rjmp	.+376    	; 0x3e66 <main+0x131e>
main():
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:465
    else if (_cmd == 0x23) {        /* CMD3_WRITE_MEMORY */
      D1PRINTF(" UPDI_WRITE=%02X:%06lX:%04X\r\n", packet.out.bMType,
        packet.out.dwAddr, (size_t)packet.out.dwLength);
      _rspsize = Timeout::command(Command_Table.write_memory);
    }
    packet.in.res = _rspsize ? 0x80 : 0xA0;   /* RSP3_OK : RSP3_FAILED */
    3cee:	80 ea       	ldi	r24, 0xA0	; 160
    3cf0:	90 e0       	ldi	r25, 0x00	; 0
    3cf2:	b9 c0       	rjmp	.+370    	; 0x3e66 <main+0x131e>
jtag_scope_updi():
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:415
      _rspsize = Timeout::command(&connect);
      /* If it fails here, it is expected to try again, giving it a chance at HV control. */
      packet.in.res = _rspsize ? 0x84 : 0xA0; /* RSP3_DATA : RSP3_FAILED */
      return _rspsize;
    }
    else if (_cmd == 0x11) {        /* CMD3_SIGN_OFF */
    3cf4:	91 e1       	ldi	r25, 0x11	; 17
    3cf6:	f9 12       	cpse	r15, r25
    3cf8:	1f c0       	rjmp	.+62     	; 0x3d38 <main+0x11f0>
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:416
      D1PRINTF(" UPDI_SIGN_OFF\r\n");
    3cfa:	84 e0       	ldi	r24, 0x04	; 4
    3cfc:	94 e0       	ldi	r25, 0x04	; 4
    3cfe:	9f 93       	push	r25
    3d00:	8f 93       	push	r24
    3d02:	1f 93       	push	r17
    3d04:	0f 93       	push	r16
    3d06:	0e 94 29 0a 	call	0x1452	; 0x1452 <Print::printf(PGM_t const*, ...) [clone .constprop.21]>
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:418
      /* If UPDI control has failed, RSP3_OK is always returned. */
      _rspsize = bit_is_set(PGCONF, PGCONF_UPDI_bp) ? Timeout::command(&disconnect) : 1;
    3d0a:	0f 90       	pop	r0
    3d0c:	0f 90       	pop	r0
    3d0e:	0f 90       	pop	r0
    3d10:	0f 90       	pop	r0
    3d12:	e8 9b       	sbis	0x1d, 0	; 29
    3d14:	0d c0       	rjmp	.+26     	; 0x3d30 <main+0x11e8>
    3d16:	81 ea       	ldi	r24, 0xA1	; 161
    3d18:	91 e1       	ldi	r25, 0x11	; 17
    3d1a:	0e 94 25 15 	call	0x2a4a	; 0x2a4a <Timeout::command(unsigned int (*)(), unsigned int) [clone .constprop.16]>
    3d1e:	7c 01       	movw	r14, r24
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:419
      USART::setup();
    3d20:	0e 94 be 0f 	call	0x1f7c	; 0x1f7c <USART::setup()>
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:420
      USART::change_vcp();
    3d24:	0e 94 4d 0a 	call	0x149a	; 0x149a <USART::change_vcp()>
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:465
    else if (_cmd == 0x23) {        /* CMD3_WRITE_MEMORY */
      D1PRINTF(" UPDI_WRITE=%02X:%06lX:%04X\r\n", packet.out.bMType,
        packet.out.dwAddr, (size_t)packet.out.dwLength);
      _rspsize = Timeout::command(Command_Table.write_memory);
    }
    packet.in.res = _rspsize ? 0x80 : 0xA0;   /* RSP3_OK : RSP3_FAILED */
    3d28:	e1 14       	cp	r14, r1
    3d2a:	f1 04       	cpc	r15, r1
    3d2c:	01 f3       	breq	.-64     	; 0x3cee <main+0x11a6>
    3d2e:	31 c0       	rjmp	.+98     	; 0x3d92 <main+0x124a>
main():
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:418
      return _rspsize;
    }
    else if (_cmd == 0x11) {        /* CMD3_SIGN_OFF */
      D1PRINTF(" UPDI_SIGN_OFF\r\n");
      /* If UPDI control has failed, RSP3_OK is always returned. */
      _rspsize = bit_is_set(PGCONF, PGCONF_UPDI_bp) ? Timeout::command(&disconnect) : 1;
    3d30:	ee 24       	eor	r14, r14
    3d32:	e3 94       	inc	r14
    3d34:	f1 2c       	mov	r15, r1
    3d36:	f4 cf       	rjmp	.-24     	; 0x3d20 <main+0x11d8>
jtag_scope_updi():
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:422
      USART::setup();
      USART::change_vcp();
    }
    else if (_cmd == 0x15) {        /* CMD3_ENTER_PROGMODE */
    3d38:	e5 e1       	ldi	r30, 0x15	; 21
    3d3a:	fe 12       	cpse	r15, r30
    3d3c:	18 c0       	rjmp	.+48     	; 0x3d6e <main+0x1226>
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:423
      D1PRINTF(" UPDI_ENTER_PROG\r\n");
    3d3e:	81 ef       	ldi	r24, 0xF1	; 241
    3d40:	93 e0       	ldi	r25, 0x03	; 3
    3d42:	9f 93       	push	r25
    3d44:	8f 93       	push	r24
    3d46:	1f 93       	push	r17
    3d48:	0f 93       	push	r16
    3d4a:	0e 94 29 0a 	call	0x1452	; 0x1452 <Print::printf(PGM_t const*, ...) [clone .constprop.21]>
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:426
      /* On failure, RSP3_OK is returned if a UPDI connection is available. */
      /* Locked devices are given the opportunity to write to USERROW and erase the chip. */
      _rspsize = Timeout::command(&enter_progmode) || bit_is_set(PGCONF, PGCONF_UPDI_bp);
    3d4e:	84 e5       	ldi	r24, 0x54	; 84
    3d50:	9b e0       	ldi	r25, 0x0B	; 11
    3d52:	0e 94 25 15 	call	0x2a4a	; 0x2a4a <Timeout::command(unsigned int (*)(), unsigned int) [clone .constprop.16]>
    3d56:	0f 90       	pop	r0
    3d58:	0f 90       	pop	r0
    3d5a:	0f 90       	pop	r0
    3d5c:	0f 90       	pop	r0
    3d5e:	89 2b       	or	r24, r25
    3d60:	21 f4       	brne	.+8      	; 0x3d6a <main+0x1222>
    3d62:	ed b2       	in	r14, 0x1d	; 29
    3d64:	fe 2d       	mov	r31, r14
    3d66:	f1 70       	andi	r31, 0x01	; 1
    3d68:	ef 2e       	mov	r14, r31
    3d6a:	f1 2c       	mov	r15, r1
    3d6c:	dd cf       	rjmp	.-70     	; 0x3d28 <main+0x11e0>
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:428
    }
    else if (_cmd == 0x16) {        /* CMD3_LEAVE_PROGMODE */
    3d6e:	26 e1       	ldi	r18, 0x16	; 22
    3d70:	f2 12       	cpse	r15, r18
    3d72:	12 c0       	rjmp	.+36     	; 0x3d98 <main+0x1250>
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:429
      D1PRINTF(" UPDI_LEAVE_PROG\r\n");
    3d74:	8e ed       	ldi	r24, 0xDE	; 222
    3d76:	93 e0       	ldi	r25, 0x03	; 3
    3d78:	9f 93       	push	r25
    3d7a:	8f 93       	push	r24
    3d7c:	1f 93       	push	r17
    3d7e:	0f 93       	push	r16
    3d80:	0e 94 29 0a 	call	0x1452	; 0x1452 <Print::printf(PGM_t const*, ...) [clone .constprop.21]>
    3d84:	0f 90       	pop	r0
    3d86:	0f 90       	pop	r0
    3d88:	0f 90       	pop	r0
    3d8a:	0f 90       	pop	r0
main():
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:432
      /* There is nothing to do. */
      /* The actual termination process is delayed until CMD3_SIGN_OFF. */
      _rspsize = 1;
    3d8c:	ee 24       	eor	r14, r14
    3d8e:	e3 94       	inc	r14
    3d90:	f1 2c       	mov	r15, r1
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:465
    else if (_cmd == 0x23) {        /* CMD3_WRITE_MEMORY */
      D1PRINTF(" UPDI_WRITE=%02X:%06lX:%04X\r\n", packet.out.bMType,
        packet.out.dwAddr, (size_t)packet.out.dwLength);
      _rspsize = Timeout::command(Command_Table.write_memory);
    }
    packet.in.res = _rspsize ? 0x80 : 0xA0;   /* RSP3_OK : RSP3_FAILED */
    3d92:	80 e8       	ldi	r24, 0x80	; 128
    3d94:	90 e0       	ldi	r25, 0x00	; 0
    3d96:	67 c0       	rjmp	.+206    	; 0x3e66 <main+0x131e>
jtag_scope_updi():
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:434
      D1PRINTF(" UPDI_LEAVE_PROG\r\n");
      /* There is nothing to do. */
      /* The actual termination process is delayed until CMD3_SIGN_OFF. */
      _rspsize = 1;
    }
    else if (_cmd == 0x20) {        /* CMD3_ERASE_MEMORY */
    3d98:	30 e2       	ldi	r19, 0x20	; 32
    3d9a:	f3 12       	cpse	r15, r19
    3d9c:	20 c0       	rjmp	.+64     	; 0x3dde <main+0x1296>
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:435
      D1PRINTF(" UPDI_ERASE=%02X:%06lX\r\n",
    3d9e:	80 91 d9 60 	lds	r24, 0x60D9	; 0x8060d9 <packet+0xb>
    3da2:	8f 93       	push	r24
    3da4:	80 91 d8 60 	lds	r24, 0x60D8	; 0x8060d8 <packet+0xa>
    3da8:	8f 93       	push	r24
    3daa:	80 91 d7 60 	lds	r24, 0x60D7	; 0x8060d7 <packet+0x9>
    3dae:	8f 93       	push	r24
    3db0:	80 91 d6 60 	lds	r24, 0x60D6	; 0x8060d6 <packet+0x8>
    3db4:	8f 93       	push	r24
    3db6:	1f 92       	push	r1
    3db8:	df 92       	push	r13
    3dba:	85 ec       	ldi	r24, 0xC5	; 197
    3dbc:	93 e0       	ldi	r25, 0x03	; 3
    3dbe:	9f 93       	push	r25
    3dc0:	8f 93       	push	r24
    3dc2:	1f 93       	push	r17
    3dc4:	0f 93       	push	r16
    3dc6:	0e 94 29 0a 	call	0x1452	; 0x1452 <Print::printf(PGM_t const*, ...) [clone .constprop.21]>
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:437
        packet.out.bEType, packet.out.dwPageAddr);
      _rspsize = Timeout::command(Command_Table.erase_memory);
    3dca:	80 91 12 63 	lds	r24, 0x6312	; 0x806312 <Command_Table+0x4>
    3dce:	90 91 13 63 	lds	r25, 0x6313	; 0x806313 <Command_Table+0x5>
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:463
      return _rspsize;
    }
    else if (_cmd == 0x23) {        /* CMD3_WRITE_MEMORY */
      D1PRINTF(" UPDI_WRITE=%02X:%06lX:%04X\r\n", packet.out.bMType,
        packet.out.dwAddr, (size_t)packet.out.dwLength);
      _rspsize = Timeout::command(Command_Table.write_memory);
    3dd2:	0e 94 25 15 	call	0x2a4a	; 0x2a4a <Timeout::command(unsigned int (*)(), unsigned int) [clone .constprop.16]>
    3dd6:	7c 01       	movw	r14, r24
    3dd8:	cd bf       	out	0x3d, r28	; 61
    3dda:	de bf       	out	0x3e, r29	; 62
    3ddc:	a5 cf       	rjmp	.-182    	; 0x3d28 <main+0x11e0>
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:439
    else if (_cmd == 0x20) {        /* CMD3_ERASE_MEMORY */
      D1PRINTF(" UPDI_ERASE=%02X:%06lX\r\n",
        packet.out.bEType, packet.out.dwPageAddr);
      _rspsize = Timeout::command(Command_Table.erase_memory);
    }
    else if (bit_is_clear(PGCONF, PGCONF_UPDI_bp)) { /* empty */ }
    3dde:	e8 9b       	sbis	0x1d, 0	; 29
    3de0:	92 c0       	rjmp	.+292    	; 0x3f06 <main+0x13be>
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:440
    else if (_cmd == 0x21) {        /* CMD3_READ_MEMORY */
    3de2:	91 e2       	ldi	r25, 0x21	; 33
    3de4:	f9 12       	cpse	r15, r25
    3de6:	6b c0       	rjmp	.+214    	; 0x3ebe <main+0x1376>
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:441
      D1PRINTF(" UPDI_READ=%02X:%06lX:%04X\r\n", packet.out.bMType,
    3de8:	80 91 db 60 	lds	r24, 0x60DB	; 0x8060db <packet+0xd>
    3dec:	8f 93       	push	r24
    3dee:	80 91 da 60 	lds	r24, 0x60DA	; 0x8060da <packet+0xc>
    3df2:	8f 93       	push	r24
    3df4:	80 91 d9 60 	lds	r24, 0x60D9	; 0x8060d9 <packet+0xb>
    3df8:	8f 93       	push	r24
    3dfa:	80 91 d8 60 	lds	r24, 0x60D8	; 0x8060d8 <packet+0xa>
    3dfe:	8f 93       	push	r24
    3e00:	80 91 d7 60 	lds	r24, 0x60D7	; 0x8060d7 <packet+0x9>
    3e04:	8f 93       	push	r24
    3e06:	80 91 d6 60 	lds	r24, 0x60D6	; 0x8060d6 <packet+0x8>
    3e0a:	8f 93       	push	r24
    3e0c:	1f 92       	push	r1
    3e0e:	df 92       	push	r13
    3e10:	88 ea       	ldi	r24, 0xA8	; 168
    3e12:	93 e0       	ldi	r25, 0x03	; 3
    3e14:	9f 93       	push	r25
    3e16:	8f 93       	push	r24
    3e18:	1f 93       	push	r17
    3e1a:	0f 93       	push	r16
    3e1c:	0e 94 29 0a 	call	0x1452	; 0x1452 <Print::printf(PGM_t const*, ...) [clone .constprop.21]>
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:443
        packet.out.dwAddr, (size_t)packet.out.dwLength);
      uint8_t m_type = packet.out.bMType;
    3e20:	80 91 d5 60 	lds	r24, 0x60D5	; 0x8060d5 <packet+0x7>
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:444
      size_t _wLength = packet.out.dwLength;
    3e24:	e0 90 da 60 	lds	r14, 0x60DA	; 0x8060da <packet+0xc>
    3e28:	f0 90 db 60 	lds	r15, 0x60DB	; 0x8060db <packet+0xd>
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:445
      if (m_type == 0xD3) {         /* MTYPE_SIB */
    3e2c:	cd bf       	out	0x3d, r28	; 61
    3e2e:	de bf       	out	0x3e, r29	; 62
    3e30:	83 3d       	cpi	r24, 0xD3	; 211
    3e32:	f1 f4       	brne	.+60     	; 0x3e70 <main+0x1328>
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:447
        /* The SIB request occurs before ENTER_PROGMODE. */
        memcpy(&packet.in.data[(uint8_t)packet.out.dwAddr & 31], &_sib, ((_wLength - 1) & 31) + 1);
    3e34:	80 91 d6 60 	lds	r24, 0x60D6	; 0x8060d6 <packet+0x8>
    3e38:	8f 71       	andi	r24, 0x1F	; 31
    3e3a:	90 e0       	ldi	r25, 0x00	; 0
    3e3c:	a7 01       	movw	r20, r14
    3e3e:	41 50       	subi	r20, 0x01	; 1
    3e40:	51 09       	sbc	r21, r1
    3e42:	4f 71       	andi	r20, 0x1F	; 31
    3e44:	55 27       	eor	r21, r21
    3e46:	4f 5f       	subi	r20, 0xFF	; 255
    3e48:	5f 4f       	sbci	r21, 0xFF	; 255
    3e4a:	6e ee       	ldi	r22, 0xEE	; 238
    3e4c:	72 e6       	ldi	r23, 0x62	; 98
    3e4e:	8b 52       	subi	r24, 0x2B	; 43
    3e50:	9f 49       	sbci	r25, 0x9F	; 159
    3e52:	85 d5       	rcall	.+2826   	; 0x495e <memcpy>
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:448
        _rspsize = _wLength + 1;
    3e54:	ff ef       	ldi	r31, 0xFF	; 255
    3e56:	ef 1a       	sub	r14, r31
    3e58:	ff 0a       	sbc	r15, r31
main():
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:457
      }
      /* If not in PROGMODE, respond with a dummy. */
      /* A dummy SIG will be returned for locked devices. */
      /* This will prevent AVRDUDE from displaying annoying errors. */
      else _rspsize = read_dummy();
      packet.in.res = _rspsize ? 0x184 : 0xA0;
    3e5a:	84 e8       	ldi	r24, 0x84	; 132
    3e5c:	91 e0       	ldi	r25, 0x01	; 1
jtag_scope_updi():
    3e5e:	e1 14       	cp	r14, r1
    3e60:	f1 04       	cpc	r15, r1
    3e62:	09 f4       	brne	.+2      	; 0x3e66 <main+0x131e>
    3e64:	44 cf       	rjmp	.-376    	; 0x3cee <main+0x11a6>
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:465
    else if (_cmd == 0x23) {        /* CMD3_WRITE_MEMORY */
      D1PRINTF(" UPDI_WRITE=%02X:%06lX:%04X\r\n", packet.out.bMType,
        packet.out.dwAddr, (size_t)packet.out.dwLength);
      _rspsize = Timeout::command(Command_Table.write_memory);
    }
    packet.in.res = _rspsize ? 0x80 : 0xA0;   /* RSP3_OK : RSP3_FAILED */
    3e66:	80 93 d3 60 	sts	0x60D3, r24	; 0x8060d3 <packet+0x5>
    3e6a:	90 93 d4 60 	sts	0x60D4, r25	; 0x8060d4 <packet+0x6>
    3e6e:	86 cc       	rjmp	.-1780   	; 0x377c <main+0xc34>
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:450
      if (m_type == 0xD3) {         /* MTYPE_SIB */
        /* The SIB request occurs before ENTER_PROGMODE. */
        memcpy(&packet.in.data[(uint8_t)packet.out.dwAddr & 31], &_sib, ((_wLength - 1) & 31) + 1);
        _rspsize = _wLength + 1;
      }
      else if (bit_is_set(PGCONF, PGCONF_PROG_bp)) {
    3e70:	e9 9b       	sbis	0x1d, 1	; 29
    3e72:	08 c0       	rjmp	.+16     	; 0x3e84 <main+0x133c>
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:451
        _rspsize = Timeout::command(Command_Table.read_memory);
    3e74:	80 91 10 63 	lds	r24, 0x6310	; 0x806310 <Command_Table+0x2>
    3e78:	90 91 11 63 	lds	r25, 0x6311	; 0x806311 <Command_Table+0x3>
    3e7c:	0e 94 25 15 	call	0x2a4a	; 0x2a4a <Timeout::command(unsigned int (*)(), unsigned int) [clone .constprop.16]>
    3e80:	7c 01       	movw	r14, r24
    3e82:	eb cf       	rjmp	.-42     	; 0x3e5a <main+0x1312>
read_dummy():
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:304
   * Read dummy memory if necessary.
   */
  size_t read_dummy (void) {
    uint8_t  m_type = packet.out.bMType;
    size_t _wLength = packet.out.dwLength;
    if (m_type == 0xB4 && _sib[0]) {
    3e84:	84 3b       	cpi	r24, 0xB4	; 180
    3e86:	a1 f4       	brne	.+40     	; 0x3eb0 <main+0x1368>
    3e88:	80 91 ee 62 	lds	r24, 0x62EE	; 0x8062ee <_sib>
    3e8c:	88 23       	and	r24, r24
    3e8e:	81 f0       	breq	.+32     	; 0x3eb0 <main+0x1368>
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:307
      /* The SIGNATURE of a locked device cannot be read.            */
      /* But, the SIB can be read, so a Dummy SIGNATURE is returned. */
      packet.in.data[0] = 0x1E;
    3e90:	9e e1       	ldi	r25, 0x1E	; 30
    3e92:	90 93 d5 60 	sts	0x60D5, r25	; 0x8060d5 <packet+0x7>
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:308
      packet.in.data[1] = _sib[0] == ' ' ? 'A' : _sib[0];
    3e96:	80 32       	cpi	r24, 0x20	; 32
    3e98:	09 f4       	brne	.+2      	; 0x3e9c <main+0x1354>
main():
    3e9a:	81 e4       	ldi	r24, 0x41	; 65
read_dummy():
    3e9c:	80 93 d6 60 	sts	0x60D6, r24	; 0x8060d6 <packet+0x8>
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:309
      packet.in.data[2] = _sib[10];
    3ea0:	80 91 f8 62 	lds	r24, 0x62F8	; 0x8062f8 <_sib+0xa>
    3ea4:	80 93 d7 60 	sts	0x60D7, r24	; 0x8060d7 <packet+0x9>
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:312
    }
    else memset(&packet.in.data[0], 0xFF, _wLength);
    return _wLength + 1;
    3ea8:	2f ef       	ldi	r18, 0xFF	; 255
    3eaa:	e2 1a       	sub	r14, r18
    3eac:	f2 0a       	sbc	r15, r18
    3eae:	d5 cf       	rjmp	.-86     	; 0x3e5a <main+0x1312>
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:311
      /* But, the SIB can be read, so a Dummy SIGNATURE is returned. */
      packet.in.data[0] = 0x1E;
      packet.in.data[1] = _sib[0] == ' ' ? 'A' : _sib[0];
      packet.in.data[2] = _sib[10];
    }
    else memset(&packet.in.data[0], 0xFF, _wLength);
    3eb0:	a7 01       	movw	r20, r14
    3eb2:	6f ef       	ldi	r22, 0xFF	; 255
    3eb4:	70 e0       	ldi	r23, 0x00	; 0
    3eb6:	85 ed       	ldi	r24, 0xD5	; 213
    3eb8:	90 e6       	ldi	r25, 0x60	; 96
    3eba:	5a d5       	rcall	.+2740   	; 0x4970 <memset>
    3ebc:	f5 cf       	rjmp	.-22     	; 0x3ea8 <main+0x1360>
jtag_scope_updi():
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:460
      /* This will prevent AVRDUDE from displaying annoying errors. */
      else _rspsize = read_dummy();
      packet.in.res = _rspsize ? 0x184 : 0xA0;
      return _rspsize;
    }
    else if (_cmd == 0x23) {        /* CMD3_WRITE_MEMORY */
    3ebe:	33 e2       	ldi	r19, 0x23	; 35
    3ec0:	f3 12       	cpse	r15, r19
    3ec2:	21 c0       	rjmp	.+66     	; 0x3f06 <main+0x13be>
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:461
      D1PRINTF(" UPDI_WRITE=%02X:%06lX:%04X\r\n", packet.out.bMType,
    3ec4:	80 91 db 60 	lds	r24, 0x60DB	; 0x8060db <packet+0xd>
    3ec8:	8f 93       	push	r24
    3eca:	80 91 da 60 	lds	r24, 0x60DA	; 0x8060da <packet+0xc>
    3ece:	8f 93       	push	r24
    3ed0:	80 91 d9 60 	lds	r24, 0x60D9	; 0x8060d9 <packet+0xb>
    3ed4:	8f 93       	push	r24
    3ed6:	80 91 d8 60 	lds	r24, 0x60D8	; 0x8060d8 <packet+0xa>
    3eda:	8f 93       	push	r24
    3edc:	80 91 d7 60 	lds	r24, 0x60D7	; 0x8060d7 <packet+0x9>
    3ee0:	8f 93       	push	r24
    3ee2:	80 91 d6 60 	lds	r24, 0x60D6	; 0x8060d6 <packet+0x8>
    3ee6:	8f 93       	push	r24
    3ee8:	1f 92       	push	r1
    3eea:	df 92       	push	r13
    3eec:	8a e8       	ldi	r24, 0x8A	; 138
    3eee:	93 e0       	ldi	r25, 0x03	; 3
    3ef0:	9f 93       	push	r25
    3ef2:	8f 93       	push	r24
    3ef4:	1f 93       	push	r17
    3ef6:	0f 93       	push	r16
    3ef8:	0e 94 29 0a 	call	0x1452	; 0x1452 <Print::printf(PGM_t const*, ...) [clone .constprop.21]>
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:463
        packet.out.dwAddr, (size_t)packet.out.dwLength);
      _rspsize = Timeout::command(Command_Table.write_memory);
    3efc:	80 91 14 63 	lds	r24, 0x6314	; 0x806314 <Command_Table+0x6>
    3f00:	90 91 15 63 	lds	r25, 0x6315	; 0x806315 <Command_Table+0x7>
    3f04:	66 cf       	rjmp	.-308    	; 0x3dd2 <main+0x128a>
main():
/Users/askn/Collaborator/UPDI4AVR-USB/src/updi.cpp:404
    return (*Command_Table.prog_init)();
  }

  /* ARCH=UPDI scope Provides functionality. */
  size_t jtag_scope_updi (void) {
    size_t _rspsize = 0;
    3f06:	f1 2c       	mov	r15, r1
    3f08:	e1 2c       	mov	r14, r1
    3f0a:	f1 ce       	rjmp	.-542    	; 0x3cee <main+0x11a6>
jtag_scope_avr_core():
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:368
    else packet.in.res = 0xA0;      /* RSP3_FAILED */
    3f0c:	80 ea       	ldi	r24, 0xA0	; 160
    3f0e:	90 e0       	ldi	r25, 0x00	; 0
    3f10:	95 cd       	rjmp	.-1238   	; 0x3a3c <main+0xef4>
jtag_scope_branch():
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:391
    else if (_scope == 0x13) _rspsize = AVR32::jtag_scope_avr32();  /* SCOPE_AVR32 */
  #endif
    else if (_scope == 0x12) _rspsize = jtag_scope_avr_core();      /* SCOPE_AVR */
  #ifdef CONFIG_PGM_TPI_ENABLE
    /* The 14P models have limited TPI support due to insufficient pin count. */
    else if (_scope == 0x14) _rspsize = TPI::jtag_scope_tpi();      /* SCOPE_AVR_TPI */
    3f12:	94 e1       	ldi	r25, 0x14	; 20
    3f14:	f9 12       	cpse	r15, r25
    3f16:	46 c1       	rjmp	.+652    	; 0x41a4 <main+0x165c>
jtag_scope_tpi():
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:305
   * It doesn't seem to be implemented in the "mEDBG".
   * which means it will start immediately with XPRG_CMD_ENTER_PROGMODE.
   */
  size_t jtag_scope_tpi (void) {
    size_t _rspsize = 0;  /* Make final adjustments. */
    uint8_t _cmd    = packet.out.cmd;
    3f18:	80 91 d3 60 	lds	r24, 0x60D3	; 0x8060d3 <packet+0x5>
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:306
    if (_cmd == 0x01) {             /* XPRG_CMD_ENTER_PROGMODE */
    3f1c:	81 30       	cpi	r24, 0x01	; 1
    3f1e:	09 f0       	breq	.+2      	; 0x3f22 <main+0x13da>
    3f20:	6c c0       	rjmp	.+216    	; 0x3ffa <main+0x14b2>
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:307
      D1PRINTF(" TPI_ENTER_PROGMODE\r\n");
    3f22:	8c ed       	ldi	r24, 0xDC	; 220
    3f24:	95 e0       	ldi	r25, 0x05	; 5
    3f26:	9f 93       	push	r25
    3f28:	8f 93       	push	r24
    3f2a:	1f 93       	push	r17
    3f2c:	0f 93       	push	r16
    3f2e:	0e 94 29 0a 	call	0x1452	; 0x1452 <Print::printf(PGM_t const*, ...) [clone .constprop.21]>
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:308
      USART::setup();
    3f32:	0e 94 be 0f 	call	0x1f7c	; 0x1f7c <USART::setup()>
change_tpi():
/Users/askn/Collaborator/UPDI4AVR-USB/src/usart.cpp:96
  }

  /*** Set up single-wire synchronous mode for TPI operation. ***/
  /* The VCD-TxD is repurposed to transmit the synchronous clock. */
  void change_tpi (void) {
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    3f36:	ff b6       	in	r15, 0x3f	; 63
__iCliRetVal():
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/tools/avr-gcc/7.3.0-avr8-gnu-toolchain/avr/include/util/atomic.h:50
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    3f38:	f8 94       	cli
change_tpi():
/Users/askn/Collaborator/UPDI4AVR-USB/src/usart.cpp:97
      D1PRINTF(" UART=TPI\r\n");
    3f3a:	84 e4       	ldi	r24, 0x44	; 68
    3f3c:	95 e0       	ldi	r25, 0x05	; 5
    3f3e:	9f 93       	push	r25
    3f40:	8f 93       	push	r24
    3f42:	1f 93       	push	r17
    3f44:	0f 93       	push	r16
    3f46:	0e 94 29 0a 	call	0x1452	; 0x1452 <Print::printf(PGM_t const*, ...) [clone .constprop.21]>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usart.cpp:99
      /* In synchronous mode the formula is different. */
      uint32_t _baud = ((F_CPU / 1000L) / _xclk + 1) / 2;
    3f4a:	20 91 18 60 	lds	r18, 0x6018	; 0x806018 <_xclk>
    3f4e:	30 91 19 60 	lds	r19, 0x6019	; 0x806019 <_xclk+0x1>
    3f52:	50 e0       	ldi	r21, 0x00	; 0
    3f54:	40 e0       	ldi	r20, 0x00	; 0
    3f56:	cd bf       	out	0x3d, r28	; 61
    3f58:	de bf       	out	0x3e, r29	; 62
    3f5a:	60 e2       	ldi	r22, 0x20	; 32
    3f5c:	7e e4       	ldi	r23, 0x4E	; 78
    3f5e:	80 e0       	ldi	r24, 0x00	; 0
    3f60:	90 e0       	ldi	r25, 0x00	; 0
    3f62:	c7 d4       	rcall	.+2446   	; 0x48f2 <__divmodsi4>
    3f64:	da 01       	movw	r26, r20
    3f66:	c9 01       	movw	r24, r18
    3f68:	01 96       	adiw	r24, 0x01	; 1
    3f6a:	a1 1d       	adc	r26, r1
    3f6c:	b1 1d       	adc	r27, r1
    3f6e:	b5 95       	asr	r27
    3f70:	a7 95       	ror	r26
    3f72:	97 95       	ror	r25
    3f74:	87 95       	ror	r24
/Users/askn/Collaborator/UPDI4AVR-USB/src/usart.cpp:100
      _baud <<= 6;
    3f76:	36 e0       	ldi	r19, 0x06	; 6
    3f78:	88 0f       	add	r24, r24
    3f7a:	99 1f       	adc	r25, r25
    3f7c:	aa 1f       	adc	r26, r26
    3f7e:	bb 1f       	adc	r27, r27
    3f80:	3a 95       	dec	r19
    3f82:	d1 f7       	brne	.-12     	; 0x3f78 <main+0x1430>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usart.cpp:102
      if (_baud < 64) _baud = 64;
      PORTMUX_USARTROUTEA = PORTMUX_USART_UPDI;
    3f84:	20 e1       	ldi	r18, 0x10	; 16
    3f86:	20 93 e2 05 	sts	0x05E2, r18	; 0x8005e2 <__TEXT_REGION_LENGTH__+0x7f05e2>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usart.cpp:103
      pinModeMacro(PIN_VCP_TXD, INPUT_PULLUP);
    3f8a:	02 98       	cbi	0x00, 2	; 0
    3f8c:	28 e0       	ldi	r18, 0x08	; 8
    3f8e:	20 93 12 04 	sts	0x0412, r18	; 0x800412 <__TEXT_REGION_LENGTH__+0x7f0412>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usart.cpp:104
      USART0_STATUS = USART_DREIF_bm;
    3f92:	20 e2       	ldi	r18, 0x20	; 32
    3f94:	20 93 04 08 	sts	0x0804, r18	; 0x800804 <__TEXT_REGION_LENGTH__+0x7f0804>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usart.cpp:105
      USART0_BAUD  = _baud;
    3f98:	80 34       	cpi	r24, 0x40	; 64
    3f9a:	91 05       	cpc	r25, r1
    3f9c:	a1 05       	cpc	r26, r1
    3f9e:	b1 05       	cpc	r27, r1
    3fa0:	20 f4       	brcc	.+8      	; 0x3faa <main+0x1462>
    3fa2:	80 e4       	ldi	r24, 0x40	; 64
    3fa4:	90 e0       	ldi	r25, 0x00	; 0
    3fa6:	a0 e0       	ldi	r26, 0x00	; 0
    3fa8:	b0 e0       	ldi	r27, 0x00	; 0
    3faa:	80 93 08 08 	sts	0x0808, r24	; 0x800808 <__TEXT_REGION_LENGTH__+0x7f0808>
    3fae:	90 93 09 08 	sts	0x0809, r25	; 0x800809 <__TEXT_REGION_LENGTH__+0x7f0809>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usart.cpp:106
      USART0_CTRLC = USART_CHSIZE_8BIT_gc | USART_PMODE_EVEN_gc | USART_CMODE_SYNCHRONOUS_gc | USART_SBMODE_2BIT_gc;
    3fb2:	8b e6       	ldi	r24, 0x6B	; 107
    3fb4:	80 93 07 08 	sts	0x0807, r24	; 0x800807 <__TEXT_REGION_LENGTH__+0x7f0807>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usart.cpp:107
      USART0_CTRLA = USART_LBME_bm | USART_RS485_INT_gc | USART_RS485_EXT_gc;
    3fb8:	8b e0       	ldi	r24, 0x0B	; 11
    3fba:	80 93 05 08 	sts	0x0805, r24	; 0x800805 <__TEXT_REGION_LENGTH__+0x7f0805>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usart.cpp:108
      USART0_CTRLB = USART_RXEN_bm | USART_TXEN_bm | USART_ODME_bm;
    3fbe:	88 ec       	ldi	r24, 0xC8	; 200
    3fc0:	80 93 06 08 	sts	0x0806, r24	; 0x800806 <__TEXT_REGION_LENGTH__+0x7f0806>
/Users/askn/Collaborator/UPDI4AVR-USB/src/usart.cpp:109
      D1PRINTF(" BAUD=%04X:%02X\r\n", USART0_BAUD, USART0_CTRLB);
    3fc4:	20 91 06 08 	lds	r18, 0x0806	; 0x800806 <__TEXT_REGION_LENGTH__+0x7f0806>
    3fc8:	80 91 08 08 	lds	r24, 0x0808	; 0x800808 <__TEXT_REGION_LENGTH__+0x7f0808>
    3fcc:	90 91 09 08 	lds	r25, 0x0809	; 0x800809 <__TEXT_REGION_LENGTH__+0x7f0809>
    3fd0:	1f 92       	push	r1
    3fd2:	2f 93       	push	r18
    3fd4:	9f 93       	push	r25
    3fd6:	8f 93       	push	r24
    3fd8:	82 e3       	ldi	r24, 0x32	; 50
    3fda:	95 e0       	ldi	r25, 0x05	; 5
    3fdc:	9f 93       	push	r25
    3fde:	8f 93       	push	r24
    3fe0:	1f 93       	push	r17
    3fe2:	0f 93       	push	r16
    3fe4:	0e 94 29 0a 	call	0x1452	; 0x1452 <Print::printf(PGM_t const*, ...) [clone .constprop.21]>
__iRestore():
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/tools/avr-gcc/7.3.0-avr8-gnu-toolchain/avr/include/util/atomic.h:70
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    3fe8:	ff be       	out	0x3f, r15	; 63
jtag_scope_tpi():
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:310
      USART::change_tpi();
      _rspsize = Timeout::command(&connect);
    3fea:	89 ea       	ldi	r24, 0xA9	; 169
    3fec:	90 e1       	ldi	r25, 0x10	; 16
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:325
    else if (_cmd == 0x03) {        /* XPRG_CMD_ERASE */
      D1PRINTF(" TPI_ERASE=%02X:%08lX\r\n",
        packet.out.tpi.read.bMType,
        bswap32(packet.out.tpi.read.dwAddr)
      );
      _rspsize = Timeout::command(&erase_memory);
    3fee:	0e 94 25 15 	call	0x2a4a	; 0x2a4a <Timeout::command(unsigned int (*)(), unsigned int) [clone .constprop.16]>
    3ff2:	7c 01       	movw	r14, r24
    3ff4:	cd bf       	out	0x3d, r28	; 61
    3ff6:	de bf       	out	0x3e, r29	; 62
    3ff8:	33 c0       	rjmp	.+102    	; 0x4060 <main+0x1518>
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:312
      D1PRINTF(" TPI_ENTER_PROGMODE\r\n");
      USART::setup();
      USART::change_tpi();
      _rspsize = Timeout::command(&connect);
    }
    else if (_cmd == 0x02) {        /* XPRG_CMD_LEAVE_PROGMODE */
    3ffa:	82 30       	cpi	r24, 0x02	; 2
    3ffc:	09 f0       	breq	.+2      	; 0x4000 <main+0x14b8>
    3ffe:	4b c0       	rjmp	.+150    	; 0x4096 <main+0x154e>
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:313
      D1PRINTF(" TPI_LEAVE_PROGMODE\r\n");
    4000:	86 ec       	ldi	r24, 0xC6	; 198
    4002:	95 e0       	ldi	r25, 0x05	; 5
    4004:	9f 93       	push	r25
    4006:	8f 93       	push	r24
    4008:	1f 93       	push	r17
    400a:	0f 93       	push	r16
    400c:	0e 94 29 0a 	call	0x1452	; 0x1452 <Print::printf(PGM_t const*, ...) [clone .constprop.21]>
set_sstcs():
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:69
  bool get_sldcs (const uint8_t _addr) {
    return (send(0x80 | _addr) && recv());
  }

  bool set_sstcs (const uint8_t _addr, const uint8_t _data) {
    return (send(0xC0 | _addr) && send(_data));
    4010:	80 ec       	ldi	r24, 0xC0	; 192
    4012:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <TPI::send(unsigned char)>
    4016:	0f 90       	pop	r0
    4018:	0f 90       	pop	r0
    401a:	0f 90       	pop	r0
    401c:	0f 90       	pop	r0
    401e:	88 23       	and	r24, r24
    4020:	19 f0       	breq	.+6      	; 0x4028 <main+0x14e0>
    4022:	80 e0       	ldi	r24, 0x00	; 0
    4024:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <TPI::send(unsigned char)>
disconnect():
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:285
  }

  size_t disconnect (void) {
    /*** leave RESET (normal programing) ***/
    set_sstcs(0x00, 0x00);
    D1PRINTF(" TPISR<00\r\n");
    4028:	80 e5       	ldi	r24, 0x50	; 80
    402a:	95 e0       	ldi	r25, 0x05	; 5
    402c:	9f 93       	push	r25
    402e:	8f 93       	push	r24
    4030:	1f 93       	push	r17
    4032:	0f 93       	push	r16
    4034:	0e 94 29 0a 	call	0x1452	; 0x1452 <Print::printf(PGM_t const*, ...) [clone .constprop.21]>
delay_micros():
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/modernAVR/0.2.14/cores/modernAVR/api/delay_busywait.h:33
static __inline__ __attribute__((__always_inline__)) void delay_micros (uint32_t _us);
static __inline__ __attribute__((__always_inline__)) void delay_millis (uint32_t _ms);

void delay_micros (uint32_t _us) {
  if (F_CPU >= 1000000L) {
    __builtin_avr_delay_cycles((F_CPU / 1000000L) * _us);
    4038:	83 ef       	ldi	r24, 0xF3	; 243
    403a:	91 e0       	ldi	r25, 0x01	; 1
    403c:	01 97       	sbiw	r24, 0x01	; 1
    403e:	f1 f7       	brne	.-4      	; 0x403c <main+0x14f4>
    4040:	00 c0       	rjmp	.+0      	; 0x4042 <main+0x14fa>
    4042:	00 00       	nop
disconnect():
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:288
    /* Send the NVM exit command, wait a short while and release RESET. */
    delay_micros(100);
    openDrainWriteMacro(PIN_VCP_TXD, HIGH);
    4044:	02 98       	cbi	0x00, 2	; 0
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:289
    openDrainWriteMacro(PIN_PG_TRST, HIGH);
    4046:	01 98       	cbi	0x00, 1	; 0
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:290
    PGCONF = 0;
    4048:	1d ba       	out	0x1d, r1	; 29
jtag_scope_tpi():
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:316
    }
    else if (_cmd == 0x02) {        /* XPRG_CMD_LEAVE_PROGMODE */
      D1PRINTF(" TPI_LEAVE_PROGMODE\r\n");
      _rspsize = disconnect();
      _tpi_setmode = 0;
      USART::setup();
    404a:	0e 94 be 0f 	call	0x1f7c	; 0x1f7c <USART::setup()>
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:317
      USART::change_vcp();
    404e:	0e 94 4d 0a 	call	0x149a	; 0x149a <USART::change_vcp()>
    4052:	0f 90       	pop	r0
    4054:	0f 90       	pop	r0
    4056:	0f 90       	pop	r0
    4058:	0f 90       	pop	r0
main():
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:314
      USART::change_tpi();
      _rspsize = Timeout::command(&connect);
    }
    else if (_cmd == 0x02) {        /* XPRG_CMD_LEAVE_PROGMODE */
      D1PRINTF(" TPI_LEAVE_PROGMODE\r\n");
      _rspsize = disconnect();
    405a:	ee 24       	eor	r14, r14
    405c:	e3 94       	inc	r14
    405e:	f1 2c       	mov	r15, r1
jtag_scope_tpi():
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:364
        _tpi_csr_addr = _bValue;    /* XPRG_TPI_NVMCSR_ADDRESS */
      }
  #endif
      _rspsize = 1;
    }
    packet.in.tpi_res = _rspsize ? 0x00 : 0x01; /* XPRG_ERR_OK : XPRG_ERR_FAILED */
    4060:	81 e0       	ldi	r24, 0x01	; 1
    4062:	e1 14       	cp	r14, r1
    4064:	f1 04       	cpc	r15, r1
    4066:	09 f0       	breq	.+2      	; 0x406a <main+0x1522>
    4068:	80 e0       	ldi	r24, 0x00	; 0
    406a:	80 93 d4 60 	sts	0x60D4, r24	; 0x8060d4 <packet+0x6>
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:365
    D1PRINTF(" <RES:%02X>\r\n", _rspsize);
    406e:	ff 92       	push	r15
    4070:	ef 92       	push	r14
    4072:	8c e5       	ldi	r24, 0x5C	; 92
    4074:	95 e0       	ldi	r25, 0x05	; 5
    4076:	9f 93       	push	r25
    4078:	8f 93       	push	r24
    407a:	1f 93       	push	r17
    407c:	0f 93       	push	r16
    407e:	0e 94 29 0a 	call	0x1452	; 0x1452 <Print::printf(PGM_t const*, ...) [clone .constprop.21]>
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:368

    /* Adds padding to XPRG responses to adjust the length of the payload. */
    return ++_rspsize;
    4082:	9f ef       	ldi	r25, 0xFF	; 255
    4084:	e9 1a       	sub	r14, r25
    4086:	f9 0a       	sbc	r15, r25
    4088:	0f 90       	pop	r0
    408a:	0f 90       	pop	r0
    408c:	0f 90       	pop	r0
    408e:	0f 90       	pop	r0
    4090:	0f 90       	pop	r0
    4092:	0f 90       	pop	r0
    4094:	73 cb       	rjmp	.-2330   	; 0x377c <main+0xc34>
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:319
      _rspsize = disconnect();
      _tpi_setmode = 0;
      USART::setup();
      USART::change_vcp();
    }
    else if (bit_is_clear(PGCONF, PGCONF_UPDI_bp)) { /* empty */ }
    4096:	e8 9b       	sbis	0x1d, 0	; 29
    4098:	7a c0       	rjmp	.+244    	; 0x418e <main+0x1646>
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:320
    else if (_cmd == 0x03) {        /* XPRG_CMD_ERASE */
    409a:	83 30       	cpi	r24, 0x03	; 3
    409c:	e1 f4       	brne	.+56     	; 0x40d6 <main+0x158e>
bswap32():
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/modernAVR/0.2.14/cores/modernAVR/api/cpp/btools.cpp:49
uint16_t bswap16 (uint16_t _word) {
  return __builtin_bswap16(_word);
}

uint32_t bswap32 (uint32_t _dword) {
  return __builtin_bswap32(_dword);
    409e:	60 91 d5 60 	lds	r22, 0x60D5	; 0x8060d5 <packet+0x7>
    40a2:	70 91 d6 60 	lds	r23, 0x60D6	; 0x8060d6 <packet+0x8>
    40a6:	80 91 d7 60 	lds	r24, 0x60D7	; 0x8060d7 <packet+0x9>
    40aa:	90 91 d8 60 	lds	r25, 0x60D8	; 0x8060d8 <packet+0xa>
    40ae:	3d d4       	rcall	.+2170   	; 0x492a <__bswapsi2>
jtag_scope_tpi():
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:321
      D1PRINTF(" TPI_ERASE=%02X:%08lX\r\n",
    40b0:	9f 93       	push	r25
    40b2:	8f 93       	push	r24
    40b4:	7f 93       	push	r23
    40b6:	6f 93       	push	r22
    40b8:	80 91 d4 60 	lds	r24, 0x60D4	; 0x8060d4 <packet+0x6>
    40bc:	1f 92       	push	r1
    40be:	8f 93       	push	r24
    40c0:	8e ea       	ldi	r24, 0xAE	; 174
    40c2:	95 e0       	ldi	r25, 0x05	; 5
    40c4:	9f 93       	push	r25
    40c6:	8f 93       	push	r24
    40c8:	1f 93       	push	r17
    40ca:	0f 93       	push	r16
    40cc:	0e 94 29 0a 	call	0x1452	; 0x1452 <Print::printf(PGM_t const*, ...) [clone .constprop.21]>
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:325
        packet.out.tpi.read.bMType,
        bswap32(packet.out.tpi.read.dwAddr)
      );
      _rspsize = Timeout::command(&erase_memory);
    40d0:	81 e1       	ldi	r24, 0x11	; 17
    40d2:	94 e1       	ldi	r25, 0x14	; 20
    40d4:	8c cf       	rjmp	.-232    	; 0x3fee <main+0x14a6>
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:327
    }
    else if (_cmd == 0x04) {        /* XPRG_CMD_WRITE_MEM */
    40d6:	84 30       	cpi	r24, 0x04	; 4
    40d8:	29 f5       	brne	.+74     	; 0x4124 <main+0x15dc>
bswap16():
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/modernAVR/0.2.14/cores/modernAVR/api/cpp/btools.cpp:45
//
// Byte convert
//

uint16_t bswap16 (uint16_t _word) {
  return __builtin_bswap16(_word);
    40da:	20 91 da 60 	lds	r18, 0x60DA	; 0x8060da <packet+0xc>
    40de:	30 91 db 60 	lds	r19, 0x60DB	; 0x8060db <packet+0xd>
    40e2:	32 27       	eor	r19, r18
    40e4:	23 27       	eor	r18, r19
    40e6:	32 27       	eor	r19, r18
bswap32():
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/modernAVR/0.2.14/cores/modernAVR/api/cpp/btools.cpp:49
}

uint32_t bswap32 (uint32_t _dword) {
  return __builtin_bswap32(_dword);
    40e8:	60 91 d6 60 	lds	r22, 0x60D6	; 0x8060d6 <packet+0x8>
    40ec:	70 91 d7 60 	lds	r23, 0x60D7	; 0x8060d7 <packet+0x9>
    40f0:	80 91 d8 60 	lds	r24, 0x60D8	; 0x8060d8 <packet+0xa>
    40f4:	90 91 d9 60 	lds	r25, 0x60D9	; 0x8060d9 <packet+0xb>
    40f8:	18 d4       	rcall	.+2096   	; 0x492a <__bswapsi2>
jtag_scope_tpi():
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:328
      D1PRINTF(" TPI_WRITE=%02X:%08lX:%04X\r\n",
    40fa:	3f 93       	push	r19
    40fc:	2f 93       	push	r18
    40fe:	9f 93       	push	r25
    4100:	8f 93       	push	r24
    4102:	7f 93       	push	r23
    4104:	6f 93       	push	r22
    4106:	80 91 d4 60 	lds	r24, 0x60D4	; 0x8060d4 <packet+0x6>
    410a:	1f 92       	push	r1
    410c:	8f 93       	push	r24
    410e:	81 e9       	ldi	r24, 0x91	; 145
    4110:	95 e0       	ldi	r25, 0x05	; 5
    4112:	9f 93       	push	r25
    4114:	8f 93       	push	r24
    4116:	1f 93       	push	r17
    4118:	0f 93       	push	r16
    411a:	0e 94 29 0a 	call	0x1452	; 0x1452 <Print::printf(PGM_t const*, ...) [clone .constprop.21]>
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:333
        packet.out.tpi.write.bMType,
        bswap32(packet.out.tpi.write.dwAddr),
        bswap16(packet.out.tpi.write.wLength)
      );
      _rspsize = Timeout::command(&write_memory);
    411e:	8f ef       	ldi	r24, 0xFF	; 255
    4120:	92 e1       	ldi	r25, 0x12	; 18
    4122:	65 cf       	rjmp	.-310    	; 0x3fee <main+0x14a6>
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:335
    }
    else if (_cmd == 0x05) {        /* XPRG_CMD_READ_MEM */
    4124:	85 30       	cpi	r24, 0x05	; 5
    4126:	29 f5       	brne	.+74     	; 0x4172 <main+0x162a>
bswap16():
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/modernAVR/0.2.14/cores/modernAVR/api/cpp/btools.cpp:45
//
// Byte convert
//

uint16_t bswap16 (uint16_t _word) {
  return __builtin_bswap16(_word);
    4128:	20 91 d9 60 	lds	r18, 0x60D9	; 0x8060d9 <packet+0xb>
    412c:	30 91 da 60 	lds	r19, 0x60DA	; 0x8060da <packet+0xc>
    4130:	32 27       	eor	r19, r18
    4132:	23 27       	eor	r18, r19
/Users/askn/Library/Arduino15/packages/MultiX-Zinnia/hardware/modernAVR/0.2.14/cores/modernAVR/api/cpp/btools.cpp:49
}

uint32_t bswap32 (uint32_t _dword) {
  return __builtin_bswap32(_dword);
    4134:	32 27       	eor	r19, r18
bswap32():
    4136:	60 91 d5 60 	lds	r22, 0x60D5	; 0x8060d5 <packet+0x7>
    413a:	70 91 d6 60 	lds	r23, 0x60D6	; 0x8060d6 <packet+0x8>
    413e:	80 91 d7 60 	lds	r24, 0x60D7	; 0x8060d7 <packet+0x9>
    4142:	90 91 d8 60 	lds	r25, 0x60D8	; 0x8060d8 <packet+0xa>
    4146:	f1 d3       	rcall	.+2018   	; 0x492a <__bswapsi2>
jtag_scope_tpi():
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:336
      D1PRINTF(" TPI_READ=%02X:%08lX:%04X\r\n",
    4148:	3f 93       	push	r19
    414a:	2f 93       	push	r18
    414c:	9f 93       	push	r25
    414e:	8f 93       	push	r24
    4150:	7f 93       	push	r23
    4152:	6f 93       	push	r22
    4154:	80 91 d4 60 	lds	r24, 0x60D4	; 0x8060d4 <packet+0x6>
    4158:	1f 92       	push	r1
    415a:	8f 93       	push	r24
    415c:	85 e7       	ldi	r24, 0x75	; 117
    415e:	95 e0       	ldi	r25, 0x05	; 5
    4160:	9f 93       	push	r25
    4162:	8f 93       	push	r24
    4164:	1f 93       	push	r17
    4166:	0f 93       	push	r16
    4168:	0e 94 29 0a 	call	0x1452	; 0x1452 <Print::printf(PGM_t const*, ...) [clone .constprop.21]>
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:341
        packet.out.tpi.read.bMType,
        bswap32(packet.out.tpi.read.dwAddr),
        bswap16(packet.out.tpi.read.wLength)
      );
      _rspsize = Timeout::command(&read_memory);
    416c:	81 ee       	ldi	r24, 0xE1	; 225
    416e:	93 e1       	ldi	r25, 0x13	; 19
    4170:	3e cf       	rjmp	.-388    	; 0x3fee <main+0x14a6>
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:343
    }
    else if (_cmd == 0x06) {        /* XPRG_CMD_CRC */
    4172:	86 30       	cpi	r24, 0x06	; 6
    4174:	79 f4       	brne	.+30     	; 0x4194 <main+0x164c>
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:344
      D1PRINTF(" TPI_CRC\r\n");     /* not used (Fail) */
    4176:	8a e6       	ldi	r24, 0x6A	; 106
    4178:	95 e0       	ldi	r25, 0x05	; 5
    417a:	9f 93       	push	r25
    417c:	8f 93       	push	r24
    417e:	1f 93       	push	r17
    4180:	0f 93       	push	r16
    4182:	0e 94 29 0a 	call	0x1452	; 0x1452 <Print::printf(PGM_t const*, ...) [clone .constprop.21]>
    4186:	0f 90       	pop	r0
    4188:	0f 90       	pop	r0
    418a:	0f 90       	pop	r0
    418c:	0f 90       	pop	r0
main():
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:304
   * When this scope is used, CMD3_SIGN_ON will not be called,
   * It doesn't seem to be implemented in the "mEDBG".
   * which means it will start immediately with XPRG_CMD_ENTER_PROGMODE.
   */
  size_t jtag_scope_tpi (void) {
    size_t _rspsize = 0;  /* Make final adjustments. */
    418e:	f1 2c       	mov	r15, r1
    4190:	e1 2c       	mov	r14, r1
    4192:	66 cf       	rjmp	.-308    	; 0x4060 <main+0x1518>
jtag_scope_tpi():
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:346
      _rspsize = Timeout::command(&read_memory);
    }
    else if (_cmd == 0x06) {        /* XPRG_CMD_CRC */
      D1PRINTF(" TPI_CRC\r\n");     /* not used (Fail) */
    }
    else if (_cmd == 0x07) {        /* XPRG_CMD_SET_PARAM */
    4194:	21 e0       	ldi	r18, 0x01	; 1
    4196:	90 e0       	ldi	r25, 0x00	; 0
    4198:	87 30       	cpi	r24, 0x07	; 7
    419a:	09 f0       	breq	.+2      	; 0x419e <main+0x1656>
    419c:	20 e0       	ldi	r18, 0x00	; 0
main():
/Users/askn/Collaborator/UPDI4AVR-USB/src/tpi.cpp:310
    uint8_t _cmd    = packet.out.cmd;
    if (_cmd == 0x01) {             /* XPRG_CMD_ENTER_PROGMODE */
      D1PRINTF(" TPI_ENTER_PROGMODE\r\n");
      USART::setup();
      USART::change_tpi();
      _rspsize = Timeout::command(&connect);
    419e:	e2 2e       	mov	r14, r18
    41a0:	f9 2e       	mov	r15, r25
    41a2:	5e cf       	rjmp	.-324    	; 0x4060 <main+0x1518>
jtag_scope_branch():
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:393
  #endif
    else if (_scope == 0x20) _rspsize = jtag_scope_edbg();          /* SCOPE_EDBG */
    41a4:	e0 e2       	ldi	r30, 0x20	; 32
    41a6:	fe 12       	cpse	r15, r30
    41a8:	ee cb       	rjmp	.-2084   	; 0x3986 <main+0xe3e>
jtag_scope_edbg():
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:223

  /*** The EDBG scope provides access to the writer's hardware specifications. ***/
  /* There is no impact on operation if it is not called at all. */
  size_t jtag_scope_edbg (void) {
    size_t  _rspsize = 0;
    uint8_t _cmd     = packet.out.cmd;
    41aa:	90 91 d3 60 	lds	r25, 0x60D3	; 0x8060d3 <packet+0x5>
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:224
    uint8_t _section = packet.out.section;
    41ae:	c0 90 d5 60 	lds	r12, 0x60D5	; 0x8060d5 <packet+0x7>
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:225
    uint8_t _index   = packet.out.index;
    41b2:	d0 90 d6 60 	lds	r13, 0x60D6	; 0x8060d6 <packet+0x8>
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:226
    uint8_t _length  = packet.out.length;
    41b6:	80 91 d7 60 	lds	r24, 0x60D7	; 0x8060d7 <packet+0x9>
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:227
    if (_cmd == 0x01) {             /* CMD3_SET_PARAMETER */
    41ba:	91 30       	cpi	r25, 0x01	; 1
    41bc:	99 f5       	brne	.+102    	; 0x4224 <main+0x16dc>
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:228
      uint16_t _data = packet.out.wValue;
    41be:	e0 90 d8 60 	lds	r14, 0x60D8	; 0x8060d8 <packet+0xa>
    41c2:	f0 90 d9 60 	lds	r15, 0x60D9	; 0x8060d9 <packet+0xb>
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:229
      D1PRINTF(" AVR_SET_PARAM=%02X:%02X:%02X:%02X\r\n", _section, _index, _length, _data);
    41c6:	ff 92       	push	r15
    41c8:	ef 92       	push	r14
    41ca:	1f 92       	push	r1
    41cc:	8f 93       	push	r24
    41ce:	1f 92       	push	r1
    41d0:	df 92       	push	r13
    41d2:	1f 92       	push	r1
    41d4:	cf 92       	push	r12
    41d6:	8c e3       	ldi	r24, 0x3C	; 60
    41d8:	96 e0       	ldi	r25, 0x06	; 6
    41da:	9f 93       	push	r25
    41dc:	8f 93       	push	r24
    41de:	1f 93       	push	r17
    41e0:	0f 93       	push	r16
    41e2:	0e 94 29 0a 	call	0x1452	; 0x1452 <Print::printf(PGM_t const*, ...) [clone .constprop.21]>
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:230
      if (_section == 0) {          /* SET_GET_CTXT_CONFIG */
    41e6:	cd bf       	out	0x3d, r28	; 61
    41e8:	de bf       	out	0x3e, r29	; 62
    41ea:	c1 10       	cpse	r12, r1
    41ec:	25 cc       	rjmp	.-1974   	; 0x3a38 <main+0xef0>
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:231
        if (_index == 0x10) {       /* EDBG_CONTROL_TARGET_POWER */
    41ee:	30 e1       	ldi	r19, 0x10	; 16
    41f0:	d3 12       	cpse	r13, r19
    41f2:	22 cc       	rjmp	.-1980   	; 0x3a38 <main+0xef0>
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:233
          /* Called with `-xvtarget_switch=0,1` */
          D1PRINTF(" TARGET_POWER=%02X\r\n", _data);
    41f4:	ff 92       	push	r15
    41f6:	ef 92       	push	r14
    41f8:	87 e2       	ldi	r24, 0x27	; 39
    41fa:	96 e0       	ldi	r25, 0x06	; 6
    41fc:	9f 93       	push	r25
    41fe:	8f 93       	push	r24
    4200:	1f 93       	push	r17
    4202:	0f 93       	push	r16
    4204:	0e 94 29 0a 	call	0x1452	; 0x1452 <Print::printf(PGM_t const*, ...) [clone .constprop.21]>
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:234
          _jtag_vpow = _data;       /* 0,1 */
    4208:	e0 92 00 60 	sts	0x6000, r14	; 0x806000 <__DATA_REGION_ORIGIN__>
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:236
  #if defined(PIN_HV_POWER)
          if (_data)
    420c:	0f 90       	pop	r0
    420e:	0f 90       	pop	r0
    4210:	0f 90       	pop	r0
    4212:	0f 90       	pop	r0
    4214:	0f 90       	pop	r0
    4216:	0f 90       	pop	r0
    4218:	ef 28       	or	r14, r15
    421a:	11 f0       	breq	.+4      	; 0x4220 <main+0x16d8>
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:237
            digitalWriteMacro(PIN_HV_POWER, HIGH);
    421c:	0e 9a       	sbi	0x01, 6	; 1
    421e:	0c cc       	rjmp	.-2024   	; 0x3a38 <main+0xef0>
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:239
          else
            digitalWriteMacro(PIN_HV_POWER, LOW);
    4220:	0e 98       	cbi	0x01, 6	; 1
    4222:	0a cc       	rjmp	.-2028   	; 0x3a38 <main+0xef0>
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:245
  #endif
        }
      }
      packet.in.res = 0x80;         /* RSP3_OK */
    }
    else if (_cmd == 0x02) {        /* CMD3_GET_PARAMETER */
    4224:	92 30       	cpi	r25, 0x02	; 2
    4226:	09 f0       	breq	.+2      	; 0x422a <main+0x16e2>
    4228:	ae cb       	rjmp	.-2212   	; 0x3986 <main+0xe3e>
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:246
      D1PRINTF(" AVR_GET_PARAM=%02X:%02X:%02X\r\n", _section, _index, _length);
    422a:	e8 2e       	mov	r14, r24
    422c:	f1 2c       	mov	r15, r1
    422e:	1f 92       	push	r1
    4230:	8f 93       	push	r24
    4232:	1f 92       	push	r1
    4234:	df 92       	push	r13
    4236:	1f 92       	push	r1
    4238:	cf 92       	push	r12
    423a:	87 e0       	ldi	r24, 0x07	; 7
    423c:	96 e0       	ldi	r25, 0x06	; 6
    423e:	9f 93       	push	r25
    4240:	8f 93       	push	r24
    4242:	1f 93       	push	r17
    4244:	0f 93       	push	r16
    4246:	0e 94 29 0a 	call	0x1452	; 0x1452 <Print::printf(PGM_t const*, ...) [clone .constprop.21]>
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:247
      if (_section == 0) {          /* SET_GET_CTXT_CONFIG */
    424a:	cd bf       	out	0x3d, r28	; 61
    424c:	de bf       	out	0x3e, r29	; 62
    424e:	c1 10       	cpse	r12, r1
    4250:	19 c0       	rjmp	.+50     	; 0x4284 <main+0x173c>
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:248
        if (_index == 0x10) {       /* EDBG_CONTROL_TARGET_POWER */
    4252:	90 e1       	ldi	r25, 0x10	; 16
    4254:	d9 12       	cpse	r13, r25
    4256:	16 c0       	rjmp	.+44     	; 0x4284 <main+0x173c>
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:249
          D1PRINTF(" TARGET_POWER=%02X\r\n", _jtag_vpow);
    4258:	80 91 00 60 	lds	r24, 0x6000	; 0x806000 <__DATA_REGION_ORIGIN__>
    425c:	1f 92       	push	r1
    425e:	8f 93       	push	r24
    4260:	82 ef       	ldi	r24, 0xF2	; 242
    4262:	95 e0       	ldi	r25, 0x05	; 5
    4264:	9f 93       	push	r25
    4266:	8f 93       	push	r24
    4268:	1f 93       	push	r17
    426a:	0f 93       	push	r16
    426c:	0e 94 29 0a 	call	0x1452	; 0x1452 <Print::printf(PGM_t const*, ...) [clone .constprop.21]>
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:250
          packet.in.data[0] = _jtag_vpow;
    4270:	80 91 00 60 	lds	r24, 0x6000	; 0x806000 <__DATA_REGION_ORIGIN__>
    4274:	80 93 d5 60 	sts	0x60D5, r24	; 0x8060d5 <packet+0x7>
    4278:	0f 90       	pop	r0
    427a:	0f 90       	pop	r0
    427c:	0f 90       	pop	r0
    427e:	0f 90       	pop	r0
    4280:	0f 90       	pop	r0
    4282:	0f 90       	pop	r0
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:253
        }
      }
      packet.in.res = 0x184;        /* RSP3_DATA */
    4284:	84 e8       	ldi	r24, 0x84	; 132
    4286:	91 e0       	ldi	r25, 0x01	; 1
    4288:	80 93 d3 60 	sts	0x60D3, r24	; 0x8060d3 <packet+0x5>
    428c:	90 93 d4 60 	sts	0x60D4, r25	; 0x8060d4 <packet+0x6>
/Users/askn/Collaborator/UPDI4AVR-USB/src/jtag.cpp:254
      _rspsize = _length + 1;
    4290:	ef ef       	ldi	r30, 0xFF	; 255
    4292:	ee 1a       	sub	r14, r30
    4294:	fe 0a       	sbc	r15, r30
    4296:	72 ca       	rjmp	.-2844   	; 0x377c <main+0xc34>

00004298 <setjmp>:
setjmp():
    4298:	dc 01       	movw	r26, r24
    429a:	2d 92       	st	X+, r2
    429c:	3d 92       	st	X+, r3
    429e:	4d 92       	st	X+, r4
    42a0:	5d 92       	st	X+, r5
    42a2:	6d 92       	st	X+, r6
    42a4:	7d 92       	st	X+, r7
    42a6:	8d 92       	st	X+, r8
    42a8:	9d 92       	st	X+, r9
    42aa:	ad 92       	st	X+, r10
    42ac:	bd 92       	st	X+, r11
    42ae:	cd 92       	st	X+, r12
    42b0:	dd 92       	st	X+, r13
    42b2:	ed 92       	st	X+, r14
    42b4:	fd 92       	st	X+, r15
    42b6:	0d 93       	st	X+, r16
    42b8:	1d 93       	st	X+, r17
    42ba:	cd 93       	st	X+, r28
    42bc:	dd 93       	st	X+, r29
    42be:	ff 91       	pop	r31
    42c0:	ef 91       	pop	r30
    42c2:	8d b7       	in	r24, 0x3d	; 61
    42c4:	8d 93       	st	X+, r24
    42c6:	8e b7       	in	r24, 0x3e	; 62
    42c8:	8d 93       	st	X+, r24
    42ca:	8f b7       	in	r24, 0x3f	; 63
    42cc:	8d 93       	st	X+, r24
    42ce:	ed 93       	st	X+, r30
    42d0:	fd 93       	st	X+, r31
    42d2:	88 27       	eor	r24, r24
    42d4:	99 27       	eor	r25, r25
    42d6:	09 94       	ijmp

000042d8 <longjmp>:
longjmp():
    42d8:	dc 01       	movw	r26, r24
    42da:	cb 01       	movw	r24, r22
    42dc:	81 30       	cpi	r24, 0x01	; 1
    42de:	91 05       	cpc	r25, r1
    42e0:	81 1d       	adc	r24, r1
    42e2:	2d 90       	ld	r2, X+
    42e4:	3d 90       	ld	r3, X+
    42e6:	4d 90       	ld	r4, X+
    42e8:	5d 90       	ld	r5, X+
    42ea:	6d 90       	ld	r6, X+
    42ec:	7d 90       	ld	r7, X+
    42ee:	8d 90       	ld	r8, X+
    42f0:	9d 90       	ld	r9, X+
    42f2:	ad 90       	ld	r10, X+
    42f4:	bd 90       	ld	r11, X+
    42f6:	cd 90       	ld	r12, X+
    42f8:	dd 90       	ld	r13, X+
    42fa:	ed 90       	ld	r14, X+
    42fc:	fd 90       	ld	r15, X+
    42fe:	0d 91       	ld	r16, X+
    4300:	1d 91       	ld	r17, X+
    4302:	cd 91       	ld	r28, X+
    4304:	dd 91       	ld	r29, X+
    4306:	ed 91       	ld	r30, X+
    4308:	fd 91       	ld	r31, X+
    430a:	0d 90       	ld	r0, X+
    430c:	0f be       	out	0x3f, r0	; 63
    430e:	ed bf       	out	0x3d, r30	; 61
    4310:	fe bf       	out	0x3e, r31	; 62
    4312:	ed 91       	ld	r30, X+
    4314:	fd 91       	ld	r31, X+
    4316:	09 94       	ijmp

00004318 <memcpy_P>:
memcpy_P():
    4318:	fb 01       	movw	r30, r22
    431a:	dc 01       	movw	r26, r24
    431c:	02 c0       	rjmp	.+4      	; 0x4322 <memcpy_P+0xa>
    431e:	05 90       	lpm	r0, Z+
    4320:	0d 92       	st	X+, r0
    4322:	41 50       	subi	r20, 0x01	; 1
    4324:	50 40       	sbci	r21, 0x00	; 0
    4326:	d8 f7       	brcc	.-10     	; 0x431e <memcpy_P+0x6>
    4328:	08 95       	ret

0000432a <vfprintf_P>:
vfprintf_P():
    432a:	cf 93       	push	r28
    432c:	df 93       	push	r29
    432e:	ec 01       	movw	r28, r24
    4330:	8b 81       	ldd	r24, Y+3	; 0x03
    4332:	88 60       	ori	r24, 0x08	; 8
    4334:	8b 83       	std	Y+3, r24	; 0x03
    4336:	ce 01       	movw	r24, r28
    4338:	06 d0       	rcall	.+12     	; 0x4346 <vfprintf>
    433a:	2b 81       	ldd	r18, Y+3	; 0x03
    433c:	27 7f       	andi	r18, 0xF7	; 247
    433e:	2b 83       	std	Y+3, r18	; 0x03
    4340:	df 91       	pop	r29
    4342:	cf 91       	pop	r28
    4344:	08 95       	ret

00004346 <vfprintf>:
vfprintf():
    4346:	ab e0       	ldi	r26, 0x0B	; 11
    4348:	b0 e0       	ldi	r27, 0x00	; 0
    434a:	e8 ea       	ldi	r30, 0xA8	; 168
    434c:	f1 e2       	ldi	r31, 0x21	; 33
    434e:	6a c2       	rjmp	.+1236   	; 0x4824 <__prologue_saves__>
    4350:	7c 01       	movw	r14, r24
    4352:	3b 01       	movw	r6, r22
    4354:	8a 01       	movw	r16, r20
    4356:	fc 01       	movw	r30, r24
    4358:	16 82       	std	Z+6, r1	; 0x06
    435a:	17 82       	std	Z+7, r1	; 0x07
    435c:	83 81       	ldd	r24, Z+3	; 0x03
    435e:	81 ff       	sbrs	r24, 1
    4360:	ba c1       	rjmp	.+884    	; 0x46d6 <vfprintf+0x390>
    4362:	ce 01       	movw	r24, r28
    4364:	01 96       	adiw	r24, 0x01	; 1
    4366:	5c 01       	movw	r10, r24
    4368:	f7 01       	movw	r30, r14
    436a:	93 81       	ldd	r25, Z+3	; 0x03
    436c:	f3 01       	movw	r30, r6
    436e:	93 fd       	sbrc	r25, 3
    4370:	85 91       	lpm	r24, Z+
    4372:	93 ff       	sbrs	r25, 3
    4374:	81 91       	ld	r24, Z+
    4376:	3f 01       	movw	r6, r30
    4378:	88 23       	and	r24, r24
    437a:	09 f4       	brne	.+2      	; 0x437e <vfprintf+0x38>
    437c:	49 c1       	rjmp	.+658    	; 0x4610 <vfprintf+0x2ca>
    437e:	85 32       	cpi	r24, 0x25	; 37
    4380:	39 f4       	brne	.+14     	; 0x4390 <vfprintf+0x4a>
    4382:	93 fd       	sbrc	r25, 3
    4384:	85 91       	lpm	r24, Z+
    4386:	93 ff       	sbrs	r25, 3
    4388:	81 91       	ld	r24, Z+
    438a:	3f 01       	movw	r6, r30
    438c:	85 32       	cpi	r24, 0x25	; 37
    438e:	21 f4       	brne	.+8      	; 0x4398 <vfprintf+0x52>
    4390:	b7 01       	movw	r22, r14
    4392:	90 e0       	ldi	r25, 0x00	; 0
    4394:	b9 d1       	rcall	.+882    	; 0x4708 <fputc>
    4396:	e8 cf       	rjmp	.-48     	; 0x4368 <vfprintf+0x22>
    4398:	91 2c       	mov	r9, r1
    439a:	21 2c       	mov	r2, r1
    439c:	31 2c       	mov	r3, r1
    439e:	ff e1       	ldi	r31, 0x1F	; 31
    43a0:	f3 15       	cp	r31, r3
    43a2:	38 f0       	brcs	.+14     	; 0x43b2 <vfprintf+0x6c>
    43a4:	8b 32       	cpi	r24, 0x2B	; 43
    43a6:	11 f1       	breq	.+68     	; 0x43ec <vfprintf+0xa6>
    43a8:	90 f4       	brcc	.+36     	; 0x43ce <vfprintf+0x88>
    43aa:	80 32       	cpi	r24, 0x20	; 32
    43ac:	09 f1       	breq	.+66     	; 0x43f0 <vfprintf+0xaa>
    43ae:	83 32       	cpi	r24, 0x23	; 35
    43b0:	29 f1       	breq	.+74     	; 0x43fc <vfprintf+0xb6>
    43b2:	37 fc       	sbrc	r3, 7
    43b4:	3c c0       	rjmp	.+120    	; 0x442e <vfprintf+0xe8>
    43b6:	20 ed       	ldi	r18, 0xD0	; 208
    43b8:	28 0f       	add	r18, r24
    43ba:	2a 30       	cpi	r18, 0x0A	; 10
    43bc:	50 f5       	brcc	.+84     	; 0x4412 <vfprintf+0xcc>
    43be:	36 fe       	sbrs	r3, 6
    43c0:	20 c0       	rjmp	.+64     	; 0x4402 <vfprintf+0xbc>
    43c2:	8a e0       	ldi	r24, 0x0A	; 10
    43c4:	98 9e       	mul	r9, r24
    43c6:	20 0d       	add	r18, r0
    43c8:	11 24       	eor	r1, r1
    43ca:	92 2e       	mov	r9, r18
    43cc:	06 c0       	rjmp	.+12     	; 0x43da <vfprintf+0x94>
    43ce:	8d 32       	cpi	r24, 0x2D	; 45
    43d0:	91 f0       	breq	.+36     	; 0x43f6 <vfprintf+0xb0>
    43d2:	80 33       	cpi	r24, 0x30	; 48
    43d4:	71 f7       	brne	.-36     	; 0x43b2 <vfprintf+0x6c>
    43d6:	68 94       	set
    43d8:	30 f8       	bld	r3, 0
    43da:	f3 01       	movw	r30, r6
    43dc:	93 fd       	sbrc	r25, 3
    43de:	85 91       	lpm	r24, Z+
    43e0:	93 ff       	sbrs	r25, 3
    43e2:	81 91       	ld	r24, Z+
    43e4:	3f 01       	movw	r6, r30
    43e6:	81 11       	cpse	r24, r1
    43e8:	da cf       	rjmp	.-76     	; 0x439e <vfprintf+0x58>
    43ea:	21 c0       	rjmp	.+66     	; 0x442e <vfprintf+0xe8>
    43ec:	68 94       	set
    43ee:	31 f8       	bld	r3, 1
    43f0:	68 94       	set
    43f2:	32 f8       	bld	r3, 2
    43f4:	f2 cf       	rjmp	.-28     	; 0x43da <vfprintf+0x94>
    43f6:	68 94       	set
    43f8:	33 f8       	bld	r3, 3
    43fa:	ef cf       	rjmp	.-34     	; 0x43da <vfprintf+0x94>
    43fc:	68 94       	set
    43fe:	34 f8       	bld	r3, 4
    4400:	ec cf       	rjmp	.-40     	; 0x43da <vfprintf+0x94>
    4402:	ea e0       	ldi	r30, 0x0A	; 10
    4404:	2e 9e       	mul	r2, r30
    4406:	20 0d       	add	r18, r0
    4408:	11 24       	eor	r1, r1
    440a:	22 2e       	mov	r2, r18
    440c:	68 94       	set
    440e:	35 f8       	bld	r3, 5
    4410:	e4 cf       	rjmp	.-56     	; 0x43da <vfprintf+0x94>
    4412:	8e 32       	cpi	r24, 0x2E	; 46
    4414:	29 f4       	brne	.+10     	; 0x4420 <vfprintf+0xda>
    4416:	36 fc       	sbrc	r3, 6
    4418:	fb c0       	rjmp	.+502    	; 0x4610 <vfprintf+0x2ca>
    441a:	68 94       	set
    441c:	36 f8       	bld	r3, 6
    441e:	dd cf       	rjmp	.-70     	; 0x43da <vfprintf+0x94>
    4420:	8c 36       	cpi	r24, 0x6C	; 108
    4422:	19 f4       	brne	.+6      	; 0x442a <vfprintf+0xe4>
    4424:	68 94       	set
    4426:	37 f8       	bld	r3, 7
    4428:	d8 cf       	rjmp	.-80     	; 0x43da <vfprintf+0x94>
    442a:	88 36       	cpi	r24, 0x68	; 104
    442c:	b1 f2       	breq	.-84     	; 0x43da <vfprintf+0x94>
    442e:	98 2f       	mov	r25, r24
    4430:	9f 7d       	andi	r25, 0xDF	; 223
    4432:	95 54       	subi	r25, 0x45	; 69
    4434:	93 30       	cpi	r25, 0x03	; 3
    4436:	d8 f0       	brcs	.+54     	; 0x446e <vfprintf+0x128>
    4438:	83 36       	cpi	r24, 0x63	; 99
    443a:	91 f1       	breq	.+100    	; 0x44a0 <vfprintf+0x15a>
    443c:	83 37       	cpi	r24, 0x73	; 115
    443e:	b1 f1       	breq	.+108    	; 0x44ac <vfprintf+0x166>
    4440:	83 35       	cpi	r24, 0x53	; 83
    4442:	09 f0       	breq	.+2      	; 0x4446 <vfprintf+0x100>
    4444:	5e c0       	rjmp	.+188    	; 0x4502 <vfprintf+0x1bc>
    4446:	28 01       	movw	r4, r16
    4448:	f2 e0       	ldi	r31, 0x02	; 2
    444a:	4f 0e       	add	r4, r31
    444c:	51 1c       	adc	r5, r1
    444e:	f8 01       	movw	r30, r16
    4450:	c0 80       	ld	r12, Z
    4452:	d1 80       	ldd	r13, Z+1	; 0x01
    4454:	69 2d       	mov	r22, r9
    4456:	70 e0       	ldi	r23, 0x00	; 0
    4458:	36 fc       	sbrc	r3, 6
    445a:	02 c0       	rjmp	.+4      	; 0x4460 <vfprintf+0x11a>
    445c:	6f ef       	ldi	r22, 0xFF	; 255
    445e:	7f ef       	ldi	r23, 0xFF	; 255
    4460:	c6 01       	movw	r24, r12
    4462:	3c d1       	rcall	.+632    	; 0x46dc <strnlen_P>
    4464:	4c 01       	movw	r8, r24
    4466:	68 94       	set
    4468:	37 f8       	bld	r3, 7
    446a:	82 01       	movw	r16, r4
    446c:	0a c0       	rjmp	.+20     	; 0x4482 <vfprintf+0x13c>
    446e:	0c 5f       	subi	r16, 0xFC	; 252
    4470:	1f 4f       	sbci	r17, 0xFF	; 255
    4472:	ff e3       	ldi	r31, 0x3F	; 63
    4474:	f9 83       	std	Y+1, r31	; 0x01
    4476:	88 24       	eor	r8, r8
    4478:	83 94       	inc	r8
    447a:	91 2c       	mov	r9, r1
    447c:	65 01       	movw	r12, r10
    447e:	e8 94       	clt
    4480:	37 f8       	bld	r3, 7
    4482:	33 fe       	sbrs	r3, 3
    4484:	2a c0       	rjmp	.+84     	; 0x44da <vfprintf+0x194>
    4486:	52 2c       	mov	r5, r2
    4488:	81 14       	cp	r8, r1
    448a:	91 04       	cpc	r9, r1
    448c:	59 f5       	brne	.+86     	; 0x44e4 <vfprintf+0x19e>
    448e:	55 20       	and	r5, r5
    4490:	09 f4       	brne	.+2      	; 0x4494 <vfprintf+0x14e>
    4492:	6a cf       	rjmp	.-300    	; 0x4368 <vfprintf+0x22>
    4494:	b7 01       	movw	r22, r14
    4496:	80 e2       	ldi	r24, 0x20	; 32
    4498:	90 e0       	ldi	r25, 0x00	; 0
    449a:	36 d1       	rcall	.+620    	; 0x4708 <fputc>
    449c:	5a 94       	dec	r5
    449e:	f7 cf       	rjmp	.-18     	; 0x448e <vfprintf+0x148>
    44a0:	f8 01       	movw	r30, r16
    44a2:	80 81       	ld	r24, Z
    44a4:	89 83       	std	Y+1, r24	; 0x01
    44a6:	0e 5f       	subi	r16, 0xFE	; 254
    44a8:	1f 4f       	sbci	r17, 0xFF	; 255
    44aa:	e5 cf       	rjmp	.-54     	; 0x4476 <vfprintf+0x130>
    44ac:	28 01       	movw	r4, r16
    44ae:	f2 e0       	ldi	r31, 0x02	; 2
    44b0:	4f 0e       	add	r4, r31
    44b2:	51 1c       	adc	r5, r1
    44b4:	f8 01       	movw	r30, r16
    44b6:	c0 80       	ld	r12, Z
    44b8:	d1 80       	ldd	r13, Z+1	; 0x01
    44ba:	69 2d       	mov	r22, r9
    44bc:	70 e0       	ldi	r23, 0x00	; 0
    44be:	36 fc       	sbrc	r3, 6
    44c0:	02 c0       	rjmp	.+4      	; 0x44c6 <vfprintf+0x180>
    44c2:	6f ef       	ldi	r22, 0xFF	; 255
    44c4:	7f ef       	ldi	r23, 0xFF	; 255
    44c6:	c6 01       	movw	r24, r12
    44c8:	14 d1       	rcall	.+552    	; 0x46f2 <strnlen>
    44ca:	4c 01       	movw	r8, r24
    44cc:	82 01       	movw	r16, r4
    44ce:	d7 cf       	rjmp	.-82     	; 0x447e <vfprintf+0x138>
    44d0:	b7 01       	movw	r22, r14
    44d2:	80 e2       	ldi	r24, 0x20	; 32
    44d4:	90 e0       	ldi	r25, 0x00	; 0
    44d6:	18 d1       	rcall	.+560    	; 0x4708 <fputc>
    44d8:	2a 94       	dec	r2
    44da:	28 14       	cp	r2, r8
    44dc:	19 04       	cpc	r1, r9
    44de:	09 f0       	breq	.+2      	; 0x44e2 <vfprintf+0x19c>
    44e0:	b8 f7       	brcc	.-18     	; 0x44d0 <vfprintf+0x18a>
    44e2:	d1 cf       	rjmp	.-94     	; 0x4486 <vfprintf+0x140>
    44e4:	f6 01       	movw	r30, r12
    44e6:	37 fc       	sbrc	r3, 7
    44e8:	85 91       	lpm	r24, Z+
    44ea:	37 fe       	sbrs	r3, 7
    44ec:	81 91       	ld	r24, Z+
    44ee:	6f 01       	movw	r12, r30
    44f0:	b7 01       	movw	r22, r14
    44f2:	90 e0       	ldi	r25, 0x00	; 0
    44f4:	09 d1       	rcall	.+530    	; 0x4708 <fputc>
    44f6:	51 10       	cpse	r5, r1
    44f8:	5a 94       	dec	r5
    44fa:	f1 e0       	ldi	r31, 0x01	; 1
    44fc:	8f 1a       	sub	r8, r31
    44fe:	91 08       	sbc	r9, r1
    4500:	c3 cf       	rjmp	.-122    	; 0x4488 <vfprintf+0x142>
    4502:	84 36       	cpi	r24, 0x64	; 100
    4504:	19 f0       	breq	.+6      	; 0x450c <vfprintf+0x1c6>
    4506:	89 36       	cpi	r24, 0x69	; 105
    4508:	09 f0       	breq	.+2      	; 0x450c <vfprintf+0x1c6>
    450a:	73 c0       	rjmp	.+230    	; 0x45f2 <vfprintf+0x2ac>
    450c:	f8 01       	movw	r30, r16
    450e:	37 fe       	sbrs	r3, 7
    4510:	67 c0       	rjmp	.+206    	; 0x45e0 <vfprintf+0x29a>
    4512:	60 81       	ld	r22, Z
    4514:	71 81       	ldd	r23, Z+1	; 0x01
    4516:	82 81       	ldd	r24, Z+2	; 0x02
    4518:	93 81       	ldd	r25, Z+3	; 0x03
    451a:	0c 5f       	subi	r16, 0xFC	; 252
    451c:	1f 4f       	sbci	r17, 0xFF	; 255
    451e:	f3 2d       	mov	r31, r3
    4520:	ff 76       	andi	r31, 0x6F	; 111
    4522:	3f 2e       	mov	r3, r31
    4524:	97 ff       	sbrs	r25, 7
    4526:	09 c0       	rjmp	.+18     	; 0x453a <vfprintf+0x1f4>
    4528:	90 95       	com	r25
    452a:	80 95       	com	r24
    452c:	70 95       	com	r23
    452e:	61 95       	neg	r22
    4530:	7f 4f       	sbci	r23, 0xFF	; 255
    4532:	8f 4f       	sbci	r24, 0xFF	; 255
    4534:	9f 4f       	sbci	r25, 0xFF	; 255
    4536:	68 94       	set
    4538:	37 f8       	bld	r3, 7
    453a:	2a e0       	ldi	r18, 0x0A	; 10
    453c:	30 e0       	ldi	r19, 0x00	; 0
    453e:	a5 01       	movw	r20, r10
    4540:	13 d1       	rcall	.+550    	; 0x4768 <__ultoa_invert>
    4542:	c8 2e       	mov	r12, r24
    4544:	ca 18       	sub	r12, r10
    4546:	8c 2c       	mov	r8, r12
    4548:	43 2c       	mov	r4, r3
    454a:	36 fe       	sbrs	r3, 6
    454c:	0c c0       	rjmp	.+24     	; 0x4566 <vfprintf+0x220>
    454e:	e8 94       	clt
    4550:	40 f8       	bld	r4, 0
    4552:	c9 14       	cp	r12, r9
    4554:	40 f4       	brcc	.+16     	; 0x4566 <vfprintf+0x220>
    4556:	34 fe       	sbrs	r3, 4
    4558:	05 c0       	rjmp	.+10     	; 0x4564 <vfprintf+0x21e>
    455a:	32 fc       	sbrc	r3, 2
    455c:	03 c0       	rjmp	.+6      	; 0x4564 <vfprintf+0x21e>
    455e:	f3 2d       	mov	r31, r3
    4560:	fe 7e       	andi	r31, 0xEE	; 238
    4562:	4f 2e       	mov	r4, r31
    4564:	89 2c       	mov	r8, r9
    4566:	44 fe       	sbrs	r4, 4
    4568:	90 c0       	rjmp	.+288    	; 0x468a <vfprintf+0x344>
    456a:	fe 01       	movw	r30, r28
    456c:	ec 0d       	add	r30, r12
    456e:	f1 1d       	adc	r31, r1
    4570:	80 81       	ld	r24, Z
    4572:	80 33       	cpi	r24, 0x30	; 48
    4574:	09 f0       	breq	.+2      	; 0x4578 <vfprintf+0x232>
    4576:	82 c0       	rjmp	.+260    	; 0x467c <vfprintf+0x336>
    4578:	24 2d       	mov	r18, r4
    457a:	29 7e       	andi	r18, 0xE9	; 233
    457c:	42 2e       	mov	r4, r18
    457e:	84 2d       	mov	r24, r4
    4580:	88 70       	andi	r24, 0x08	; 8
    4582:	58 2e       	mov	r5, r24
    4584:	43 fc       	sbrc	r4, 3
    4586:	8f c0       	rjmp	.+286    	; 0x46a6 <vfprintf+0x360>
    4588:	40 fe       	sbrs	r4, 0
    458a:	89 c0       	rjmp	.+274    	; 0x469e <vfprintf+0x358>
    458c:	9c 2c       	mov	r9, r12
    458e:	82 14       	cp	r8, r2
    4590:	18 f4       	brcc	.+6      	; 0x4598 <vfprintf+0x252>
    4592:	2c 0c       	add	r2, r12
    4594:	92 2c       	mov	r9, r2
    4596:	98 18       	sub	r9, r8
    4598:	44 fe       	sbrs	r4, 4
    459a:	8b c0       	rjmp	.+278    	; 0x46b2 <vfprintf+0x36c>
    459c:	b7 01       	movw	r22, r14
    459e:	80 e3       	ldi	r24, 0x30	; 48
    45a0:	90 e0       	ldi	r25, 0x00	; 0
    45a2:	b2 d0       	rcall	.+356    	; 0x4708 <fputc>
    45a4:	42 fe       	sbrs	r4, 2
    45a6:	08 c0       	rjmp	.+16     	; 0x45b8 <vfprintf+0x272>
    45a8:	88 e7       	ldi	r24, 0x78	; 120
    45aa:	90 e0       	ldi	r25, 0x00	; 0
    45ac:	41 fe       	sbrs	r4, 1
    45ae:	02 c0       	rjmp	.+4      	; 0x45b4 <vfprintf+0x26e>
    45b0:	88 e5       	ldi	r24, 0x58	; 88
    45b2:	90 e0       	ldi	r25, 0x00	; 0
    45b4:	b7 01       	movw	r22, r14
    45b6:	a8 d0       	rcall	.+336    	; 0x4708 <fputc>
    45b8:	c9 14       	cp	r12, r9
    45ba:	08 f4       	brcc	.+2      	; 0x45be <vfprintf+0x278>
    45bc:	86 c0       	rjmp	.+268    	; 0x46ca <vfprintf+0x384>
    45be:	ca 94       	dec	r12
    45c0:	d1 2c       	mov	r13, r1
    45c2:	9f ef       	ldi	r25, 0xFF	; 255
    45c4:	c9 1a       	sub	r12, r25
    45c6:	d9 0a       	sbc	r13, r25
    45c8:	ca 0c       	add	r12, r10
    45ca:	db 1c       	adc	r13, r11
    45cc:	f6 01       	movw	r30, r12
    45ce:	82 91       	ld	r24, -Z
    45d0:	6f 01       	movw	r12, r30
    45d2:	b7 01       	movw	r22, r14
    45d4:	90 e0       	ldi	r25, 0x00	; 0
    45d6:	98 d0       	rcall	.+304    	; 0x4708 <fputc>
    45d8:	ac 14       	cp	r10, r12
    45da:	bd 04       	cpc	r11, r13
    45dc:	b9 f7       	brne	.-18     	; 0x45cc <vfprintf+0x286>
    45de:	57 cf       	rjmp	.-338    	; 0x448e <vfprintf+0x148>
    45e0:	60 81       	ld	r22, Z
    45e2:	71 81       	ldd	r23, Z+1	; 0x01
    45e4:	07 2e       	mov	r0, r23
    45e6:	00 0c       	add	r0, r0
    45e8:	88 0b       	sbc	r24, r24
    45ea:	99 0b       	sbc	r25, r25
    45ec:	0e 5f       	subi	r16, 0xFE	; 254
    45ee:	1f 4f       	sbci	r17, 0xFF	; 255
    45f0:	96 cf       	rjmp	.-212    	; 0x451e <vfprintf+0x1d8>
    45f2:	d3 2c       	mov	r13, r3
    45f4:	e8 94       	clt
    45f6:	d4 f8       	bld	r13, 4
    45f8:	2a e0       	ldi	r18, 0x0A	; 10
    45fa:	30 e0       	ldi	r19, 0x00	; 0
    45fc:	85 37       	cpi	r24, 0x75	; 117
    45fe:	31 f1       	breq	.+76     	; 0x464c <vfprintf+0x306>
    4600:	23 2d       	mov	r18, r3
    4602:	29 7f       	andi	r18, 0xF9	; 249
    4604:	d2 2e       	mov	r13, r18
    4606:	8f 36       	cpi	r24, 0x6F	; 111
    4608:	f9 f0       	breq	.+62     	; 0x4648 <vfprintf+0x302>
    460a:	40 f4       	brcc	.+16     	; 0x461c <vfprintf+0x2d6>
    460c:	88 35       	cpi	r24, 0x58	; 88
    460e:	a1 f0       	breq	.+40     	; 0x4638 <vfprintf+0x2f2>
    4610:	f7 01       	movw	r30, r14
    4612:	86 81       	ldd	r24, Z+6	; 0x06
    4614:	97 81       	ldd	r25, Z+7	; 0x07
    4616:	2b 96       	adiw	r28, 0x0b	; 11
    4618:	e2 e1       	ldi	r30, 0x12	; 18
    461a:	1d c1       	rjmp	.+570    	; 0x4856 <__epilogue_restores__>
    461c:	80 37       	cpi	r24, 0x70	; 112
    461e:	49 f0       	breq	.+18     	; 0x4632 <vfprintf+0x2ec>
    4620:	88 37       	cpi	r24, 0x78	; 120
    4622:	b1 f7       	brne	.-20     	; 0x4610 <vfprintf+0x2ca>
    4624:	d4 fe       	sbrs	r13, 4
    4626:	02 c0       	rjmp	.+4      	; 0x462c <vfprintf+0x2e6>
    4628:	68 94       	set
    462a:	d2 f8       	bld	r13, 2
    462c:	20 e1       	ldi	r18, 0x10	; 16
    462e:	30 e0       	ldi	r19, 0x00	; 0
    4630:	0d c0       	rjmp	.+26     	; 0x464c <vfprintf+0x306>
    4632:	68 94       	set
    4634:	d4 f8       	bld	r13, 4
    4636:	f6 cf       	rjmp	.-20     	; 0x4624 <vfprintf+0x2de>
    4638:	34 fe       	sbrs	r3, 4
    463a:	03 c0       	rjmp	.+6      	; 0x4642 <vfprintf+0x2fc>
    463c:	82 2f       	mov	r24, r18
    463e:	86 60       	ori	r24, 0x06	; 6
    4640:	d8 2e       	mov	r13, r24
    4642:	20 e1       	ldi	r18, 0x10	; 16
    4644:	32 e0       	ldi	r19, 0x02	; 2
    4646:	02 c0       	rjmp	.+4      	; 0x464c <vfprintf+0x306>
    4648:	28 e0       	ldi	r18, 0x08	; 8
    464a:	30 e0       	ldi	r19, 0x00	; 0
    464c:	f8 01       	movw	r30, r16
    464e:	d7 fe       	sbrs	r13, 7
    4650:	0e c0       	rjmp	.+28     	; 0x466e <vfprintf+0x328>
    4652:	60 81       	ld	r22, Z
    4654:	71 81       	ldd	r23, Z+1	; 0x01
    4656:	82 81       	ldd	r24, Z+2	; 0x02
    4658:	93 81       	ldd	r25, Z+3	; 0x03
    465a:	0c 5f       	subi	r16, 0xFC	; 252
    465c:	1f 4f       	sbci	r17, 0xFF	; 255
    465e:	a5 01       	movw	r20, r10
    4660:	83 d0       	rcall	.+262    	; 0x4768 <__ultoa_invert>
    4662:	c8 2e       	mov	r12, r24
    4664:	ca 18       	sub	r12, r10
    4666:	3d 2c       	mov	r3, r13
    4668:	e8 94       	clt
    466a:	37 f8       	bld	r3, 7
    466c:	6c cf       	rjmp	.-296    	; 0x4546 <vfprintf+0x200>
    466e:	60 81       	ld	r22, Z
    4670:	71 81       	ldd	r23, Z+1	; 0x01
    4672:	90 e0       	ldi	r25, 0x00	; 0
    4674:	80 e0       	ldi	r24, 0x00	; 0
    4676:	0e 5f       	subi	r16, 0xFE	; 254
    4678:	1f 4f       	sbci	r17, 0xFF	; 255
    467a:	f1 cf       	rjmp	.-30     	; 0x465e <vfprintf+0x318>
    467c:	42 fc       	sbrc	r4, 2
    467e:	02 c0       	rjmp	.+4      	; 0x4684 <vfprintf+0x33e>
    4680:	83 94       	inc	r8
    4682:	7d cf       	rjmp	.-262    	; 0x457e <vfprintf+0x238>
    4684:	83 94       	inc	r8
    4686:	83 94       	inc	r8
    4688:	7a cf       	rjmp	.-268    	; 0x457e <vfprintf+0x238>
    468a:	84 2d       	mov	r24, r4
    468c:	86 78       	andi	r24, 0x86	; 134
    468e:	09 f4       	brne	.+2      	; 0x4692 <vfprintf+0x34c>
    4690:	76 cf       	rjmp	.-276    	; 0x457e <vfprintf+0x238>
    4692:	f6 cf       	rjmp	.-20     	; 0x4680 <vfprintf+0x33a>
    4694:	b7 01       	movw	r22, r14
    4696:	80 e2       	ldi	r24, 0x20	; 32
    4698:	90 e0       	ldi	r25, 0x00	; 0
    469a:	36 d0       	rcall	.+108    	; 0x4708 <fputc>
    469c:	83 94       	inc	r8
    469e:	82 14       	cp	r8, r2
    46a0:	c8 f3       	brcs	.-14     	; 0x4694 <vfprintf+0x34e>
    46a2:	51 2c       	mov	r5, r1
    46a4:	79 cf       	rjmp	.-270    	; 0x4598 <vfprintf+0x252>
    46a6:	52 2c       	mov	r5, r2
    46a8:	58 18       	sub	r5, r8
    46aa:	82 14       	cp	r8, r2
    46ac:	08 f4       	brcc	.+2      	; 0x46b0 <vfprintf+0x36a>
    46ae:	74 cf       	rjmp	.-280    	; 0x4598 <vfprintf+0x252>
    46b0:	f8 cf       	rjmp	.-16     	; 0x46a2 <vfprintf+0x35c>
    46b2:	84 2d       	mov	r24, r4
    46b4:	86 78       	andi	r24, 0x86	; 134
    46b6:	09 f4       	brne	.+2      	; 0x46ba <vfprintf+0x374>
    46b8:	7f cf       	rjmp	.-258    	; 0x45b8 <vfprintf+0x272>
    46ba:	8b e2       	ldi	r24, 0x2B	; 43
    46bc:	41 fe       	sbrs	r4, 1
    46be:	80 e2       	ldi	r24, 0x20	; 32
    46c0:	47 fc       	sbrc	r4, 7
    46c2:	8d e2       	ldi	r24, 0x2D	; 45
    46c4:	b7 01       	movw	r22, r14
    46c6:	90 e0       	ldi	r25, 0x00	; 0
    46c8:	76 cf       	rjmp	.-276    	; 0x45b6 <vfprintf+0x270>
    46ca:	b7 01       	movw	r22, r14
    46cc:	80 e3       	ldi	r24, 0x30	; 48
    46ce:	90 e0       	ldi	r25, 0x00	; 0
    46d0:	1b d0       	rcall	.+54     	; 0x4708 <fputc>
    46d2:	9a 94       	dec	r9
    46d4:	71 cf       	rjmp	.-286    	; 0x45b8 <vfprintf+0x272>
    46d6:	8f ef       	ldi	r24, 0xFF	; 255
    46d8:	9f ef       	ldi	r25, 0xFF	; 255
    46da:	9d cf       	rjmp	.-198    	; 0x4616 <vfprintf+0x2d0>

000046dc <strnlen_P>:
strnlen_P():
    46dc:	fc 01       	movw	r30, r24
    46de:	05 90       	lpm	r0, Z+
    46e0:	61 50       	subi	r22, 0x01	; 1
    46e2:	70 40       	sbci	r23, 0x00	; 0
    46e4:	01 10       	cpse	r0, r1
    46e6:	d8 f7       	brcc	.-10     	; 0x46de <strnlen_P+0x2>
    46e8:	80 95       	com	r24
    46ea:	90 95       	com	r25
    46ec:	8e 0f       	add	r24, r30
    46ee:	9f 1f       	adc	r25, r31
    46f0:	08 95       	ret

000046f2 <strnlen>:
strnlen():
    46f2:	fc 01       	movw	r30, r24
    46f4:	61 50       	subi	r22, 0x01	; 1
    46f6:	70 40       	sbci	r23, 0x00	; 0
    46f8:	01 90       	ld	r0, Z+
    46fa:	01 10       	cpse	r0, r1
    46fc:	d8 f7       	brcc	.-10     	; 0x46f4 <strnlen+0x2>
    46fe:	80 95       	com	r24
    4700:	90 95       	com	r25
    4702:	8e 0f       	add	r24, r30
    4704:	9f 1f       	adc	r25, r31
    4706:	08 95       	ret

00004708 <fputc>:
fputc():
    4708:	0f 93       	push	r16
    470a:	1f 93       	push	r17
    470c:	cf 93       	push	r28
    470e:	df 93       	push	r29
    4710:	18 2f       	mov	r17, r24
    4712:	09 2f       	mov	r16, r25
    4714:	eb 01       	movw	r28, r22
    4716:	8b 81       	ldd	r24, Y+3	; 0x03
    4718:	81 fd       	sbrc	r24, 1
    471a:	09 c0       	rjmp	.+18     	; 0x472e <fputc+0x26>
    471c:	1f ef       	ldi	r17, 0xFF	; 255
    471e:	0f ef       	ldi	r16, 0xFF	; 255
    4720:	81 2f       	mov	r24, r17
    4722:	90 2f       	mov	r25, r16
    4724:	df 91       	pop	r29
    4726:	cf 91       	pop	r28
    4728:	1f 91       	pop	r17
    472a:	0f 91       	pop	r16
    472c:	08 95       	ret
    472e:	82 ff       	sbrs	r24, 2
    4730:	14 c0       	rjmp	.+40     	; 0x475a <fputc+0x52>
    4732:	2e 81       	ldd	r18, Y+6	; 0x06
    4734:	3f 81       	ldd	r19, Y+7	; 0x07
    4736:	8c 81       	ldd	r24, Y+4	; 0x04
    4738:	9d 81       	ldd	r25, Y+5	; 0x05
    473a:	28 17       	cp	r18, r24
    473c:	39 07       	cpc	r19, r25
    473e:	3c f4       	brge	.+14     	; 0x474e <fputc+0x46>
    4740:	e8 81       	ld	r30, Y
    4742:	f9 81       	ldd	r31, Y+1	; 0x01
    4744:	cf 01       	movw	r24, r30
    4746:	01 96       	adiw	r24, 0x01	; 1
    4748:	88 83       	st	Y, r24
    474a:	99 83       	std	Y+1, r25	; 0x01
    474c:	10 83       	st	Z, r17
    474e:	8e 81       	ldd	r24, Y+6	; 0x06
    4750:	9f 81       	ldd	r25, Y+7	; 0x07
    4752:	01 96       	adiw	r24, 0x01	; 1
    4754:	8e 83       	std	Y+6, r24	; 0x06
    4756:	9f 83       	std	Y+7, r25	; 0x07
    4758:	e3 cf       	rjmp	.-58     	; 0x4720 <fputc+0x18>
    475a:	e8 85       	ldd	r30, Y+8	; 0x08
    475c:	f9 85       	ldd	r31, Y+9	; 0x09
    475e:	81 2f       	mov	r24, r17
    4760:	09 95       	icall
    4762:	89 2b       	or	r24, r25
    4764:	a1 f3       	breq	.-24     	; 0x474e <fputc+0x46>
    4766:	da cf       	rjmp	.-76     	; 0x471c <fputc+0x14>

00004768 <__ultoa_invert>:
__ultoa_invert():
    4768:	fa 01       	movw	r30, r20
    476a:	aa 27       	eor	r26, r26
    476c:	28 30       	cpi	r18, 0x08	; 8
    476e:	51 f1       	breq	.+84     	; 0x47c4 <__ultoa_invert+0x5c>
    4770:	20 31       	cpi	r18, 0x10	; 16
    4772:	81 f1       	breq	.+96     	; 0x47d4 <__ultoa_invert+0x6c>
    4774:	e8 94       	clt
    4776:	6f 93       	push	r22
    4778:	6e 7f       	andi	r22, 0xFE	; 254
    477a:	6e 5f       	subi	r22, 0xFE	; 254
    477c:	7f 4f       	sbci	r23, 0xFF	; 255
    477e:	8f 4f       	sbci	r24, 0xFF	; 255
    4780:	9f 4f       	sbci	r25, 0xFF	; 255
    4782:	af 4f       	sbci	r26, 0xFF	; 255
    4784:	b1 e0       	ldi	r27, 0x01	; 1
    4786:	3e d0       	rcall	.+124    	; 0x4804 <__ultoa_invert+0x9c>
    4788:	b4 e0       	ldi	r27, 0x04	; 4
    478a:	3c d0       	rcall	.+120    	; 0x4804 <__ultoa_invert+0x9c>
    478c:	67 0f       	add	r22, r23
    478e:	78 1f       	adc	r23, r24
    4790:	89 1f       	adc	r24, r25
    4792:	9a 1f       	adc	r25, r26
    4794:	a1 1d       	adc	r26, r1
    4796:	68 0f       	add	r22, r24
    4798:	79 1f       	adc	r23, r25
    479a:	8a 1f       	adc	r24, r26
    479c:	91 1d       	adc	r25, r1
    479e:	a1 1d       	adc	r26, r1
    47a0:	6a 0f       	add	r22, r26
    47a2:	71 1d       	adc	r23, r1
    47a4:	81 1d       	adc	r24, r1
    47a6:	91 1d       	adc	r25, r1
    47a8:	a1 1d       	adc	r26, r1
    47aa:	20 d0       	rcall	.+64     	; 0x47ec <__ultoa_invert+0x84>
    47ac:	09 f4       	brne	.+2      	; 0x47b0 <__ultoa_invert+0x48>
    47ae:	68 94       	set
    47b0:	3f 91       	pop	r19
    47b2:	2a e0       	ldi	r18, 0x0A	; 10
    47b4:	26 9f       	mul	r18, r22
    47b6:	11 24       	eor	r1, r1
    47b8:	30 19       	sub	r19, r0
    47ba:	30 5d       	subi	r19, 0xD0	; 208
    47bc:	31 93       	st	Z+, r19
    47be:	de f6       	brtc	.-74     	; 0x4776 <__ultoa_invert+0xe>
    47c0:	cf 01       	movw	r24, r30
    47c2:	08 95       	ret
    47c4:	46 2f       	mov	r20, r22
    47c6:	47 70       	andi	r20, 0x07	; 7
    47c8:	40 5d       	subi	r20, 0xD0	; 208
    47ca:	41 93       	st	Z+, r20
    47cc:	b3 e0       	ldi	r27, 0x03	; 3
    47ce:	0f d0       	rcall	.+30     	; 0x47ee <__ultoa_invert+0x86>
    47d0:	c9 f7       	brne	.-14     	; 0x47c4 <__ultoa_invert+0x5c>
    47d2:	f6 cf       	rjmp	.-20     	; 0x47c0 <__ultoa_invert+0x58>
    47d4:	46 2f       	mov	r20, r22
    47d6:	4f 70       	andi	r20, 0x0F	; 15
    47d8:	40 5d       	subi	r20, 0xD0	; 208
    47da:	4a 33       	cpi	r20, 0x3A	; 58
    47dc:	18 f0       	brcs	.+6      	; 0x47e4 <__ultoa_invert+0x7c>
    47de:	49 5d       	subi	r20, 0xD9	; 217
    47e0:	31 fd       	sbrc	r19, 1
    47e2:	40 52       	subi	r20, 0x20	; 32
    47e4:	41 93       	st	Z+, r20
    47e6:	02 d0       	rcall	.+4      	; 0x47ec <__ultoa_invert+0x84>
    47e8:	a9 f7       	brne	.-22     	; 0x47d4 <__ultoa_invert+0x6c>
    47ea:	ea cf       	rjmp	.-44     	; 0x47c0 <__ultoa_invert+0x58>
    47ec:	b4 e0       	ldi	r27, 0x04	; 4
    47ee:	a6 95       	lsr	r26
    47f0:	97 95       	ror	r25
    47f2:	87 95       	ror	r24
    47f4:	77 95       	ror	r23
    47f6:	67 95       	ror	r22
    47f8:	ba 95       	dec	r27
    47fa:	c9 f7       	brne	.-14     	; 0x47ee <__ultoa_invert+0x86>
    47fc:	00 97       	sbiw	r24, 0x00	; 0
    47fe:	61 05       	cpc	r22, r1
    4800:	71 05       	cpc	r23, r1
    4802:	08 95       	ret
    4804:	9b 01       	movw	r18, r22
    4806:	ac 01       	movw	r20, r24
    4808:	0a 2e       	mov	r0, r26
    480a:	06 94       	lsr	r0
    480c:	57 95       	ror	r21
    480e:	47 95       	ror	r20
    4810:	37 95       	ror	r19
    4812:	27 95       	ror	r18
    4814:	ba 95       	dec	r27
    4816:	c9 f7       	brne	.-14     	; 0x480a <__ultoa_invert+0xa2>
    4818:	62 0f       	add	r22, r18
    481a:	73 1f       	adc	r23, r19
    481c:	84 1f       	adc	r24, r20
    481e:	95 1f       	adc	r25, r21
    4820:	a0 1d       	adc	r26, r0
    4822:	08 95       	ret

00004824 <__prologue_saves__>:
__prologue_saves__():
    4824:	2f 92       	push	r2
    4826:	3f 92       	push	r3
    4828:	4f 92       	push	r4
    482a:	5f 92       	push	r5
    482c:	6f 92       	push	r6
    482e:	7f 92       	push	r7
    4830:	8f 92       	push	r8
    4832:	9f 92       	push	r9
    4834:	af 92       	push	r10
    4836:	bf 92       	push	r11
    4838:	cf 92       	push	r12
    483a:	df 92       	push	r13
    483c:	ef 92       	push	r14
    483e:	ff 92       	push	r15
    4840:	0f 93       	push	r16
    4842:	1f 93       	push	r17
    4844:	cf 93       	push	r28
    4846:	df 93       	push	r29
    4848:	cd b7       	in	r28, 0x3d	; 61
    484a:	de b7       	in	r29, 0x3e	; 62
    484c:	ca 1b       	sub	r28, r26
    484e:	db 0b       	sbc	r29, r27
    4850:	cd bf       	out	0x3d, r28	; 61
    4852:	de bf       	out	0x3e, r29	; 62
    4854:	09 94       	ijmp

00004856 <__epilogue_restores__>:
__epilogue_restores__():
    4856:	2a 88       	ldd	r2, Y+18	; 0x12
    4858:	39 88       	ldd	r3, Y+17	; 0x11
    485a:	48 88       	ldd	r4, Y+16	; 0x10
    485c:	5f 84       	ldd	r5, Y+15	; 0x0f
    485e:	6e 84       	ldd	r6, Y+14	; 0x0e
    4860:	7d 84       	ldd	r7, Y+13	; 0x0d
    4862:	8c 84       	ldd	r8, Y+12	; 0x0c
    4864:	9b 84       	ldd	r9, Y+11	; 0x0b
    4866:	aa 84       	ldd	r10, Y+10	; 0x0a
    4868:	b9 84       	ldd	r11, Y+9	; 0x09
    486a:	c8 84       	ldd	r12, Y+8	; 0x08
    486c:	df 80       	ldd	r13, Y+7	; 0x07
    486e:	ee 80       	ldd	r14, Y+6	; 0x06
    4870:	fd 80       	ldd	r15, Y+5	; 0x05
    4872:	0c 81       	ldd	r16, Y+4	; 0x04
    4874:	1b 81       	ldd	r17, Y+3	; 0x03
    4876:	aa 81       	ldd	r26, Y+2	; 0x02
    4878:	b9 81       	ldd	r27, Y+1	; 0x01
    487a:	ce 0f       	add	r28, r30
    487c:	d1 1d       	adc	r29, r1
    487e:	cd bf       	out	0x3d, r28	; 61
    4880:	de bf       	out	0x3e, r29	; 62
    4882:	ed 01       	movw	r28, r26
    4884:	08 95       	ret

00004886 <__udivmodhi4>:
__udivmodhi4():
    4886:	aa 1b       	sub	r26, r26
    4888:	bb 1b       	sub	r27, r27
    488a:	51 e1       	ldi	r21, 0x11	; 17
    488c:	07 c0       	rjmp	.+14     	; 0x489c <__udivmodhi4_ep>

0000488e <__udivmodhi4_loop>:
    488e:	aa 1f       	adc	r26, r26
    4890:	bb 1f       	adc	r27, r27
    4892:	a6 17       	cp	r26, r22
    4894:	b7 07       	cpc	r27, r23
    4896:	10 f0       	brcs	.+4      	; 0x489c <__udivmodhi4_ep>
    4898:	a6 1b       	sub	r26, r22
    489a:	b7 0b       	sbc	r27, r23

0000489c <__udivmodhi4_ep>:
    489c:	88 1f       	adc	r24, r24
    489e:	99 1f       	adc	r25, r25
    48a0:	5a 95       	dec	r21
    48a2:	a9 f7       	brne	.-22     	; 0x488e <__udivmodhi4_loop>
    48a4:	80 95       	com	r24
    48a6:	90 95       	com	r25
    48a8:	bc 01       	movw	r22, r24
    48aa:	cd 01       	movw	r24, r26
    48ac:	08 95       	ret

000048ae <__udivmodsi4>:
__udivmodsi4():
    48ae:	a1 e2       	ldi	r26, 0x21	; 33
    48b0:	1a 2e       	mov	r1, r26
    48b2:	aa 1b       	sub	r26, r26
    48b4:	bb 1b       	sub	r27, r27
    48b6:	fd 01       	movw	r30, r26
    48b8:	0d c0       	rjmp	.+26     	; 0x48d4 <__udivmodsi4_ep>

000048ba <__udivmodsi4_loop>:
    48ba:	aa 1f       	adc	r26, r26
    48bc:	bb 1f       	adc	r27, r27
    48be:	ee 1f       	adc	r30, r30
    48c0:	ff 1f       	adc	r31, r31
    48c2:	a2 17       	cp	r26, r18
    48c4:	b3 07       	cpc	r27, r19
    48c6:	e4 07       	cpc	r30, r20
    48c8:	f5 07       	cpc	r31, r21
    48ca:	20 f0       	brcs	.+8      	; 0x48d4 <__udivmodsi4_ep>
    48cc:	a2 1b       	sub	r26, r18
    48ce:	b3 0b       	sbc	r27, r19
    48d0:	e4 0b       	sbc	r30, r20
    48d2:	f5 0b       	sbc	r31, r21

000048d4 <__udivmodsi4_ep>:
    48d4:	66 1f       	adc	r22, r22
    48d6:	77 1f       	adc	r23, r23
    48d8:	88 1f       	adc	r24, r24
    48da:	99 1f       	adc	r25, r25
    48dc:	1a 94       	dec	r1
    48de:	69 f7       	brne	.-38     	; 0x48ba <__udivmodsi4_loop>
    48e0:	60 95       	com	r22
    48e2:	70 95       	com	r23
    48e4:	80 95       	com	r24
    48e6:	90 95       	com	r25
    48e8:	9b 01       	movw	r18, r22
    48ea:	ac 01       	movw	r20, r24
    48ec:	bd 01       	movw	r22, r26
    48ee:	cf 01       	movw	r24, r30
    48f0:	08 95       	ret

000048f2 <__divmodsi4>:
__divmodsi4():
    48f2:	05 2e       	mov	r0, r21
    48f4:	97 fb       	bst	r25, 7
    48f6:	16 f4       	brtc	.+4      	; 0x48fc <__divmodsi4+0xa>
    48f8:	00 94       	com	r0
    48fa:	0f d0       	rcall	.+30     	; 0x491a <__negsi2>
    48fc:	57 fd       	sbrc	r21, 7
    48fe:	05 d0       	rcall	.+10     	; 0x490a <__divmodsi4_neg2>
    4900:	d6 df       	rcall	.-84     	; 0x48ae <__udivmodsi4>
    4902:	07 fc       	sbrc	r0, 7
    4904:	02 d0       	rcall	.+4      	; 0x490a <__divmodsi4_neg2>
    4906:	46 f4       	brtc	.+16     	; 0x4918 <__divmodsi4_exit>
    4908:	08 c0       	rjmp	.+16     	; 0x491a <__negsi2>

0000490a <__divmodsi4_neg2>:
    490a:	50 95       	com	r21
    490c:	40 95       	com	r20
    490e:	30 95       	com	r19
    4910:	21 95       	neg	r18
    4912:	3f 4f       	sbci	r19, 0xFF	; 255
    4914:	4f 4f       	sbci	r20, 0xFF	; 255
    4916:	5f 4f       	sbci	r21, 0xFF	; 255

00004918 <__divmodsi4_exit>:
    4918:	08 95       	ret

0000491a <__negsi2>:
__negsi2():
    491a:	90 95       	com	r25
    491c:	80 95       	com	r24
    491e:	70 95       	com	r23
    4920:	61 95       	neg	r22
    4922:	7f 4f       	sbci	r23, 0xFF	; 255
    4924:	8f 4f       	sbci	r24, 0xFF	; 255
    4926:	9f 4f       	sbci	r25, 0xFF	; 255
    4928:	08 95       	ret

0000492a <__bswapsi2>:
__bswapsi2():
    492a:	69 27       	eor	r22, r25
    492c:	96 27       	eor	r25, r22
    492e:	69 27       	eor	r22, r25
    4930:	78 27       	eor	r23, r24
    4932:	87 27       	eor	r24, r23
    4934:	78 27       	eor	r23, r24
    4936:	08 95       	ret

00004938 <__tablejump2__>:
__tablejump2__():
    4938:	ee 0f       	add	r30, r30
    493a:	ff 1f       	adc	r31, r31
    493c:	05 90       	lpm	r0, Z+
    493e:	f4 91       	lpm	r31, Z
    4940:	e0 2d       	mov	r30, r0
    4942:	09 94       	ijmp

00004944 <memcmp>:
memcmp():
    4944:	fb 01       	movw	r30, r22
    4946:	dc 01       	movw	r26, r24
    4948:	04 c0       	rjmp	.+8      	; 0x4952 <memcmp+0xe>
    494a:	8d 91       	ld	r24, X+
    494c:	01 90       	ld	r0, Z+
    494e:	80 19       	sub	r24, r0
    4950:	21 f4       	brne	.+8      	; 0x495a <memcmp+0x16>
    4952:	41 50       	subi	r20, 0x01	; 1
    4954:	50 40       	sbci	r21, 0x00	; 0
    4956:	c8 f7       	brcc	.-14     	; 0x494a <memcmp+0x6>
    4958:	88 1b       	sub	r24, r24
    495a:	99 0b       	sbc	r25, r25
    495c:	08 95       	ret

0000495e <memcpy>:
memcpy():
    495e:	fb 01       	movw	r30, r22
    4960:	dc 01       	movw	r26, r24
    4962:	02 c0       	rjmp	.+4      	; 0x4968 <memcpy+0xa>
    4964:	01 90       	ld	r0, Z+
    4966:	0d 92       	st	X+, r0
    4968:	41 50       	subi	r20, 0x01	; 1
    496a:	50 40       	sbci	r21, 0x00	; 0
    496c:	d8 f7       	brcc	.-10     	; 0x4964 <memcpy+0x6>
    496e:	08 95       	ret

00004970 <memset>:
memset():
    4970:	dc 01       	movw	r26, r24
    4972:	01 c0       	rjmp	.+2      	; 0x4976 <memset+0x6>
    4974:	6d 93       	st	X+, r22
    4976:	41 50       	subi	r20, 0x01	; 1
    4978:	50 40       	sbci	r21, 0x00	; 0
    497a:	e0 f7       	brcc	.-8      	; 0x4974 <memset+0x4>
    497c:	08 95       	ret

0000497e <_exit>:
exit():
    497e:	f8 94       	cli

00004980 <__stop_program>:
__stop_program():
    4980:	ff cf       	rjmp	.-2      	; 0x4980 <__stop_program>

Disassembly of section .nvmem:

00004a06 <.nvmem>:
	...

Disassembly of section .eeprom:

00810000 <_EEP>:
  810000:	ff ff ff ff ff ff ff ff                             ........

Disassembly of section .fuse:

00820000 <__fuse>:
  820000:	00 00 00 00 00 d1 08 00 00 00 03 00                 ............
